# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC_v2.h"
#ifndef _DAC_V2_H_
#define _DAC_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
#include "UFO.h"





typedef enum
{

    E_DAC_GET_LIBVER,
    E_DAC_GET_INFO,
    E_DAC_GET_STATUS,
    E_DAC_SET_DBG_LEVEL,
    E_DAC_INIT,
    E_DAC_ENABLE,
    E_DAC_SET_CLKINV,
    E_DAC_SET_YPBPR_OUTPUTTIMING,
    E_DAC_SET_OUTPUT_SOURCE,
    E_DAC_SET_OUTPUT_LEVEL,
    E_DAC_SET_OUTPUT_SWAPSEL,
    E_DAC_ONOFF_SD,
    E_DAC_ONOFF_HD,
    E_DAC_CLKSEL,
    E_DAC_DUMP_TABLE,
    E_DAC_EXIT,
    E_DAC_SET_IHALF_OUTPUT,
    E_DAC_SET_QUART_OUTPUT,
    E_DAC_SET_DAC_STATE,
    E_DAC_HOTPLUG_DETECT,
    E_DAC_SET_POWER_STATE,
    E_DAC_GET_GETOUTPUTINTERLACETIMING,
    E_DAC_SET_WSSONOFF,
    E_DAC_RESET_WSSDATA,
    E_DAC_SET_WSSOUTPUT,
    E_DAC_GET_SD_STATUS,
    E_DAC_GET_HD_STATUS,
    E_DAC_GET_WSSSTATUS,
    E_DAC_ENABLE_ICT,
    E_DAC_SET_VGA_HSYNCVSYNC,
}E_DAC_IOCTL_CMDS;;

typedef struct DLL_PACKED
{
    const MSIF_Version **ppVersion;
    APIDAC_Result eReturnValue;
} stDAC_GET_LIBVER,*pstDAC_GET_LIBVER;

typedef struct DLL_PACKED
{
    const DAC_ApiInfo* stReturnValue;
} stDAC_GET_INFO, *pstDAC_GET_INFO;

#ifdef UFO_XC_GETOUTPUTINTELACETIMING
typedef struct
{
    MS_BOOL bReturnValue;
} stDAC_GET_OUTPUTINTERLACETIMING, *pstDAC_GET_OUTPUTINTERLACETIMING;
#endif

typedef struct DLL_PACKED
{
    DAC_ApiStatus* pDacStatus;
    MS_BOOL bReturnValue;
} stDAC_GET_STATUS,*pstDAC_GET_STATUS;

typedef struct
{
    MS_U16 u16DbgSwitch;
    MS_BOOL bReturnValue;
} stDAC_SET_DBG_LEVEL,*pstDAC_SET_DBG_LEVEL;

typedef struct
{
    MS_BOOL bReturnValue;
} stDAC_INIT,*pstDAC_INIT;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPr;
} stDAC_ENABLE, *pstDAC_ENABLE;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPr;
} stDAC_SET_CLKINV, *pstDAC_SET_CLKINV;

typedef struct
{
    E_OUTPUT_VIDEO_TIMING_TYPE eTiming;
} stDAC_SET_YPBPR_OUTPUTTIMING,*pstDAC_SET_YPBPR_OUTPUTTIMING;

typedef struct
{
    E_DAC_OUTPUT_TYPE enOutputType;
    MS_BOOL bIsYPbPr;
} stDAC_SET_OUTPUT_SOURCE,*pstDAC_SET_OUTPUT_SOURCE;

typedef struct
{
    E_DAC_MAX_OUTPUT_LEVEL enLevel;
    MS_BOOL bIsYPbPr;
} stXC_SET_OUTPUT_LEVEL, *pstXC_SET_OUTPUT_LEVEL;

typedef struct
{
    E_DAC_MAX_OUTPUT_LEVEL enLevel;
    MS_BOOL bIsYPbPr;
} stDAC_SET_OUTPUT_LEVEL, *pstDAC_SET_OUTPUT_LEVEL;

typedef struct
{
    E_DAC_SWAP_SEL enSwap;
    MS_BOOL bIsYPbPr;
} stDAC_SET_OUTPUT_SWAPSEL, *pstDAC_SET_OUTPUT_SWAPSEL;

typedef struct
{
    E_DAC_SD_ENABLE_CTRL enBit;
} stDAC_ONOFF_SD,*pstDAC_ONOFF_SD;

typedef struct
{
    E_DAC_SD_ENABLE_CTRL enBit;
} stDAC_GET_SD_STATUS,*pstDAC_GET_SD_STATUS;

typedef struct
{
    E_DAC_HD_ENABLE_CTRL enBit;
} stDAC_ONOFF_HD, *pstDAC_ONOFF_HD;

typedef struct
{
    E_DAC_HD_ENABLE_CTRL enBit;
} stDAC_GET_HD_STATUS,*pstDAC_GET_HD_STATUS;

typedef struct
{
    E_OUTPUT_VIDEO_TIMING_TYPE eTiming;
    E_OUTPUT_BIT_TYPE ebits;
} stDAC_CLKSEL, *pstDAC_CLKSEL;

typedef struct DLL_PACKED
{
    MS_U8 *pDACTable;
    MS_U8 u8DACtype;
} stDAC_DUMP_TABLE, *pstDAC_DUMP_TABLE;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPr;
} stDAC_SET_IHALF_OUTPUT, *pstDAC_SET_IHALF_OUTPUT;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPr;
} stDAC_SET_QUART_OUTPUT, *pstDAC_SET_QUART_OUTPUT;

typedef struct
{
    MS_BOOL bEnabled;
    MS_BOOL bIsYPbPr;
} stDAC_SET_DAC_STATE, *pstDAC_SET_DAC_STATE;

typedef struct DLL_PACKED
{
    E_DAC_DETECT SelDAC;
    E_DAC_DETECT_TYPE DetectType;
    MS_BOOL *State;
    MS_BOOL bReturnValue;
} stDAC_HOTPLUG_DETECT, *pstDAC_HOTPLUG_DETECT;

typedef struct
{
    E_DAC_POWER_MODE ePowerState;
    MS_U32 stReturnValue;
} stDAC_POWER_MODE, *pstDAC_POWER_MODE;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPr;
    MS_BOOL bReturnValue;
} stDAC_SET_WSSONOFF, *pstDAC_SET_WSSONOFF;

typedef struct
{
    MS_BOOL bIsYPbPr;
    MS_BOOL *pEnable;
    DAC_SETWSS_INFO *pSetWSS_Data;
    MS_BOOL bReturnValue;
} stDAC_GET_WSSSTATUS, *pstDAC_GET_WSSSTATUS;

typedef struct
{
    MS_BOOL bIsYPbPr;
    MS_BOOL bReturnValue;
} stDAC_RESET_WSSDATA, *pstDAC_RESET_WSSDATA;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPr;
    DAC_SETWSS_INFO SetWSS_Data;
    MS_BOOL bReturnValue;
} stDAC_SET_WSSOUTPUT, *pstDAC_SET_WSSOUTPUT;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bReturnValue;
} stDAC_ENABLE_ICT, *pstDAC_ENABLE_ICT;

typedef struct
{
    MS_BOOL bEnable;
} stDAC_SET_VGA_HsyncVsync, *pstDAC_SET_VGA_HSYNCVSYNC;


#ifdef __cplusplus
}
#endif

#endif
# 228 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
#ifndef _API_XC_H_
#define _API_XC_H_ 

#include "MsDevice.h"

#include "drvXC_IOPort.h"
#include "UFO.h"


#ifdef __cplusplus
extern "C"
{
#endif
#ifdef MVIDEO_C
#define INTERFACE 
#else
#define INTERFACE extern
#endif







#ifdef MSOS_TYPE_LINUX_KERNEL
#define SYMBOL_WEAK 
#else
#define SYMBOL_WEAK __attribute__((weak))
#endif

#define MSIF_XC_LIB_CODE {'X','C','_','_'}
#define MSIF_XC_LIBVER {'0','9'}
#define MSIF_XC_BUILDNUM {'1','0'}
#define MSIF_XC_CHANGELIST {'0','0','7','0','9','8','0','1'}
#define XC_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_XC_LIB_CODE , \
    MSIF_XC_LIBVER , \
    MSIF_XC_BUILDNUM , \
    MSIF_XC_CHANGELIST, \
    MSIF_OS

#define XC_INITDATA_VERSION 1
#define XC_OUTPUT_TIMING_ADJUST_VERSION 1

#define PANEL_INFO_EX_VERSION 2

#define HW2DTO3DPARA_VERSION 2

#define DETECT3DFORMATPARA_VERSION 1



#if defined(UFO_PUBLIC_HEADER_300)
#define API_XCSTATUS_EX_VERSION 4
#elif defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
#define API_XCSTATUS_EX_VERSION 5
#else
#define API_XCSTATUS_EX_VERSION 9
#endif
#define API_STATUS_EX_VERSION API_XCSTATUS_EX_VERSION


#define XC_3D_FPINFOPARA_VERSION 1

#define XC_REPORT_PIXELINFO_VERSION 1


#define XC_OPTEE_HANDLER_VERSION 1

#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_300)
#define API_XCDS_INFO_VERSION 4
#else
#define API_XCDS_INFO_VERSION 3
#endif
#define API_DS_INFO_VERSION API_XCDS_INFO_VERSION


#define ODSC_DISPINFO_VERSIN 1

#define XC_INVALID_HEAP_ID 0xFFFFFFFF

#define MAX_FRC_TABLE_INDEX 10

#define _BIT(_bit_) (1 << (_bit_))






typedef enum
{
    E_APIXC_RET_FAIL = 0,
    E_APIXC_RET_OK,
    E_APIXC_RET_FAIL_FUN_NOT_SUPPORT,
    E_APIXC_RET_FAIL_ENUM_NOT_SUPPORT,
    E_APIXC_RET_FAIL_INVALID_PARAMETER,
} E_APIXC_ReturnValue;




#define XC_DBGLEVEL_OFF (0x0000)
#define XC_DBGLEVEL_SETWINDOW (0x0001)
#define XC_DBGLEVEL_SETTIMING (0x0002)
#define XC_DBGLEVEL_SYNCDETECT (0x0004)
#define XC_DBGLEVEL_MUX (0x0008)
#define XC_DBGLEVEL_MODEPARSE (0x0010)
#define XC_DBGLEVEL_HDMIMONITOR (0x0020)
#define XC_DBGLEVEL_AUTOGEOMETRY (0x0040)
#define XC_DGBLEVEL_CROPCALC (0x0080)

#define XC_DBGLEVEL_SETTIMING_ISR (0x0100)
#define XC_DBGLEVEL_DWIN_SETWINDOW (0x0200)
#define XC_DBGLEVEL_FUNCTION_TRACE (0x0400)
#define XC_DBGLEVEL_PARAMETER_TRACE (0x0800)

#define XC_DBGLEVEL_SEAMLESSZAP (0x1000)
#define XC_DBGLEVEL_ATVTiming (0x2000)




#define XC_MD_VSYNC_POR_BIT _BIT(0)
#define XC_MD_HSYNC_POR_BIT _BIT(1)
#define XC_MD_HSYNC_LOSS_BIT _BIT(2)
#define XC_MD_VSYNC_LOSS_BIT _BIT(3)
#define XC_MD_INTERLACE_BIT _BIT(4)
#define XC_MD_USER_MODE_BIT _BIT(7)
#define XC_MD_SYNC_LOSS (XC_MD_HSYNC_LOSS_BIT | XC_MD_VSYNC_LOSS_BIT)




#define DOUBLEHD_PRESCALE_VONEHDSIZE (540)

#define DOUBLEHD_1080X2I_FRAME_VSIZE (1080)
#define DOUBLEHD_1080X2I_FIELD_VSIZE (540)
#define DOUBLEHD_1080X2I_HSIZE (1920)
#define DOUBLEHD_1080X2I_VACT_SPACE1 (23)
#define DOUBLEHD_1080X2I_VACT_SPACE2 (22)
#define DOUBLEHD_1080X2I_VSIZE (DOUBLEHD_1080X2I_FRAME_VSIZE*2+DOUBLEHD_1080X2I_VACT_SPACE1*2+DOUBLEHD_1080X2I_VACT_SPACE2)

#define DOUBLEHD_1080X2I_50_VACT_SPACE1 (85)
#define DOUBLEHD_1080X2I_50_VACT_SPACE2 (85)
#define DOUBLEHD_1080X2I_50_VSIZE (DOUBLEHD_1080X2I_FRAME_VSIZE*2+DOUBLEHD_1080X2I_50_VACT_SPACE1*2+DOUBLEHD_1080X2I_50_VACT_SPACE1)

#define DOUBLEHD_576X2I_FRAME_VSIZE (576)
#define DOUBLEHD_576X2I_FIELD_VSIZE (288)
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3) ||defined(UFO_PUBLIC_HEADER_700)
#define DOUBLEHD_576X2I_HSIZE (720)
#else
#define DOUBLEHD_576X2I_HSIZE (1440)
#endif
#define DOUBLEHD_576X2I_VACT_SPACE1 (25)
#define DOUBLEHD_576X2I_VACT_SPACE2 (24)
#define DOUBLEHD_576X2I_VSIZE (DOUBLEHD_576X2I_FRAME_VSIZE*2+DOUBLEHD_576X2I_VACT_SPACE1*2+DOUBLEHD_576X2I_VACT_SPACE2)


#define DOUBLEHD_480X2I_FRAME_VSIZE (480)
#define DOUBLEHD_480X2I_FIELD_VSIZE (240)
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3) ||defined(UFO_PUBLIC_HEADER_700)
#define DOUBLEHD_480X2I_HSIZE (720)
#else
#define DOUBLEHD_480X2I_HSIZE (1440)
#endif
#define DOUBLEHD_480X2I_VACT_SPACE1 (23)
#define DOUBLEHD_480X2I_VACT_SPACE2 (22)
#define DOUBLEHD_480X2I_VSIZE (DOUBLEHD_480X2I_FRAME_VSIZE*2+DOUBLEHD_480X2I_VACT_SPACE1*2+DOUBLEHD_480X2I_VACT_SPACE2)

#define DOUBLEHD_1080X2P_VSIZE (2205)
#define DOUBLEHD_1080X2P_FRAME_VSIZE (1080)
#define DOUBLEHD_1080X2P_HSIZE (1920)
#define DOUBLEHD_1080X2P_GARBAGE_VSIZE (45)

#define DOUBLEHD_720X2P_VSIZE (1470)
#define DOUBLEHD_720X2P_FRAME_VSIZE (720)
#define DOUBLEHD_720X2P_HSIZE (1280)
#define DOUBLEHD_720X2P_GARBAGE_VSIZE (30)

#define DOUBLEHD_576X2P_VSIZE (1201)
#define DOUBLEHD_576X2P_FRAME_VSIZE (576)
#define DOUBLEHD_576X2P_HSIZE (720)
#define DOUBLEHD_576X2P_GARBAGE_VSIZE (49)


#define DOUBLEHD_480X2P_VSIZE (1005)
#define DOUBLEHD_480X2P_FRAME_VSIZE (480)
#define DOUBLEHD_480X2P_HSIZE (720)
#define DOUBLEHD_480X2P_GARBAGE_VSIZE (45)


#define DOUBLEHD_640_480X2P_VSIZE (1005)
#define DOUBLEHD_640_480X2P_FRAME_VSIZE (480)
#define DOUBLEHD_640_480X2P_HSIZE (640)
#define DOUBLEHD_640_480X2P_GARBAGE_VSIZE (45)

#define DOUBLEHD_288X2P_VSIZE (600)
#define DOUBLEHD_288X2P_FRAME_VSIZE (288)
#define DOUBLEHD_288X2P_HSIZE (1440)
#define DOUBLEHD_288X2P_GARBAGE_VSIZE (24)

#define DOUBLEHD_240X2P_VSIZE (502)
#define DOUBLEHD_240X2P_FRAME_VSIZE (240)
#define DOUBLEHD_240X2P_HSIZE (1440)
#define DOUBLEHD_240X2P_GARBAGE_VSIZE (22)

#define DOUBLEHD_240X2P_1_VSIZE (503)
#define DOUBLEHD_240X2P_1_FRAME_VSIZE (240)
#define DOUBLEHD_240X2P_1_HSIZE (1440)
#define DOUBLEHD_240X2P_1_GARBAGE_VSIZE (23)


#define FIELD_INTERLEAVE_1080X2I_FRAME_VSIZE (1080)
#define FIELD_INTERLEAVE_1080X2I_FIELD_VISZE (540)
#define FIELD_INTERLEAVE_1080X2I_HISZE (1920)
#define FIELD_INTERLEAVE_1080X2I_VACT_SPACE (23)
#define FIELD_INTERLEAVE_1080X2I_VISZE (FIELD_INTERLEAVE_1080X2I_FRAME_VSIZE+FIELD_INTERLEAVE_1080X2I_VACT_SPACE)

#define FIELD_INTERLEAVE_576X2I_FRAME_VSIZE (576)
#define FIELD_INTERLEAVE_576X2I_FIELD_VISZE (288)
#define FIELD_INTERLEAVE_576X2I_HISZE (1440)
#define FIELD_INTERLEAVE_576X2I_VACT_SPACE (25)
#define FIELD_INTERLEAVE_576X2I_VISZE (FIELD_INTERLEAVE_576X2I_FRAME_VSIZE+FIELD_INTERLEAVE_576X2I_VACT_SPACE)

#define FIELD_INTERLEAVE_480X2I_FRAME_VSIZE (480)
#define FIELD_INTERLEAVE_480X2I_FIELD_VISZE (240)
#define FIELD_INTERLEAVE_480X2I_HISZE (1440)
#define FIELD_INTERLEAVE_480X2I_VACT_SPACE (23)
#define FIELD_INTERLEAVE_480X2I_VISZE (FIELD_INTERLEAVE_480X2I_FRAME_VSIZE+FIELD_INTERLEAVE_480X2I_VACT_SPACE)


#define PANEL_INFO_EX_INVALID_ALL 0xFFFF



#if defined(UFO_PUBLIC_HEADER_700)
INTERFACE void* pu32XC_Kernel_Inst;
#endif





#ifdef UFO_XC_FORCEWRITE_V2
typedef enum
{
    E_BACKEND_MUTE = 1,
    E_MUTE_MAX
}EN_MUTE_TYPE;
#else
typedef enum
{
    E_MAIN_WINDOW_MUTE =0,
    E_SUB_WINDOW_MUTE =1,
    E_PANEL_MUTE = 2
}EN_MUTE_TYPE;
#endif

typedef enum
{
    E_XC_FB_LEVEL_FB,
    E_XC_FB_LEVEL_FBL,
    E_XC_FB_LEVEL_RFBL_DI,
    E_XC_FB_LEVEL_NUM,
} E_XC_FB_LEVEL;


typedef enum
{
    MAIN_WINDOW=0,
    SUB_WINDOW=1,
    MAX_WINDOW
}SCALER_WIN;

#define PIP_WINDOWS MAX_WINDOW


typedef struct __attribute__((packed))
{
    MS_U16 x;
    MS_U16 y;
    MS_U16 width;
    MS_U16 height;
} MS_WINDOW_TYPE;
#ifdef UFO_PUBLIC_HEADER_212
typedef enum
{
    SCAN_AUTO = 0,
    SCAN_PROGRESSIVE = SCAN_AUTO,
    SCAN_INTERLACE = 1
}EN_VIDEO_SCAN_TYPE;
#endif





typedef struct DLL_PACKED
{
    MS_U32 u32EnablePort;
    MS_U32 u32Port[2];
} XC_MUX_INPUTSRCTABLE;

typedef enum
{
    INPUT_SOURCE_VGA,
    INPUT_SOURCE_TV,

    INPUT_SOURCE_CVBS,
    INPUT_SOURCE_CVBS2,
    INPUT_SOURCE_CVBS3,
    INPUT_SOURCE_CVBS4,
    INPUT_SOURCE_CVBS5,
    INPUT_SOURCE_CVBS6,
    INPUT_SOURCE_CVBS7,
    INPUT_SOURCE_CVBS8,
    INPUT_SOURCE_CVBS_MAX,

    INPUT_SOURCE_SVIDEO,
    INPUT_SOURCE_SVIDEO2,
    INPUT_SOURCE_SVIDEO3,
    INPUT_SOURCE_SVIDEO4,
    INPUT_SOURCE_SVIDEO_MAX,

    INPUT_SOURCE_YPBPR,
    INPUT_SOURCE_YPBPR2,
    INPUT_SOURCE_YPBPR3,
    INPUT_SOURCE_YPBPR_MAX,

    INPUT_SOURCE_SCART,
    INPUT_SOURCE_SCART2,
    INPUT_SOURCE_SCART_MAX,

    INPUT_SOURCE_HDMI,
    INPUT_SOURCE_HDMI2,
    INPUT_SOURCE_HDMI3,
    INPUT_SOURCE_HDMI4,
    INPUT_SOURCE_HDMI_MAX,

    INPUT_SOURCE_DTV,

    INPUT_SOURCE_DVI,
    INPUT_SOURCE_DVI2,
    INPUT_SOURCE_DVI3,
    INPUT_SOURCE_DVI4,
    INPUT_SOURCE_DVI_MAX,


    INPUT_SOURCE_STORAGE,
    INPUT_SOURCE_KTV,
    INPUT_SOURCE_JPEG,


    INPUT_SOURCE_DTV2,
    INPUT_SOURCE_STORAGE2,


    INPUT_SOURCE_DTV3,


    INPUT_SOURCE_SCALER_OP,

    INPUT_SOURCE_VGA2,
    INPUT_SOURCE_VGA3,

    INPUT_SOURCE_NUM,
    INPUT_SOURCE_NONE = INPUT_SOURCE_NUM,
} INPUT_SOURCE_TYPE_t;

#define IsSrcTypeAV(x) (((x)>=INPUT_SOURCE_CVBS)&&((x)<=INPUT_SOURCE_CVBS_MAX))
#define IsSrcTypeSV(x) (((x)>=INPUT_SOURCE_SVIDEO)&&((x)<=INPUT_SOURCE_SVIDEO_MAX))
#define IsSrcTypeATV(x) ((x)==INPUT_SOURCE_TV)
#define IsSrcTypeScart(x) (((x)>=INPUT_SOURCE_SCART)&&((x)<=INPUT_SOURCE_SCART_MAX))
#define IsSrcTypeHDMI(x) (((x)>=INPUT_SOURCE_HDMI)&&((x)<=INPUT_SOURCE_HDMI_MAX))
#define IsSrcTypeVga(x) (((x)==INPUT_SOURCE_VGA) || ((x)==INPUT_SOURCE_VGA2) || ((x)==INPUT_SOURCE_VGA3))
#define IsSrcTypeYPbPr(x) (((x)>=INPUT_SOURCE_YPBPR)&&((x)<=INPUT_SOURCE_YPBPR_MAX))
#define IsSrcTypeDTV(x) (((x)==INPUT_SOURCE_DTV) || ((x)==INPUT_SOURCE_DTV2) || ((x)==INPUT_SOURCE_DTV3))
#define IsSrcTypeDVI(x) (((x)>=INPUT_SOURCE_DVI)&&((x)<=INPUT_SOURCE_DVI_MAX))
#define IsSrcTypeJpeg(x) ((x)==INPUT_SOURCE_JPEG)
#define IsSrcTypeStorage(x) (((x)==INPUT_SOURCE_STORAGE) || ((x)==INPUT_SOURCE_STORAGE2) ||IsSrcTypeJpeg(x))
#define IsSrcTypeDigitalVD(x) ( IsSrcTypeAV(x)||IsSrcTypeSV(x)||IsSrcTypeATV(x)||IsSrcTypeScart(x))
#define IsSrcTypeAnalog(x) ( IsSrcTypeVga(x)|| IsSrcTypeYPbPr(x))
#define IsSrcTypeVideo(x) ( IsSrcTypeYPbPr(x) || IsSrcTypeATV(x) || IsSrcTypeAV(x) || IsSrcTypeSV(x) || IsSrcTypeScart(x) || IsSrcTypeDTV(x) )
#define IsSrcTypeCapture(x) ((x)==INPUT_SOURCE_SCALER_OP)
# 628 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
typedef enum
{
    OUTPUT_NONE = 0,
    OUTPUT_SCALER_MAIN_WINDOW = 1,
    OUTPUT_SCALER2_MAIN_WINDOW = 2,

    OUTPUT_SCALER_SUB_WINDOW = 10,
    OUTPUT_SCALER2_SUB_WINDOW = 11,

    OUTPUT_CVBS1 = 20,
    OUTPUT_CVBS2,


    OUTPUT_YPBPR0 = 40,
    OUTPUT_YPBPR1,


    OUTPUT_HDMI1 = 60,
    OUTPUT_HDMI2,

    OUTPUT_OFFLINE_DETECT = 80,

    OUTPUT_SCALER_DWIN = 100,

    OUTPUT_NUM,
}E_DEST_TYPE;



typedef enum
{

    MS_DEINT_OFF=0,
    MS_DEINT_2DDI_BOB,
    MS_DEINT_2DDI_AVG,
    MS_DEINT_3DDI_HISTORY,
    MS_DEINT_3DDI,
} MS_DEINTERLACE_MODE;



typedef struct DLL_PACKED
{
    MS_U8 u8SyncStatus;
    MS_U16 u16Hperiod;
    MS_U16 u16Vtotal;
} XC_IP_SYNC_STATUS;

typedef enum
{
    CMA_XC_SELF_MEM = 0,
    CMA_XC_COBUFF_MEM = 1,
    CMA_XC_MEM_NUM = 2,
} XC_CMA_CLIENT;

typedef struct DLL_PACKED
{
    MS_U32 u32HeapID;
    MS_U64 u64AddrHeapOffset;
} XC_CMA_CONFIG;


typedef enum
{
    E_XC_FREE_RUN_COLOR_BLACK,
    E_XC_FREE_RUN_COLOR_WHITE,
    E_XC_FREE_RUN_COLOR_BLUE,
    E_XC_FREE_RUN_COLOR_RED,
    E_XC_FREE_RUN_COLOR_GREEN,
    E_XC_FREE_RUN_COLOR_MAX,
} XC_FREERUN_COLOR;


typedef enum
{
    E_XC_PNL_CHG_DCLK = 0,
    E_XC_PNL_CHG_HTOTAL = 1,
    E_XC_PNL_CHG_VTOTAL = 2,
} E_XC_PNL_OUT_TIMING_MODE;

typedef enum
{
    E_XC_PNL_LPLL_TTL,
    E_XC_PNL_LPLL_LVDS,
    E_XC_PNL_LPLL_RSDS,
    E_XC_PNL_LPLL_MINILVDS,
    E_XC_PNL_LPLL_ANALOG_MINILVDS,
    E_XC_PNL_LPLL_DIGITAL_MINILVDS,
    E_XC_PNL_LPLL_MFC,
    E_XC_PNL_LPLL_DAC_I,
    E_XC_PNL_LPLL_DAC_P,
    E_XC_PNL_LPLL_PDPLVDS,
    E_XC_PNL_LPLL_EXT,
}E_XC_PNL_LPLL_TYPE;


typedef enum
{

    E_XC_PNL_LPLL_EPI34_8P = E_XC_PNL_LPLL_EXT,
    E_XC_PNL_LPLL_EPI28_8P,
    E_XC_PNL_LPLL_EPI34_6P,
    E_XC_PNL_LPLL_EPI28_6P,


    E_XC_PNL_LPLL_MINILVDS_5P_2L,
    E_XC_PNL_LPLL_MINILVDS_4P_2L,
    E_XC_PNL_LPLL_MINILVDS_3P_2L,
    E_XC_PNL_LPLL_MINILVDS_6P_1L,
    E_XC_PNL_LPLL_MINILVDS_5P_1L,
    E_XC_PNL_LPLL_MINILVDS_4P_1L,
    E_XC_PNL_LPLL_MINILVDS_3P_1L,

    E_XC_PNL_LPLL_HS_LVDS,
    E_XC_PNL_LPLL_HF_LVDS,

    E_XC_PNL_LPLL_TTL_TCON,
    E_XC_PNL_LPLL_MINILVDS_2CH_3P_8BIT,
    E_XC_PNL_LPLL_MINILVDS_2CH_4P_8BIT,
    E_XC_PNL_LPLL_MINILVDS_2CH_5P_8BIT,
    E_XC_PNL_LPLL_MINILVDS_2CH_6P_8BIT,

    E_XC_PNL_LPLL_MINILVDS_1CH_3P_8BIT,
    E_XC_PNL_LPLL_MINILVDS_1CH_4P_8BIT,
    E_XC_PNL_LPLL_MINILVDS_1CH_5P_8BIT,
    E_XC_PNL_LPLL_MINILVDS_1CH_6P_8BIT,

    E_XC_PNL_LPLL_MINILVDS_2CH_3P_6BIT,
    E_XC_PNL_LPLL_MINILVDS_2CH_4P_6BIT,
    E_XC_PNL_LPLL_MINILVDS_2CH_5P_6BIT,
    E_XC_PNL_LPLL_MINILVDS_2CH_6P_6BIT,

    E_XC_PNL_LPLL_MINILVDS_1CH_3P_6BIT,
    E_XC_PNL_LPLL_MINILVDS_1CH_4P_6BIT,
    E_XC_PNL_LPLL_MINILVDS_1CH_5P_6BIT,
    E_XC_PNL_LPLL_MINILVDS_1CH_6P_6BIT,

    E_XC_PNL_LPLL_HDMI_BYPASS_MODE,

    E_XC_PNL_LPLL_EPI34_2P,
    E_XC_PNL_LPLL_EPI34_4P,
    E_XC_PNL_LPLL_EPI28_2P,
    E_XC_PNL_LPLL_EPI28_4P,

    E_XC_PNL_LPLL_VBY1_10BIT_4LANE,
    E_XC_PNL_LPLL_VBY1_10BIT_2LANE,
    E_XC_PNL_LPLL_VBY1_10BIT_1LANE,
    E_XC_PNL_LPLL_VBY1_8BIT_4LANE,
    E_XC_PNL_LPLL_VBY1_8BIT_2LANE,
    E_XC_PNL_LPLL_VBY1_8BIT_1LANE,

    E_XC_PNL_LPLL_VBY1_10BIT_8LANE,
    E_XC_PNL_LPLL_VBY1_8BIT_8LANE,

    E_XC_PNL_LPLL_EPI28_12P,

    E_XC_PNL_LPLL_HS_LVDS_BYPASS_MODE,
    E_XC_PNL_LPLL_VBY1_10BIT_4LANE_BYPASS_MODE,
    E_XC_PNL_LPLL_VBY1_8BIT_4LANE_BYPASS_MODE,

    E_XC_PNL_LPLL_VBY1_10BIT_16LANE,
    E_XC_PNL_LPLL_VBY1_8BIT_16LANE,
    E_XC_PNL_LPLL_EPI24_12P,
    E_XC_PNL_LPLL_USI_T_8BIT_12P,
    E_XC_PNL_LPLL_USI_T_10BIT_12P,
    E_XC_PNL_LPLL_ISP_8BIT_12P,
    E_XC_PNL_LPLL_ISP_8BIT_6P_D,

    E_XC_PNL_LPLL_TYPE_MAX,
}E_XC_PNL_LPLL_EXT_TYPE;

typedef enum
{
    E_XC_MOD_OUTPUT_SINGLE = 0,
    E_XC_MOD_OUTPUT_DUAL = 1,

    E_XC_MOD_OUTPUT_QUAD = 2,

} E_XC_OUTPUT_MODE;

typedef enum
{
    VFREQ_50HZ = 0x00,
    VFREQ_60HZ = 0x01,
    VFREQ_FROM_SRC = 0x02,
    VFREQ_FROM_PANEL = 0x03,
} E_VFREQ_SEL;


typedef enum
{
    E_XC_NONE =0x00,
    E_XC_IP = 0x01,
    E_XC_VOP2 = 0x02,
    E_XC_BRI = 0x04,


    E_XC_OP2 = 0x08,
    E_XC_GAM = 0x10,
    E_XC_DITHER = 0x20,


    E_XC_OVERLAP = 0x40,
    E_XC_IP_SUB = 0x80,
}E_XC_SOURCE_TO_VE;


typedef enum
{
    E_XC_SCARTID_NONE = 0x00,
    E_XC_SCARTID_TO_HSYNC0 = 0x01,
    E_XC_SCARTID_TO_HSYNC1 = 0x02,
    E_XC_SCARTID_TO_HSYNC2 = 0x04,
    E_XC_SCARTID_TO_SOG0 = 0x08,
    E_XC_SCARTID_TO_SOG1 = 0x10,
    E_XC_SCARTID_TO_SOG2 = 0x20,
}E_XC_SCART_ID_PORT;


typedef enum
{
    E_XC_SUPPORT_IMMESWITCH = 0x00000001,

    E_XC_SUPPORT_DVI_AUTO_EQ = 0x00000005,

    E_XC_SUPPORT_FRC_INSIDE = 0x00000100,

}E_XC_CAPABILITY;

typedef enum
{
    E_XC_SR_MODE_BASIC = 0x00000001,
    E_XC_SR_MODE_ADVANCED = 0x00000002,
}E_XC_SR_MODE;

typedef enum
{
    E_XC_IMMESWITCH = 0x00000001,

    E_XC_DVI_AUTO_EQ = 0x00000002,

    E_XC_FRC_INSIDE = 0x00000004,

    E_XC_DIP_CHIP_CAPS = 0x00000008,

    E_XC_3D_FBL_CAPS = 0x00000010,

    E_XC_HW_SEAMLESS_ZAPPING = 0x00000020,

    E_XC_SUPPORT_DEVICE1 = 0x00000040,

    E_XC_SUPPORT_DETECT3D_IN3DMODE = 0x00000080,

    E_XC_2DTO3D_VERSION = 0x00000100,

    E_XC_SUPPORT_FORCE_VSP_IN_DS_MODE = 0x00000200,

    E_XC_SUPPORT_FRCM_MODE = 0x00000400,

    E_XC_SUPPORT_INTERLACE_OUT = 0x00000800,

    E_XC_SUPPORT_4K2K_WITH_PIP = 0x00001000,
#if defined(UFO_PUBLIC_HEADER_300)
    E_XC_HW_4K2K_VIP_PEAKING_LIMITATION = 0x00002000,
#else
    E_XC_SUPPORT_4K2K_60P = 0x00002000,
#endif
#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_DIP_CHIP_SOURCESEL = 0x00004000,
#else
    E_XC_SUPPORT_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB = 0x00004000,
#endif

#if defined(UFO_PUBLIC_HEADER_300)

#else
    E_XC_HW_4K2K_VIP_PEAKING_LIMITATION = 0x00008000,
#endif

#if defined(UFO_XC_AUTO_DOWNLOAD)
    E_XC_SUPPORT_AUTODOWNLOAD_CLIENT = 0x00010000,
#endif

#ifdef UFO_XC_HDR
    E_XC_SUPPORT_HDR = 0x00020000,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_DIP_CHIP_WINDOWBUS = 0x00040000,
#else
    E_XC_SUPPORT_3D_DS = 0x00040000,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_SCALING_LIMITATION = 0x00080000,
#else
    E_XC_DIP_CHIP_SOURCESEL = 0x00080000,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3)

#else
    E_XC_DIP_CHIP_WINDOWBUS = 0x00100000,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3)

#else
    E_XC_SCALING_LIMITATION = 0x00800000,
#endif

    E_XC_FB_CAPS_GET_FB_LEVEL = 0x01000000,

#if defined(UFO_PUBLIC_HEADER_300)
    E_XC_SUPPORT_4K2K_60P = 0x02000000,
#endif

}E_XC_CAPS;

typedef enum
{
    E_XC_DS_INDEX_MVOP,
    E_XC_DS_INDEX_SCALER,
    E_XC_DS_INDEX_MAX,
}E_XC_DS_INDEX_SOURCE;

typedef enum
{
    E_XC_FRC_InputTiming_2K1K,
    E_XC_FRC_InputTiming_4K2K,
    E_XC_FRC_InputTiming_MAX,
}E_XC_FRC_InputTiming;

typedef enum
{
    PIXEL_SHIFT_MOVE_MAIN_WINDOW = 0x0001,
    PIXEL_SHIFT_MOVE_SUB_WINDOW = 0x0002,
    PIXEL_SHIFT_MOVE_REPORT_WINDOW = 0x0004,
    PIXEL_SHIFT_MOVE_OSD_LAYER = 0x0008,
    PIXEL_SHIFT_DO_OVERSCAN = 0x0010,
} PIXEL_SHIFT_FEATURE;


typedef enum
{
    E_VIDEO_ON_OSD_LAYER_DEAFULT = 0,
    E_VIDEO_ON_OSD_LAYER_0 = 1,
    E_VIDEO_ON_OSD_LAYER_1 = 2,
    E_VIDEO_ON_OSD_LAYER_2 = 3,
    E_VIDEO_ON_OSD_LAYER_3 = 4,
    E_VIDEO_ON_OSD_LAYER_4 = 5,
    E_VIDEO_ON_OSD_LAYER_NUM,
} E_VIDEO_ON_OSD_LAYER;


typedef struct __attribute__((packed))
{


    MS_U16 u16HStart;

    MS_U16 u16VStart;

    MS_U16 u16Width;

    MS_U16 u16Height;

    MS_U16 u16HTotal;

    MS_U16 u16VTotal;

    MS_U16 u16DefaultVFreq;

    MS_U8 u8LPLL_Mode;
    E_XC_PNL_OUT_TIMING_MODE enPnl_Out_Timing_Mode;


    MS_U16 u16DefaultHTotal;
    MS_U16 u16DefaultVTotal;

    MS_U32 u32MinSET;
    MS_U32 u32MaxSET;
    E_XC_PNL_LPLL_TYPE eLPLL_Type;
} XC_PANEL_INFO;
# 1033 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
typedef struct __attribute__((packed))
{
    MS_U32 u32PanelInfoEx_Version;
    MS_U16 u16PanelInfoEX_Length;
    MS_U16 u16VFreq;


    MS_U16 u16HTotal;
    MS_BOOL bHTotalValid;
    MS_U16 u16VTotal;
    MS_BOOL bVTotalValid;
    MS_U32 u32DClk;
    MS_BOOL bDClkValid;
    MS_U16 u16MinHTotal;
    MS_BOOL bMinHTotalValid;
    MS_U16 u16MinVTotal;
    MS_BOOL bMinVTotalValid;
    MS_U32 u32MinDClk;
    MS_BOOL bMinDClkValid;
    MS_U16 u16MaxHTotal;
    MS_BOOL bMaxHTotalValid;
    MS_U16 u16MaxVTotal;
    MS_BOOL bMaxVTotalValid;
    MS_U32 u32MaxDClk;
    MS_BOOL bMaxDClkValid;

    MS_U16 u16HSyncWidth;
    MS_BOOL bHSyncWidthValid;
    MS_U16 u16HSyncBackPorch;



    MS_BOOL bHSyncBackPorchValid;
    MS_U16 u16VSyncWidth;
    MS_BOOL bVSyncWidthValid;
    MS_U16 u16VSyncBackPorch;
    MS_BOOL bVSyncBackPorchValid;

    MS_U16 u16HttSteps;
    MS_BOOL bHttStepsValid;
    MS_U16 u16HttDelay;
    MS_BOOL bHttDelayValid;
    MS_U16 u16VttSteps;
    MS_BOOL bVttStepsValid;
    MS_U16 u16VttDelay;
    MS_BOOL bVttDelayValid;
    MS_U16 u16DclkSteps;
    MS_BOOL bDclkStepsValid;
    MS_U16 u16DclkDelay;
    MS_BOOL bDclkDelayValid;
}XC_PANEL_INFO_EX;


typedef struct DLL_PACKED
{
    MS_U32 u32TimingAdjustSetting_version;

    MS_U16 u16HTotal_Step;
    MS_U16 u16HTotal_Delay;
    MS_U16 u16HTotal_Ratio;

    MS_U16 u16VTotal_Step;
    MS_U16 u16VTotal_Delay;
    MS_U16 u16VTotal_Ratio;

    MS_U16 u16Dclk_Step;
    MS_U16 u16Dclk_Delay;
    MS_U16 u16Dclk_Ratio;

}XC_OUTPUT_TIMING_ADJUST_SETTING;


typedef struct __attribute__((packed))
{
    MS_U32 u32XC_version;

    MS_U32 u32XTAL_Clock;


    MS_PHY u32Main_FB_Start_Addr;
    MS_PHY u32Main_FB_Size;
    MS_PHY u32Sub_FB_Start_Addr;
    MS_PHY u32Sub_FB_Size;


    MS_BOOL bCEC_Use_Interrupt;


    MS_BOOL bIsShareGround;


    MS_BOOL bEnableIPAutoCoast;

    MS_BOOL bMirror;


    XC_PANEL_INFO stPanelInfo;


    MS_BOOL bDLC_Histogram_From_VBlank;


    MS_U16 eScartIDPort_Sel;


    MS_PHY u32Main_FRCM_FB_Start_Addr;
    MS_PHY u32Main_FRCM_FB_Size;
    MS_PHY u32Sub_FRCM_FB_Start_Addr;
    MS_PHY u32Sub_FRCM_FB_Size;
} XC_INITDATA;


typedef struct __attribute__((packed))
{
    MS_U8 u8MaxWindowNum;
    MS_U8 u8NumOfDigitalDDCRam;
    MS_U8 u8MaxFrameNumInMem;
    MS_U8 u8MaxFieldNumInMem;
} XC_ApiInfo;


typedef struct DLL_PACKED
{



    INPUT_SOURCE_TYPE_t enInputSourceType;




    MS_WINDOW_TYPE stCapWin;
    MS_WINDOW_TYPE stDispWin;
    MS_WINDOW_TYPE stCropWin;




    MS_BOOL bInterlace;
    MS_BOOL bHDuplicate;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_U16 u16DefaultHtotal;
    MS_U8 u8DefaultPhase;




    MS_BOOL bHCusScaling;
    MS_U16 u16HCusScalingSrc;
    MS_U16 u16HCusScalingDst;
    MS_BOOL bVCusScaling;
    MS_U16 u16VCusScalingSrc;
    MS_U16 u16VCusScalingDst;




    MS_BOOL bDisplayNineLattice;




    MS_BOOL bPreHCusScaling;
    MS_U16 u16PreHCusScalingSrc;
    MS_U16 u16PreHCusScalingDst;
    MS_BOOL bPreVCusScaling;
    MS_U16 u16PreVCusScalingSrc;
    MS_U16 u16PreVCusScalingDst;
    MS_U16 u16DefaultPhase;
} XC_SETWIN_INFO;

typedef struct
{
    MS_U32 u32MaxLuminance;
    MS_U32 u32MinLuminance;
    MS_U16 u16DisplayPrimaries[3][2];
    MS_U16 u16WhitePoint[2];
} XC_DS_MasterColorDisplay;

typedef struct
{

    MS_U8 u8ColorPrimaries;
    MS_U8 u8TransferCharacteristics;

    MS_U8 u8MatrixCoefficients;
} XC_DS_ColorDescription;

typedef struct
{

    MS_U32 u32FrmInfoExtAvail;

    XC_DS_ColorDescription stColorDescription;
    XC_DS_MasterColorDisplay stMasterColorDisplay;
    MS_U8 u8CurrentIndex;
    MS_PHY phyRegAddr;
    MS_U32 u32RegSize;
    MS_PHY phyLutAddr;
    MS_U32 u32LutSize;
    MS_BOOL bDMEnable;
    MS_BOOL bCompEnable;
} XC_DS_HDRInfo;

typedef struct DLL_PACKED{

    MS_U32 u32ApiDSInfo_Version;
    MS_U16 u16ApiDSInfo_Length;
    MS_U32 u32MFCodecInfo;
    XC_DS_HDRInfo stHDRInfo;

    MS_BOOL bUpdate_DS_CMD[MAX_WINDOW];
    MS_BOOL bEnableDNR[MAX_WINDOW];
    MS_U32 u32DSBufferSize;
    MS_BOOL bEnable_ForceP[MAX_WINDOW];
}XC_DS_INFO;
# 1267 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
typedef struct DLL_PACKED
{
    MS_PHY u32DS_Info_BaseAddr;
    MS_U8 u8MIU_Select;
    MS_U8 u8DS_Index_Depth;
    MS_BOOL bOP_DS_On;
    MS_BOOL bIPS_DS_On;
    MS_BOOL bIPM_DS_On;
} XC_DynamicScaling_Info;


typedef enum
{
    SCALER_DIP_SOURCE_TYPE_SUB2 = 0,
    SCALER_DIP_SOURCE_TYPE_MAIN = 1,
    SCALER_DIP_SOURCE_TYPE_SUB = 2,
    SCALER_DIP_SOURCE_TYPE_OP_MAIN = 3,
    SCALER_DIP_SOURCE_TYPE_OP_SUB = 4,
    SCALER_DIP_SOURCE_TYPE_DRAM = 5,
    SCALER_DIP_SOURCE_TYPE_OP_CAPTURE = 6,
    SCALER_DIP_SOURCE_TYPE_OSD = 7,
    SCALER_DIP_SOURCE_TYPE_SC2_OP_CAPTURE = 8,
    SCALER_DIP_SOURCE_TYPE_OP_SC1_CAPTURE = 9,
#if defined (UFO_PUBLIC_HEADER_212) ||defined (UFO_PUBLIC_HEADER_500_3) ||defined (UFO_PUBLIC_HEADER_700)
    SCALER_DIP_SOURCE_TYPE_MVOP0 =10,
    SCALER_DIP_SOURCE_TYPE_MVOP1 =11,
#else
    SCALER_DIP_SOURCE_TYPE_VE_CAPTURE = 10,
    SCALER_DIP_SOURCE_TYPE_MVOP0 =11,
    SCALER_DIP_SOURCE_TYPE_MVOP1 =12,
#endif
    MAX_SCALER_DIP_SOURCE_NUM
}SCALER_DIP_SOURCE_TYPE;


typedef enum
{
    PATH_TYPE_SYNCHRONOUS,
    PATH_TYPE_ASYNCHRONOUS,
}E_PATH_TYPE;


typedef struct DLL_PACKED
{
    E_PATH_TYPE Path_Type;
    INPUT_SOURCE_TYPE_t src;
    E_DEST_TYPE dest;

    void (* path_thread)(INPUT_SOURCE_TYPE_t src, MS_BOOL bRealTimeMonitorOnly);
    void (* SyncEventHandler )(INPUT_SOURCE_TYPE_t src, void* para);
    void (* DestOnOff_Event_Handler )(INPUT_SOURCE_TYPE_t src, void* para);
    void (* dest_periodic_handler )(INPUT_SOURCE_TYPE_t src, MS_BOOL bRealTimeMonitorOnly) ;
} XC_MUX_PATH_INFO;


typedef enum
{
    IMAGE_STORE_444_24BIT,
    IMAGE_STORE_422_16BIT,
    IMAGE_STORE_422_24BIT,
} MS_IMAGE_STORE_FMT;


typedef struct DLL_PACKED
{



    INPUT_SOURCE_TYPE_t enInputSourceType;




    MS_WINDOW_TYPE stCapWin;
    MS_WINDOW_TYPE stDispWin;
    MS_WINDOW_TYPE stCropWin;




    MS_BOOL bInterlace;
    MS_BOOL bHDuplicate;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_U16 u16DefaultHtotal;
    MS_U8 u8DefaultPhase;




    MS_BOOL bHCusScaling;
    MS_U16 u16HCusScalingSrc;
    MS_U16 u16HCusScalingDst;
    MS_BOOL bVCusScaling;
    MS_U16 u16VCusScalingSrc;
    MS_U16 u16VCusScalingDst;




    MS_BOOL bDisplayNineLattice;






    MS_U16 u16H_SizeAfterPreScaling;
    MS_U16 u16V_SizeAfterPreScaling;
    MS_BOOL bPreV_ScalingDown;


    MS_WINDOW_TYPE ScaledCropWin;


    MS_U32 u32Op2DclkSet;


    MS_BOOL bBlackscreenEnabled;
    MS_BOOL bBluescreenEnabled;
    MS_U16 u16VideoDark;

    MS_U16 u16V_Length;
    MS_U16 u16BytePerWord;
    MS_U16 u16OffsetPixelAlignment;
    MS_U8 u8BitPerPixel;
    MS_DEINTERLACE_MODE eDeInterlaceMode;
    MS_U8 u8DelayLines;
    MS_BOOL bMemFmt422;
    MS_IMAGE_STORE_FMT eMemory_FMT;
    MS_BOOL bForceNRoff;
    MS_BOOL bEn3DNR;
    MS_BOOL bUseYUVSpace;
    MS_BOOL bMemYUVFmt;
    MS_BOOL bForceRGBin;
    MS_BOOL bLinearMode;



    MS_BOOL bFBL;
    MS_BOOL bFastFrameLock;
    MS_BOOL bDoneFPLL;
    MS_BOOL bEnableFPLL;
    MS_BOOL bFPLL_LOCK;


#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32IPMBase0;
    MS_PHY u32IPMBase1;
    MS_PHY u32IPMBase2;
#else
    MS_U32 u32IPMBase0;
    MS_U32 u32IPMBase1;
    MS_U32 u32IPMBase2;
#endif
    MS_U16 u16IPMOffset;
    MS_U32 u16IPMFetch;
}XC_ApiStatus;


typedef struct DLL_PACKED
{
    MS_U32 u32ApiStatusEx_Version;
    MS_U16 u16ApiStatusEX_Length;




    INPUT_SOURCE_TYPE_t enInputSourceType;




    MS_WINDOW_TYPE stCapWin;
    MS_WINDOW_TYPE stDispWin;
    MS_WINDOW_TYPE stCropWin;




    MS_BOOL bInterlace;
    MS_BOOL bHDuplicate;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_U16 u16DefaultHtotal;
    MS_U8 u8DefaultPhase;




    MS_BOOL bHCusScaling;
    MS_U16 u16HCusScalingSrc;
    MS_U16 u16HCusScalingDst;
    MS_BOOL bVCusScaling;
    MS_U16 u16VCusScalingSrc;
    MS_U16 u16VCusScalingDst;




    MS_BOOL bDisplayNineLattice;






    MS_U16 u16H_SizeAfterPreScaling;
    MS_U16 u16V_SizeAfterPreScaling;
    MS_BOOL bPreV_ScalingDown;


    MS_WINDOW_TYPE ScaledCropWin;


    MS_U32 u32Op2DclkSet;


    MS_BOOL bBlackscreenEnabled;
    MS_BOOL bBluescreenEnabled;
    MS_U16 u16VideoDark;

    MS_U16 u16V_Length;
    MS_U16 u16BytePerWord;
    MS_U16 u16OffsetPixelAlignment;
    MS_U8 u8BitPerPixel;
    MS_DEINTERLACE_MODE eDeInterlaceMode;
    MS_U8 u8DelayLines;
    MS_BOOL bMemFmt422;
    MS_IMAGE_STORE_FMT eMemory_FMT;
    MS_BOOL bForceNRoff;
    MS_BOOL bEn3DNR;
    MS_BOOL bUseYUVSpace;
    MS_BOOL bMemYUVFmt;
    MS_BOOL bForceRGBin;
    MS_BOOL bLinearMode;



    MS_BOOL bFBL;
    MS_BOOL bFastFrameLock;
    MS_BOOL bDoneFPLL;
    MS_BOOL bEnableFPLL;
    MS_BOOL bFPLL_LOCK;


#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32IPMBase0;
    MS_PHY u32IPMBase1;
    MS_PHY u32IPMBase2;
#else
    MS_U32 u32IPMBase0;
    MS_U32 u32IPMBase1;
    MS_U32 u32IPMBase2;
#endif
    MS_U16 u16IPMOffset;
    MS_U32 u16IPMFetch;




    MS_BOOL bPreHCusScaling;
    MS_U16 u16PreHCusScalingSrc;
    MS_U16 u16PreHCusScalingDst;
    MS_BOOL bPreVCusScaling;
    MS_U16 u16PreVCusScalingSrc;
    MS_U16 u16PreVCusScalingDst;

    MS_BOOL bPQSetHSD;

    MS_U16 u16DefaultPhase;
    MS_BOOL bIsHWDepthAdjSupported;
    MS_BOOL bIs2LineMode;
    MS_BOOL bIsPNLYUVOutput;

    MS_U8 u8HDMIPixelRepetition;

#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32FRCMBase0;
    MS_PHY u32FRCMBase1;
    MS_PHY u32FRCMBase2;
#else
    MS_U32 u32FRCMBase0;
    MS_U32 u32FRCMBase1;
    MS_U32 u32FRCMBase2;
#endif
#ifdef UFO_XC_ZORDER
    E_VIDEO_ON_OSD_LAYER enZOrderIndex;
#endif
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    MS_BOOL bFSCEnabled;
#endif
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    MS_BOOL bFRCEnabled;
#endif
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
#if API_XCSTATUS_EX_VERSION >= 9
    MS_U16 u16PanelInterfaceType;
#endif
#endif
}XC_ApiStatusEx;


typedef struct DLL_PACKED
{
    MS_U32 u32ApiStatusEx_Version;
    MS_U16 u16ApiStatusEX_Length;




    INPUT_SOURCE_TYPE_t enInputSourceType;




    MS_WINDOW_TYPE stDispWin;

} ST_XC_APISTATUSNODELAY;


typedef struct DLL_PACKED
{
    MS_U32 u32HighAccurateInputVFreq;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_BOOL bMVOPSrc;
    MS_BOOL bFastFrameLock;
    MS_BOOL bInterlace;
}XC_SetTiming_Info;






typedef struct
{
    MS_U16 u16CH_AVG[3];
} MS_AUTOADC_TYPE;


typedef enum
{
    AUTO_MIN_R ,
    AUTO_MIN_G ,
    AUTO_MIN_B ,
    AUTO_MAX_R ,
    AUTO_MAX_G ,
    AUTO_MAX_B ,
}AUTO_GAIN_TYPE;


typedef enum
{
    E_XC_OFF,
    E_XC_480P,
    E_XC_576P,
    E_XC_720P,
    E_XC_1080P,
    E_XC_480I,
    E_XC_576I,
    E_XC_720I,
    E_XC_1080I,
}XC_Internal_TimingType;





typedef enum
{
    REST_SCALER_ALL = _BIT(0),
    REST_IP_F1 = _BIT(1),
    REST_IP_F2 = _BIT(2),
    REST_OP = _BIT(3),
    REST_IP_ALL = _BIT(4),
    REST_IP_OFFLINE = _BIT(5),
    REST_CLK = (_BIT(6)|_BIT(3)),
}SOFTWARE_REST_TYPE_t;


typedef enum
{
    EURO_AUS_HDTV_NORMAL = 0,
    EURO_HDTV_DETECTED,
    AUSTRALIA_HDTV_DETECTED,
}MS_DETECT_EURO_HDTV_STATUS_TYPE;





typedef struct
{
    MS_S16 s16X_Start;
    MS_S16 s16Y_Start;
    MS_S16 s16X_Size;
    MS_S16 s16Y_Size;

    MS_U8 *pRect;
    MS_U32 u32RectPitch;
    MS_U16 u16PointSize;
} MS_RECT_INFO;


typedef struct
{
    MS_U8 R_Cr;
    MS_U8 G_Y;
    MS_U8 B_Cb;
} MS_PIXEL_24BIT;


typedef struct
{
    MS_U32 B_Cb :10;
    MS_U32 G_Y :10;
    MS_U32 R_Cr :10;
    MS_U32 u8Dummy:2;
}MS_PIXEL_32BIT;


typedef struct
{
    MS_U8 u8G_Y;
    MS_U8 u8BR_CbCr;
} MS_PIXEL_422_8BIT;

typedef enum
{
    E_XC_OUTPUTDATA_RGB10BITS = 0x00,
    E_XC_OUTPUTDATA_RGB8BITS = 0x01,
    E_XC_OUTPUTDATA_4228BITS = 0x03,

    E_XC_OUTPUTDATA_FRC_RGB10BITS = 0x04,
    E_XC_OUTPUTDATA_FRC_RGB8BITS = 0x05,
    E_XC_OUTPUTDATA_FRC_4228BITS = 0x06,
}E_XC_OUTPUTDATA_TYPE;

typedef enum
{
    E_XC_INPUTDATA_RGB10BITS = 0x00,
    E_XC_INPUTDATA_RGB8BITS = 0x01,
    E_XC_INPUTDATA_4228BITS = 0x03,
}E_XC_INPUTDATA_TYPE;



typedef struct
{
    MS_U16 u16X;
    MS_U16 u16Xsize;
    MS_U16 u16Y;
    MS_U16 u16Ysize;
}MS_AUTO_CAL_WINDOW_t;

typedef struct
{
    MS_IMAGE_STORE_FMT eStoreFmt;
    MS_AUTO_CAL_WINDOW_t eCal_Win_Size;
    MS_AUTOADC_TYPE pixelMax;
    MS_AUTOADC_TYPE pixelMin;
    MS_AUTOADC_TYPE pixelAverage;
} MS_IMAGE_MEM_INFO;


typedef enum
{
    XC_VOP_CHR = 0,
    XC_VOP_CHG,
    XC_VOP_CHB,
    XC_VOP_ALL,
}MS_XC_VOP_CHANNEL_t;


typedef enum
{
    MS_IP0_SEL_GOP0,
    MS_IP0_SEL_GOP1,
    MS_IP0_SEL_GOP2,
    MS_NIP_SEL_GOP0,
    MS_NIP_SEL_GOP1,
    MS_NIP_SEL_GOP2,
    MS_MVOP_SEL,
}MS_XC_IPSEL_GOP;


typedef enum
{
    E_MS_XC_MEM_FMT_AUTO = 0,
    E_MS_XC_MEM_FMT_444 = 1,
    E_MS_XC_MEM_FMT_422 = 2,
}MS_XC_MEM_FMT;





typedef enum
{

    PQ_MAIN_WINDOW=0,

    PQ_SUB_WINDOW=1,

    PQ_MAX_WINDOW
}PQ_WIN;

typedef enum
{
    PQ_XC_ID_0,
    PQ_XC_ID_1,
    PQ_XC_ID_NUM,
}PQ_XC_ID;




typedef enum
{

    PQ_FOURCE_COLOR_DEFAULT,

    PQ_FOURCE_COLOR_RGB,

    PQ_FOURCE_COLOR_YUV,
}PQ_FOURCE_COLOR_FMT;




typedef enum DLL_PACKED
{

    PQ_DEINT_OFF=0,

    PQ_DEINT_2DDI_BOB,

    PQ_DEINT_2DDI_AVG,

    PQ_DEINT_3DDI_HISTORY,

    PQ_DEINT_3DDI,
} PQ_DEINTERLACE_MODE;



typedef struct DLL_PACKED
{

    MS_BOOL bFBL;

    MS_BOOL bInterlace;

    MS_U16 u16input_hsize;

    MS_U16 u16input_vsize;

    MS_U16 u16input_vtotal;

    MS_U16 u16input_vfreq;

    MS_U16 u16ouput_vfreq;

    MS_U16 u16display_hsize;

    MS_U16 u16display_vsize;
}MS_PQ_Mode_Info;



typedef enum
{

    PQ_INPUT_SOURCE_VGA,

    PQ_INPUT_SOURCE_TV,


    PQ_INPUT_SOURCE_CVBS,


    PQ_INPUT_SOURCE_SVIDEO,


    PQ_INPUT_SOURCE_YPBPR,

    PQ_INPUT_SOURCE_SCART,



    PQ_INPUT_SOURCE_HDMI,


    PQ_INPUT_SOURCE_DTV,


    PQ_INPUT_SOURCE_DVI,



    PQ_INPUT_SOURCE_STORAGE,

    PQ_INPUT_SOURCE_KTV,

    PQ_INPUT_SOURCE_JPEG,


    PQ_INPUT_SOURCE_NUM,

    PQ_INPUT_SOURCE_NONE = PQ_INPUT_SOURCE_NUM,
} PQ_INPUT_SOURCE_TYPE;



typedef enum
{
    E_PQ_IOCTL_NONE = 0x00000000,
    E_PQ_IOCTL_HSD_SAMPLING = 0x00000001,
    E_PQ_IOCTL_PREVSD_BILINEAR = 0x00000002,
    E_PQ_IOCTL_ADC_SAMPLING = 0x00000003,
    E_PQ_IOCTL_RFBL_CTRL = 0x00000004,
    E_PQ_IOCTL_PQ_SUGGESTED_FRAMENUM = 0x00000008,
    E_PQ_IOCTL_SET_UCFEATURE = 0x00000010,
    E_PQ_IOCTL_PQ_SUGGESTED_FRCMFRAMENUM = 0x00000020,

    E_PQ_IOCTL_NUM,
}PQ_IOCTL_FLAG_TYPE;

typedef struct DLL_PACKED s_PQ_Function
{

    void (* pq_disable_filmmode)(PQ_WIN eWindow, MS_BOOL bOn);

    MS_BOOL (* pq_load_scalingtable)(PQ_WIN eWindow, MS_U8 eXRuleType, MS_BOOL bPreV_ScalingDown,
                                      MS_BOOL bInterlace, MS_BOOL bColorSpaceYUV, MS_U16 u16InputSize, MS_U16 u16SizeAfterScaling);

    MS_BOOL (* pq_set_csc)(PQ_WIN eWindow, PQ_FOURCE_COLOR_FMT enFourceColor);

    PQ_DEINTERLACE_MODE (* pq_set_memformat)(PQ_WIN eWindow, MS_BOOL bMemFmt422, MS_BOOL bFBL, MS_U8 *u8BitsPerPixel);

    void (* pq_set_420upsampling)(PQ_WIN eWindow, MS_BOOL bFBL, MS_BOOL bPreV_ScalingDown, MS_U16 u16V_CropStart);

    void (* pq_set_modeInfo)(PQ_WIN eWindow, PQ_INPUT_SOURCE_TYPE enInputSourceType, MS_PQ_Mode_Info *pstPQModeInfo);

    void (* pq_deside_srctype)(PQ_WIN eWindow, PQ_INPUT_SOURCE_TYPE enInputSourceType);

    MS_BOOL (* pq_get_memyuvfmt)(PQ_WIN eWindow, PQ_FOURCE_COLOR_FMT enFourceColor);

    MS_BOOL (* pq_ioctl)(PQ_WIN eWindow, MS_U32 u32Flag, void *pBuf, MS_U32 u32BufSize);

    void (* pq_disable_filmmode_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, MS_BOOL bOn);

    MS_BOOL (* pq_load_scalingtable_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, MS_U8 eXRuleType, MS_BOOL bPreV_ScalingDown,
                                      MS_BOOL bInterlace, MS_BOOL bColorSpaceYUV, MS_U16 u16InputSize, MS_U16 u16SizeAfterScaling);

    MS_BOOL (* pq_set_csc_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, PQ_FOURCE_COLOR_FMT enFourceColor);

    PQ_DEINTERLACE_MODE (* pq_set_memformat_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, MS_BOOL bMemFmt422, MS_BOOL bFBL, MS_U8 *u8BitsPerPixel);

    void (* pq_set_420upsampling_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, MS_BOOL bFBL, MS_BOOL bPreV_ScalingDown, MS_U16 u16V_CropStart);

    void (* pq_set_modeInfo_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, PQ_INPUT_SOURCE_TYPE enInputSourceType, MS_PQ_Mode_Info *pstPQModeInfo);

    void (* pq_deside_srctype_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, PQ_INPUT_SOURCE_TYPE enInputSourceType);

    MS_BOOL (* pq_get_memyuvfmt_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, PQ_FOURCE_COLOR_FMT enFourceColor);

    MS_BOOL (* pq_ioctl_ex)(PQ_XC_ID eXCID, PQ_WIN eWindow, MS_U32 u32Flag, void *pBuf, MS_U32 u32BufSize);
}PQ_Function_Info;

typedef struct
{
    MS_U32 u32ratio;
    MS_BOOL bADVMode;
}PQ_HSD_SAMPLING_INFO;

typedef struct
{
    PQ_INPUT_SOURCE_TYPE enPQSourceType;
    MS_PQ_Mode_Info stPQModeInfo;
    MS_U16 u16ratio;
}PQ_ADC_SAMPLING_INFO;


typedef struct DLL_PACKED
{
    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;
    MS_BOOL bInterlaceMode;
    MS_BOOL bYUVInput;
} MS_XC_DST_DispInfo;

typedef enum
{

    E_GOP_XCDST_IP2=0,


    E_GOP_XCDST_IP1_MAIN=1,


    E_GOP_XCDST_IP1_SUB=2,


    E_GOP_XCDST_OP1_MAIN=3,

    MAX_GOP_XCDST_SUPPORT

} EN_GOP_XCDST_TYPE;


typedef enum
{

    E_VOP_SEL_OSD_BLEND0,

    E_VOP_SEL_OSD_BLEND1,

    E_VOP_SEL_OSD_BLEND2,

    E_VOP_SEL_MACE_RGB,

    E_VOP_SEL_OSD_NONE,

    E_VOP_SEL_OSD_LAST = 0x80,
} EN_VOP_SEL_OSD_XC2VE_MUX;


typedef enum
{

    E_XC_3D_INPUT_FRAME_PACKING = 0x00,
    E_XC_3D_INPUT_FIELD_ALTERNATIVE = 0x01,
    E_XC_3D_INPUT_LINE_ALTERNATIVE = 0x02,
    E_XC_3D_INPUT_SIDE_BY_SIDE_FULL = 0x03,
    E_XC_3D_INPUT_L_DEPTH = 0x04,
    E_XC_3D_INPUT_L_DEPTH_GRAPHICS_GRAPHICS_DEPTH = 0x05,
    E_XC_3D_INPUT_TOP_BOTTOM = 0x06,
    E_XC_3D_INPUT_SIDE_BY_SIDE_HALF = 0x08,

    E_XC_3D_INPUT_CHECK_BORAD = 0x09,


    E_XC_3D_INPUT_MODE_USER = 0x10,
    E_XC_3D_INPUT_MODE_NONE = E_XC_3D_INPUT_MODE_USER,
    E_XC_3D_INPUT_FRAME_ALTERNATIVE,
    E_XC_3D_INPUT_SIDE_BY_SIDE_HALF_INTERLACE,

    E_XC_3D_INPUT_FRAME_PACKING_OPT,

    E_XC_3D_INPUT_TOP_BOTTOM_OPT,
    E_XC_3D_INPUT_NORMAL_2D,
    E_XC_3D_INPUT_NORMAL_2D_INTERLACE,
    E_XC_3D_INPUT_NORMAL_2D_INTERLACE_PTP,
    E_XC_3D_INPUT_SIDE_BY_SIDE_HALF_INTERLACE_OPT,
    E_XC_3D_INPUT_NORMAL_2D_HW,
    E_XC_3D_INPUT_PIXEL_ALTERNATIVE,
} E_XC_3D_INPUT_MODE;


typedef enum
{
    E_XC_3D_OUTPUT_MODE_NONE,
    E_XC_3D_OUTPUT_LINE_ALTERNATIVE ,
    E_XC_3D_OUTPUT_TOP_BOTTOM,
    E_XC_3D_OUTPUT_SIDE_BY_SIDE_HALF,
    E_XC_3D_OUTPUT_FRAME_ALTERNATIVE,
    E_XC_3D_OUTPUT_FRAME_L,
    E_XC_3D_OUTPUT_FRAME_R,
    E_XC_3D_OUTPUT_FRAME_ALTERNATIVE_NOFRC,
    E_XC_3D_OUTPUT_CHECKBOARD_HW,
    E_XC_3D_OUTPUT_LINE_ALTERNATIVE_HW,
    E_XC_3D_OUTPUT_PIXEL_ALTERNATIVE_HW,
    E_XC_3D_OUTPUT_FRAME_L_HW,
    E_XC_3D_OUTPUT_FRAME_R_HW,
    E_XC_3D_OUTPUT_FRAME_ALTERNATIVE_HW,
    E_XC_3D_OUTPUT_TOP_BOTTOM_HW,
    E_XC_3D_OUTPUT_SIDE_BY_SIDE_HALF_HW,
    E_XC_3D_OUTPUT_FRAME_PACKING,
    E_XC_3D_OUTPUT_FRAME_ALTERNATIVE_LLRR,
    E_XC_3D_OUTPUT_FRAME_ALTERNATIVE_LLRR_HW,
    E_XC_3D_OUTPUT_TOP_TOP,
    E_XC_3D_OUTPUT_BOTTOM_BOTTOM,
    E_XC_3D_OUTPUT_LEFT_LEFT,
    E_XC_3D_OUTPUT_RIGHT_RIGHT,
} E_XC_3D_OUTPUT_MODE;

typedef enum
{
    E_XC_3D_OUTPUT_FI_MODE_NONE ,
    E_XC_3D_OUTPUT_FI_1920x1080 ,
    E_XC_3D_OUTPUT_FI_960x1080 ,
    E_XC_3D_OUTPUT_FI_1920x540 ,

    E_XC_3D_OUTPUT_FI_1280x720 ,
} E_XC_3D_OUTPUT_FI_MODE;

typedef enum
{
    E_XC_3D_AUTODETECT_SW,
    E_XC_3D_AUTODETECT_HW,
    E_XC_3D_AUTODETECT_HW_COMPATIBLE,
    E_XC_3D_AUTODETECT_MAX
}E_XC_3D_AUTODETECT_METHOD;

typedef enum
{
    E_XC_3D_PANEL_NONE,
    E_XC_3D_PANEL_SHUTTER,
    E_XC_3D_PANEL_PELLICLE,
    E_XC_3D_PANEL_4K1K_SHUTTER,
    E_XC_3D_PANEL_MAX,
} E_XC_3D_PANEL_TYPE;


typedef struct __attribute__((packed))
{
    MS_U32 u32Hw2dTo3dPara_Version;
    MS_U16 u16Concave;
    MS_U16 u16Gain;
    MS_U16 u16Offset;
    MS_U16 u16ArtificialGain;
    MS_U16 u16EleSel;
    MS_U16 u16ModSel;
    MS_U16 u16EdgeBlackWidth;
} MS_XC_3D_HW2DTO3D_PARA;


typedef struct DLL_PACKED
{
    MS_U32 u32Detect3DFormatPara_Version;

    MS_U16 u16HorSearchRange;
    MS_U16 u16VerSearchRange;
    MS_U16 u16GYPixelThreshold;
    MS_U16 u16RCrPixelThreshold;
    MS_U16 u16BCbPixelThreshold;
    MS_U16 u16HorSampleCount;
    MS_U16 u16VerSampleCount;
    MS_U16 u16MaxCheckingFrameCount;
    MS_U16 u16HitPixelPercentage;

    MS_BOOL bEnableOverscan;
} MS_XC_3D_DETECT3DFORMAT_PARA;


typedef struct DLL_PACKED
{
    MS_U32 u32FPInfoPara_Version;
    MS_U16 u16HBlank;
    MS_BOOL bEnableUserSetting;
} MS_XC_3D_FPINFO_PARA;

typedef enum
{
    DBG_FPLL_MODE_DISABLE_ALL = 0,
    DBG_FPLL_MODE_DISABLE = 1,
    DBG_FPLL_MODE_ENABLE = 2,
    DBG_FPLL_MODE_MAX,
}EN_FPLL_DBG_MODE;

typedef enum
{
    DBG_FPLL_FLAG_PHASELIMIT = 0,
    DBG_FPLL_FLAG_D5D6D7 = 1,
    DBG_FPLL_FLAG_IGAIN = 2,
    DBG_FPLL_FLAG_PGAIN = 3,
    DBG_FPLL_FLAG_INITSETSTEP = 4,
    DBG_FPLL_FLAG_INITSETDELAY= 5,
    DBG_FPLL_FLAG_MAX,
}EN_FPLL_DBG_FLAG;

typedef enum
{
    E_FPLL_MODE_DISABLE_ALL = 0,
    E_FPLL_MODE_DISABLE = 1,
    E_FPLL_MODE_ENABLE = 2,
    E_FPLL_MODE_MAX,
}EN_FPLL_MODE;

typedef enum
{
    E_FPLL_FLAG_PHASELIMIT = 0,
    E_FPLL_FLAG_D5D6D7 = 1,
    E_FPLL_FLAG_IGAIN = 2,
    E_FPLL_FLAG_PGAIN = 3,
    E_FPLL_FLAG_INITSETSTEP = 4,
    E_FPLL_FLAG_INITSETDELAY= 5,
    E_FPLL_FLAG_MAX,
}EN_FPLL_FLAG;

typedef enum
{
    E_MLOAD_UNSUPPORTED = 0,
    E_MLOAD_DISABLED = 1,
    E_MLOAD_ENABLED = 2,
}MLOAD_TYPE;

typedef enum
{
    E_MLCLIENT_MAIN_HDR = 0,

    E_MLCLIENT_MAX,
}EN_MLOAD_CLIENT_SELECT;

typedef enum
{
    E_MLG_UNSUPPORTED = 0,
    E_MLG_DISABLED = 1,
    E_MLG_ENABLED = 2,
}MLG_TYPE;

typedef enum
{
    HDMI_SYNC_DE,
    HDMI_SYNC_HV,
} E_HDMI_SYNC_TYPE;

typedef enum
{
    MS_FRC_1_1 = 0,
    MS_FRC_1_2 = 1,
    MS_FRC_5_12 = 2,
    MS_FRC_2_5 = 3,
    MS_FRC_1_4 = 4,
    MS_FRC_1_3 = 5,

    MS_FRC_2_1 = 8,
    MS_FRC_4_5 = 9,
} MS_FRC_TYPE;


typedef struct __attribute__((packed))
{
    MS_U16 u16LowerBound;
    MS_U16 u16HigherBound;
    MS_U8 u8Padding;
    MS_U8 u8FRC_In;
    MS_U8 u8FRC_Out;
    MS_FRC_TYPE eFRC_Type;
} SC_FRC_SETTING;

typedef enum
{
    E_PQ_IOCTL_GET_HSD_SAMPLING,
    E_PQ_IOCTL_MAX,
}E_PQ_IOCTL_FLAG;


typedef enum
{
    E_GET_PIXEL_RET_FAIL = 0,
    E_GET_PIXEL_RET_OK,
    E_GET_PIXEL_RET_OUT_OF_RANGE,
} E_APIXC_GET_PixelRGB_ReturnValue;


typedef enum
{
    E_XC_GET_PIXEL_STAGE_AFTER_DLC = 0x01,
    E_XC_GET_PIXEL_STAGE_PRE_GAMMA = 0x02,
    E_XC_GET_PIXEL_STAGE_AFTER_OSD = 0x03,
    E_XC_GET_PIXEL_STAGE_MAX = 0xFF,
}EN_XC_GET_PIXEL_RGB_STAGE;

typedef struct DLL_PACKED
{
    EN_XC_GET_PIXEL_RGB_STAGE enStage;
    MS_U16 u16x;
    MS_U16 u16y;
    MS_U32 u32r;
    MS_U32 u32g;
    MS_U32 u32b;
}XC_Get_Pixel_RGB;

typedef struct DLL_PACKED
{
    MS_U32 u32ReportPixelInfo_Version;
    MS_U16 u16ReportPixelInfo_Length;
    EN_XC_GET_PIXEL_RGB_STAGE enStage;
    MS_U16 u16RepWinColor;
    MS_U16 u16XStart;
    MS_U16 u16XEnd;
    MS_U16 u16YStart;
    MS_U16 u16YEnd;
    MS_U16 u16RCrMin;
    MS_U16 u16RCrMax;
    MS_U16 u16GYMin;
    MS_U16 u16GYMax;
    MS_U16 u16BCbMin;
    MS_U16 u16BCbMax;
    MS_U32 u32RCrSum;
    MS_U32 u32GYSum;
    MS_U32 u32BCbSum;
    MS_BOOL bShowRepWin;
}MS_XC_REPORT_PIXELINFO;


typedef enum
{

    SC_INT_DIPW = 1,
    SC_INT_MEMSYNC_MAIN = 3,
    SC_INT_START = 4,
    SC_INT_RESERVED1 = SC_INT_START,


    SC_INT_VSINT,
    SC_INT_F2_VTT_CHG,
    SC_INT_F1_VTT_CHG,
    SC_INT_F2_VS_LOSE,
    SC_INT_F1_VS_LOSE,
    SC_INT_F2_JITTER,
    SC_INT_F1_JITTER,
    SC_INT_F2_IPVS_SB,
    SC_INT_F1_IPVS_SB,
    SC_INT_F2_IPHCS_DET,
    SC_INT_F1_IPHCS_DET,


    SC_INT_PWM_RP_L_INT,
    SC_INT_PWM_FP_L_INT,
    SC_INT_F2_HTT_CHG,
    SC_INT_F1_HTT_CHG,
    SC_INT_F2_HS_LOSE,
    SC_INT_F1_HS_LOSE,
    SC_INT_PWM_RP_R_INT,
    SC_INT_PWM_FP_R_INT,
    SC_INT_F2_CSOG,
    SC_INT_F1_CSOG,
    SC_INT_F2_RESERVED2,
    SC_INT_F1_RESERVED2,
    SC_INT_F2_ATP_READY,
    SC_INT_F1_ATP_READY,
    SC_INT_F2_RESERVED3,
    SC_INT_F1_RESERVED3,

    MAX_SC_INT,
} SC_INT_SRC;

typedef enum
{

    XC_INT_RESERVED1 = 4,
    XC_INT_VSINT,
    XC_INT_F2_VTT_CHG,
    XC_INT_F1_VTT_CHG,
    XC_INT_F2_VS_LOSE,
    XC_INT_F1_VS_LOSE,
    XC_INT_F2_JITTER,
    XC_INT_F1_JITTER,
    XC_INT_F2_IPVS_SB,
    XC_INT_F1_IPVS_SB,
    XC_INT_F2_IPHCS_DET,
    XC_INT_F1_IPHCS_DET,


    XC_INT_PWM_RP_L_INT,
    XC_INT_PWM_FP_L_INT,
    XC_INT_F2_HTT_CHG,
    XC_INT_F1_HTT_CHG,
    XC_INT_F2_HS_LOSE,
    XC_INT_F1_HS_LOSE,
    XC_INT_PWM_RP_R_INT,
    XC_INT_PWM_FP_R_INT,
    XC_INT_F2_CSOG,
    XC_INT_F1_CSOG,
    XC_INT_F2_RESERVED2,
    XC_INT_F1_RESERVED2,
    XC_INT_F2_ATP_READY,
    XC_INT_F1_ATP_READY,
    XC_INT_F2_RESERVED3,
    XC_INT_F1_RESERVED3,
} XC_INT_SRC;


typedef enum
{
    E_VOP_LAYER_VIDEO_MUX1_MUX2 = 0,
    E_VOP_LAYER_FRAME_VIDEO_MUX1_MUX2,
    E_VOP_LAYER_FRAME_VIDEO_MUX2_MUX1,
    E_VOP_LAYER_FRAME_MUX1_VIDEO_MUX2,
    E_VOP_LAYER_FRAME_MUX1_MUX2_VIDEO,
    E_VOP_LAYER_FRAME_MUX2_VIDEO_MUX1,
    E_VOP_LAYER_FRAME_MUX2_MUX1_VIDEO,

    E_VOP_LAYER_VIDEO_MUX1_MUX2_MUX3_MUX4 = E_VOP_LAYER_VIDEO_MUX1_MUX2,
    E_VOP_LAYER_FRAME_VIDEO_MUX1_MUX2_MUX3_MUX4 = 7,
    E_VOP_LAYER_FRAME_MUX1_VIDEO_MUX2_MUX3_MUX4 = E_VOP_LAYER_FRAME_MUX1_VIDEO_MUX2,
    E_VOP_LAYER_FRAME_MUX1_MUX2_VIDEO_MUX3_MUX4 = E_VOP_LAYER_FRAME_MUX1_MUX2_VIDEO,
    E_VOP_LAYER_FRAME_MUX1_MUX2_MUX3_VIDEO_MUX4 = 8,
    E_VOP_LAYER_FRAME_MUX1_MUX2_MUX3_MUX4_VIDEO = 9,

    E_VOP_LAYER_RESERVED,
} E_VOP_OSD_LAYER_SEL;


typedef enum
{
    E_OP2VOPDE_MAINWINDOW = 0,
    E_OP2VOPDE_SUBWINDOW,
    E_OP2VOPDE_WHOLEFRAME,
    E_OP2VOPDE_WHOLEFRAME_WITHOSD,
} E_OP2VOP_DE_SEL;

typedef void (*SC_InterruptCb) (SC_INT_SRC enIntNum, void *pParam);



typedef struct DLL_PACKED
{
    MS_U32 u32XC_version;
    MS_U16 u16InVFreq;
    MS_U16 u16OutVFreq;
    MS_BOOL bInterlace;

}XC_OUTPUTFRAME_Info;



typedef enum
{
    E_XC_INIT_MISC_A_NULL = 0,
    E_XC_INIT_MISC_A_IMMESWITCH = 1,
    E_XC_INIT_MISC_A_IMMESWITCH_DVI_POWERSAVING = 2,
    E_XC_INIT_MISC_A_DVI_AUTO_EQ = 4,
    E_XC_INIT_MISC_A_FRC_INSIDE = 8,

    E_XC_INIT_MISC_A_OSD_TO_HSLVDS = 0x10,
    E_XC_INIT_MISC_A_FRC_INSIDE_60HZ = 0x20,
    E_XC_INIT_MISC_A_FRC_INSIDE_240HZ = 0x40,
    E_XC_INIT_MISC_A_FRC_INSIDE_4K1K_120HZ = 0x80,

    E_XC_INIT_MISC_A_ADC_AUTO_SCART_SV = 0x100,
    E_XC_INIT_MISC_A_FRC_INSIDE_KEEP_OP_4K2K = 0x200,
    E_XC_INIT_MISC_A_FRC_INSIDE_4K_HALFK_240HZ = 0x400,
    E_XC_INIT_MISC_A_FCLK_DYNAMIC_CONTROL = 0x800,

    E_XC_INIT_MISC_A_SKIP_UC_DOWNLOAD = 0x1000,
    E_XC_INIT_MISC_A_SKIP_VIP_PEAKING_CONTROL = 0x2000,
    E_XC_INIT_MISC_A_FAST_GET_VFREQ = 0x4000,
    E_XC_INIT_MISC_A_LEGACY_MODE = 0x8000,
    E_XC_INIT_MISC_A_SAVE_MEM_MODE = 0x10000,
#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_INIT_MISC_A_IPMUX_HDR_MODE = 0x20000,
#else
    E_XC_INIT_MISC_A_FRC_DUAL_MIU = 0x20000,
#endif

    E_XC_INIT_MISC_A_IS_ANDROID = 0x40000,
    E_XC_S_DISPLAY_INITMISC_A_ENABLE_CVBSOX_ADCX = 0x80000,

#if defined(UFO_PUBLIC_HEADER_500_3)

#else
    E_XC_INIT_MISC_A_IPMUX_HDR_MODE = 0x100000,
#endif
} XC_INIT_MISC_A;

typedef enum
{
    E_XC_INIT_MISC_B_NULL = 0,
    E_XC_INIT_MISC_B_PQ_SKIP_PCMODE_NEWFLOW = 1,
    E_XC_INIT_MISC_B_SKIP_SR = 2,
    E_XC_INIT_MISC_B_HDMITX_ENABLE = 4,
    E_XC_INIT_MISC_B_DRAM_DDR4_MODE = 8,
    E_XC_INIT_MISC_B_HDMITX_FREERUN_UCNR_ENABLE = 0x10,
    E_XC_INIT_MISC_B_DISABLE_SUPPORT_4K2K = 0x20,
} XC_INIT_MISC_B;

typedef enum
{
    E_XC_INIT_MISC_C_NULL = 0,
} XC_INIT_MISC_C;


typedef enum
{
    E_XC_INIT_MISC_D_NULL = 0,
} XC_INIT_MISC_D;

typedef enum
{
    E_XC_PQ_4K_PATH = 0,
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700)
    E_XC_PQ_UFSC_4K_PATH = 1,
#endif
    E_XC_PQ_PATH_MAX,
}E_XC_PQ_Path_Type;


typedef struct DLL_PACKED
{
    MS_U32 u32XCMISC_version;
    MS_U32 u32MISC_A;
    MS_U32 u32MISC_B;
    MS_U32 u32MISC_C;
    MS_U32 u32MISC_D;
} XC_INITMISC;

typedef enum
{
    E_XC_FLOCK_DIV_OFF = 0,
    E_XC_FLOCK_DIV_ON,
    E_XC_FLOCK_FPLL_ON,

}E_XC_FLOCK_TYPE;

typedef struct __attribute__((packed))
{

    MS_PHY u32FRC_MEMC_MemAddr;
    MS_PHY u32FRC_MEMC_MemSize;
    MS_PHY u32FRC_OD_MemAddr;
    MS_PHY u32FRC_OD_MemSize;
    MS_PHY u32FRC_LD_MemAddr;
    MS_PHY u32FRC_LD_MemSize;
    MS_PHY u32FRC_ME1_MemAddr;
    MS_PHY u32FRC_ME1_MemSize;
    MS_PHY u32FRC_ME2_MemAddr;
    MS_PHY u32FRC_ME2_MemSize;
    MS_PHY u32FRC_2D3D_Render_MemAddr;
    MS_PHY u32FRC_2D3D_Render_MemSize;
    MS_PHY u32FRC_2D3D_Render_Detection_MemAddr;
    MS_PHY u32FRC_2D3D_Render_Detection_MemSize;
    MS_PHY u32FRC_Halo_MemAddr;
    MS_PHY u32FRC_Halo_MemSize;
    MS_PHY u32FRC_R2_MemAddr;
    MS_PHY u32FRC_R2_MemSize;
    MS_PHY u32FRC_ADL_MemAddr;
    MS_PHY u32FRC_ADL_MemSize;

    MS_PHY u32FRC_FrameSize;

    MS_PHY u16FB_YcountLinePitch;
    MS_U16 u16PanelWidth;
    MS_U16 u16PanelHeigh;
    MS_U8 u8FRC3DPanelType;
    MS_U8 u83Dmode;
    MS_U8 u8IpMode;
    MS_U8 u8MirrorMode;
    MS_U8 u83D_FI_out;
    MS_BOOL bFRC;

} FRC_INFO_t, *PFRC_INFO_t;

typedef struct __attribute__((packed))
{
    MS_U32 u32XC_PREINIT_version;

    FRC_INFO_t FRCInfo;

    MS_U16 u16VTrigX;
    MS_U16 u16VTrigY;





    MS_U8 u8PanelHSyncWidth;
    MS_U8 u8PanelHSyncBackPorch;




    MS_U8 u8PanelVSyncWidth;
    MS_U8 u8PanelVSyncBackPorch;

} XC_PREINIT_INFO_t, *p_XC_PREINIT_INFO_t;

typedef struct __attribute__((packed))
{

    MS_U64 u64FRC_IPM_L_MemAddr;
    MS_U64 u64FRC_IPM_L_MemSize;
    MS_U64 u64FRC_IPM_R_MemAddr;
    MS_U64 u64FRC_IPM_R_MemSize;
    MS_U64 u64FRC_PQ_MemAddr;
    MS_U64 u64FRC_PQ_MemSize;
} XC_FRC_ADDRESS_INFO, *PXC_FRC_ADDRESS_INFO;

typedef enum
{
    E_XC_HDMITX_COLORDEPTH_8BIT,
    E_XC_HDMITX_COLORDEPTH_10BIT,
    E_XC_HDMITX_COLORDEPTH_12BIT,
    E_XC_HDMITX_COLORDEPTH_16BIT,
    E_XC_HDMITX_COLORDEPTH_MAX,
} EN_XC_HDMITX_COLORDEPTH;

typedef enum
{
    E_XC_PREINIT_NULL = 0x00,
    E_XC_PREINIT_FRC = 0x01,
    E_XC_PREINIT_FRC_3D_TYPE = 0x02,
    E_XC_PREINIT_FRC_ADDRESS = 0x03,
    E_XC_PREINIT_HDMITX_COLORDEPTH = 0x04,
    E_XC_PREINIT_NUM,

}E_XC_PREINIT_t;

typedef enum
{
    MIRROR_NORMAL,
    MIRROR_H_ONLY,
    MIRROR_V_ONLY,
    MIRROR_HV,
    MIRROR_MAX,
} MirrorMode_t;

typedef enum
{
    E_XC_MEMORY_IP_READ_REQUEST,
    E_XC_MEMORY_IP_WRITE_REQUEST,
    E_XC_MEMORY_OP_READ_REQUEST,
    E_XC_MEMORY_OP_WRITE_REQUEST,
    E_XC_MEMORY_REQUEST_MAX,
} E_XC_MEMORY_REQUEST_TYPE;


typedef enum
{
    E_XC_OSD_0 = 0,
    E_XC_OSD_1 = 1,
    E_XC_OSD_2 = 2,
    E_XC_OSD_3 = 3,
    E_XC_OSD_4 = 4,
    E_XC_OSD_NUM,
} E_XC_OSD_INDEX;


typedef enum
{
    E_XC_OSD_BlENDING_MODE0 = 0,
    E_XC_OSD_BlENDING_MODE1 = 1,
    E_XC_OSD_BlENDING_TYPE_NUM,
} E_XC_OSD_BlENDING_TYPE;


typedef enum
{
    E_XC_PRE_SCALING = 0,
    E_XC_POST_SCALING,
    E_XC_BOTH_SCALING,
}E_XC_SCALING_TYPE;


typedef enum
{
    E_XC_H_VECTOR = 0,
    E_XC_V_VECTOR,
    E_XC_HV_VECTOR,
}E_XC_VECTOR_TYPE;


typedef enum
{
    E_XC_MCDI_ME1 = 0,
    E_XC_MCDI_ME2 = 1,
    E_XC_MCDI_BOTH,
    E_XC_MCDI_SUB_ME1,
    E_XC_MCDI_SUB_ME2,
    E_XC_MCDI_SUB_BOTH,
    E_XC_MCDI_MAX,
}E_XC_MCDI_TYPE;

typedef struct
{
    MS_U8 p1;
    MS_U8 p2;
    MS_U8 p3;
    MS_U8 p4;
    MS_U8 p5;
    MS_U8 p6;
    MS_U8 p7;
    MS_U8 p8;
} FRC_R2_CMD_PARAMETER_t, *p_FRC_R2_CMD_PARAMETER_t;

typedef enum
{
    E_XC_FRC_MB_CMD_NONE = 0x00,
    E_XC_FRC_MB_CMD_TEST = 0x01,
    E_XC_FRC_MB_CMD_GET_SW_VERSION = 0x02,
    E_XC_FRC_MB_CMD_GET_CMD_VERSION = 0x03,
    E_XC_FRC_MB_CMD_INIT = 0x10,





    E_XC_FRC_MB_CMD_SET_TIMING = 0x11,
    E_XC_FRC_MB_CMD_SET_INPUT_FRAME_SIZE = 0x12,
    E_XC_FRC_MB_CMD_SET_OUTPUT_FRAME_SIZE = 0x13,
    E_XC_FRC_MB_CMD_SET_INPUT_3D_FORMAT = 0x14,

    E_XC_FRC_MB_CMD_SET_3D_DEPTH_OFFSET = 0x15,

    E_XC_FRC_MB_CMD_SET_FPLL_LOCK_DONE = 0x16,
    E_XC_FRC_MB_CMD_SET_MFC_MDOE = 0x20,


    E_XC_FRC_MB_CMD_SET_MFC_DEMO_MODE = 0x21,
    E_XC_FRC_MB_CMD_SET_MFC_LOW_BANDWIDTH = 0x23,
    E_XC_FRC_MB_CMD_SET_MFC_WAIT_TODO = 0x24,
    E_XC_FRC_MB_CMD_SET_LOCAL_DIMMING_MODE = 0x30,
    E_XC_FRC_MB_CMD_SET_2D_TO_3D_MODE = 0x40,





    E_XC_FRC_MB_CMD_SET_PWM_ENABLE = 0x50,
    E_XC_FRC_MB_CMD_SET_PWM_DUTY_PHASE = 0x51,



    E_XC_FRC_MB_CMD_SET_PWM_FREQ = 0x52,




    E_XC_FRC_MB_CMD_SET_FORCE_PWM = 0x53,
    E_XC_FRC_MB_CMD_SET_IR_EMMITER_LR_SHIFT = 0x54,

    E_XC_FRC_MB_CMD_SET_IR_EMMITER_LR_MODE = 0x55,
# 2710 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
} E_XC_FRC_MAILBOX_CMD;



typedef enum
{
    E_LD_PANEL_LG32inch_LR10 = 0x0,
    E_LD_PANEL_LG37inch_LR10 = 0x1,
    E_LD_PANEL_LG42inch_LR16 = 0x2,
    E_LD_PANEL_LG47inch_LR16 = 0x3,
    E_LD_PANEL_LG55inch_LR16 = 0x4,
    E_LD_PANEL_LG55inch_LR12 = 0x5,
    E_LD_PANEL_CMO42inch_LR16 = 0x6,
    E_LD_PANEL_LG50inch_4K2K_VB1 = 0x7,
    E_LD_PANEL_DEFAULT,
    E_LD_PANEL_NUMS,
}EN_LD_PANEL_TYPE;

typedef enum
{
    E_LD_MODE_OFF = 0,
    E_LD_MODE_LOW = 1,
    E_LD_MODE_MID = 2,
    E_LD_MODE_HIGH = 3,
}EN_LD_MODE;


typedef struct DLL_PACKED
{
    MS_U16 u16PixelStep;
    MS_U8 u8ColorThreshold;
    MS_U8 u8TryTimes;
    MS_U16 u16LinearDiff;
}ST_DETECTNL_PARA;

#define FRC_PATHCTRL_ALLOFF (0x0000)
#define FRC_PATHCTRL_OP2COLORMATRIX (0x0001)
#define FRC_PATHCTRL_OP2CSCDITHER (0x0002)
#define FRC_PATHCTRL_OP2BRIGHTNESS (0x0004)
#define FRC_PATHCTRL_OP2CONTRAST (0x0008)
#define FRC_PATHCTRL_OP2NOISEROUND (0x0010)


typedef struct
{
    MS_U16 u16OC_Tgen_HTotal;
    MS_U16 u16OC_Tgen_VTotal;

    MS_U16 u16OC_Tgen_Hsync_Start;
    MS_U16 u16OC_Tgen_Hsync_End;
    MS_U16 u16OC_Tgen_HframDE_Start;
    MS_U16 u16OC_Tgen_HframDE_End;

    MS_U16 u16OC_Tgen_Vsync_Start;
    MS_U16 u16OC_Tgen_Vsync_End;
    MS_U16 u16OC_Tgen_VframDE_Start;
    MS_U16 u16OC_Tgen_VframDE_End;
}MS_XC_OSDC_TGEN_INFO;


typedef struct
{
    MS_BOOL bOC_ClK_En;
    MS_BOOL bOC_Mixer_Bypass_En;
    MS_BOOL bOC_Mixer_InvAlpha_En;
    MS_BOOL bOC_Mixer_Hsync_Vfde_Out;
    MS_BOOL bOC_Mixer_Hfde_Vfde_Out;
    MS_U16 u16OC_Lpll_type;
    MS_U8 u8OC_OutputFormat;
}MS_XC_OSDC_CTRL_INFO;

typedef enum
{
    E_XC_OSDC_TGEN_MANUAL = 0,
    E_XC_OSDC_TGEN_1366x768,
    E_XC_OSDC_TGEN_1920x1080,
    E_XC_OSDC_TGEN_3840x2160,
    E_XC_OSDC_TGEN_3840x1080,

    E_XC_OSDC_TGEN_MAX,
}E_XC_OSDC_TGEN_Type;

typedef enum
{
    E_XC_OSDC_INIT = 0,
    E_XC_OSDC_CTRL_TGEN,
    E_XC_OSDC_CTRL_MISC,
    E_XC_OSDC_CTRL_OUTPUT_FORMAT,
}E_XC_OSDC_CTRL_TYPE;


typedef struct DLL_PACKED
{
    MS_U32 ODSC_DISPInfo_Version;

    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;

    MS_U32 SYNCHST;
    MS_U32 SYNCHEND;
    MS_U32 SYNCVST;
    MS_U32 SYNCVEND;

    MS_BOOL bCLK_EN;
    MS_BOOL bMIXER_BYPASS_EN;
    MS_BOOL bMIXER_INVALPHA_EN;
    MS_BOOL bMIXER_HSTVFDEOUT_EN;
    MS_BOOL bMIXER_HFDEVFDEOUT_EN;

} MS_OSDC_DST_DispInfo;


typedef enum
{
    E_XC_BYPASS_HDMI = 0,
    E_XC_BYPASS_DC_MAIN,
    E_XC_BYPASS_DC_SUB,
}E_XC_BYPASS_InputSource;



typedef enum
{
    E_XC_OP1_PATGEN_DISP_LB_MODE,
    E_XC_OP1_PATGEN_OPM_MODE,
}EN_XC_OP1_PATGEN_MODE;

typedef enum{
    E_XC_OP1_PATTERN_OFF = 0,
    E_XC_OP1_WB_PATTERN,
    E_XC_OP1_PURE_RED_PATTERN,
    E_XC_OP1_PURE_GREEN_PATTERN,
    E_XC_OP1_PURE_BLUE_PATTERN,
    E_XC_OP1_PURE_WHITE_PATTERN,
    E_XC_OP1_PURE_BLACK_PATTERN,
    E_XC_OP1_PURE_GREY_PATTERN,
    E_XC_OP1_PURE_COLOR_V_BAR_PATTERN,
    E_XC_OP1_PURE_COLOR_H_BAR_PATTERN,
    E_XC_OP1_PURE_GREY_BAR_16_PATTERN,
    E_XC_OP1_PURE_GREY_BAR_32_PATTERN,
    E_XC_OP1_PURE_GREY_BAR_64_PATTERN,
    E_XC_OP1_PURE_GREY_RGB_32_PATTERN,
    E_XC_OP1_PURE_RGB_CHECKERBOARD_PATTERN,
    E_XC_OP1_DOAFADE_GRAY_PATTERN,
    E_XC_OP1_CALIBRATION_COLOR_DOTFADE_PATTERN,
    E_XC_OP1_CALIBRATION_PATTERN,
    E_XC_OP1_PATTERN_1,
    E_XC_OP1_PATTERN_2,
    E_XC_OP1_PATTERN_3,
    E_XC_OP1_3D_PATTERN,
    E_XC_OP1_PURE_RED_100IRE_PATTERN,
    E_XC_OP1_PURE_GREEN_100IRE_PATTERN,
    E_XC_OP1_PURE_BLUE_100IRE_PATTERN,
    E_XC_OP1_PURE_RED_70IRE_PATTERN,
    E_XC_OP1_PURE_GREEN_70IRE_PATTERN,
    E_XC_OP1_PURE_BLUE_70IRE_PATTERN,
    E_XC_OP1_PURE_RED_40IRE_PATTERN,
    E_XC_OP1_PURE_GREEN_40IRE_PATTERN,
    E_XC_OP1_PURE_BLUE_40IRE_PATTERN,
    E_XC_OP1_PURE_RED_20IRE_PATTERN,
    E_XC_OP1_PURE_GREEN_20IRE_PATTERN,
    E_XC_OP1_PURE_BLUE_20IRE_PATTERN,
    E_XC_OP1_PURE_RED_10IRE_PATTERN,
    E_XC_OP1_PURE_GREEN_10IRE_PATTERN,
    E_XC_OP1_PURE_BLUE_10IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_100IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_90IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_80IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_70IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_60IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_50IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_40IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_30IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_20IRE_PATTERN,
    E_XC_OP1_PURE_WHITE_10IRE_PATTERN,
    E_XC_OP1_PURE_GAMMA_GREY1_PATTERN,
    E_XC_OP1_PURE_GAMMA_GREY2_PATTERN,
    E_XC_OP1_PURE_RGB_CHECKERBOARD_PATTERN_2,
}EN_XC_OP1_PATTERN;


typedef enum
{
    E_XC_OP1_PATTERN_MODE,
    E_XC_OP2_PATTERN_MODE,
}EN_XC_WB_PATTERN_MODE;


typedef struct
{

    MS_U16 u16HStart;
    MS_U16 u16VStart;
    MS_U16 u16Width;
    MS_U16 u16Height;
    MS_U16 u16HTotal;
    MS_U16 u16VTotal;

    MS_U16 u16DefaultVFreq;


    MS_U8 u8HSyncWidth;
    MS_U16 u16VSyncStart;
    MS_U8 u8VSyncWidth;
    MS_BOOL bManuelVSyncCtrl;


    MS_U16 u16OCTRL;
    MS_U16 u16OSTRL;
    MS_U16 u16ODRV;
    MS_U16 u16DITHCTRL;

} MS_XC_VOP_Data;

#ifdef UFO_XC_SETBLACKVIDEOBYMODE

typedef enum
{
    E_XC_BLACK_VIDEO_BASIC,
    E_XC_BLACK_VIDEO_MEMSYNC,
}EN_XC_BLACK_VIDEO_MODE;
#endif

typedef enum
{
# 2948 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
    E_XC_OSDC_OUTPUT_FORMAT_VBY1_ARGB1,
    E_XC_OSDC_OUTPUT_FORMAT_VBY1_ARGB2,
} E_XC_OSDC_OUTPUT_FORMAT;

typedef struct DLL_PACKED
{
    MS_PHYADDR u32FBSize[2];
    MS_U16 u16VBox_Htotal[2];
    MS_U16 u16VBox_Vtotal[2];
    MS_U16 u16VBox_PanelHsize;
    MS_U16 u16VBox_PanelVsize;
    MS_U16 u16Vfreq[2];
    MS_BOOL bInterface[2];
}XC_VBOX_INFO;

typedef enum
{
    E_XC_BWD_UPDATE_BWR_CONFIG = 0,
} E_XC_BWD_CONFIG_TYPE;

#ifdef UFO_XC_TEST_PATTERN

typedef enum
{
    E_XC_ADC_PATTERN_MODE,
    E_XC_IPMUX_PATTERN_MODE,
    E_XC_IP1_PATTERN_MODE,
    E_XC_OP_PATTERN_MODE,
    E_XC_VOP_PATTERN_MODE,
    E_XC_VOP2_PATTERN_MODE,
    E_XC_MOD_PATTERN_MODE,
}EN_XC_TEST_PATTERN_MODE;


typedef struct
{
    MS_U8 u8EnableADCType;
    MS_U16 u16Ramp;
} XC_SET_ADC_TESTPATTERN_t, *p_XC_SET_ADC_TESTPATTERN_t;


typedef struct
{
    MS_BOOL bEnable;
    MS_U16 u16R_CR_Data;
    MS_U16 u16G_Y_Data;
    MS_U16 u16B_CB_Data;
} XC_SET_IPMUX_TESTPATTERN_t, *p_XC_SET_IPMUX_TESTPATTERN_t;


typedef struct
{
    MS_U16 u16Enable;
    MS_U32 u32Pattern_type;
    SCALER_WIN eWindow;
} XC_SET_IP1_TESTPATTERN_t, *p_XC_SET_IP1_TESTPATTERN_t;


typedef struct
{
    MS_BOOL bMiuLineBuff;
    MS_BOOL bLineBuffHVSP;
} XC_SET_OP_TESTPATTERN_t, *p_XC_SET_OP_TESTPATTERN_t;


typedef struct
{
    MS_BOOL bEnable;
} XC_SET_VOP_TESTPATTERN_t, *p_XC_SET_VOP_TESTPATTERN_t;


typedef struct
{
    MS_BOOL bEnable;
    MS_U16 u16R_CR_Data;
    MS_U16 u16G_Y_Data;
    MS_U16 u16B_CB_Data;
} XC_SET_VOP2_TESTPATTERN_t, *p_XC_SET_VOP2_TESTPATTERN_t;


typedef struct
{
    MS_BOOL bEnable;
    MS_U16 u16R_CR_Data;
    MS_U16 u16G_Y_Data;
    MS_U16 u16B_CB_Data;
} XC_SET_MOD_TESTPATTERN_t, *p_XC_SET_MOD_TESTPATTERN_t;
#endif




typedef enum
{
    E_XC_VPC_MULTI_SPEED_PLAYBACK_CTRL,
}E_XC_VIDEO_PLAYBACK_CTRL_ID;



typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
}ST_XC_VPC_MULTI_SPEED_PLAYBACK_CTRL;


#ifdef UFO_XC_AUTO_DOWNLOAD

#define AUTODOWNLOAD_CONFIG_INFO_VERSION 1

#define AUTODOWNLOAD_DATA_INFO_VERSION 1

#define AUTODOWNLOAD_FORMAT_INFO_VERSION 1

typedef enum
{
    E_XC_AUTODOWNLOAD_CLIENT_HDR,
    E_XC_AUTODOWNLOAD_CLIENT_OP2GAMMA,
    E_XC_AUTODOWNLOAD_CLIENT_FRCOP2GAMMA,
    E_XC_AUTODOWNLOAD_CLIENT_XVYCC,
    E_XC_AUTODOWNLOAD_CLIENT_ODTABLE1,
    E_XC_AUTODOWNLOAD_CLIENT_ODTABLE2,
    E_XC_AUTODOWNLOAD_CLIENT_ODTABLE3,
    E_XC_AUTODOWNLOAD_CLIENT_DEMURA,
    E_XC_AUTODOWNLOAD_CLIENT_OP2LUT,
    E_XC_AUTODOWNLOAD_CLIENT_T3D_0,
    E_XC_AUTODOWNLOAD_CLIENT_T3D_1,
    E_XC_AUTODOWNLOAD_CLIENT_FRCSPTPOPM,
    E_XC_AUTODOWNLOAD_CLIENT_FOOPM,
    E_XC_AUTODOWNLOAD_CLIENT_MAX,
} EN_XC_AUTODOWNLOAD_CLIENT;

typedef enum
{
    E_XC_AUTODOWNLOAD_TRIGGER_MODE,
    E_XC_AUTODOWNLOAD_ENABLE_MODE,
} EN_XC_AUTODOWNLOAD_MODE;

typedef enum
{
    E_XC_AUTODOWNLOAD_HDR_SUB_TMO,
    E_XC_AUTODOWNLOAD_HDR_SUB_3DLUT,
    E_XC_AUTODOWNLOAD_HDR_SUB_GAMMA,
    E_XC_AUTODOWNLOAD_HDR_SUB_DEGAMMA,
} EN_XC_AUTODOWNLOAD_SUB_CLIENT;

typedef struct
{
    MS_U32 u32ConfigInfo_Version;
    MS_U16 u16ConfigInfo_Length;

    EN_XC_AUTODOWNLOAD_CLIENT enClient;
    MS_PHY phyBaseAddr;
    MS_U32 u32Size;
    MS_BOOL bEnable;
    EN_XC_AUTODOWNLOAD_MODE enMode;
} XC_AUTODOWNLOAD_CONFIG_INFO;

typedef struct
{
    MS_U32 u32FormatInfo_Version;
    MS_U16 u16FormatInfo_Length;

    EN_XC_AUTODOWNLOAD_SUB_CLIENT enSubClient;
    MS_BOOL bEnableRange;
#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u16StartAddr;
    MS_PHY u16EndAddr;
#else
    MS_U16 u16StartAddr;
    MS_U16 u16EndAddr;
#endif
} XC_AUTODOWNLOAD_FORMAT_INFO;

typedef struct
{
    MS_U32 u32DataInfo_Version;
    MS_U16 u16DataInfo_Length;

    EN_XC_AUTODOWNLOAD_CLIENT enClient;
    MS_U8* pu8Data;
    MS_U32 u32Size;
    void* pParam;
} XC_AUTODOWNLOAD_DATA_INFO;

typedef struct
{
    EN_XC_AUTODOWNLOAD_CLIENT enClient;
    MS_BOOL bSupported;
} XC_AUTODOWNLOAD_CLIENT_SUPPORTED_CAPS;
#endif

#ifdef UFO_XC_HDR
#if (UFO_XC_HDR_VERSION == 2)
#define HDR_3DLUT_INFO_VERSION 1
#define HDR_OPEN_METADATA_INFO_VERSION 1
#define HDR_DMA_CONFIG_INFO_VERSION 1
#define HDR_DMA_INIT_INFO_VERSION 1
#define HDR_OTT_SHARE_MEMORY_INFO_VERSION 1

typedef enum
{
    E_XC_HDR_CTRL_NONE,
    E_XC_HDR_CTRL_ENABLE,
    E_XC_HDR_CTRL_SET_TYPE,
    E_XC_HDR_CTRL_SET_3DLUT,
    E_XC_HDR_CTRL_INIT_DMA,
    E_XC_HDR_CTRL_CONFIG_DMA,
    E_XC_HDR_CTRL_SET_OTT_SHARE_MEMORY,
    E_XC_HDR_CTRL_SET_OPEN_METADATA,
    E_XC_HDR_CTRL_SET_COLOR_FORMAT,
    E_XC_HDR_CTRL_CFD_CONTROL,
    E_XC_HDR_CTRL_GET_TYPE,
#ifdef UFO_XC_HDMI_4K2K_DMA
    E_XC_HDR_CTRL_INIT_DMA_HDMI,
#endif
    E_XC_HDR_CTRL_MAX,
} EN_XC_HDR_CTRL_TYPE;

typedef enum
{
    E_XC_HDR_DMA_MODE_NONE,
#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_HDR_DMA_MODE_YC12,
    E_XC_HDR_DMA_MODE_YUV444,
    E_XC_HDR_DMA_MODE_YC8,
    E_XC_HDR_DMA_MODE_YC10,
#else
    E_XC_HDR_DMA_MODE_8BIT,
    E_XC_HDR_DMA_MODE_10BIT,
    E_XC_HDR_DMA_MODE_12BIT,
#endif
    E_XC_HDR_DMA_MODE_MAX,
} EN_XC_HDR_DMA_MODE;

typedef enum
{
    E_XC_HDR_COLOR_NONE,
    E_XC_HDR_COLOR_YUV420,
    E_XC_HDR_COLOR_YUV422,
    E_XC_HDR_COLOR_YUV444,
    E_XC_HDR_COLOR_RGB,
    E_XC_HDR_COLOR_MAX,
} EN_XC_HDR_COLOR_FORMAT;

typedef struct
{
    MS_U32 u32OpenInfo_Version;
    MS_U16 u16OpenInfo_Length;



} XC_HDR_OPEN_METADATA_INFO;

typedef struct
{
    MS_U32 u323DLutInfo_Version;
    MS_U16 u163DLutInfo_Length;

    MS_U8* pu8Data;
    MS_U32 u32Size;
} XC_HDR_3DLUT_INFO;

typedef struct
{
    MS_U32 u32DMAConfigInfo_Version;
    MS_U16 u16DMAConfigInfo_Length;

    EN_XC_HDR_DMA_MODE enMode;
} XC_HDR_DMA_CONFIG_INFO;

typedef struct
{
    MS_U32 u32DMAInitInfo_Version;
    MS_U16 u16DMAInitInfo_Length;

    MS_PHY phyBaseAddr;
    MS_U32 u32Size;
} XC_HDR_DMA_INIT_INFO;

typedef struct
{
    MS_U32 u32ShareMemInfo_Version;
    MS_U16 u16ShareMemInfo_Length;

    MS_PHY phyBaseAddr;
    MS_U32 u32Size;
} XC_HDR_OTT_SHARE_MEMORY_INFO;


#endif
#endif

#ifdef UFO_XC_HDR
typedef enum
{
    E_XC_HDR_TYPE_NONE,
    E_XC_HDR_TYPE_OPEN,
    E_XC_HDR_TYPE_DOLBY,
    E_XC_HDR_TYPE_TECHNICOLOR,
    E_XC_HDR_TYPE_HLG,
    E_XC_HDR_TYPE_MAX,
} EN_XC_HDR_TYPE;

typedef struct DLL_PACKED
{
    EN_XC_HDR_TYPE enHDRType;
    MS_BOOL bSupported;

    MS_U32 u32Version;
    MS_S32 s32MaxLuminanceData;
    MS_S32 s32MinLuminanceData;
    MS_S32 s32MaxFrameAveLumiance;
} XC_HDR_SUPPORTED_CAPS;

#endif


#define CFD_INIT_VERSION 0
#define CFD_HDMI_VERSION 0



#define CFD_PANEL_VERSION 1
#define CFD_ANALOG_VERSION 0



#define CFD_HDR_VERSION 1
#define CFD_EDID_VERSION 0
# 3286 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
#if defined(UFO_PUBLIC_HEADER_500_3)
#define CFD_OSD_VERSION 2
#elif defined(UFO_PUBLIC_HEADER_500)
#define CFD_OSD_VERSION 5
#else
#define CFD_OSD_VERSION 6
#endif
#define CFD_DLC_VERSION 0
#define CFD_LINEAR_RGB_VERSION 0
#define CFD_FIRE_VERSION 0




#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500)
#define CFD_STATUS_VERSION 3
#else
#define CFD_STATUS_VERSION 2
#endif
#define CFD_TMO_VERSION 1

typedef enum
{

    E_XC_CFD_CTRL_TYPE_INIT = 0,

    E_XC_CFD_CTRL_TYPE_VGA = 1,

    E_XC_CFD_CTRL_TYPE_TV = 2,

    E_XC_CFD_CTRL_TYPE_CVBS = 3,

    E_XC_CFD_CTRL_TYPE_SVIDEO = 4,

    E_XC_CFD_CTRL_TYPE_YPBPR = 5,

    E_XC_CFD_CTRL_TYPE_SCART = 6,

    E_XC_CFD_CTRL_TYPE_HDMI = 7,

    E_XC_CFD_CTRL_TYPE_DTV = 8,

    E_XC_CFD_CTRL_TYPE_DVI = 9,

    E_XC_CFD_CTRL_TYPE_MM = 10,

    E_XC_CFD_CTRL_TYPE_PANEL = 11,

    E_XC_CFD_CTRL_TYPE_HDR = 12,

    E_XC_CFD_CTRL_TYPE_EDID = 13,

    E_XC_CFD_CTRL_TYPE_OSD = 14,

    E_XC_CFD_CTRL_TYPE_FIRE = 15,

    E_XC_CFD_CTRL_TYPE_DLC = 16,

    E_XC_CFD_CTRL_TYPE_LINEAR_RGB = 17,

    E_XC_CFD_CTRL_GET_HDMI_STATUS = 18,

    E_XC_CFD_CTRL_SET_HDR_ONOFF_SETTING = 19,
#if defined(UFO_PUBLIC_HEADER_500_3)

    E_XC_CFD_CTRL_GET_STATUS = 20,
#else

    E_XC_CFD_CTRL_TYPE_STATUS = 20,
#endif

    E_XC_CFD_CTRL_SET_TMO = 21,


    E_XC_CFD_CTRL_TYPE_EX_BASE = 0x40000000,


    E_XC_CFD_CTRL_GET_OSD_PROCESS_CONFIGS= 0x40000001,

    E_XC_CFD_CTRL_TYPE_MAX,
} EN_XC_CFD_CTRL_TYPE;


typedef enum
{

    E_XC_CFD_HDR_TYPE_NONE = 0x0000,

    E_XC_CFD_HDR_TYPE_DOLBY = 0x0001,

    E_XC_CFD_HDR_TYPE_OPEN = 0x0002,

    E_XC_CFD_HDR_TYPE_TCH = 0x0004,

    E_XC_CFD_HDR_TYPE_HLG = 0x0008,

    E_XC_CFD_HDR_TYPE_MAX = 0xff
} EN_XC_CFD_HDR_TYPE;


typedef enum
{

    E_XC_CFD_UPDATE_TYPE_ALL,

    E_XC_CFD_UPDATE_TYPE_OSD_ONLY,

    E_XC_CFD_UPDATE_TYPE_MAX
} EN_XC_CFD_UPDATE_TYPE;


typedef enum
{

    E_XC_CFD_TMO_LEVEL_LOW,

    E_XC_CFD_TMO_LEVEL_MIDDLE,

    E_XC_CFD_TMO_LEVEL_HIGH,

    E_XC_CFD_TMO_LEVEL_MAX
} EN_XC_CFD_TMO_LEVEL;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8Win;

    MS_U8 u8InputSource;
} XC_CFD_INIT;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8Win;


    MS_BOOL bIsFullRange;



    MS_U8 u8PixelFormat;

    MS_U8 u8Colorimetry;

    MS_U8 u8ExtendedColorimetry;

    MS_U8 u8RgbQuantizationRange;

    MS_U8 u8YccQuantizationRange;



    MS_BOOL bHDRInfoFrameValid;

    MS_U8 u8EOTF;

    MS_U8 u8SMDID;

    MS_U16 u16Display_Primaries_x[3];

    MS_U16 u16Display_Primaries_y[3];

    MS_U16 u16White_point_x;

    MS_U16 u16White_point_y;

    MS_U16 u16MasterPanelMaxLuminance;

    MS_U16 u16MasterPanelMinLuminance;

    MS_U16 u16MaxContentLightLevel;

    MS_U16 u16MaxFrameAvgLightLevel;

} XC_CFD_HDMI;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8Win;


    MS_U8 u8ColorFormat;

    MS_U8 u8ColorDataFormat;

    MS_BOOL bIsFullRange;

    MS_U8 u8ColorPrimaries;

    MS_U8 u8TransferCharacteristics;

    MS_U8 u8MatrixCoefficients;

} XC_CFD_ANALOG;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8ColorFormat;

    MS_U8 u8ColorDataFormat;

    MS_BOOL bIsFullRange;


    MS_U16 u16Display_Primaries_x[3];

    MS_U16 u16Display_Primaries_y[3];

    MS_U16 u16White_point_x;

    MS_U16 u16White_point_y;

    MS_U16 u16MaxLuminance;

    MS_U16 u16MedLuminance;

    MS_U16 u16MinLuminance;

    MS_BOOL bLinearRgb;

    MS_BOOL bCustomerColorPrimaries;

    MS_U16 u16SourceWx;

    MS_U16 u16SourceWy;
} XC_CFD_PANEL;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8HDMISinkHDRDataBlockValid;

    MS_U8 u8HDMISinkEOTF;

    MS_U8 u8HDMISinkSM;

    MS_U8 u8HDMISinkDesiredContentMaxLuminance;

    MS_U8 u8HDMISinkDesiredContentMaxFrameAvgLuminance;

    MS_U8 u8HDMISinkDesiredContentMinLuminance;

    MS_U8 u8HDMISinkHDRDataBlockLength;


    MS_U16 u16Display_Primaries_x[3];

    MS_U16 u16Display_Primaries_y[3];

    MS_U16 u16White_point_x;

    MS_U16 u16White_point_y;


    MS_U8 u8HDMISinkEDIDBaseBlockVersion;

    MS_U8 u8HDMISinkEDIDBaseBlockReversion;

    MS_U8 u8HDMISinkEDIDCEABlockReversion;


    MS_U8 u8HDMISinkVCDBValid;

    MS_U8 u8HDMISinkSupportYUVFormat;


    MS_U8 u8HDMISinkExtendedColorspace;

    MS_U8 u8HDMISinkEDIDValid;
} XC_CFD_EDID;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8Win;

    MS_U8 u8HdrType;

    MS_U8 u8TmoLevel;
} XC_CFD_HDR;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_BOOL bUseCustomerDlcCurve;
} XC_CFD_DLC;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8Win;

    MS_BOOL bEnable;
} XC_CFD_LINEAR_RGB;


typedef struct
{
    MS_U32 u32Version;
    MS_U16 u16Length;

    MS_U16 u16Hue;
    MS_U16 u16Saturation;
    MS_U16 u16Contrast;


    MS_U8 u8OSDUIEn;




    MS_U8 u8OSDUIMode;


    MS_BOOL bHueValid;
    MS_BOOL bSaturationValid;
    MS_BOOL bContrastValid;

    MS_BOOL bBacklightValid;
    MS_U32 u32MinBacklight;
    MS_U32 u32MaxBacklight;
    MS_U32 u32Backlight;

    MS_U8 u8Win;
    MS_BOOL bColorRangeValid;
    MS_U8 u8ColorRange;

#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    MS_BOOL bUltraBlackLevelValid;
    MS_U8 u8UltraBlackLevel;
    MS_BOOL bUltraWhiteLevelValid;
    MS_U8 u8UltraWhiteLevel;

    MS_BOOL bSkipPictureSettingValid;
    MS_BOOL bSkipPictureSetting;
#endif

#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500) ||defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    MS_BOOL bColorCorrectionValid;
    MS_S16 s16ColorCorrectionMatrix[32];
#endif

    MS_BOOL bViewModeValid;
    MS_U8 u8ViewMode;

} XC_CFD_OSD_CONTROL;


typedef struct
{

    MS_U32 u32Version;
    MS_U16 u16Length;



    MS_U8 u8OSD_SDR2HDR_en;



    MS_U8 u8OSD_IsFullRange;


    MS_U8 u8OSD_Dataformat;


    MS_U8 u8OSD_HDRMode;



    MS_U8 u8OSD_colorprimary;


    MS_U8 u8OSD_transferf;


    MS_U16 u16OSD_MaxLumInNits;


    MS_U8 u8Video_colorprimary;


    MS_U8 u8Video_MatrixCoefficients;


    MS_U8 u8Video_HDRMode;


    MS_U16 u16Video_MaxLumInNits;



    MS_U8 u8Video_IsFullRange;


    MS_U8 u8Video_Dataformat;

    MS_U16 u16AntiTMO_SourceInNits;

} XC_CFD_OSD_PROCESS_CONFIGS;

typedef struct
{
    MS_U8 u8CurrentIndex;
    MS_U8 u8InputFormat;
    MS_U8 u8InputDataFormat;
    MS_BOOL u8Video_Full_Range_Flag;

    MS_BOOL bVUIValid;
    MS_U8 u8Colour_primaries;
    MS_U8 u8Transfer_Characteristics;
    MS_U8 u8Matrix_Coeffs;

    MS_BOOL bSEIValid;
    MS_U16 u16Display_Primaries_x[3];
    MS_U16 u16Display_Primaries_y[3];
    MS_U16 u16White_point_x;
    MS_U16 u16White_point_y;
    MS_U32 u32Master_Panel_Max_Luminance;
    MS_U32 u32Master_Panel_Min_Luminance;

    MS_BOOL bContentLightLevelEnabled;
    MS_U16 u16maxContentLightLevel;
    MS_U16 u16maxPicAverageLightLevel;
} XC_HDR_CFD_MEMORY_FORMAT;

typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8Win;

    MS_U8 u8VideoHdrType;

    MS_BOOL bIsHdrRunning;

    MS_BOOL bIsFullRange;

    MS_BOOL bUltraBlackWhiteActive;

    MS_U8 u8ColorType;
#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_500)

    union
    {
        XC_CFD_HDMI stHdmiInfoCFD;
        XC_HDR_CFD_MEMORY_FORMAT stHDRMemFormatCFD;
    } HDRMetadata;
#endif
} XC_CFD_STATUS;

typedef struct
{
    MS_U32 u16HdrType;
    MS_U16 u16Level;

    MS_U16 u16ControlSize;
    MS_U8 *pu8data;
#if !defined (__aarch64__)

    void *pDummy;
#endif

}ST_TMO_LEVEL;

typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U16 u16Hdr10Smin[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16Hdr10Smed[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16Hdr10Smax[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16Hdr10Tmin[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16Hdr10Tmed[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16Hdr10Tmax[E_XC_CFD_TMO_LEVEL_MAX];

    MS_U16 u16HlgSmin[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16HlgSmed[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16HlgSmax[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16HlgTmin[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16HlgTmed[E_XC_CFD_TMO_LEVEL_MAX];
    MS_U16 u16HlgTmax[E_XC_CFD_TMO_LEVEL_MAX];


    MS_U16 u16LevelCount;
    ST_TMO_LEVEL *pstTmoLevel;
#if !defined (__aarch64__)

    void *pDummy;
#endif

} ST_KDRV_XC_CFD_TMO;


typedef struct
{

    MS_U32 u32Version;

    MS_U16 u16Length;


    MS_U8 u8Win;

    MS_U8 u8InputSource;

    MS_U8 u8UpdateType;

    MS_BOOL bIsRgbBypass;

    MS_BOOL bIsHdMode;
} XC_CFD_FIRE;


typedef struct __attribute__((packed))
{

    EN_XC_CFD_CTRL_TYPE enCtrlType;

    void *pParam;
#if !defined (__aarch64__)

    void *pDummy;
#endif

    MS_U32 u32ParamLen;

    MS_U16 u16ErrCode;
} XC_CFD_CONTROL_INFO;

typedef struct
{
    MS_WINDOW_TYPE stCropWin;
    MS_WINDOW_TYPE stDispWin;
    MS_BOOL bInterlace;

    E_XC_FB_LEVEL eFBLevel;
    MS_U16 u16HSizeAfterPrescaling;
    MS_U16 u16VSizeAfterPrescaling;
    SCALER_WIN eWindow;
} XC_GET_FB_LEVEL;




typedef struct __attribute__((__packed__))
{
    MS_U32 ID[4];
} RESOURCE;
#define OP_TEE_XC_REG_MAX_CNT 0x10
#define OP_TEE_XC_DRAM_MAX_CNT 0x10
typedef enum
{
    E_XC_OPTEE_GET_PIPE_ID,
    E_XC_OPTEE_ENABLE,
    E_XC_OPTEE_DISABLE,
    E_XC_OPTEE_SET_HANDLER,
    E_XC_OPTEE_SYNC_HANDLER,
    E_XC_OPTEE_GET_HANDLER,
    E_XC_OPTEE_UPDATE_HANDLER,
    E_XC_OPTEE_SET_MUX,
    E_XC_OPTEE_SYNC_MUX,
    E_XC_OPTEE_GET_MUX,
    E_XC_OPTEE_MAX,
} EN_XC_OPTEE_ACTION;
typedef struct __attribute__((__packed__))
{
    MS_U32 bk;
    MS_U16 value;
    MS_U16 mask;
} XC_OPTEE_REG_DATA;
typedef struct __attribute__((__packed__))
{
#if defined(UFO_PUBLIC_HEADER_700) ||defined(UFO_PUBLIC_HEADER_500_3)
    MS_PHY address;
#else
    MS_U32 address;
#endif
    MS_U32 length;
} XC_OPTEE_DRAM_DATA;
typedef struct __attribute__((__packed__))
{
    MS_U16 version;
    MS_U32 length;
    SCALER_WIN eWindow;


    MS_U32 pipeID;

    MS_BOOL isEnable;

    MS_U32 regs_cnt;
    XC_OPTEE_REG_DATA regs_data[OP_TEE_XC_REG_MAX_CNT];
    MS_U32 drams_cnt;
    XC_OPTEE_DRAM_DATA drams_data[OP_TEE_XC_DRAM_MAX_CNT];

} XC_OPTEE_HANDLER;
typedef struct __attribute__((__packed__))
{
    MS_U16 version;
    MS_U32 length;
    SCALER_WIN eWindow;
    MS_U32 regs_cnt;
    XC_OPTEE_REG_DATA regs_data[OP_TEE_XC_REG_MAX_CNT];
    MS_BOOL bfire;
} XC_OPTEE_MUX_DATA;


typedef enum
{
    E_XC_3D_ATTRIBUTE_OSD,
    E_XC_3D_ATTRIBUTE_NUM,
} E_XC_3D_ATTRIBUTE_TYPE;


typedef enum
{
    E_XC_3D_OSD_BLENDING_SC_IP,
    E_XC_3D_OSD_BLENDING_SC_OP,
    E_XC_3D_OSD_BLENDING_FRC_IP,
    E_XC_3D_OSD_BLENDING_FRC_OP,
    E_XC_3D_OSD_BLENDING_NUM,
} E_XC_3D_OSD_BLENDING_POINT;

#ifdef UFO_XC_SCAN_TYPE

typedef enum
{
    E_XC_NORMAL_MODE = 0,
    E_XC_FORCE_P_MODE,
    E_XC_FORCE_I_MODE,
}E_XC_SCAN_TYPE;
#endif


typedef struct DLL_PACKED
{
    MS_BOOL bDRE_En;
    MS_BOOL bDRE_SWDR_En;
    MS_U8 u8DRE_DR_Set_BasicStrength;
    MS_U8 u8DRE_SWDR_Set_BasicStrength;
    MS_U16 u16DRE_SWDR_Set_StrengthDk;
    MS_U16 u16DRE_SWDR_Set_StrengthBr;
    MS_U8 u8DRE_SWDR_Set_SceneProtectLevel;
    MS_U8 u8DRE_Set_TemporalFilterLevel;
    MS_U8 u8DRE_Set_ColorCorrectLevel;
}XC_SWDR_INFO;
# 4009 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_GetLibVer(const MSIF_Version **ppVersion);






const XC_ApiInfo * MApi_XC_GetInfo(void);
# 4025 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_GetStatus(XC_ApiStatus *pDrvStatus, SCALER_WIN eWindow);
# 4043 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U16 MApi_XC_GetStatusEx(XC_ApiStatusEx *pDrvStatusEx, SCALER_WIN eWindow);
# 4052 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_GetStatusNodelay(ST_XC_APISTATUSNODELAY *pDrvStatus, SCALER_WIN eWindow);







MS_BOOL MApi_XC_SetDbgLevel(MS_U16 u16DbgSwitch);
# 4070 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_FPLLDbgMode(EN_FPLL_DBG_MODE DbgMode, EN_FPLL_DBG_FLAG DbgFlag, MS_U32 u32Data);
# 4079 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_FPLLCustomerMode(EN_FPLL_MODE eMode, EN_FPLL_FLAG eFlag, MS_U32 u32Data);




MS_BOOL MDrv_XC_SetIOMapBase(void);
# 4093 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_Init(XC_INITDATA *pXC_InitData, MS_U32 u32InitDataLen);






E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_GetConfig(XC_INITDATA *pXC_InitData);







E_APIXC_ReturnValue MApi_XC_Init_MISC(XC_INITMISC *pXC_Init_Misc, MS_U32 u32InitMiscDataLen);
# 4117 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_GetMISCStatus(XC_INITMISC *pXC_Init_Misc);
# 4126 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U32 MApi_XC_GetCapability(MS_U32 u32Id);
# 4136 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_GetChipCaps(E_XC_CAPS eCapType, MS_U32* pRet, MS_U32 ret_size);





MS_BOOL MApi_XC_Exit(void);
# 4156 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_SetDynamicScaling(XC_DynamicScaling_Info *pstDSInfo, MS_U32 u32DSInfoLen, SCALER_WIN eWindow);






void MApi_XC_Set_DynamicScalingFlag(MS_BOOL bEnable);






MS_BOOL MApi_XC_GetDynamicScalingStatus(void);
# 4179 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
#ifdef UFO_XC_SWDS_SW_FILM_ENABLE
E_APIXC_ReturnValue MApi_XC_Set_DS_ForceI_DeInterlaceMode(MS_BOOL bPmode, MS_BOOL bIsTopField, MS_U16 u16FrameRate, SCALER_WIN eWindow);
#endif







#if defined(UFO_PUBLIC_HEADER_700)
MS_PHY MApi_XC_Get_DNRBaseOffset(SCALER_WIN eWindow);
#else
MS_U32 MApi_XC_Get_DNRBaseOffset(SCALER_WIN eWindow);
#endif







#define MApi_XC_Get_StoreFrameNum MApi_XC_Get_FrameNumFactor
MS_U8 MApi_XC_Get_FrameNumFactor(SCALER_WIN eWindow);






MS_U8 MApi_XC_Get_FRCMFrameNum(SCALER_WIN eWindow);
# 4219 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_SetWindow(XC_SETWIN_INFO *pstXC_SetWin_Info, MS_U32 u32InitDataLen, SCALER_WIN eWindow);
# 4228 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_SetDualWindow(XC_SETWIN_INFO *pstXC_SetWin_Info_Main, XC_SETWIN_INFO *pstXC_SetWin_Info_Sub);
# 4238 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_SetTravelingWindow(XC_SETWIN_INFO *pstXC_SetWin_Info, MS_U32 u32InitDataLen, SCALER_WIN eWindow);
# 4250 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetInputSource( INPUT_SOURCE_TYPE_t enInputSourceType, SCALER_WIN eWindow );
#ifdef UFO_PUBLIC_HEADER_212
# 4260 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Set_FieldDetect(INPUT_SOURCE_TYPE_t enInputSrcType, EN_VIDEO_SCAN_TYPE enScanType, SCALER_WIN eWindow);
#endif







MS_BOOL MApi_XC_IsYUVSpace(SCALER_WIN eWindow);







MS_BOOL MApi_XC_IsMemoryFormat422(SCALER_WIN eWindow);







void MApi_XC_EnableForceRGBin(MS_BOOL bEnable, SCALER_WIN eWindow);
# 4294 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_EnableMirrorModeEx( MirrorMode_t eMirrorMode, SCALER_WIN eWindow);







MirrorMode_t MApi_XC_GetMirrorModeTypeEx(SCALER_WIN eWindow);







MS_BOOL MApi_XC_Is_SupportSWDS(void);




void SYMBOL_WEAK MApi_XC_SetDSInfo(XC_DS_INFO *pstSetDSInfo, MS_U32 u32DSInfoLen, SCALER_WIN eWindow);






MS_U8 SYMBOL_WEAK MApi_XC_GetSWDSIndex(SCALER_WIN eWindow);
# 4335 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_GetSyncStatus(INPUT_SOURCE_TYPE_t eCurrentSrc , XC_IP_SYNC_STATUS *sXC_Sync_Status, SCALER_WIN eWindow);
# 4344 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U8 MApi_XC_WaitOutputVSync(MS_U8 u8NumVSyncs, MS_U16 u16Timeout, SCALER_WIN eWindow);
# 4353 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U8 MApi_XC_WaitInputVSync(MS_U8 u8NumVSyncs, MS_U16 u16Timeout, SCALER_WIN eWindow);






void MApi_XC_SetHdmiSyncMode(E_HDMI_SYNC_TYPE esynctype);






E_HDMI_SYNC_TYPE MApi_XC_GetHdmiSyncMode(void);
# 4379 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetRepWindow(MS_BOOL bEnable,MS_WINDOW_TYPE Window,MS_U8 u8Color);
# 4388 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetSkipDisableOPWriteOffInFPLL(MS_BOOL bEnable, SCALER_WIN eWindow);
# 4397 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Set_OPWriteOffEnable(MS_BOOL bEnable, SCALER_WIN eWindow);







void MApi_XC_ForceSet_OPWriteOffEnable(MS_BOOL bEnable ,SCALER_WIN eWindow);







void MApi_XC_Set_OPWriteOffEnableToReg(MS_BOOL bEnable, SCALER_WIN eWindow);







MS_BOOL MApi_XC_Get_OPWriteOffEnable(SCALER_WIN eWindow);
# 4430 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SkipOPWriteOffInSetWindow(MS_BOOL bEnable, SCALER_WIN eWindow);







MS_BOOL MApi_XC_GetSkipOPWriteOffInSetWindow(SCALER_WIN eWindow);
# 4450 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetDispWinToReg(MS_WINDOW_TYPE *pstDspwin, SCALER_WIN eWindow);
# 4462 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_GetDispWinFromReg(MS_WINDOW_TYPE *pstDspwin, SCALER_WIN eWindow);







void MApi_XC_FreezeImg(MS_BOOL bEnable, SCALER_WIN eWindow);







MS_BOOL MApi_XC_IsFreezeImg(SCALER_WIN eWindow);






void MApi_XC_GenerateBlackVideoForBothWin( MS_BOOL bEnable);






void MApi_XC_Set_BLSK(MS_BOOL bEnable);






void MApi_XC_GenerateBlackVideo(MS_BOOL bEnable, SCALER_WIN eWindow);






MS_BOOL MApi_XC_IsBlackVideoEnable(SCALER_WIN eWindow);






void MApi_XC_EnableFrameBufferLess(MS_BOOL bEnable);






MS_BOOL MApi_XC_IsCurrentFrameBufferLessMode(void);







void MApi_XC_EnableRequest_FrameBufferLess(MS_BOOL bEnable);






MS_BOOL MApi_XC_IsCurrentRequest_FrameBufferLessMode(void);
# 4545 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U16 MApi_XC_Get_3D_HW_Version(void);






MS_BOOL MApi_XC_Get_3D_IsSupportedHW2DTo3D(void);
# 4563 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_Set_3D_Mode(E_XC_3D_INPUT_MODE e3dInputMode,
                            E_XC_3D_OUTPUT_MODE e3dOutputMode,
                            E_XC_3D_PANEL_TYPE e3dPanelType,
                            SCALER_WIN eWindow);






MS_BOOL MApi_XC_Set_3D_MainWin_FirstMode(MS_BOOL bMainFirst);







MS_BOOL MApi_XC_Set_3D_LR_Frame_Exchg(SCALER_WIN eWindow);







MS_BOOL MApi_XC_3D_Is_LR_Frame_Exchged(SCALER_WIN eWindow);







E_XC_3D_INPUT_MODE MApi_XC_Get_3D_Input_Mode(SCALER_WIN eWindow);






E_XC_3D_OUTPUT_MODE MApi_XC_Get_3D_Output_Mode(void);






E_XC_3D_PANEL_TYPE MApi_XC_Get_3D_Panel_Type(void);






MS_BOOL MApi_XC_Get_3D_MainWin_First(void);






MS_BOOL MApi_XC_3DMainSub_IPSync(void);







MS_BOOL MApi_XC_Set_3D_VerVideoOffset(MS_U16 u163DVerVideoOffset);






MS_U16 MApi_XC_Get_3D_VerVideoOffset(void);
# 4649 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_Is3DFormatSupported(E_XC_3D_INPUT_MODE e3dInputMode,
                                    E_XC_3D_OUTPUT_MODE e3dOutputMode);






MS_BOOL MApi_XC_Set_3D_HShift(MS_U16 u16HShift);






MS_BOOL MApi_XC_Enable_3D_LR_Sbs2Line(MS_BOOL bEnable);





MS_U16 MApi_XC_Get_3D_HShift(void);
# 4679 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_Set_3D_HW2DTo3D_Buffer(MS_PHY u32HW2DTO3D_DD_Buf, MS_PHY u32HW2DTO3D_DR_Buf);







MS_BOOL MApi_XC_Set_3D_HW2DTo3D_Parameters(MS_XC_3D_HW2DTO3D_PARA st3DHw2DTo3DPara);







MS_BOOL MApi_XC_Get_3D_HW2DTo3D_Parameters(MS_XC_3D_HW2DTO3D_PARA *pst3DHw2DTo3DPara);







MS_BOOL MApi_XC_Set_3D_Detect3DFormat_Parameters(MS_XC_3D_DETECT3DFORMAT_PARA *pstDetect3DFormatPara);







MS_BOOL MApi_XC_Get_3D_Detect3DFormat_Parameters(MS_XC_3D_DETECT3DFORMAT_PARA *pstDetect3DFormatPara);







E_XC_3D_INPUT_MODE MApi_XC_Detect3DFormatByContent(SCALER_WIN eWindow);
# 4728 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_DetectNL(SCALER_WIN eWindow, ST_DETECTNL_PARA* pstDetectNLatticePara);







MS_BOOL MApi_XC_3D_PostPQSetting(SCALER_WIN eWindow);







MS_BOOL MApi_XC_Set_3D_FPInfo(MS_XC_3D_FPINFO_PARA *pstFPInfoPara);
# 4753 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_EnableAutoDetect3D(MS_BOOL bEnable, E_XC_3D_AUTODETECT_METHOD enDetectMethod);
# 4762 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_GetAutoDetect3DFlag(E_XC_3D_AUTODETECT_METHOD *penDetectMethod, MS_BOOL *pbEnable);






MS_BOOL MApi_XC_Set_3D_SubWinClk(void);






MS_BOOL MApi_XC_3D_Is_LR_Sbs2Line(void);






MS_BOOL MApi_SC_3D_Is_Skip_Default_LR_Flag(void);







MS_BOOL MApi_XC_3D_Enable_Skip_Default_LR_Flag(MS_BOOL bEnable);




#define MAX_SYNC_DATA_PATH_SUPPORTED (6)
#define MAX_ASYNC_DATA_PATH_SUPPORTED (2)
#define MAX_DATA_PATH_SUPPORTED (MAX_SYNC_DATA_PATH_SUPPORTED+MAX_ASYNC_DATA_PATH_SUPPORTED)






void MApi_XC_Mux_Init(void (*input_source_to_input_port)(INPUT_SOURCE_TYPE_t src_ids , E_MUX_INPUTPORT* port_ids , MS_U8* u8port_count ) );






void MApi_XC_Mux_SourceMonitor(MS_BOOL bRealTimeMonitorOnly);
# 4821 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_S16 MApi_XC_Mux_CreatePath(XC_MUX_PATH_INFO* Path_Info, MS_U32 u32InitDataLen);
# 4830 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_S16 MApi_XC_Mux_DeletePath(INPUT_SOURCE_TYPE_t src, E_DEST_TYPE dest);
# 4839 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_S16 MApi_XC_Mux_EnablePath(MS_U16 PathId);
# 4850 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Mux_TriggerPathSyncEvent( INPUT_SOURCE_TYPE_t src , void* para);







void MApi_XC_Mux_TriggerDestOnOffEvent( INPUT_SOURCE_TYPE_t src , void* para);
# 4868 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_S16 MApi_XC_Mux_OnOffPeriodicHandler( INPUT_SOURCE_TYPE_t src, MS_BOOL bEnable);







MS_U8 MApi_XC_Mux_GetPathInfo(XC_MUX_PATH_INFO* Paths);







E_APIXC_ReturnValue MApi_XC_Mux_SetSupportMhlPathInfo(MS_U8 u8MhlSupportInfo);







E_APIXC_ReturnValue MApi_XC_Mux_SetMhlHotPlugInverseInfo(MS_BOOL bIsMhlHotPlugInverse);







E_MUX_INPUTPORT MApi_XC_Mux_GetHDMIPort( INPUT_SOURCE_TYPE_t src );

void MApi_XC_Mux_GetPortMappingMatrix(XC_MUX_INPUTSRCTABLE *mapping_tab,MS_U32 length);






MS_U8 MApi_XC_MUX_MapInputSourceToVDYMuxPORT( INPUT_SOURCE_TYPE_t u8InputSourceType );







void MApi_XC_Set_NR(MS_BOOL bEn, SCALER_WIN eWindow);





void MApi_XC_FilmMode_P(void);







MS_BOOL MApi_XC_GetUCEnabled(SCALER_WIN eWindow);






void MApi_XC_GenSpecificTiming(XC_Internal_TimingType timingtype);
# 4950 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_GetDEBypassMode(SCALER_WIN eWindow);
# 4959 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_GetDEWindow(MS_WINDOW_TYPE *psWin, SCALER_WIN eWindow);
# 4969 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_GetDEWidthHeightInDEByPassMode(MS_U16* pu16Width,MS_U16* pu16Height ,SCALER_WIN eWindow);
# 4978 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_GetCaptureWindow(MS_WINDOW_TYPE* capture_win, SCALER_WIN eWindow);
# 4988 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetCaptureWindowVstart(MS_U16 u16Vstart , SCALER_WIN eWindow);







void MApi_XC_SetCaptureWindowHstart(MS_U16 u16Hstart , SCALER_WIN eWindow);







void MApi_XC_SetCaptureWindowVsize(MS_U16 u16Vsize , SCALER_WIN eWindow);







void MApi_XC_SetCaptureWindowHsize(MS_U16 u16Hsize , SCALER_WIN eWindow);
# 5021 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SoftwareReset(MS_U8 u8Reset, SCALER_WIN eWindow);







MS_U16 MApi_XC_CalculateHFreqx10(MS_U16 u16HPeriod);







MS_U32 MApi_XC_CalculateHFreqx1K(MS_U16 u16HPeriod);
# 5046 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U16 MApi_XC_CalculateVFreqx10(MS_U16 u16HFreqx10, MS_U16 u16VTotal);
# 5055 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U32 MApi_XC_CalculateVFreqx1K(MS_U32 u32HFreqx1K, MS_U16 u16VTotal);
# 5065 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_InterruptAttach(SC_INT_SRC enIntNum, SC_InterruptCb pIntCb, void * pParam);
# 5075 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_InterruptDeAttach(SC_INT_SRC enIntNum, SC_InterruptCb pIntCb, void * pParam);






void MApi_XC_DisableInputSource(MS_BOOL bDisable, SCALER_WIN eWidnow);







MS_BOOL MApi_XC_IsInputSourceDisabled(SCALER_WIN eWindow);






void MApi_XC_ChangePanelType(XC_PANEL_INFO *pstPanelInfo);
# 5107 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U16 MApi_XC_GetCurrentReadBank(SCALER_WIN eWindow);
# 5117 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U16 MApi_XC_GetCurrentWriteBank(SCALER_WIN eWindow);
# 5126 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetAutoPreScaling(MS_BOOL bEnable, SCALER_WIN eWindow);







MS_U8 MApi_XC_GetVSyncWidth(SCALER_WIN eWindow);
# 5145 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_set_GOP_Enable(MS_U8 MaxGOP, MS_U8 UseNum, MS_U8 u8MuxNum, MS_BOOL bEnable);







void MApi_XC_ip_sel_for_gop(MS_U8 u8MuxNum , MS_XC_IPSEL_GOP ipSelGop);





void MApi_XC_SetVOPNBL(void);
# 5169 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_GetDstInfo(MS_XC_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo, EN_GOP_XCDST_TYPE XCDstType);







void MApi_XC_set_FD_Mask_byWin(MS_BOOL bEnable, SCALER_WIN eWindow);







MS_BOOL MApi_XC_Get_FD_Mask_byWin(SCALER_WIN eWindow);







MS_BOOL MApi_XC_Get_FD_Mask_Status(SCALER_WIN eWindow);

#if defined(UFO_PUBLIC_HEADER_500_3)






void MApi_XC_SetIP1TestPattern(MS_U8 u8Enable, MS_U16 u6Pattern_type, SCALER_WIN eWindow);
#endif






void MApi_XC_InitIPForInternalTiming(XC_Internal_TimingType timingtype);






void MApi_XC_SetIPMux(MS_U8 u8Val);
# 5226 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_Is_H_Sync_Active(SCALER_WIN eWindow);







MS_BOOL MApi_XC_Is_V_Sync_Active(SCALER_WIN eWindow);
# 5244 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_GetAutoPositionWindow(MS_U8 u8ValidData, SCALER_WIN eWindow, MS_WINDOW_TYPE *pstAutoPositionWindow);
# 5257 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetFrameBufferAddress(MS_PHY u32FBAddress, MS_PHY u32FBSize, SCALER_WIN eWindow);
# 5269 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetFRCMFrameBufferAddress(MS_PHY u32FBAddress, MS_PHY u32FBSize, SCALER_WIN eWindow);
# 5278 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_IsFrameBufferEnoughForCusScaling(XC_SETWIN_INFO *pstXC_SetWin_Info, SCALER_WIN eWindow);
# 5288 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetScalerMemoryRequest(MS_BOOL bEnable, E_XC_MEMORY_REQUEST_TYPE eType, SCALER_WIN eWindow);
# 5302 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Get_PixelData(MS_U16 u16CorX, MS_U16 u16CorY, MS_PIXEL_32BIT* pixel);
# 5313 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U32 MApi_XC_GetAvailableSize(SCALER_WIN eWindow, MS_U8 u8FBNum, MS_U32 u32InputSize);
# 5325 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetFrameColor(MS_U32 u32aRGB);







void MApi_XC_SetDispWindowColor(MS_U8 u8Color, SCALER_WIN eWindow);
# 5343 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SupportSourceToVE(MS_U16* pOutputCapability);
# 5352 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetOutputCapture(MS_BOOL bEnable,E_XC_SOURCE_TO_VE eSourceToVE);






void MApi_XC_SetGammaOnOff (MS_BOOL bEnable);







void MApi_XC_SetPreGammaGain(SCALER_WIN eWindow, MS_XC_VOP_CHANNEL_t eVop_Channel, MS_U16 u16Val);







void MApi_XC_SetPreGammaOffset(SCALER_WIN eWindow, MS_XC_VOP_CHANNEL_t eVop_Channel, MS_U16 u16Val);
# 5385 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetPanelTiming(XC_SetTiming_Info *pTimingInfo, SCALER_WIN eWindow);






void MApi_XC_SetOutTimingMode(E_XC_PNL_OUT_TIMING_MODE enPnl_Out_Timing_Mode);






void MApi_XC_SetFreeRunTiming(void);
# 5409 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_Set_CustomerSyncInfo(MS_U16 u16FrontPorch, MS_U16 u16SyncWidth, MS_U16 u16OutputVfreq);






MS_BOOL MApi_XC_WaitFPLLDone(void);






MS_U16 MApi_XC_GetOutputVFreqX100(void);






MS_U16 MApi_XC_GetOP1OutputVFreqX100(void);






MS_BOOL MApi_XC_FrameLockCheck(void);
# 5457 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_CustomizeFRCTable(SC_FRC_SETTING* stFRCTable);
# 5467 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_OutputFrameCtrl(MS_BOOL bEnable,XC_OUTPUTFRAME_Info * stOutFrameInfo,SCALER_WIN eWindow);






void MApi_SC_Enable_FPLL_FSM(MS_BOOL bTrue);
# 5486 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_SC_ForceFreerun(MS_BOOL bEnable);






MS_BOOL MApi_SC_IsForceFreerun(void);
# 5503 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_SC_SetFreerunVFreq(E_VFREQ_SEL VFreq);
# 5514 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_SetExPanelInfo(MS_BOOL bEnable, XC_PANEL_INFO_EX *pPanelInfoEx);






void MApi_XC_Enable_FPLL_Thresh_Mode(MS_BOOL bEnable);






MS_BOOL MApi_XC_Get_FPLL_Thresh_Mode(void);
# 5537 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_EnableIPAutoNoSignal(MS_BOOL bEnable, SCALER_WIN eWindow );







MS_BOOL MApi_XC_GetIPAutoNoSignal(SCALER_WIN eWindow );






void MApi_XC_EnableIPAutoCoast(MS_BOOL bEnable);





void MApi_XC_EnableIPCoastDebounce(void);





void MApi_XC_ClearIPCoastStatus(void);







void MApi_XC_EnableFpllManualSetting(MS_BOOL bEnable);







void MApi_XC_FpllBoundaryTest(MS_U32 u32FpllSetOffset, MS_U16 u16TestCnt);
# 5590 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetOffLineDetection (INPUT_SOURCE_TYPE_t);






MS_U8 MApi_XC_GetOffLineDetection( INPUT_SOURCE_TYPE_t);






MS_BOOL MApi_XC_SetOffLineSogThreshold(MS_U8 u8Threshold);






MS_BOOL MApi_XC_SetOffLineSogBW(MS_U8 u8BW);






MS_BOOL MApi_XC_OffLineInit(void);
# 5628 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Set_Extra_fetch_adv_line(MS_U8 u8val);






E_APIXC_ReturnValue MApi_XC_SetVGASogEn(MS_BOOL bVGASogEn);







void MApi_XC_EnableWindow(MS_BOOL bEnable, SCALER_WIN eWindow);






MS_BOOL MApi_XC_Is_SubWindowEanble(void);
# 5660 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetBorderFormat( MS_U8 u8Left, MS_U8 u8Right, MS_U8 u8Up, MS_U8 u8Down, MS_U8 u8color, SCALER_WIN eWindow );







void MApi_XC_EnableBorder(MS_BOOL bEnable, SCALER_WIN eWindow);






void MApi_XC_ZorderMainWindowFirst(MS_BOOL bMainFirst);
# 5686 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_PQ_LoadFunction(PQ_Function_Info* function_Info , MS_U32 u32InitDataLen);






MS_BOOL MApi_XC_Check_HNonLinearScaling(void);
# 5708 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_EnableEuroHdtvSupport(MS_BOOL bEnable);
# 5718 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_EnableEuroHdtvDetection(MS_BOOL bEnable, SCALER_WIN eWindow);
# 5730 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U8 MApi_XC_ReadByte(MS_U32 u32Reg);







void MApi_XC_WriteByte(MS_U32 u32Reg, MS_U8 u8Val);
# 5747 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_WriteByteMask(MS_U32 u32Reg, MS_U8 u8Val, MS_U8 u8Msk);
# 5756 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Write2ByteMask(MS_U32 u32Reg, MS_U16 u16val, MS_U16 u16Mask);
# 5768 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_W2BYTE(MS_U32 u32Reg, MS_U16 u16Val);







MS_U16 MApi_XC_R2BYTE(MS_U32 u32Reg);







void MApi_XC_W4BYTE(MS_U32 u32Reg, MS_U32 u32Val);







MS_U32 MApi_XC_R4BYTE(MS_U32 u32Reg);
# 5801 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U16 MApi_XC_R2BYTEMSK(MS_U32 u32Reg, MS_U16 u16Mask);
# 5810 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_W2BYTEMSK(MS_U32 u32Reg, MS_U16 u16Val, MS_U16 u16Mask);
# 5821 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_MLoad_Init(MS_PHY PhyAddr, MS_U32 u32BufByteLen);






void MApi_XC_MLoad_Enable(MS_BOOL bEnable);







void SYMBOL_WEAK MApi_XC_MLoad_Cus_Init(EN_MLOAD_CLIENT_SELECT eMloadSelect, MS_PHY PhyAddr, MS_U32 u32BufByteLen);
# 5845 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void SYMBOL_WEAK MApi_XC_MLoad_Cus_Enable(EN_MLOAD_CLIENT_SELECT eMloadSelect, MS_BOOL bEnable);






MLOAD_TYPE MApi_XC_MLoad_GetStatus(void);
# 5862 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_MLoad_WriteCmd_And_Fire(MS_U32 u32Addr, MS_U16 u16Data, MS_U16 u16Mask);
# 5872 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_MLoad_WriteCmds_And_Fire(MS_U32 *pu32Addr, MS_U16 *pu16Data, MS_U16 *pu16Mask, MS_U16 u16CmdCnt);
# 5883 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_MLG_Init(MS_PHY PhyAddr, MS_U32 u32BufByteLen);






void MApi_XC_MLG_Enable(MS_BOOL bEnable);






MS_BOOL MApi_XC_MLG_GetCaps(void);






MLG_TYPE MApi_XC_MLG_GetStatus(void);
# 5914 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetOSD2VEMode(EN_VOP_SEL_OSD_XC2VE_MUX eVOPSelOSD_MUX);






void MApi_XC_IP2_PreFilter_Enable(MS_BOOL bEnable);
# 5933 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_GET_PixelRGB_ReturnValue MApi_XC_Get_Pixel_RGB(XC_Get_Pixel_RGB *pData, SCALER_WIN eWindow);






void MApi_XC_KeepPixelPointerAppear(MS_BOOL bEnable);







MS_BOOL MApi_XC_Set_MemFmtEx(MS_XC_MEM_FMT eMemFmt, SCALER_WIN eWindow);






MS_BOOL MApi_XC_IsRequestFrameBufferLessMode(void);







E_APIXC_ReturnValue MApi_XC_SkipSWReset(MS_BOOL bFlag);






void MApi_XC_EnableRepWindowForFrameColor(MS_BOOL bEnable);
# 5981 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetOSDLayer(E_VOP_OSD_LAYER_SEL eVOPOSDLayer, SCALER_WIN eWindow);





E_VOP_OSD_LAYER_SEL MApi_XC_GetOSDLayer(SCALER_WIN eWindow);
# 5998 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetVideoAlpha(MS_U8 u8Val, SCALER_WIN eWindow);







E_APIXC_ReturnValue MApi_XC_GetVideoAlpha(MS_U8 *pu8Val, SCALER_WIN eWindow);







E_APIXC_ReturnValue MApi_XC_SkipWaitVsync( MS_BOOL eWindow,MS_BOOL bIsSkipWaitVsyn);






E_APIXC_ReturnValue MApi_XC_SetCMAHeapID(MS_U8 u8CMAHeapID, SCALER_WIN eWindow);







E_APIXC_ReturnValue MApi_XC_OP2VOPDESel(E_OP2VOP_DE_SEL eVopDESel);
# 6038 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_FRC_SetWindow(E_XC_3D_INPUT_MODE e3dInputMode, E_XC_3D_OUTPUT_MODE e3dOutputMode, E_XC_3D_PANEL_TYPE e3dPanelType);
# 6047 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
#ifdef SUPPORT_BWD
MS_BOOL SYMBOL_WEAK MApi_XC_SetBwdConfig(E_XC_BWD_CONFIG_TYPE eType, void *pstParam, SCALER_WIN eWindow);
#endif







MS_BOOL MApi_XC_ConfigCMA(XC_CMA_CONFIG *pstXC_CMA_Config, XC_CMA_CLIENT enCmaClient, MS_U32 u32DataLen, SCALER_WIN eWindow);







MS_BOOL MApi_XC_Enable_TwoInitFactor(MS_BOOL bEnable, SCALER_WIN eWindow);






MS_BOOL MApi_XC_IsFieldPackingModeSupported(void);
# 6082 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_PreInit( E_XC_PREINIT_t eType ,void* para, MS_U32 u32Length);
# 6092 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Get_BufferData(E_XC_OUTPUTDATA_TYPE eBufType, MS_WINDOW_TYPE *pRect, void *pRectBuf, SCALER_WIN eWindow);
# 6103 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_Set_BufferData(E_XC_INPUTDATA_TYPE eBufType, MS_WINDOW_TYPE *pDstRect, void *pSrcBuf, MS_WINDOW_TYPE *pSrcRect, SCALER_WIN eWindow);






void MApi_XC_EnableMainWindow(MS_BOOL bEnable);






void MApi_XC_EnableSubWindow(MS_WINDOW_TYPE *pstDispWin);






void MApi_XC_DisableSubWindow(void);
# 6133 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetPixelShift(MS_S8 s8H, MS_S8 s8V);
# 6143 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetPixelShiftFeatures(MS_U16 u16HPixelShiftRange,
                                                  MS_U16 u16VPixelShiftRange,
                                                  PIXEL_SHIFT_FEATURE ePixelShiftFeature);
# 6156 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Combine_MLoadEn(MS_BOOL bEn);
# 6165 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetVideoOnOSD(E_VIDEO_ON_OSD_LAYER enlayer, SCALER_WIN eWindow);
# 6175 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetOSDLayerBlending(MS_U8 u8Layer, MS_BOOL bEnable, SCALER_WIN eWindow);
# 6184 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetOSDLayerAlpha(MS_U8 u8Layer, MS_U8 u8Alpha);
# 6194 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetOSDBlendingFormula(E_XC_OSD_INDEX enOsdIndex, E_XC_OSD_BlENDING_TYPE enType, SCALER_WIN eWindow);
# 6214 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_ReportPixelInfo(MS_XC_REPORT_PIXELINFO *pstRepPixInfo);
# 6224 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetScaling( MS_BOOL bEnable, E_XC_SCALING_TYPE eScaling_type, E_XC_VECTOR_TYPE eVector_type, SCALER_WIN eWindow );
# 6233 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetMCDIBufferAddress(MS_PHY u32FBAddress, MS_PHY u32FBSize, E_XC_MCDI_TYPE eType);







void MApi_XC_EnableMCDI(MS_BOOL bEnable, E_XC_MCDI_TYPE eType);
# 6252 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_SendCmdToFRC( MS_U8 u8Cmd, MS_U8 count, FRC_R2_CMD_PARAMETER_t pFRC_R2_Para );
# 6262 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_GetMsgFromFRC(MS_U8* pu8Cmd, MS_U8* pu8ParaCount, MS_U8* pu8Para);







void MApi_XC_EnableRWBankAuto(MS_BOOL bEnable, SCALER_WIN eWindow);

void MApi_XC_Dump_SHM(void);






void MApi_XC_SetWRBankMappingNum(MS_U8 u8Val, SCALER_WIN eWindow);







MS_U8 MApi_XC_GetWRBankMappingNum(SCALER_WIN eWindow);







MS_U8 MApi_XC_GetWRBankMappingNumForZap(SCALER_WIN eWindow);
# 6304 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_SetBOBMode(MS_BOOL bEnable, SCALER_WIN eWindow);
# 6313 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetForceReadBank(MS_BOOL bEnable, MS_U8 u8Bank, SCALER_WIN eWindow);







void MApi_XC_SetLockPoint(MS_U16 u16LockPoint, SCALER_WIN eWindow);
# 6331 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_LD_Init(EN_LD_PANEL_TYPE eLDPanelType );
# 6345 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_LD_SetMemoryAddress(MS_U8 u8MIU ,MS_PHY u32LDFBase0,MS_PHY u32LDFBase1,MS_PHY u32LDBBase0,MS_PHY u32LDBBase1,MS_PHY u32EDGE2DBase,MS_PHY u32LEDoffset);
# 6355 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_LD_Get_Value(MS_U8 *pu8LDValue, MS_U8 u8WSize, MS_U8 u8HSize);







MS_BOOL MApi_XC_LD_SetLevel(EN_LD_MODE eMode);






MS_BOOL MApi_Set_TurnoffLDBL(MS_BOOL bturnoffbl);






MS_BOOL MApi_Set_notUpdateSPIDataFlags(MS_BOOL brefreshSpidata);






MS_BOOL MApi_Set_UsermodeLDFlags(MS_BOOL buserLDFlags);






MS_BOOL MApi_Set_BLLevel(MS_U8 u8BLLeve);







void MApi_XC_Set_BWS_Mode(MS_BOOL bEnable, SCALER_WIN eWindow);







void MApi_XC_FRC_ColorPathCtrl(MS_U16 u16Path_sel, MS_BOOL bEnable);
# 6416 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_FRC_OP2_SetRGBGain(MS_U16 u16RedGain, MS_U16 u16GreenGain, MS_U16 u16BlueGain);
# 6425 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_FRC_OP2_SetRGBOffset(MS_U16 u16RedOffset, MS_U16 u16GreenOffset, MS_U16 u16BlueOffset);






void MApi_XC_FRC_OP2_SetDither(MS_U16 u16dither);







MS_BOOL MApi_XC_FRC_BypassMFC(MS_BOOL bEnable);






void MApi_XC_FRC_Mute(MS_BOOL bEnable);







E_APIXC_ReturnValue MApi_XC_ForceReadFrame(MS_BOOL bEnable, MS_U16 u16FrameIndex);






void MApi_XC_SetCsc( MS_BOOL bEnable, SCALER_WIN eWindow );






void MApi_XC_RegisterPQSetFPLLThreshMode(void (*fpPQCB)(MS_U8 u8PQWin));






MS_BOOL MApi_XC_GetFreeRunStatus(void);






E_APIXC_ReturnValue MApi_XC_Get_DSForceIndexSupported(SCALER_WIN eWindow);
# 6492 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Set_DSForceIndex(MS_BOOL bEnable, MS_U8 u8Index, SCALER_WIN eWindow);







E_APIXC_ReturnValue MApi_XC_Set_DSIndexSourceSelect(E_XC_DS_INDEX_SOURCE eDSIdxSrc, SCALER_WIN eWindow);







E_APIXC_ReturnValue MApi_XC_EnableDSRegMode(MS_BOOL bEnable, SCALER_WIN eWindow);
# 6518 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_OSDC_InitSetting(E_XC_OSDC_TGEN_Type E_XC_OSDC_TGEN_Type,
                                             MS_XC_OSDC_TGEN_INFO *pstOC_Tgen_Cus,
                                             MS_XC_OSDC_CTRL_INFO *pstOC_Ctrl);






E_APIXC_ReturnValue MApi_XC_OSDC_Control(MS_U32 eCtrl_type);
# 6536 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_OSDC_GetDstInfo(MS_OSDC_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);






void MApi_XC_OSDC_SetOutVfreqx10(MS_U16 u16Vfreq);







void MApi_XC_BYPASS_SetOSDVsyncPos(MS_U16 u16VsyncStart, MS_U16 u16VsyncEnd);







void MApi_XC_BYPASS_SetInputSrc(MS_BOOL bEnable,E_XC_BYPASS_InputSource input);






void MApi_XC_BYPASS_SetCSC(MS_BOOL bEnable);
# 6575 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetSeamlessZapping(SCALER_WIN eWindow, MS_BOOL bEnable);
# 6585 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_GetSeamlessZappingStatus(SCALER_WIN eWindow, MS_BOOL* pbEnable);







E_APIXC_ReturnValue MApi_XC_Vtrack_SetPayloadData(MS_U16 u16Timecode, MS_U8 u8OperatorID);
# 6602 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Vtrack_SetUserDefindedSetting(MS_BOOL bUserDefinded, MS_U8 *pu8Setting);
# 6611 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Vtrack_Enable(MS_U8 u8FrameRate, MS_BOOL bEnable);







void MApi_XC_PreSetPQInfo(XC_SETWIN_INFO *pstXC_SetWin_Info, SCALER_WIN eWindow);







MS_BOOL MApi_XC_Is_OP1_TestPattern_Enabled(void);
# 6636 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Set_OP1_TestPattern(EN_XC_OP1_PATTERN ePattern, EN_XC_OP1_PATGEN_MODE eMode);







MS_BOOL MApi_XC_CheckWhiteBalancePatternModeSupport(EN_XC_WB_PATTERN_MODE enWBPatternMode);
# 6655 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_SetHLinearScaling(MS_BOOL bEnable, MS_BOOL bSign, MS_U16 u16Delta, SCALER_WIN eWindow);







MS_U32 MApi_XC_SetPowerState(EN_POWER_MODE enPowerState);







E_APIXC_ReturnValue MApi_XC_EnableT3D(MS_BOOL bEnable);
# 6680 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Set_FRC_InputTiming(E_XC_FRC_InputTiming enFRC_InputTiming);







E_APIXC_ReturnValue MApi_XC_Get_FRC_InputTiming(E_XC_FRC_InputTiming *penFRC_InputTiming);







E_APIXC_ReturnValue MApi_XC_Get_VirtualBox_Info(XC_VBOX_INFO *pstXC_VboxInfo);
# 6707 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Set_OSD_Detect(MS_BOOL bEnable, MS_U32 Threhold);







E_APIXC_ReturnValue MApi_XC_Get_OSD_Detect(MS_BOOL *pbOSD);






MS_BOOL MApi_XC_Is2K2KToFrcMode(void);






E_APIXC_ReturnValue __attribute__((weak)) MApi_XC_EnableSwitchMainSubZorder(MS_BOOL bEnable);
# 6742 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Enable_LockFreqOnly(MS_BOOL bEnable);

#ifdef UFO_XC_TEST_PATTERN
# 6766 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void SYMBOL_WEAK MApi_XC_GenerateTestPattern (EN_XC_TEST_PATTERN_MODE ePatternMode,void* para, MS_U16 u16Length);
#endif
# 6780 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U16 mvideo_sc_get_output_vfreq(void);




MS_U32 MApi_XC_Get_Current_OutputVFreqX100(void);




E_APIXC_ReturnValue MApi_XC_SetMemoryWriteRequest(MS_BOOL bEnable);




MS_BOOL MApi_XC_Set_MemFmt(MS_XC_MEM_FMT eMemFmt);




E_APIXC_ReturnValue MApi_XC_SetOutputAdjustSetting(XC_OUTPUT_TIMING_ADJUST_SETTING *stAdjSetting);




void msAPI_Scaler_FPLL_FSM(SCALER_WIN eWindow);




void MApi_XC_EnableMirrorMode( MS_BOOL bEnable );




void MApi_XC_EnableMirrorMode2( MirrorMode_t eMirrorMode );




MirrorMode_t MApi_XC_GetMirrorModeType( void );




void MApi_XC_set_FD_Mask(MS_BOOL bEnable);




MS_BOOL MApi_XC_Get_FD_Mask(void);
# 6839 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U32 MApi_XC_GetAccurateVFreqx1K(SCALER_WIN eWindow);
# 6848 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_S_Disp_Ctrl(MS_U32 u32Cmd,void *pbuf,MS_U32 u32BufSize);

#ifdef UFO_XC_SETBLACKVIDEOBYMODE






E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_GenerateBlackVideoByMode(MS_BOOL bEnable, SCALER_WIN eWindow, EN_XC_BLACK_VIDEO_MODE eMode);
#endif







MS_BOOL MApi_XC_IsSupport2StepScaling(void);







#ifdef UFO_XC_PQ_PATH
MS_BOOL SYMBOL_WEAK MApi_XC_GetPQPathStatus(E_XC_PQ_Path_Type ePqPathType, MS_U16 u16Width, MS_U16 u16Height);
#endif
# 6885 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
void MApi_XC_SetIP1TestPattern(MS_U8 u8Enable, MS_U16 u16Pattern_type, SCALER_WIN eWindow);
# 6896 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue MApi_XC_Set_OP2_Pattern(MS_BOOL bEnable, MS_U16 u16R_Data, MS_U16 u16G_Data ,MS_U16 u16B_Data);

#ifdef UFO_XC_FORCEWRITE_V2





E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_SetForceWrite( EN_MUTE_TYPE enMuteType, MS_BOOL bIsForceWrite);





MS_BOOL SYMBOL_WEAK MApi_XC_GetForceWrite( EN_MUTE_TYPE enMuteType);
#endif
# 6920 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_VideoPlaybackCtrl(MS_U32 u32Cmd,void *pCmdArgs,MS_U32 u32CmdArgsSize);

#ifdef UFO_XC_AUTO_DOWNLOAD
# 6931 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_AutoDownload_Config(XC_AUTODOWNLOAD_CONFIG_INFO *pstConfigInfo);
# 6941 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_AutoDownload_Write(XC_AUTODOWNLOAD_DATA_INFO *pstDataInfo);
# 6951 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_AutoDownload_Fire(EN_XC_AUTODOWNLOAD_CLIENT enClient);
#endif

#ifdef UFO_XC_HDR
#if (UFO_XC_HDR_VERSION == 2)
# 7020 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_HDR_Control(EN_XC_HDR_CTRL_TYPE enCtrlType, void *pParam);
#endif
#endif

#ifdef UFO_XC_SCAN_TYPE





E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_SetScanType(E_XC_SCAN_TYPE enScanType);
#endif







E_APIXC_ReturnValue SYMBOL_WEAK MApi_XC_Set_FB_Level(E_XC_FB_LEVEL eFBLevel, SCALER_WIN eWindow);







E_XC_FB_LEVEL SYMBOL_WEAK MApi_XC_Get_FB_Level(SCALER_WIN eWindow);





void SYMBOL_WEAK MApi_SWDS_Fire(SCALER_WIN eWindow );
# 7063 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U32 MApi_XC_GetResourceByPipeID(MS_U32 u32PipeID, MS_U32* u32RetResNum, RESOURCE* pResource);
# 7072 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL MApi_XC_OPTEE_CheckRBase(SCALER_WIN eWindow);







MS_U32 MApi_XC_ConfigPipe(MS_U32 u32PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);
# 7089 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U32 MApi_XC_CheckPipe(MS_U32 u32PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);







MS_BOOL MApi_XC_OPTEE_Control(EN_XC_OPTEE_ACTION action,XC_OPTEE_HANDLER* xc_handler);







MS_BOOL MApi_XC_OPTEE_Mux(EN_XC_OPTEE_ACTION action,XC_OPTEE_MUX_DATA xc_mux_data);




MS_BOOL SYMBOL_WEAK MApi_XC_PollEvent(void);

#ifdef UFO_XC_DE_MODE
void SYMBOL_WEAK MApi_XC_Set_HandshakeMode(MS_U8 u8MD, SCALER_WIN eWindow);
#endif
# 7124 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL SYMBOL_WEAK MApi_XC_EnableMiuDualMode(MS_BOOL bEnable, MS_U32 u32LeftFactor, MS_U32 u32RightFactor, SCALER_WIN eWindow);
# 7140 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_BOOL SYMBOL_WEAK MApi_XC_Get3DFormat(E_XC_3D_ATTRIBUTE_TYPE e3DAttrType, void* para, void* p3DFormat);







MS_BOOL SYMBOL_WEAK MApi_XC_SetSWDRInfo(XC_SWDR_INFO *pSWDR_INFO);







MS_BOOL SYMBOL_WEAK MApi_XC_GetSWDRInfo(XC_SWDR_INFO *pSWDR_INFO);

#ifdef UFO_XC_SUPPORT_HDMI_DOWNSCALE_OUTPUT_POLICY
# 7170 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC.h"
MS_U32 SYMBOL_WEAK MApi_XC_GetHDMIPolicy(void);
#endif

#undef INTERFACE
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_EXTERN_MSB124x.h"
#ifndef _DRV_DVBT_H_
#define _DRV_DVBT_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif





#define SUPPORT_MULTI_DEMOD 1




#define MSIF_DMD_MSB124X_INTERN_LIB_CODE {'1','2', '4','x'}
#define MSIF_DMD_MSB124X_INTERN_LIBVER {'0','1'}
#define MSIF_DMD_MSB124X_INTERN_BUILDNUM {'0','0' }
#define MSIF_DMD_MSB124X_INTERN_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_MSB124X_EXTERN_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_MSB124X_INTERN_LIB_CODE, \
    MSIF_DMD_MSB124X_INTERN_LIBVER, \
    MSIF_DMD_MSB124X_INTERN_BUILDNUM, \
    MSIF_DMD_MSB124X_INTERN_CHANGELIST, \
    MSIF_OS

#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))




typedef enum
{
    E_DMD_MSB124X_DBGLV_NONE,
    E_DMD_MSB124X_DBGLV_INFO,
    E_DMD_MSB124X_DBGLV_NOTICE,
    E_DMD_MSB124X_DBGLV_WARNING,
    E_DMD_MSB124X_DBGLV_ERR,
    E_DMD_MSB124X_DBGLV_CRIT,
    E_DMD_MSB124X_DBGLV_ALERT,
    E_DMD_MSB124X_DBGLV_EMERG,
    E_DMD_MSB124X_DBGLV_DEBUG,
} eDMD_MSB124X_DbgLv;

typedef enum
{

    C_CHECK_SUM_L = 0x00,
    C_CHECK_SUM_H,
    C_FW_VER_0,
    C_FW_VER_1,
    C_FW_VER_2,


    C_opmode_auto_scan_sym_rate= 0x20,
    C_opmode_auto_scan_qam,
    C_if_inv_pwm_out_en,


    C_config_zif= 0x23,
    C_config_fc_l,
    C_config_fc_h,
    C_config_fs_l,
    C_config_fs_h,
    C_config_bw_l,
    C_config_bw_h,
    C_config_bw1_l,
    C_config_bw1_h,
    C_config_bw2_l,
    C_config_bw2_h,
    C_config_bw3_l,
    C_config_bw3_h,
    C_config_qam,
    C_config_cci,
    C_config_ts_serial,
    C_config_ts_clk_rate,
    C_config_ts_out_inv,
    C_config_ts_data_swap,
    C_config_iq_swap,


     C_opmode_rfagc_en,
     C_opmode_humdet_en,
     C_opmode_dcr_en,
     C_opmode_iqb_en,
     C_opmode_auto_iq,
     C_opmode_auto_rfmax,

     C_opmode_atv_detector_en,

     C_config_rssi,
     C_config_rfmax,

     C_lock_indicator,

     C_CFO10_L,
     C_CFO10_H,

     C_SNR100_L,
     C_SNR100_H,
     C_config_spread_span,
     C_config_spread_step,

    DVBC_PARAM_LEN,
} DVBC_Param;

typedef enum
{
#if 1

    T_OPMODE_RFAGC_EN = 0x20,
    T_OPMODE_HUMDET_EN,
    T_OPMODE_DCR_EN,
    T_OPMODE_IIS_EN,
    T_OPMODE_CCI_EN,
    T_OPMODE_ACI_EN,
    T_OPMODE_IQB_EN,
    T_OPMODE_AUTO_IQ,
    T_OPMODE_AUTO_RFMAX,
    T_OPMODE_AUTO_ACI,
    T_OPMODE_FIX_MODE_CP,
    T_OPMODE_FIX_TPS,
    T_OPMODE_AUTO_SCAN,
    T_OPMODE_RSV_0X2D,
    T_OPMODE_RSV_0X2E,
    T_OPMODE_RSV_0X2F,


    T_CONFIG_RSSI,
    T_CONFIG_ZIF,
    T_CONFIG_FREQ,
    T_CONFIG_FC_L,
    T_CONFIG_FC_H,
    T_CONFIG_FS_L,
    T_CONFIG_FS_H,
    T_CONFIG_BW,
    T_CONFIG_MODE,
    T_CONFIG_CP,
    T_CONFIG_LP_SEL,
    T_CONFIG_CSTL,
    T_CONFIG_HIER,
    T_CONFIG_HPCR,
    T_CONFIG_LPCR,
    T_CONFIG_IQ_SWAP,
    T_CONFIG_RFMAX,
    T_CONFIG_CCI,
    T_CONFIG_ICFO_RANGE,
    T_CONFIG_RFAGC_REF,
    T_CONFIG_IFAGC_REF_2K,
    T_CONFIG_IFAGC_REF_8K,
    T_CONFIG_IFAGC_REF_ACI,
    T_CONFIG_IFAGC_REF_IIS_2K,
    T_CONFIG_IFAGC_REF_IIS_8K,
    T_CONFIG_ACI_DET_TH_L,
    T_CONFIG_ACI_DET_TH_H,
    T_CONFIG_TS_SERIAL,
    T_CONFIG_TS_CLK_RATE,
    T_CONFIG_TS_OUT_INV,
    T_CONFIG_TS_DATA_SWAP,
    T_CONFIG_2K_SFO_H,
    T_CONFIG_2K_SFO_L,
    T_CONFIG_8K_SFO_H,
    T_CONFIG_8K_SFO_L,
    T_CONFIG_CHECK_CHANNEL,
    T_CONFIG_SLICER_SNR_POS,
    T_CONFIG_TDP_CCI_KP,
    T_CONFIG_CCI_FSWEEP,
    T_CONFIG_TS_CLK_RATE_AUTO,
    T_CONFIG_IF_INV_PWM_OUT_EN,





    T_PARAM_CHECK_SUM,

    T_DVBT_LOCK_HIS = 0xF0,
    T_DVBT2_NOCHAN_Flag = 0xF1,
    T_DVBT_NOCHAN_Flag = 0xF2,
    T_DETECT_DONE_Flag = 0xF3,

    T_CONFIG_SPREAD_SPAN=0xF7,
    T_CONFIG_SPREAD_STEP=0xF8,
    DVBT_PARAM_LEN,
#else
T_OPMODE_RFAGC_EN = 0x20,
T_OPMODE_AUTO_IQ,
T_CONFIG_ZIF,
T_CONFIG_FC_L,
T_CONFIG_FC_H,
T_CONFIG_FS_L,
T_CONFIG_FS_H,
T_CONFIG_BW,
T_CONFIG_IQ_SWAP,
T_CONFIG_TS_SERIAL,
T_CONFIG_TS_CLK_RATE,
T_CONFIG_TS_OUT_INV,
T_CONFIG_TS_DATA_SWAP,
T_CONFIG_TS_CLK_RATE_AUTO,
T_PARAM_CHECK_SUM,
 DVBT_PARAM_LEN,

#endif
} DVBT_Param;

typedef enum
{

    E_T2_CHECK_SUM_L = 0x00,
    E_T2_CHECK_SUM_H,
    E_T2_FW_VER_0,
    E_T2_FW_VER_1,
    E_T2_FW_VER_2,


    E_T2_ZIF_EN = 0x20,
    E_T2_RF_AGC_EN,
    E_T2_HUM_DET_EN,
    E_T2_DCR_EN,
    E_T2_IQB_EN,
    E_T2_IIS_EN,
    E_T2_CCI_EN,
    E_T2_LOW_PWR_DET_EN,
    E_T2_ACI_DET_EN,
    E_T2_TD_MOTION_EN,
    E_T2_FD_MOTION_EN,


    E_T2_BW = 0x40,
    E_T2_FC_L = 0x41,
    E_T2_FC_H = 0x42,
    E_T2_FS_L,
    E_T2_FS_H,
    E_T2_ZIF,
    E_T2_GI,
    E_T2_ACI_DET_TYPE,
    E_T2_AGC_REF,
    E_T2_RSSI_REF,
    E_T2_SNR_TIME_L,
    E_T2_SNR_TIME_H,
    E_T2_BER_CMP_TIME_L,
    E_T2_BER_CMP_TIME_H,
    E_T2_SFO_CFO_NUM,
    E_T2_CCI,
    E_T2_ACI_DET_TH_L,
    E_T2_ACI_DET_TH_H,
    E_T2_TS_SERIAL = 0x52,
    E_T2_TS_CLK_RATE = 0x53,
    E_T2_TS_OUT_INV = 0x54,
    E_T2_TS_DATA_SWAP = 0x55,
    E_T2_TDP_CCI_KP,
    E_T2_CCI_FSWEEP,
    E_T2_TS_ERR_POL,
    E_T2_IF_AGC_INV_PWM_EN,
    E_T2_CCI_TYPE,
    E_T2_LITE,


    E_T2_DVBT2_LOCK_HIS = 0xF0,
    E_T2_FEF_DET_IND,
    E_T2_MPLP_NO_COMMON_IND,

    E_T2_SNR_L,
    E_T2_SNR_H,
    E_T2_DOPPLER_DET_FLAG,
    E_T2_DOPPLER_DET_TH_L,
    E_T2_DOPPLER_DET_TH_H,
    E_T2_SPREAD_SPAN,
    E_T2_SPREAD_STEP,


    E_T2_PLP_ID_ARR = 0x100,
    E_T2_L1_FLAG = 0x120,
    E_T2_PLP_ID,
    E_T2_GROUP_ID,
    E_T2_PARAM_NUM,
} E_DVBT2_PARAM;

typedef enum
{
    E_DMD_MSB124X_DEMOD_I2C_DYNAMIC_SLAVE_ID_1,
    E_DMD_MSB124X_DEMOD_I2C_DYNAMIC_SLAVE_ID_2,
    E_DMD_MSB124X_DEMOD_I2C_DYNAMIC_SLAVE_ID_3,
    E_DMD_MSB124X_DEMOD_I2C_DYNAMIC_SLAVE_ID_4
} eDMD_MSB124X_DemodI2CSlaveID;

typedef enum
{
    E_DMD_MSB124X_DEMOD_I2C_READ_BYTES,
    E_DMD_MSB124X_DEMOD_I2C_WRITE_BYTES
} eDMD_MSB124X_DemodI2CMethod;


typedef struct
{
    MS_U8 u8WO_SPI_Flash;
    MS_BOOL bPreloadDSPCodeFromMainCHIPI2C;
    MS_BOOL bFlashWPEnable;
    void (*fpGPIOReset)(MS_BOOL bOnOff);
    MS_BOOL (*fpMSB124X_I2C_Access)(eDMD_MSB124X_DemodI2CSlaveID eSlaveID, eDMD_MSB124X_DemodI2CMethod eMethod, MS_U8 u8AddrSize, MS_U8 *pu8Addr, MS_U16 u16Size, MS_U8 *pu8Data);
    MS_U8* pDVBC_DSP_REG;
    MS_U8* pDVBT_DSP_REG;
    MS_U8* pDVBT2_DSP_REG;
    MS_BOOL bEnableSPILoadCode;
    void (*fpMSB124x_SPIPAD_En)(MS_BOOL bOnOff);
    MS_U8 u8WO_Sdram;
} sDMD_MSB124X_InitData;

typedef enum
{
    E_DMD_MSB124X_DEMOD_NONE,
    E_DMD_MSB124X_DEMOD_DVBT2,
    E_DMD_MSB124X_DEMOD_DVBT,
    E_DMD_MSB124X_DEMOD_DVBC,
    E_DMD_MSB124X_DEMOD_DVBS2,
} eDMD_MSB124X_DemodulatorType;

typedef enum
{
    E_DMD_MSB124X_FAIL=0,
    E_DMD_MSB124X_OK=1
} DMD_MSB124X_Result;


typedef struct
{
    MS_U16 u16Version;
} DMD_MSB124X_Info;







extern MS_BOOL MDrv_DMD_MSB124X_Init(sDMD_MSB124X_InitData *pDMD_MSB124X_InitData, MS_U32 u32InitDataLen);



extern MS_BOOL MDrv_DMD_MSB124X_Exit(void);
# 468 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_EXTERN_MSB124x.h"
extern MS_BOOL MDrv_DMD_MSB124X_SetDbgLevel(eDMD_MSB124X_DbgLv u8DbgLevel);
# 478 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_EXTERN_MSB124x.h"
extern MS_BOOL MDrv_DMD_MSB124X_GetLibVer(const MSIF_Version **ppVersion);




extern MS_BOOL MDrv_DMD_MSB124X_GetFWVer(MS_U16 *ver);





extern MS_BOOL MDrv_DMD_MSB124X_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern MS_BOOL MDrv_DMD_MSB124X_SetReg(MS_U16 u16Addr, MS_U8 u8Data);





extern MS_BOOL MDrv_DMD_MSB124X_SetRegs(MS_U16 u16Addr, MS_U8* u8pData, MS_U16 data_size);





extern MS_BOOL MDrv_DMD_MSB124X_SetReg2Bytes(MS_U16 u16Addr, MS_U16 u16Data);





extern MS_BOOL MDrv_DMD_MSB124X_GetDSPReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern MS_BOOL MDrv_DMD_MSB124X_SetDSPReg(MS_U16 u16Addr, MS_U8 u8Data);



extern void MDrv_DMD_MSB124X_SetCurrentDemodulatorType(eDMD_MSB124X_DemodulatorType eCurrentDemodulatorType);



extern MS_BOOL MDrv_DMD_MSB124X_LoadDSPCode(void);



extern MS_BOOL MDrv_DMD_MSB124X_DTV_DVBT_DSPReg_CRC(void);



extern MS_BOOL MDrv_DMD_MSB124X_Power_On_Initialization(void);



extern MS_BOOL MDrv_DMD_MSB1245_LoadDSPCodeToSram(void);

#if (SUPPORT_MULTI_DEMOD)
extern MS_BOOL MDrv_DMD_MSB124X_SwitchHandle(MS_S32 s32Handle);
extern MS_S32 MDrv_DMD_MSB124X_GetCurrentHandle(void);
extern MS_BOOL MDrv_MDM_MSB124X_CreateNode(MS_S32 *s32Handle);
extern MS_BOOL MDrv_MDM_MSB124X_DeleteNode(MS_S32 s32Handle);
extern MS_BOOL MDrv_DMD_MSB124X_Init_EX(MS_S32 s32Handle, sDMD_MSB124X_InitData *pDMD_MSB124X_InitData, MS_U32 u32InitDataLen);
extern MS_BOOL MDrv_DMD_MSB124X_Exit_EX(MS_S32 s32Handle);

extern MS_BOOL MDrv_DMD_MSB124X_GetReg_EX(MS_S32 s32Handle, MS_U16 u16Addr, MS_U8 *pu8Data);
extern MS_BOOL MDrv_DMD_MSB124X_SetReg_EX(MS_S32 s32Handle, MS_U16 u16Addr, MS_U8 u8Data);
extern MS_BOOL MDrv_DMD_MSB124X_SetRegs_EX(MS_S32 s32Handle,MS_U16 u16Addr, MS_U8* u8pData, MS_U16 data_size);
extern MS_BOOL MDrv_DMD_MSB124X_SetReg2Bytes_EX(MS_S32 s32Handle, MS_U16 u16Addr, MS_U16 u16Data);

extern MS_BOOL MDrv_DMD_MSB124X_GetDSPReg_EX(MS_S32 s32Handle, MS_U16 u16Addr, MS_U8 *pu8Data);
extern MS_BOOL MDrv_DMD_MSB124X_SetDSPReg_EX(MS_S32 s32Handle, MS_U16 u16Addr, MS_U8 u8Data);
extern void MDrv_DMD_MSB124X_SetCurrentDemodulatorType_EX(MS_S32 s32Handle, eDMD_MSB124X_DemodulatorType eCurrentDemodulatorType);
extern MS_BOOL MDrv_DMD_MSB124X_LoadDSPCode_EX(MS_S32 s32Handle);
extern MS_BOOL MDrv_DMD_MSB124X_DTV_DVBT_DSPReg_CRC_EX(MS_S32 s32Handle);
extern MS_BOOL MDrv_DMD_MSB124X_Power_On_Initialization_EX(MS_S32 s32Handle);
extern MS_BOOL MDrv_DMD_MSB1245_LoadDSPCodeToSram_EX(MS_S32 s32Handle);
#endif
#ifdef __cplusplus
}
#endif


#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_cavalier.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 
# 134 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_cavalier.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 





#define UFO_XC_GETOUTPUTINTELACETIMING 



#define UFO_XC_VMARK 



#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_SPDIF_NONPCM_PAUSE 





#define UFO_XC_PQ_SUPPORT_SWDRIVING_MULTI_DEVICES 




#define UFO_XC_PQ_SUPPORT_SWMOTION 




#define UFO_XC_FB_LEVEL 




#define UFO_XC_DE_MODE 




#define UFO_MVOP_FORCE_P_MODE 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_XC_SCAN_TYPE 




#define UFO_MFE_MULTI_ENCODE 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_mustang.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 





#define UFO_XC_FORCEWRITE 
# 143 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_mustang.h"
#define UFO_XC_SETPIXELSHIFT 




#define UFO_VDEC_TEE_VPU 




#define UFO_VDEC_NEW_SLOW_MOTION 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_PCM_MIXER_SUPPORT 




#define UFO_XC_SET_DSINFO_V0 

#define UFO_DEMOD_DVBS_GET_PARAMETER 




#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_HDR 


#define IMPORT_PORTMAPPING 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 0
#endif

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_curry.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 
# 134 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_curry.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 
#define UFO_DIP_SUPPORT_2P5DDI 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 





#define UFO_XC_GETOUTPUTINTELACETIMING 



#define UFO_XC_VMARK 



#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_SPDIF_NONPCM_PAUSE 





#define UFO_XC_PQ_SUPPORT_SWDRIVING_MULTI_DEVICES 




#define UFO_XC_PQ_SUPPORT_SWMOTION 




#define UFO_XC_FB_LEVEL 




#define UFO_XC_DE_MODE 




#define UFO_MVOP_FORCE_P_MODE 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_XC_SCAN_TYPE 




#define UFO_MVOP_SET_EXT_FPS 




#define UFO_SYS_TEE_INFO_SET_MBOOT 




#define UFO_MFE_MULTI_ENCODE 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7821.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_TSO2_PVR 
#define UFO_DMX_RES_ALLOC_EN 
# 133 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7821.h"
#define UFO_XC_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB 
#define UFO_XC_PQ_PATH 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_TEST_PATTERN 
# 166 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7821.h"
#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_ZORDER 




#define UFO_XC_FRC_INSIDE 




#define UFO_XC_DS_PQ 

#define UFO_XC_SET_DSINFO_V0 

#define UFO_XC_HDMI_4K2K_DMA 






#define UFO_XC_SETWINDOW_LITE 
# 203 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7821.h"
#define UFO_GOP_DIP_PINPON 
#define UFO_GOP_SUPPORT_DUAL_RATE_OP 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 





#define UFO_VDEC_TEE_VPU 




#define UFO_VDEC_DISABLE_PBFRAME_MODE 




#define UFO_VDEC_PREPARU64PTS 




#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 
# 243 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7821.h"
#define UFO_MVOP_GET_MAX_FPS 




#define UFO_MVOP_RESET_SETTING 


#define UFO_HDCP2_2 




#define UFO_MVOP_DOLBY_HDR 

#define IMPORT_PORTMAPPING 




#define UFO_MDEBUG_SUPPORT 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_MULTI_CHANNEL 
#define UFO_AUDIO_AVMONITOR_SYNC 




#define UFO_LOCAL_DIMMING 




#define UFO_XC_GET_3D_FORMAT 





#define UFO_XC_SUPPORT_DUAL_MIU 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_MVOP_STREAM_INFO 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_k5tn.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 







#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_VE_INITEX 

#define UFO_DEMOD_DVBS_SUPPORT_DMD_INT 
#define UFO_DEMOD_DVBT2_SUPPORT_DMD_INT 
#define UFO_DEMOD_DVBT_SUPPORT_DMD_INT 
#define UFO_DEMOD_DVBC_SUPPORT_DMD_INT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kirin.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 







#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_VE_INITEX 

#define UFO_DEMOD_DVBC_SUPPORT_DMD_INT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M5621.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 





#define UFO_XC_FORCEWRITE 
# 143 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M5621.h"
#define UFO_XC_SETPIXELSHIFT 




#define UFO_VDEC_TEE_VPU 




#define UFO_VDEC_NEW_SLOW_MOTION 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_PCM_MIXER_SUPPORT 




#define UFO_XC_SET_DSINFO_V0 

#define UFO_DEMOD_DVBS_GET_PARAMETER 




#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_HDR 


#define IMPORT_PORTMAPPING 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 0
#endif

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kentucky.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 







#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_VE_INITEX 


#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kayla.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 







#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 


#define UFO_DEMOD_BLINDSCAN_NEW_FLOW 
#define UFO_DEMOD_GetParam_NEW_FLOW 



#define UFO_VE_INITEX 




#define UFO_DEMOD_DVBS_SUPPORT_DMD_INT 
#define UFO_DEMOD_DVBC_SUPPORT_DMD_INT 
#define UFO_DEMOD_GET_SIGNAL_LEVEL_PWR 
#define UFO_DEMOD_GET_AGC_INFO 
#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maxim.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 

#define UFO_DMX_RES_ALLOC_EN 
# 133 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maxim.h"
#define UFO_XC_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB 
#define UFO_XC_PQ_PATH 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_TEST_PATTERN 




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_ZORDER 




#define UFO_XC_FRC_INSIDE 




#define UFO_XC_DS_PQ 

#define UFO_XC_SET_DSINFO_V0 

#define UFO_XC_SETWINDOW_LITE 




#define UFO_XC_SWDR 
# 196 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maxim.h"
#define UFO_GOP_DIP_PINPON 
#define UFO_GOP_SUPPORT_DUAL_RATE_OP 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_VDEC_TEE_VPU 




#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 
# 225 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maxim.h"
#define UFO_MVOP_GET_MAX_FPS 




#define UFO_MVOP_RESET_SETTING 



#define UFO_HDCP2_2 




#define UFO_MVOP_DOLBY_HDR 

#define IMPORT_PORTMAPPING 




#define UFO_MDEBUG_SUPPORT 




#define UFO_MVOP_FB_DEC_CLK 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_MULTI_CHANNEL 



#define UFO_XC_GET_3D_FORMAT 
# 271 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maxim.h"
#define UFO_MVOP_STREAM_INFO 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_mooney.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 





#define UFO_DMX_TSO 







#define SUPPORT_BWD 

#define UFO_XC_SETPIXELSHIFT 

#define UFO_XC_DS_PQ 




#define UFO_VDEC_TEE_VPU 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_AVD_CMA 




#define UFO_XC_SUPPORT_2STEP_SCALING 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 

#define UFO_XC_SET_DSINFO_V0 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 



#define UFO_XC_TEST_PATTERN 


#define UFO_XC_FB_LEVEL 




#define UFO_XC_SUPPORT_DUAL_MIU 




#define UFO_SYS_TEE_INFO_SET_MBOOT 




#define UFO_VDEC_GET_CODEC_PROFILE_CAP 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7621.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 

#define UFO_DMX_RES_ALLOC_EN 
# 133 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7621.h"
#define UFO_XC_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB 
#define UFO_XC_PQ_PATH 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_TEST_PATTERN 




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_ZORDER 




#define UFO_XC_FRC_INSIDE 




#define UFO_XC_DS_PQ 

#define UFO_XC_SET_DSINFO_V0 

#define UFO_XC_SETWINDOW_LITE 




#define UFO_XC_SWDR 
# 196 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7621.h"
#define UFO_GOP_DIP_PINPON 
#define UFO_GOP_SUPPORT_DUAL_RATE_OP 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_VDEC_TEE_VPU 




#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 
# 225 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7621.h"
#define UFO_MVOP_GET_MAX_FPS 




#define UFO_MVOP_RESET_SETTING 



#define UFO_HDCP2_2 




#define UFO_MVOP_DOLBY_HDR 

#define IMPORT_PORTMAPPING 




#define UFO_MDEBUG_SUPPORT 




#define UFO_MVOP_FB_DEC_CLK 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_MULTI_CHANNEL 



#define UFO_XC_GET_3D_FORMAT 
# 271 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_M7621.h"
#define UFO_MVOP_STREAM_INFO 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_milan.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 





#define UFO_XC_FORCEWRITE 




#ifdef STELLAR
#define UFO_VBI_VPS_COMPLETE 
#else

#endif




#define UFO_XC_SETPIXELSHIFT 




#define UFO_AUDIO_AD_SUPPORT 




#define UFO_DIP_SELECT_TILE_BLOCK 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_manhattan.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 
# 130 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_manhattan.h"
#define UFO_XC_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB 
#define UFO_XC_PQ_PATH 




#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_VDEC_TEE_VPU 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 1
#endif




#define UFO_XC_TEST_PATTERN 
# 185 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_manhattan.h"
#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 

#define SUPPORT_BWD 


#define UFO_HDCP2_2 




#define UFO_XC_ZORDER 




#define UFO_XC_FRC_INSIDE 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_CODEC_CAPABILITY_BY_LICENCE 
#define UFO_AUDIO_PCM_MIXER_SUPPORT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maserati.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_TSO2_PVR 
#define UFO_DMX_RES_ALLOC_EN 
# 133 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maserati.h"
#define UFO_XC_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB 
#define UFO_XC_PQ_PATH 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_TEST_PATTERN 
# 166 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maserati.h"
#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_ZORDER 




#define UFO_XC_FRC_INSIDE 




#define UFO_XC_DS_PQ 

#define UFO_XC_SET_DSINFO_V0 

#define UFO_XC_HDMI_4K2K_DMA 






#define UFO_XC_SETWINDOW_LITE 
# 203 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maserati.h"
#define UFO_GOP_DIP_PINPON 
#define UFO_GOP_SUPPORT_DUAL_RATE_OP 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 





#define UFO_VDEC_TEE_VPU 




#define UFO_VDEC_DISABLE_PBFRAME_MODE 




#define UFO_VDEC_PREPARU64PTS 




#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 
# 243 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_maserati.h"
#define UFO_MVOP_GET_MAX_FPS 




#define UFO_MVOP_RESET_SETTING 


#define UFO_HDCP2_2 




#define UFO_MVOP_DOLBY_HDR 

#define IMPORT_PORTMAPPING 




#define UFO_MDEBUG_SUPPORT 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_MULTI_CHANNEL 
#define UFO_AUDIO_AVMONITOR_SYNC 




#define UFO_LOCAL_DIMMING 




#define UFO_XC_GET_3D_FORMAT 





#define UFO_XC_SUPPORT_DUAL_MIU 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_MVOP_STREAM_INFO 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kiwi.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 
#define UFO_DMX_TSO 




#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_MVOP_10B_TO_8B 




#define UFO_VE_INITEX 

#define UFO_DEMOD_DVBT_SUPPORT_DMD_INT 
#define UFO_DEMOD_DVBC_SUPPORT_DMD_INT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_matisse.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 





#define UFO_XC_FORCEWRITE 
# 143 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_matisse.h"
#define UFO_XC_SETPIXELSHIFT 




#define UFO_VDEC_TEE_VPU 




#define UFO_VDEC_NEW_SLOW_MOTION 




#define UFO_AUDIO_AD_SUPPORT 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_DIP_SELECT_TILE_BLOCK 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_keres.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 
#define UFO_DMX_TSO 




#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_VE_INITEX 

#define UFO_DEMOD_DVBC_SUPPORT_DMD_INT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kano.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_RES_ALLOC_EN 
# 134 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kano.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif



#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_XC_GETOUTPUTINTELACETIMING 





#define UFO_XC_SETBLACKVIDEOBYMODE 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_XC_VMARK 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_XC_PQ_SUPPORT_REPEATER_COLOR_THROUGH_MODE 




#define UFO_XC_PQ_SUPPORT_SWDRIVING_MULTI_DEVICES 




#define UFO_XC_PQ_SUPPORT_SWMOTION 




#define UFO_AUDIO_AD_SUPPORT 




#define UFO_XC_PQ_SUPPORT_INITVAR_INTO_SHAREMEMORY 




#define UFO_XC_PACKED_SHM 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_monet.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 





#define UFO_DMX_TSO 






#define UFO_XC_FORCEWRITE 

#define SUPPORT_BWD 

#define UFO_XC_SETPIXELSHIFT 
#define UFO_XC_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB 




#define UFO_VDEC_TEE_VPU 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_AVD_CMA 
# 158 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_monet.h"
#define UFO_XC_TEST_PATTERN 



#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_XC_ZORDER 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_galileo.h"
#ifndef _UFO_H_
#define _UFO_H_ 
# 115 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_galileo.h"
#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_marlon.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 





#define UFO_XC_FORCEWRITE 




#ifdef STELLAR
#define UFO_VBI_VPS_COMPLETE 
#else

#endif




#define UFO_XC_SETPIXELSHIFT 




#define UFO_AUDIO_AD_SUPPORT 




#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_DEMOD_DVBS_GET_PARAMETER 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kastor.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 



#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_RES_ALLOC_EN 
#define UFO_DMX_TSIO 
# 134 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kastor.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 





#define UFO_XC_GETOUTPUTINTELACETIMING 





#define UFO_XC_SETBLACKVIDEOBYMODE 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_XC_VMARK 




#define UFO_XC_FB_LEVEL 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_AUDIO_AD_SUPPORT 




#define UFO_XC_DAC_POWERCONTROL 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_k7u.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_RES_ALLOC_EN 
#define UFO_DMX_TSIO 
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_k7u.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_XC_SUPPORT_HDMI_DOWNSCALE_OUTPUT_POLICY 




#define UFO_XC_GETOUTPUTINTELACETIMING 





#define UFO_XC_SETBLACKVIDEOBYMODE 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_XC_VMARK 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_XC_PQ_SUPPORT_REPEATER_COLOR_THROUGH_MODE 




#define UFO_XC_PQ_SUPPORT_SWDRIVING_MULTI_DEVICES 




#define UFO_XC_PQ_SUPPORT_SWMOTION 




#define UFO_XC_FB_LEVEL 





#define UFO_AUDIO_AD_SUPPORT 




#define UFO_XC_DAC_POWERCONTROL 



#define UFO_DIP_SUPPORT_MFDEC 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_cashmere.h"
#ifndef _UFO_H_
#define _UFO_H_ 
# 115 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_cashmere.h"
#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_mainz.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 





#define UFO_DMX_TSO 
# 126 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_mainz.h"
#define UFO_XC_SETPIXELSHIFT 




#define UFO_VDEC_TEE_VPU 
#define UFO_VDEC_PREPARU64PTS 



#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_AVD_CMA 
# 151 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_mainz.h"
#define UFO_XC_TEST_PATTERN 



#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_MVOP_GET_IS_SW_CROP 
#define UFO_MVOP_GET_HV_RATIO 




#define UFO_MVOP_GET_MAX_FPS 




#define UFO_MVOP_RESET_SETTING 





#define UFO_AUDIO_AVMONITOR_SYNC 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_k6lite.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_RES_ALLOC_EN 
#define UFO_DMX_TSIO 
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_k6lite.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 
#define UFO_DIP_SUPPORT_3DDI 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_XC_GETOUTPUTINTELACETIMING 





#define UFO_XC_SETBLACKVIDEOBYMODE 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_XC_VMARK 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_XC_PQ_SUPPORT_REPEATER_COLOR_THROUGH_MODE 




#define UFO_XC_PQ_SUPPORT_SWDRIVING_MULTI_DEVICES 




#define UFO_XC_PQ_SUPPORT_SWMOTION 





#define UFO_AUDIO_AD_SUPPORT 





#define UFO_SUPPORT_VCM 





#define UFO_DEMOD_DVBS_SUPPORT_DMD_INT 
#define UFO_DEMOD_DVBC_SUPPORT_DMD_INT 





#define UFO_DEMOD_GetParam_NEW_FLOW 





#define UFO_DEMOD_GET_AGC_INFO 
#define UFO_DEMOD_DVBC_GET_AGC_INFO 


#define UFO_XC_DAC_POWERCONTROL 


#define UFO_SUPPORT_KERNEL_FLOATING 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_madison.h"
#ifndef _UFO_H_
#define _UFO_H_ 






#define UFO_DMX_TSO 






#define UFO_XC_FORCEWRITE 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_kris.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 







#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 
#define UFO_KRIS_FECINFO 

#define UFO_DEMOD_BLINDSCAN_NEW_FLOW 
#define UFO_DEMOD_GetParam_NEW_FLOW 



#define UFO_VE_INITEX 





#define UFO_DEMOD_DVBS_SUPPORT_DISEQC_RX 
#define UFO_DEMOD_GET_SIGNAL_LEVEL_PWR 
#define UFO_DEMOD_GET_AGC_INFO 
#define UFO_DEMOD_DVBS_UNICABLE_SEND_CMD 
#define UFO_DEMOD_DVBS_CUSTOMIZED_DISEQC_SEND_CMD 
#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_k6.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_RES_ALLOC_EN 
#define UFO_DMX_TSIO 
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_k6.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_XC_SUPPORT_HDMI_DOWNSCALE_OUTPUT_POLICY 




#define UFO_XC_GETOUTPUTINTELACETIMING 





#define UFO_XC_SETBLACKVIDEOBYMODE 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_XC_VMARK 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_XC_PQ_SUPPORT_REPEATER_COLOR_THROUGH_MODE 




#define UFO_XC_PQ_SUPPORT_SWDRIVING_MULTI_DEVICES 




#define UFO_XC_PQ_SUPPORT_SWMOTION 




#define UFO_XC_FB_LEVEL 





#define UFO_AUDIO_AD_SUPPORT 




#define UFO_XC_DAC_POWERCONTROL 



#define UFO_DIP_SUPPORT_MFDEC 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_munich.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 





#define UFO_XC_FORCEWRITE 
# 143 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_munich.h"
#define UFO_XC_SETPIXELSHIFT 




#define UFO_VDEC_TEE_VPU 




#define UFO_VDEC_NEW_SLOW_MOTION 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_CODEC_CAPABILITY_BY_LICENCE 
#define UFO_AUDIO_PCM_MIXER_SUPPORT 




#define UFO_XC_SET_DSINFO_V0 
# 176 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_munich.h"
#define UFO_XC_SWDS_DYMAMIC_CONTROL_DNR 




#define UFO_DIP_SELECT_TILE_BLOCK 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_mulan.h"
#ifndef _UFO_H_
#define _UFO_H_ 





#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 





#define UFO_XC_FORCEWRITE 




#ifdef STELLAR
#define UFO_VBI_VPS_COMPLETE 
#else

#endif




#define UFO_XC_SETPIXELSHIFT 




#define UFO_AUDIO_AD_SUPPORT 




#define UFO_DIP_SELECT_TILE_BLOCK 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_messi.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 





#define UFO_DMX_TSO 
# 126 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_messi.h"
#define UFO_XC_SETPIXELSHIFT 
#define UFO_XC_PQ_PATH 




#define UFO_VDEC_TEE_VPU 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_AVD_CMA 
# 152 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_messi.h"
#define UFO_XC_TEST_PATTERN 



#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_MVOP_GET_IS_SW_CROP 
#define UFO_MVOP_GET_HV_RATIO 




#define UFO_MVOP_GET_MAX_FPS 




#define UFO_MVOP_RESET_SETTING 
# 188 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_messi.h"
#define UFO_XC_ZORDER 

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_macan.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER 






#define UFO_DMX_TSO2 
#define UFO_DMX_RES_ALLOC_EN 
# 130 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO/UFO_macan.h"
#define UFO_XC_PIP_PATCH_USING_SC1_MAIN_AS_SC0_SUB 



#define UFO_XC_FORCEWRITE_V2 




#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_VDEC_TEE_VPU 




#define UFO_VDEC_PREPARU64PTS 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_TEST_PATTERN 




#define UFO_GFX_TRIANGLE 
#define UFO_GFX_SPAN 

#define SUPPORT_BWD 


#define UFO_HDCP2_2 




#define UFO_MVOP_GET_MAX_FPS 




#define UFO_MVOP_RESET_SETTING 




#define UFO_MVOP_DOLBY_HDR 




#define UFO_XC_ZORDER 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_AUDIO_AD_SUPPORT 
#define UFO_AUDIO_CODEC_CAPABILITY_BY_LICENCE 
#define UFO_AUDIO_MULTI_CHANNEL 




#define UFO_MVOP_SET_2P 





#define UFO_VDEC_NEW_SLOW_MOTION 

#define UFO_XC_SETWINDOW_LITE 




#define UFO_MVOP_STREAM_INFO 




#define UFO_MVOP_FORCE_P_MODE 

#endif
# 214 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
#ifndef _API_GFX_H_
#define _API_GFX_H_ 





#include "MsTypes.h"
#include "MsDevice.h"
#include "MsCommon.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif


#define GE_ALIGNED_VALUE(value,align) ( ((value) + ((align)-1)) & ~((align)-1) )
#define GE_ADDR_ALIGNMENT(addr) GE_ALIGNED_VALUE(addr, 8)



#define ERR_HANDLE -1
#define ERR_NULL_INDEX 0xFFFFUL

#define MSIF_GFX_LIB_CODE {'G','F','X','_'}
#define MSIF_GFX_LIBVER {'1','9'}
#define MSIF_GFX_BUILDNUM {'1','9' }
#define MSIF_GFX_CHANGELIST {'0','0','6','1','8','4','6','4'}

#define GFX_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_GFX_LIB_CODE, \
    MSIF_GFX_LIBVER, \
    MSIF_GFX_BUILDNUM, \
    MSIF_GFX_CHANGELIST, \
    MSIF_OS



typedef enum
{
    GFX_FAIL = 0,
    GFX_SUCCESS ,
    GFX_NON_ALIGN_ADDRESS ,
    GFX_NON_ALIGN_PITCH ,
    GFX_INVALID_PARAMETERS ,

    GFX_DRV_NOT_SUPPORT ,

    GFX_DRV_FAIL_FORMAT ,

    GFX_DRV_FAIL_BLTADDR ,

    GFX_DRV_FAIL_OVERLAP ,

    GFX_DRV_FAIL_STRETCH ,

    GFX_DRV_FAIL_ITALIC ,

    GFX_DRV_FAIL_LOCKED ,

    GFX_DRV_NOT_DRAW ,

    GFX_DRV_NO_DEPENDENT ,

    GFX_DRV_CTXMAG_FAIL ,

    GFX_INVALID_INTENSITY_ID = 0x100,
    GFX_INVALID_BUFF_INFO ,
    GFX_INVALID_FONT_HANDLE ,
    GFX_INVALID_BMP_HANDLE ,
    GFX_INIT_FAIL ,
} GFX_Result;



typedef enum
{

    ROP2_OP_ZERO = 0,

    ROP2_OP_NOT_PS_OR_PD ,

    ROP2_OP_NS_AND_PD ,

    ROP2_OP_NS ,

    ROP2_OP_PS_AND_ND ,

    ROP2_OP_ND ,

    ROP2_OP_PS_XOR_PD ,

    ROP2_OP_NOT_PS_AND_PD ,

    ROP2_OP_PS_AND_PD ,

    ROP2_OP_NOT_PS_XOR_PD ,

    ROP2_OP_PD ,

    ROP2_OP_NS_OR_PD ,

    ROP2_OP_PS ,

    ROP2_OP_PS_OR_ND ,

    ROP2_OP_PD_OR_PS ,

    ROP2_OP_ONE ,
} GFX_ROP2_Op;



typedef enum
{

    CK_OP_EQUAL = 0,

    CK_OP_NOT_EQUAL = 1,

    AK_OP_EQUAL = 2,

    AK_OP_NOT_EQUAL = 3,
} GFX_ColorKeyMode;


typedef enum
{

    COEF_ONE = 0,

    COEF_CONST ,

    COEF_ASRC ,

    COEF_ADST ,


    COEF_ZERO ,

    COEF_1_CONST ,

    COEF_1_ASRC ,

    COEF_1_ADST ,


    COEF_ROP8_ALPHA ,

    COEF_ROP8_SRCOVER ,

    COEF_ROP8_DSTOVER ,




    COEF_CONST_SRC ,



    COEF_1_CONST_SRC ,




    COEF_SRC_ATOP_DST ,



    COEF_DST_ATOP_SRC ,



    COEF_SRC_XOR_DST ,
} GFX_BlendCoef;


typedef enum
{

    ABL_FROM_CONST = 0,

    ABL_FROM_ASRC ,

    ABL_FROM_ADST ,

    ABL_FROM_ROP8_SRC ,

    ABL_FROM_ROP8_IN ,

    ABL_FROM_ROP8_DSTOUT ,

    ABL_FROM_ROP8_SRCOUT ,

    ABL_FROM_ROP8_OVER ,


    ABL_FROM_ROP8_INV_CONST ,

    ABL_FROM_ROP8_INV_ASRC ,

    ABL_FROM_ROP8_INV_ADST ,

    ABL_FROM_ROP8_SRC_ATOP_DST ,

    ABL_FROM_ROP8_DST_ATOP_SRC ,

    ABL_FROM_ROP8_SRC_XOR_DST ,

    ABL_FROM_ROP8_INV_SRC_ATOP_DST ,

    ABL_FROM_ROP8_INV_DST_ATOP_SRC
} GFX_AlphaSrcFrom;



typedef enum
{

    GFX_ACMP_OP_MAX = 0,

    GFX_GE_ACMP_OP_MIN = 1,

} GFX_ACmpOp;



typedef enum
{

    GFX_FMT_I1 = E_MS_FMT_I1,

    GFX_FMT_I2 = E_MS_FMT_I2,

    GFX_FMT_I4 = E_MS_FMT_I4,

    GFX_FMT_I8 = E_MS_FMT_I8,

    GFX_FMT_FABAFGBG2266 = E_MS_FMT_FaBaFgBg2266,


    GFX_FMT_1ABFGBG12355 = E_MS_FMT_1ABFgBg12355,

    GFX_FMT_RGB565 = E_MS_FMT_RGB565,

    GFX_FMT_ARGB1555 = E_MS_FMT_ARGB1555,

    GFX_FMT_ARGB4444 = E_MS_FMT_ARGB4444,





    GFX_FMT_ARGB1555_DST = E_MS_FMT_ARGB1555_DST,

    GFX_FMT_YUV422 = E_MS_FMT_YUV422,

    GFX_FMT_ARGB8888 = E_MS_FMT_ARGB8888,

    GFX_FMT_RGBA5551 = E_MS_FMT_RGBA5551,

    GFX_FMT_RGBA4444 = E_MS_FMT_RGBA4444,

    GFX_FMT_ABGR8888 = E_MS_FMT_ABGR8888,


    GFX_FMT_BGRA5551 = E_MS_FMT_BGRA5551,

    GFX_FMT_ABGR1555 = E_MS_FMT_ABGR1555,

    GFX_FMT_ABGR4444 = E_MS_FMT_ABGR4444,

    GFX_FMT_BGRA4444 = E_MS_FMT_BGRA4444,

    GFX_FMT_BGR565 = E_MS_FMT_BGR565,

    GFX_FMT_RGBA8888 = E_MS_FMT_RGBA8888,

    GFX_FMT_BGRA8888 = E_MS_FMT_BGRA8888,
} GFX_Buffer_Format;


typedef enum
{
    GFX_YUV_OP1 ,
    GFX_YUV_OP2 ,
    GFX_YUV_OP3 ,
    GFX_YUV_OP4 ,
} GFX_YUV_OpType;


typedef enum
{
    GFX_YUV_RGB2YUV_PC = 0,
    GFX_YUV_RGB2YUV_255 = 1,

} GFX_YUV_Rgb2Yuv;


typedef enum
{
    GFX_YUV_OUT_255 = 0,
    GFX_YUV_OUT_PC = 1,

} GFX_YUV_OutRange;


typedef enum
{
    GFX_YUV_IN_255 = 0,
    GFX_YUV_IN_127 = 1,

} GFX_YUV_InRange;


typedef enum
{
    GFX_YUV_YVYU = 0,
    GFX_YUV_YUYV = 1,
    GFX_YUV_VYUY = 2,
    GFX_YUV_UYVY = 3,

} GFX_YUV_422;


typedef struct
{
    GFX_YUV_Rgb2Yuv rgb2yuv;
    GFX_YUV_OutRange out_range;
    GFX_YUV_InRange in_range;
    GFX_YUV_422 dst_fmt;
    GFX_YUV_422 src_fmt;
} GFX_YUVMode;




typedef enum
{

    GFX_VCMD_4K = 0,

    GFX_VCMD_8K = 1,

    GFX_VCMD_16K = 2,

    GFX_VCMD_32K = 3,

    GFX_VCMD_64K = 4,

    GFX_VCMD_128K = 5,

    GFX_VCMD_256K = 6,

    GFX_VCMD_512K = 7,

    GFX_VCMD_1024K = 8,
} GFX_VcmqBufSize;





typedef struct DLL_PACKED
{

    MS_U8 b;

    MS_U8 g;

    MS_U8 r;

    MS_U8 a;
} GFX_RgbColor;


typedef struct
{
    MS_U32 Y:8;
    MS_U32 U:4;
    MS_U32 V:4;
} GFX_YuvColor;



typedef struct{
    union{
        GFX_RgbColor rgb;
        GFX_YuvColor yuv;
    };
} GFX_Color;



typedef struct DLL_PACKED
{

    GFX_RgbColor color_s;

    GFX_RgbColor color_e;
} GFX_ColorRange;



typedef struct DLL_PACKED
{

    MS_U16 x;

    MS_U16 y;
} GFX_Point;





typedef struct DLL_PACKED
{

    MS_U8 background;

    MS_U8 foreground;

    union{
        MS_U16 ctrl_flag;
        struct{
            MS_U16 Blink:3;
            MS_U16 Alpha:2;
            MS_U16 blink_en:1;
            MS_U16 reserved1:10;
        } Bits;
        struct{
            MS_U16 BlinkAlpha:4;
            MS_U16 Alpha:2;
            MS_U16 Blink:3;
            MS_U16 reserved:7;
        }Bits2;
        struct{
            MS_U16 Fa:2;
            MS_U16 Ba:2;
            MS_U16 reserved:12;

        }Bits3;
    };


} GFX_BlinkData;



typedef struct DLL_PACKED
{

    GFX_BlinkData blink_data_s;

    GFX_BlinkData blink_data_e;
} GFX_BlinkDataRange;



#define GFXLINE_FLAG_COLOR_CONSTANT 0x00UL
#define GFXLINE_FLAG_COLOR_GRADIENT 0x01UL


typedef struct DLL_PACKED
{

    MS_U16 x1;

    MS_U16 y1;

    MS_U16 x2;

    MS_U16 y2;

    GFX_Buffer_Format fmt;
    union
    {







        GFX_ColorRange colorRange;


        GFX_BlinkDataRange blkDataRange;
    };

    MS_U32 width;


    MS_U32 flag;

} GFX_DrawLineInfo;




typedef struct DLL_PACKED
{

    MS_U16 x;

    MS_U16 y;

    MS_U16 width;

    MS_U16 height;
} GFX_Block;
# 744 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
typedef struct DLL_PACKED
{

    MS_U16 u16X0;

    MS_U16 u16Y0;

    MS_U16 u16X1;

    MS_U16 u16Y1;

    MS_U16 u16DeltaTop;

    MS_U16 u16DeltaBottom;
} GFX_Trapezoid;



#define GFXRECT_FLAG_COLOR_CONSTANT 0x0UL
#define GFXRECT_FLAG_COLOR_GRADIENT_X 0x1UL
#define GFXRECT_FLAG_COLOR_GRADIENT_Y 0x2UL
#define GFXRECT_FLAG_TRAPE_DIRECTION_X 0x4UL
#define GFXRECT_FLAG_TRAPE_DIRECTION_Y 0x8UL


typedef struct DLL_PACKED
{

    union
    {
        GFX_Block dstBlock;
        GFX_Trapezoid dstTrapezoidBlk;
    };

    GFX_Buffer_Format fmt;
    union
    {







        GFX_ColorRange colorRange;


        GFX_BlinkDataRange blkDataRange;
    };






    MS_U32 flag;

} GFX_RectFillInfo;

typedef struct
{
    GFX_RectFillInfo *BatchFillInfo;
    MS_U32 u32BatchNum;
} GFX_BatchRectFillInfo;


typedef struct
{

    GFX_Block dstBlock;

    GFX_Buffer_Format fmt;
    union{
        GFX_RgbColor color;
        GFX_BlinkData blink_data;
    };
    MS_U32 u32LineWidth;
} GFX_OvalFillInfo;

typedef struct DLL_PACKED
{
     int x0;
     int y0;
     int x1;
     int y1;
     int x2;
     int y2;
} GFX_Triangle;

typedef struct DLL_PACKED
{
    GFX_Triangle tri;
    GFX_Block clip_box;
    GFX_Buffer_Format fmt;
    union
    {







        GFX_ColorRange colorRange;


        GFX_BlinkDataRange blkDataRange;
    };






    MS_U32 flag;
} GFX_TriFillInfo;

typedef struct DLL_PACKED
{
    int x;
    int w;
} Span;

typedef struct DLL_PACKED
{
     int y;
     Span *spans;
     int num_spans;
} GFX_Span;

typedef struct DLL_PACKED
{
    GFX_Span span;
    GFX_Block clip_box;
    GFX_Buffer_Format fmt;
    union
    {







        GFX_ColorRange colorRange;


        GFX_BlinkDataRange blkDataRange;
    };






    MS_U32 flag;
} GFX_SpanFillInfo;


#define GFXFONT_FLAG_DEFAULT 0x0UL
#define GFXFONT_FLAG_ITALIC 0x1UL
#define GFXFONT_FLAG_SCALE 0x2UL
#define GFXFONT_FLAG_COMPACT 0x4UL
#define GFXFONT_FLAG_BACKGROUND 0x8UL
#define GFXFONT_FLAG_BLINK 0x10UL
#define GFXFONT_FLAG_VARWIDTH 0x20UL
#define GFXFONT_FLAG_GAP 0x40UL
#define GFXFONT_FLAG_BOLD 0x80UL


typedef struct
{
    MS_S8 s8Xoffset;
    MS_S8 s8Yoffset;
} GFX_GlyphOverlapInfo;


typedef struct
{
    MS_U8 u8X0;
    MS_U8 u8Width;
    MS_U16 u16Index;
    GFX_GlyphOverlapInfo overlap_info;
} GFX_GlyphDispInfo;





typedef struct
{





    MS_U32 flag;


    GFX_Block dstblk;


    MS_U16 dis;
    MS_U16 gap;

    GFX_GlyphDispInfo *pGlyphDispInfo;

    union{
        MS_U32 u32data;
        GFX_RgbColor color;
        GFX_BlinkData blink_data;
    };

} GFX_TextOutInfo;



typedef enum
{
    GEBLINK_NONE = 0x0,
    GEBLINK_BACKGROUND,
    GEBLINK_FOREGROUND,
    GEBLINK_BOTH,
} GFX_BlinkType;


typedef enum
{
    GFX_WP_IN_RANGE = 0,
    GFX_WP_OUT_RANGE = 1,
    GFX_WP_DISABLE = 0xFF,

} GFX_WPType;


typedef struct
{
    MS_U8 u8X0;
    MS_U8 u8Width;
    MS_U8 u8Y0;
    MS_U8 u8Height;
} GFX_GlyphBbox;


typedef struct DLL_PACKED
{
    MS_U8 u8X0;
    MS_U8 u8Width;
} GFX_GlyphBbox_X;


typedef struct DLL_PACKED
{
    MS_U8 u8Y0;
    MS_U8 u8Height;
} GFX_GlyphBbox_Y;



typedef struct DLL_PACKED
{
    MS_U8 flag;
    MS_U32 delta_r;
    MS_U32 delta_g;
    MS_U32 delta_b;
} GFX_GFX_ColorDelta;




typedef struct DLL_PACKED
{

    MS_BOOL bScale;

    MS_U16 x;

    MS_U16 y;

    MS_U16 width;

    MS_U16 height;
} GFX_DrawBmpInfo;




typedef enum
{

    GEROTATE_0,

    GEROTATE_90,

    GEROTATE_180,

    GEROTATE_270,
} GFX_RotateAngle;




#if 0

typedef struct
{

    MS_U8 u8X0;

    MS_U8 u8Width;

    MS_U8 u8Y0;

    MS_U8 u8Height;
}GFX_GFX_GLYPH_BBOX;
#endif


typedef struct
{

    MS_PHY addr;

    MS_U32 width;

    MS_U32 pitch;

    MS_U32 height;

    MS_U32 Hoffset;

    MS_U32 Voffset;

    GFX_Buffer_Format fmt;
} GFX_CharInfo;


typedef struct
{

    MS_PHY addr;

    MS_U32 len;

    MS_BOOL inUsed;

    MS_U32 width;

    MS_U32 pitch;

    MS_U32 height;

    MS_U32 offset;

    GFX_GlyphBbox* pBBox;

    GFX_Buffer_Format fmt;
} GFX_FontInfo;





typedef struct
{
    MS_PHY addr;
    MS_U32 len;
    MS_BOOL inUsed;
    MS_U32 width;
    MS_U32 pitch;
    MS_U32 height;
    GFX_Buffer_Format fmt;
} GFX_BitmapInfo;






typedef struct DLL_PACKED
{

    GFX_Block srcblk;


    union
    {
        GFX_Trapezoid dsttrapeblk;
        GFX_Block dstblk;
    };
}GFX_DrawRect;


typedef struct DLL_PACKED
{

    GFX_Block srcblk0;

    GFX_Block srcblk1;

    GFX_Block dstblk;
}GFX_DrawTwoSourceRect;



typedef struct DLL_PACKED
{
    MS_U32 u32DeltaX;
    MS_U32 u32DeltaY;
    MS_U32 u32InitDelatX;
    MS_U32 u32InitDelatY;
}GFX_ScaleInfo;





typedef struct DLL_PACKED
{

    MS_PHY u32Addr;

    MS_U32 u32Width;

    MS_U32 u32Height;

    MS_U32 u32Pitch;
# 1181 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
    GFX_Buffer_Format u32ColorFmt;
} GFX_BufferInfo;


typedef struct DLL_PACKED
{
    MS_U8 u8Miu;
    MS_U8 u8Dither;
    MS_U32 u32VCmdQSize;
    MS_PHY u32VCmdQAddr;
    MS_BOOL bIsHK;
    MS_BOOL bIsCompt;
}GFX_Config;


typedef struct DLL_PACKED
{

    MS_U8 verctrl[32];

    MS_U8 gedump[256];

    MS_U32 semstaus;
} GFX_DbgInfo;


typedef GFX_BufferInfo* PGFX_BufferInfo;







typedef union
{

    struct
    {
        MS_U8 u8A;
        MS_U8 u8R;
        MS_U8 u8G;
        MS_U8 u8B;
    } RGB;

    MS_U8 u8Data[4];
} GFX_PaletteEntry;



#define GFXDRAW_FLAG_DEFAULT 0x0UL
#define GFXDRAW_FLAG_SCALE 0x1UL
#define GFXDRAW_FLAG_DUPLICAPE 0x2UL
#define GFXDRAW_FLAG_TRAPEZOID_X 0x4UL
#define GFXDRAW_FLAG_TRAPEZOID_Y 0x8UL






typedef MS_U8 GFX_Rgb2yuvMode;
#define GFX_RGB2YUV_PC_MODE ((GFX_Rgb2yuvMode)0x0UL)
#define GFX_RGB2YUV_255_MODE ((GFX_Rgb2yuvMode)0x1UL)

typedef MS_U8 GFX_YuvRangeOut;
#define GFX_YUV_RANGE_OUT_255 ((GFX_YuvRangeOut)0x0UL)
#define GFX_YUV_RANGE_OUT_PC ((GFX_YuvRangeOut)0x1UL)

typedef MS_U8 GFX_YuvRangeIn;
#define GFX_YUV_RANGE_IN_255 ((GFX_YuvRangeIn)0x0UL)
#define GFX_YUV_RANGE_IN_127 ((GFX_YuvRangeIn)0x1UL)

typedef MS_U8 GFX_Yuv422Fmt;
#define GFX_YUV_422_FMT_UY1VY0 ((GFX_Yuv422Fmt)0x00UL)
#define GFX_YUV_422_FMT_VY1UY0 ((GFX_Yuv422Fmt)0x01UL)
#define GFX_YUV_422_FMT_Y1UY0V ((GFX_Yuv422Fmt)0x02UL)
#define GFX_YUV_422_FMT_Y1VY0U ((GFX_Yuv422Fmt)0x03UL)


typedef struct
{
    GFX_Rgb2yuvMode rgb2yuv_mode;
    GFX_YuvRangeOut yuv_range_out;
    GFX_YuvRangeIn yuv_range_in;
    GFX_Yuv422Fmt yuv_mem_fmt_src;
    GFX_Yuv422Fmt yuv_mem_fmt_dst;
} GFX_YuvInfo;



typedef enum
{

    GFX_DONOTHING = 0,

    GFX_NEAREST = 1,

    GFX_REPLACE_KEY_2_CUS = 2,
} GFX_StretchCKType;



#define GFX_DFB_BLD_FLAG_COLORALPHA 0x0001UL
#define GFX_DFB_BLD_FLAG_ALPHACHANNEL 0x0002UL
#define GFX_DFB_BLD_FLAG_COLORIZE 0x0004UL
#define GFX_DFB_BLD_FLAG_SRCPREMUL 0x0008UL
#define GFX_DFB_BLD_FLAG_SRCPREMULCOL 0x0010UL
#define GFX_DFB_BLD_FLAG_DSTPREMUL 0x0020UL
#define GFX_DFB_BLD_FLAG_XOR 0x0040UL
#define GFX_DFB_BLD_FLAG_DEMULTIPLY 0x0080UL
#define GFX_DFB_BLD_FLAG_SRCALPHAMASK 0x0100UL
#define GFX_DFB_BLD_FLAG_SRCCOLORMASK 0x0200UL
#define GFX_DFB_BLD_FLAG_ALL 0x03FFUL

typedef enum
{
    GFX_DFB_BLD_OP_ZERO = 0,
    GFX_DFB_BLD_OP_ONE = 1,
    GFX_DFB_BLD_OP_SRCCOLOR = 2,
    GFX_DFB_BLD_OP_INVSRCCOLOR = 3,
    GFX_DFB_BLD_OP_SRCALPHA = 4,
    GFX_DFB_BLD_OP_INVSRCALPHA = 5,
    GFX_DFB_BLD_OP_DESTALPHA = 6,
    GFX_DFB_BLD_OP_INVDESTALPHA = 7,
    GFX_DFB_BLD_OP_DESTCOLOR = 8,
    GFX_DFB_BLD_OP_INVDESTCOLOR = 9,
    GFX_DFB_BLD_OP_SRCALPHASAT = 10,
}GFX_DFBBldOP;





typedef enum
{

    E_GFX_BUF_DST = 0,

    E_GFX_BUF_SRC = 1,
} EN_GFX_BUF_TYPE;


typedef enum
{
    E_GFX_FMT_CAP_NONE = 0x0,
    E_GFX_FMT_CAP_MULTI_PIXEL,
} EN_GFX_FMT_CAPS_TYPE;

typedef enum
{
    E_GFX_CONFIG_BURST_MIU_LENGTH,
} EN_GFX_CONFIG_TYPE;

typedef enum
{
    E_GFX_CONFIG_INIT,
} EN_GFX_CONFIG_INIT;


typedef struct
{
    MS_BOOL bEnable;
    MS_U32 u32BurstLen;
}GFX_Set_BurstMiuLen;

typedef struct DLL_PACKED
{
# 1359 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
    GFX_Buffer_Format u32ColorFmt;
    EN_GFX_BUF_TYPE eBufferType;
    EN_GFX_FMT_CAPS_TYPE eFmtCapsType;
    MS_U8 u8BaseAlign;
    MS_U8 u8PitchAlign;
}GFX_FmtAlignCapsInfo;






typedef enum
{
    E_GFX_CAP_MULTI_PIXEL,
    E_GFX_CAP_BLT_DOWN_SCALE,
    E_GFX_CAP_DFB_BLENDING,
    E_GFX_CAP_ALIGN,
    E_GFX_CAP_TLB,
}EN_GFX_CAPS;


typedef struct DLL_PACKED
{
    MS_U16 WordUnit;
    MS_BOOL bSupportMultiPixel;
}GFX_CapMultiPixelInfo;


typedef struct DLL_PACKED
{

    MS_U8 u8RangeMax;

    MS_U8 u8RangeMin;

    MS_U8 u8ContinuousRangeMin;





    MS_BOOL bFullRangeSupport;
}GFX_BLT_DownScaleInfo;


typedef enum
{

    E_GFX_TLB_NONE = 0x0000,

    E_GFX_TLB_SRC = 0x0001,

    E_GFX_TLB_DST = 0x0002,

    E_GFX_TLB_SRC_DST = 0x0003,
}EN_GFX_TLB_Mode;
# 1429 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern void MApi_GFX_Init(GFX_Config *geConfig);
# 1438 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_GetConfig(EN_GFX_CONFIG_INIT enType,void *plist,MS_U32 u32Len);
# 1449 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_GetFontInfo(MS_S32 handle, GFX_FontInfo* pinfo);
# 1459 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_GetClip(GFX_Point* v0, GFX_Point* v1);
# 1469 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_GetIntensity(MS_U32 idx, MS_U32 *color);







DLL_PUBLIC extern GFX_Result MApi_GFX_GetTAGID(MS_U16 *tagID);
# 1486 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern MS_U16 MApi_GFX_GetNextTAGID(MS_BOOL bStepTagBefore);






DLL_PUBLIC extern GFX_Result MApi_GFX_GetInfo( GFX_DbgInfo *dbg );
# 1506 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_GetGECaps(EN_GFX_CAPS eCapType, MS_U32* pRet, MS_U32 ret_size);
# 1520 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_DrawLine(GFX_DrawLineInfo *pline);
# 1529 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_RectFill(GFX_RectFillInfo *pfillblock);
# 1538 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_TriFill(GFX_TriFillInfo *ptriblock);
# 1547 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SpanFill(GFX_SpanFillInfo *pspanblock);
# 1560 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetSrcBufferInfo(GFX_BufferInfo *bufInfo, MS_U32 offsetofByte);
# 1569 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDstBufferInfo(GFX_BufferInfo *bufInfo, MS_U32 offsetofByte);
# 1584 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetROP2(MS_BOOL enable, GFX_ROP2_Op eRopMode);
# 1599 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetSrcColorKey(MS_BOOL enable, GFX_ColorKeyMode opMode,
                                      GFX_Buffer_Format fmt, void *ps_color,
                                      void *pe_color);
# 1614 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDstColorKey(MS_BOOL enable, GFX_ColorKeyMode opMode,
                                      GFX_Buffer_Format fmt, void *ps_color,
                                      void *pe_color);
# 1627 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetAlpha(MS_BOOL enable, GFX_BlendCoef coef, GFX_AlphaSrcFrom db_abl, MS_U8 abl_const);
# 1638 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_EnableAlphaBlending(MS_BOOL enable);







DLL_PUBLIC extern GFX_Result MApi_GFX_EnableDFBBlending(MS_BOOL enable);
# 1655 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDFBBldFlags(MS_U16 u16DFBBldFlags);
# 1666 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDFBBldOP(GFX_DFBBldOP gfxSrcBldOP, GFX_DFBBldOP gfxDstBldOP);
# 1675 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDFBBldConstColor(GFX_RgbColor gfxRgbColor);
# 1684 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_BitBlt(GFX_DrawRect *drawbuf,MS_U32 drawflag);
# 1694 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_BitBltEx(GFX_DrawRect * drawbuf, MS_U32 drawflag, GFX_ScaleInfo * ScaleInfo);
# 1708 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetIntensity(MS_U32 id, GFX_Buffer_Format fmt, MS_U32 *pColor);
# 1722 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetClip(GFX_Point* v0, GFX_Point* v1);






DLL_PUBLIC extern GFX_Result MApi_GFX_SetItalic(MS_BOOL enable,MS_U8 ini_line, MS_U8 ini_dis, MS_U8 delta);
# 1741 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDither(MS_BOOL enable);
# 1753 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetOnePixelMode(MS_BOOL enable);
# 1767 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetNearestMode(MS_BOOL enable);
# 1779 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetMirror(MS_BOOL isMirrorX, MS_BOOL isMirrorY);
# 1788 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDstMirror(MS_BOOL isMirrorX, MS_BOOL isMirrorY);
# 1800 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetRotate(GFX_RotateAngle angle);
# 1815 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetNearestMode(MS_BOOL enable);
# 1826 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetTAGID(MS_U16 tagID);







DLL_PUBLIC extern GFX_Result MApi_GFX_WaitForTAGID(MS_U16 tagID);
# 1843 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern MS_U16 MApi_GFX_SetNextTAGID(void);
# 1854 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_EnableVCmdQueue(MS_U16 blEnable);
# 1863 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern GFX_Result MApi_GFX_SetVCmdBuffer(MS_PHYADDR u32Addr, GFX_VcmqBufSize enBufSize);
#else
DLL_PUBLIC extern GFX_Result MApi_GFX_SetVCmdBuffer(MS_PHY PhyAddr, GFX_VcmqBufSize enBufSize);
#endif







DLL_PUBLIC extern GFX_Result MApi_GE_SetVCmd_W_Thread(MS_U8 u8W_Threshold);







DLL_PUBLIC extern GFX_Result MApi_GE_SetVCmd_R_Thread(MS_U8 u8R_Threshold);







DLL_PUBLIC extern GFX_Result MApi_GFX_FlushQueue(void) ;






DLL_PUBLIC extern GFX_Result MApi_GFX_PowerOn(void);






DLL_PUBLIC extern GFX_Result MApi_GFX_PowerOff(void);
# 1916 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern MS_U32 MApi_GFX_SetPowerState(EN_POWER_MODE u16PowerState);
# 1931 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern GFX_Result MApi_GFX_WriteProtect(MS_U8 miu,MS_U32 addr_low,MS_U32 addr_high,GFX_WPType eWPType);
#else
DLL_PUBLIC extern GFX_Result MApi_GFX_WriteProtect(MS_U8 miu,MS_PHY addr_low,MS_PHY addr_high,GFX_WPType eWPType);
#endif
# 1944 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetPaletteOpt( GFX_PaletteEntry *pPalArray, MS_U16 u32PalStart, MS_U16 u32PalEnd);
# 1957 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_DrawBitmap(MS_S32 handle, GFX_DrawBmpInfo *pbmpfmt);






DLL_PUBLIC extern GFX_Result MApi_GFX_TextOut(MS_S32 fhandle, MS_U8 *pindex, MS_U32 strwidth, GFX_TextOutInfo *pfmt);






DLL_PUBLIC extern GFX_Result MApi_GFX_CharacterOut(GFX_CharInfo* pChar, GFX_TextOutInfo *pfmt);






DLL_PUBLIC extern GFX_Result MApi_GFX_GetBitmapInfo(MS_S32 handle, GFX_BitmapInfo* pinfo);






DLL_PUBLIC extern GFX_Result MApi_GFX_GetFrameBufferInfo(MS_U32 *width, MS_U32 *height, MS_U32 *pitch, MS_U32 *fbFmt, MS_PHY *addr);






DLL_PUBLIC extern GFX_Result MApi_GFX_TrapezoidFill(GFX_RectFillInfo *pGfxFillInfo);






DLL_PUBLIC extern GFX_Result MApi_GFX_EnableTrapezoidAA(MS_BOOL bEnable);






DLL_PUBLIC extern GFX_Result MApi_GFX_EnableTrapSubPixCorr(MS_BOOL bEnable);






DLL_PUBLIC extern GFX_Result MApi_GFX_QueryTextDispLength(MS_S32 fhandle, MS_U8 *pu8index, MS_U32 u32strwidth,
                                               GFX_TextOutInfo *pfmt, MS_U32* pu32DispLength);







DLL_PUBLIC extern GFX_Result MApi_GFX_SetAlphaSrcFrom(GFX_AlphaSrcFrom eMode);







DLL_PUBLIC extern GFX_Result MApi_GFX_SetAlphaBlending(GFX_BlendCoef blendcoef, MS_U8 blendfactor);
# 2041 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_QueryDFBBldCaps(MS_U16 *pU16SupportedBldFlags);






DLL_PUBLIC extern GFX_Result MApi_GFX_SetDFBBldSrcColorMask(GFX_RgbColor gfxRgbColor);






DLL_PUBLIC extern GFX_Result MApi_GFX_Line_Pattern_Reset(void);






DLL_PUBLIC extern GFX_Result MApi_GFX_Set_Line_Pattern(MS_BOOL enable, MS_U8 linePattern, MS_U8 repeatFactor);
# 2077 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_BeginDraw(void);







DLL_PUBLIC extern GFX_Result MApi_GFX_EndDraw(void);






DLL_PUBLIC extern GFX_Result MApi_GFX_YUV_Get(GFX_YuvInfo* pYuvInfo);






DLL_PUBLIC extern void MApi_GFX_RectFrame(GFX_RectFillInfo *pblock, GFX_DrawLineInfo *plinefmt);
# 2114 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetDC_CSC_FMT(GFX_YUV_Rgb2Yuv mode, GFX_YUV_OutRange yuv_out_range, GFX_YUV_InRange uv_in_range, GFX_YUV_422 srcfmt, GFX_YUV_422 dstfmt);






DLL_PUBLIC extern GFX_Result MApi_GFX_SetPatchMode(MS_BOOL enable);
# 2130 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_GetBufferInfo(PGFX_BufferInfo srcbufInfo, PGFX_BufferInfo dstbufInfo);
# 2140 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern GFX_Result MApi_GFX_ClearFrameBufferByWord(MS_PHYADDR StrAddr, MS_U32 length, MS_U32 ClearValue);
#else
DLL_PUBLIC extern GFX_Result MApi_GFX_ClearFrameBufferByWord(MS_PHY StrAddr, MS_U32 length, MS_U32 ClearValue);
#endif
# 2157 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern GFX_Result MApi_GFX_ClearFrameBuffer(MS_PHYADDR StrAddr, MS_U32 length, MS_U8 ClearValue);
#else
DLL_PUBLIC extern GFX_Result MApi_GFX_ClearFrameBuffer(MS_PHY StrAddr, MS_U32 length, MS_U8 ClearValue);
#endif







DLL_PUBLIC extern GFX_Result MApi_GFX_SetAlpha_ARGB1555(MS_U8 coef);







DLL_PUBLIC extern GFX_Result MApi_GFX_GetAlpha_ARGB1555(MS_U8* coef);
# 2188 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern GFX_Result MApi_GFX_RegisterGetFontCB(MS_U32 (*fpGFX_CB)(MS_S8, GFX_FontInfo*) );
#else
DLL_PUBLIC extern GFX_Result MApi_GFX_RegisterGetFontCB(MS_PHY (*fpGFX_CB)(MS_S8, GFX_FontInfo*) );
#endif







#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern GFX_Result MApi_GFX_RegisterGetBMPCB(MS_U32 (*fpGFX_CB)(MS_S16, GFX_BitmapInfo*) );
#else
DLL_PUBLIC extern GFX_Result MApi_GFX_RegisterGetBMPCB(MS_PHY (*fpGFX_CB)(MS_S16, GFX_BitmapInfo*) );
#endif
# 2216 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetAlphaCmp(MS_BOOL enable, GFX_ACmpOp eMode);
# 2227 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern void MApi_GFX_SetDbgLevel(MS_U32 level);
# 2236 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetStrBltSckType(GFX_StretchCKType type, GFX_RgbColor *color);
# 2246 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_SetHK(MS_BOOL bIsHK) ;






DLL_PUBLIC extern GFX_Result MApi_GFX_GetHK(MS_BOOL *bIsHK) ;






DLL_PUBLIC extern GFX_Result MApi_GFX_DrawOval(GFX_OvalFillInfo *pOval);






DLL_PUBLIC extern GFX_Result MApi_GFX_GetStatus( MS_BOOL *pStatus );






DLL_LOCAL extern GFX_Result MApi_GFX_GetLibVer(const MSIF_Version **ppVersion);







DLL_PUBLIC extern GFX_Result MApi_GFX_GetAlignCaps(GFX_FmtAlignCapsInfo* pAlignCapsInfo);





#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern void msAPI_GE_ClearFrameBufferByWord (MS_PHYADDR StrAddr, MS_U32 length, MS_U32 ClearValue);
#else
DLL_PUBLIC extern void msAPI_GE_ClearFrameBufferByWord (MS_PHY StrAddr, MS_U32 length, MS_U32 ClearValue);
#endif






DLL_PUBLIC extern GFX_Result MDrv_GE_EnableAlphaBlending(MS_BOOL enable);






DLL_PUBLIC extern GFX_Result MDrv_GE_SetAlphaBlending(GFX_BlendCoef blendcoef, MS_U8 u8ConstantAlpha);






DLL_PUBLIC extern void MDrv_GE_PE_SetIntensity(MS_U8 id, GFX_Buffer_Format fmt, MS_U32* pcolor);






DLL_PUBLIC extern GFX_Result MApi_GFX_SetTLBMode(EN_GFX_TLB_Mode TLBmode);






#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
DLL_PUBLIC extern GFX_Result MApi_GFX_SetTLBBaseADDR(MS_PHYADDR u32TLBSrcMiuAddr,MS_PHYADDR u32TLBDstMiuAddr);
#else
DLL_PUBLIC extern GFX_Result MApi_GFX_SetTLBBaseADDR(MS_PHY phyTLBSrcMiuAddr,MS_PHY phyTLBDstMiuAddr);
#endif






DLL_PUBLIC extern GFX_Result MApi_GFX_SetTLBFlushTable(MS_BOOL enable);






DLL_PUBLIC extern GFX_Result MApi_GFX_SetTLBTag(MS_U16 tag);
# 2357 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX.h"
DLL_PUBLIC extern GFX_Result MApi_GFX_BitbltByTwoSourceBuffer(PGFX_BufferInfo dstbufInfo, GFX_DrawTwoSourceRect *pbmpfmt, MS_U32 drawflag);







DLL_PUBLIC extern void MApi_GE_Exit(void);



#ifdef __cplusplus
}
#endif

#endif
# 103 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsTypes.h"
#ifndef _MS_TYPES_H_
#define _MS_TYPES_H_ 


#ifdef CONFIG_ENABLE_MENUCONFIG
    #include "autoconf.h"
#endif

#include <stddef.h>
#include "UFO.h"



#define SUPPORT_ANDROID_L_PHYVIR_TYPE 

#if defined(UFO_PUBLIC_HEADER_300)

    typedef unsigned char MS_U8;

    typedef unsigned short MS_U16;

    typedef unsigned long MS_U32;

    typedef unsigned long long MS_U64;

    typedef signed char MS_S8;

    typedef signed short MS_S16;

    typedef signed long MS_S32;

    typedef signed long long MS_S64;

    typedef float MS_FLOAT;

    typedef MS_U32 MS_VIRT;

    typedef MS_U32 MS_PHYADDR;

    typedef MS_U32 MS_PHY;

    typedef size_t MS_SIZE;

    typedef unsigned char MS_BOOL;

    #define MPRI_DEC "%ld"

    #define MPRI_UDEC "%lu"

    #define MPRI_HEX "%lx"
#elif defined(UFO_PUBLIC_HEADER_212)

    typedef unsigned char MS_U8;

    typedef unsigned short MS_U16;

    typedef unsigned long MS_U32;

    typedef unsigned long long MS_U64;

    typedef signed char MS_S8;

    typedef signed short MS_S16;

    typedef signed long MS_S32;

    typedef signed long long MS_S64;

    typedef float MS_FLOAT;

    typedef MS_U32 MS_VIRT;

    typedef MS_U32 MS_PHYADDR;

    typedef MS_U32 MS_PHY;


 typedef unsigned char MS_BOOL;

    typedef MS_U32 MS_SIZE;
#else
#if defined (__aarch64__)

    typedef unsigned char MS_U8;

    typedef unsigned short MS_U16;

    typedef unsigned int MS_U32;

    typedef unsigned long MS_U64;

    typedef signed char MS_S8;

    typedef signed short MS_S16;

    typedef signed int MS_S32;

    typedef signed long MS_S64;

    typedef float MS_FLOAT;

    typedef size_t MS_VIRT;

    typedef size_t MS_PHYADDR;

    typedef size_t MS_SIZE;

    typedef MS_U64 MS_PHY;

    typedef unsigned char MS_BOOL;

    #define MPRI_PHY "%x"

    #define MPRI_VIRT "%tx"
#elif defined(MSOS_TYPE_NUTTX)

    typedef unsigned char MS_U8;

    typedef unsigned short MS_U16;

    typedef unsigned long MS_U32;

    typedef unsigned long long MS_U64;

    typedef signed char MS_S8;

    typedef signed short MS_S16;

    typedef signed long MS_S32;

    typedef signed long long MS_S64;

    typedef float MS_FLOAT;

    typedef MS_U32 MS_VIRT;

    typedef MS_U32 MS_PHYADDR;

    typedef MS_U32 MS_PHY;

    typedef MS_U32 MS_SIZE;

    typedef unsigned char MS_BOOL;

    #define MPRI_PHY "%x"

    #define MPRI_VIRT "%tx"
#else
#if (defined(CONFIG_PURE_SN) || defined(CONFIG_MBOOT))

    typedef unsigned char MS_U8;

    typedef unsigned short MS_U16;

    typedef unsigned long MS_U32;

    typedef unsigned long long MS_U64;

    typedef signed char MS_S8;

    typedef signed short MS_S16;

    typedef signed long MS_S32;

    typedef signed long long MS_S64;

    typedef float MS_FLOAT;

    typedef MS_U32 MS_VIRT;

    typedef MS_U32 MS_PHYADDR;

    typedef MS_U32 MS_PHY;

    typedef MS_U32 MS_SIZE;

    typedef unsigned char MS_BOOL;

    #define MPRI_PHY "%x"

    #define MPRI_VIRT "%tx"
#else

    typedef unsigned char MS_U8;

    typedef unsigned short MS_U16;

    typedef unsigned int MS_U32;

    typedef unsigned long long MS_U64;

    typedef signed char MS_S8;

    typedef signed short MS_S16;

    typedef signed int MS_S32;

    typedef signed long long MS_S64;

    typedef float MS_FLOAT;

    typedef size_t MS_VIRT;

    typedef size_t MS_PHYADDR;

    typedef MS_U64 MS_PHY;

    typedef size_t MS_SIZE;

    typedef unsigned char MS_BOOL;

    #define MPRI_PHY "%x"

    #define MPRI_VIRT "%tx"
#endif
#endif
#endif
#ifdef NULL
#undef NULL
#endif
#define NULL 0
# 333 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsTypes.h"
typedef void VOID;

typedef MS_S32 FILEID;






#ifndef MSOS_TYPE_LINUX_KERNEL
#ifndef true

#define true 1

#define false 0
#endif
#endif

#if !defined(TRUE) && !defined(FALSE)

#define TRUE 1

#define FALSE 0
#endif


#if defined(ENABLE) && (ENABLE!=1)
#warning ENALBE is not 1
#else
#define ENABLE 1
#endif

#if defined(DISABLE) && (DISABLE!=0)
#warning DISABLE is not 0
#else
#define DISABLE 0
#endif




typedef enum
{

    E_MS_FMT_I1 = 0x0,

    E_MS_FMT_I2 = 0x1,

    E_MS_FMT_I4 = 0x2,

    E_MS_FMT_I8 = 0x4,

    E_MS_FMT_FaBaFgBg2266 = 0x6,

    E_MS_FMT_1ABFgBg12355 = 0x7,

    E_MS_FMT_RGB565 = 0x8,


    E_MS_FMT_ARGB1555 = 0x9,

    E_MS_FMT_ARGB4444 = 0xa,

    E_MS_FMT_ARGB1555_DST = 0xc,

    E_MS_FMT_YUV422 = 0xe,

    E_MS_FMT_ARGB8888 = 0xf,

    E_MS_FMT_RGBA5551 = 0x10,

    E_MS_FMT_RGBA4444 = 0x11,


    E_MS_FMT_BGRA5551 = 0x12,

    E_MS_FMT_ABGR1555 = 0x13,

    E_MS_FMT_ABGR4444 = 0x14,

    E_MS_FMT_BGRA4444 = 0x15,

    E_MS_FMT_BGR565 = 0x16,

    E_MS_FMT_RGBA8888 = 0x1d,

    E_MS_FMT_BGRA8888 = 0x1e,

    E_MS_FMT_ABGR8888 = 0x1f,

    E_MS_FMT_AYUV8888 = 0x20,

    E_MS_FMT_GENERIC = 0xFFFF,

} MS_ColorFormat;

typedef union _MSIF_Version
{
    struct _DDI
    {
        MS_U8 tag[4];
        MS_U8 type[2];
        MS_U16 customer;
        MS_U16 model;
        MS_U16 chip;
        MS_U8 cpu;
        MS_U8 name[4];
        MS_U8 version[2];
        MS_U8 build[2];
        MS_U8 change[8];
        MS_U8 os;
    } DDI;
    struct _MW
    {
        MS_U8 tag[4];
        MS_U8 type[2];
        MS_U16 customer;
        MS_U16 mod;
        MS_U16 chip;
        MS_U8 cpu;
        MS_U8 name[4];
        MS_U8 version[2];
        MS_U8 build[2];
        MS_U8 changelist[8];
        MS_U8 os;
    } MW;
    struct _APP
    {
        MS_U8 tag[4];
        MS_U8 type[2];
        MS_U8 id[4];
        MS_U8 quality;
        MS_U8 version[4];
        MS_U8 time[6];
        MS_U8 changelist[8];
        MS_U8 reserve[3];
    } APP;
} MSIF_Version;

typedef struct _MS_SW_VERSION_INFO
{
 char UtopiaBspVersion[8];
    char MajorVersion[4];
    char MinorVersion[4];
    char ChangeList_API[16];
    char ChangeList_DRV[16];
    char ChangeList_HAL[16];

} MS_SW_VERSION_INFO;

typedef struct _MS_SW_VERSION_NUM
{
    char UtopiaBspVersion[32];
    MS_U32 UtopiaVerNum;
} MS_SW_VERSION_NUM;




typedef MS_U32 (*FUtopiaOpen)(void** ppInstance, const void* const pAttribute);
typedef MS_U32 (*FUtopiaIOctl)(void* pInstance,
  MS_U32 u32Cmd, void* const pArgs);
typedef MS_U32 (*FUtopiaClose)(void* pInstance);
typedef MS_U32 (*FUtopiaSTR)(MS_U32 u32PowerState, void* pModule);
typedef MS_U32 (*FUtopiaMdbIoctl)(MS_U32 cmd, const void* const pArgs);

#define DLL_PACKED 

#endif
# 98 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor_EX.h"
#ifndef _API_XC_PC_MONITOR_EX_H_
#define _API_XC_PC_MONITOR_EX_H_ 

#include "MsCommon.h"





#include "apiXC_EX.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor_EX.h"
#define XC_PCMONITOR_EX_ENABLE_IP_AUTO_COAST (0)






typedef enum
{
    E_XC_PCMONITOR_EX_STABLE_NOSYNC = 0,
    E_XC_PCMONITOR_EX_STABLE_SYNC ,
    E_XC_PCMONITOR_EX_UNSTABLE,
} XC_PCMONITOR_EX_STATUS;





DLL_PUBLIC MS_BOOL MApi_XC_PCMonitor_EX_Init(XC_DEVICE_ID *pDeviceId, MS_U8 u8MaxWindowNum);
DLL_PUBLIC void MApi_XC_PCMonitor_EX_Restart(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC void MApi_XC_PCMonitor_EX_SetTimingCount(XC_DEVICE_ID *pDeviceId, MS_U16 u16TimingStableCounter, MS_U16 u16TimingNosyncCounter);

DLL_PUBLIC XC_PCMONITOR_EX_STATUS MApi_XC_PCMonitor_EX(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE src, XC_EX_SCALER_WIN eWindow);


DLL_PUBLIC XC_PCMONITOR_EX_STATUS MApi_XC_PCMonitor_EX_GetCurrentState(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC MS_U8 MApi_XC_PCMonitor_EX_GetSyncStatus(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U16 MApi_XC_PCMonitor_EX_Get_HFreqx10(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U32 MApi_XC_PCMonitor_EX_Get_HFreqx1K(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U16 MApi_XC_PCMonitor_EX_Get_VFreqx10(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U32 MApi_XC_PCMonitor_EX_Get_VFreqx1K(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC MS_U16 MApi_XC_PCMonitor_EX_Get_Vtotal(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC void MApi_XC_PCMonitor_EX_Get_Dvi_Hdmi_De_Info(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow,XC_EX_WINDOW_TYPE* msWin);
DLL_PUBLIC MS_BOOL MApi_XC_PCMonitor_EX_SyncLoss(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC MS_BOOL MApi_XC_PCMonitor_EX_InvalidTimingDetect(XC_DEVICE_ID *pDeviceId, MS_BOOL bPollingOnly, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_PCMonitor_EX_SetTimingCountEx( XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE eCurrentSrc, MS_U16 u16TimingStableCounter, MS_U16 u16TimingNosyncCounter);

#ifdef __cplusplus
}
#endif

#endif
# 314 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#ifndef _API_GOP_H_
#define _API_GOP_H_ 



#ifdef __cplusplus
extern "C"
{
#endif
#include "UFO.h"
#include "MsCommon.h"
#include "MsDevice.h"
#include "apiGOP_v2.h"




#define MSIF_GOP_LIB_CODE {'G','O','P','_'}
#define MSIF_GOP_LIBVER {'8','9'}
#define MSIF_GOP_BUILDNUM {'0','2'}
#define MSIF_GOP_CHANGELIST {'0','0','5','2','4','9','1','6'}

#define GOP_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_GOP_LIB_CODE, \
    MSIF_GOP_LIBVER, \
    MSIF_GOP_BUILDNUM, \
    MSIF_GOP_CHANGELIST, \
    MSIF_OS

#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))

#define GOP_PALETTE_ENTRY_NUM 256

#define FB_FMT_AS_DEFAULT 0xFFFF

#define DEFAULT_FB_FMT 0xffff

#define INVALID_WIN_ID GWIN_NO_AVAILABLE

#define GWIN_ID_INVALID 0xFF

#define LAYER_ID_INVALID 0xFFFF

#define INVALID_GOP_NUM 0xFF
#else

#define GOP_PALETTE_ENTRY_NUM 256UL

#define FB_FMT_AS_DEFAULT 0xFFFFUL

#define DEFAULT_FB_FMT 0xFFFFUL

#define INVALID_WIN_ID GWIN_NO_AVAILABLE

#define GWIN_ID_INVALID 0xFFUL

#define LAYER_ID_INVALID 0xFFFFUL

#define INVALID_GOP_NUM 0xFFUL
#endif

#define MAX_GWIN_SUPPORT MApi_GOP_GWIN_GetTotalGwinNum()


#ifndef MAX_GWIN_FB_SUPPORT
#define MAX_GWIN_FB_SUPPORT MApi_GOP_GWIN_GetMax32FBNum()
#endif

#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
#define MAX_NUM_GOP_API_INF_SUPPORT 6
#else
#define MAX_NUM_GOP_API_INF_SUPPORT 6UL
#endif


#define MAX_GOP0_SUPPORT MApi_GOP_GWIN_GetGwinNum(0)
#define MAX_GOP1_SUPPORT MApi_GOP_GWIN_GetGwinNum(1)
#define MAX_GOP2_SUPPORT MApi_GOP_GWIN_GetGwinNum(2)
#define MAX_GOP3_SUPPORT MApi_GOP_GWIN_GetGwinNum(3)
#define MAX_GOP4_SUPPORT MApi_GOP_GWIN_GetGwinNum(4)
#define MAX_GOP5_SUPPORT MApi_GOP_GWIN_GetGwinNum(5)



#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
#define GOP0_GWIN_START 0
#else
#define GOP0_GWIN_START 0UL
#endif
#define GOP1_GWIN_START MAX_GOP0_SUPPORT
#define GOP2_GWIN_START MAX_GOP0_SUPPORT + MAX_GOP1_SUPPORT
#define GOP3_GWIN_START MAX_GOP0_SUPPORT + MAX_GOP1_SUPPORT + MAX_GOP2_SUPPORT
#define GOP4_GWIN_START MAX_GOP0_SUPPORT + MAX_GOP1_SUPPORT + MAX_GOP2_SUPPORT + MAX_GOP3_SUPPORT
#define GOP5_GWIN_START MAX_GOP0_SUPPORT + MAX_GOP1_SUPPORT + MAX_GOP2_SUPPORT + MAX_GOP3_SUPPORT + MAX_GOP4_SUPPORT


typedef enum
{

    GOP_API_FAIL = 0,

    GOP_API_SUCCESS = 1,

    GOP_API_NON_ALIGN_ADDRESS ,

    GOP_API_NON_ALIGN_PITCH ,

    GOP_API_DEPEND_NOAVAIL ,

    GOP_API_MUTEX_OBTAIN_FAIL ,

    GOP_API_MUTEX_OBTAINED ,

    GOP_API_INVALID_BUFF_INFO ,

    GOP_API_INVALID_PARAMETERS,

    GOP_API_FUN_NOT_SUPPORTED,

    GOP_API_ENUM_NOT_SUPPORTED,

    GOP_API_CRT_GWIN_FAIL = 0xFE,

    GOP_API_CRT_GWIN_NOAVAIL = 0xFF,
} E_GOP_API_Result;


#define GWIN_FAIL GOP_API_CRT_GWIN_FAIL

#define GWIN_OK GOP_API_SUCCESS

#define GWIN_NO_AVAILABLE GOP_API_CRT_GWIN_NOAVAIL



typedef MS_U8 GWINID;





typedef struct DLL_PACKED
{

    MS_U8 gId;

    MS_U16 StartX;

    MS_U16 StartY;

    MS_U16 Win_Width;

    MS_U16 Win_Height;

    MS_U16 FBOffset_X;

    MS_U16 FBOffset_Y;
} GOP_GwinDispProperty;


typedef struct DLL_PACKED
{

    MS_U16 u16PanelWidth;

    MS_U16 u16PanelHeight;

    MS_U16 u16PanelHStr;

    MS_BOOL bEnableVsyncIntFlip;

#if (defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_700))
    MS_PHY u32GOPRBAdr;
#else
    MS_PHYADDR u32GOPRBAdr;
#endif

    MS_U32 u32GOPRBLen;

#if (defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_700))
    MS_PHY u32GOPRegdmaAdr;
#else
    MS_PHYADDR u32GOPRegdmaAdr;
#endif

    MS_U32 u32GOPRegdmaLen;
}GOP_InitInfo;


typedef struct DLL_PACKED
{

    MS_U8 u8A;

    MS_U8 u8R;

    MS_U8 u8G;

    MS_U8 u8B;
} GOP_Palette;


typedef struct DLL_PACKED
{

    MS_U8 gWinId;

    MS_U8 enable:1;

    MS_U8 allocated:1;

    MS_U16 x0;

    MS_U16 y0;

    MS_U16 x1;

    MS_U16 y1;

    MS_U16 width;

    MS_U16 height;

    MS_U16 pitch;

    MS_U16 fbFmt;

#if (defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_700))
    MS_PHY addr;
#else
    MS_U32 addr;
#endif

    MS_U32 size;

    MS_U8 next;

    MS_U8 prev;

    MS_U8 string;

    MS_U16 s_x;

    MS_U16 s_y;

    MS_U16 dispWidth;

    MS_U16 dispHeight;
} GOP_GwinFBAttr;


typedef struct DLL_PACKED
{

    MS_U16 u16VPixelStart;

    MS_U16 u16VPixelEnd;

    MS_U16 u16HPixelStart;

    MS_U16 u16HPixelEnd;
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))

    MS_U32 u32TFDRAMAddr;

    MS_U32 u32BFDRAMAddr;
#else

    MS_PHY u32TFDRAMAddr;

    MS_PHY u32BFDRAMAddr;
#endif

    MS_U16 u16DRAMJumpLen;

    MS_U8 u8fmt;
} GOP_DwinInfo;


typedef enum
{

    DWIN_SRC_OP = 0,

    DWIN_SRC_MVOP = 1,

    DWIN_SRC_IP = 2,

    DWIN_SRC_OP1 = 3,

    DWIN_SRC_SUBMVOP = 4,

    DWIN_SRC_GOPScaling = 5,
    DWIN_SRC_MAX = 6,
}EN_GOP_DWIN_SRC_SEL;


typedef enum
{

    DWIN_DATA_FMT_UV7Y8 = 0,

    DWIN_DATA_FMT_UV8Y8,

    DWIN_DATA_FMT_ARGB8888,

    DWIN_DATA_FMT_RGB565,
    DWIN_DATA_FMT_MAX
} EN_GOP_DWIN_DATA_FMT;



typedef enum
{

    GOPDWIN_INT_MASK_PROG = 0x0010,

    GOPDWIN_INT_MASK_TF = 0x0020,

    GOPDWIN_INT_MASK_BF = 0x0040,

    GOPDWIN_INT_MASK_VS = 0x0080,
} EN_GOP_DWIN_INT_MASK;


typedef enum
{

    GOPOUT_RGB,

    GOPOUT_YUV,
} EN_GOP_OUTPUT_COLOR;



typedef enum
{
    E_GOP_FB_NULL,

    E_GOP_FB_OSD,

    E_GOP_FB_MUTE,

    E_GOP_FB_SUBTITLE,

    E_GOP_FB_TELTEXT,

    E_GOP_FB_MHEG5,

    E_GOP_FB_CLOSEDCAPTION,

    E_GOP_FB_AFBC_SPLT_YUVTRNS_ARGB8888= 0x100,
    E_GOP_FB_AFBC_NONSPLT_YUVTRS_ARGB8888,
    E_GOP_FB_AFBC_SPLT_NONYUVTRS_ARGB8888,
    E_GOP_FB_AFBC_NONSPLT_NONYUVTRS_ARGB8888,
} EN_GOP_FRAMEBUFFER_STRING;



typedef enum
{

    E_GOP_EVENT_BUF_ARRANGE_BEGIN = 0,

    E_GOP_EVENT_BUF_ARRANGE_END = 1,
} EN_GOP_EVENT_TYPE;


typedef enum
{

    E_GOP_TILE_DATA_16BPP = 0,

    E_GOP_TILE_DATA_32BPP = 1,
} EN_GOP_TILE_DATA_TYPE;


typedef enum
{

    E_GOP_SEL_MIU0 = 0,

    E_GOP_SEL_MIU1 = 1,

    E_GOP_SEL_MIU2 = 2,

    E_GOP_SEL_MIU3 = 3,
} EN_GOP_SEL_TYPE;



typedef struct DLL_PACKED _GOP_MuxConfig
{



  struct DLL_PACKED
  {
      MS_U8 u8GopIndex;
      MS_U8 u8MuxIndex;
  }GopMux[6];
  MS_U8 u8MuxCounts;
}GOP_MuxConfig, *PGOP_MuxConfig;


typedef struct DLL_PACKED _GOP_LayerConfig
{
  struct DLL_PACKED
  {
      MS_U32 u32GopIndex;
      MS_U32 u32LayerIndex;
  }stGopLayer[6];
  MS_U32 u32LayerCounts;
}GOP_LayerConfig, *PGOP_LayerConfig;

typedef struct DLL_PACKED
{
    MS_U8 gWinId;
#if (defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_700))
    MS_PHY u32FlipAddr;
    MS_PHY u32SubAddr;
#else
    MS_U32 u32FlipAddr;
    MS_U32 u32SubAddr;
#endif
    MS_U16 u16WaitTagID;
    MS_U16 *pU16QueueCnt;
}GOP_FlipConfig, *PGOP_FlipConfig;

typedef struct DLL_PACKED
{
    MS_U8 u8InfoCnt;
    GOP_FlipConfig astGopInfo[GOP_MULTIINFO_NUM];
}GOP_MultiFlipInfo, *PGOP_MultiFlipInfo;


typedef enum
{

    EN_GOP_MUX0 = 0,

    EN_GOP_MUX1 = 1,

    EN_GOP_MUX2 = 2,

    EN_GOP_MUX3 = 3,

    EN_GOP_IP0_MUX = 4,

    EN_GOP_IP1_MUX = 5,

    EN_GOP_VOP0_MUX = 6,

    EN_GOP_VOP1_MUX = 7,

    EN_GOP_FRC_MUX0 = 8,

    EN_GOP_FRC_MUX1 = 9,

    EN_GOP_FRC_MUX2 = 10,

    EN_GOP_FRC_MUX3 = 11,

    EN_GOP_BYPASS_MUX0 = 12,

    EN_GOP_IP0_SUB_MUX = 13,

    EN_GOP_VOP0_SUB_MUX = 14,

    EN_GOP_OP1_MUX = 15,

    EN_GOP_DIP_MUX = 16,

    EN_GOP_GS_MUX = 17,

    EN_GOP_MUX4 = 18,
    EN_MAX_GOP_MUX_SUPPORT,
} EN_Gop_MuxSel;


typedef enum
{

    E_GOP_Debug_Level_LOW = 0,

    E_GOP_Debug_Level_MED = 1,

    E_GOP_Debug_Level_HIGH = 2,
} EN_GOP_DEBUG_LEVEL;



typedef enum
{

    E_GOP_GWIN_FADE_IN,

    E_GOP_GWIN_FADE_OUT,

    E_GOP_GWIN_FADE_UNKNOWN,
} EN_GOP_FADE_TYPE;


typedef enum
{
    GOP_PINPON_G3D ,
    GOP_PINPON_VE,
    GOP_PINPON_DWIN,
    GOP_PINPON_DIP,
    GOP_PINPON_DWIN0,
    GOP_PINPON_DWIN1,
}GOP_PINPON_MODE;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_U8 u8FrameCount;
    MS_U8 u8Result;
}MS_GOP_VECAPTURESTATE, *PMS_GOP_VECAPTURESTATE;

typedef enum
{
    E_GOP_VALID_6BITS = 0,
    E_GOP_VALID_8BITS = 1,
} EN_GOP_CONSALPHA_BITS;



typedef enum
{

    E_GOP_IGNORE_MUX = 0x0001,

    E_GOP_IGNORE_GWIN = 0x0002,

    E_GOP_IGNORE_STRETCHWIN = 0x0004,

    E_GOP_IGNORE_PALETTE = 0x0008,

    E_GOP_IGNORE_SET_DST_OP = 0x0010,

    E_GOP_IGNORE_ENABLE_TRANSCLR = 0x0020,

    E_GOP_BOOTLOGO_IGNORE_VEOSDEN = 0x0040,

    E_GOP_IGNORE_ALL = 0xFFFF,

    E_GOP_IGNORE_DISABLE = 0x0000,
} EN_GOP_IGNOREINIT;



typedef enum
{
    E_GOP_CAP_WORD_UNIT ,
    E_GOP_CAP_GWIN_NUM,
    E_GOP_CAP_VERSION,
    E_GOP_CAP_RESERVED,
    E_GOP_CAP_CONSALPHA_VALIDBITS,
    E_GOP_CAP_PALETTE,
    E_GOP_CAP_DWIN,
    E_GOP_CAP_GOP_MUX,
    E_GOP_CAP_PIXELMODE_SUPPORT,
    E_GOP_CAP_STRETCH,
    E_GOP_CAP_TLBMODE_SUPPORT,
    E_GOP_CAP_AFBC_SUPPORT,
    E_GOP_CAP_BNKFORCEWRITE,
}EN_GOP_CAPS;


typedef enum
{
    E_GOP_FUN_AFBC,
}EN_GOP_FUNS;


typedef enum
{
    E_GOP_CAP_PAL_SIZE_NONE = 0x0000,
    E_GOP_CAP_PAL_SIZE_256 = 0x0100,
    E_GOP_CAP_PAL_SIZE_64 = 0x0200,
    E_GOP_CAP_PAL_SIZE_MASK = 0x0F00,
}EN_GOP_CAP_PAL;



typedef struct DLL_PACKED
{
    MS_BOOL bSupportWindowDECapture;
    MS_BOOL bSupportOSDCapture;
}GOP_DWIN_CAP, *PGOP_DWIN_CAP;


typedef struct DLL_PACKED
{
    MS_U8 u8MuxNumber;
    MS_U8 *pu8MuxProrityArray;
    MS_BOOL bNewMux;
    MS_BOOL bNeedSetMUX1ToIP0;
    MS_BOOL bNeedSetMUX3ToIP0;
}ST_GOP_MUX_CAP, *PST_GOP_MUX_CAP;


typedef struct DLL_PACKED
{
    MS_U32 GOP_LibVer;
    MS_U32 GOP_BuildNum;
    MS_U32 GOP_ChangeList;
}GOP_LIB_VER, *PGOP_LIB_VER;


typedef struct DLL_PACKED
{
    MS_U32 GOP_NumOfTbl;
    MS_U32 GOP_PalTbl[0x10];
    MS_U32 GOP_PalTblIdx;
}GOP_CAP_PAL_TYPE, *PGOP_CAP_PAL_TYPE;

typedef enum
{
    E_GOP_DWIN_INIT ,
    E_GOP_DWIN_ENABLE ,
    E_GOP_DWIN_ENABLEINTR ,
    E_GOP_DWIN_SRCSLCT ,
    E_GOP_DWIN_ONESHOT ,
    E_GOP_DWIN_ONESHOT2 ,
    E_GOP_DWIN_SET_INFO ,
    E_GOP_DWIN_SET_YUORD ,
    E_GOP_DWIN_GET_BUFSTUS ,
    E_GOP_DWIN_CLR_BUFSTUS ,
    E_GOP_DWIN_SET_SCANTYPE ,
    E_GOP_DWIN_SET_DATAFMT ,
    E_GOP_DWIN_SET_ALPHA ,
    E_GOP_DWIN_SET_R2Y ,
} EN_GOP_DWIN_CNTL;


typedef struct DLL_PACKED
{
    MS_U32 GOP_VStretch_Support;
}GOP_CAP_STRETCH_INFO, *PGOP_CAP_STRETCH_INFO;


typedef struct DLL_PACKED
{
    MS_U32 GOP_TLB_Support;
}GOP_CAP_TLB_INFO, *PGOP_CAP_TLB_INFO;


typedef struct
{
    MS_U32 GOP_AFBC_Support;
}GOP_CAP_AFBC_INFO, *PGOP_CAP_AFBC_INFO;


typedef struct DLL_PACKED
{
    MS_U16 u16HDTotal;
    MS_U16 u16VDTotal;

    MS_U16 u16DEHStart;
    MS_U16 u16DEHSize;

    MS_U16 u16DEVStart;
    MS_U16 u16DEVSize;

    MS_BOOL bInterlaceMode;
    MS_BOOL bYUVInput;
    MS_BOOL bCLK_EN;
    MS_BOOL bINVALPHA_EN;
}ST_GOP_TIMING_INFO, *PST_GOP_TIMING_INFO;

typedef enum
{
    E_GOP_MULTIWIN_SET_COLORKEY,
    E_GOP_MULTIWIN_SET_FRAMECOLOR,
    E_GOP_MULTIWIN_GET_COLORKEY,
    E_GOP_MULTIWIN_GET_FRAMECOLOR,
}EN_GOP_MULTIWIN_COLOR_MODE;

typedef struct DLL_PACKED
{
    MS_BOOL enable;
    MS_U8 u8WinAlpha;
    MS_U8 u8BoarderWidth;
    MS_U8 u8BoarderAlpha;
    MS_U8 u8BoarderY_G;
    MS_U8 u8BoarderCr_R;
    MS_U8 u8BoarderCb_B;
    MS_U16 u16WinHstart;
    MS_U16 u16WinHend;
    MS_U16 u16WinVstart;
    MS_U16 u16WinVend;
}GOP_MULTIWIN_COLORKEY, *PGOP_MULTIWIN_COLORKEY;

typedef struct DLL_PACKED
{
    MS_U8 u8frameAlpha;
    MS_U8 u8frameY_G;
    MS_U8 u8frameCr_R;
    MS_U8 u8frameCb_B;
}GOP_MULTIWIN_FRAMECOLOR, *PGOP_MULTIWIN_FRAMECOLOR;
# 1039 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_Init(GOP_InitInfo *pGopInit);
# 1048 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetInfo(GOP_ApiInfo* pGopApiInfo);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetStatus(GOP_ApiStatus *pGopApiSts);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetDbgLevel(EN_GOP_DEBUG_LEVEL level);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetLibVer(const MSIF_Version **ppVersion);
# 1076 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_InitByGOP(GOP_InitInfo *pGopInit, MS_U8 u8GOP);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SwitchGOP(MS_U8 u8GOP);
# 1096 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_Initialize_StretchWindow(MS_U8 u8GOPNum);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetGOPClk(MS_U8 gopNum, EN_GOP_DST_TYPE eDstType);




DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetCurrentGOP(void);
# 1118 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetMaxGOPNum(void);






DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetGwinNum(MS_U8 u8GopNum);







DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetTotalGwinNum(void);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_PowerOn(void);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_PowerOff(void);
# 1154 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result Mapi_GOP_GWIN_ResetGOP(MS_U32 u32Gop);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_ResetPool(void);
# 1173 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetPowerState(EN_POWER_MODE enPowerState);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetGOPBWStrength(EN_GOP_BW_STRENGTH eGOPBWStr, MS_U8 u8GOP);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetGOPBWStrength(MS_U8 u8GOP, EN_GOP_BW_STRENGTH* curBW);
# 1199 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetGOPHStart(MS_U8 u8GOP,MS_U16 u16PanelHStr);
# 1209 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetGOPBrightness(MS_U8 u8GOP,MS_U16 u16BriVal,MS_BOOL bMSB);
# 1219 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetGOPBrightness(MS_U8 u8GOP,MS_U16* u16BriVal,MS_BOOL* bMSB);
# 1231 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_EnableLBCouple(MS_U8 u8GOP, MS_BOOL bEnable);
# 1242 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_VE_SetOutputTiming(GOP_VE_TIMINGTYPE mode);
# 1251 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_Enable_VEOSD(MS_U8 u8GOP, MS_BOOL bEn);
# 1262 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_MIXER_SetOutputTiming(GOP_MIXER_TIMINGTYPE mode, GOP_MixerTiming *pMT);
# 1272 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_MIXER_SetMIXER2OPOutputTiming(GOP_Mixer2OPTiming *pMT);
# 1283 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_MIXER_EnableVfilter(MS_BOOL bEnable);
# 1293 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_MIXER_EnableOldBlendMode(MS_U8 u8GOP, MS_BOOL bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_RestoreFromVsyncLimitation(void);
# 1313 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_MIUSel(MS_U8 u8GOP, EN_GOP_SEL_TYPE MiuSel);
# 1324 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetUVSwap(MS_U8 u8GOP, MS_BOOL bEn);
# 1335 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetYCSwap(MS_U8 u8GOP, MS_BOOL bEn);
# 1345 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GetMIUSel(MS_U8 u8GOP);
# 1356 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetGOPContrast(MS_U8 u8GOP, MS_U16 u16YContrast, MS_U16 u16UContrast, MS_U16 u16VContrast);
# 1367 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetGOPContrast(MS_U8 u8GOP, MS_U16* u16YContrast, MS_U16* u16UContrast, MS_U16* u16VContrast);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_EnaVECapture(PMS_GOP_VECAPTURESTATE pstVECapState);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetVECaptureState(PMS_GOP_VECAPTURESTATE pstVECapState);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_VECaptureWaitOnFrame(PMS_GOP_VECAPTURESTATE pstVECapState);
# 1403 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetConfig(EN_GOP_CONFIG_TYPE type, MS_U32 *plist);
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetConfig(EN_GOP_CONFIG_TYPE type, void *plist);
#endif
# 1416 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_SetConfigEx(MS_U8 u8Gop, EN_GOP_CONFIG_TYPE enType, MS_U32 *plist);
#else
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_SetConfigEx(MS_U8 u8Gop, EN_GOP_CONFIG_TYPE enType, void *plist);
#endif
# 1429 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GetConfigEx(MS_U8 u8Gop, EN_GOP_CONFIG_TYPE enType, MS_U32 *plist);
#else
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GetConfigEx(MS_U8 u8Gop, EN_GOP_CONFIG_TYPE enType, void *plist);
#endif
# 1445 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_Set3DOSDMode(MS_U8 u8Gwin, MS_U16 u16MainFBId, MS_U16 u16SubFBId,EN_GOP_3D_MODETYPE en3DMode);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_Set3D_LR_FrameExchange(MS_U8 u8GOP);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_Set_GPIO3DPin(MS_U32 u32GPIO3DPin);
# 1468 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetChipCaps(EN_GOP_CAPS eCapType, MS_U32* pRet, MS_U32 ret_size);
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GetChipCaps(EN_GOP_CAPS eCapType, void* pRet, MS_U32 ret_size);
#endif
# 1483 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_TestPattern(EN_GOP_TST_PATTERN eTstPatternType, MS_U32 u32ARGB);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_TestPatternAlpha_Enable(MS_BOOL bTSTAlpha);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_IsRegUpdated(MS_U8 u8GopType);






DLL_PUBLIC MS_U32 MApi_GOP_GWIN_GetLayerFromGOP(MS_U32 u32GOP);






DLL_PUBLIC MS_U32 MApi_GOP_GWIN_GetGOPFromLayer(MS_U32 u32Layer);
# 1525 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Enable(MS_U8 winId, MS_BOOL bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_EnableTransClr(EN_GOP_TRANSCLR_FMT fmt, MS_BOOL bEnable);
# 1544 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_EnableTransClr_EX(MS_U8 u8GOP,EN_GOP_TRANSCLR_FMT fmt, MS_BOOL bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_EnableProgressive(MS_BOOL bEnable);
# 1560 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_EnableProgressive_EX(MS_U8 u8GOP,MS_BOOL bEnable);
# 1571 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_DeleteWin(MS_U8 winId);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_ReleaseWin(MS_U8 gId);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_DestroyWin(MS_U8 gId);





DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_DeleteWinHVSize(MS_U8 u8GOP, MS_U16 u16HSize, MS_U16 u16VSize);
# 1599 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetLayer(GOP_LayerConfig *pGopLayer, MS_U32 u32SizeOfLayerInfo);
# 1608 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetLayer(GOP_LayerConfig *pGopLayer, MS_U32 u32SizeOfLayerInfo);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_OutputColor(EN_GOP_OUTPUT_COLOR type);
# 1626 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_OutputColor_EX(MS_U8 u8GOP,EN_GOP_OUTPUT_COLOR type);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SwapOverlapWin(MS_U8 u8GOP, MS_U8 u8win);
# 1648 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetRelativeWinPrio(MS_U8 u8GOP, GOP_GwinPri *pGwinPri);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Switch2Gwin(MS_U8 winId);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetAlphaInverse(MS_BOOL bEnable);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetAlphaInverse_EX(MS_U8 u8GOP,MS_BOOL bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetAlphaInverse(MS_BOOL *bEnable);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_GetAlphaInverse_EX(MS_U8 u8GOP,MS_BOOL *bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetPalette(void);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_EnableMultiAlpha(MS_U32 u32GopIdx, MS_BOOL bEnable);






DLL_PUBLIC SYMBOL_WEAK MS_BOOL MApi_GOP_GWIN_IsMultiAlphaEnable(MS_U32 u32GopIdx);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetAlphaValue(MS_U16 * Gwin01AlphaValue, MS_U16 * Gwin23AlphaValue);
DLL_PUBLIC void MApi_GOP_GWIN_SetHScroll(MS_U8 nWinID, MS_U8 nRate, MS_BOOL bEnable);
DLL_PUBLIC void MApi_GOP_GWIN_SetVScroll(MS_U8 nWinID, MS_U8 nRate, MS_BOOL bEnable);
# 1725 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetScrollRate(MS_U8 u8rate);
# 1736 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetScrollType(MS_U8 u8WinId, GOP_SCROLL_TYPE type, MS_U16 u16Offset, MS_BOOL bEnable );
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetSWScrollBuffer(MS_U16 bufNum, MS_U32* pBuffer);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetFMT0TransClr(MS_U16 clr);





DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetFMT0TransClr_EX(MS_U8 u8GOP,MS_U16 clr);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetTransClr_8888(MS_U32 clr, MS_U32 mask);





DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetTransClr_8888_EX(MS_U8 u8GOP,MS_U32 clr, MS_U32 mask);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_EnableT3DMode(MS_BOOL bEnable);
# 1783 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetBlending(MS_U8 u8win, MS_BOOL bEnable, MS_U8 u8coef);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetDuplication(MS_U8 hext, MS_U8 vext);
# 1802 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetWinPosition(MS_U8 winId, MS_U16 dispX, MS_U16 dispY);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetWinPositionOffset(MS_U8 winId, MS_U16 x, MS_U16 y);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetWinProperty(GOP_GwinDispProperty WinProperty);
# 1830 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetGOPDst(MS_U8 u8GOP, EN_GOP_DST_TYPE dsttype);
# 1843 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetBlink(MS_BOOL bEnable, MS_U8 u8rate);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetFieldInver(MS_BOOL enable);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetFieldInver_EX(MS_U8 u8GOP,MS_BOOL enable);
# 1870 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_STRETCHWIN(MS_U8 u8GOP_num, EN_GOP_DST_TYPE eDstType,MS_U16 x, MS_U16 y, MS_U16 width, MS_U16 height);
# 1880 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetStretchWinPosition(MS_U8 u8GOPNum, MS_U16 u16DispX, MS_U16 u16DispY);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetHDisplaySize(MS_U8 gId, MS_U16 Width,MS_U16 X_Start);
# 1895 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetWinInfo(MS_U8 u8win, GOP_GwinInfo* pinfo);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetTransClr(EN_GOP_TRANSCLR_FMT fmt, MS_U16 clr);
# 1913 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetTransparentClr(MS_U8 u8GOP, EN_GOP_TRANSCLR_FMT fmt, ST_Transparent_Color *st_Transcolor);
# 1924 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetTransClr_EX(MS_U8 u8GOP,EN_GOP_TRANSCLR_FMT fmt, MS_U16 clr);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetWinDispPosition(MS_U8 gId, MS_U16 dispX, MS_U16 dispY);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetHMirror(MS_BOOL bEnable);
# 1949 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetHMirror_EX(MS_U8 u8GOP,MS_BOOL bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetVMirror(MS_BOOL bEnable);
# 1965 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetVMirror_EX(MS_U8 u8GOP,MS_BOOL bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_IsMirrorOn(MS_BOOL *bHMirror, MS_BOOL *bVMirror);
# 1980 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_IsMirrorOn_EX(MS_U8 u8GOP,MS_BOOL *bHMirror, MS_BOOL *bVMirror);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_HSCALE(MS_BOOL bEnable, MS_U16 src, MS_U16 dst) ;
# 2005 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_HSCALE_EX(MS_U8 u8GOP,MS_BOOL bEnable, MS_U16 src, MS_U16 dst);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_VSCALE(MS_BOOL bEnable, MS_U16 src, MS_U16 dst) ;
# 2028 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_VSCALE_EX(MS_U8 u8GOP,MS_BOOL bEnable, MS_U16 src, MS_U16 dst);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_HStretchMode(EN_GOP_STRETCH_HMODE HStrchMode);
# 2044 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_Set_HStretchMode_EX(MS_U8 u8GOP,EN_GOP_STRETCH_HMODE HStrchMode);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_VStretchMode(EN_GOP_STRETCH_VMODE VStrchMode);
# 2061 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_Set_VStretchMode_EX(MS_U8 u8GOP,EN_GOP_STRETCH_VMODE VStrchMode);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_TranspColorStretchMode(EN_GOP_STRCH_TRANSPCOLORMODE TColorStrchMode);
# 2077 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_Set_TranspColorStretchMode_EX(MS_U8 u8GOP,EN_GOP_STRCH_TRANSPCOLORMODE TColorStrchMode);
# 2091 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetForceWrite(MS_BOOL bEnable);
# 2100 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetBnkForceWrite(MS_U8 u8GOP, MS_BOOL bEnable);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetAlphaValue(MS_U16 * Gwin01AlphaValue, MS_U16 * Gwin23AlphaValue);
# 2116 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetWinPosition(MS_U8 winId, MS_U16 * dispX, MS_U16 *dispY);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetWinProperty(GOP_GwinDispProperty *WinProperty);





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetWinAttr(MS_U8 gId, MS_U16 *x0, MS_U16 *y0, MS_U16 *width, MS_U16 *height, MS_U16 *fbPitch, MS_U16 *fbFmt, MS_U32 *addr, MS_U32 *size);
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetWinAttr(MS_U8 gId, MS_U16 *x0, MS_U16 *y0, MS_U16 *width, MS_U16 *height, MS_U16 *fbPitch, MS_U16 *fbFmt, MS_PHY *addr, MS_U32 *size);
#endif
# 2142 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetWinInfo(MS_U8 u8win, GOP_GwinInfo* pinfo);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_UpdateRegOnceEx(MS_BOOL bWriteRegOnce, MS_BOOL bSync);





DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_UpdateRegOnceEx2(MS_U8 u8GOP,MS_BOOL bWriteRegOnce, MS_BOOL bSync);
# 2170 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_UpdateRegOnceByMask(MS_U16 u16GopMask,MS_BOOL bWriteRegOnce, MS_BOOL bSync);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_TriggerRegWriteIn(MS_U8 u8win, MS_BOOL bForceWriteIn);
# 2193 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_TriggerRegWriteIn_Ex(MS_U8 u8win, MS_BOOL bForceWriteIn, MS_BOOL bSync);
# 2206 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetFadeInOut(MS_U8 gId, EN_GOP_FADE_TYPE eGwinFadeType, MS_BOOL bEnable, MS_U8 u8FadeRate);
# 2218 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetGWinShared(MS_U8 winId, MS_BOOL bIsShared);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetGWinSharedCnt(MS_U8 winId, MS_U16 u16SharedCnt);
# 2241 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_EnableTileMode(MS_U8 winId, MS_BOOL bEnable, EN_GOP_TILE_DATA_TYPE tiletype );
# 2255 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetPINPON(MS_U8 winId, MS_BOOL bEn,GOP_PINPON_MODE PINPON_Mode);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetGOPYUV(MS_U8 u8GOP);
# 2272 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_MIXER_SetMux(MS_U8 u8GOP,MS_U8 u8Mux, MS_BOOL bEn);
# 2286 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetNewAlphaMode(MS_U8 gWinId, MS_BOOL bEnable);
# 2298 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetPreAlphaMode(MS_U8 u8GOP, MS_BOOL bEnble);
# 2313 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateWin(MS_U16 width, MS_U16 height, MS_U16 fbFmt);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateWin2(MS_U16 width, MS_U16 height, MS_U16 fbFmt, EN_GOP_FRAMEBUFFER_STRING FBString);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateWin_Assign_FB(MS_U8 u8GOP, MS_U8 FBId, MS_U16 dispX, MS_U16 dispY);
# 2335 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateWin_Assign_32FB(MS_U8 u8GOP, MS_U32 u32FBId, MS_U16 dispX, MS_U16 dispY);
# 2345 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateStaticWin(MS_U8 u8WinId, MS_U16 width, MS_U16 height, MS_U16 fbFmt);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateStaticWin2(MS_U8 u8WinId, MS_U16 width, MS_U16 height, MS_U16 fbFmt, EN_GOP_FRAMEBUFFER_STRING FBString);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateStaticWin_Assign_FB(MS_U8 u8WinId, MS_U8 u8GOP, MS_U8 FBId, MS_U16 dispX, MS_U16 dispY);
# 2369 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateStaticWin_Assign_32FB(MS_U8 u8WinId, MS_U8 u8GOP, MS_U32 u32FBId, MS_U16 dispX, MS_U16 dispY);
# 2380 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_IsGwinExist(MS_U8 gId);






DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetFreeWinID(void);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetMAXWinID(void);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetCurrentWinId(void);





DLL_PUBLIC MS_U16 MApi_GOP_GWIN_GetMaxActiveGwin_v(void);





DLL_PUBLIC MS_U16 MApi_GOP_GWIN_Get_HSTART(void);







DLL_PUBLIC MS_U16 MApi_GOP_GWIN_GetActiveGWIN(void);





DLL_PUBLIC MS_U16 MApi_GOP_GWIN_GetMaxVEnd(MS_BOOL bActive);





DLL_PUBLIC MS_BOOL MApi_GOP_GWIN_IsAllGWINDisabled(void);







DLL_PUBLIC MS_BOOL MApi_GOP_GWIN_IsGWINEnabled(MS_U8 winId);





DLL_PUBLIC MS_BOOL MApi_GOP_GWIN_IsEnabled(void);





DLL_PUBLIC MS_BOOL MApi_GOP_GWIN_CheckOpmodeIsOn(void);





DLL_PUBLIC SYMBOL_WEAK MS_BOOL MApi_GOP_GWIN_CheckOpmodeIsOn_EX(MS_U8 u8GOP);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetResolution(MS_U8 u8GwinId, MS_U8 u8FbId, GOP_GwinInfo* pGwinInfo, GOP_StretchInfo* pStretchInfo, EN_GOP_STRETCH_DIRECTION direction, MS_U16 u16DstWidth, MS_U16 u16DstHeight);
# 2476 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetResolution_32FB(MS_U8 u8GwinId, MS_U32 u32FbId, GOP_GwinInfo* pGwinInfo, GOP_StretchInfo* pStretchInfo, EN_GOP_STRETCH_DIRECTION direction, MS_U16 u16DstWidth, MS_U16 u16DstHeight);





DLL_PUBLIC void MApi_GOP_Exit(void);
# 2493 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_FB_SEL(MS_U8 u8FB);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetDoubleHeap(MS_U32 u32DblHeapAdr, MS_U32 u32DblHeapLen);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_MapFB2Win(MS_U8 fbId, MS_U8 gwinId);
# 2517 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Map32FB2Win(MS_U32 u32fbId, MS_U8 u8gwinId);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Switch2FB(MS_U8 fbId);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Switch2_32FB(MS_U32 u32fbId);





DLL_PUBLIC MS_BOOL MApi_GOP_Switch_GWIN_2_FB(MS_U8 gWinId, MS_U8 fbId, MS_U16 u16WaitTagID, MS_U16 *pU16QueueCnt);
# 2546 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_BOOL MApi_GOP_Switch_GWIN_2_32FB(MS_U8 gWinId, MS_U32 u32fbId, MS_U32 u32WaitTagID, MS_U32 *pU32QueueCnt);
# 2556 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_BOOL MApi_GOP_Switch_GWIN_2_FB_BY_ADDR(MS_U8 gWinId, MS_U32 u32FlipAddr, MS_U16 u16WaitTagID, MS_U16 *pU16QueueCnt);
#else
DLL_PUBLIC MS_BOOL MApi_GOP_Switch_GWIN_2_FB_BY_ADDR(MS_U8 gWinId, MS_PHY phyFlipAddr, MS_U16 u16WaitTagID, MS_U16 *pU16QueueCnt);
#endif
# 2571 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_BOOL MApi_GOP_Switch_3DGWIN_2_FB_BY_ADDR(MS_U8 gWinId, MS_U32 u32MainFlipAddr, MS_U32 u32SubFlipAddr, MS_U16 u16WaitTagID, MS_U16 *pU16QueueCnt);
#else
DLL_PUBLIC MS_BOOL MApi_GOP_Switch_3DGWIN_2_FB_BY_ADDR(MS_U8 gWinId, MS_PHY phyMainFlipAddr, MS_PHY phySubFlipAddr, MS_U16 u16WaitTagID, MS_U16 *pU16QueueCnt);
#endif
# 2585 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_BOOL MApi_GOP_Switch_Multi_GWIN_2_FB_BY_ADDR(GOP_MultiFlipInfo GopMultiFlipInfo);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_DeleteFB(MS_U8 fbId);
# 2602 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Delete32FB(MS_U32 u32fbId);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetFBRegion(MS_U8 fbID, MS_U16 *pX,MS_U16 *pY, MS_U16 *pW, MS_U16 *pH);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Get32FBRegion(MS_U32 u32fbID, MS_U16 *pX, MS_U16 *pY, MS_U16 *pW, MS_U16 *pH);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetFBPosition(MS_U8 fbID, MS_U16 *pX,MS_U16 *pY);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Get32FBPosition(MS_U32 u32fbID, MS_U16 *pX, MS_U16 *pY);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetFBInfo(MS_U8 fbId, GOP_GwinFBAttr *fbAttr);
# 2644 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set32FBInfo(MS_U32 u32fbId, GOP_GwinFBAttr *fbAttr);
# 2654 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetFBInfo(MS_U8 fbId, GOP_GwinFBAttr *fbAttr);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Get32FBInfo(MS_U32 u32fbId, GOP_GwinFBAttr *fbAttr);





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetFBAddr(MS_U8 fbID, MS_U32 *pAddr);
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_GetFBAddr(MS_U8 fbID, MS_PHY *pAddr);
#endif





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Get32FBAddr(MS_U32 u32fbID, MS_U32 *pAddr);
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Get32FBAddr(MS_U32 u32fbID, MS_PHY *pAddr);
#endif






DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_ClearFlipQueue(MS_U8 gWinId);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetMaxFBNum(void);






DLL_PUBLIC MS_U32 MApi_GOP_GWIN_GetMax32FBNum(void);





DLL_PUBLIC MS_U8 MApi_GOP_FB_Get(void);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetMAXFBID(void);





DLL_PUBLIC MS_U32 MApi_GOP_GWIN_GetMAX32FBID(void);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_DestroyFB(MS_U8 fbId);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Destroy32FB(MS_U32 u32fbId);





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFBFrom3rdSurf(MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_U32 u32FbAddr, MS_U16 pitch, MS_U8* ret_FBId);
#else
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFBFrom3rdSurf(MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_PHY phyFbAddr, MS_U16 pitch, MS_U8* ret_FBId);
#endif
# 2753 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FBFrom3rdSurf(MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_U32 u32FbAddr, MS_U16 pitch, MS_U32* u32ret_FBId);
#else
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FBFrom3rdSurf(MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_PHY phyFbAddr, MS_U16 pitch, MS_U32* u32ret_FBId);
#endif





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFBbyStaticAddr(MS_U8 fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_U32 u32FbAddr );
#else
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFBbyStaticAddr(MS_U8 fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_PHY phyFbAddr );
#endif
# 2782 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FBbyStaticAddr(MS_U32 u32fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_U32 u32FbAddr);
#else
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FBbyStaticAddr(MS_U32 u32fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_PHY phyFbAddr);
#endif





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFBbyStaticAddr2(MS_U8 fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_U32 u32FbAddr, EN_GOP_FRAMEBUFFER_STRING FBString);
#else
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFBbyStaticAddr2(MS_U8 fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_PHY phyFbAddr, EN_GOP_FRAMEBUFFER_STRING FBString);
#endif





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FBbyStaticAddr2(MS_U32 u32fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_U32 u32FbAddr ,EN_GOP_FRAMEBUFFER_STRING FBString);
#else
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FBbyStaticAddr2(MS_U32 u32fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt, MS_PHY phyFbAddr ,EN_GOP_FRAMEBUFFER_STRING FBString);
#endif





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFB2(MS_U8 FBId,MS_U16 x, MS_U16 y, MS_U16 width, MS_U16 height, MS_U16 fbFmt);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FB2(MS_U32 u32FBId, MS_U16 x, MS_U16 y, MS_U16 width, MS_U16 height, MS_U16 fbFmt);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFB2_EXT(MS_U8 FBId, MS_U16 x, MS_U16 y, MS_U16 width, MS_U16 height, MS_U16 fbFmt, EN_GOP_FRAMEBUFFER_STRING FBString);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FB2_EXT(MS_U32 u32FBId, MS_U16 x, MS_U16 y, MS_U16 width, MS_U16 height, MS_U16 fbFmt, EN_GOP_FRAMEBUFFER_STRING FBString);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetCurrentFBID(void);





DLL_PUBLIC MS_U32 MApi_GOP_GWIN_GetCurrent32FBID(void);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetFBfromGWIN(MS_U8 gwinId) ;






DLL_PUBLIC MS_U32 MApi_GOP_GWIN_Get32FBfromGWIN(MS_U8 gwinId);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_IsFBExist(MS_U8 fbId);
# 2873 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Is32FBExist(MS_U32 u32fbId);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_GetFreeFBID(void);





DLL_PUBLIC MS_U32 MApi_GOP_GWIN_GetFree32FBID(void);





DLL_PUBLIC MS_U8 MApi_GOP_GWIN_CreateFB(MS_U8 fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt);
# 2907 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC MS_U8 MApi_GOP_GWIN_Create32FB(MS_U32 u32fbId, MS_U16 dispX, MS_U16 dispY, MS_U16 width, MS_U16 height, MS_U16 fbFmt);





DLL_PUBLIC MS_U16 MApi_GOP_GWIN_GetFBFmt(MS_U8 fbId);





DLL_PUBLIC MS_U16 MApi_GOP_GWIN_Get32FBFmt(MS_U32 u32fbId);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetPaletteOpt( GOP_PaletteEntry *pPalArray, MS_U16 u32PalStart, MS_U16 u32PalEnd, EN_GOP_PALETTE_TYPE ePalType);
# 2940 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetPaletteOpt_EX(MS_U8 u8GOP,GOP_PaletteEntry *pPalArray, MS_U16 u32PalStart, MS_U16 u32PalEnd, EN_GOP_PALETTE_TYPE ePalType);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_SetPaletteRead(EN_GOP_PALETTE_READTYPE type);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetPaletteRead_EX(MS_U8 u8GOP,EN_GOP_PALETTE_READTYPE type);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_ReadPalette(MS_U8 idx, MS_U32* clr);
# 2969 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_ReadPalette_EX(MS_U8 u8GOP,MS_U8 idx, MS_U32* clr);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_2GSetPaletteOpt(GOP_PaletteEntry *pPalArray, MS_U16 u32PalStart, MS_U16 u32PalEnd);
# 2986 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_2GSetPaletteOpt_EX(MS_U8 u8GOP,GOP_PaletteEntry *pPalArray, MS_U16 u32PalStart, MS_U16 u32PalEnd);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_2GSetPaletteRead(EN_GOP_PALETTE_READTYPE type);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_2GSetPaletteRead_EX(MS_U8 u8GOP,EN_GOP_PALETTE_READTYPE type);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_2GReadPalette(MS_U8 idx, MS_U32* clr);
# 3015 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_2GReadPalette_EX(MS_U8 u8GOP,MS_U8 idx, MS_U32* clr);
# 3029 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_Init(void);
# 3038 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetSourceSel(EN_GOP_DWIN_SRC_SEL enSrcSel);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_CaptureOneFrame2(void);
# 3064 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_EnableIntr(MS_U16 u8mask, MS_BOOL bEnable);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_CaptureOneFrame(void);
# 3081 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_Enable(MS_BOOL bEnable);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_GetWinProperty(GOP_DwinProperty *pproperty);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetWinProperty(GOP_DwinProperty *pproperty);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SelectSourceScanType(EN_GOP_DWIN_SCAN_MODE enScanMode);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetDataFmt(EN_GOP_DWIN_DATA_FMT fmt);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetAlphaValue(MS_U8 u8AlphaVal);
# 3127 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetAlphaSrc(EN_GOP_DWIN_ALPHA_SRC source);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetAlphaInverse(MS_BOOL bEnable);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetUVSample(EN_GOP_DWIN_UVSAMPLE_Mode mode);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetSkipFrame(MS_U32 framecount);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_ClearIntr(MS_U16 u8mask);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_GetDWinIntInfo(GOP_DWinIntInfo *pDWinIntInfo);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_GetDWinIntInfoTimeout(GOP_DWinIntInfo *pDWinIntInfo, MS_U32 u32Timeout);





DLL_PUBLIC E_GOP_API_Result MApi_GOP_SetClkForCapture(void);





DLL_PUBLIC MS_U16 MApi_GOP_DWIN_GetIntrStatus(void);






DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_EnableR2YCSC(MS_BOOL bEnable);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetUVSwap(MS_BOOL bEnable);
# 3209 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_BeginDraw(void);







DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_EndDraw(void);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_LockForForceWrite(MS_BOOL bLock);
# 3237 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Enable_BGWIN(MS_U8 bgwID, MS_BOOL bEnable);
# 3251 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_BGWIN(MS_U8 bgwID, MS_U16 x0, MS_U16 y0, MS_U16 w, MS_U16 h, MS_U16 color);
# 3261 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_Set_BGWIN_Alpha(MS_U8 bgwID, MS_BOOL bEnable, MS_U8 alpha);
# 3272 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetBufferPINPON(MS_U32 u32fbaddr0,MS_U32 u32fbaddr1);
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_DWIN_SetBufferPINPON(MS_PHY phyfbaddr0,MS_PHY phyfbaddr1);
#endif
# 3288 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_RegisterFBFmtCB(MS_U32 (*fpGOP_CB)(MS_U16 pitch,MS_U32 addr , MS_U16 fmt ) );
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_RegisterFBFmtCB(MS_U32 (*fpGOP_CB)(MS_U16 pitch,MS_PHY addr , MS_U16 fmt ) );
#endif







DLL_PUBLIC E_GOP_API_Result MApi_GOP_RegisterXCIsInterlaceCB(MS_BOOL (*fpGOP_CB)(void));







DLL_PUBLIC E_GOP_API_Result MApi_GOP_RegisterXCGetCapHStartCB(MS_U16 (*fpGOP_CB)(void));
# 3317 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_RegisterXCReduceBWForOSDCB(void (*fpGOP_CB)(MS_U8 PqWin, MS_BOOL enable));







DLL_PUBLIC E_GOP_API_Result MApi_GOP_RegisterEventNotify(void (*fpGOP_CB)(MS_U32 u32EventID, void* reserved0));
# 3334 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC E_GOP_API_Result MApi_GOP_RegisterXCSetDwinInfo(MS_BOOL (*fpGOP_CB)(MS_U16 cmd,MS_U32 *arg,MS_U16 size));






#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC E_GOP_API_Result MApi_GOP_OC_SetOCFBinfo(MS_PHYADDR u32Addr, EN_GOP_OC_SEL_TYPE BankMode, MS_U32 enBufSize);
#else
DLL_PUBLIC E_GOP_API_Result MApi_GOP_OC_SetOCFBinfo(MS_PHY phyAddr, EN_GOP_OC_SEL_TYPE BankMode, MS_U32 enBufSize);
#endif
# 3357 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetGPUTile(MS_U8 u8win, EN_GOP_GPU_TILE_MODE TileMode);





#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_TLB_Enable(MS_U8 u8GOP,MS_BOOL bEnable, MS_U32 tlbaddr);
#else
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_TLB_Enable(MS_U8 u8GOP,MS_BOOL bEnable, MS_PHY phytlbaddr);
#endif






DLL_PUBLIC E_GOP_API_Result MApi_GOP_GWIN_UpdateRegOnce(MS_BOOL bWriteRegOnce);





DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_SetMux(GOP_MuxConfig * pGopMuxConfig, MS_U32 u32SizeOfMuxInfo);





DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_GWIN_OutputLayerSwitch(MS_U8 u8GOP);
# 3395 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP.h"
DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_MultiWin_ColorKey(MS_U8 mwinId, EN_GOP_MULTIWIN_COLOR_MODE eMultiWinType, GOP_MULTIWIN_COLORKEY* pGOP_WinColorKey);







DLL_PUBLIC SYMBOL_WEAK E_GOP_API_Result MApi_GOP_MultiWin_FrameColor(EN_GOP_MULTIWIN_COLOR_MODE eMultiWinType, GOP_MULTIWIN_FRAMECOLOR* pGOP_WinFrameColor);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSMBX.h"
#ifndef __DRV_SMBX_H__
#define __DRV_SMBX_H__ 



#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
# 123 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSMBX.h"
#define SMBX_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'S','M','B','X'}, \
    {'0','1'}, \
    {'0','1'}, \
    {'0','0','3','9','7','8','9','4'}, \
    MSIF_OS

enum
{
 CMD_PM_INIT = 0x01,
 CMD_PM_POWERDOWN,
 CMD_SECUREBOOT_GETKEY0,
    CMD_SECUREBOOT_AES_ENCODE,
    CMD_SECUREBOOT_AES_DECODE,
    CMD_SECUREBOOT_GETKEY,
    CMD_SECUREBOOT_GETKEYDONE,
};

enum
{
 TRIGGER_MIPSto51 = 0x01,
 TRIGGER_51toMIPS,
};







typedef enum
{
    E_SMBX_SUCCESS,
    E_SMBX_FAILED,
} SMBX_Result;

typedef struct
{
 MS_BOOL bInitialized;
 MS_S32 s32SMBXLock;
} SMBX_Ctx;





SMBX_Result MDrv_SMBX_Init(void);
SMBX_Result MDrv_SMBX_SendCmd(MS_U16 u16Cmd, MS_U16 *pU16Data, MS_U8 u8Num);
SMBX_Result MDrv_SMBX_Exit(void);
SMBX_Result MDrv_SMBX_GetLibVer(const MSIF_Version **ppVersion);


#ifdef __cplusplus
}
#endif


#endif
# 118 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/cusSAR.h"
#ifndef _DRV_CUS_SAR_H_
#define _DRV_CUS_SAR_H_ 


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"
# 138 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/cusSAR.h"
#define MSIF_CUS_SAR_LIB_CODE {'C','S','A','R'}
#define MSIF_CUS_SAR_LIBVER {'0','3'}
#define MSIF_CUS_SAR_BUILDNUM {'0','9'}
#define MSIF_CUS_SAR_CHANGELIST {'0','0','4','3','3','2','5','1'}

#define CUS_SAR_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_CUS_SAR_LIB_CODE, \
    MSIF_CUS_SAR_LIBVER, \
    MSIF_CUS_SAR_BUILDNUM, \
    MSIF_CUS_SAR_CHANGELIST, \
    MSIF_OS


#define CUS_SAR_VERSION_STRING_MAX 33
#define CUS_SAR_DUMMY_KEY 0xFF
#define CUS_SAR_DUMMY_STATUS 0x00
#define CUS_SAR_VERSION 0x00000001
# 185 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/cusSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_GetKeyCode_Custom(MS_U8 *pu8Key, MS_U8 *pu8Repeat);
# 195 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/cusSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_GetMultiKeyCode_Custom(SAR_KeyValue *sSarKey, MS_U32 u32Size, MS_U8 u8ReplyKey);


#ifdef __cplusplus
}
#endif


#endif
# 88 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
#if defined (MSOS_TYPE_LINUX)
#ifndef FRHSL_H
#define FRHSL_H 





#include "MsTypes.h"

#ifdef __cplusplus
extern "C" {
#endif

#define HSL_TCPIP true



#define HSL_GROUP_MAX 1024
#define HSL_LOG_ID_MAX 1024
#define DEFAULT_GROUP HSL_DBG_SN_ALL_DEBUG



#define HSL_DBG_UTOPIA_ALL_DEBUG (GROUP_MODULE_UTOPIA_ALL<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_UTOPIA_ALL_INFO (GROUP_MODULE_UTOPIA_ALL<<2 | GROUP_LEVEL_INFO)
#define HSL_DBG_UTOPIA_GOP_DEBUG (GROUP_MODULE_UTOPIA_GOP<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_UTOPIA_GOP_INFO (GROUP_MODULE_UTOPIA_GOP<<2 | GROUP_LEVEL_INFO)
#define HSL_DBG_UTOPIA_GE_DEBUG (GROUP_MODULE_UTOPIA_GE<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_UTOPIA_GE_INFO (GROUP_MODULE_UTOPIA_GE<<2 | GROUP_LEVEL_INFO)
#define HSL_DBG_UTOPIA_HSL_DEBUG (GROUP_MODULE_UTOPIA_HSL<<2 | GROUP_LEVEL_DEBUG)



#define HSL_DBG_MW_ALL_DEBUG (GROUP_MODULE_MW_ALL<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_MW_ALL_INFO (GROUP_MODULE_MW_ALL<<2 | GROUP_LEVEL_INFO)
#define HSL_DBG_MW_PGS_DEBUG (GROUP_MODULE_MW_PGS<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_MW_PGS_INFO (GROUP_MODULE_MW_PGS<<2 | GROUP_LEVEL_INFO)
#define HSL_DBG_MW_MHEG5_DEBUG (GROUP_MODULE_MW_MHEG5<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_MW_MHEG5_INFO (GROUP_MODULE_MW_MHEG5<<2 | GROUP_LEVEL_INFO)



#define HSL_DBG_SN_ALL_DEBUG (GROUP_MODULE_SN_ALL<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_SN_ALL_INFO (GROUP_MODULE_SN_ALL<<2 | GROUP_LEVEL_INFO)
#define HSL_DBG_SN_MUF_DEBUG (GROUP_MODULE_SN_MUF<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_SN_MUF_INFO (GROUP_MODULE_SN_MUF<<2 | GROUP_LEVEL_INFO)
#define HSL_DBG_SN_AUTO_TEST_DEBUG (GROUP_MODULE_SN_AUTO_TEST<<2 | GROUP_LEVEL_DEBUG)
#define HSL_DBG_SN_AUTO_TEST_INFO (GROUP_MODULE_SN_AUTO_TEST<<2 | GROUP_LEVEL_INFO)

#define HSL_DBG_SN_PROFILING (GROUP_MODULE_SN_ALL<<2 | GROUP_LEVEL_DEBUG)


#define HSL_GROUP_ID_MAX (HSL_DBG_SN_AUTO_TEST_INFO + 1)

#define HSL_PROFILING_ADD_MODULE_CONSTRUCTOR(_mODULEnAME) \
        void __attribute__ ((constructor)) onLoad_ ## _mODULEnAME (void); \
        \
        void onLoad_ ## _mODULEnAME (void) \
        { \
            Dl_info info; \
            dladdr((const void*)(&onLoad_ ## _mODULEnAME), &info); \
            FrHslAddDynamicLibInfo(info.dli_fbase, info.dli_saddr, info.dli_fname); \
        }


typedef enum
{

    GROUP_MODULE_UTOPIA_ALL = 0x00,
    GROUP_MODULE_UTOPIA_GOP = 0x01,
    GROUP_MODULE_UTOPIA_GE = 0x02,
    GROUP_MODULE_UTOPIA_HSL = 0x03,




    GROUP_MODULE_MW_ALL = 0x80,
    GROUP_MODULE_MW_PGS = 0x81,
    GROUP_MODULE_MW_MHEG5 = 0x82,



    GROUP_MODULE_SN_ALL = 0xC0,
    GROUP_MODULE_SN_MUF = 0xC1,
    GROUP_MODULE_SN_AUTO_TEST = 0xC2,
    GROUP_MODULE_SN_PROFILE = 0xC3


} EN_HSL_GROUP_MODULE;


typedef enum
{
    GROUP_LEVEL_DEBUG = 0x00,
    GROUP_LEVEL_INFO = 0x01,
    GROUP_LEVEL_XXX1 = 0x02,
    GROUP_LEVEL_XXX2 = 0x03,

} EN_HSL_GROUP_LEVEL;



typedef enum
{

    HSL_CMD_TYPE = 0x10,


    HSL_CMD_CARD_STATUS = 0x20,
    HSL_CMD_SEND_DATA = 0x21,
    HSL_CMD_RESET = 0x22,
    HSL_CMD_GROUP_ID_FILTER = 0x23,
    HSL_CMD_LOG_ID_FILTER = 0x24,
    HSL_CMD_ACK_TARGET = 0x25,
    HSL_CMD_RB_TOTAL_SIZE = 0x26,
    HSL_CMD_RB_EXIST_DATA_SIZE = 0x27,
    HSL_CMD_GET_HSL_DATA = 0x28,


    HSL_CMD_END

} EN_HSL_CMD_TYPE;


typedef struct
{
    MS_U32 u32Pid;
    MS_U32 u32Len;
    MS_U16 u16Cmd;
    MS_U8 * pu8Buf;
}CmdInfo;
# 238 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
typedef struct KiSetsFilterMatrixTag
{

    MS_U16 numSets;


    MS_U32 numBases;


    MS_U32 matrixSize;
# 262 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
    MS_U8 matrix[10];

} KiSetsFilterMatrix;
# 274 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
MS_BOOL FrHslInitialise(const MS_PHYADDR PhyAddr, const MS_U32 u32BufByteLen);
MS_BOOL FrHslInitialiseMulti(MS_U8 _ICount, MS_U32 *_params);
MS_BOOL FrHslDynamicLogPointEnable(const MS_U16 lgHdr);
MS_BOOL FrHslDynamicLogPointDisable(const MS_U16 lgHdr);
MS_BOOL FrHslDynamicLogPointEnableAll(void);
MS_BOOL FrHslDynamicLogPointDisableAll(void);
MS_BOOL FrHslDynamicLogGroupEnable(const MS_U16 groupId);
MS_BOOL FrHslDynamicLogGroupDisable(const MS_U16 groupId);
MS_BOOL FrHslDynamicLogGroupEnableAll(void);
MS_BOOL FrHslDynamicLogGroupDisableAll(void);
MS_BOOL FrHslV2ApplySingleLogPointFiltering(const MS_U16 lgHdr, const MS_BOOL enableState);
MS_BOOL FrHslV2ApplyMultipleLogPointsFilter(const MS_U16* lgHdr_p, const MS_BOOL* enableState_p, const MS_U16 sizeArray);
MS_BOOL FrHslV2InitialiseLogPointFiltering(void);
MS_BOOL FrHslV2InitialiseGroupIdFiltering(void);
MS_BOOL FrHslFinalize(void);
void KiTtiProcessSetsFilter(const KiSetsFilterMatrix * signalData);

MS_BOOL FrHslAddDynamicLibInfo(void* baseAddress, void* onLoadAddress, const char *libFileName);
MS_BOOL FrHslAddThreadInfo(const MS_U32 threadId, const char * threadName);

#if 1
MS_BOOL FrHslDynamicLogPointTest(const MS_U16 lgHdr);
#endif

#define M_FrHslWriteSPMsgHeader(value,pu8Buffer,u32Time) FrHslWriteHeader(HSL_RAWLOB_SP, (MS_U16)value, pu8Buffer, u32Time)

#define M_FrHslWriteVLMsgHeader(value,pu8Buffer,u32Time) FrHslWriteHeader(HSL_RAWLOB_VL, (MS_U16)value, pu8Buffer, u32Time)

#define M_FrHslWritePacketCounts(value,pu8Buffer) FrHslWritePayload(FALSE, value, pu8Buffer)

#define M_FrHslWritePayload(value,pu8Buffer) FrHslWritePayload(FALSE, value, pu8Buffer)

#define M_FrHslWriteLastPayload(value,pu8Buffer) FrHslWritePayload(TRUE, value, pu8Buffer)


#define HSL_SPLIT_INT32(a) (a>>16),(a)
# 321 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf0(const MS_U32 u32Id, const MS_U16 u16GId, const char* u8Fmt);
# 330 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf1(const MS_U32 u32Id, const MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1);
# 341 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf2(const MS_U32 u32Id, const MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2);
# 353 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf3(const MS_U32 u32Id, const MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2,const MS_U16 u16Arg3);
# 366 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf4(const MS_U32 u32Id, const MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4);
# 379 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf5(const MS_U32 u32Id, const MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5);
# 393 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf6(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1 , const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5, const MS_U16 u16Arg6);
# 409 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf7(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7);
# 427 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf8(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8);
# 446 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf9(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9);
# 466 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf10(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9, const MS_U16 u16Arg10);
# 487 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf11(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9, const MS_U16 u16Arg10,
                                    const MS_U16 u16Arg11);
# 510 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf12(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9, const MS_U16 u16Arg10,
                                    const MS_U16 u16Arg11 , const MS_U16 u16Arg12);
# 534 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf13(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9, const MS_U16 u16Arg10,
                                    const MS_U16 u16Arg11 , const MS_U16 u16Arg12, const MS_U16 u16Arg13);
# 559 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf14(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9, const MS_U16 u16Arg10,
                                    const MS_U16 u16Arg11 , const MS_U16 u16Arg12, const MS_U16 u16Arg13, const MS_U16 u16Arg14);
# 585 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf15(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9, const MS_U16 u16Arg10,
                                    const MS_U16 u16Arg11 , const MS_U16 u16Arg12, const MS_U16 u16Arg13, const MS_U16 u16Arg14, const MS_U16 u16Arg15);
# 612 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslPrintf16(MS_U32 u32Id, MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Arg1, const MS_U16 u16Arg2, const MS_U16 u16Arg3, const MS_U16 u16Arg4, const MS_U16 u16Arg5,
                                    const MS_U16 u16Arg6, const MS_U16 u16Arg7 , const MS_U16 u16Arg8, const MS_U16 u16Arg9, const MS_U16 u16Arg10,
                                    const MS_U16 u16Arg11 , const MS_U16 u16Arg12, const MS_U16 u16Arg13, const MS_U16 u16Arg14, const MS_U16 u16Arg15, const MS_U16 u16Arg16);
# 623 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslString(const MS_U16 u16Id, const MS_U16 u16GId, const char* u8fmt, const void* pArray);
# 633 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslArray16(const MS_U16 u16Id, const MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Length, const void* pArray);
# 644 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void M_FrHslArray32(const MS_U16 u16Id, const MS_U16 u16GId, const char* u8Fmt, const MS_U16 u16Length, const void* pArray, const MS_BOOL bLastWordEmpty);
# 654 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL.h"
void FrHslTypedefCall(const MS_U16 u16Id, const MS_U16 u16GId, const MS_U16 u16Length, const void* pArray, const MS_BOOL bOddBytePresent);

#define M_FrHslTypedef(u16Id,u16GId,u8Fmt,type,pArray) \
{ \
   FrHslTypedefCall(u16Id, u16GId, sizeof(type)/sizeof(MS_U16) + sizeof(type)%sizeof(MS_U16), pArray, (MS_BOOL)(sizeof(type)%sizeof(MS_U16))); \
}



#ifdef __cplusplus
}
#endif

#endif
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMAPool_v2.h"
#ifndef _DRVCMAPOOL_H_
#define _DRVCMAPOOL_H_ 


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"

#if 1
#define CMA_FLAG_MAP_VMA (1UL<<0)
#define CMA_FLAG_CACHED (1UL<<1)
#define CMA_FLAG_VIRT_ADDR (1UL<<2)
#define CMA_FLAG_MTLB_POOL (1UL<<3)
#endif
# 128 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMAPool_v2.h"
enum ion_heap_ids {
    INVALID_HEAP_ID = -1,


    ION_SYSTEM_HEAP_ID = 0,


    ION_SYSTEM_CONTIG_HEAP_ID = 1,


    ION_CARVEOUT_HEAP_ID = 2,


    ION_CHUNK_HEAP_ID = 3,


    ION_DMA_HEAP_ID = 4,




    ION_CMA_HEAP_ID_START = 15,


 ION_MALI_MIUO_HEAP_ID = 16,
 ION_MALI_MIU1_HEAP_ID = 17,
 ION_MALI_MIU2_HEAP_ID = 18,


 ION_VDEC_HEAP_ID = 19,


#if defined(CHIP_MONET)
        ION_XC_HEAP_ID = 20,
#else
        ION_XC_HEAP_ID = 22,
#endif

    ION_HEAP_ID_RESERVED = 31
};




struct CMA_Pool_Alloc_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_SIZE length;
    MS_U32 flags;
    MS_VIRT virt_addr;
};

struct CMA_Pool_Free_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_SIZE length;
};

struct CMA_Pool_Init_Param
{
    MS_U32 heap_id;

    MS_U64 mtlb_addrspace_offset;
    MS_U64 mtlb_addrspace_len;



    MS_VIRT flags;


    MS_U32 pool_handle_id;
    MS_U32 miu;
    MS_U64 heap_miu_start_offset;
    MS_SIZE heap_length;
    MS_VIRT virt_addr;
};





MS_BOOL __attribute__((weak)) MApi_CMA_Pool_Init(struct CMA_Pool_Init_Param * Init_Param);
MS_BOOL __attribute__((weak)) MApi_CMA_Pool_Release(MS_U32 pool_handle_id);
MS_BOOL __attribute__((weak)) MApi_CMA_Pool_GetMem(struct CMA_Pool_Alloc_Param * alloc_param);
MS_BOOL __attribute__((weak)) MApi_CMA_Pool_PutMem(struct CMA_Pool_Free_Param * free_param);

#ifdef __cplusplus
}
#endif

#endif
# 99 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN_EX.h"
#ifndef APIXC_DWIN_EX_H
#define APIXC_DWIN_EX_H 


#include "MsCommon.h"


#include "apiXC_EX.h"

#ifdef __cplusplus
extern "C"
{
#endif




#ifdef APIXC_DWIN_EX_C
#define INTERFACE 
#else
#define INTERFACE extern
#endif

#define XC_DIP_EX_MAX_BUFF_CNT 8UL
#define XC_DIP_EX_AUTO_BUFF_CNT 0UL

typedef enum
{
    E_XC_DIP_EX_DIP_WINDOW = 0,
    E_XC_DIP_EX_MAX_WINDOW
} XC_DIP_EX_WIN;

typedef enum
{
    E_XC_DIP_EX_RGB_SWAPTO_BGR = 0,
    E_XC_DIP_EX_RGB_SWAP_MAX
} XC_DIP_EX_RGB_SWAP_TYPE;


typedef enum
{

    E_XC_DIP_EX_DATA_FMT_YUV422 = 0,

    E_XC_DIP_EX_DATA_FMT_RGB565,

    E_XC_DIP_EX_DATA_FMT_ARGB8888,

    E_XC_DIP_EX_DATA_FMT_YUV420,
    E_XC_DIP_EX_DATA_FMT_MAX
} XC_DIP_EX_DATA_FMT;


typedef enum
{

    E_XC_DIP_EX_SCAN_MODE_PROGRESSIVE,

    E_XC_DIP_EX_SCAN_MODE_extern,
} XC_DIP_EX_SCAN_MODE;

typedef enum
{
 E_XC_DIP_EX_CAP_NOT_EXIST = 0x0,
 E_XC_DIP_EX_CAP_EXIST = 0x1,
 E_XC_DIP_EX_CAP_420TILE = 0x2,
 E_XC_DIP_EX_CAP_SCALING_DOWN = 0x4,
 E_XC_DIP_EX_CAP_MIRROR = 0x8,
 E_XC_DIP_EX_CAP_DIPR = 0x10,
 E_XC_DIP_EX_CAP_R2Y = 0x20,
    E_XC_DIP_EX_CAP_OP1_CAPTURE = 0x40,
} XC_DIP_EX_CAP;

typedef enum
{
    E_XC_DIP_EX_VOP2 =0x00,
    E_XC_DIP_EX_OP2 =0x01,
    E_XC_DIP_EX_VIP =0x02,
    E_XC_DIP_EX_BRI =0x03,
} XC_DIP_EX_OP_CAPTURE;

typedef struct
{
    MS_U8 u8BufCnt;
    MS_PHY u32YBuf[XC_DIP_EX_MAX_BUFF_CNT];
    MS_PHY u32CBuf[XC_DIP_EX_MAX_BUFF_CNT];
} XC_DIP_EX_BUFFER_INFO;

typedef struct
{
    XC_DIP_EX_WIN eWindow;
    MS_U32 u32DipChipCaps;
} XC_DIP_EX_CHIPCAPS;

typedef struct
{
    MS_U8 u8BufCnt;
    MS_U16 u16Width;
    MS_U16 u16Height;
 MS_U16 u16Pitch;
    MS_PHY u32BufStart;
    MS_PHY u32BufEnd;
    XC_DIP_EX_SOURCE_TYPE enSource;
} XC_DIP_EX_WINPROPERTY;

typedef struct
{
    MS_U16 u16Width;
    MS_U16 u16Height;
 MS_U16 u16Pitch;
    MS_PHY u32YBufAddr;
    MS_PHY u32CBufAddr;
    XC_DIP_EX_DATA_FMT enDataFmt;
}XC_DIP_EX_DIPR_PROPERTY;

XC_EX_RETURN_VALUE MApi_XC_DIP_EX_InitByDIP(XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetFrameBufferAddress(MS_PHY u32FBAddress, MS_PHY u32FBSize, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetInputSource(XC_EX_INPUT_SOURCE_TYPE enInputSourceType, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_GetInputSource(XC_EX_INPUT_SOURCE_TYPE *enInputSourceType, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_DisableInputSource(MS_BOOL bDisable, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetWindow(XC_EX_SETWIN_INFO *pstXC_SetWin_Info, MS_U32 u32InitDataLen, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_GetDEWindow(XC_EX_WINDOW_TYPE *psWin, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetCaptureWindowVstart(MS_U16 u16Vstart, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetCaptureWindowHstart(MS_U16 u16Hstart, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetCaptureWindowVsize(MS_U16 u16Vsize, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetCaptureWindowHsize(MS_U16 u16Hsize, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_GetCaptureWindow(XC_EX_WINDOW_TYPE* capture_win, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_EnableR2Y(MS_BOOL benable, XC_DIP_EX_WIN eWindow);


XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SWReset(XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_FrameRateCtrl(MS_BOOL bEnable,MS_U16 u16In,MS_U16 u16Out, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_CapOneFrame(XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_CapOneFrameFast(XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetPinpon(MS_BOOL bPinpon,MS_PHY u32PinponAddr,XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_ClearInt(MS_U16 u8mask, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_Ena(MS_BOOL bEnable, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_EnaInt(MS_U16 u8mask, MS_BOOL bEnable, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetSourceScanType(XC_DIP_EX_SCAN_MODE enScanMode, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_EnaInterlaceWrite(MS_BOOL bEnable, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetOutputDataFmt(XC_DIP_EX_DATA_FMT fmt, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetDIPWinProperty(XC_DIP_EX_WINPROPERTY *pstDIPWinProperty, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_EnableY2R(MS_BOOL bEnable, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetAlpha(MS_U8 u8AlphaVal, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SwapUV(MS_BOOL bEnable, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SwapYC(MS_BOOL bEnable, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SwapRGB(MS_BOOL bEnable, XC_DIP_EX_RGB_SWAP_TYPE enSwapType, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetWinProperty_Ex(MS_U8 u8BufCnt ,MS_U16 u16Width, MS_U16 u16Height, MS_PHY u32BufStart ,MS_PHY u32BufEnd, XC_DIP_EX_SOURCE_TYPE eSource,XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetOutputCapture(MS_BOOL bEnable, XC_DIP_EX_OP_CAPTURE eOpCapture, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetMirror(MS_BOOL bHMirror, MS_BOOL bVMirror, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_SetDIPRProperty(XC_DIP_EX_DIPR_PROPERTY *pstDIPRProperty, XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_InterruptAttach(InterruptCb pIntCb,XC_DIP_EX_WIN eWindow);
XC_EX_RETURN_VALUE MApi_XC_DIP_EX_InterruptDetach(XC_DIP_EX_WIN eWindow);

MS_U16 MApi_XC_DIP_EX_GetIntStatus(XC_DIP_EX_WIN eWindow);
XC_DIP_EX_BUFFER_INFO MApi_XC_DIP_EX_GetBufInfo(XC_DIP_EX_WIN eWindow);

#undef INTERFACE

#ifdef __cplusplus
}
#endif
#endif
# 103 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/asmCPU.h"
#ifndef _ASM_CPU_H_
#define _ASM_CPU_H_ 



#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
# 126 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/asmCPU.h"
#if defined(__MIPS16E__)
#define ATTRIBUTE __attribute__((nomips16))
#else
#define ATTRIBUTE 
#endif
# 149 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/asmCPU.h"
void ATTRIBUTE MAsm_CPU_Sync(void);




void ATTRIBUTE MAsm_CPU_Nop(void);




void ATTRIBUTE MAsm_CPU_SwDbgBp(void);




void ATTRIBUTE MAsm_CPU_SwDbgBp(void);




void ATTRIBUTE MAsm_CPU_PowerDown(void);




void ATTRIBUTE MAsm_CPU_StatusBEV(MS_BOOL bBEV);




void ATTRIBUTE MAsm_CPU_Jump(MS_U32 u32PC);




MS_U8 ATTRIBUTE MAsm_CPU_GetTrailOne(MS_U32 u32Flags);




void ATTRIBUTE MAsm_CPU_EnableTimerInterrupt(MS_BOOL bEnable);




void ATTRIBUTE MAsm_CPU_DelayMs(MS_U32 msec);




void ATTRIBUTE MAsm_CPU_DelayUs(MS_U32 usec);




void ATTRIBUTE MAsm_CPU_SetEBASE(MS_U32 u32addr);




MS_U32 ATTRIBUTE MAsm_GetSystemTime (void);




void ATTRIBUTE MAsm_CPU_TimerInit(void);

#ifdef __cplusplus
}
#endif

#endif
# 98 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_VMark_EX.h"
#ifndef _API_XC_VMARK_EX_H_
#define _API_XC_VMARK_EX_H_ 

#include "MsCommon.h"


#include "drvXC_IOPort_EX.h"


#include "apiXC_EX.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_VMark_EX.h"
#define XC_EX_VMARK_PARAMETER_VERSION 1





typedef struct __attribute__((packed))
{

    MS_U32 u32XC_VMark_version;
    MS_U32 u32XC_VMarK_Length;

    MS_U8 u8WatermarkOn;
    MS_U8 u8FrequencyDistance[3][3];
    MS_U8 u8BackgroundEmbeddingOn;
    MS_U16 u16EmbeddingStrengthThreshold[48];
    MS_U16 u16EmbeddingStrengthThresholdBG[48];
    MS_U16 u16DirectionMax;
    MS_S8 s8StrengthMultiply;

    MS_U8 u8PayloadSymbols[1920];
    MS_U8 u8SymbolsRows;
    MS_U8 u8SymbolsCols;
    MS_U8 u8SymbolsXpos;
    MS_U8 u8SymbolsYpos;
    MS_U8 u8SymbolSize;
    MS_U16 u16SpacingVert;
    MS_U16 u16SpacingHorz;
    MS_U8 u8SymbolScaleControl;
}XC_EX_VMARK_PARAMETER;





#ifdef UFO_XC_VMARK





DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_VMark_SetParameters(XC_DEVICE_ID *pDeviceId, MS_U8 u8ServiceIndex, XC_EX_VMARK_PARAMETER *pstXC_VMarkParameters);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPVR_IframeLUT.h"
#ifndef _DRV_PVR_IframeLUT_H_
#define _DRV_PVR_IframeLUT_H_ 

#include "MsTypes.h"

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum
{
    E_PVR_IFRAMELUT_RESULT_FAIL = 0,
    E_PVR_IFRAMELUT_RESULT_OK,
    E_PVR_IFRAMELUT_RESULT_INVALID_PARAM,
    E_PVR_IFRAMELUT_RESULT_FUNC_ERROR,
    E_PVR_IFRAMELUT_RESULT_NOT_SUPPORT,
} EN_PVR_IFRAMELUT_RESULT;

typedef enum
{
    E_PVR_IFRAMELUT_DBG_RELEASE = 0,
    E_PVR_IFRAMELUT_DBG_ERR,
    E_PVR_IFRAMELUT_DBG_INFO,
} EN_PVR_IFRAMELUT_DBGLEVEL;

typedef enum
{
    E_PVR_IFRAMELUT_VDEC_TYPE_MPEG = 1,
    E_PVR_IFRAMELUT_VDEC_TYPE_H264,
    E_PVR_IFRAMELUT_VDEC_TYPE_HEVC,
    E_PVR_IFRAMELUT_VDEC_TYPE_AVS,
    E_PVR_IFRAMELUT_VDEC_TYPE_INVALID,
} EN_PVR_IFRAMELUT_VDEC_TYPE;

typedef struct DLL_PACKED
{
    MS_U32 u32CfgDataSize;
    MS_U32 u32PvrEng;
    MS_U32 u32BufferStartAddr;
    MS_U32 u32BufferSize;
    EN_PVR_IFRAMELUT_VDEC_TYPE eVdecType;

} PVR_IFRAMELUT_Cfg;

EN_PVR_IFRAMELUT_RESULT MDrv_PVR_IframeLUT_Init(void);
EN_PVR_IFRAMELUT_RESULT MDrv_PVR_IframeLUT_Open(PVR_IFRAMELUT_Cfg *pstPVR_IframeLUTCfg);
EN_PVR_IFRAMELUT_RESULT MDrv_PVR_IframeLUT_SetVdecType(MS_U32 u32PvrEng, EN_PVR_IFRAMELUT_VDEC_TYPE eVdecType);
EN_PVR_IFRAMELUT_RESULT MDrv_PVR_IframeLUT_GetWritePtr(MS_U32 u32PvrEng, MS_U32 *pu32WritePtr);
EN_PVR_IFRAMELUT_RESULT MDrv_PVR_IframeLUT_Close(MS_U32 u32PvrEng);
EN_PVR_IFRAMELUT_RESULT MDrv_PVR_IframeLUT_Exit(void);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMS.h"
#ifndef _API_DMS_H_
#define _API_DMS_H_ 

#include "MsCommon.h"
#include "apiDMS_Type.h"

#ifdef __cplusplus
extern "C" {
#endif
#include "UFO.h"



EN_DMS_RESULT MApi_DMS_Init(ST_DMS_INITDATA *pstDMS_InitData, MS_U32 u32InitDataLen);

EN_DMS_RESULT MApi_DMS_CreateWindow(ST_DMS_WINDOW stOutputWin, MS_U32 u32ZOrder, MS_U32* pu32WindowID);

EN_DMS_RESULT MApi_DMS_Connect(MS_U32 u32WindowID, MS_U32 enInputSourceType, ST_DMS_DISPFRAMEFORMAT* pstDispFrameFormat);

EN_DMS_RESULT MApi_DMS_DisConnect(MS_U32 u32WindowID);

EN_DMS_RESULT MApi_DMS_DestroyWindow(MS_U32 u32WindowID);

EN_DMS_RESULT MApi_DMS_SetWindow(MS_U32 u32WindowID, ST_DMS_SETWIN_INFO *pstDMS_SetWin_Info, MS_U32 u32InfoDataLen);

EN_DMS_RESULT MApi_DMS_GetWindowInfo(MS_U32 u32WindowID, ST_DMS_GETWIN_INFO *pstDMS_GetWin_Info, MS_U32 u32InfoDataLen);

EN_DMS_RESULT MApi_DMS_Video_Flip(MS_U32 u32WindowID, ST_DMS_DISPFRAMEFORMAT* pstDispFrameFormat, MS_U32 u32InfoDataLen);

EN_DMS_RESULT MApi_DMS_SetZOrder(MS_U32 u32WindowID, MS_U32 u32ZOrder);

EN_DMS_RESULT MApi_DMS_Video_Freeze(MS_U32 u32WindowID, MS_U32 u32Enable);

EN_DMS_RESULT MApi_DMS_Video_Mute(MS_U32 u32WindowID, MS_U32 u32Enable);

EN_DMS_RESULT MApi_DMS_Set_MuteColor(MS_U32 u32WindowID, ST_DMS_COLOR stMuteColor);

EN_DMS_RESULT MApi_DMS_GetStatus(EN_DMS_STATUS *peStatus);


#ifdef __cplusplus
}
#endif

#endif
# 139 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
#ifndef _DRV_DTMB_H_
#define _DRV_DTMB_H_ 





#if !defined UTPA2
#define DMD_DTMB_UTOPIA_EN 1
#define DMD_DTMB_UTOPIA2_EN 0
#else
#define DMD_DTMB_UTOPIA_EN 0
#define DMD_DTMB_UTOPIA2_EN 1
#endif

#define DMD_DTMB_STR_EN 1
#define DMD_DTMB_MULTI_THREAD_SAFE 0
#define DMD_DTMB_MULTI_DMD_EN 1





#include "MsTypes.h"
#if DMD_DTMB_UTOPIA_EN || DMD_DTMB_UTOPIA2_EN
#ifndef MSIF_TAG
#include "MsVersion.h"
#endif
#include "MsCommon.h"
#endif
#if DMD_DTMB_UTOPIA2_EN || DMD_DTMB_STR_EN
#include "utopia.h"
#endif
# 182 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif

#if DMD_DTMB_MULTI_DMD_EN
#define DMD_DTMB_MAX_DEMOD_NUM 2
#else
#define DMD_DTMB_MAX_DEMOD_NUM 1
#endif

#if DMD_DTMB_UTOPIA_EN || DMD_DTMB_UTOPIA2_EN
#define MSIF_DMD_DTMB_LIB_CODE {'D','M','D','_','D','T', 'M','B','_'}
#define MSIF_DMD_DTMB_LIBVER {'0','0'}
#define MSIF_DMD_DTMB_BUILDNUM {'0','0' }
#define MSIF_DMD_DTMB_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_DTMB_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_DTMB_LIB_CODE, \
    MSIF_DMD_DTMB_LIBVER, \
    MSIF_DMD_DTMB_BUILDNUM, \
    MSIF_DMD_DTMB_CHANGELIST, \
    MSIF_OS
#endif

#ifndef BIT_
#define BIT_(n) (1 << (n))
#endif

#define DMD_DTMB_LOCK_DTMB_PNP_LOCK BIT_(0)
#define DMD_DTMB_LOCK_DTMB_FEC_LOCK BIT_(1)

#define DMD_DTMB_LOCK_DVBC_AGC_LOCK BIT_(8)
#define DMD_DTMB_LOCK_DVBC_PRE_LOCK BIT_(9)
#define DMD_DTMB_LOCK_DVBC_MAIN_LOCK BIT_(10)





typedef enum
{
    DMD_DTMB_HAL_CMD_Exit = 0,
    DMD_DTMB_HAL_CMD_InitClk,
    DMD_DTMB_HAL_CMD_Download,
    DMD_DTMB_HAL_CMD_FWVERSION,
    DMD_DTMB_HAL_CMD_SoftReset,
    DMD_DTMB_HAL_CMD_SetACICoef,
    DMD_DTMB_HAL_CMD_SetDTMBMode,
    DMD_DTMB_HAL_CMD_SetModeClean,
    DMD_DTMB_HAL_CMD_Set_QAM_SR,
    DMD_DTMB_HAL_CMD_Active,
    DMD_DTMB_HAL_CMD_AGCLock,
    DMD_DTMB_HAL_CMD_DTMB_PNP_Lock,
    DMD_DTMB_HAL_CMD_DTMB_FEC_Lock,
    DMD_DTMB_HAL_CMD_DVBC_PreLock,
    DMD_DTMB_HAL_CMD_DVBC_Main_Lock,
    DMD_DTMB_HAL_CMD_GetModulation,
    DMD_DTMB_HAL_CMD_ReadIFAGC,
    DMD_DTMB_HAL_CMD_ReadFrequencyOffset,
    DMD_DTMB_HAL_CMD_ReadSNRPercentage,
    DMD_DTMB_HAL_CMD_GetPreLdpcBer,
    DMD_DTMB_HAL_CMD_GetPreViterbiBer,
    DMD_DTMB_HAL_CMD_GetPostViterbiBer,
    DMD_DTMB_HAL_CMD_GetSNR,
    DMD_DTMB_HAL_CMD_TS_INTERFACE_CONFIG,
    DMD_DTMB_HAL_CMD_IIC_Bypass_Mode,
    DMD_DTMB_HAL_CMD_SSPI_TO_GPIO,
    DMD_DTMB_HAL_CMD_GPIO_GET_LEVEL,
    DMD_DTMB_HAL_CMD_GPIO_SET_LEVEL,
    DMD_DTMB_HAL_CMD_GPIO_OUT_ENABLE,
    DMD_DTMB_HAL_CMD_DoIQSwap,
    DMD_DTMB_HAL_CMD_GET_REG,
    DMD_DTMB_HAL_CMD_SET_REG
} DMD_DTMB_HAL_COMMAND;

typedef enum
{
    DMD_DTMB_DEMOD_DTMB,
    DMD_DTMB_DEMOD_DTMB_7M,
    DMD_DTMB_DEMOD_DTMB_6M,
    DMD_DTMB_DEMOD_DTMB_5M,
    DMD_DTMB_DEMOD_DVBC_64QAM,
    DMD_DTMB_DEMOD_DVBC_256QAM,
    DMD_DTMB_DEMOD_DVBC_16QAM,
    DMD_DTMB_DEMOD_DVBC_32QAM,
    DMD_DTMB_DEMOD_DVBC_128QAM,
    DMD_DTMB_DEMOD_MAX,
    DMD_DTMB_DEMOD_NULL = DMD_DTMB_DEMOD_MAX,
} DMD_DTMB_DEMOD_TYPE;

typedef struct DLL_PACKED
{
    union
    {
        #ifdef UTPA2
        MS_U16 fSiCodeRate;
        MS_U16 fDvbcSymRateL;
        #else
        float fSiCodeRate;
        float fDvbcSymRateL;
        #endif
    };
    union
    {
        MS_U16 u8SiInterLeaver;
        MS_U16 u8DvbcSymRateH;
    };
    union
    {
        MS_U8 u8SiQamMode;
        MS_U8 u8DvbcQamMode;
    };
    MS_U8 u8SiNR;
    MS_U8 u8SiCarrierMode;
    MS_U16 u16PNM;
    MS_U8 u8PNC;
    DMD_DTMB_DEMOD_TYPE eDemodType;
} DMD_DTMB_MODULATION_INFO;

#ifdef UTPA2
typedef struct DLL_PACKED
{
    MS_S16 fftfirstCfo;
    MS_S8 fftSecondCfo;
    MS_S16 sr;
} DMD_DTMB_CFO_DATA;

typedef struct DLL_PACKED
{
    MS_U32 BitErr;
    MS_U16 Error_window;
} DMD_DTMB_BER_DATA;

typedef struct DLL_PACKED
{
    MS_U32 snr;
    MS_U16 sym_num;
} DMD_DTMB_SNR_DATA;
#endif

typedef struct DLL_PACKED
{
    MS_U8 u8Pin;
    union
    {
        MS_BOOL bLevel;
        MS_BOOL bIsOut;
    };
} DMD_DTMB_GPIO_PIN_DATA;

typedef struct DLL_PACKED
{
    MS_U16 u16Addr;
    MS_U8 u8Data;
} DMD_DTMB_REG_DATA;

typedef enum
{
    DMD_DTMB_DBGLV_NONE,
    DMD_DTMB_DBGLV_INFO,
    DMD_DTMB_DBGLV_NOTICE,
    DMD_DTMB_DBGLV_WARNING,
    DMD_DTMB_DBGLV_ERR,
    DMD_DTMB_DBGLV_CRIT,
    DMD_DTMB_DBGLV_ALERT,
    DMD_DTMB_DBGLV_EMERG,
    DMD_DTMB_DBGLV_DEBUG,
} DMD_DTMB_DbgLv;

typedef enum
{
    DMD_DTMB_GETLOCK,
    DMD_DTMB_GETLOCK_DTMB_AGCLOCK,
    DMD_DTMB_GETLOCK_DTMB_PNPLOCK,
    DMD_DTMB_GETLOCK_DTMB_FECLOCK,
    DMD_DTMB_GETLOCK_DVBC_AGCLOCK,
    DMD_DTMB_GETLOCK_DVBC_PRELOCK,
    DMD_DTMB_GETLOCK_DVBC_MAINLOCK,
} DMD_DTMB_GETLOCK_TYPE;

typedef enum
{
    DMD_DTMB_LOCK,
    DMD_DTMB_CHECKING,
    DMD_DTMB_CHECKEND,
    DMD_DTMB_UNLOCK,
    DMD_DTMB_NULL,
} DMD_DTMB_LOCK_STATUS;


typedef struct DLL_PACKED
{

    MS_U16 u16DTMBAGCLockCheckTime;
    MS_U16 u16DTMBPreLockCheckTime;
    MS_U16 u16DTMBPNMLockCheckTime;
    MS_U16 u16DTMBFECLockCheckTime;

    MS_U16 u16QAMAGCLockCheckTime;
    MS_U16 u16QAMPreLockCheckTime;
    MS_U16 u16QAMMainLockCheckTime;


    MS_U8 *u8DMD_DTMB_DSPRegInitExt;
    MS_U8 u8DMD_DTMB_DSPRegInitSize;
    MS_U8 *u8DMD_DTMB_InitExt;


    MS_U16 u16IF_KHZ;
    MS_BOOL bIQSwap;
    MS_U16 u16AGC_REFERENCE;
    MS_BOOL bTunerGainInvert;


    MS_U8 u8IS_DUAL;
    MS_BOOL bIsExtDemod;


    MS_U8 u1TsConfigByte_SerialMode : 1;
    MS_U8 u1TsConfigByte_DataSwap : 1;
    MS_U8 u1TsConfigByte_ClockInv : 1;
    MS_U8 u5TsConfigByte_DivNum : 5;


    MS_U8 u8I2CSlaveAddr;
    MS_U8 u8I2CSlaveBus;
    MS_BOOL (*I2C_WriteBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8addrcount, MS_U8* pu8addr, MS_U16 u16size, MS_U8* pu8data);
    MS_BOOL (*I2C_ReadBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8AddrNum, MS_U8* paddr, MS_U16 u16size, MS_U8* pu8data);


    MS_BOOL bIsUseSspiLoadCode;
    MS_BOOL bIsSspiUseTsPin;


    MS_U32 u32TdiStartAddr;

    #if !DMD_DTMB_UTOPIA_EN && !DMD_DTMB_UTOPIA2_EN
    MS_U32 (*GetSystemTimeMS)(void);
    void (*DelayMS)(MS_U32 ms);
    MS_BOOL (*CreateMutex)(MS_BOOL enable);
    void (*LockDMD)(MS_BOOL enable);
    #endif
} DMD_DTMB_InitData;

typedef struct DLL_PACKED
{
    MS_VIRT virtDMDBaseAddr;

    MS_BOOL bInit;
    MS_BOOL bDownloaded;

    #if DMD_DTMB_STR_EN
    MS_BOOL bIsDTV;
    EN_POWER_MODE eLastState;
    #endif
    DMD_DTMB_DEMOD_TYPE eLastType;
    MS_U16 u16SymRate;

    MS_BOOL bIsQPad;
    MS_U16 u16ChipID;

    MS_BOOL (*HAL_DMD_DTMB_IOCTL_CMD)(DMD_DTMB_HAL_COMMAND eCmd, void *pPara);
} DMD_DTMB_PriData;

typedef struct DLL_PACKED
{
    MS_U8 u8Version;
    MS_U32 u32DTMBScanTimeStart;
    MS_U32 u32DTMBFECLockTime;
    MS_U32 u32DTMBLockStatus;
} DMD_DTMB_Info;

typedef struct DLL_PACKED
{
    DMD_DTMB_InitData sDMD_DTMB_InitData;
    DMD_DTMB_PriData sDMD_DTMB_PriData;
    DMD_DTMB_Info sDMD_DTMB_Info;
} DMD_DTMB_ResData;





#ifdef __cplusplus
extern "C"
{
#endif

#ifndef MSOS_TYPE_LINUX_KERNEL
# 485 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_SetDbgLevel(DMD_DTMB_DbgLv u8DbgLevel);





DLL_PUBLIC extern DMD_DTMB_Info* MDrv_DMD_DTMB_GetInfo(void);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetLibVer(const MSIF_Version **ppVersion);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_Initial_Hal_Interface(void);
# 520 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_Init(DMD_DTMB_InitData *pDMD_DTMB_InitData, MS_U32 u32InitDataLen);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_Exit(void);







DLL_PUBLIC extern MS_U32 MDrv_DMD_DTMB_GetConfig(DMD_DTMB_InitData *psDMD_DTMB_InitData);
# 544 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_SetConfig(DMD_DTMB_DEMOD_TYPE eType, MS_BOOL bEnable);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_SetReset(void);
# 560 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_Set_QAM_SR(DMD_DTMB_DEMOD_TYPE eType, MS_U16 symbol_rate);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_SetActive(MS_BOOL bEnable);






#if DMD_DTMB_STR_EN
DLL_PUBLIC extern MS_U32 MDrv_DMD_DTMB_SetPowerState(EN_POWER_MODE u16PowerState);
#endif






DLL_PUBLIC extern DMD_DTMB_LOCK_STATUS MDrv_DMD_DTMB_GetLock(DMD_DTMB_GETLOCK_TYPE eType);





DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetModulationMode(DMD_DTMB_MODULATION_INFO *sDtmbModulationMode);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetSignalStrength(MS_U16 *u16Strength);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_ReadFrequencyOffset(MS_S16 *cfo);





DLL_PUBLIC extern MS_U8 MDrv_DMD_DTMB_GetSignalQuality(void);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetPreLdpcBer(float *pber);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetPreViterbiBer(float *ber);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetPostViterbiBer(float *ber);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetSNR(float *snr);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_SetSerialControl(MS_U8 u8TsConfigData);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_IIC_BYPASS_MODE(MS_BOOL bEnable);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_SWITCH_SSPI_GPIO(MS_BOOL bEnable);
# 677 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GPIO_GET_LEVEL(MS_U8 u8Pin, MS_BOOL *bLevel);
# 686 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GPIO_SET_LEVEL(MS_U8 u8Pin, MS_BOOL bLevel);
# 695 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GPIO_OUT_ENABLE(MS_U8 u8Pin, MS_BOOL bEnableOut);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_DoIQSwap(MS_BOOL bIsQPad);
# 712 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);
# 721 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_SetReg(MS_U16 u16Addr, MS_U8 u8Data);
# 736 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_Init(MS_U8 id, DMD_DTMB_InitData *pDMD_DTMB_InitData, MS_U32 u32InitDataLen);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_Exit(MS_U8 id);
# 753 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_U32 MDrv_DMD_DTMB_MD_GetConfig(MS_U8 id, DMD_DTMB_InitData *psDMD_DTMB_InitData);
# 763 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_SetConfig(MS_U8 id, DMD_DTMB_DEMOD_TYPE eType, MS_BOOL bEnable);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_SetReset(MS_U8 id);
# 781 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_Set_QAM_SR(MS_U8 id, DMD_DTMB_DEMOD_TYPE eType, MS_U16 symbol_rate);
# 790 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_SetActive(MS_U8 id, MS_BOOL bEnable);







#if DMD_DTMB_STR_EN
DLL_PUBLIC extern MS_U32 MDrv_DMD_DTMB_MD_SetPowerState(MS_U8 id, EN_POWER_MODE u16PowerState);
#endif







DLL_PUBLIC extern DMD_DTMB_LOCK_STATUS MDrv_DMD_DTMB_MD_GetLock(MS_U8 id, DMD_DTMB_GETLOCK_TYPE eType);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GetModulationMode(MS_U8 id, DMD_DTMB_MODULATION_INFO *sDtmbModulationMode);
# 824 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GetSignalStrength(MS_U8 id, MS_U16 *u16Strength);
# 833 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_ReadFrequencyOffset(MS_U8 id, MS_S16 *cfo);






DLL_PUBLIC extern MS_U8 MDrv_DMD_DTMB_MD_GetSignalQuality(MS_U8 id);
# 849 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GetPreLdpcBer(MS_U8 id, float *pber);
# 858 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GetPreViterbiBer(MS_U8 id, float *ber);
# 867 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GetPostViterbiBer(MS_U8 id, float *ber);
# 876 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GetSNR(MS_U8 id, float *snr);
# 885 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_SetSerialControl(MS_U8 id, MS_U8 u8TsConfigData);
# 894 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_IIC_BYPASS_MODE(MS_U8 id, MS_BOOL bEnable);
# 903 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_SWITCH_SSPI_GPIO(MS_U8 id, MS_BOOL bEnable);
# 913 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GPIO_GET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL *bLevel);
# 923 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GPIO_SET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL bLevel);
# 933 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GPIO_OUT_ENABLE(MS_U8 id, MS_U8 u8Pin, MS_BOOL bEnableOut);







DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_DoIQSwap(MS_U8 id, MS_BOOL bIsQPad);
# 951 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_GetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 *pu8Data);
# 961 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_DTMB_MD_SetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 u8Data);

#endif

#ifdef UTPA2
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_SetDbgLevel(DMD_DTMB_DbgLv u8DbgLevel);
DLL_PUBLIC extern DMD_DTMB_Info* _MDrv_DMD_DTMB_GetInfo(void);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_GetLibVer(const MSIF_Version **ppVersion);

DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_Init(MS_U8 id, DMD_DTMB_InitData *pDMD_DTMB_InitData, MS_U32 u32InitDataLen);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_Exit(MS_U8 id);
DLL_PUBLIC extern MS_U32 _MDrv_DMD_DTMB_MD_GetConfig(MS_U8 id, DMD_DTMB_InitData *psDMD_DTMB_InitData);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_SetConfig(MS_U8 id, DMD_DTMB_DEMOD_TYPE eType, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_SetReset(MS_U8 id);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_Set_QAM_SR(MS_U8 id, DMD_DTMB_DEMOD_TYPE eType, MS_U16 symbol_rate);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_SetActive(MS_U8 id, MS_BOOL bEnable);
#if DMD_DTMB_STR_EN
DLL_PUBLIC extern MS_U32 _MDrv_DMD_DTMB_MD_SetPowerState(MS_U8 id, EN_POWER_MODE u16PowerState);
#endif
DLL_PUBLIC extern DMD_DTMB_LOCK_STATUS _MDrv_DMD_DTMB_MD_GetLock(MS_U8 id, DMD_DTMB_GETLOCK_TYPE eType);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GetModulationMode(MS_U8 id, DMD_DTMB_MODULATION_INFO *sDtmbModulationMode);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GetSignalStrength(MS_U8 id, MS_U16 *u16Strength);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_ReadFrequencyOffset(MS_U8 id, DMD_DTMB_CFO_DATA *cfo);
DLL_PUBLIC extern MS_U8 _MDrv_DMD_DTMB_MD_GetSignalQuality(MS_U8 id);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GetPreLdpcBer(MS_U8 id, DMD_DTMB_BER_DATA *pber);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GetPreViterbiBer(MS_U8 id, DMD_DTMB_BER_DATA *ber);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GetPostViterbiBer(MS_U8 id, DMD_DTMB_BER_DATA *ber);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GetSNR(MS_U8 id, DMD_DTMB_SNR_DATA *snr);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_SetSerialControl(MS_U8 id, MS_U8 u8TsConfigData);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_IIC_BYPASS_MODE(MS_U8 id, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_SWITCH_SSPI_GPIO(MS_U8 id, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GPIO_GET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL *bLevel);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GPIO_SET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL bLevel);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GPIO_OUT_ENABLE(MS_U8 id, MS_U8 u8Pin, MS_BOOL bEnableOut);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_DoIQSwap(MS_U8 id, MS_BOOL bIsQPad);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_GetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 *pu8Data);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_DTMB_MD_SetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 u8Data);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 118 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
#ifndef _API_MHL_H_
#define _API_MHL_H_ 

#include "MsTypes.h"
#include "MsDevice.h"
#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif




#define P4_CHANGELIST "00522289"
#define FW_VER_MAJOR "04"
#define FW_VER_MINOR "18"

typedef MS_U8 (*link_cbus_event_handle_func)(MS_U8);

typedef struct
{
    MS_U8 ucSupportPath;
    MS_U8 *ucEDIDTable;
    MS_U8 *ucDevcapTable;
} stMHL_INITIAL_CONFIG;

typedef struct
{
    MS_U8 ucMHLSupportPath;
    MS_U8 ucDeviceCapabilityTable[20];
    MS_U32 ulReturnValue;
} stMHL_INITIAL_CONFIG_INFO;

typedef enum
{
    E_MHL_POWER_ON,
    E_MHL_POWER_STANDBY,
    E_MHL_POWER_DOWN
} E_MHL_POWERCTRL_Mode;

enum
{
    RCP_KEYID_SELECT = 0x00,
    RCP_KEYID_UP = 0x01,
    RCP_KEYID_DOWN = 0x02,
    RCP_KEYID_LEFT = 0x03,
    RCP_KEYID_RIGHT = 0x04,
    RCP_KEYID_RIGHT_UP = 0x05,
    RCP_KEYID_RIGHT_DOWN = 0x06,
    RCP_KEYID_LEFT_UP = 0x07,
    RCP_KEYID_LEFT_DOWN = 0x08,
    RCP_KEYID_ROOT_MENU = 0x09,
    RCP_KEYID_SETUP_MENU = 0x0A,
    RCP_KEYID_CONTENTS_MENU = 0x0B,
    RCP_KEYID_FAVORITE_MENU = 0x0C,
    RCP_KEYID_EXIT = 0x0D,

    RCP_KEYID_NUM_0 = 0x20,
    RCP_KEYID_NUM_1 = 0x21,
    RCP_KEYID_NUM_2 = 0x22,
    RCP_KEYID_NUM_3 = 0x23,
    RCP_KEYID_NUM_4 = 0x24,
    RCP_KEYID_NUM_5 = 0x25,
    RCP_KEYID_NUM_6 = 0x26,
    RCP_KEYID_NUM_7 = 0x27,
    RCP_KEYID_NUM_8 = 0x28,
    RCP_KEYID_NUM_9 = 0x29,
    RCP_KEYID_DOT = 0x2A,
    RCP_KEYID_ENTER = 0x2B,
    RCP_KEYID_CLEAR = 0x2C,

    RCP_KEYID_CH_UP = 0x30,
    RCP_KEYID_CH_DOWN = 0x31,
    RCP_KEYID_PRE_CH = 0x32,
    RCP_KEYID_SOUND_SELECT = 0x33,
    RCP_KEYID_INPUT_SELECT = 0x34,
    RCP_KEYID_SHOW_INFO = 0x35,
    RCP_KEYID_HELP = 0x36,
    RCP_KEYID_PAGE_UP = 0x37,
    RCP_KEYID_PAGE_DOWN = 0x38,

    RCP_KEYID_VOL_UP = 0x41,
    RCP_KEYID_VOL_DOWN = 0x42,
    RCP_KEYID_MUTE = 0x43,
    RCP_KEYID_PLAY = 0x44,
    RCP_KEYID_STOP = 0x45,
    RCP_KEYID_PAUSE = 0x46,
    RCP_KEYID_RECORD = 0x47,
    RCP_KEYID_REWIND = 0x48,
    RCP_KEYID_FAST_FWD = 0x49,
    RCP_KEYID_EJECT = 0x4A,
    RCP_KEYID_FORWARD = 0x4B,
    RCP_KEYID_BACKWARD = 0x4C,

    RCP_KEYID_ANGLE = 0x50,
    RCP_KEYID_SUBPICTURE = 0x51,

    RCP_KEYID_PLAY_FUNC = 0x60,
    RCP_KEYID_PAUSE_PLAY_FUNC = 0x61,
    RCP_KEYID_RECORD_FUNC = 0x62,
    RCP_KEYID_PAUSE_REC_FUNC = 0x63,
    RCP_KEYID_STOP_FUNC = 0x64,
    RCP_KEYID_MUTE_FUNC = 0x65,
    RCP_KEYID_UN_MUTE_FUNC = 0x66,
    RCP_KEYID_TUNE_FUNC = 0x67,
    RCP_KEYID_MEDIA_FUNC = 0x68,

    RCP_KEYID_F1 = 0x71,
    RCP_KEYID_F2 = 0x72,
    RCP_KEYID_F3 = 0x73,
    RCP_KEYID_F4 = 0x74,
    RCP_KEYID_F5 = 0x75,

    RCP_KEYID_VENDOR_SPECIFIC = 0x7E,
    RCP_KEYID_RESERVED = 0x7F,
    RCP_KEYID_SELECT_RELEASE = 0x80,
};

typedef enum
{
    MSC_RAP_POLL = 0x00,
    MSC_RAP_CONTENT_ON = 0x10,
    MSC_RAP_CONTENT_OFF = 0x11,
} MscRapActionCode_T;

enum
{
    MSC_RCP_NO_ERROR = 0x00,
    MSC_RCP_INEFFECTIVE_KEY_CODE = 0x01,
    MSC_RCP_RESPONDER_BUSY = 0x02,
};

enum
{
    MSC_RAP_NO_ERROR = 0x00,
    MSC_RAP_UNRECOGNIZED_ACTION_CODE = 0x01,
    MSC_RAP_UNSUPPORTED_ACTION_CODE = 0x02,
    MSC_RAP_RESPONDER_BUSY = 0x03,
};

enum MHL_CBUS_CONTROL_TYPE
{
    MHL_FORCE_HDMI_BY_PASS = 0,
    MHL_FORCE_24BIT_MODE,
    MHL_FORCE_PACKET_PIXEL_MODE,
    MHL_CBUS_ISOLATION_ON,
    MHL_CBUS_ISOLATION_OFF,
    MHL_CBUS_FLOATING_ON,
    MHL_CBUS_FLOATING_OFF,
    MHL_CBUS_RTERM_OFF,
    MHL_CBUS_FORCE_CLEAR_HPD,
    MHL_CBUS_FORCE_RESET_HPD,
    MHL_VBUS_HW_DETCET,
    MHL_VBUS_CHARGE_ON,
    MHL_VBUS_CHARGE_OFF,
    MHL_CBUS_FORCE_READY_DEVCAP,
    MHL_CBUS_FORCE_RECEIVE_3D_REQ,
    MHL_CBUS_FORCE_SEND_COMMAND_ENABLE,
    MHL_CBUS_FORCE_SEND_COMMAND_DISABLE,
    MHL_CBUS_CHECK_CONTEND_ON_ENABLE,
    MHL_CBUS_CHECK_CONTEND_ON_DISABLE,
};

enum MHL_CBUS_STATUS_FLAG_TYPE
{
    MHL_CBUS_STATUS_FLAG_CABLE_DETECT = 0,
    MHL_CBUS_STATUS_FLAG_CBUS_CONNECT,
    MHL_CBUS_STATUS_FLAG_PATH_EN,
    MHL_CBUS_STATUS_FLAG_RECEIVE_PATH_EN,
    MHL_CBUS_STATUS_FLAG_RECEIVE_MUTED,
    MHL_CBUS_STATUS_FLAG_COMMUNICATE_BUSY,
};

enum MHL_CABLE_DETECT_USE_TYPE
{
    MHL_CABLE_DETECT_USE_PORTA = 0x01,
    MHL_CABLE_DETECT_USE_PORTB = 0x02,
    MHL_CABLE_DETECT_USE_PORTC = 0x04,
    MHL_CABLE_DETECT_USE_PORTD = 0x08,
};

typedef enum
{

    MAPI_CMD_MHL_SUPPORT_PATH,
    MAPI_CMD_MHL_INITIAL,
    MAPI_CMD_MHL_HANDLER,
    MAPI_CMD_MHL_AUTO_SWITCH,
    MAPI_CMD_MHL_SET_POWER_STATE,
    MAPI_CMD_MHL_CBUS_CONTROL,
    MAPI_CMD_MHL_LOAD_EDID,
    MAPI_CMD_MHL_READ_EDID,
    MAPI_CMD_MHL_LOAD_DEVCAP,
    MAPI_CMD_MHL_SET_VENDER_ID,
    MAPI_CMD_MHL_SET_CABLE_DETECT_INVERT,
    MAPI_CMD_MHL_VBUS_CONFIG_SETTING,
    MAPI_CMD_MHL_ADJUST_I_CONTROL,
    MAPI_CMD_MHL_ADJUST_IMPEDANCE,
    MAPI_CMD_MHL_CABLE_DETECT_FLAG,
    MAPI_CMD_MHL_CBUS_CONNECT_FLAG,
    MAPI_CMD_MHL_CBUS_WAKEUP_INT_FLAG,
    MAPI_CMD_MHL_SOURCE_SUPPORT_RCP,
    MAPI_CMD_MHL_SOURCE_SUPPORT_RAP,
    MAPI_CMD_MHL_GET_STATUS_FLAG,
    MAPI_CMD_MHL_SEND_RAP_COMMAND,
    MAPI_CMD_MHL_SEND_RCP_COMMAND,
    MAPI_CMD_MHL_SEND_UCP_COMMAND,
    MAPI_CMD_MHL_SEND_WRITE_BURST,
    MAPI_CMD_MHL_SEND_USER_WRITE_BURST,
    MAPI_CMD_MHL_GET_DEVICE_CAPABILITY,
    MAPI_CMD_MHL_GET_EXTEND_DEVICE_CAPABILITY,
    MAPI_CMD_MHL_GET_VENDER_ID,
    MAPI_CMD_MHL_GET_WRITE_BURST_DATA,
    MAPI_CMD_MHL_CALL_BACK_FUNCTION,
    MAPI_CMD_MHL_RCP_CALL_BACK_FUNCTION,
    MAPI_CMD_MHL_RAP_CALL_BACK_FUNCTION,
    MAPI_CMD_MHL_UCP_CALL_BACK_FUNCTION,
    MAPI_CMD_MHL_ATT_CALL_BACK_FUNCTION,
    MAPI_CMD_MHL_RBP_CALL_BACK_FUNCTION,
    MAPI_CMD_MHL_GET_CONFIGURATION,
}E_MHL_API_CMD_TYPE;

typedef struct
{
    MS_U8 ucSupportPath;
} stMHL_SET_SUPPORT_PATH, *pstMHL_SET_SUPPORT_PATH;

typedef struct DLL_PACKED
{
    MS_U8 *ucEDIDTable;
    MS_U8 *ucDevcapTable;
} stMHL_INITIAL_SETTING, *pstMHL_INITIAL_SETTING;

typedef struct
{
    MS_U16 usMSGKeyInfo;
} stMHL_POLLING_HANDLER, *pstMHL_POLLING_HANDLER;

typedef struct DLL_PACKED
{
    MS_BOOL bAutoSwitchFlag;
    MS_BOOL bResetFlag;
    MS_U8 *ucCbusPath;
} stMHL_AUTO_SWITCH_HANDLER, *pstMHL_AUTO_SWITCH_HANDLER;

typedef struct
{
    MS_U32 ulFailFlag;
    EN_POWER_MODE usPowerState;
} stMHL_SET_POWER_STATE, *pstMHL_SET_POWER_STATE;

typedef struct
{
    MS_U8 ucState;
} stMHL_CBUS_CONTROL, *pstMHL_CBUS_CONTROL;

typedef struct DLL_PACKED
{
    MS_U8 *ucEDIDTable;
} stMHL_LOAD_EDID, *pstMHL_LOAD_EDID;

typedef struct DLL_PACKED
{
    MS_U8 ucEDIDSize;
    MS_U8 *ucEDIDTable;
} stMHL_READ_EDID, *pstMHL_READ_EDID;

typedef struct DLL_PACKED
{
    MS_U8 *ucDevcapTable;
} stMHL_LOAD_DEVCAP, *pstMHL_LOAD_DEVCAP;

typedef struct
{
    MS_U8 ucVenderID;
} stMHL_SET_VENDER_ID, *pstMHL_SET_VENDER_ID;

typedef struct
{
    MS_BOOL bCableDetectInvert;
} stMHL_SET_CABLE_DETECT_INVERT, *pstMHL_SET_CABLE_DETECT_INVERT;

typedef struct
{
    MS_U8 ucConfigMode;
} stMHL_VBUS_CONFIG_SETTING, *pstMHL_VBUS_CONFIG_SETTING;

typedef struct
{
    MS_U8 ucIControlValue;
} stMHL_ADJUST_I_CONTROL, *pstMHL_ADJUST_I_CONTROL;

typedef struct
{
    MS_U8 ucImpedanceValue;
} stMHL_ADJUST_IMPEDANCE, *pstMHL_ADJUST_IMPEDANCE;

typedef struct
{
    MS_BOOL bCableDetectFlag;
} stMHL_CABLE_DETECT_FLAG, *pstMHL_CABLE_DETECT_FLAG;

typedef struct
{
    MS_BOOL bCbusConnectFlag;
} stMHL_CBUS_CONNECT_FLAG, *pstMHL_CBUS_CONNECT_FLAG;

typedef struct
{
    MS_BOOL bCbusWakeupFlag;
} stMHL_CBUS_WAKEUP_INT_FLAG, *pstMHL_CBUS_WAKEUP_INT_FLAG;

typedef struct
{
    MS_BOOL bSourceSupportRCP;
} stMHL_SOURCE_SUPPORT_RCP, *pstMHL_SOURCE_SUPPORT_RCP;

typedef struct
{
    MS_BOOL bSourceSupportRAP;
} stMHL_SOURCE_SUPPORT_RAP, *pstMHL_SOURCE_SUPPORT_RAP;

typedef struct
{
    MS_BOOL bStatusFlag;
    MS_U8 ucStatusType;
} stMHL_GET_STATUS_FLAG, *pstMHL_GET_STATUS_FLAG;

typedef struct
{
    MS_BOOL bSendFlag;
    MS_U8 ucKeyCode;
} stMHL_SEND_RAP_COMMAND, *pstMHL_SEND_RAP_COMMAND;

typedef struct
{
    MS_BOOL bSendFlag;
    MS_U8 ucKeyCode;
} stMHL_SEND_RCP_COMMAND, *pstMHL_SEND_RCP_COMMAND;

typedef struct
{
    MS_BOOL bSendFlag;
    MS_U8 ucKeyCode;
} stMHL_SEND_UCP_COMMAND, *pstMHL_SEND_UCP_COMMAND;

typedef struct DLL_PACKED
{
    MS_BOOL bSendFlag;
    MS_U8 ucAddress;
    MS_U8 ucLength;
    MS_U8 *ucData;
} stMHL_SEND_WRITE_BURST, *pstMHL_SEND_WRITE_BURST;

typedef struct DLL_PACKED
{
    MS_BOOL bSendFlag;
    MS_U8 ucLength;
    MS_U8 *ucData;
} stMHL_SEND_USER_WRITE_BURST, *pstMHL_SEND_USER_WRITE_BURST;

typedef struct DLL_PACKED
{
    MS_BOOL bObtainFlag;
    MS_U16 usDevcapMask;
    MS_U8 *ucDeviceCapability;
} stMHL_GET_DEVICE_CAPABILITY, *pstMHL_GET_DEVICE_CAPABILITY;

typedef struct DLL_PACKED
{
    MS_BOOL bObtainFlag;
    MS_U16 usExtendDevcapMask;
    MS_U8 *ucExtendDeviceCapability;
} stMHL_GET_EXTEND_DEVICE_CAPABILITY, *pstMHL_GET_EXTEND_DEVICE_CAPABILITY;

typedef struct DLL_PACKED
{
    MS_BOOL bObtainFlag;
    MS_U8 *ucVenderID;
} stMHL_GET_VENDER_ID, *pstMHL_GET_VENDER_ID;

typedef struct DLL_PACKED
{
    MS_BOOL bObtainFlag;
    MS_U8 *ucWriteBurstData;
} stMHL_GET_WRITE_BURST_DATA, *pstMHL_GET_WRITE_BURST_DATA;

typedef struct
{
    MS_BOOL bRCPfunctionFlag;
    MS_BOOL bRAPfunctionFlag;
} stMHL_CALL_BACK_FUNCTION, *pstMHL_CALL_BACK_FUNCTION;

typedef struct
{
    MS_BOOL bRCPfunctionFlag;
} stMHL_RCP_CALL_BACK_FUNCTION, *pstMHL_RCP_CALL_BACK_FUNCTION;

typedef struct
{
    MS_BOOL bRAPfunctionFlag;
} stMHL_RAP_CALL_BACK_FUNCTION, *pstMHL_RAP_CALL_BACK_FUNCTION;

typedef struct
{
    MS_BOOL bUCPfunctionFlag;
} stMHL_UCP_CALL_BACK_FUNCTION, *pstMHL_UCP_CALL_BACK_FUNCTION;

typedef struct
{
    MS_BOOL bATTfunctionFlag;
} stMHL_ATT_CALL_BACK_FUNCTION, *pstMHL_ATT_CALL_BACK_FUNCTION;

typedef struct
{
    MS_BOOL bRBPfunctionFlag;
} stMHL_RBP_CALL_BACK_FUNCTION, *pstMHL_RBP_CALL_BACK_FUNCTION;

typedef struct
{
    stMHL_INITIAL_CONFIG_INFO stInitialConfigInfo;
} stMHL_GET_CONFIGURATION, *pstMHL_GET_CONFIGURATION;
# 552 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
void mapi_mhl_MHLSupportPath(MS_U8 ucSelect);
# 561 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
void mapi_mhl_init(MS_U8 *edid, MS_U8 *DevCap);






void mapi_mhl_handler(void);
# 578 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_AutoSwitchHandler(MS_BOOL bReset, MS_U8 *ucCbusPath);
# 587 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_U32 mapi_mhl_SetPowerState(EN_POWER_MODE u16PowerState);







void mapi_mhl_CbusControl(MS_U8 ucState);







void mapi_mhl_LoadEDID(MS_U8 *edid);
# 612 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
void mapi_mhl_ReadEDID(MS_U16 usSize, MS_U8 *edid);







void mapi_mhl_LoadDeviceCapability(MS_U8 *devcap);







void mapi_mhl_SetVenderID(MS_U8 ucVenderID);







void mapi_mhl_InvertCableDetect(MS_BOOL bCableDetectInvert);







void mapi_mhl_VbusConfigSetting(MS_U8 ucState);







void mapi_mhl_AdjustSettingIControl(MS_U8 ucIControl);







void mapi_mhl_AdjustImpedanceSetting(MS_U8 ucImpedance);







MS_BOOL mapi_mhl_CableDetect(void);







MS_BOOL mapi_mhl_CbusStatus(void);







MS_BOOL mapi_mhl_CbusWakeupIntFlag(void);







MS_BOOL mapi_mhl_SrcRCPSupportFlag(void);







MS_BOOL mapi_mhl_SrcRAPSupportFlag(void);
# 709 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_CbusGetStatusFlag(MS_U8 ucState);
# 718 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_SendRAPCmd(MS_U8 databuf);
# 727 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_SendRCPAutoReleaseCmd(MS_U8 ucKeyCode);
# 736 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_SendUCPCmd(MS_U8 databuf);
# 747 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_SendWriteBurst(MS_U8 ucAddr, MS_U8 ucLength, MS_U8 *buffer);
# 757 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL SYMBOL_WEAK mapi_mhl_CbusSendUserWriteBurst(MS_U8 ucLength, MS_U8 *pBuffer);
# 767 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_GetDeviceCapacibility(MS_U16 usDevcapMask, MS_U8 *ucDevcap);
# 777 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL SYMBOL_WEAK mapi_mhl_GetExtendDeviceCapacibility(MS_U16 usExtendDevcapMask, MS_U8 *ucExtendDevcap);
# 786 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_GetDeviceVenderID(MS_U8 *ucVenderID);
# 795 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_BOOL mapi_mhl_GetWriteBurstData(MS_U8 *ucData);
# 804 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
void mapi_mhl_RegisterCallBackFunctions(link_cbus_event_handle_func rcp, link_cbus_event_handle_func rap);







void mapi_mhl_RegisterRcpCallBackFunction(link_cbus_event_handle_func rcp);







void mapi_mhl_RegisterRapCallBackFunction(link_cbus_event_handle_func rap);







void mapi_mhl_RegisterUcpCallBackFunction(link_cbus_event_handle_func Ucp);







void SYMBOL_WEAK mapi_mhl_RegisterAttCallBackFunction(link_cbus_event_handle_func Att);







void SYMBOL_WEAK mapi_mhl_RegisterRbpCallBackFunction(link_cbus_event_handle_func Rbp);
# 853 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMHL.h"
MS_U32 SYMBOL_WEAK mapi_mhl_GetConfig(stMHL_INITIAL_CONFIG *stInitialConfig);

void mapi_mhl_Send3DInformation(void);
void mapi_mhl_CbusWakeupIntSetting(void);
void mapi_mhl_PowerCtrl(E_MHL_POWERCTRL_Mode pctrl);

#ifdef __cplusplus
}
#endif

#endif
# 130 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
#ifndef _DRV_SYS_H_
#define _DRV_SYS_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"

#include "UFO.h"




#define MDRV_SYS_XC_TIMING_VERSION 0x00000001UL
#define MDRV_SYS_XC_BYPART_TIMING_VERSION 0x00000001UL

#define SYS_ENCODER_MFE 0x00000001UL
#define SYS_ENCODER_VE 0x00000002UL

#define SYS_FRONTEND_AVD 0x00000001UL
#define SYS_FRONTEND_DEMOD 0x00000002UL
#define SYS_FRONTEND_VBI 0x00000004UL
#define SYS_FRONTEND_VIF 0x00000008UL

#define SYS_SYSTEM_CEC 0x00000001UL
#define SYS_SYSTEM_MBX 0x00000002UL
#define SYS_SYSTEM_SWI2C 0x00000004UL
#define SYS_SYSTEM_BDMA 0x00000008UL
#define SYS_SYSTEM_CPU 0x00000010UL
#define SYS_SYSTEM_GPIO 0x00000020UL
#define SYS_SYSTEM_HWI2C 0x00000040UL
#define SYS_SYSTEM_IR 0x00000080UL
#define SYS_SYSTEM_MIU 0x00000100UL
#define SYS_SYSTEM_MPIF 0x00000200UL
#define SYS_SYSTEM_MSPI 0x00000400UL
#define SYS_SYSTEM_PM 0x00000800UL
#define SYS_SYSTEM_PWM 0x00001000UL
#define SYS_SYSTEM_PWS 0x00002000UL
#define SYS_SYSTEM_RTC 0x00004000UL
#define SYS_SYSTEM_SAR 0x00008000UL
#define SYS_SYSTEM_URDMA 0x00010000UL
#define SYS_SYSTEM_WDT 0x00020000UL

#define SYS_CA_AESDMA 0x00000001UL
#define SYS_CA_CA 0x00000002UL
#define SYS_CA_PCMCIA 0x00000004UL
#define SYS_CA_SC 0x00000008UL

#define SYS_CODEC_GPD 0x00000001UL
#define SYS_CODEC_JPEG 0x00000002UL
#define SYS_CODEC_VDEC 0x00000004UL

#define SYS_DISPLAY_ACE 0x00000001UL
#define SYS_DISPLAY_DAC 0x00000002UL
#define SYS_DISPLAY_DDC2BI 0x00000004UL
#define SYS_DISPLAY_DIP 0x00000008UL
#define SYS_DISPLAY_DLC 0x00000010UL
#define SYS_DISPLAY_GOP 0x00000020UL
#define SYS_DISPLAY_HDMITX 0x00000040UL
#define SYS_DISPLAY_MHL 0x00000080UL
#define SYS_DISPLAY_MVOP 0x00000100UL
#define SYS_DISPLAY_PNL 0x00000200UL
#define SYS_DISPLAY_XC 0x00000400UL

#define SYS_GFX_GFX 0x00000001UL
#define SYS_AUDIO_AUDIO 0x00000001UL
#define SYS_STORAGE_SERFLASH 0x00000001UL
#define SYS_DEMUX_DMX 0x00000001UL





    #define MSIF_SYS_LIB_CODE {'S','Y','S','_'}
    #define MSIF_SYS_LIBVER {'0','1'}
    #define MSIF_SYS_BUILDNUM {'0','9' }
    #define MSIF_SYS_CHANGELIST {'0','0','6','3','0','6','5','2'}

#define SYS_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_SYS_LIB_CODE, \
    MSIF_SYS_LIBVER, \
    MSIF_SYS_BUILDNUM, \
    MSIF_SYS_CHANGELIST, \
    MSIF_OS

#define SYS_LIB_NAME_MAX 16UL
#define SYS_LIB_TIME_MAX 16UL
#define SYS_LIB_DATE_MAX 16UL
#define SYS_BOARD_MODEL_MAX 32UL
#define SYS_PLATFORM_CHIP_MAX 32UL
#define SYS_EFUSE_DID_LENGTH 4UL







typedef struct _SYS_Info
{
    struct
    {
        MS_U16 DeviceId;
        MS_U8 Version;
        MS_U8 Revision;
        MS_PHY MIU1Base;
        MS_PHY MIU1BusBase;
        MS_PHY MIU2Base;
        MS_PHY MIU2BusBase;
        MS_PHY MIU3Base;
        MS_PHY MIU3BusBase;
    } Chip;

    struct
    {
        MS_U8 Time[SYS_LIB_TIME_MAX];
        MS_U8 Date[SYS_LIB_DATE_MAX];
    } SWLib;

} SYS_Info;


typedef struct _SYS_Status
{
    MS_BOOL WDT_Active;

} SYS_Status;

typedef enum _SYS_DbgLv
{
    E_SYS_DBGLV_NONE
    ,E_SYS_DBGLV_ERR_ONLY
    ,E_SYS_DBGLV_REG_DUMP
    ,E_SYS_DBGLV_INFO
    ,E_SYS_DBGLV_ALL
}SYS_DbgLv;

typedef enum
{
    E_SYS_QUERY_H264_SUPPORTED = 0x00,
    E_SYS_QUERY_DVBC_SUPPORTED = 0x10,
    E_SYS_QUERY_MM_SUPPORTED = 0x11,
    E_SYS_QUERY_TTXNICAM_SUPPORTED = 0x12,
    E_SYS_QUERY_TCON_SUPPORTED = 0x13,
    E_SYS_QUERY_DTV_SUPPORTED = 0x14,
    E_SYS_QUERY_DTVCC_SUPPORTED = 0x15,
    E_SYS_QUERY_GINGA_NCL_SUPPORTED = 0x16,
    E_SYS_QUERY_GINGA_JAVA_SUPPORTED = 0x17,
    E_SYS_QUERT_HD_SUPPORTED = 0x18,
    E_SYS_QUERY_MHL_SUPPORTED = 0x19,
    E_SYS_QUERY_DVBT_SUPPORTED = 0x1A,
    E_SYS_QUERY_ISDBT_SUPPORTED = 0x1B,
    E_SYS_QUERY_HBBTV_SUPPORTED = 0x1C,
    E_SYS_QUERY_TTS_SUPPORTED = 0x1D,

    E_SYS_QUERY_DOLBY_HDR_SUPPORTED = 0x1E,
    E_SYS_QUERY_EVDHD_SUPPORTED = 0x1F,
    E_SYS_QUERY_VIDAC1_SUPPORTED = 0x20,
    E_SYS_QUERY_ETHTX_SUPPORTED = 0x21,
    E_SYS_QUERY_ETHRX_SUPPORTED = 0x22,
    E_SYS_QUERY_ETHTXOUTSWING_SUPPORTED = 0x23,
    E_SYS_QUERY_DVBT2_SUPPORTED = 0x24,
    E_SYS_QUERY_4K_SUPPORTED = 0x25,
    E_SYS_QUERY_TSIN_SUPPORTED = 0x26,
    E_SYS_QUERY_VP8_SUPPORTED = 0x27,
    E_SYS_QUERY_VP9_SUPPORTED = 0x28,
    E_SYS_QUERY_DVBS2_SUPPORTED = 0x29,
    E_SYS_QUERY_GINGA_SOLUTION_CONTROL1_SUPPORTED = 0x100,
    E_SYS_QUERY_GINGA_SOLUTION_CONTROL2_SUPPORTED = 0x101,
    E_SYS_QUERY_GINGA_SOLUTION_CONTROL3_SUPPORTED = 0x102,
    E_SYS_QUERY_SECURED_IC_SUPPORTED = 0x200,
} E_SYS_QUERY;

typedef enum
{
    E_SYS_ATV_AGC_PAD_SET,
    E_SYS_DTV_AGC_PAD_SET,
    E_SYS_DTV_AGC_PAD_SET_ALL_OFF,
}SYS_AGC_PAD_SET;

typedef enum
{
    E_TS0_PAD_SET,
    E_TS1_PAD_SET,
    E_TS2_PAD_SET,
    E_TS3_PAD_SET,
    E_CA_CI_PAD_SET,
    E_SC_PAD_SET,
    E_MSPI_PAD_SET,
    E_TS4_PAD_SET,
    E_TS5_PAD_SET,
    E_TSO_PAD_SET,
    E_PAD_SET_MAX
}SYS_PAD_MUX_SET;

typedef enum
{
    E_PARALLEL_IN,
    E_SERIAL_IN,
    E_PARALLEL_IN_2nd_PORT,
    E_PARALLEL_OUT,
    E_CA_CI_PAD_CA,
    E_CA_CI_PAD_CI,
    E_CA_CI_PAD_NONE,
    E_TRI_STATE_ON,
    E_TRI_STATE_OFF,
    E_SC_PAD_PCM,
    E_SC_PAD_TS1,
    E_MSPI_PAD_ON,
    E_MSPI_PAD_GPIO,
    E_SERIAL_IN_3_WIRE,
    E_PARALLEL_OUT_SER2PAR,
    E_PARALLEL_OUT_INTDMD,
    E_PARALLEL_OUT_TSO,
    E_PARALLEL_OUT_SER2PAR1,
    E_MSPI_PAD_ON_2nd_PORT,
    E_PAD_DRIVING_4MA = 0x00001000,
    E_PAD_DRIVING_8MA = 0x00001001,
    E_PAD_SEL_MAX
}SYS_PAD_SEL;

typedef struct _SYS_XC_TIMING
{
    MS_U32 u32TimingVersion;
    MS_U32 u32StructLength;
    MS_U32 u32Width;
    MS_U32 u32Height;
    MS_U16 u16Framerate;
} SYS_XC_TIMING_t;

typedef struct _SYS_XC_BYPART_TIMING
{
    MS_U32 u32TimingVersion;
    MS_U32 u32StructLength;
    SYS_XC_TIMING_t stInput;
    SYS_XC_TIMING_t stOutput;
} SYS_XC_BYPART_TIMING_t;

typedef enum
{
    E_PCM_CD_SINGLE,
    E_PCM_CD_OR,
    E_PCM_CD_MAX
}SYS_PCM_CD_MODE;

typedef enum
{
    E_SYS_DOLBY_VERSION = 0x00,
    E_SYS_DOLBY_CONTROL_BIT = 0x01,
    E_SYS_DOLBY_REVERSE_BIT = 0x02,

} E_SYS_DOLBY_HASH_INFO;

typedef enum
{
    E_SYS_CHIP_TV,
    E_SYS_CHIP_STB,
    E_SYS_CHIP_MAX,
} E_SYS_CHIP_TYPE;

typedef enum
{
 E_SYS_IP_ENCODER,
 E_SYS_IP_FRONTEND,
 E_SYS_IP_DEMUX,
 E_SYS_IP_SYSTEM,
 E_SYS_IP_CA,
 E_SYS_IP_CODEC,
 E_SYS_IP_DISPLAY,
 E_SYS_IP_AUDIO,
 E_SYS_IP_GFX,
 E_SYS_IP_STORAGE,
} E_SYS_IP_TYPE;

typedef enum
{
 E_SYS_IO_SWI2C_READ = 0x00,
 E_SYS_IO_SWI2C_WRITE = 0x01,
 E_SYS_IO_MAX = 0xFF,
} E_SYS_IO_PROC;

typedef enum
{
    E_SYS_OK = 0x0,
    E_SYS_FAIL,
    E_SYS_ERROR_PARAMETER,
    E_SYS_NOT_SUPPORT,
} E_SYS_ReturnValue;

typedef enum
{
    E_SYS_QOS_QUERY_XC_BYPART_EN = 0x00,
    E_SYS_QOS_QUERY_MEMC_EN,
    E_SYS_QOS_MAX,
} E_SYS_QOS_QUERY_TYPE;

#define SYS_TEEINFO_OSTYPE_NOTEE 0
#define SYS_TEEINFO_OSTYPE_NUTTX 1
#define SYS_TEEINFO_OSTYPE_OPTEE 2


typedef struct _SYS_TEEInfo
{
    MS_U32 OsType;
}SYS_TEEINFO;
# 456 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_Init(void);
# 465 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_GlobalInit(void);
# 474 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
const SYS_Info* MDrv_SYS_GetInfo(void);
# 483 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U8 MDrv_SYS_GetChipRev(void);
# 492 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U16 MDrv_SYS_GetChipID(void);
# 501 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_WDTEnable(MS_BOOL bEnable);
# 510 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_WDTClear(void);
# 519 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_WDTLastStatus(void);
# 528 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_WDTSetTime(MS_U32 u32Ms);
# 537 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_ResetChip(void);
# 546 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_ResetCPU(void);
# 555 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_SetDbgLevel(SYS_DbgLv eLevel);
# 564 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_FlushMemory(void);
# 573 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_ReadMemory(void);
# 582 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_VIFWriteByteByVDMbox(MS_U32 u32Reg, MS_U8 u8Val);
# 591 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_VIFWriteByteMaskByVDMbox(MS_U32 u32Reg, MS_U8 u8Val, MS_U8 u8Mask);
# 600 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_VIFWriteRegBitByVDMbox(MS_U32 u32Reg, MS_U8 bEnable, MS_U8 u8Mask);
# 609 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U8 MDrv_SYS_VIFReadByteByVDMbox(MS_U32 u32Reg);
# 618 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U16 MDrv_SYS_VIFRead2ByteByVDMbox(MS_U32 u32Reg);
# 627 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_Query(E_SYS_QUERY id);

#ifdef _SYS_DAC_GAIN_CTRL_
# 638 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_EnhanceDACGain(MS_U8 u8DAC_ID, MS_BOOL bEnable);
#endif
# 648 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_GetSoftwareVersion(MS_SW_VERSION_INFO *pSoftwareVersionInfo);
# 657 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_SetAGCPadMux(SYS_AGC_PAD_SET eAgcPadMux);
# 666 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_SetPadMux(SYS_PAD_MUX_SET ePadMuxType,SYS_PAD_SEL ePadSel);






MS_BOOL MDrv_SYS_PackMode(void);
# 682 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_SetPCMCardDetectMode(SYS_PCM_CD_MODE ePCMCDMode);
# 691 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_DisableDebugPort(void);
# 700 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_EnableDebugPort(void);
# 709 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_SetTSOutClockPhase(MS_U16 u16Val);
# 718 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_SetTSClockPhase(SYS_PAD_MUX_SET ePadMuxType, MS_U16 u16Val);
# 727 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_PadMuxTableSuspend(void);
# 736 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_PadMuxTableResume(void);
# 745 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U32 MDrv_SYS_SetPowerState(EN_POWER_MODE u16PowerState);
# 754 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U32 MDrv_SYS_QueryDolbyHashInfo(E_SYS_DOLBY_HASH_INFO index);
# 763 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
E_SYS_CHIP_TYPE MDrv_SYS_GetChipType(void);
# 772 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_SetChipType(E_SYS_CHIP_TYPE Type);
# 781 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_GetDolbyKeyCustomer(MS_U8 * u8pkey);
# 790 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U16 MDrv_SYS_ReadBrickTerminatorStatus(void);
# 799 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
void MDrv_SYS_WriteBrickTerminatorStatus(MS_U16 u16Status);
# 808 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_GetEfuseDid(MS_U16 *u16efuse_did);
# 817 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_ReadEfuseHDCPKey(MS_U16 u16ReadAddr, MS_U32 *u32HDCPKey);
# 826 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_U32 MDrv_SYS_GetIpList(E_SYS_IP_TYPE TYPE);
# 835 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
E_SYS_ReturnValue __attribute__((weak)) MDrv_SYS_GetMemcConfg(MS_U32 u32SourceType, SYS_XC_TIMING_t *stXCTiming, MS_BOOL *retEnMemc);
# 845 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
E_SYS_ReturnValue __attribute__((weak)) MDrv_SYS_GetQoSConfig(E_SYS_QOS_QUERY_TYPE eQueryType, MS_U32 u32SourceType, void *stInfo, MS_BOOL *retEn);


MS_U32 MDrv_SYS_RegisterIoProc(E_SYS_IO_PROC dwIoType, void *pdwIoFunction);
void MDrv_SYS_ReadKernelCmdLine(void);
MS_U32 MDrv_SYS_SetTEEInfo(MS_U32 osType);
MS_U32 MDrv_SYS_GetTEEInfo(SYS_TEEINFO* TeeInfo);

#ifdef UFO_SYS_PADMUX
# 863 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSYS.h"
MS_BOOL MDrv_SYS_PadMuxCtrl(MS_U32 u32RegAddr, MS_U8 u8RegVal, MS_U8 u8Mask);
#endif

char* MDrv_SYS_GetUtopiaReleaseLabel(void);

#ifdef CONFIG_MSTAR_DVFS_KERNEL_SUPPORT
MS_S16 MDrv_SYS_GetCurrentTemperature(void);
MS_U16 MDrv_SYS_GetLowerLevelTemperature(void);
MS_U16 MDrv_SYS_GetUpperLevelTemperature(void);
MS_U16 MDrv_SYS_GetMaxLevelTemperature(void);
#endif





void Mdrv_SYS_VR360_Restore_BW_Setting(void);
void Mdrv_SYS_VR360_Set_BW_Setting(void);

#ifdef __cplusplus
}
#endif


#endif
# 108 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tee.h"
#ifndef __API_DMX_TEE_H__
#define __API_DMX_TEE_H__ 

#include "MsCommon.h"


#ifdef __cplusplus
extern "C"
{
#endif
# 127 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tee.h"
#define DMX_PIPE_NULL 0xFFFFFFFF
#define DMX_PIPE_TSPFW 0x00000001
#define DMX_PIPE_TSPVQ 0x00000002
#define DMX_PIPE_PVR_0 0x80000000
#define DMX_PIPE_PVR_1 0x80000001
#define DMX_PIPE_PVR_2 0x80000002
#define DMX_PIPE_PVR_3 0x80000003
#define DMX_PIPE_FILE_0 0x40000000
#define DMX_PIPE_FILE_1 0x40000001
#define DMX_PIPE_FILE_2 0x40000002
#define DMX_PIPE_FILE_3 0x40000003
#define DMX_PIPE_MMFI_0 0x41000000
#define DMX_PIPE_MMFI_1 0x41000001

#ifdef MSOS_TYPE_OPTEE
typedef struct
{
    MS_U32 ID[4];
}DMX_TEE_RESOURCE;
#endif

typedef struct _DMX_TEE_BUF_Param
{
    MS_U32 u32EngId;
    MS_U32 u32Opt;
    MS_U32 u32BufSize;
    MS_U32 u32BufAddr;
    MS_U32 u32BufAddr_H;
} DMX_TEE_BUF_Param;

typedef enum
{
    E_DMX_TEECMD_SET_TSPFW_BUF,
    E_DMX_TEECMD_SET_TSPVQ_BUF,
    E_DMX_TEECMD_SET_PVR_BUF,
    E_DMX_TEECMD_SET_FILEIN_BUF,
    E_DMX_TEECMD_SET_MMFI_BUF,
} DMX_TEE_USER_CMD;

typedef enum
{
    E_DMX_REE_TO_TEE_CMD_NULL,
    E_DMX_REE_TO_TEE_CMD_FW_LoadCode,
    E_DMX_REE_TO_TEE_CMD_SET_VqBuf,
    E_DMX_REE_TO_TEE_CMD_SET_PvrBuf,
    E_DMX_REE_TO_TEE_CMD_SET_FileinBuf,
    E_DMX_REE_TO_TEE_CMD_GET_PvrWPtr,
    E_DMX_REE_TO_TEE_CMD_SET_MMFIBuf
} DMX_REE_TO_TEE_CMD_TYPE;
# 189 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tee.h"
#ifdef MSOS_TYPE_NUTTX
MS_BOOL MApi_DMX_TEE_Create_Tee_System(void);
#endif
# 201 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tee.h"
MS_BOOL MApi_DMX_TEE_SetControl(DMX_TEE_USER_CMD cmd, void* param);
# 210 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tee.h"
MS_U32 MApi_DMX_TEE_ProcReeCmd(DMX_REE_TO_TEE_CMD_TYPE cmd, void* param);

#ifdef MSOS_TYPE_OPTEE







MS_U32 MApi_DMX_GetResourceByPipeID(MS_U32 u32PipeID, MS_U32* pu32MaxNRetRes, DMX_TEE_RESOURCE* pResource);
# 229 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tee.h"
MS_U32 MApi_DMX_ConfigPipe(MS_U32 u32PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);
# 238 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tee.h"
MS_U32 MApi_DMX_CheckPipe(MS_U32 u32PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
#ifndef _DRV_HDCP_H_
#define _DRV_HDCP_H_ 

#include "MsCommon.h"
# 122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP14TxInitHdcp(MS_U8 u8PortIdx);
# 131 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP14TxLoadKey(MS_U8* pu8KeyData, MS_BOOL bUseKmNewMode);







MS_BOOL MDrv_HDCP_HDCP14TxSetAuthPass(MS_U8 u8PortIdx);







MS_BOOL MDrv_HDCP_HDCP14TxEnableENC_EN(MS_U8 u8PortIdx, MS_BOOL bEnable);
# 156 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP14TxProcessAn(MS_U8 u8PortIdx, MS_BOOL bUseInternalAn, MS_U8* pu8An);







MS_BOOL MDrv_HDCP_HDCP14TxGetAKSV(MS_U8 u8PortIdx, MS_U8* pu8Aksv);







MS_BOOL MDrv_HDCP_HDCP14TxCompareRi(MS_U8 u8PortIdx, MS_U8* pu8SinkRi);







MS_BOOL MDrv_HDCP_HDCP14TxConfigMode(MS_U8 u8PortIdx, MS_U8 u8Mode);







MS_BOOL MDrv_HDCP_HDCP14TxGenerateCipher(MS_U8 u8PortIdx, MS_U8* pu8Bksv);






MS_BOOL MDrv_HDCP_HDCP14TxProcessR0(MS_U8 u8PortIdx);







MS_BOOL MDrv_HDCP_HDCP14TxGetM0(MS_U8 u8PortIdx, MS_U8* pu8M0);







MS_BOOL MDrv_HDCP_HDCP14GetM0(MS_U8 u8PortIdx, MS_U8 *pu8Data);






MS_BOOL MDrv_HDCP_HDCP14FillKey(MS_U8 *pu8KeyData);
# 227 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2Init(void);
# 236 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2TxModuleInit(MS_U8 u8PortIdx, MS_BOOL bEnable);







MS_BOOL MDrv_HDCP_HDCP2TxEnableEncrypt(MS_U8 u8PortIdx, MS_BOOL bEnable);
# 253 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2TxFillCipherKey(MS_U8 u8PortIdx, MS_U8 *pu8Riv, MS_U8 *pu8ContentKey);







MS_BOOL MDrv_HDCP_HDCP2TxGetCipherState(MS_U8 u8PortIdx, MS_U8 *pu8State);
# 270 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2TxSetAuthPass(MS_U8 u8PortIdx, MS_BOOL bEnable);
# 279 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2RxInit(MS_U8 u8PortIdx);
# 289 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2RxProcessCipher(MS_U8 u8PortIdx, MS_U8* pu8Riv, MS_U8 *pu8ContentKey);
# 298 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2RxSetSKEPass(MS_U8 u8PortIdx, MS_BOOL bEnable);
# 308 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2RxFillCipherKey(MS_U8 u8PortIdx, MS_U8* pu8Riv, MS_U8 *pu8ContentKey);
# 317 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_HDCP2RxGetCipherState(MS_U8 u8PortIdx, MS_U8 *pu8State);
# 326 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_GetHDCP2Status(MS_U32 u32HdmiPort, MS_U32 *pu32HDCPStatus);
# 335 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_SetHDCP2Status(MS_U32 u32HdmiPort, MS_U32 u32HDCPStatus);
# 344 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_GetHDCP1Status(MS_U32 u32HdmiPort, MS_U32 *pu32HDCPStatus);
# 353 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_SetHDCP1Status(MS_U32 u32HdmiPort, MS_U32 u32HDCPStatus);
# 362 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_GetHDMIStatus(MS_U32 u32HdmiPort, MS_U32 *pu32HDMIStatus);
# 371 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHDCP.h"
MS_BOOL MDrv_HDCP_SetHDMIStatus(MS_U32 u32HdmiPort, MS_U32 u32HDMIStatus);

#endif
# 130 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvXC_HDMI_if.h"
#ifndef DRVXC_HDMI_IF_H
#define DRVXC_HDMI_IF_H 

#include "MsDevice.h"
#include "MsCommon.h"
#ifdef __cplusplus
extern "C"
{
#endif





#ifdef MDRV_HDMI_C
#define INTERFACE 
#else
#define INTERFACE extern
#endif




#define _BYTE_0 0x00
#define _BYTE_1 0x01
#define _BYTE_2 0x02
#define _BYTE_3 0x03
#define _BYTE_4 0x04
#define _BYTE_5 0x05
#define _BYTE_6 0x06
#define _BYTE_7 0x07
#define _BYTE_8 0x08
#define _BYTE_9 0x09
#define _BYTE_10 0x0A
#define _BYTE_11 0x0B
#define _BYTE_12 0x0C
#define _BYTE_13 0x0D

#define MSIF_HDMI_LIB_CODE {'H','D','M','I'}
#define MSIF_HDMI_LIBVER {'0','1'}
#define MSIF_HDMI_BUILDNUM {'0','7'}
#define MSIF_HDMI_CHANGELIST {'0','0','3','5','1','6','6','3'}
#define HDMI_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_HDMI_LIB_CODE , \
    MSIF_HDMI_LIBVER , \
    MSIF_HDMI_BUILDNUM , \
    MSIF_HDMI_CHANGELIST, \
    MSIF_OS

#define HDMI_VSDB_PACKET_SIZE 14
#define HDMI_HDR_PACKET_SIZE HDMI_VSDB_PACKET_SIZE


#define HDMI_EXTEND_PACKET_RECEIVE_VERSION 2
#define HDMI_EXTEND_PACKET_RECEIVE_VERSION_1_SIZE 22


#define HDMI_HDR_METADATA_VERSION 1
#define HDMI_HDR_METADATA_VERSION_1_SIZE 30





typedef void (*HDCP22_Recv_CBF)(MS_U8, MS_U8, MS_U8*, MS_U32, void*);

typedef enum
{
    E_HDMI_SWITCH_VSDB_TO_HDR_PACKET,
    E_HDMI_HDR_INFOFRAME_GET,
    E_HDMI_EXTEND_PACKET_RECEIVE_GET,

    E_HDMI_INTERFACE_CMD_GET_HDCP_STATE = 0x500,

    E_HDMI_INTERFACE_CMD_WRITE_X74,
    E_HDMI_INTERFACE_CMD_READ_X74,
    E_HDMI_INTERFACE_CMD_SET_REPEATER,
    E_HDMI_INTERFACE_CMD_SET_BSTATUS,
    E_HDMI_INTERFACE_CMD_SET_HDMI_MODE,
    E_HDMI_INTERFACE_CMD_GET_INTERRUPT_STATUS,
    E_HDMI_INTERFACE_CMD_WRITE_KSV_LIST,
    E_HDMI_INTERFACE_CMD_SET_VPRIME,

    E_HDMI_INTERFACE_CMD_GET_HDCP_ENC_STATE
} E_HDMI_CTRL_ID;


typedef enum
{
    REST_AVMUTE = _BIT(8),
    REST_Y_COLOR = _BIT(9),
    REST_PIXEL_REPETITION = _BIT(10),
    REST_FRAME_REPETITION = _BIT(11),
    REST_GCP_PKT = _BIT(12),
    REST_DEEP_COLOR_FIFO = _BIT(13),
    REST_RESERVE = _BIT(14),
    REST_HDMI_STATUS = _BIT(15),
}HDMI_REST_t;




typedef enum
{


    HDMI_AF_AR_Reserve_0 = 0x00,
    HDMI_AF_AR_Reserve_1 = 0x01,
    HDMI_AF_AR_16x9_Top = 0x02,
    HDMI_AF_AR_14x9_Top = 0x03,
    HDMI_AF_AR_GT_16x9 = 0x04,
    HDMI_AF_AR_Reserve_5 = 0x05,
    HDMI_AF_AR_Reserve_6 = 0x06,
    HDMI_AF_AR_Reserve_7 = 0x07,
    HDMI_AF_AR_SAME = 0x08,
    HDMI_AF_AR_4x3_C = 0x09,
    HDMI_AF_AR_16x9_C = 0x0A,
    HDMI_AF_AR_14x9_C = 0x0B,
    HDMI_AF_AR_Reserve_12 = 0x0C,
    HDMI_AF_AR_4x3_with_14x9_C = 0x0D,
    HDMI_AF_AR_16x9_with_14x9_C = 0x0E,
    HDMI_AF_AR_16x9_with_4x3_C = 0x0F,


    HDMI_Pic_AR_NODATA = 0x00,
    HDMI_Pic_AR_4x3 = 0x10,
    HDMI_Pic_AR_16x9 = 0x20,
    HDMI_Pic_AR_RSV = 0x30,
} MS_HDMI_AR_TYPE;




typedef enum
{
    E_AVI_INFOFRAME_VERSION_NON,
    E_AVI_INFOFRAME_VERSION1,
    E_AVI_INFOFRAME_VERSION2,
    E_AVI_INFOFRAME_VERSION3
}EN_AVI_INFOFRAME_VERSION;

#define HDMI_AR_INIT_VALUE (HDMI_Pic_AR_RSV)
#define HDMI_AR_REG_MASK (0x3F)
#define HDMI_AFAR_MASK (0x0F)
#define HDMI_AR_MASK (0x30)


typedef enum
{
    G_CTRL_AVMUTE = 0,
    G_Ctrl_DEFAULT_PHASE,
    G_Ctrl_LAST_PP,
    G_Ctrl_PRE_LPP,
    G_Ctrl_CD_VAL,
    G_Ctrl_PP_VAL,
    G_Ctrl_ALL
}HDMI_GControl_INFO_t;


typedef enum
{
    PLL_CTRL_L=0,
    PLL_CTRL_MANUAL_DIV,
    PLL_CTRL_PORST,
    PLL_CTRL_RESET_TP,
    PLL_CTRL_RESET_TF,
    PLL_CTRL_RESET_TI,
    PLL_CTRL_VCO_OFFSET,
    PLL_CTRL_RESET,
    PLL_CTRL_PWRDOWN,

    PLL_CTRL_H,
    PLL_CTRL_KN,
    PLL_CTRL_RCTRL,
    PLL_CTRL_ICTRL,
}HDMI_PLL_CTRL_t;


typedef enum
{
    PLL_CTRL2_L,
    PLL_CTRL2_KP,
    PLL_CTRL2_KM,

    PLL_CTRL2_H,
    PLL_CTRL2_DDIV,
    PLL_CTRL2_FBDIV,
}HDMI_PLL_CTRL2_t;


typedef struct
{
    MS_BOOL bIsHDMIMode;
    MS_BOOL bMuteHDMIVideo;

    MS_BOOL bMuteHDMIAudio;
    MS_BOOL bEnableNonPCM;
    MS_U8 u8AudioStbCnt;


    MS_U8 u8AudioForceEnableCnt;

    MS_U8 u8ColorFormat;
    MS_U8 u8LostHDMICounter;
    MS_BOOL bColorFMTChange;
    MS_U8 u8PreClolrFormat;
    MS_U8 u8AspectRatio;
} HDMI_POLLING_STATUS_t;

typedef enum
{
    MS_DVI_CHANNEL_R,
    MS_DVI_CHANNEL_G,
    MS_DVI_CHANNEL_B,
} MS_DVI_CHANNEL_TYPE;


typedef enum
{
    MS_HDMI_COLOR_RGB,
    MS_HDMI_COLOR_YUV_422,
    MS_HDMI_COLOR_YUV_444,
    MS_HDMI_COLOR_YUV_420,
    MS_HDMI_COLOR_RESERVED,
    MS_HDMI_COLOR_DEFAULT = MS_HDMI_COLOR_RGB,
    MS_HDMI_COLOR_UNKNOWN = 7,
} MS_HDMI_COLOR_FORMAT;


typedef enum
{
    MS_HDMI_EXT_COLOR_XVYCC601,
    MS_HDMI_EXT_COLOR_XVYCC709,
    MS_HDMI_EXT_COLOR_SYCC601,
    MS_HDMI_EXT_COLOR_ADOBEYCC601,
    MS_HDMI_EXT_COLOR_ADOBERGB,
    MS_HDMI_EXT_COLOR_BT2020YcCbcCrc,
    MS_HDMI_EXT_COLOR_BT2020RGBYCbCr,
    MS_HDMI_EXT_COLOR_DEFAULT = MS_HDMI_EXT_COLOR_XVYCC601,
    MS_HDMI_EXT_COLOR_UNKNOWN = 7,
} MS_HDMI_EXT_COLORIMETRY_FORMAT;


typedef enum
{
    MS_HDMI_CONTENT_NoData = 0,
    MS_HDMI_CONTENT_Graphics,
    MS_HDMI_CONTENT_Photo,
    MS_HDMI_CONTENT_Cinema,
    MS_HDMI_CONTENT_Game,
} MS_HDMI_CONTENT_TYPE;


typedef enum
{
    E_HDMI_COLOR_RANGE_DEFAULT,
    E_HDMI_COLOR_RANGE_LIMIT,
    E_HDMI_COLOR_RANGE_FULL,
    E_HDMI_COLOR_RANGE_RESERVED
} EN_HDMI_COLOR_RANGE;


typedef enum
{
    MS_HDMI_EQ_2M,
    MS_HDMI_EQ_10M,
    MS_HDMI_EQ_15M,
    MS_HDMI_EQ_MAX,
    MS_HDMI_EQ_USER_DEFINE,
} MS_HDMI_EQ;


typedef enum
{
    PKT_MPEG = _BIT(0),
    PKT_AUI = _BIT(1),
    PKT_SPD = _BIT(2),
    PKT_AVI = _BIT(3),
    PKT_GC = _BIT(4),
    PKT_ASAMPLE = _BIT(5),
    PKT_ACR = _BIT(6),
    PKT_VS = _BIT(7),
    PKT_NULL = _BIT(8),
    PKT_ISRC2 = _BIT(9),
    PKT_ISRC1 = _BIT(10),
    PKT_ACP = _BIT(11),
    PKT_ONEBIT_AUD = _BIT(12),
    PKT_GM = _BIT(13),
    PKT_HBR = _BIT(14),
    PKT_VBI = _BIT(15),
    PKT_HDR = _BIT(16),
    PKT_RSV = _BIT(17),
    PKT_EDR = _BIT(18),
}MS_HDMI_PACKET_STATE_t;

typedef enum
{
    CAPS_DVI_ADJ_70M = _BIT(0),
    CAPS_VSYNC_END_EN = _BIT(1),
}MS_HDMI_FUNC_CAPS;


typedef struct __attribute__((packed))
{
    MS_U16 PKT_MPEG_VALUE;
    MS_U16 PKT_AUI_VALUE;
    MS_U16 PKT_SPD_VALUE;
    MS_U16 PKT_AVI_VALUE;
    MS_U16 PKT_GC_VALUE;
    MS_U16 PKT_ASAMPLE_VALUE;
    MS_U16 PKT_ACR_VALUE;
    MS_U16 PKT_VS_VALUE;
    MS_U16 PKT_NULL_VALUE;
    MS_U16 PKT_ISRC2_VALUE;
    MS_U16 PKT_ISRC1_VALUE;
    MS_U16 PKT_ACP_VALUE;
    MS_U16 PKT_ONEBIT_AUD_VALUE;
}MS_HDMI_PACKET_VALUE_t;


typedef struct __attribute__((packed))
{
    MS_U16 u16Version;
    MS_U16 u16Size;
    MS_BOOL bPKT_MPEG_RECEIVE;
    MS_BOOL bPKT_AUI_RECEIVE;
    MS_BOOL bPKT_SPD_RECEIVE;
    MS_BOOL bPKT_AVI_RECEIVE;
    MS_BOOL bPKT_GC_RECEIVE;
    MS_BOOL bPKT_ASAMPLE_RECEIVE;
    MS_BOOL bPKT_ACR_RECEIVE;
    MS_BOOL bPKT_VS_RECEIVE;
    MS_BOOL bPKT_NULL_RECEIVE;
    MS_BOOL bPKT_ISRC2_RECEIVE;
    MS_BOOL bPKT_ISRC1_RECEIVE;
    MS_BOOL bPKT_ACP_RECEIVE;
    MS_BOOL bPKT_ONEBIT_AUD_RECEIVE;
    MS_BOOL bPKT_GM_RECEIVE;
    MS_BOOL bPKT_HBR_RECEIVE;
    MS_BOOL bPKT_VBI_RECEIVE;
    MS_BOOL bPKT_HDR_RECEIVE;
    MS_BOOL bPKT_RSV_RECEIVE;
    MS_BOOL bPKT_EDR_VALID;
}MS_HDMI_EXTEND_PACKET_RECEIVE_t;



typedef struct
{
    MS_U8 AVMuteStatus;
    MS_U8 AudioNotPCM;
    MS_U8 PreAudiostatus;
    MS_U8 ChecksumErrOrBCHParityErr;
    MS_U8 PacketColorFormat;
    MS_U8 AspectRatio;
    MS_U8 AudioPacketErr;
    MS_U8 ACPType;
} MS_HDMI_PACKET_STATUS_t;


typedef struct
{
    MS_HDMI_PACKET_VALUE_t enPKT_Value;
    MS_HDMI_PACKET_STATUS_t enPKT_Status;
} HDMI_PACKET_INFO_t, *P_HDMI_PACKET_INFO_t;


typedef struct __attribute__((packed))
{
    MS_BOOL b_St_HDMI_Mode;
    MS_BOOL b_St_Reserve_1;
    MS_BOOL b_St_HDCP_Ver;
    MS_BOOL b_St_AVMute;
    MS_BOOL b_St_ENC_En;
    MS_BOOL b_St_AKsv_Rcv;
    MS_BOOL b_St_ENC_Dis;
    MS_BOOL b_St_Reserve_7;
}MS_HDCP_STATUS_INFO_t;


typedef enum
{
    E_BLACK_LEVEL_LOW = 0,
    E_BLACK_LEVEL_HIGH,
} BLACK_LEVEL;


typedef enum
{
    E_XC_PROG_DVI0_EDID = 0x00,
    E_XC_PROG_DVI1_EDID = 0x01,
    E_XC_PROG_DVI2_EDID = 0x02,
    E_XC_PROG_DVI3_EDID = 0x03,
    E_XC_PROG_VGA_EDID = 0x10,
} E_XC_DDCRAM_PROG_TYPE;

typedef struct DLL_PACKED
{
    MS_U8 *EDID;
    MS_U16 u16EDIDSize;
    E_XC_DDCRAM_PROG_TYPE eDDCProgType;

    MS_U16 u16CECPhyAddr;
    MS_U8 u8CECPhyAddrIdxL;
    MS_U8 u8CECPhyAddrIdxH;
} XC_DDCRAM_PROG_INFO;




typedef struct
{
    MS_BOOL bHPD_OK;
    MS_U16 u16HPD_Counter;
    MS_U16 u16HDCP_KeyCounter;
    MS_U16 u16HDCP_KeyChkSum;
    MS_BOOL bIsPullHighHPD;
    MS_U8 u8BKSV[5];

} HDCP_POLLING_STATUS_t;




typedef enum
{

    E_HDMI_RET_FAIL = 0,

    E_HDMI_RET_OK,
} HDMI_Ret_Value;



typedef enum
{
    E_HDMI_NO_ADDITIONAL_FORMAT,
    E_HDMI_4Kx2K_FORMAT,
    E_HDMI_3D_FORMAT,
    E_HDMI_RESERVED,
    E_HDMI_NA
} E_HDMI_ADDITIONAL_VIDEO_FORMAT;

typedef enum
{
    E_VIC_4Kx2K_30Hz = 0x01,
    E_VIC_4Kx2K_25Hz = 0x02,
    E_VIC_4Kx2K_24Hz = 0x03,
    E_VIC_4Kx2K_24Hz_SMPTE = 0x04,
    E_VIC_RESERVED,
    E_VIC_NA
} E_HDMI_VIC_4Kx2K_CODE;

typedef enum
{
    E_3D_EXT_DATA_HOR_SUB_SAMPL_0,
    E_3D_EXT_DATA_HOR_SUB_SAMPL_1,
    E_3D_EXT_DATA_HOR_SUB_SAMPL_2,
    E_3D_EXT_DATA_HOR_SUB_SAMPL_3,
    E_3D_EXT_DATA_QUINCUNX_MATRIX_0,
    E_3D_EXT_DATA_QUINCUNX_MATRIX_1,
    E_3D_EXT_DATA_QUINCUNX_MATRIX_2,
    E_3D_EXT_DATA_QUINCUNX_MATRIX_3,
    E_3D_EXT_DATA_RESERVE,
    E_3D_EXT_DATA_MODE_MAX,
} E_HDMI_3D_EXT_DATA_T;

typedef enum
{
    E_3D_META_DATA_PARALLAX_ISO23002_3,
    E_3D_META_DATA_RESERVE,
    E_3D_META_DATA_MAX,
} E_HDMI_3D_META_DATA_TYPE;

typedef struct
{
    MS_BOOL bImmeswitchSupport;
    MS_U8 ucMHLSupportPath;
} stHDMI_INITIAL_TABLE;

typedef struct DLL_PACKED
{
    MS_BOOL b3D_Meta_Present;
    E_HDMI_3D_META_DATA_TYPE t3D_Metadata_Type;
    MS_U8 u83D_Metadata_Length;
    MS_U8 u83D_Metadata[23];
} sHDMI_3D_META_FIELD;


typedef enum
{
 E_HDCP22_IF_HDMI,
 E_HDCP22_IF_MIRACAST,

} E_HDCP22_PORT_TYPE;

typedef enum
{
    E_HDCP_NO_ENCRYPTION = 0,
    E_HDCP_1_4,
    E_HDCP_2_2,
}E_HDMI_HDCP_STATE;

typedef enum
{
    E_HDCP_NOT_ENCRYPTION = 0,
    E_HDCP_1_4_ENCRYPTION,
    E_HDCP_2_2_ENCRYPTION,
}E_HDMI_HDCP_ENCRYPTION_STATE;


typedef struct __attribute__((packed))
{
    MS_U16 u16Version;
    MS_U16 u16Size;
    MS_U8 u8EOTF;
    MS_U8 u8Static_Metadata_ID;
    MS_U16 u16Display_Primaries_X[3];
    MS_U16 u16Display_Primaries_Y[3];
    MS_U16 u16White_Point_X;
    MS_U16 u16White_Point_Y;
    MS_U16 u16Max_Display_Mastering_Luminance;
    MS_U16 u16Min_Display_Mastering_Luminance;
    MS_U16 u16Maximum_Content_Light_Level;
    MS_U16 u16Maximum_Frame_Average_Light_Level;
} sHDR_METADATA;






typedef struct __attribute__((packed))
{
    MS_BOOL bEnableHDR;
} MS_HDMI_Switch_VSDB_to_HDR_Parameters;




typedef struct __attribute__((packed))
{
    sHDR_METADATA *pstHDRMetadata;
} MS_HDMI_HDR_InfoFrame_Get_Parameters;




typedef struct __attribute__((packed))
{
    MS_BOOL bEnable;
    MS_HDMI_EXTEND_PACKET_RECEIVE_t *pstPacketReceive;
} MS_HDMI_Extend_Packet_Receive_Get_Parameters;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucHDCPState;
} stCMD_HDMI_CHECK_HDCP_STATE;


typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucOffset;
    MS_U8 ucData;
} stCMD_HDCP_WRITE_X74;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucOffset;
    MS_U8 ucRetData;
} stCMD_HDCP_READ_X74;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bIsRepeater;
} stCMD_HDCP_SET_REPEATER;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U16 usBstatus;
} stCMD_HDCP_SET_BSTATUS;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bHDMIMode;
} stCMD_HDCP_SET_HDMI_MODE;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucRetIntStatus;
} stCMD_HDCP_GET_INTERRUPT_STATUS;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8* pucKSV;
    MS_U32 ulLen;
} stCMD_HDCP_WRITE_KSV_LIST;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8* pucVPrime;
} stCMD_HDCP_SET_VPRIME;


typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucHDCPENCState;
} stCMD_HDMI_CHECK_HDCP_ENC_STATE;

typedef enum
{
    E_HDMI_GET_HDE,
    E_HDMI_GET_VDE,
    E_HDMI_GET_HTT,
    E_HDMI_GET_VTT,
} E_HDMI_GET_DATA_INFO;






INTERFACE HDMI_POLLING_STATUS_t g_HdmiPollingStatus;


INTERFACE HDCP_POLLING_STATUS_t g_HdcpPollingStatus;

INTERFACE MS_U16 g_AVMUTEMissingCounter;
INTERFACE MS_U16 g_AVIMissingCounter;
INTERFACE MS_U16 g_ACPMissingCounter;

#ifdef DVI_NEW_Patch

INTERFACE MS_U16 g_DVI70MhzPollingCounter;
INTERFACE MS_U8 g_DVI70MhzUnstableCounter;
INTERFACE MS_BOOL g_bDVILess70MHz;

#endif



INTERFACE MS_U16 MDrv_HDMI_Func_Caps(void);
INTERFACE void MDrv_HDMI_init( void );
INTERFACE void MDrv_HDMI_Exit( void );
INTERFACE void MDrv_HDMI_pkt_reset( HDMI_REST_t breset );
INTERFACE void MDrv_HDMI_pullhpd( MS_BOOL bHighLow, E_MUX_INPUTPORT enInputPortType, MS_BOOL bInverse);
INTERFACE MS_U16 MDrv_HDMI_GC_Info(HDMI_GControl_INFO_t gcontrol);
INTERFACE MS_HDMI_PACKET_VALUE_t MDrv_HDMI_Packet_Received(MS_BOOL bEnable);
INTERFACE MS_HDMI_COLOR_FORMAT MDrv_HDMI_Get_ColorFormat(void);
INTERFACE EN_HDMI_COLOR_RANGE MDrv_HDMI_Get_ColorRange(void);
INTERFACE MS_HDMI_CONTENT_TYPE MDrv_HDMI_Get_Content_Type(void);
INTERFACE MS_HDMI_EXT_COLORIMETRY_FORMAT MDrv_HDMI_Get_ExtColorimetry(void);

INTERFACE void MDrv_HDMI_Set_EQ(MS_HDMI_EQ enEq, MS_U8 u8EQValue);
INTERFACE MS_BOOL MDrv_HDMI_Set_EQ_To_Port(MS_HDMI_EQ enEq, MS_U8 u8EQValue, E_MUX_INPUTPORT enInputPortType);
INTERFACE void MDrv_HDMI_Audio_MUTE_Enable(MS_U16 u16MuteEvent, MS_U16 u16MuteMask);
INTERFACE void MDrv_HDMI_Audio_Status_Clear(void);

INTERFACE MS_HDMI_AR_TYPE MDrv_HDMI_Get_AspectRatio(MS_BOOL bEn_PAR, MS_BOOL bEn_AFAR);
INTERFACE MS_HDMI_AR_TYPE MDrv_HDMI_Get_ActiveFormat_AspectRatio(MS_BOOL bEn_AFAR);
INTERFACE EN_AVI_INFOFRAME_VERSION MDrv_HDMI_Get_AVIInfoFrameVer(void);

INTERFACE MS_U8 MDrv_HDMI_err_status_update(MS_U8 u8value, MS_BOOL bread);
INTERFACE void MDrv_HDMI_Get_PollingStatus(HDMI_POLLING_STATUS_t **pStatus);
INTERFACE MS_BOOL MDrv_HDMI_IsHDMI_Mode(void);

INTERFACE void MDrv_HDMI_Get_MID_info(MS_U8 * pu8ManufactorData);
INTERFACE MS_BOOL MDrv_HDMI_get_packet_value(MS_HDMI_PACKET_STATE_t u8state, MS_U8 u8byte_idx, MS_U8 *pValue);


INTERFACE MS_U16 MDrv_DVI_ChannelPhaseStatus( MS_DVI_CHANNEL_TYPE u8Channel);
INTERFACE void MDrv_DVI_HF_adjust( void );
INTERFACE void MDrv_DVI_SoftwareReset( MS_U16 u16Reset );
INTERFACE void mdrv_dvi_reset(void);
INTERFACE void MDrv_DVI_ClkPullLow(MS_BOOL bPullLow, E_MUX_INPUTPORT enInputPortType);
INTERFACE void MDrv_DVI_SwitchSrc(E_MUX_INPUTPORT enInputPortType);
INTERFACE MS_BOOL MDrv_HDMI_SetForClockLessThan70Mhz( E_MUX_INPUTPORT InputSourceType );
INTERFACE void MDrv_HDMI_dvi_adjust( MS_BOOL bClockLessThan70MHz);
INTERFACE void MDrv_HDMI_SetUpdatePhaseLineCount(INPUT_SOURCE_TYPE_t enInputSourceType);
INTERFACE MS_U16 MDrv_HDMI_GetTMDSFreq(void);



INTERFACE void MDrv_HDCP_Enable(MS_BOOL bEnable);
INTERFACE MS_BOOL MDrv_HDMI_SetHdcpEnable(E_MUX_INPUTPORT enInputPortType,MS_BOOL bEnable);
INTERFACE void MDrv_HDCP_ClearStatus( void );
INTERFACE void MDrv_HDCP_initproductionkey( MS_U8 * pu8HdcpKeyData );
INTERFACE MS_HDCP_STATUS_INFO_t* MDrv_HDCP_GetStatus(void );
INTERFACE void MDrv_HDCP_Vsync_end_en(MS_BOOL bStable);


INTERFACE void MDrv_HDMI_audio_output( MS_BOOL bEnable );
INTERFACE MS_U8 MDrv_HDMI_audio_cp_hdr_info(void);
INTERFACE MS_U8 MDrv_HDMI_audio_channel_status(MS_U8 u8byte);






typedef struct __attribute__((packed))
{
    MS_U8 u8SupportPorts;
}MS_HDMI_INFO;




typedef struct __attribute__((packed))
{
    MS_BOOL bIsInitialized;
    MS_BOOL bIsRunning;
}MS_HDMI_Status;

INTERFACE HDMI_Ret_Value MDrv_HDMI_GetLibVer(const MSIF_Version **ppVersion);
INTERFACE HDMI_Ret_Value MDrv_HDMI_GetInfo(MS_HDMI_INFO *pInfo);
INTERFACE HDMI_Ret_Value MDrv_HDMI_GetStatus(MS_HDMI_Status *pStatus);
INTERFACE MS_BOOL MDrv_HDMI_Get_AVIInfoActiveInfoPresent(void);


INTERFACE void MDrv_HDMI_READ_DDCRAM(XC_DDCRAM_PROG_INFO *pstDDCRam_Info, MS_U32 u32SizeOfInfo);
INTERFACE void MDrv_HDMI_PROG_DDCRAM(XC_DDCRAM_PROG_INFO *pstDDCRam_Info, MS_U32 u32SizeOfInfo);
INTERFACE MS_U8 MDrv_HDMI_Get_Pixel_Repetition(void);


INTERFACE void MDrv_HDMI_3D_4Kx2K_Process(void);
INTERFACE void MDrv_HDMI_AVG_ScaleringDown(MS_BOOL bTrue);
INTERFACE MS_BOOL MDrv_HDMI_Check4K2K(void);
INTERFACE E_HDMI_ADDITIONAL_VIDEO_FORMAT MDrv_HDMI_Check_Additional_Format(void);
INTERFACE E_XC_3D_INPUT_MODE MDrv_HDMI_Get_3D_Structure(void);
INTERFACE E_HDMI_3D_EXT_DATA_T MDrv_HDMI_Get_3D_Ext_Data(void);
INTERFACE void MDrv_HDMI_Get_3D_Meta_Field(sHDMI_3D_META_FIELD *pdata);
INTERFACE MS_U8 MDrv_HDMI_Get_VIC_Code(void);
INTERFACE E_HDMI_VIC_4Kx2K_CODE MDrv_HDMI_Get_4Kx2K_VIC_Code(void);

INTERFACE void MDrv_HDMI_ARC_PINControl(E_MUX_INPUTPORT enInputPortType, MS_BOOL bEnable, MS_BOOL bDrivingHigh);
INTERFACE void MDrv_DVI_Software_Reset(E_MUX_INPUTPORT enInputPortType, MS_U16 u16Reset);
INTERFACE MS_BOOL MDrv_HDMI_CheckHDMI20_Setting(E_MUX_INPUTPORT enInputPortType);
INTERFACE void MDrv_HDMI_StablePolling(void);
INTERFACE MS_U8 MDrv_HDMI_GetSourceVersion(E_MUX_INPUTPORT enInputPortType);
INTERFACE void SYMBOL_WEAK MDrv_HDMI_Set5VDetectGPIOSelect(MS_U32 ul5VDetectGPIOIndex);
INTERFACE MS_BOOL SYMBOL_WEAK MDrv_HDMI_GetDEStableStatus(E_MUX_INPUTPORT enInputPortType);
INTERFACE MS_BOOL SYMBOL_WEAK MDrv_HDMI_CheckHDCP14(void);
INTERFACE E_HDMI_HDCP_STATE MDrv_HDMI_CheckHDCPState(E_MUX_INPUTPORT enInputPortType);

INTERFACE MS_BOOL SYMBOL_WEAK MDrv_HDMI_Ctrl(MS_U32 u32Cmd, void *pBuf, MS_U32 u32BufSize);
INTERFACE MS_U16 MDrv_HDMI_GetDataInfo(E_HDMI_GET_DATA_INFO enInfo);




INTERFACE MS_U32 MDrv_HDMI_SetPowerState(EN_POWER_MODE enPowerState);


INTERFACE void MDrv_HDCP22_FillCipherKey(MS_U8 pucPortIdx, MS_U8 * pucRiv,MS_U8 * pucSessionKey);
INTERFACE void MDrv_HDCP22_InitCBFunc(HDCP22_Recv_CBF pCBFunc, void* pContext);
INTERFACE void MDrv_HDCP22_PortInit(MS_U8 ucPortIdx);
INTERFACE MS_BOOL MDrv_HDCP22_PollingReadDone(MS_U8 ucPortIdx);
INTERFACE void MDrv_HDCP22_EnableCipher(MS_U8 ucPortType, MS_U8 ucPortIdx, MS_BOOL bIsEnable);
INTERFACE void MDrv_HDCP22_SendMsg(MS_U8 ucPortType, MS_U8 ucPortIdx, MS_U8* pucData, MS_U32 dwDataLen, void* pDummy);
INTERFACE void MDrv_HDCP22_Handler(MS_U8 ucPortIdx);


#if 0
INTERFACE MS_U8 u8PSDVIStableCount[4];
void MDrv_HDMI_ImmeswitchPS_Handler(void);
void MDrv_DVI_ForceAllPortsEnterPS(void);
#endif
#undef INTERFACE


#ifdef __cplusplus
}
#endif

#endif
# 142 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#ifndef _DRVBDMA_H_
#define _DRVBDMA_H_ 
# 154 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"
#include "UFO.h"

#define BDMA_UTOPIA20 (1)




#define MSIF_BDMA_LIB_CODE {'B','D','M','A'}
#define MSIF_BDMA_LIBVER {'0','3'}
#define MSIF_BDMA_BUILDNUM {'0','1'}
#define MSIF_BDMA_CHANGELIST {'0','0','3','4','8','0','3','3'}

#define BDMA_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_BDMA_LIB_CODE, \
    MSIF_BDMA_LIBVER, \
    MSIF_BDMA_BUILDNUM, \
    MSIF_BDMA_CHANGELIST, \
    MSIF_OS


#define _LShift(v,n) ((v) << (n))
#define _RShift(v,n) ((v) >> (n))

#define BDMA_SEARCH_ALL_MATCHED (0)
#define BDMA_CRC32_POLY (0x04C11DB7)
#define BDMA_CRC16_POLY (0x8005)
#define BDMA_CRC_SEED_0 (0)
#define BDMA_CRC_SEED_F (0xFFFFFFFF)


#define BDMA_OPCFG_DEF (0)
#define BDMA_OPCFG_INV_COPY (0x01)
#define BDMA_OPCFG_CRC_REFLECT (0x02)
#define BDMA_OPCFG_CRC_COPY (0x04)
#define BDMA_OPCFG_NOWAIT_COPY (0x08)
#define BDMA_OPCFG_MOBF_PS (0x10)

typedef enum _BDMA_DbgLv
{
    E_BDMA_DBGLV_NONE
    ,E_BDMA_DBGLV_PERFORMANCE
    ,E_BDMA_DBGLV_ERR_ONLY
    ,E_BDMA_DBGLV_REG_DUMP
    ,E_BDMA_DBGLV_INFO
    ,E_BDMA_DBGLV_ALL
}BDMA_DbgLv;

typedef enum _BDMA_Dev
{
    E_BDMA_DEV_MIU0
    ,E_BDMA_DEV_MIU1
    ,E_BDMA_DEV_SEARCH
    ,E_BDMA_DEV_CRC32
    ,E_BDMA_DEV_MEM_FILL
    ,E_BDMA_DEV_FLASH
    ,E_BDMA_DEV_DMDMCU
    ,E_BDMA_DEV_VDMCU
    ,E_BDMA_DEV_DSP
    ,E_BDMA_DEV_TSP
    ,E_BDMA_DEV_1KSRAM_HK51
    ,E_BDMA_DEV_MIU2
    ,E_BDMA_DEV_MIU3
    ,E_BDMA_DEV_NOT_SUPPORT
}BDMA_Dev;

typedef enum _BDMA_SrcDev
{
    E_BDMA_SRCDEV_MIU0 = E_BDMA_DEV_MIU0
    ,E_BDMA_SRCDEV_MIU1 = E_BDMA_DEV_MIU1
    ,E_BDMA_SRCDEV_MEM_FILL = E_BDMA_DEV_MEM_FILL
    ,E_BDMA_SRCDEV_FLASH = E_BDMA_DEV_FLASH
    ,E_BDMA_SRCDEV_MIU2 = E_BDMA_DEV_MIU2
    ,E_BDMA_SRCDEV_MIU3 = E_BDMA_DEV_MIU3
    ,E_BDMA_SRCDEV_NOT_SUPPORT = E_BDMA_DEV_NOT_SUPPORT
}BDMA_SrcDev;

typedef enum _BDMA_DstDev
{
    E_BDMA_DSTDEV_MIU0 = E_BDMA_DEV_MIU0
    ,E_BDMA_DSTDEV_MIU1 = E_BDMA_DEV_MIU1
    ,E_BDMA_DSTDEV_SEARCH = E_BDMA_DEV_SEARCH
    ,E_BDMA_DSTDEV_CRC32 = E_BDMA_DEV_CRC32
    ,E_BDMA_DSTDEV_DMDMCU = E_BDMA_DEV_DMDMCU
    ,E_BDMA_DSTDEV_VDMCU = E_BDMA_DEV_VDMCU
    ,E_BDMA_DSTDEV_DSP = E_BDMA_DEV_DSP
    ,E_BDMA_DSTDEV_TSP = E_BDMA_DEV_TSP
    ,E_BDMA_DSTDEV_HK51_1KSRAM = E_BDMA_DEV_1KSRAM_HK51
    ,E_BDMA_DSTDEV_MIU2 = E_BDMA_DEV_MIU2
    ,E_BDMA_DSTDEV_MIU3 = E_BDMA_DEV_MIU3
    ,E_BDMA_DSTDEV_NOT_SUPPORT = E_BDMA_DEV_NOT_SUPPORT
}BDMA_DstDev;

#define BDMA_SET_CPYTYPE(src,dst) ((src & 0x0F) | _LShift((dst &0x0F), 8))

typedef enum _BDMA_CpyType
{
    E_BDMA_SDRAM2SDRAM = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_MIU0)
    ,E_BDMA_SDRAM2SDRAM1 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_MIU1)
    ,E_BDMA_SDRAM2SDRAM2 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_MIU2)
    ,E_BDMA_SDRAM2SDRAM3 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_MIU3)
    ,E_BDMA_SDRAM2DMDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_DMDMCU)
    ,E_BDMA_SDRAM2VDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_VDMCU)
    ,E_BDMA_SDRAM2DSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_DSP)
    ,E_BDMA_SDRAM2TSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_TSP)
    ,E_BDMA_SDRAM2SRAM1K_HK51 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU0, E_BDMA_DEV_1KSRAM_HK51)
    ,E_BDMA_SDRAM12SDRAM = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_MIU0)
    ,E_BDMA_SDRAM12SDRAM1 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_MIU1)
    ,E_BDMA_SDRAM12SDRAM2 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_MIU2)
    ,E_BDMA_SDRAM12SDRAM3 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_MIU3)
    ,E_BDMA_SDRAM12DMDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_DMDMCU)
    ,E_BDMA_SDRAM12VDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_VDMCU)
    ,E_BDMA_SDRAM12DSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_DSP)
    ,E_BDMA_SDRAM12TSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_TSP)
    ,E_BDMA_SDRAM12SRAM1K_HK51 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU1, E_BDMA_DEV_1KSRAM_HK51)
    ,E_BDMA_SDRAM22SDRAM = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_MIU0)
    ,E_BDMA_SDRAM22SDRAM1 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_MIU1)
    ,E_BDMA_SDRAM22SDRAM2 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_MIU2)
    ,E_BDMA_SDRAM22SDRAM3 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_MIU3)
    ,E_BDMA_SDRAM22DMDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_DMDMCU)
    ,E_BDMA_SDRAM22VDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_VDMCU)
    ,E_BDMA_SDRAM22DSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_DSP)
    ,E_BDMA_SDRAM22TSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_TSP)
    ,E_BDMA_SDRAM22SRAM1K_HK51 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU2, E_BDMA_DEV_1KSRAM_HK51)
    ,E_BDMA_SDRAM32SDRAM = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_MIU0)
    ,E_BDMA_SDRAM32SDRAM1 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_MIU1)
    ,E_BDMA_SDRAM32SDRAM2 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_MIU2)
    ,E_BDMA_SDRAM32SDRAM3 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_MIU3)
    ,E_BDMA_SDRAM32DMDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_DMDMCU)
    ,E_BDMA_SDRAM32VDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_VDMCU)
    ,E_BDMA_SDRAM32DSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_DSP)
    ,E_BDMA_SDRAM32TSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_TSP)
    ,E_BDMA_SDRAM32SRAM1K_HK51 = BDMA_SET_CPYTYPE(E_BDMA_DEV_MIU3, E_BDMA_DEV_1KSRAM_HK51)
    ,E_BDMA_FLASH2SDRAM = BDMA_SET_CPYTYPE(E_BDMA_DEV_FLASH, E_BDMA_DEV_MIU0)
    ,E_BDMA_FLASH2SDRAM1 = BDMA_SET_CPYTYPE(E_BDMA_DEV_FLASH, E_BDMA_DEV_MIU1)
    ,E_BDMA_FLASH2DMDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_FLASH, E_BDMA_DEV_DMDMCU)
    ,E_BDMA_FLASH2VDMCU = BDMA_SET_CPYTYPE(E_BDMA_DEV_FLASH, E_BDMA_DEV_VDMCU)
    ,E_BDMA_FLASH2DSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_FLASH, E_BDMA_DEV_DSP)
    ,E_BDMA_FLASH2TSP = BDMA_SET_CPYTYPE(E_BDMA_DEV_FLASH, E_BDMA_DEV_TSP)
    ,E_BDMA_FLASH2SRAMHK51 = BDMA_SET_CPYTYPE(E_BDMA_DEV_FLASH, E_BDMA_DEV_1KSRAM_HK51)
    ,E_BDMA_CPYTYPE_MAX
}BDMA_CpyType;

typedef enum _BDMA_Result
{
    E_BDMA_NOT_SUPPORT = -1
    ,E_BDMA_FAIL = 0
    ,E_BDMA_OK = 1
    ,E_BDMA_TIMEOUT
    ,E_BDMA_QUEUE_FULL
    ,E_BDMA_BUSY
}BDMA_Result;

typedef struct _BDMA_HwInfo
{
    MS_BOOL bEnMIU1;
    MS_BOOL bEnHost;
    MS_BOOL bEnMemFill;
    MS_BOOL bEnFlsCpy;
    MS_BOOL bEnDevDw;
    MS_BOOL bEnDmyWrCnt;
    MS_BOOL bEnDMDMCU;
    MS_BOOL bEnTSP;
    MS_BOOL bEnDSP;
    MS_BOOL bEnHK51_1KSRAM;
}BDMA_HwInfo;

typedef struct _BDMA_Info
{
    MS_U8 u8ChNum;
    MS_U16 u16ChipVer;
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    MS_U32 u32IOMap;
    MS_U32 u32MIU1Base;
#else
    MS_VIRT u32IOMap;
    MS_PHY phy64MIU1Base;
#endif
    MS_S32 s32Mutex;
    MS_BOOL bInit;
    BDMA_DbgLv eDbgLv;
    BDMA_HwInfo sHwCap;
}BDMA_Info;

typedef struct _BDMA_ChStatus
{
    MS_BOOL bIsBusy;
    MS_BOOL bIsInt;
    MS_BOOL bIsFound;
}BDMA_ChStatus;

typedef struct DLL_PACKED _BDMA_Status
{
    MS_BOOL bInit;
    BDMA_DbgLv eDbgLv;
    BDMA_ChStatus sChSta[2];
}BDMA_Status;

#ifdef MOBF_ENABLE

typedef struct DLL_PACKED _BDMA_MOBF_PS
{
    MS_U32 u32Pattern;
    MS_U32 u32ExcluBit;
    MS_U32 u32MobfKey;
}BDMA_MOBF_PS;

#endif

typedef void (*BDMA_ISR_CBF)(BDMA_Result eRet);







#include "drvBDMA_v2.h"
# 395 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
BDMA_Result MDrv_BDMA_GetLibVer(const MSIF_Version **ppVersion);
# 404 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
void MDrv_BDMA_GetStatus(BDMA_Status *pStatus);
# 413 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
const BDMA_Info* MDrv_BDMA_GetInfo(void);
# 422 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
MS_U32 MDrv_BDMA_GetMinSize(void);
# 431 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
BDMA_Result MDrv_BDMA_SetDbgLevel(BDMA_DbgLv eLevel);
# 440 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
BDMA_Result MDrv_BDMA_Init(MS_U32 u32Miu1Base);
#else
BDMA_Result MDrv_BDMA_Init(MS_PHY phy64Miu1Base);
#endif
# 453 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_U32 MDrv_BDMA_Search(MS_PHYADDR u32Addr, MS_U32 u32Len, MS_U32 u32Pattern, MS_U32 u32ExcluBit, BDMA_SrcDev eDev);
#else
MS_U32 MDrv_BDMA_Search(MS_PHY phy64Addr, MS_U32 u32Len, MS_U32 u32Pattern, MS_U32 u32ExcluBit, BDMA_SrcDev eDev);
#endif
#ifdef MOBF_ENABLE
# 467 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_U32 MDrv_BDMA_MOBFSearch(MS_PHYADDR u32Addr, MS_U32 u32Len, BDMA_MOBF_PS *pMobfPsCfg, BDMA_SrcDev eDev);
#else
MS_PHY MDrv_BDMA_MOBFSearch(MS_PHY phy64Addr, MS_U32 u32Len, BDMA_MOBF_PS *pMobfPsCfg, BDMA_SrcDev eDev);
#endif
#endif
# 481 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_U32 MDrv_BDMA_CRC32(MS_PHYADDR u32Addr, MS_U32 u32Len, MS_U32 u32Poly, MS_U32 u32Seed, BDMA_SrcDev eDev, MS_BOOL bReflect);
#else
MS_U32 MDrv_BDMA_CRC32(MS_PHY phy64Addr, MS_U32 u32Len, MS_U32 u32Poly, MS_U32 u32Seed, BDMA_SrcDev eDev, MS_BOOL bReflect);
#endif
# 494 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
BDMA_Result MDrv_BDMA_PatternFill(MS_PHYADDR u32Addr, MS_U32 u32Len, MS_U32 u32Pattern, BDMA_DstDev eDev);
#else
BDMA_Result MDrv_BDMA_PatternFill(MS_PHY u32Addr, MS_U32 u32Len, MS_U32 u32Pattern, BDMA_DstDev eDev);
#endif
# 507 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
BDMA_Result MDrv_BDMA_MemCopy(MS_PHYADDR u32SrcAddr, MS_PHYADDR u32DstAddr, MS_U32 u32Len);
#else
BDMA_Result MDrv_BDMA_MemCopy(MS_PHY phy64SrcAddr, MS_PHY phy64DstAddr, MS_U32 u32Len);
#endif
# 520 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
BDMA_Result MDrv_BDMA_FlashCopy2Dram(MS_PHYADDR u32FlashAddr, MS_PHYADDR u32DramAddr, MS_U32 u32Len);
#else
BDMA_Result MDrv_BDMA_FlashCopy2Dram(MS_PHY phy64FlashAddr, MS_PHY phy64DramAddr, MS_U32 u32Len);
#endif
# 533 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
BDMA_Result MDrv_BDMA_CopyHnd(MS_PHYADDR u32SrcAddr, MS_PHYADDR u32DstAddr, MS_U32 u32Len, BDMA_CpyType eCpyType, MS_U8 u8OpCfg);
#else
BDMA_Result MDrv_BDMA_CopyHnd(MS_PHY phy64SrcAddr, MS_PHY phy64DstAddr, MS_U32 u32Len, BDMA_CpyType eCpyType, MS_U8 u8OpCfg);
#endif
# 546 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
MS_U32 MDrv_BDMA_SetPowerState(EN_POWER_MODE u16PowerState);
# 555 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
BDMA_Result MDrv_BDMA_WaitFlashDone(void);
# 564 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
void MDrv_BDMA_SetSPIOffsetForMCU(void);
# 575 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
void MDrv_BDMA_DumpCB(void *pvOpCB);
# 584 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
BDMA_Result MDrv_BDMA_Stop_All(void);
# 593 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
BDMA_Result MDrv_BDMA_Stop(MS_U8 u8Ch);
# 602 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA.h"
BDMA_Result MDrv_BDMA_Exit(void);


#ifdef __cplusplus
}
#endif
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2_v2.h"
#ifndef _DRV_DVBT2_V2_H_
#define _DRV_DVBT2_V2_H_ 



#include "drvDMD_INTERN_DVBT2.h"
#ifdef __cplusplus
extern "C"
{
#endif



typedef enum {
    DMD_DVBT2_DRV_CMD_Init ,
    DMD_DVBT2_DRV_CMD_Exit ,
    DMD_DVBT2_DRV_CMD_SetDbgLevel ,
    DMD_DVBT2_DRV_CMD_GetInfo ,
    DMD_DVBT2_DRV_CMD_GetLibVer ,
    DMD_DVBT2_DRV_CMD_GetFWVer ,
    DMD_DVBT2_DRV_CMD_GetReg ,
    DMD_DVBT2_DRV_CMD_SetReg ,
    DMD_DVBT2_DRV_CMD_SetSerialControl ,
    DMD_DVBT2_DRV_CMD_SetReset ,
    DMD_DVBT2_DRV_CMD_SetConfig ,
    DMD_DVBT2_DRV_CMD_SetActive ,
    DMD_DVBT2_DRV_CMD_GetLock ,


    DMD_DVBT2_DRV_CMD_GetSNR ,
    DMD_DVBT2_DRV_CMD_GetPostLdpcBer ,
    DMD_DVBT2_DRV_CMD_GetPreLdpcBer ,
    DMD_DVBT2_DRV_CMD_GetPacketErr ,
    DMD_DVBT2_DRV_CMD_GetL1Info ,
    DMD_DVBT2_DRV_CMD_GetFreqOffset ,
    DMD_DVBT2_DRV_CMD_NORDIG_SSI_Table_Write ,
    DMD_DVBT2_DRV_CMD_NORDIG_SSI_Table_Read ,
    DMD_DVBT2_DRV_CMD_SetPowerState ,
    DMD_DVBT2_DRV_CMD_GetPlpBitMap ,
    DMD_DVBT2_DRV_CMD_GetPlpGroupID ,
    DMD_DVBT2_DRV_CMD_SetPlpID ,

} DMD_DVBT2_DRV_COMMAND;



typedef struct DLL_PACKED _DMD_DVBT2_InitData_Transform
{

    MS_U8 u8SarChannel;
# 168 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2_v2.h"
    MS_U8 *u8DMD_DVBT2_DSPRegInitExt;
    MS_U8 u8DMD_DVBT2_DSPRegInitSize;
    MS_U8 *u8DMD_DVBT2_InitExt;

    MS_U32 u32EqStartAddr;
    MS_U32 u32TdiStartAddr;
    MS_U32 u32DjbStartAddr;
    MS_U32 u32FwStartAddr;
} DMD_DVBT2_InitData_Transform;


typedef struct DLL_PACKED _DVBT2_INIT_PARAM
{
 DMD_DVBT2_InitData_Transform *pDMD_DVBT2_InitData;
 MS_U32 u32InitDataLen;
 MS_BOOL ret;
}DVBT2_INIT_PARAM, *PDVBT2_INIT_PARAM;


typedef struct DLL_PACKED _DVBT2_EXIT_PARAM
{
 MS_BOOL ret;
}DVBT2_EXIT_PARAM, *PDVBT2_EXIT_PARAM;


typedef struct DLL_PACKED _DVBT2_SETDBGLEVEL_PARAM
{
 DMD_T2_DbgLv u8DbgLevel;
 MS_BOOL ret;
}DVBT2_SETDBGLEVEL_PARAM, *PDVBT2_SETDBGLEVEL_PARAM;

typedef struct DLL_PACKED _DVBT2_GETINFO_PARAM
{
 DMD_DVBT2_INFO_TYPE eInfoType;
 DMD_DVBT2_Info* pInfo;
 MS_BOOL ret;
}DVBT2_GETINFO_PARAM, *PDVBT2_GETINFO_PARAM;


typedef struct DLL_PACKED _DVBT2_GETLIBVER_PARAM
{
 const MSIF_Version **ppVersion;
 MS_BOOL ret;
}DVBT2_GETLIBVER_PARAM, *PDVBT2_GETLIBVER_PARAM;


typedef struct DLL_PACKED _DVBT2_GETFWVER_PARAM
{
 MS_U16 *ver;
 MS_BOOL ret;
}DVBT2_GETFWVER_PARAM, *PDVBT2_GETFWVER_PARAM;

typedef struct DLL_PACKED _DVBT2_GETREG_PARAM
{
 MS_U16 u16Addr;
 MS_U8 *pu8Data;
 MS_BOOL ret;
}DVBT2_GETREG_PARAM, *PDVBT2_GETREG_PARAM;

typedef struct DLL_PACKED _DVBT2_SETREG_PARAM
{
 MS_U16 u16Addr;
 MS_U8 u8Data;
 MS_BOOL ret;
}DVBT2_SETREG_PARAM, *PDVBT2_SETREG_PARAM;

typedef struct DLL_PACKED _DVBT2_SETSERIALCONTROL_PARAM
{
 MS_BOOL bEnable;
 MS_BOOL ret;
}DVBT2_SETSERIALCONTROL_PARAM,*PDVBT2_SETSERIALCONTROL_PARAM;

typedef struct DLL_PACKED _DVBT2_SETCONFIG_PARAM
{
 DMD_DVBT2_RF_CHANNEL_BANDWIDTH BW;
 MS_BOOL bSerialTS;
       MS_U8 u8PlpID;
 MS_BOOL ret;
}DVBT2_SETCONFIG_PARAM,*PDVBT2_SETCONFIG_PARAM;

typedef struct DLL_PACKED _DVBT2_SETACTIVE_PARAM
{
 MS_BOOL bEnable;
 MS_BOOL ret;
}DVBT2_SETACTIVE_PARAM,*PDVBT2_SETACTIVE_PARAM;

typedef struct DLL_PACKED _DVBT2_GETLOCK_PARAM
{
 DMD_DVBT2_GETLOCK_TYPE eType;
 DMD_T2_LOCK_STATUS *eLockStatus;
 MS_BOOL ret;
}DVBT2_GETLOCK_PARAM, *PDVBT2_GETLOCK_PARAM;

#if 0
typedef struct DLL_PACKED _DVBT2_GETSIGNALSTRENGTHWITHRFPOWER_PARAM
{
 MS_U16 *u16Strength;
 float fRFPowerDbm ;
 MS_BOOL ret;
}DVBT2_GETSIGNALSTRENGTHWITHRFPOWER_PARAM,*PDVBT2_GETSIGNALSTRENGTHWITHRFPOWER_PARAM;

typedef struct DLL_PACKED _DVBT2_GETSIGNALQUALITYWITHRFPOWER_PARAM
{
 MS_U16 *u16Quality;
 float fRFPowerDbm;
 MS_BOOL ret;
}DVBT2_GETSIGNALQUALITYWITHRFPOWER_PARAM,*PDVBT2_GETSIGNALQUALITYWITHRFPOWER_PARAM;
#endif

#if 0
typedef struct DLL_PACKED _DVBT2_GETSNR_PARAM
{
 float *fSNR;
 MS_BOOL ret;
}DVBT2_GETSNR_PARAM,*PDVBT2_GETSNR_PARAM;
#else
typedef struct DLL_PACKED _DVBT2_GETSNR_PARAM
{
    MS_U16 *u16_snr100;
    MS_U8 *snr_cali;
    MS_U8 *u8_gi;
    MS_BOOL ret;
}DVBT2_GETSNR_PARAM,*PDVBT2_GETSNR_PARAM;
#endif

#if 0
typedef struct DLL_PACKED _DVBT2_GETPOSTLDPCBER_PARAM
{
 float *ber;
 MS_BOOL ret;
}DVBT2_GETPOSTLDPCBER_PARAM,*PDVBT2_GETPOSTLDPCBER_PARAM;
#else
typedef struct DLL_PACKED _DVBT2_GETPOSTLDPCBER_PARAM
{
    MS_U32 *BitErr_reg;
    MS_U16 *BitErrPeriod_reg;
    MS_U16 *FecType;
    MS_BOOL ret;
}DVBT2_GETPOSTLDPCBER_PARAM,*PDVBT2_GETPOSTLDPCBER_PARAM;
#endif

#if 0
typedef struct DLL_PACKED _DVBT2_GETPRELDPCBERPARAM
{
 float *ber;
 MS_BOOL ret;
}DVBT2_GETPRELDPCBERPARAM,*PDVBT2_GETPRELDPCBERPARAM;
#else
typedef struct DLL_PACKED _DVBT2_GETPRELDPCBERPARAM
{
    MS_U32 *BitErr_reg;
    MS_U16 *BitErrPeriod_reg;
    MS_U16 *FecType;
    MS_BOOL ret;
}DVBT2_GETPRELDPCBERPARAM,*PDVBT2_GETPRELDPCBERPARAM;
#endif

typedef struct DLL_PACKED _DVBT2_GETPACKETERRPARAM
{
 MS_U16 *pktErr;
 MS_BOOL ret;
}DVBT2_GETPACKETERRPARAM,*PDVBT2_GETPACKETERRPARAM;


typedef struct DLL_PACKED _DVBT2_GETL1INFO_PARAM
{
 MS_U16 *u16Info;
 DMD_DVBT2_SIGNAL_INFO eSignalType;
 MS_BOOL ret;
}DVBT2_GETL1INFO_PARAM,*PDVBT2_GETL1INFO_PARAM;

#if 0
typedef struct DLL_PACKED _DVBT2_GETFREQOFFSET_PARAM
{
 float *pFreqOff;
 MS_BOOL ret;
}DVBT2_GETFREQOFFSET_PARAM,*PDVBT2_GETFREQOFFSET_PARAM;
#else
typedef struct DLL_PACKED _DVBT2_GETFREQOFFSET_PARAM
{
    MS_U32 *CfoTd_reg;
    MS_U32 *CfoFd_reg;
    MS_U32 *Icfo_reg;
    MS_U8 *fft_reg;
    MS_BOOL ret;
}DVBT2_GETFREQOFFSET_PARAM,*PDVBT2_GETFREQOFFSET_PARAM;
#endif

#if 0
typedef struct DLL_PACKED _DVBT2_NORDIG_SSI_TABLE_WRITE_PARAM
{
 DMD_T2_CONSTEL constel;
 DMD_T2_CODERATE code_rate;
 float write_value;
 MS_BOOL ret;
}DVBT2_NORDIG_SSI_TABLE_WRITE_PARAM,*PDVBT2_NORDIG_SSI_TABLE_WRITE_PARAM;

typedef struct DLL_PACKED _DVBT2_NORDIG_SSI_TABLE_READ
{
 DMD_T2_CONSTEL constel;
 DMD_T2_CODERATE code_rate;
 float *read_value;
 MS_BOOL ret;
}DVBT2_NORDIG_SSI_TABLE_READ_PARAM,*PDVBT2_NORDIG_SSI_TABLE_READ;
#endif

typedef struct DLL_PACKED _DVBT2_SETPOWERSTATE_PARAM
{
 EN_POWER_MODE u16PowerState;
 MS_U32 ret;
}DVBT2_SETPOWERSTATE_PARAM,*PDVBT2_SETPOWERSTATE_PARAM;

typedef struct DLL_PACKED _DVBT2_GETPLPBITMAP_PARAM
{
 MS_U8* u8PlpBitMap;
 MS_BOOL ret;
}DVBT2_GETPLPBITMAP_PARAM,*PDVBT2_GETPLPBITMAP_PARAM;

typedef struct DLL_PACKED _DVBT2_GETPLPGROUPID_PARAM
{
 MS_U8 u8PlpID;
 MS_U8* u8GroupID;
 MS_BOOL ret;
}DVBT2_GETPLPGROUPID_PARAM,*PDVBT2_GETPLPGROUPID_PARAM;

typedef struct DLL_PACKED _DMD_DVBT2_SETPLPID_PARAM
{
 MS_U8 u8PlpID;
 MS_U8 u8GroupID;
 MS_BOOL ret;
}DMD_DVBT2_SETPLPID_PARAM,*PDMD_DVBT2_SETPLPID_PARAM;
# 412 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2_v2.h"
MS_U32 DVBT2Open(void** pInstantTmp, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 DVBT2Close(void* pInstantTmp);
MS_U32 DVBT2Ioctl(void* pInstantTmp, MS_U32 u32Cmd, void* pArgs);



#ifdef __cplusplus
}
#endif

#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB_v2.h"
#ifndef __DRV_DSCMB_V2_H__
#define __DRV_DSCMB_V2_H__ 

#include "drvDSCMB.h"

#ifdef __cplusplus
extern "C"
{
#endif

#define DSCMB_IV_LENGTH 16
#define DSCMB_KEY_LENGTH 16
#define DSCMB_HDCP2_RIV_LENGTH 8
#define DSCMB_MULTI2_SYSKEY_LENGTH 32

typedef enum {
    E_DSCMB_ENG0,
    E_DSCMB_ENG1,
    E_DSCMB_ENG2,
    E_DSCMB_UNKNOWN,
} eDscmbEngID;

typedef enum {

    E_MDRV_CMD_DSCMB_Init,
    E_MDRV_CMD_DSCMB_Exit,
    E_MDRV_CMD_DSCMB_SetPowerState,

    E_MDRV_CMD_DSCMB_FltAlloc,
    E_MDRV_CMD_DSCMB_FltFree,
    E_MDRV_CMD_DSCMB_FltConnectFltId,
    E_MDRV_CMD_DSCMB_FltConnectPid,
    E_MDRV_CMD_DSCMB_FltDisconnectFltId,
    E_MDRV_CMD_DSCMB_FltDisconnectPid,


    E_MDRV_CMD_DSCMB_FltDscmb,
    E_MDRV_CMD_DSCMB_FltTypeSet,
    E_MDRV_CMD_DSCMB_FltKeySet,
    E_MDRV_CMD_DSCMB_FltKeyReset,
    E_MDRV_CMD_DSCMB_FltIVSet,

    E_MDRV_CMD_DSCMB_HDCP2_SetRiv,
    E_MDRV_CMD_DSCMB_Multi2_SetRound,
    E_MDRV_CMD_DSCMB_Multi2_SetSysKey,
    E_MDRV_CMD_DSCMB_ES_SetStaticKey,
    E_MDRV_CMD_DSCMB_PidFlt_ScmbStatus,
    E_MDRV_CMD_DSCMB_PVR_RecCtrl,


    E_MDRV_CMD_DSCMB_SetDefaultCAVid,
    E_MDRV_CMD_DSCMB_EngSetAlgo,
    E_MDRV_CMD_DSCMB_EngSetKeyFSCB,
    E_MDRV_CMD_DSCMB_EngSetKey,
    E_MDRV_CMD_DSCMB_EngResetKey,
    E_MDRV_CMD_DSCMB_EngSetIV,
    E_MDRV_CMD_DSCMB_EngSetSwitch,
    E_MDRV_CMD_DSCMB_EngSetFSCB,


    E_MDRV_CMD_DSCMB_KLadder_AtomicExec,
    E_MDRV_CMD_DSCMB_KLadder_ETSI,


    E_MDRV_CMD_DSCMB_QueryCap,
    E_MDRV_CMD_DSCMB_SetDBGLevel,
    E_MDRV_CMD_DSCMB_GetLibVer,
    E_MDRV_CMD_DSCMB_GetConnectStatus,
    E_MDRV_CMD_DSCMB_OptConfig,

    E_MDRV_CMD_DSCMB_HDCP2_SetRiv_Ex,


    E_MDRV_CMD_DSCMB_CAPVR_FlowSet,
    E_MDRV_CMD_DSCMB_DualPath_Enable,
    E_MDRV_CMD_DSCMB_DualPath_Disable,

    E_MDRV_CMD_DSCMB_EngSetIV_Ex,

    E_MDRV_CMD_DSCMB_MAX,
} eDscmbIoctlOpt;

typedef struct DLL_PACKED _DSCMB_QUERYCAP
{
    MS_U32 u32EngId;
    DSCMB_Query_Type eQueryType;
    void* pInput;
    void* pOutput;
} DSCMB_QUERYCAP;

typedef struct DLL_PACKED _DSCMB_OPTCONFIG
{
    MS_U32 u32EngId;
    DSCMB_Option eOpt;
    void* pInput;
    void* pOutput;
    MS_BOOL bSet;
} DSCMB_OPTCONFIG;

typedef struct DLL_PACKED _DSCMB_FLTALLOC
{
    MS_U32 u32EngId;
    DSCMB_Flt_Type eFltType;
    MS_U32 u32DscmbId;
} DSCMB_FLTALLOC;

typedef struct DLL_PACKED _DSCMB_FLTFREE
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
} DSCMB_FLTFREE;

typedef struct DLL_PACKED _DSCMB_CONNECTFLT
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    MS_U32 u32DmxFltId;
} DSCMB_CONNECTFLT, DSCMB_DISCONNECTFLT, DSCMB_CONNECTSTATUS;

typedef struct DLL_PACKED _DSCMB_CONNECTPID
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    MS_U32 u32Pid;
} DSCMB_CONNECTPID, DSCMB_DISCONNECTPID;

typedef struct DLL_PACKED _DSCMB_FLTDSCMB
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    MS_BOOL bDscmb;
} DSCMB_FLTDSCMB;

typedef struct DLL_PACKED _DSCMB_FLTIVSET
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Key_Type eKeyType;
    union {
        MS_U8* pu8IV;
        MS_U8* pu8Key;
    };
} DSCMB_FLTIVSET, DSCMB_FLTKEYSET, DSCMB_ENGIV;

typedef struct DLL_PACKED _DSCMB_FLTKEYRESET
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Key_Type eKeyType;
} DSCMB_FLTKEYRESET;

typedef struct DLL_PACKED _DSCMB_TYPESET
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Type eType;
} DSCMB_TYPESET;

typedef struct DLL_PACKED _DSCMB_HDCP2_SETRIV
{
    MS_U32 u32EngId;
    MS_U8* pu8Riv;
} DSCMB_HDCP2_SETRIV;

typedef struct DLL_PACKED _DSCMB_HDCP2_SETRIV_EX
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    MS_U8* pu8Riv;
} DSCMB_HDCP2_SETRIV_EX;

typedef struct DLL_PACKED _DSCMB_MULTI2_SETSYSKEY
{
    MS_U32 u32EngId;
    MS_U8* pu8SysKey;
} DSCMB_MULTI2_SETSYSKEY;

typedef struct DLL_PACKED _DSCMB_MULTI2_SETROUND
{
    MS_U32 u32EngId;
    MS_U32 u32Round;
} DSCMB_MULTI2_SETROUND;

typedef struct DLL_PACKED _DSCMB_ES_SETSTATICKEY
{
    MS_U32 u32EngId;
    MS_U8* pu8StaticKey;
} DSCMB_ES_SETSTATICKEY;

typedef struct DLL_PACKED _DSCMB_SCMBSTATUS
{
    MS_U32 u32EngId;
    MS_U32 u32DmxFltId;
    SCMB_Level* pScmbLevel;
} DSCMB_DSCMBSTATUS;

typedef struct DLL_PACKED _DSCMB_PVR_RECCTRL
{
    MS_U32 u32EngId;
    MS_BOOL bEnable;
} DSCMB_PVR_RECCTRL;

typedef struct DLL_PACKED _DSCMB_DEFAULT_CAVID
{
    MS_U32 u32EngId;
    MS_U32 u32CAVid;
} DSCMB_DEFAULT_CAVID;

typedef struct DLL_PACKED _DSCMB_ENGFSCB
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_FSCB eForceSCB;
} DSCMB_ENGFSCB;

typedef struct DLL_PACKED _DSCMB_ENGSWITCH
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Eng_Type eUppSwitch;
    DSCMB_Eng_Type eLowSwitch;
} DSCMB_ENGSWITCH;

typedef struct DLL_PACKED _DSCMB_ENGALGO
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Eng_Type eEngType;
    DSCMB_Algo_Cfg stConfig;
} DSCMB_ENGALGO;

typedef struct DLL_PACKED _DSCMB_ENGKEYFSCB
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Eng_Type eEngType;
    DSCMB_Key_Type eKeyType;
    DSCMB_FSCB eForceSCB;
} DSCMB_ENGKEYFSCB;

typedef struct DLL_PACKED _DSCMB_ENGKEY
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Eng_Type eEngType;
    DSCMB_Key_Type eKeyType;
    union {
        MS_U8* pu8IV;
    MS_U8* pu8Key;
    };
} DSCMB_ENGKEY, DSCMB_ENGIV_EX;

typedef struct DLL_PACKED _DSCMB_ENGRESETKEY
{
    MS_U32 u32EngId;
    MS_U32 u32DscmbId;
    DSCMB_Eng_Type eEngType;
    DSCMB_Key_Type eKeyType;
} DSCMB_ENGRESETKEY;

typedef struct DLL_PACKED _DSCMB_CAPVR_FLOWSET
{
    MS_U32 u32EngId;
    DSCMB_CAPVR_MODE eCaMode;
    DSCMB_TSIF ePvrSrcTsif;
} DSCMB_CAPVR_FLOWSET;

typedef struct DLL_PACKED _DSCMB_DUALPATH
{
    MS_U32 u32EngId;
    MS_U32 u32DmxFltId;
} DSCMB_DUALPATH;

typedef struct DLL_PACKED _DSCMB_KL_ATOMICEXEC
{
    DSCMB_KLCfg_All* KLCfg;
    MS_U8* ACPU_Out;
    DSCMB_KL_Status* u32Status;
} DSCMB_KL_ATOMICEXEC;

typedef struct DLL_PACKED _DSCMB_KL_ETSI
{
    DSCMB_KLCfg_All* KLCfg;
    MS_U8* ACPU_Out;
    MS_U8* pu8Nonce;
    MS_U8* pu8Response;
    DSCMB_KL_Status* u32Status;
} DSCMB_KL_ETSI;

MS_U32 DSCMBOpen(void** pInstantTmp, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 DSCMBClose(void* pInstantTmp);
MS_U32 DSCMBIoctl(void* pInstantTmp, MS_U32 u32Cmd, void* pu32Args);


#ifdef __cplusplus
}
#endif

#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/cmdq_service.h"
#ifndef __CMD_SERVICE_HH__
#define __CMD_SERVICE_HH__ 
#include "MsTypes.h"

typedef enum
{
    CMDQEVE_S0_MDW_W_DONE,
    CMDQEVE_S0_MGW_FIRE,
    CMDQEVE_S1_MDW_W_DONE,
    CMDQEVE_S1_MGW_FIRE,
    CMDQEVE_DMAGEN_TRIGGER0,
    CMDQEVE_DMAGEN_TRIGGER1,
    CMDQEVE_BDMA_TRIGGER0,
    CMDQEVE_BDMA_TRIGGER1,
    CMDQEVE_IVE_CMDQ_TRIG,
    CMDQEVE_LDC_CMDQ_TRIG,
    CMDQEVE_GE_CMDQ_TRIG,
    CMDQEVE_REG_DUMMY_TRIG,
    CMDQEVE_CORE1_MHE_TRIG,
    CMDQEVE_CORE0_MHE_TRIG,
    CMDQEVE_CORE1_MFE_TRIG,
    CMDQEVE_CORE0_MFE_TRIG,
    CMDQEVE_DIP_TRIG,
    CMDQEVE_GOP_TRIG4,
    CMDQEVE_GOP_TRIG2,
    CMDQEVE_GOP_TRIG013,
    CMDQEVE_SC_TRIG2,
    CMDQEVE_SC_TRIG013,
    CMDQEVE_ISP_TRIG,
    CMDQEVE_MAX
}MI_CMDQ_EVENT_ID;

typedef enum
{
   CMDQ_ID_VPE = 0,
   CMDQ_ID_DIVP,
   CMDQ_ID_H265_VENC0,
   CMDQ_ID_H265_VENC1,
   CMDQ_ID_H264_VENC0,
   CMDQ_ID_MAX
}MI_CMDQ_ID;


typedef struct _cmdq_buffer_descript_s
{
    MS_U32 uCmdqBufSize;
    MS_U16 uCmdqBufSizeAlign;
    MS_U32 uMloadBufSize;
    MS_U16 uMloadBufSizeAlign;
}cmdq_buffer_descript_t;
typedef struct _cmd_mload_interface_s cmd_mload_interface;
struct _cmd_mload_interface_s
{

  MS_PHY (*get_next_mload_ringbuf_write_ptr)(cmd_mload_interface *cmdinf);
  MS_PHY (*update_mload_ringbuf_read_ptr)(cmd_mload_interface *cmdinf, MS_PHY next_read_ptr);
  MS_S32 (*mload_copy_buf)(cmd_mload_interface *cmdinf, void *mload_buf, MS_U32 size,
                                                                                MS_U16 u16Alignment, MS_PHY *phyRetAddr);
  MS_U16 (*check_buf_available)(cmd_mload_interface *cmdinf , MS_U32 cmdq_num);
  MS_S32 (*write_dummy_reg_cmdq)(cmd_mload_interface *cmdinf, MS_U16 value);
  MS_U32 (*read_dummy_reg_cmdq)(cmd_mload_interface *cmdinf);

  MS_S32 (*write_reg_cmdq_mask)(cmd_mload_interface *cmdinf, MS_U32 reg_addr, MS_U16 value, MS_U16 write_mask);
  MS_S32 (*write_reg_cmdq)(cmd_mload_interface *cmdinf, MS_U32 reg_addr, MS_U16 value);
  MS_S32 (*cmdq_poll_reg_bits)(cmd_mload_interface *cmdinf, MS_U32 reg_addr, MS_U16 value, MS_U16 write_mask);
  MS_S32 (*cmdq_add_wait_event_cmd)(cmd_mload_interface *cmdinf, MS_U16 event);
  MS_S32 (*cmdq_abort_command)(cmd_mload_interface *cmdinf);

  MS_S32 (*kick_off_cmdq)(cmd_mload_interface *cmdinf);

  MS_S32 (*is_cmdq_empty_idle)(cmd_mload_interface *cmdinf);

  VOID *ctx;
};

cmd_mload_interface *get_sys_cmdq_service(MI_CMDQ_ID cmdqId, cmdq_buffer_descript_t *pCmdqBufDesp ,MS_BOOL bForceRIU);

void release_sys_cmdq_service(MI_CMDQ_ID cmdqId);
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCH34_v2.h"
#ifndef _CH34_H_
#define _CH34_H_ 



#ifdef __cplusplus
extern "C"
{
#endif







typedef enum
{

    MAPI_CMD_CH34_INIT,
    MAPI_CMD_CH34_SETMODE,
    MAPI_CMD_CH34_WRITETABLE,
    MAPI_CMD_CH34_TURNONOFF,
    MAPI_CMD_CH34_SETATTRIBUTE,
    MAPI_CMD_CH34_GENERALCTRL,
}E_CH34_API_CMD_TYPE;

typedef struct
{
 CH34_Drv_Result bReturnValue;
}CH34_INIT_INFO, *PCH34_INIT_INFO;

typedef struct
{
 E_CH34_CHANNEL channel;
 E_CH34_VIDEO_SYS videosys;
 E_CH34_AUDIO_SYS audiosys;
 CH34_Drv_Result bReturnValue;
}CH34_SET_MODE_INFO, *PCH34_SET_MODE_INFO;

typedef struct{
    CH34_ATTRIBUTE_INFO *pInfo;
    CH34_Drv_Result bReturnValue;
}stCH34_SET_ATTRIBUTE_INFO, *pstCH34_SET_ATTRIBUTE_INFO;

typedef struct
{
    MS_U32 u32Cmd;
    void *pu8Buf;
    MS_U32 u32BufSize;
    MS_BOOL bReturn;
} stCH34_GeneralCtrl, *pstCH34_GeneralCtrl;

typedef struct
{
 MS_U8* pTable;
 CH34_Drv_Result bReturnValue;
}CH34_WRITE_TABLE_INFO, *PCH34_WRITE_TABLE_INFO;

typedef struct
{
 MS_BOOL bOn;
 CH34_Drv_Result bReturnValue;
}CH34_TURN_ONOFF_INFO, *PCH34_TURN_ONOFF_INFO;

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM_v2.h"
#ifndef _DRV_PWM_V2_H_
#define _DRV_PWM_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif






typedef enum {
    MDrv_CMD_PWM_Oen,
    MDrv_CMD_PWM_Period,
    MDrv_CMD_PWM_DutyCycle,
    MDrv_CMD_PWM_UnitDiv,
    MDrv_CMD_PWM_Div,
    MDrv_CMD_PWM_Polarity,
    MDrv_CMD_PWM_Vdben,
    MDrv_CMD_PWM_ResetEn,
    MDrv_CMD_PWM_Dben,
    MDrv_CMD_PWM_Shift,
    MDrv_CMD_PWM_Nvsync,
} ePwmIoctlOpt;
# 142 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM_v2.h"
typedef struct _PWM_OEN_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_BOOL bOenPWM;
}PWM_OEN_PARAM, *PPWM_OEN_PARAM;

typedef struct _PWM_PERIOD_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_U32 u32PeriodPWM;
}PWM_PERIOD_PARAM, *PPWM_PERIOD_PARAM;

typedef struct _PWM_DUTYCYCLE_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_U32 u32DutyPWM;
}PWM_DUTYCYCLE_PARAM, *PPWM_DUTYCYCLE_PARAM;

typedef struct _PWM_UNITDIV_PARAM
{
    MS_U16 u16UnitDivPWM;
}PWM_UNITDIV_PARAM, *PPWM_UNITDIV_PARAM;

typedef struct _PWM_DIV_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_U16 u16DivPWM;
}PWM_DIV_PARAM, *PPWM_DIV_PARAM;

typedef struct _PWM_POLARITY_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_BOOL bPolPWM;
}PWM_POLARITY_PARAM, *PPWM_POLARITY_PARAM;

typedef struct _PWM_VDBEN_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_BOOL bVdbenPWM;
}PWM_VDBEN_PARAM, *PPWM_VDBEN_PARAM;

typedef struct _PWM_RESETEN_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_BOOL bRstPWM;
}PWM_RESETEN_PARAM, *PPWM_RESETEN_PARAM;

typedef struct _PWM_DBEN_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_BOOL bDbenPWM;
}PWM_DBEN_PARAM, *PPWM_DBEN_PARAM;

typedef struct _PWM_SHIFT_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_U32 u32DutyPWM;
}PWM_SHITF_PARAM, *PPWM_SHIFT_PARAM;

typedef struct _PWM_NVSYNC_PARAM
{
    PWM_ChNum u8IndexPWM;
    MS_BOOL bNvsPWM;
}PWM_NVSYNC_PARAM, *PPWM_NVSYNC_PARAM;
# 217 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM_v2.h"
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_VD_MBX.h"
#ifndef _DRV_SYS_DMD_VD_MBX_H_
#define _DRV_SYS_DMD_VD_MBX_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
# 122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_VD_MBX.h"
typedef enum
{
    E_DMD_VD_MBX_TYPE_ATV,
    E_DMD_VD_MBX_TYPE_DVBT,
    E_DMD_VD_MBX_TYPE_DVBC,
    E_DMD_VD_MBX_TYPE_ATSC,
    E_DMD_VD_MBX_TYPE_DVBS,
    E_DMD_VD_MBX_TYPE_ISDBT,
    E_DMD_VD_MBX_TYPE_DTMB,
    E_DMD_VD_MBX_TYPE_DVBT2,
    E_DMD_VD_MBX_TYPE_MAX
}DMD_VD_MBX_Type;




MS_BOOL MDrv_SYS_DMD_VD_MBX_Init(void);
void MDrv_SYS_DMD_VD_MBX_SetType(DMD_VD_MBX_Type eType);
MS_BOOL MDrv_SYS_DMD_VD_MBX_ReadReg(MS_U32 u32Reg, MS_U8 *u8Value);
MS_BOOL MDrv_SYS_DMD_VD_MBX_ReadDSPReg(MS_U32 u32Reg, MS_U8 *u8Value);
MS_BOOL MDrv_SYS_DMD_VD_MBX_DBG_ReadReg(MS_U32 u32Reg, MS_U8 *u8Value);
MS_BOOL MDrv_SYS_DMD_VD_MBX_WriteReg(MS_U32 u32Reg, MS_U8 u8Value);
MS_BOOL MDrv_SYS_DMD_VD_MBX_WriteDSPReg(MS_U32 u32Reg, MS_U8 u8Value);
MS_BOOL MDrv_SYS_DMD_VD_MBX_DBG_WriteReg(MS_U32 u32Reg, MS_U8 u8Value);
#ifdef __cplusplus
}
#endif
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC_v2.h"
#ifndef _DRV_DVBC_V2_H_
#define _DRV_DVBC_V2_H_ 



#include "drvDMD_INTERN_DVBC.h"
#ifdef __cplusplus
extern "C"
{
#endif

#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif


#define DMD_DVBC_MAX_DEMOD_NUM 1






typedef struct DLL_PACKED
{
 MS_BOOL b_DCOFF_IsDVBC;
 MS_BOOL b_IsInit_DVBCCreat;
 EN_POWER_MODE eLastState;
} DMD_DVBC_SHARE_MEMORY_InitData;

typedef struct DLL_PACKED
{
    MS_U16 u16Version;
    MS_U16 u16SymbolRate;
    DMD_DVBC_MODULATION_TYPE eQamMode;
    MS_U32 u32IFFreq;
    MS_BOOL bSpecInv;
    MS_BOOL bSerialTS;
    MS_U8 u8SarValue;
    MS_U32 u32ChkScanTimeStart;
    DMD_DVBC_LOCK_STATUS eLockStatus;
    MS_U16 u16Strength;
    MS_U16 u16Quality;
    MS_U32 u32Intp;
    MS_U32 u32FcFs;
    MS_U8 u8Qam;
    MS_U16 u16SymbolRateHal;
} DMD_DVBC_SHARE_MEMORY_PreviousData;

typedef struct DLL_PACKED
{

    MS_U8 u8SarChannel;
# 171 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC_v2.h"
    MS_U8 *u8DMD_DVBC_DSPRegInitExt;
    MS_U8 u8DMD_DVBC_DSPRegInitSize;
    MS_U8 *u8DMD_DVBC_InitExt;
} DMD_DVBC_InitData_Transform;

typedef struct DLL_PACKED
{
    DMD_DVBC_SHARE_MEMORY_InitData sDMD_DVBC_SHARE_MEMORY_InitData;
 DMD_DVBC_SHARE_MEMORY_PreviousData sDMD_DVBC_SHARE_MEMORY_PreviousData;
 DMD_DVBC_InitData_Transform sDMD_DVBC_InitData_Transform;
} DMD_DVBC_ResData;






typedef enum {
    DMD_DVBC_DRV_CMD_Dual_Public_Init,
    DMD_DVBC_DRV_CMD_Dual_Individual_Init,
    DMD_DVBC_DRV_CMD_Init,
    DMD_DVBC_DRV_CMD_Exit,
    DMD_DVBC_DRV_CMD_SetDbgLevel,
    DMD_DVBC_DRV_CMD_GetInfo,
    DMD_DVBC_DRV_CMD_GetLibVer,
    DMD_DVBC_DRV_CMD_GetFWVer,
    DMD_DVBC_DRV_CMD_GetDSPReg,
    DMD_DVBC_DRV_CMD_SetDSPReg,
    DMD_DVBC_DRV_CMD_GetReg,
    DMD_DVBC_DRV_CMD_SetReg,
    DMD_DVBC_DRV_CMD_SetSerialControl,
    DMD_DVBC_DRV_CMD_SetConfig,
    DMD_DVBC_DRV_CMD_SetSetConfig_symbol_rate_list,
    DMD_DVBC_DRV_CMD_SetActive,
    DMD_DVBC_DRV_CMD_GetLockWithRFPower,
    DMD_DVBC_DRV_CMD_GetSignalStrengthWithRFPower,
    DMD_DVBC_DRV_CMD_GetSignalQualityWithRFPower,
    DMD_DVBC_DRV_CMD_ActiveDmdSwitch,
    DMD_DVBC_DRV_CMD_GetSNR,
    DMD_DVBC_DRV_CMD_GetPostViterbiBer,
    DMD_DVBC_DRV_CMD_GetPacketErr,
    DMD_DVBC_DRV_CMD_GetCellID,
    DMD_DVBC_DRV_CMD_GetStatus,
    DMD_DVBC_DRV_CMD_SetPowerState,


    DMD_DVBC_DRV_CMD_GetIFAGC,

    #ifdef UFO_DEMOD_DVBC_GET_AGC_INFO
    DMD_DVBC_DRV_CMD_GetAGCInfo,
    #endif
} DMD_DVBC_DRV_COMMAND;





typedef struct DLL_PACKED _DVBC_Dual_Public_Init_PARAM
{
 MS_U8 u8AGC_Tristate_Ctrl;
 MS_U8 u8Sar_Channel;
 MS_BOOL ret;
} DVBC_Dual_Public_Init_PARAM,*PDVBC_Dual_Public_Init_PARAM;

typedef struct DLL_PACKED _DVBC_Dual_Individual_Init_PARAM
{
 DMD_DVBC_InitData_Transform *pDMD_DVBC_InitData;
 MS_U32 u32InitDataLen;
 MS_BOOL ret;
}DVBC_Dual_Individual_Init_PARAM,*PDVBC_Dual_Individual_Init_PARAM;

typedef struct DLL_PACKED _DVBC_Init_PARAM
{
 DMD_DVBC_InitData_Transform *pDMD_DVBC_InitData;
 MS_U32 u32InitDataLen;
 MS_BOOL ret;
}DVBC_Init_PARAM,*PDVBC_Init_PARAM;

typedef struct DLL_PACKED _DVBC_SetDbgLevel_PARAM
{
 DMD_DVBC_DbgLv u8DbgLevel;
 MS_BOOL ret;
}DVBC_SetDbgLevel_PARAM,*PDVBC_SetDbgLevel_PARAM;

typedef struct DLL_PACKED _DVBC_EXIT_PARAM_PARAM
{
 MS_BOOL ret;
}DVBC_EXIT_PARAM_PARAM,*PDVBC_EXIT_PARAM_PARAM;

typedef struct DLL_PACKED _DVBC_GetInfo_PARAM
{
 const DMD_DVBC_Info* ret_info;
}DVBC_GetInfo_PARAM,*PDVBC_GetInfo_PARAM;

typedef struct _DVBC_GetLibVer_PARAM
{
 const MSIF_Version **ppVersion;
 MS_BOOL ret;
}DVBC_GetLibVer_PARAM,*PDVBC_GetLibVer_PARAM;

typedef struct DLL_PACKED _DVBC_GetFWVer_PARAM
{
 MS_U16 *ver;
 MS_BOOL ret;
}DVBC_GetFWVer_PARAM,*PDVBC_GetFWVer_PARAM;


typedef struct DLL_PACKED _DVBC_GetDSPReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 *pu8Data;
 MS_BOOL ret;
}DVBC_GetDSPReg_PARAM,*PDVBC_GetDSPReg_PARAM;

typedef struct DLL_PACKED _DVBC_SetDSPReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 pu8Data;
 MS_BOOL ret;
}DVBC_SetDSPReg_PARAM,*PDVBC_SetDSPReg_PARAM;


typedef struct DLL_PACKED _DVBC_GetReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 *pu8Data;
 MS_BOOL ret;
}DVBC_GetReg_PARAM,*PDVBC_GetReg_PARAM;

typedef struct DLL_PACKED _DVBC_SetReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 u8Data;
 MS_BOOL ret;
}DVBC_SetReg_PARAM,*PDVBC_SetReg_PARAM;


typedef struct DLL_PACKED _DVBC_SetSerialControl_PARAM
{
 MS_BOOL bEnable;
 MS_BOOL ret;
}DVBC_SetSerialControl_PARAM,*PDVBC_SetSerialControl_PARAM;


typedef struct DLL_PACKED _DVBC_SetConfig_Symbol_rate_list_PARAM
{
 MS_U16 u16SymbolRate;
 DMD_DVBC_MODULATION_TYPE eQamMode;
 MS_U32 u32IFFreq;
 MS_BOOL bSpecInv;
 MS_BOOL bSerialTS;
 MS_U16 *pu16_symbol_rate_list;
 MS_U8 u8_symbol_rate_list_num;
 MS_BOOL ret;
}DVBC_SetConfig_Symbol_rate_list_PARAM,*PDVBC_SetConfig_Symbol_rate_list_PARAM;

typedef struct DLL_PACKED _DVBC_SetActive_PARAM
{
 MS_BOOL bEnable;
 MS_BOOL ret;
}DVBC_SetActive_PARAM,*PDVBC_SetActive_PARAM;
# 342 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC_v2.h"
typedef struct DLL_PACKED _DVBC_GetLockWithRFPower
{
 DMD_DVBC_GETLOCK_TYPE eType;
 MS_U32 u32CurrRFPowerDbm;
 MS_U32 u32NoChannelRFPowerDbm;
 MS_U32 u32TimeInterval;
 DMD_DVBC_LOCK_STATUS *eLockStatus;
 MS_BOOL ret;
}DVBC_GetLockWithRFPower,*PDVBC_GetLockWithRFPower;
# 367 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC_v2.h"
typedef struct DLL_PACKED _DVBC_ActiveDmdSwitch_PARAM
{
 MS_U8 demod_no;
 MS_BOOL ret;
}DVBC_ActiveDmdSwitch_PARAM,*PDVBC_ActiveDmdSwitch_PARAM;


typedef struct _DVBC_GetIFAGC_PARAM
{
 MS_U8 *ifagc_reg;
 MS_U8 *ifagc_reg_lsb;
 MS_U16 *ifagc_err_reg;
 MS_BOOL ret;
}DVBC_GetIFAGC_PARAM,*PDVBC_GetIFAGC_PARAM;

#ifdef UFO_DEMOD_DVBC_GET_AGC_INFO
typedef struct _DVBC_GetAGCInfo_PARAM
{
 MS_U8 u8dbg_mode;
 MS_U16 *pu16Data;
 MS_BOOL ret;
}DVBC_GetAGCInfo_PARAM,*PDVBC_GetAGCInfo_PARAM;
#endif




typedef struct _DVBC_GetSNR_PARAM
{
 MS_U16 *snr_reg;
 MS_BOOL ret;
}DVBC_GetSNR_PARAM,*PDVBC_GetSNR_PARAM;


typedef struct _DVBC_GetPostViterbiBer_PARAM
{
 MS_U32 *BitErr_reg;
 MS_U16 *BitErrPeriod_reg;
 MS_BOOL ret;
}DVBC_GetPostViterbiBer_PARAM,*PDVBC_GetPostViterbiBer_PARAM;


typedef struct DLL_PACKED _DVBC_GetPacketErr_PARAM
{
 MS_U16 *pktErr;
 MS_BOOL ret;
}DVBC_GetPacketErr_PARAM,*PDVBC_GetPacketErr_PARAM;

typedef struct DLL_PACKED _DVBC_GetCellID_PARAM
{
 MS_U16 *u16CellID;
 MS_BOOL ret;
}DVBC_GetCellID_PARAM,*PDVBC_GetCellID_PARAM;


typedef struct _DVBC_GetStatus_PARAM
{
 DMD_DVBC_MODULATION_TYPE *pQAMMode;
 MS_U16 *u16SymbolRate;
 MS_U32 *config_Fc_reg;
 MS_U32 *Fc_over_Fs_reg;
 MS_U16 *Cfo_offset_reg;
 MS_BOOL ret;
}DVBC_GetStatus_PARAM,*PDVBC_GetStatus_PARAM;


typedef struct DLL_PACKED _DVBC_SetPowerState_PARAM
{
 EN_POWER_MODE u16PowerState;
 MS_U32 ret_U32;
}DVBC_SetPowerState_PARAM,*PDVBC_SetPowerState_PARAM;

void DVBCRegisterToUtopia(void);
# 453 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC_v2.h"
MS_U32 DVBCOpen(void** pInstantTmp, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 DVBCClose(void* pInstantTmp);
MS_U32 DVBCIoctl(void* pInstantTmp, MS_U32 u32Cmd, void* pArgs);



#ifdef __cplusplus
}
#endif

#endif
# 122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSEM.h"
#ifndef __DRV_SEM_H__
#define __DRV_SEM_H__ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif

#define SEM_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'S','E','M','_'}, \
    {'0','1'}, \
    {'0','1'}, \
    {'0','0','2','6','4','8','8','5'}, \
    MSIF_OS




#define SEM_PM51_ID 0x01
#define SEM_AEON_ID 0x02
#define SEM_ARM_MIPS_ID 0x03

#if (defined(MCU_AEON))
    #define SEM_RESOURCE_ID SEM_AEON_ID
#else
    #define SEM_RESOURCE_ID SEM_ARM_MIPS_ID
#endif

#define SEM_WAIT_FOREVER (0xffffff00)
#define SEM_ID_PREFIX (0x36970000)





typedef enum
{
    E_SEM_NONE = SEM_ID_PREFIX,
    E_SEM_DUMMY,
    E_SEM_GE0,
    E_SEM_GE1,
    E_SEM_BDMA,
    E_SEM_PM,
    E_SEM_MBX_RECV,
    E_SEM_MBX_SEND,
    E_SEM_TEE,
    E_SEM_USER0,
    E_SEM_USER1,
    E_SEM_USER2,
    E_SEM_USER3,
    E_SEM_CA,
    E_SEM_IIC
}eSemId;

typedef enum _SEM_DbgLvl
{
    E_SEM_DBGLVL_NONE = 0,
    E_SEM_DBGLVL_WARNING,
    E_SEM_DBGLVL_ERROR,
    E_SEM_DBGLVL_INFO,
    E_SEM_DBGLVL_ALL,
}SEM_DbgLvl;
# 203 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSEM.h"
MS_BOOL MDrv_SEM_Init(void);







MS_BOOL MDrv_SEM_Get_Resource(MS_U8 u8SemID, MS_U16 u16ResId);







MS_BOOL MDrv_SEM_Free_Resource(MS_U8 u8SemID, MS_U16 u16ResId);







MS_BOOL MDrv_SEM_Reset_Resource(MS_U8 u8SemID);







MS_BOOL MDrv_SEM_Get_ResourceID(MS_U8 u8SemID, MS_U16* pu16ResId);







MS_U32 MDrv_SEM_Get_Num(void);







MS_BOOL MDrv_SEM_GetLibVer(const MSIF_Version **ppVersion);







MS_U32 MDrv_SEM_SetPowerState(EN_POWER_MODE u16PowerState);







MS_BOOL MDrv_SEM_Lock(eSemId eSemId, MS_U32 u32WaitMs);







MS_BOOL MDrv_SEM_Unlock(eSemId eSemId);







MS_BOOL MDrv_SEM_Delete(eSemId eSemId);
# 292 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSEM.h"
MS_BOOL MDrv_SEM_SetDbgLevel(SEM_DbgLvl eLevel);






#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCIPHER.h"
#ifndef __DRVCIPHER_H__
#define __DRVCIPHER_H__ 

#include "MsTypes.h"
#include "MsDevice.h"
#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif





#define HASH_TIMEOUT_VALUE (5000UL)

typedef enum
{
    CIPHER_DBG_NONE,
    CIPHER_DBG_ERR,
    CIPHER_DBG_WARN,
    CIPHER_DBG_INFO,
}CIPHER_DBGMSG_LEVEL;

#define MSIF_CIPHER_LIB_CODE {'D','M','A','_'}
#define MSIF_CIPHER_LIBVER {'0','1'}
#define MSIF_CIPHER_BUILDNUM {'0','1'}
#define MSIF_CIPHER_CHANGELIST {'0','0','8','2','9','9','2','7'}

#define CIPHER_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_CIPHER_LIB_CODE, \
    MSIF_CIPHER_LIBVER, \
    MSIF_CIPHER_BUILDNUM, \
    MSIF_CIPHER_CHANGELIST, \
    MSIF_OS
# 159 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCIPHER.h"
typedef MS_U32 DRV_CIPHER_RET;

typedef void (*P_DrvCIPHER_EvtCallback)(MS_U32 u32CmdId, MS_BOOL bSuccess, MS_U32 u32Exception);

typedef enum
{
    E_CIPHER_MAIN_NONE,
    E_CIPHER_MAIN_AES,
    E_CIPHER_MAIN_DES,
    E_CIPHER_MAIN_TDES,
    E_CIPHER_MAIN_M6_S56_CCBC,
    E_CIPHER_MAIN_M6_S56,
    E_CIPHER_MAIN_M6_KE56,
    E_CIPHER_MAIN_RC4,
    E_CIPHER_MAIN_RC4_128,
    E_CIPHER_MAIN_SM4,
}CIPHER_MAIN_ALGO;

typedef enum
{
    E_CIPHER_SUB_NONE,
    E_CIPHER_SUB_ECB,
    E_CIPHER_SUB_CBC,
    E_CIPHER_SUB_CTR,
    E_CIPHER_SUB_CBC_MAC,
    E_CIPHER_SUB_CTR_64,
    E_CIPHER_SUB_CMAC_Key,
    E_CIPHER_SUB_CMAC_Algo,
    E_CIPHER_SUB_PCBC_ADD,
    E_CIPHER_SUB_PCBC_XOR,
    E_CIPHER_SUB_OTPHASH,
}CIPHER_SUB_ALGO;

typedef enum
{
    E_CIPHER_RES_NONE,
    E_CIPHER_RES_CLR,
    E_CIPHER_RES_CTS,
    E_CIPHER_RES_SCTE52,
}CIPHER_RES_ALGO;

typedef enum
{
    E_CIPHER_SB_NONE,
    E_CIPHER_SB_CLR,
    E_CIPHER_SB_IV1,
    E_CIPHER_SB_IV2,
}CIPHER_SB_ALGO;

typedef enum
{
    E_CIPHER_KSRC_CPU,
    E_CIPHER_KSRC_KL,
    E_CIPHER_KSRC_OTP,
    E_CIPHER_KSRC_STR,
    E_CIPHER_KSRC_CAIP = 9,
}CIPHER_KEY_SRC;


typedef struct
{
    CIPHER_MAIN_ALGO eMainAlgo;
    CIPHER_SUB_ALGO eSubAlgo;
    CIPHER_RES_ALGO eResAlgo;
    CIPHER_SB_ALGO eSBAlgo;
}DRV_CIPHER_ALGO;

typedef struct
{
    CIPHER_KEY_SRC eKeySrc;
    MS_U8 u8KeyIdx;
    MS_U8 u8KeyLen;
    MS_U8 *pu8KeyData;
    MS_U8 u8IVLen;
    MS_U8 *pu8IVData;
}DRV_CIPHER_KEY;


typedef enum
{
 E_CIPHER_DRAM = 1,
 E_CIPHER_DQMEM,
 E_CIPHER_IQMEM,
 E_CIPHER_DIRECT,
 E_CIPHER_OTP,
 E_CIPHER_KL_LUT,
 E_CIPHER_KL_M,
 E_CIPHER_KL_BC,
}CIPHER_MEM_TYPE;


typedef struct
{
    MS_PHY u32Addr;
    MS_U32 u32Size;
 CIPHER_MEM_TYPE eMemoryType;
}DRV_CIPHER_DATA;

typedef struct
{
    DRV_CIPHER_ALGO stAlgo;
    DRV_CIPHER_KEY stKey;
    DRV_CIPHER_DATA stInput;
    DRV_CIPHER_DATA stOutput;
    MS_BOOL bDecrypt;
 MS_U32 u32CAVid;
    P_DrvCIPHER_EvtCallback pfCallback;
}DRV_CIPHER_DMACFG;

typedef enum
{
    E_CIPHER_HASH_ALGO_SHA1,
    E_CIPHER_HASH_ALGO_SHA256 ,
    E_CIPHER_HASH_ALGO_MD5 ,
    E_CIPHER_HASH_ALGO_SM3 ,
}CIPHER_HASH_ALGO;

typedef enum
{
    E_CIPHER_HASH_IV_FIPS,
    E_CIPHER_HASH_IV_CMD,
    E_CIPHER_HASH_IV_PRV,
}CIPHER_HASH_IV;

typedef enum
{
    E_CIPHER_HASH_STAGE_FIRST ,
    E_CIPHER_HASH_STAGE_UPDATE ,
    E_CIPHER_HASH_STAGE_LAST ,
}CIPHER_HASH_STAGE;

typedef enum
{
    E_CIPHER_HMAC_IKPAD,
    E_CIPHER_HMAC_OKPAD,
}CIPHER_HMAC_KPAD;

typedef struct
{
    CIPHER_KEY_SRC eKeySrc;
    MS_U8 u8KeyIdx;
    MS_U8 u8KeyLen;
    MS_U8 *pu8KeyData;
}DRV_CIPHER_HMAC_KEY;

typedef struct
{
    CIPHER_HASH_ALGO eAlgo;
    DRV_CIPHER_DATA stInput;
    MS_U8 *pu8Digest_Buf;
    MS_U32 u32Digest_Buf_Size;
    MS_U32 u32CAVid;
    P_DrvCIPHER_EvtCallback pfCallback;
}DRV_CIPHER_HASHCFG;

typedef struct
{
    CIPHER_HASH_ALGO eAlgo;
    DRV_CIPHER_DATA stInput;
    MS_U8 *pu8Digest_Buf;
    MS_U32 u32Digest_Buf_Size;
    MS_U32 u32CAVid;
    MS_U32 u32StartByte;
    MS_U8 *pu8SetIV;
    CIPHER_HASH_IV eIVMode;
    CIPHER_HASH_STAGE eStage;
    CIPHER_HMAC_KPAD eHMACKPad;
    DRV_CIPHER_HMAC_KEY stHMACKey;
}DRV_CIPHER_HASHCFG_MANUAL;

typedef struct
{
    CIPHER_HASH_ALGO eAlgo;
    DRV_CIPHER_DATA stInput;
    MS_U8 *pu8Digest_Buf;
    MS_U32 u32Digest_Buf_Size;
    MS_U32 u32CAVid;
    DRV_CIPHER_HMAC_KEY stHMACKey;
    P_DrvCIPHER_EvtCallback pfCallback;
}DRV_CIPHER_HMACCFG;

#define DRV_CIPHER_OK (0x00000000UL)
#define DRV_CIPHER_FAIL (0x00000001UL)
#define DRV_CIPHER_BAD_PARAM (0x00000002UL)


#define DRV_CIPHER_EXCEPT_CAVID (0x00000001UL)
#define DRV_CIPHER_EXCEPT_DATA (0x00000002UL)
#define DRV_CIPHER_EXCEPT_ALGO (0x00000004UL)
#define DRV_CIPHER_EXCEPT_DMA_KEY (0x00000008UL)
#define DRV_CIPHER_EXCEPT_HMAC_KEY (0x00000010UL)





DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_Init(void);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_Reset(void);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_ResetKey(MS_U32 u32CAVid, MS_U32 u32KeyIdx);

DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_DMACalc(DRV_CIPHER_DMACFG stCfg, MS_U32 *pu32CmdId);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_OTPHASHCalc(DRV_CIPHER_DMACFG stCfg, MS_U32 *pu32CmdId);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_HASH(DRV_CIPHER_HASHCFG stCfg, MS_U32 *pu32CmdId);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_HASHManual(DRV_CIPHER_HASHCFG_MANUAL stCfg, MS_U32 *pu32CmdId);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_HMAC(DRV_CIPHER_HMACCFG stCfg, MS_U32 *pu32CmdId);

DLL_PUBLIC MS_BOOL MDrv_CIPHER_IsDMADone(MS_U32 u32CmdId, MS_U32 *pu32Exception);
DLL_PUBLIC MS_BOOL MDrv_CIPHER_IsHASHDone(MS_U32 u32CmdId, MS_U32 *pu32Exception);

DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_SetDbgLevel(CIPHER_DBGMSG_LEVEL eDBGMsgLevel);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_GetLibVer(const MSIF_Version **ppVersion);


DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_KeyCtrl(MS_BOOL bEnable);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_Alloc(MS_U32 *pu32CipherId);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_Free(MS_U32 u32CipherId);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_DMAConfigure(MS_U32 u32CipherId, DRV_CIPHER_DMACFG stCfg);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_DMAStart(MS_U32 u32CipherId, MS_U32 *pu32CmdId);


#ifdef ENABLE_BGC
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_BGC_Enable(MS_U32 u32EngId,MS_U32 u32Algo, MS_U8 *pu8Golden, MS_PHY u32SAddr, MS_U32 u32Size);
DLL_PUBLIC DRV_CIPHER_RET MDrv_CIPHER_BGC_Check(MS_U32 u32EngId, MS_BOOL *bOK);
#endif

#ifdef __cplusplus
}
#endif





#include "drvAESDMA.h"

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS.h"
#ifndef _DRV_DVBS_H_
#define _DRV_DVBS_H_ 
#include "UFO.h"
#include "MsTypes.h"

#include "MsCommon.h"
#include "drvDMD_common.h"
#ifdef __cplusplus
extern "C"
{
#endif
# 123 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS.h"
#define MSIF_DMD_DVBS_INTERN_LIB_CODE {'D','V', 'B','S'}
#define MSIF_DMD_DVBS_INTERN_LIBVER {'0','1'}
#define MSIF_DMD_DVBS_INTERN_BUILDNUM {'2','2' }
#define MSIF_DMD_DVBS_INTERN_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_DVBS_INTERN_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_DVBS_INTERN_LIB_CODE, \
    MSIF_DMD_DVBS_INTERN_LIBVER, \
    MSIF_DMD_DVBS_INTERN_BUILDNUM, \
    MSIF_DMD_DVBS_INTERN_CHANGELIST, \
    MSIF_OS

#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))




typedef enum
{
    DMD_DVBS_DBGLV_NONE,
    DMD_DVBS_DBGLV_INFO,
    DMD_DVBS_DBGLV_NOTICE,
    DMD_DVBS_DBGLV_WARNING,
    DMD_DVBS_DBGLV_ERR,
    DMD_DVBS_DBGLV_CRIT,
    DMD_DVBS_DBGLV_ALERT,
    DMD_DVBS_DBGLV_EMERG,
    DMD_DVBS_DBGLV_DEBUG,
} DMD_DVBS_DbgLv;

typedef enum
{
    DMD_DVBS_LOCK,
    DMD_DVBS_CHECKING,
    DMD_DVBS_CHECKEND,
    DMD_DVBS_UNLOCK,
    DMD_DVBS_NULL,
} DMD_DVBS_LOCK_STATUS;

typedef enum
{
    DMD_DVBS_GETLOCK,
    DMD_DVBS_GETLOCK_TR_EVER_LOCK,
    DMD_DVBS_GETLOCK_NO_CHANNEL,
} DMD_DVBS_GETLOCK_TYPE;

typedef enum
{
    DMD_DVBS_QPSK = 0,
    DMD_DVBS_8PSK = 1,
    DMD_DVBS_16APSK = 2,
    DMD_DVBS_32APSK = 3,
    DMD_DVBS_8APSK = 4,
    DMD_DVBS_8_8APSK = 5,
    DMD_DVBS_4_8_4_16APSK = 6
} DMD_DVBS_MODULATION_TYPE;

typedef enum
{
    DMD_SAT_DVBS = 0,
    DMD_SAT_DVBS2 = 1,
} DMD_DVBS_DEMOD_TYPE;

typedef enum
{
# 250 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS.h"
    E_DMD_S2_TS_SERIAL=0x00,
    E_DMD_S2_TS_CLK_RATE,
    E_DMD_S2_TS_OUT_INV,
    E_DMD_S2_TS_DATA_SWAP,

 E_DMD_S2_FW_VERSION_L,
 E_DMD_S2_FW_VERSION_H,
 E_DMD_S2_CHIP_VERSION,
 E_DMD_S2_FS_L,
 E_DMD_S2_FS_H,
 E_DMD_S2_MANUAL_TUNE_SYMBOLRATE_L,
 E_DMD_S2_MANUAL_TUNE_SYMBOLRATE_H,
 E_DMD_S2_SYSTEM_TYPE,
 E_DMD_S2_MODULATION_TYPE,
 E_DMD_S2_BLINDSCAN_CHECK,

 E_DMD_S2_UNCRT_PKT_NUM_7_0,
 E_DMD_S2_UNCRT_PKT_NUM_8_15,
 E_DMD_S2_STATE_FLAG,
 E_DMD_S2_SUBSTATE_FLAG,
 E_DMD_S2_HUM_DETECT_FLAG,
 E_DMD_S2_CCI_DETECT_FLAG,
 E_DMD_S2_IIS_DETECT_FLAG,
 E_DMD_S2_OPEN_HUM_VLD_IRQ_FLAG,
 E_DMD_S2_SRD_COARSE_DONE_FLAG,
 E_DMD_S2_SRD_FINE_DONE_FLAG,
 E_DMD_S2_FINEFE_DONE_FLAG,
 E_DMD_S2_REV_FRAME_FLAG,
 E_DMD_S2_DUMMY_FRAME_FLAG,
 E_DMD_S2_PLSC_DONE_FLAG,
 E_DMD_S2_GET_INFO_FROM_FRAME_LENGTH_DONE_FLAG,
 E_DMD_S2_IQ_SWAP_DETECT_FLAG,
 E_DMD_S2_FRAME_ACQUISITION_DONE_FLAG,
 E_DMD_S2_OLCFE_DONE_FLAG,
 E_DMD_S2_FSYNC_FOUND_FLAG,
 E_DMD_S2_FSYNC_FAIL_SEARCH_FLAG,
 E_DMD_S2_FALSE_ALARM_FLAG,
 E_DMD_S2_VITERBI_IN_SYNC_FLAG,
 E_DMD_S2_INT_CODE_RATE_SEARCH_FAIL_FLAG,
 E_DMD_S2_VITERBI_INT_PRE_FLAG,
 E_DMD_S2_BER_WINDOW_END_FLAG,
 E_DMD_S2_PASS_WRONG_INT_FLAG,
 E_DMD_S2_CLK_CNT_OVER_FLAG,
 E_DMD_S2_UNCRT_OVER_FLAG,
 E_DMD_S2_DISEQC_RX_LENGTH,
 E_DMD_S2_DISEQC_INTERRUPT_FLAG,
 E_DMD_S2_DISEQC_RX_FLAG,
 E_DMD_S2_DISEQC_INTERRUPT_STATUS,
 E_DMD_S2_DISEQC_STATUS_FLAG,
 E_DMD_S2_ACI_FIR_SELECTED,

 E_DMD_S2_AGC_LOCK_FLAG,
 E_DMD_S2_DCR_LOCK_FLAG,
 E_DMD_S2_DAGC0_LOCK_FLAG,
 E_DMD_S2_DAGC1_LOCK_FLAG,
 E_DMD_S2_DAGC2_LOCK_FLAG,
 E_DMD_S2_DAGC3_LOCK_FLAG,
 E_DMD_S2_TR_LOCK_FLAG,
 E_DMD_S2_CLCFE_LOCK_FLAG,
 E_DMD_S2_EQ_LOCK_FLAG,
 E_DMD_S2_PR_LOCK_FLAG,
 E_DMD_S2_FSYNC_LOCK_FLAG,
 E_DMD_S2_FSYNC_FAIL_LOCK_FLAG,

   E_DMD_S2_MB_SWUSE12L,
   E_DMD_S2_MB_SWUSE12H,
   E_DMD_S2_MB_SWUSE13L,
   E_DMD_S2_MB_SWUSE13H,
   E_DMD_S2_MB_SWUSE14L,
   E_DMD_S2_MB_SWUSE14H,
   E_DMD_S2_MB_SWUSE15L,
   E_DMD_S2_MB_SWUSE15H,
   E_DMD_S2_MB_SWUSE16L,
   E_DMD_S2_MB_SWUSE16H,
 E_DMD_S2_MB_SWUSE17L,
 E_DMD_S2_MB_SWUSE17H,
   E_DMD_S2_MB_SWUSE18L,
   E_DMD_S2_MB_SWUSE18H,
   E_DMD_S2_MB_SWUSE19L,
   E_DMD_S2_MB_SWUSE19H,
   E_DMD_S2_MB_SWUSE1AL,
   E_DMD_S2_MB_SWUSE1AH,
   E_DMD_S2_MB_SWUSE1BL,
   E_DMD_S2_MB_SWUSE1BH,
   E_DMD_S2_MB_SWUSE1CL,
   E_DMD_S2_MB_SWUSE1CH,
   E_DMD_S2_MB_SWUSE1DL,
   E_DMD_S2_MB_SWUSE1DH,
   E_DMD_S2_MB_SWUSE1EL,
 E_DMD_S2_MB_SWUSE1EH,
 E_DMD_S2_MB_SWUSE1FL,
 E_DMD_S2_MB_SWUSE1FH,

 E_DMD_S2_MB_DMDTOP_DBG_0,
 E_DMD_S2_MB_DMDTOP_DBG_1,
 E_DMD_S2_MB_DMDTOP_DBG_2,
 E_DMD_S2_MB_DMDTOP_DBG_3,
 E_DMD_S2_MB_DMDTOP_DBG_4,
 E_DMD_S2_MB_DMDTOP_DBG_5,
 E_DMD_S2_MB_DMDTOP_DBG_6,
 E_DMD_S2_MB_DMDTOP_DBG_7,
 E_DMD_S2_MB_DMDTOP_DBG_8,
 E_DMD_S2_MB_DMDTOP_DBG_9,
 E_DMD_S2_MB_DMDTOP_DBG_A,
 E_DMD_S2_MB_DMDTOP_DBG_B,

 E_DMD_S2_MB_DMDTOP_SWUSE00L,
 E_DMD_S2_MB_DMDTOP_SWUSE00H,
 E_DMD_S2_MB_DMDTOP_SWUSE01L,
 E_DMD_S2_MB_DMDTOP_SWUSE01H,
 E_DMD_S2_MB_DMDTOP_SWUSE02L,
 E_DMD_S2_MB_DMDTOP_SWUSE02H,
 E_DMD_S2_MB_DMDTOP_SWUSE03L,
 E_DMD_S2_MB_DMDTOP_SWUSE03H,
 E_DMD_S2_MB_DMDTOP_SWUSE04L,
 E_DMD_S2_MB_DMDTOP_SWUSE04H,
 E_DMD_S2_MB_DMDTOP_SWUSE05L,
 E_DMD_S2_MB_DMDTOP_SWUSE05H,
 E_DMD_S2_MB_DMDTOP_SWUSE06L,
 E_DMD_S2_MB_DMDTOP_SWUSE06H,
 E_DMD_S2_MB_DMDTOP_SWUSE07L,
 E_DMD_S2_MB_DMDTOP_SWUSE07H,

 E_DMD_S2_MB_TOP_WR_DBG_90,
 E_DMD_S2_MB_TOP_WR_DBG_91,
 E_DMD_S2_MB_TOP_WR_DBG_92,
 E_DMD_S2_MB_TOP_WR_DBG_93,
 E_DMD_S2_MB_TOP_WR_DBG_94,
 E_DMD_S2_MB_TOP_WR_DBG_95,
 E_DMD_S2_MB_TOP_WR_DBG_96,
 E_DMD_S2_MB_TOP_WR_DBG_97,
 E_DMD_S2_MB_TOP_WR_DBG_98,
 E_DMD_S2_MB_TOP_WR_DBG_99,

 E_DMD_S2_MB_DUMMY_REG_0,
 E_DMD_S2_MB_DUMMY_REG_1,
 E_DMD_S2_MB_DUMMY_REG_2,
 E_DMD_S2_MB_DUMMY_REG_3,
 E_DMD_S2_MB_DUMMY_REG_4,
 E_DMD_S2_MB_DUMMY_REG_5,
 E_DMD_S2_MB_DUMMY_REG_6,
 E_DMD_S2_MB_DUMMY_REG_7,
 E_DMD_S2_MB_DUMMY_REG_8,
 E_DMD_S2_MB_DUMMY_REG_9,
 E_DMD_S2_MB_DUMMY_REG_A,
 E_DMD_S2_MB_DUMMY_REG_B,
 E_DMD_S2_MB_DUMMY_REG_C,
 E_DMD_S2_MB_DUMMY_REG_D,
 E_DMD_S2_MB_DUMMY_REG_E,
 E_DMD_S2_MB_DUMMY_REG_F,
 E_DMD_S2_MB_DUMMY_REG_10,
 E_DMD_S2_MB_DUMMY_REG_11,

 E_DMD_S2_MB_DMDTOP_INFO_01,
 E_DMD_S2_MB_DMDTOP_INFO_02,
 E_DMD_S2_MB_DMDTOP_INFO_03,
 E_DMD_S2_MB_DMDTOP_INFO_04,
 E_DMD_S2_MB_DMDTOP_INFO_05,
 E_DMD_S2_MB_DMDTOP_INFO_06,
 E_DMD_S2_MB_DMDTOP_INFO_07,
 E_DMD_S2_MB_DMDTOP_INFO_08,

 E_DMD_S2_IDLE_STATE_UPDATED,
 E_DMD_S2_LOG_FLAG,
 E_DMD_S2_LOG_SKIP_INDEX,
 E_DMD_S2_LOCK_COUNT,
 E_DMD_S2_NARROW_STEP_FLAG,
 E_DMD_S2_UNCORRECT_PKT_COUNT,
 E_DMD_S2_DISEQC_INIT_MODE,
 E_DMD_S2_DECIMATE_FORCED,
 E_DMD_S2_SRD_MAX_SRG_FLAG,
 E_DMD_S2_DVBS_OUTER_RETRY,

 E_DMD_S2_FORCED_DECIMATE_FLAG,
 E_DMD_S2_NO_SIGNAL_FLAG,
 E_DMD_S2_SPECTRUM_TRACK_FLAG,
 E_DMD_S2_SRD_LOCAL_SEARCH_FLAG,
 E_DMD_S2_NO_SIGNAL_RATIO_CHECK_FLAG,
 E_DMD_S2_LOW_SR_ACI_FLAG,
 E_DMD_S2_SPECTRUM_TRACKER_TIMEOUT,
 E_DMD_S2_TR_TIMEOUT,
 E_DMD_S2_BALANCE_TRACK,
 E_DMD_S2_GAIN_TILT_FLAG,
 E_DMD_S2_SIS_EN,
 E_DMD_S2_ISSY_ACTIVE,
 E_DMD_S2_CODE_RATE,
 E_DMD_S2_PILOT_FLAG,
 E_DMD_S2_FEC_TYPE,
 E_DMD_S2_MOD_TYPE,
 E_DMD_S2_VCM_OPT,
 E_DMD_S2_OPPRO_FLAG,
 E_DMD_S2_IS_ID,
        E_DMD_S2_CHECK_EVER_UNLOCK,
 E_DMD_S2_IS_ID_TABLE = 0x100,
 DVBS2_PARAM_LEN = 120
} DVBS_Param_2;




typedef void (*fpIntCallBack)(MS_U8 u8arg);


typedef struct
{

    MS_U8 u8SarChannel;
    DMD_RFAGC_SSI *pTuner_RfagcSsi;
    MS_U16 u16Tuner_RfagcSsi_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_LoRef;
    MS_U16 u16Tuner_IfagcSsi_LoRef_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_HiRef;
    MS_U16 u16Tuner_IfagcSsi_HiRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_LoRef;
    MS_U16 u16Tuner_IfagcErr_LoRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_HiRef;
    MS_U16 u16Tuner_IfagcErr_HiRef_Size;
    DMD_SQI_CN_NORDIGP1 *pSqiCnNordigP1;
    MS_U16 u16SqiCnNordigP1_Size;


    MS_U8 *u8DMD_DVBS_DSPRegInitExt;
    MS_U8 u8DMD_DVBS_DSPRegInitSize;
    MS_U8 *u8DMD_DVBS_InitExt;


 #ifdef UFO_PUBLIC_HEADER_212
 MS_U32 u32DjbStartAddr;
       #endif

} DMD_DVBS_InitData;

typedef enum
{
    E_DMD_DVBS_FAIL=0,
    E_DMD_DVBS_OK=1
} DMD_DVBS_Result;


typedef struct
{
    MS_U16 u16Version;
    MS_U32 u32SymbolRate;
    DMD_DVBS_MODULATION_TYPE eQamMode;
    MS_U32 u32IFFreq;
    MS_BOOL bSpecInv;
    MS_BOOL bSerialTS;
    MS_U8 u8SarValue;
    MS_U32 u32ChkScanTimeStart;
    DMD_DVBS_LOCK_STATUS eLockStatus;
    MS_U16 u16Strength;
    MS_U16 u16Quality;
    MS_U32 u32Intp;
    MS_U32 u32FcFs;
    MS_U8 u8Qam;
    MS_U16 u16SymbolRateHal;
} DMD_DVBS_Info;




typedef enum
{
    HAL_DEMOD_CONV_CODE_RATE_1_2,
    HAL_DEMOD_CONV_CODE_RATE_1_3,
    HAL_DEMOD_CONV_CODE_RATE_2_3,
    HAL_DEMOD_CONV_CODE_RATE_1_4,
    HAL_DEMOD_CONV_CODE_RATE_3_4,
    HAL_DEMOD_CONV_CODE_RATE_2_5,
    HAL_DEMOD_CONV_CODE_RATE_3_5,
    HAL_DEMOD_CONV_CODE_RATE_4_5,
    HAL_DEMOD_CONV_CODE_RATE_5_6,
    HAL_DEMOD_CONV_CODE_RATE_7_8,
    HAL_DEMOD_CONV_CODE_RATE_8_9,
    HAL_DEMOD_CONV_CODE_RATE_9_10,

    HAL_DEMOD_DVBS2_CODE_RATE_2_9,
    HAL_DEMOD_DVBS2_CODE_RATE_13_45,
    HAL_DEMOD_DVBS2_CODE_RATE_9_20,
    HAL_DEMOD_DVBS2_CODE_RATE_90_180,
    HAL_DEMOD_DVBS2_CODE_RATE_96_180,
    HAL_DEMOD_DVBS2_CODE_RATE_11_20,
    HAL_DEMOD_DVBS2_CODE_RATE_100_180,
    HAL_DEMOD_DVBS2_CODE_RATE_104_180,
    HAL_DEMOD_DVBS2_CODE_RATE_26_45_L,
    HAL_DEMOD_DVBS2_CODE_RATE_18_30,
    HAL_DEMOD_DVBS2_CODE_RATE_28_45,
    HAL_DEMOD_DVBS2_CODE_RATE_23_36,
    HAL_DEMOD_DVBS2_CODE_RATE_116_180,
    HAL_DEMOD_DVBS2_CODE_RATE_20_30,
    HAL_DEMOD_DVBS2_CODE_RATE_124_180,
    HAL_DEMOD_DVBS2_CODE_RATE_25_36,
    HAL_DEMOD_DVBS2_CODE_RATE_128_180,
    HAL_DEMOD_DVBS2_CODE_RATE_13_18,
    HAL_DEMOD_DVBS2_CODE_RATE_132_180,
    HAL_DEMOD_DVBS2_CODE_RATE_22_30,
    HAL_DEMOD_DVBS2_CODE_RATE_135_180,
    HAL_DEMOD_DVBS2_CODE_RATE_140_180,
    HAL_DEMOD_DVBS2_CODE_RATE_7_9,
    HAL_DEMOD_DVBS2_CODE_RATE_154_180,
    HAL_DEMOD_DVBS2_CODE_RATE_11_45,
    HAL_DEMOD_DVBS2_CODE_RATE_4_15,
    HAL_DEMOD_DVBS2_CODE_RATE_14_45,
    HAL_DEMOD_DVBS2_CODE_RATE_7_15,
    HAL_DEMOD_DVBS2_CODE_RATE_8_15,
    HAL_DEMOD_DVBS2_CODE_RATE_26_45_S,
    HAL_DEMOD_DVBS2_CODE_RATE_32_45
} HAL_DEMOD_EN_CONV_CODE_RATE_TYPE;


typedef enum
{
    HAL_DEMOD_BW_MODE_6MHZ = 0,
    HAL_DEMOD_BW_MODE_7MHZ,
    HAL_DEMOD_BW_MODE_8MHZ
} HAL_DEMOD_EN_TER_BW_MODE;



typedef enum
{
    HAL_DEMOD_TER_QPSK,
    HAL_DEMOD_TER_QAM16,
    HAL_DEMOD_TER_QAM64
} HAL_DEMOD_EN_TER_CONSTEL_TYPE;


typedef enum
{
    HAL_DEMOD_TER_HIE_NONE,
    HAL_DEMOD_TER_HIE_ALPHA_1,
    HAL_DEMOD_TER_HIE_ALPHA_2,
    HAL_DEMOD_TER_HIE_ALPHA_4
} HAL_DEMOD_EN_TER_HIE_TYPE;


typedef enum
{
    HAL_DEMOD_TER_GI_1_32,
    HAL_DEMOD_TER_GI_1_16,
    HAL_DEMOD_TER_GI_1_8,
    HAL_DEMOD_TER_GI_1_4
} HAL_DEMOD_EN_TER_GI_TYPE;


typedef enum
{
    HAL_DEMOD_TER_FFT_2K,
    HAL_DEMOD_TER_FFT_8K
} HAL_DEMOD_EN_TER_FFT_MODE;


typedef enum
{
    HAL_DEMOD_TER_HP_SEL,
    HAL_DEMOD_TER_LP_SEL
} HAL_DEMOD_EN_TER_LEVEL_SEL;


typedef enum
{
    HAL_DEMOD_CAB_QAM16,
    HAL_DEMOD_CAB_QAM32,
    HAL_DEMOD_CAB_QAM64,
    HAL_DEMOD_CAB_QAM128,
    HAL_DEMOD_CAB_QAM256
} HAL_DEMOD_EN_CAB_CONSTEL_TYPE;



typedef enum
{
    HAL_DEMOD_CAB_IQ_NORMAL,
    HAL_DEMOD_CAB_IQ_INVERT
} HAL_DEMOD_EN_CAB_IQ_MODE;



typedef enum
{
    HAL_DEMOD_SAT_DVBS,
    HAL_DEMOD_SAT_DVBS2
} HAL_DEMOD_EN_SAT_MOD_TYPE;

typedef enum
{
    HAL_DEMOD_SAT_QPSK,
    HAL_DEMOD_SAT_8PSK,
    HAL_DEMOD_SAT_QAM16,

    HAL_DEMOD_SAT_32APSK,
    HAL_DEMOD_SAT_8APSK,
    HAL_DEMOD_SAT_8_8APSK,
    HAL_DEMOD_SAT_4_8_4_16APSK
} HAL_DEMOD_EN_SAT_CONSTEL_TYPE;


typedef enum
{
    HAL_DEMOD_SAT_RO_35,
    HAL_DEMOD_SAT_RO_25,
    HAL_DEMOD_SAT_RO_20
} HAL_DEMOD_EN_SAT_ROLL_OFF_TYPE;


typedef enum
{
    HAL_DEMOD_SAT_IQ_NORMAL,
    HAL_DEMOD_SAT_IQ_INVERSE
} HAL_DEMOD_EN_SAT_IQ_MODE;


typedef enum
{
    HAL_DEMOD_BIT_ERR_RATIO_LOW ,
    HAL_DEMOD_BIT_ERR_RATIO_MEDIUM ,
    HAL_DEMOD_BIT_ERR_RATIO_HIGH
} HAL_DEMOD_EN_BIT_ERR_RATIO;


typedef enum
{
    HAL_DEMOD_FE_UNLOCKED = 0,
    HAL_DEMOD_FE_LOCKED
} HAL_DEMOD_EN_FE_LOCK_STATUS;




typedef enum
{
    HAL_DEMOD_FE_TUNE_MANUAL,
    HAL_DEMOD_FE_TUNE_AUTO,
} HAL_DEMOD_EN_FE_TUNE_MODE;



typedef enum
{
    HAL_DEMOD_INTERFACE_SERIAL = 0,
    HAL_DEMOD_INTERFACE_PARALLEL
} HAL_DEMOD_INTERFACE_MODE;


typedef struct
{
    HAL_DEMOD_EN_TER_BW_MODE eBandWidth;
    HAL_DEMOD_EN_TER_CONSTEL_TYPE eConstellation;
    HAL_DEMOD_EN_TER_HIE_TYPE eHierarchy;
    HAL_DEMOD_EN_TER_GI_TYPE eGuardInterval;
    HAL_DEMOD_EN_TER_FFT_MODE eFFT_Mode;
    HAL_DEMOD_EN_CONV_CODE_RATE_TYPE eHPCodeRate;
    HAL_DEMOD_EN_CONV_CODE_RATE_TYPE eLPCodeRate;
    HAL_DEMOD_EN_TER_LEVEL_SEL eLevelSel;
} HAL_DEMOD_MS_TER_CARRIER_PARAM;


typedef struct
{
    HAL_DEMOD_EN_CAB_CONSTEL_TYPE eConstellation;
    MS_U16 u16SymbolRate;

    HAL_DEMOD_EN_CAB_IQ_MODE eIQMode;
    MS_U8 u8TapAssign;
    MS_U32 u32FreqOffset;
    MS_U8 u8TuneFreqOffset;
} HAL_DEMOD_MS_CAB_CARRIER_PARAM;


typedef struct
{

    HAL_DEMOD_EN_SAT_CONSTEL_TYPE eConstellation;
    HAL_DEMOD_EN_SAT_ROLL_OFF_TYPE eRollOff;
    HAL_DEMOD_EN_SAT_IQ_MODE eIQ_Mode;
    HAL_DEMOD_EN_CONV_CODE_RATE_TYPE eCodeRate;
    MS_U32 u32SymbolRate;

#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_DEMOD_GetParam_NEW_FLOW)
    HAL_DEMOD_EN_SAT_MOD_TYPE eDemodType;
    float eFreqoff;
#endif



} HAL_DEMOD_MS_SAT_CARRIER_PARAM;



typedef struct
{
    MS_U32 u32Frequency;
    union
    {
        HAL_DEMOD_MS_TER_CARRIER_PARAM TerParam;
        HAL_DEMOD_MS_CAB_CARRIER_PARAM CabParam;
        HAL_DEMOD_MS_SAT_CARRIER_PARAM SatParam;
    };
} HAL_DEMOD_MS_FE_CARRIER_PARAM;



#ifdef UFO_PUBLIC_HEADER_212
typedef struct
{
    MS_U8 cmd_code;
    MS_U8 param[80];
} S_CMDPKTREG;

typedef enum
{
    TS_MODUL_MODE,
    TS_FFX_VALUE,
    TS_GUARD_INTERVAL,
    TS_CODE_RATE,

    TS_PARAM_MAX_NUM
}E_SIGNAL_TYPE;

typedef enum
{
    CMD_SYSTEM_INIT = 0,
    CMD_DAC_CALI,
    CMD_DVBT_CONFIG,
    CMD_DVBC_CONFIG,
    CMD_VIF_CTRL,
    CMD_FSM_CTRL,
    CMD_INDIR_RREG,
    CMD_INDIR_WREG,
    CMD_GET_INFO,
    CMD_TS_CTRL,
    CMD_TUNED_VALUE,

    CMD_MAX_NUM
}E_CMD_CODE;

typedef enum
{
    TS_PARALLEL = 0,
    TS_SERIAL = 1,

    TS_MODE_MAX_NUM
}E_TS_MODE;

typedef enum
{
    E_SYS_UNKOWN = -1,
    E_SYS_DVBT,
    E_SYS_DVBC,
    E_SYS_ATSC,
    E_SYS_VIF,
    E_SYS_DVBS,

    E_SYS_NUM
}E_SYSTEM;
#endif


typedef struct
{
    HAL_DEMOD_EN_FE_LOCK_STATUS eLock;
    HAL_DEMOD_EN_BIT_ERR_RATIO eBER;
    float fSNR;
    float fSignalLevel;
    MS_U16 u16SignalStrength;
    MS_U8 u8SignalQuality;
    float fPreBER;
    float fPostBerTSBER;
    MS_U32 u32LockTime;
    MS_U16 u16TSpacketError;
} HAL_DEMOD_MS_FE_CARRIER_STATUS;

typedef struct
{
        MS_BOOL bLNBPowerOn;
        MS_BOOL b22kOn;
        MS_BOOL bLNBOutLow;

} HAL_DEMOD_MS_FE_CARRIER_DISEQC;


typedef struct
{
    HAL_DEMOD_MS_FE_CARRIER_PARAM Param;
    HAL_DEMOD_MS_FE_CARRIER_STATUS Status;
    HAL_DEMOD_MS_FE_CARRIER_DISEQC DiSEqCp;
} HAL_DEMOD_MS_FE_CARRIER_INFO;

typedef struct
{

    MS_BOOL bX4CFE_en;
    MS_BOOL bPPD_en;
    MS_BOOL bIQAutoSwap_en;
    MS_BOOL bQAMScan_en;
    MS_BOOL bFHO_en;
    MS_BOOL (*fptTunerSet)(MS_U32);
} Hal_Demod_Mode;







typedef enum
{
    DMD_CONV_CODE_RATE_1_2,
    DMD_CONV_CODE_RATE_1_3,
    DMD_CONV_CODE_RATE_2_3,
    DMD_CONV_CODE_RATE_1_4,
    DMD_CONV_CODE_RATE_3_4,
    DMD_CONV_CODE_RATE_2_5,
    DMD_CONV_CODE_RATE_3_5,
    DMD_CONV_CODE_RATE_4_5,
    DMD_CONV_CODE_RATE_5_6,
    DMD_CONV_CODE_RATE_7_8,
    DMD_CONV_CODE_RATE_8_9,
    DMD_CONV_CODE_RATE_9_10,



    DMD_DVBS2_CODE_RATE_2_9,
    DMD_DVBS2_CODE_RATE_13_45,
    DMD_DVBS2_CODE_RATE_9_20,
    DMD_DVBS2_CODE_RATE_90_180,
    DMD_DVBS2_CODE_RATE_96_180,
    DMD_DVBS2_CODE_RATE_11_20,
    DMD_DVBS2_CODE_RATE_100_180,
    DMD_DVBS2_CODE_RATE_104_180,
    DMD_DVBS2_CODE_RATE_26_45_L,
    DMD_DVBS2_CODE_RATE_18_30,
    DMD_DVBS2_CODE_RATE_28_45,
    DMD_DVBS2_CODE_RATE_23_36,
    DMD_DVBS2_CODE_RATE_116_180,
    DMD_DVBS2_CODE_RATE_20_30,
    DMD_DVBS2_CODE_RATE_124_180,
    DMD_DVBS2_CODE_RATE_25_36,
    DMD_DVBS2_CODE_RATE_128_180,
    DMD_DVBS2_CODE_RATE_13_18,
    DMD_DVBS2_CODE_RATE_132_180,
    DMD_DVBS2_CODE_RATE_22_30,
    DMD_DVBS2_CODE_RATE_135_180,
    DMD_DVBS2_CODE_RATE_140_180,
    DMD_DVBS2_CODE_RATE_7_9,
    DMD_DVBS2_CODE_RATE_154_180,
    DMD_DVBS2_CODE_RATE_11_45,
    DMD_DVBS2_CODE_RATE_4_15,
    DMD_DVBS2_CODE_RATE_14_45,
    DMD_DVBS2_CODE_RATE_7_15,
    DMD_DVBS2_CODE_RATE_8_15,
    DMD_DVBS2_CODE_RATE_26_45_S,
    DMD_DVBS2_CODE_RATE_32_45
} DMD_DVBS_CODE_RATE_TYPE;

#ifdef UFO_SUPPORT_VCM
typedef enum
{
    VCM_Disabled = 0,
    VCM_MODE,
    VCM_Forced_Mode
}DMD_DVBS_VCM_OPT;
#endif

#ifdef UFO_SUPPORT_KERNEL_FLOATING
typedef struct
{
  MS_S32 DATA;
  MS_S8 EXP;
}MS_FLOAT_ST;


typedef enum
{
  add = 0,
  minus,
  multiply,
  divide
}OP_type;
#endif
# 942 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_Init(DMD_DVBS_InitData *pDMD_DVBS_InitData, MS_U32 u32InitDataLen);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_Exit(void);
# 962 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_SetDbgLevel(DMD_DVBS_DbgLv u8DbgLevel);




extern DLL_PUBLIC const DMD_DVBS_Info* MDrv_DMD_DVBS_GetInfo(void);
# 977 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetDSPReg(MS_U16 u16Addr, MS_U8 *pu8Data);
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_SetDSPReg(MS_U16 u16Addr, MS_U8 pu8Data);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetLibVer(const MSIF_Version **ppVersion);






extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetFWVer(MS_U16 *ver);




extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_SetReg(MS_U16 u16Addr, MS_U8 u8Data);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_SetSerialControl(MS_BOOL bEnable);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_SetConfig(MS_U32 u32SymbolRate, DMD_DVBS_MODULATION_TYPE eQamMode, MS_U32 u32IFFreq, MS_BOOL bSpecInv, MS_BOOL bSerialTS);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_SetConfig_symbol_rate_list(MS_U32 u32SymbolRate, DMD_DVBS_MODULATION_TYPE eQamMode, MS_U32 u32IFFreq, MS_BOOL bSpecInv, MS_BOOL bSerialTS, MS_U16 *pu16_symbol_rate_list,MS_U8 u8_symbol_rate_list_num);



#ifdef UFO_DEMOD_BLINDSCAN_NEW_FLOW
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_Config(MS_U32 u32SymbolRate, DMD_DVBS_MODULATION_TYPE eQamMode, MS_U32 u32IFFreq, MS_BOOL bSpecInv, MS_BOOL bSerialTS);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_Config_symbol_rate_list(MS_U32 u32SymbolRate, DMD_DVBS_MODULATION_TYPE eQamMode, MS_U32 u32IFFreq, MS_BOOL bSpecInv, MS_BOOL bSerialTS, MS_U16 *pu16_symbol_rate_list,MS_U8 u8_symbol_rate_list_num);
#endif



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_SetActive(MS_BOOL bEnable);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetLock(DMD_DVBS_GETLOCK_TYPE eType, DMD_DVBS_LOCK_STATUS *eLockStatus);






extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetLockWithRFPower(DMD_DVBS_GETLOCK_TYPE eType, DMD_DVBS_LOCK_STATUS *eLockStatus, float fCurrRFPowerDbm, float fNoChannelRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetTunrSignalLevel_PWR(float *fPowerLevel);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetSignalStrength(MS_U16 *u16Strength);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetSignalStrengthWithRFPower(MS_U16 *u16Strength, float fRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetSignalQuality(MS_U16 *u16Quality);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetSignalQualityWithRFPower(MS_U16 *u16Quality, float fRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetSNR(float *fSNR);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetPostViterbiBer(float *ber);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetPacketErr(MS_U16 *pktErr);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetCellID(MS_U16 *u16CellID);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetParam(HAL_DEMOD_MS_SAT_CARRIER_PARAM *pParam);




extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetAGCInfo(MS_U8 u8dbg_mode, MS_U16 *pu16Data);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetStatus(DMD_DVBS_MODULATION_TYPE *pQAMMode, MS_U32 *u32SymbolRate, float *pFreqOff);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_ActiveDmdSwitch(MS_U8 demod_no);

extern DLL_PUBLIC MS_U32 MDrv_DMD_DVBS_SetPowerState(EN_POWER_MODE u16PowerState);

extern DLL_PUBLIC MS_U32 MDrv_DMD_DVBS_Demod_Restart(MS_U32 u32SymbolRate, MS_U32 u32Frequency);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_Get_FreqOffset(float *pFreqOff, MS_U8 u8BW);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_Start(MS_U16 u16StartFreq, MS_U16 u16EndFreq);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_NextFreq(MS_BOOL* bBlindScanEnd);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_Cancel(void);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_End(void);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_GetChannel(MS_U16 u16ReadStart, MS_U16* u16TPNum, HAL_DEMOD_MS_FE_CARRIER_PARAM *pTable);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_GetCurrentFreq(MS_U32 *u32CurrentFeq);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_WaitCurFreqFinished(MS_U8* u8Progress,MS_U8 *u8FindNum);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_BlindScan_GetTunerFreq_EX(MS_U16 *u16TunerCenterFreq, MS_U16 *u16TunerCutOffFreq);
#define Temp_func2(a,b,...) MDrv_DMD_DVBS_BlindScan_GetTunerFreq_EX(a,b)
#define Temp_func1(...) Temp_func2(__VA_ARGS__)
#define MDrv_DMD_DVBS_BlindScan_GetTunerFreq(...) Temp_func1(__VA_ARGS__,NULL)







extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_Init(void);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_SetLNBOut(MS_BOOL bLow);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_GetLNBOut(MS_BOOL* bLNBOutLow);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_Set22kOnOff(MS_BOOL b22kOn);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_Get22kOnOff(MS_BOOL* b22kOn);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_SendCmd(MS_U8* pCmd,MS_U8 u8CmdSize);


extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_ReceiveCmd(MS_U8* pCmd,MS_U8* u8CmdSize);

#ifdef UFO_DEMOD_DVBS_CUSTOMIZED_DISEQC_SEND_CMD
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_Customized_DiSEqC_SendCmd(MS_U8* pCmd,MS_U8 u8CmdSize);
#endif

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_SetTxToneMode(MS_BOOL bTxTone22kOff);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_DiSEqC_SetTone(MS_BOOL bTone1);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_UnicableAGCCheckPower(MS_BOOL pbAGCCheckPower);


MS_BOOL MDrv_DMD_DVBS_Reg_INT_CB(fpIntCallBack fpCBReg);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_TS_DivNum_Calculation(void);

#ifdef UFO_SUPPORT_VCM
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_Set_IS_ID(MS_U8 u8IS_ID);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_Set_Default_IS_ID(MS_U8 *u8IS_ID_table);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_Get_IS_ID_INFO(MS_U8 *u8IS_ID, MS_U8 *u8IS_ID_table);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_VCM_Init(DMD_DVBS_VCM_OPT u8VCM_OPT, MS_U8 u8IS_ID, MS_U32 u32DVBS2_DJB_START_ADDR);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_VCM_Check(void);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_VCM_Enabled(MS_U8 u8VCM_ENABLED);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS2_VCM_Change_Mode(DMD_DVBS_VCM_OPT u8VCM_OPT);
#endif

#ifdef UFO_SUPPORT_KERNEL_FLOATING



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetSNR_Kernel(MS_FLOAT_ST *fSNR);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_GetBER_Kernel(MS_FLOAT_ST *ber);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBS_TS_DivNum_Calculation_Kernel(void);
#endif

#ifdef __cplusplus
}
#endif


#endif
# 106 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsFS.h"
#ifndef __MSFS_H__
#define __MSFS_H__ 




#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "stdlib.h"
#include "stdio.h"
#include "dirent.h"
# 138 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsFS.h"
int MsFS_Init(int bUnitcode);




int MsFS_Mount( const char *devname, const char *dir, const char *fsname, unsigned long mountflags, const void* data );
int MsFS_Umount( const char *dir);




int MsFS_Open( const char *path, int oflag, ... );
int MsFS_Unlink( const char *path );
int MsFS_MkDir( const char *path, mode_t mode );
int MsFS_RmDir( const char *path );
int MsFS_ChDir(const char *path);
int MsFS_Rename( const char *path1, const char *path2 );
int MsFS_Link( const char *path1, const char *path2 );
int MsFS_Stat( const char *path, struct stat *buf );
int MsFS_FStat( int fd, struct stat *buf );
long MsFS_PathConf( const char *path, int name );
long MsFS_FPathConf( int fd, int name );
int MsFS_Access( const char *path, int amode );
char* MsFS_GetCwd( char *buf, size_t size );
DIR* MsFS_OpenDir( const char *dirname );
struct dirent* MsFS_ReadDir( DIR *dirp );
void MsFS_RewindDir( DIR *dirp );
void MsFS_CloseDir( DIR *dirp );





ssize_t MsFS_Read( int fd, void *buf, size_t len );
ssize_t MsFS_Write( int fd, const void *buf, size_t len );
int MsFS_Close( int fd );
MS_U64 MsFS_Lseek( int fd, MS_U64 pos, int whence );
int MsFS_FCntl( int fd, int cmd, ... );
int MsFS_FSync( int fd );
void MsFS_Sync(void);





FILE * MsFS_Fopen( const char *filename, const char *mode );
int MsFS_Fclose( FILE *stream );
size_t MsFS_Fread( void *data, size_t itemsize, size_t nitems, FILE *stream );
size_t MsFS_Fwrite( const void *data, size_t itemsize, size_t nitems, FILE *stream );
int MsFS_Fftruncate( FILE *stream, MS_U64 length);
int MsFS_Fseek( FILE *stream, MS_U64 pos, int whence );
void MsFS_Rewind( FILE *stream );
MS_U64 MsFS_Ftell( FILE *stream );
int MsFS_Fflush(FILE *stream);




typedef struct
{
    MS_U32 u32ClusTotal;
    MS_U32 u32ClusFree;
    MS_U32 u32ClusSize;
} MApi_FsInfo;

MS_BOOL MApi_FS_Info(const char *path, MS_BOOL bUnicode, MApi_FsInfo* pFsInfo);

#ifdef __cplusplus
}
#endif


#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/label.h"
#ifndef _LABEL_H_
#define _LABEL_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#define UTOPIA_RELEASE_LABEL "UNKNOWN"

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIPAPool_v2.h"
#ifndef _DRVCMAPOOL_H_
#define _DRVCMAPOOL_H_ 

#if defined (CONFIG_MSTAR_IPAPOOL)
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#define TEST_USE_SELF_KO_MAKEFILE_TOTAL 0

#define IPAPOOL_HEAP_NAME_MAX_LEN_Param 32

enum IPA_SPACE_TYPE
{
    IPA_SPACE_TYPE_PA = 0,
    IPA_SPACE_TYPE_CMA = 1,
    IPA_IPA_SPACE_TYPE_INVALID = 0xFFFFFFFF
};

struct IPA_Pool_InstallIpcHandle_Param
{
    MS_U32 ipc_handle_id;
    MS_U32 pool_handle_id;
    MS_S32 error_code;
};

struct IPA_Pool_GetIpcHandle_Param
{
    MS_U32 pool_handle_id;
    MS_U32 ipc_handle_id;
    MS_S32 error_code;
};

struct IPA_Pool_Heap_Attr_Param
{
    MS_U32 heap_id;

    char name[IPAPOOL_HEAP_NAME_MAX_LEN_Param];
    MS_U64 heap_miu_start_offset;
    MS_U64 heap_length;
    MS_U32 miu;
    enum IPA_SPACE_TYPE heap_type;
    MS_S32 error_code;
};
enum IPA_DCACHE_FLUSH_TYPE_Param
{
    IPA_DCACHE_FLUSH_Param,
    IPA_DCACHE_INVALID_Param,
    IPA_DCACHE_FLUSH_INVALID_Param
};

struct IPA_Pool_DCacheFlush_Param
{
    MS_U64 virt_addr;
    MS_U64 length;
    enum IPA_DCACHE_FLUSH_TYPE_Param flush_type;
};

struct IPA_Pool_Unmap_Param
{
    MS_U64 virt_addr;
    MS_U64 length;
};


enum IPA_MAP_VA_TYPE_Param
{
    IPA_MAP_VA_NO_NEEDED_Param = 0,
    IPA_VA_CACHE_WRITE_BACK_Param = 1,
    IPA_VA_CACHE_WRITE_THROUGH_Param = 2,
    IPA_VA_CACHE_NONE_CACHE_Param = 3,
    IPA_VA_TYPE_MAX_Param = 0xFFFFFFFF
};

struct IPA_Pool_Map_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_U64 length;
    enum IPA_MAP_VA_TYPE_Param cache_type;

    MS_U64 virt_addr;
    MS_S32 error_code;
};


struct IPA_Pool_PutMem_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_U64 length;
};

struct IPA_Pool_GetMem_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_U64 length;
    MS_S32 error_code;
};

struct IPA_Pool_Init_Param
{
    MS_U32 space_id;
    char *pool_name;

    MS_U64 offset_in_heap;
    MS_U64 len;

    MS_U32 pool_handle_id;
    MS_U32 miu;
    enum IPA_SPACE_TYPE space_type;
    MS_S32 error_code;

    MS_U64 space_length;
    MS_U64 space_miu_start_offset;
};


enum IPA_event_Param
{
  IPA_EVENT_FREE_Param = 0,
  IPA_EVENT_NO_WAIT_Param,
  IPA_EVNET_NUM_Param
};

struct IPA_Pool_Event_Param
{
    enum IPA_event_Param event;
    MS_U32 pool_handle_id;
};

struct IPA_Pool_Polling_Param
{
    MS_U32 pool_handle_id;
    void (*polling_callback)(MS_U32 pool_handle_id,MS_U64 start,MS_U64 length);
};





MS_BOOL __attribute__((weak)) MApi_IPA_Pool_Init(struct IPA_Pool_Init_Param * Init_Param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_Release(MS_U32 pool_handle_id);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_GetMem(struct IPA_Pool_GetMem_Param * get_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_PutMem(struct IPA_Pool_PutMem_Param * put_param);

MS_BOOL __attribute__((weak)) MApi_IPA_Pool_MapVA(struct IPA_Pool_Map_Param * map_param);
void __attribute__((weak)) MApi_IPA_Pool_UnmapVA(struct IPA_Pool_Unmap_Param * unmap_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_MapKerVA(struct IPA_Pool_Map_Param * map_param);
void __attribute__((weak)) MApi_IPA_Pool_UnmapKerVA(struct IPA_Pool_Unmap_Param * unmap_param);

MS_BOOL __attribute__((weak)) MApi_IPA_Pool_DCacheFlush(struct IPA_Pool_DCacheFlush_Param* dcache_flush_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_HEAP_ATTR(struct IPA_Pool_Heap_Attr_Param* heap_attr_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_GETIPCHANDLE(struct IPA_Pool_GetIpcHandle_Param* getipchandle_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_InstallIpcHandle(struct IPA_Pool_InstallIpcHandle_Param* installipchandle_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_GetMem_Timeout(struct IPA_Pool_GetMem_Param* get_param,MS_U32 timeout);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_Notify(struct IPA_Pool_Polling_Param *polling_param);
    #ifdef __cplusplus
}
#endif
#endif
#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvXC_HDMI_if_v2.h"
#ifndef _XC_HDMI_IF_H_
#define _XC_HDMI_IF_H_ 

#include "MsTypes.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif

#if !defined(UFO_PUBLIC_HEADER_500_3)
typedef enum
{

    MAPI_CMD_HDMIRX_INITIAL,
    MAPI_CMD_HDMIRX_STABLE_POLLING,
    MAPI_CMD_HDMIRX_GET_SOURCE_VERSION,
    MAPI_CMD_HDMIRX_CHECK_HDCP_STATE,
    MAPI_CMD_HDMIRX_CHECK_HDCP_ENC_STATE,
    MAPI_CMD_HDMIRX_CHECK_HDCP14_KEY,
    MAPI_CMD_HDMIRX_GET_HDCP14_KEY_VAILD,
    MAPI_CMD_HDMIRX_SET_HPD_INVERT_FLAG,
    MAPI_CMD_HDMIRX_GET_PACKET_RECEIVE,

    MAPI_CMD_HDMIRX_WRITE_X74,
    MAPI_CMD_HDMIRX_READ_X74,
    MAPI_CMD_HDMIRX_SET_REPEATER,
    MAPI_CMD_HDMIRX_SET_BSTATUS,
    MAPI_CMD_HDMIRX_SET_HDMI_MODE,
    MAPI_CMD_HDMIRX_GET_INTERRUPT_STATUS,
    MAPI_CMD_HDMIRX_WRITE_KSV_LIST,
    MAPI_CMD_HDMIRX_SET_VPRIME,
    MAPI_CMD_HDMIRX_HDCP22_FILL_CIPHER_KEY,
    MAPI_CMD_HDMIRX_HDCP22_PORT_INIT,
    MAPI_CMD_HDMIRX_HDCP22_POLLING_READ_DONE,
    MAPI_CMD_HDMIRX_HDCP22_ENABLE_CIPHER,
    MAPI_CMD_HDMIRX_HDCP22_SEND_MESSAGE,
    MAPI_CMD_HDMIRX_HDCP22_HANDLER,
    MAPI_CMD_HDMIRX_HDCP22_WAIT_EVENT,

}E_HDMIRX_API_CMD_TYPE;
#endif

typedef struct
{
    stHDMI_INITIAL_TABLE stInitialTable;
} stHDMI_INITIAL_SETTING, *pstHDMI_INITIAL_SETTING;

typedef struct
{
    MS_U16 u16ReturnValue;
} stHDMI_FUNC_CAPS, *pstHDMI_FUNC_CAPS;

typedef struct
{
    HDMI_REST_t breset;
} stHDMI_PKT_RESET, *pstHDMI_PKT_RESET;

typedef struct
{
    MS_BOOL bHighLow;
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bInverse;
} stHDMI_PULLHPD, *pstHDMI_PULLHPD;

typedef struct
{
    HDMI_GControl_INFO_t gcontrol;
    MS_U16 u16ReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GC_INFO, *pstHDMI_GC_INFO;

typedef struct
{
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3)
    MS_BOOL bEnable;
    MS_HDMI_PACKET_VALUE_t stReturnValue;
#else
    MS_U32 ulPacketStatus;
    MS_BOOL bEnable;
    MS_U8 ucHDMIInfoSource;
#endif
} stHDMI_PACKET_RECEIVED, *pstHDMI_PACKET_RECEIVED;

typedef struct
{
    MS_HDMI_COLOR_FORMAT eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_COLORFORMAT, *pstHDMI_GET_COLORFORMAT;

typedef struct
{
    EN_HDMI_COLOR_RANGE eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_COLORRANGE, *pstHDMI_GET_COLORRANGE;

typedef struct
{
    MS_HDMI_EQ enEq;
    MS_U8 u8EQValue;
} stHDMI_SET_EQ, *pstHDMI_SET_EQ;

typedef struct
{
    MS_HDMI_EQ enEq;
    MS_U8 u8EQValue;
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bReturnValue;
} stHDMI_SET_EQ_TO_PORT, *pstHDMI_SET_EQ_TO_PORT;

typedef struct
{
    MS_U16 u16MuteEvent;
    MS_U16 u16MuteMask;
} stHDMI_AUDIO_MUTE_ENABLE, *pstHDMI_AUDIO_MUTE_ENABLE;

typedef struct
{
    MS_BOOL bEn_PAR;
    MS_BOOL bEn_AFAR;
    MS_HDMI_AR_TYPE eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_ASPECTRATIO, *pstHDMI_GET_ASPECTRATIO;

typedef struct
{
    MS_BOOL bEn_AFAR;
    MS_HDMI_AR_TYPE eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_ACTIVEFORMAT_ASPECTRATIO, *pstHDMI_GET_ACTIVEFORMAT_ASPECTRATIO;

typedef struct
{
    EN_AVI_INFOFRAME_VERSION eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_AVIINFOFRAMEVER, *pstHDMI_GET_AVIINFOFRAMEVER;

typedef struct
{
    MS_U8 u8value;
    MS_BOOL bread;
    MS_U8 u8ReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_ERR_STATUS_UPDATE, *pstHDMI_ERR_STATUS_UPDATE;

typedef struct
{
    MS_U16 u8ReturnValue;
} stHDMI_GET_TMDS_FREQ, *pstHDMI_GET_TMDS_FREQ;

typedef struct
{
    HDMI_POLLING_STATUS_t **pStatus;
} stHDMI_GET_POLLINGSTATUS, *pstHDMI_GET_POLLINGSTATUS;

typedef struct
{
    MS_BOOL bReturnValue;
} stHDMI_ISHDMI_MODE, *pstHDMI_ISHDMI_MODE;

typedef struct DLL_PACKED
{
    MS_U8 * pu8ManufactorData;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_MID_INFO, *pstHDMI_GET_MID_INFO;

typedef struct DLL_PACKED
{
    MS_HDMI_PACKET_STATE_t u8state;
    MS_U8 u8byte_idx;
    MS_U8 *pValue;
    MS_BOOL bReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_PACKET_VALUE, *pstHDMI_GET_PACKET_VALUE;

typedef struct
{
    MS_DVI_CHANNEL_TYPE u8Channel;
    MS_U16 u16ReturnValue;
} stDVI_CHANNELPHASESTATUS, *pstDVI_CHANNELPHASESTATUS;

typedef struct
{
    MS_U16 u16Reset;
} stDVI_SOFTWARERESET, *pstDVI_SOFTWARERESET;

typedef struct
{
    MS_BOOL bReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_AVIIINFO_ACTIVEINFOPRESENT, *pstHDMI_GET_AVIIINFO_ACTIVEINFOPRESENT;

typedef struct
{
    MS_BOOL bPullLow;
    E_MUX_INPUTPORT enInputPortType;
} stDVI_CLKPULLLOW, *pstDVI_CLKPULLLOW;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucHDMIInfoSource;
} stDVI_SWITCHSRC, *pstDVI_SWITCHSRC;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bReturnValue;
} stHDMI_SETFORCLOCKLESSTHAN70MHZ, *pstHDMI_SETFORCLOCKLESSTHAN70MHZ;

typedef struct
{
    MS_BOOL bClockLessThan70MHz;
} stHDMI_DVI_ADJUST, *pstHDMI_DVI_ADJUST;

typedef struct
{
    INPUT_SOURCE_TYPE_t enInputSourceType;
} stHDMI_SETUPDATEPHASELINECOUNT, *pstHDMI_SETUPDATEPHASELINECOUNT;

typedef struct
{
    MS_BOOL bEnable;
} stHDCP_ENABLE, *pstHDCP_ENABLE;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bEnable;
    MS_BOOL bReturnValue;
} stHDMI_SET_HDCPENABLE, *pstHDMI_SET_HDCPENABLE;

typedef struct DLL_PACKED
{
    MS_U8 * pu8HdcpKeyData;
} stHDCP_INITPRODUCTIONKEY, *pstHDCP_INITPRODUCTIONKEY;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_212)
    MS_HDCP_STATUS_INFO_t* stReturnValue;
#else
    MS_U16 usHDCPStatus;
#endif
} stHDCP_GETSTATUS, *pstHDCP_GETSTATUS;

typedef struct
{
    MS_BOOL bStable;
} stHDCP_VSYNC_END_EN, *pstHDCP_VSYNC_END_EN;

typedef struct
{
    MS_BOOL bEnable;
} stHDMI_AUDIO_OUTPUT, *pstHDMI_AUDIO_OUTPUT;

typedef struct
{
    MS_U8 u8ReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_AUDIO_CP_HDR_INFO, *pstHDMI_AUDIO_CP_HDR_INFO;

typedef struct
{
    MS_U8 u8byte;
    MS_U8 u8ReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_AUDIO_CHANNEL_STATUS, *pstHDMI_AUDIO_CHANNEL_STATUS;

typedef struct DLL_PACKED
{
    const MSIF_Version **ppVersion;
    HDMI_Ret_Value eReturnValue;
} stHDMI_GETLIBVER, *pstHDMI_GETLIBVER;

typedef struct DLL_PACKED
{
    MS_HDMI_INFO *pInfo;
    HDMI_Ret_Value eReturnValue;
} stHDMI_GETINFO, *pstHDMI_GETINFO;

typedef struct DLL_PACKED
{
    MS_HDMI_Status *pStatus;
    HDMI_Ret_Value eReturnValue;
} stHDMI_GETSTATUS, *pstHDMI_GETSTATUS;

typedef struct DLL_PACKED
{
    XC_DDCRAM_PROG_INFO *pstDDCRam_Info;
    MS_U32 u32SizeOfInfo;
} stHDMI_READ_DDCRAM, *pstHDMI_READ_DDCRAM;

typedef struct DLL_PACKED
{
    XC_DDCRAM_PROG_INFO *pstDDCRam_Info;
    MS_U32 u32SizeOfInfo;
} stHDMI_PROG_DDCRAM, *pstHDMI_PROG_DDCRAM;

typedef struct
{
    MS_HDMI_CONTENT_TYPE enReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_CONTENT_TYPE, *pstHDMI_GET_CONTENT_TYPE;

typedef struct
{
    MS_HDMI_EXT_COLORIMETRY_FORMAT enReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_EXT_COLORIMETRY, *pstHDMI_GET_EXT_COLORIMETRY;

typedef struct
{
    MS_U8 u8ReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_PIXEL_REPETITION, *pstHDMI_GET_PIXEL_REPETITION;

typedef struct
{
    MS_BOOL bReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_CHECK_4K2K, *pstHDMI_CHECK_4K2K;

typedef struct
{
    MS_U8 ucHDMIInfoSource;
} stHDMI_3D_4K2K_PROCESS, *pstHDMI_3D_4K2K_PROCESS;

typedef struct
{
    MS_BOOL bTrue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_AVG_SCALERINGDOWN, *pstHDMI_AVG_SCALERINGDOWN;

typedef struct
{
    E_HDMI_ADDITIONAL_VIDEO_FORMAT eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_CHECK_ADDITIONAL_FORMAT, *pstHDMI_CHECK_ADDITIONAL_FORMAT;

typedef struct
{
    E_XC_3D_INPUT_MODE eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_3D_STRUCTURE, *pstHDMI_GET_3D_STRUCTURE;

typedef struct
{
    E_HDMI_3D_EXT_DATA_T eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_3D_EXT_DATA, *pstHDMI_GET_3D_EXT_DATA;

typedef struct DLL_PACKED
{
    sHDMI_3D_META_FIELD *pdata;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_3D_META_FIELD, *pstHDMI_GET_3D_META_FIELD;

typedef struct
{
    MS_U8 u8ReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_VIC_CODE, *pstHDMI_GET_VIC_CODE;

typedef struct
{
    E_HDMI_VIC_4Kx2K_CODE eReturnValue;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_4KX2K_VIC_CODE, *pstHDMI_GET_4KX2K_VIC_CODE;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bEnable;
    MS_BOOL bDrivingHigh;
} stHDMI_ARC_PINCONTROL, *pstHDMI_ARC_PINCONTROL;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U16 u16Reset;
} stDVI_SOFTWARE_RESET, *pstDVI_SOFTWARE_RESET;

typedef struct
{
    EN_POWER_MODE enPowerState;
    MS_U32 u32ReturnValue;
} stHDMI_SET_POWERSTATE, *pstHDMI_SET_POWERSTATE;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bReturnValue;
} stHDMI_CheckHDMI20_Setting, *pstHDMI_CheckHDMI20_Setting;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bReturnValue;
} stHDMI_CHECK_HDMI20_SETTING, *pstHDMI_CHECK_HDMI20_SETTING;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucSourceVersion;
} stHDMI_Get_Source_Version, *pstHDMI_Get_Source_Version;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucSourceVersion;
} stHDMI_GET_SOURCE_VERSION, *pstHDMI_GET_SOURCE_VERSION;

typedef struct
{
    MS_U32 ul5VDetectGPIOSelect;
} stHDMI_Set5VDetectGPIOSelect, *pstHDMI_Set5VDetectGPIOSelect;

typedef struct
{
    MS_U32 ul5VDetectGPIOSelect;
} stHDMI_SET_5V_DETECT_GPIO_SELECT, *pstHDMI_SET_5V_DETECT_GPIO_SELECT;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bStatus;
} stHDMI_Get_De_Stable_Status, *pstHDMI_Get_De_Stable_Status;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bStatus;
} stHDMI_GET_DE_STABLE_STATUS, *pstHDMI_GET_DE_STABLE_STATUS;

typedef struct
{
    MS_BOOL ucHDCP14_flag;
} stHDMI_Check_HDCP14, *pstHDMI_Check_HDCP14;

typedef struct
{
    MS_BOOL bHDCP14KeyVaildFlag;
} stHDMI_GET_HDCP14_KEY_VAILD, *pstHDMI_GET_HDCP14_KEY_VAILD;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucHDCPState;
} stHDMI_CHECK_HDCP_STATE, *pstHDMI_CHECK_HDCP_STATE;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucHDCPENCState;
} stHDMI_CHECK_HDCP_ENC_STATE, *pstHDMI_CHECK_HDCP_ENC_STATE;

typedef struct
{
    MS_BOOL bInverse;
    E_MUX_INPUTPORT enInputPortType;
} stHDMI_SET_HPD_INVERT_FLAG, *pstHDMI_SET_HPD_INVERT_FLAG;

typedef struct
{
    MS_U16 usReturnValue;
    E_HDMI_GET_DATA_INFO enInfo;
    MS_U8 ucHDMIInfoSource;
} stHDMI_GET_DATA_INFO, *pstHDMI_GET_DATA_INFO;


typedef struct
{
 MS_U8 ucPortIdx;
 MS_U8* pucRiv;
 MS_U8* pucSessionKey;
} stHDCP22_FillCipherKey, *pstHDCP22_FillCipherKey;

typedef struct DLL_PACKED
{
    MS_U8 ucPortIdx;
    MS_U8* pucRiv;
    MS_U8* pucSessionKey;
} stHDCP22_FILL_CIPHER_KEY, *pstHDCP22_FILL_CIPHER_KEY;

typedef struct DLL_PACKED
{
    HDCP22_Recv_CBF pCBFunc;
    void* pContext;
} stHDCP22_InitCBFunc, *pstHDCP22_InitCBFunc;

typedef struct
{
 MS_U8 ucPortIdx;
} stHDCP22_PortInit, *pstHDCP22_PortInit;

typedef struct
{
    MS_U8 ucPortIdx;
} stHDCP22_PORT_INIT, *pstHDCP22_PORT_INIT;

typedef struct
{
    MS_U8 ucPortIdx;
    MS_BOOL bReturnValue;
} stHDCP22_PollingReadDone, *pstHDCP22_PollingReadDone;

typedef struct
{
    MS_U8 ucPortIdx;
    MS_BOOL bReturnValue;
} stHDCP22_POLLING_READ_DONE, *pstHDCP22_POLLING_READ_DONE;

typedef struct
{
    MS_U8 ucPortType;
    MS_U8 ucPortIdx;
    MS_BOOL bIsEnable;
} stHDCP22_EnableCipher, *pstHDCP22_EnableCipher;

typedef struct
{
    MS_U8 ucPortType;
    MS_U8 ucPortIdx;
    MS_BOOL bIsEnable;
} stHDCP22_ENABLE_CIPHER, *pstHDCP22_ENABLE_CIPHER;

typedef struct
{
 MS_U8 ucPortType;
 MS_U8 ucPortIdx;
 MS_U8* pucData;
 MS_U32 dwDataLen;
 void* pDummy;
} stHDCP22_SendMsg, *pstHDCP22_SendMsg;

typedef struct DLL_PACKED
{
    MS_U8 ucPortType;
    MS_U8 ucPortIdx;
    MS_U8* pucData;
    MS_U32 dwDataLen;
    void* pDummy;
} stHDCP22_SEND_MESSAGE, *pstHDCP22_SEND_MESSAGE;

typedef struct
{
 MS_U8 ucPortIdx;
} stHDCP22_Handler, *pstHDCP22_Handler;

typedef struct
{
    MS_BOOL bHdcp22RecvMsgFlag;
    MS_BOOL bIRQModeFlag;
    MS_U8 ucPortIdx;
    MS_U8 ucHdcp22PortType;
    MS_U8 pucHdcp22MsgData[129];
    MS_U32 ucHdcp22MsgLen;
} stHDCP22_HANDLER, *pstHDCP22_HANDLER;

typedef struct
{
    MS_U8 ucHDCPWriteDoneIndex;
} stHDCP22_WAIT_EVENT, *pstHDCP22_WAIT_EVENT;

typedef struct
{
    MS_U32 u32Cmd;
    void *pBuf;
    MS_U32 u32BufSize;
    MS_BOOL bRet;
} stHDMI_Ctrl, *pstHDMI_Ctrl;


typedef struct DLL_PACKED
{
    MS_U32 u32Cmd;
    void *pBuf;
    MS_U32 u32BufSize;
    MS_BOOL bRet;
    MS_U8 ucHDMIInfoSource;
} stHDMI_CONTROL, *pstHDMI_CONTROL;


typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucOffset;
    MS_U8 ucData;
} stHDCP_WRITE_X74, *pstHDCP_WRITE_X74;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucOffset;
    MS_U8 ucRetData;
} stHDCP_READ_X74, *pstHDCP_READ_X74;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bIsRepeater;
} stHDCP_SET_REPEATER, *pstHDCP_SET_REPEATER;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U16 usBstatus;
} stHDCP_SET_BSTATUS, *pstHDCP_SET_BSTATUS;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_BOOL bHDMIMode;
} stHDCP_SET_HDMI_MODE, *pstHDCP_SET_HDMI_MODE;

typedef struct
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8 ucRetIntStatus;
} stHDCP_GET_INTERRUPT_STATUS, *pstHDCP_GET_INTERRUPT_STATUS;

typedef struct DLL_PACKED
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8* pucKSV;
    MS_U32 ulLen;
} stHDCP_WRITE_KSV_LIST, *pstHDCP_WRITE_KSV_LIST;

typedef struct DLL_PACKED
{
    E_MUX_INPUTPORT enInputPortType;
    MS_U8* pucVPrime;
} stHDCP_SET_VPRIME, *pstHDCP_SET_VPRIME;


#ifdef __cplusplus
}
#endif

#endif
# 125 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL_EX.h"
#ifndef _API_XC_PANEL_EX_H_
#define _API_XC_PANEL_EX_H_ 


#include "MsTypes.h"
#include "MsVersion.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C" {
#endif




#ifndef _MS_VERSION_H_
#define MSIF_TAG {'M','S','I','F'}
#define MSIF_CLASS {'0','0'}
#define MSIF_CUS 0x0000
#define MSIF_MOD 0x0000
#define MSIF_CHIP 0x000B
#define MSIF_CPU '0'
#define MSIF_OS '2'
#endif


#define MSIF_PNL_EX_LIB_CODE {'P','E','X','_'}
#define MSIF_PNL_EX_LIBVER {'0','4'}
#define MSIF_PNL_EX_BUILDNUM {'5','3'}
#define MSIF_PNL_EX_CHANGELIST {'0','0','6','6','7','4','7','1'}

#define PNL_EX_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_PNL_EX_LIB_CODE , \
    MSIF_PNL_EX_LIBVER , \
    MSIF_PNL_EX_BUILDNUM , \
    MSIF_PNL_EX_CHANGELIST, \
    MSIF_OS


#define API_PNLEXSTATUS_EX_VERSION 1





typedef enum
{
    E_PNL_EX_DEVICE0 = 0,
    E_PNL_EX_DEVICE1,
    E_PNL_EX_MAX_DEVICE_NUM
} PNL_EX_DEVICE_NUM;


typedef enum
{
    E_PNL_EX_FAIL = 0,
    E_PNL_EX_OK = 1,
    E_PNL_EX_GET_BASEADDR_FAIL,
    E_PNL_EX_OBTAIN_MUTEX_FAIL,
} PNL_EX_Result;


typedef enum
{
    E_PNL_EX_ASPECT_RATIO_4_3 = 0,
    E_PNL_EX_ASPECT_RATIO_WIDE,
    E_PNL_EX_ASPECT_RATIO_OTHER,
} PNL_EX_ASPECT_RATIO;


typedef enum
{
    E_PNL_EX_GAMMA_10BIT = 0,
    E_PNL_EX_GAMMA_12BIT,
    E_PNL_EX_GAMMA_ALL
} PNL_EX_GAMMA_TYPE;


typedef enum
{
    E_PNL_EX_GAMMA_8BIT_MAPPING = 0,
    E_PNL_EX_GAMMA_10BIT_MAPPING,
    E_PNL_EX_GAMMA_ALL_MAPPING
} PNL_EX_GAMMA_MAPPEING_MODE;


typedef enum
{
    E_PNL_EX_DIMMING_MIN = 0,
    E_PNL_EX_DIMMING_CURRENT ,
    E_PNL_EX_DIMMING_MAX ,
} PNL_EX_DIMMING_CTRL;


typedef enum
{
    E_PNL_EX_LINK_TTL,
    E_PNL_EX_LINK_LVDS,
    E_PNL_EX_LINK_RSDS,
    E_PNL_EX_LINK_MINILVDS,
    E_PNL_EX_LINK_ANALOG_MINILVDS,
    E_PNL_EX_LINK_DIGITAL_MINILVDS,
    E_PNL_EX_LINK_MFC,
    E_PNL_EX_LINK_DAC_I,
    E_PNL_EX_LINK_DAC_P,
    E_PNL_EX_LINK_PDPLVDS,
    E_PNL_EX_LINK_EXT,
} PNL_EX_LINK_TYPE;


typedef enum
{

    E_PNL_EX_LINK_EPI34_8P = E_PNL_EX_LINK_EXT,
    E_PNL_EX_LINK_EPI28_8P,
    E_PNL_EX_LINK_EPI34_6P,
    E_PNL_EX_LINK_EPI28_6P,


    E_PNL_EX_LINK_MINILVDS_5P_2L,
    E_PNL_EX_LINK_MINILVDS_4P_2L,
    E_PNL_EX_LINK_MINILVDS_3P_2L,
    E_PNL_EX_LINK_MINILVDS_6P_1L,
    E_PNL_EX_LINK_MINILVDS_5P_1L,
    E_PNL_EX_LINK_MINILVDS_4P_1L,
    E_PNL_EX_LINK_MINILVDS_3P_1L,

    E_PNL_EX_LINK_HS_LVDS,
    E_PNL_EX_LINK_HF_LVDS,

    E_PNL_EX_LINK_TTL_TCON,
    E_PNL_EX_LINK_MINILVDS_2CH_3P_8BIT,
    E_PNL_EX_LINK_MINILVDS_2CH_4P_8BIT,
    E_PNL_EX_LINK_MINILVDS_2CH_5P_8BIT,
    E_PNL_EX_LINK_MINILVDS_2CH_6P_8BIT,

    E_PNL_EX_LINK_MINILVDS_1CH_3P_8BIT,
    E_PNL_EX_LINK_MINILVDS_1CH_4P_8BIT,
    E_PNL_EX_LINK_MINILVDS_1CH_5P_8BIT,
    E_PNL_EX_LINK_MINILVDS_1CH_6P_8BIT,

    E_PNL_EX_LINK_MINILVDS_2CH_3P_6BIT,
    E_PNL_EX_LINK_MINILVDS_2CH_4P_6BIT,
    E_PNL_EX_LINK_MINILVDS_2CH_5P_6BIT,
    E_PNL_EX_LINK_MINILVDS_2CH_6P_6BIT,

    E_PNL_EX_LINK_MINILVDS_1CH_3P_6BIT,
    E_PNL_EX_LINK_MINILVDS_1CH_4P_6BIT,
    E_PNL_EX_LINK_MINILVDS_1CH_5P_6BIT,
    E_PNL_EX_LINK_MINILVDS_1CH_6P_6BIT,
}PNL_EX_LINK_EXT_TYPE;


typedef enum
{
    E_PNL_EX_POWER_TIMING_1 ,
    E_PNL_EX_POWER_TIMING_2 ,
    E_PNL_EX_POWER_TIMING_NA = 0xFFFF,
} PNL_EX_POWER_TIMING_SEQ;


typedef enum
{
    E_PNL_EX_TI_10BIT_MODE = 0,
    E_PNL_EX_TI_8BIT_MODE = 2,
    E_PNL_EX_TI_6BIT_MODE = 3,
} PNL_EX_TIBITMODE;


typedef enum
{
    E_PNL_EX_CHG_DCLK = 0,
    E_PNL_EX_CHG_HTOTAL = 1,
    E_PNL_EX_CHG_VTOTAL = 2,
} PNL_EX_OUT_TIMING_MODE;


typedef enum
{
    E_PNL_EX_OUTPUT_10BIT_MODE = 0,
    E_PNL_EX_OUTPUT_6BIT_MODE = 1,
    E_PNL_EX_OUTPUT_8BIT_MODE = 2,
} PNL_EX_OUTPUTFORMAT_BITMODE;


typedef struct
{
    MS_U32 u32Version;
    MS_U32 u32Id;
} PNL_DeviceId;


typedef struct __attribute__((packed))
{
    PNL_EX_GAMMA_TYPE eSupportGammaType;
} PNL_EX_ApiInfo;


typedef struct __attribute__((packed))
{
    MS_BOOL bPanel_Initialized;
    MS_BOOL bPanel_Enabled;
} PNL_EX_ApiStatus;


typedef struct
{
    MS_U32 u32ApiStatusEx_Version;
    MS_U16 u16ApiStatusEX_Length;

    MS_BOOL bPNLInitialize;
    MS_BOOL bPNLEnable;
    MS_U16 u16VTotal;
    MS_U16 u16DEVStart;
    MS_U16 u16DEVEnd;
    MS_U16 u16VSyncStart;
    MS_U16 u16VSyncEnd;
    MS_U16 u16HTotal;
    MS_U16 u16DEHStart;
    MS_U16 u16DEHEnd;
    MS_U16 u16HSyncWidth;
    MS_BOOL bIsPanelManualVysncMode;
    MS_BOOL bInterlaceOutput;
    MS_BOOL bYUVOutput;
} PNL_EX_ApiExtStatus;


typedef enum
{
    E_PNL_EX_OUTPUT_NO_OUTPUT = 0,
    E_PNL_EX_OUTPUT_CLK_ONLY,
    E_PNL_EX_OUTPUT_DATA_ONLY,
    E_PNL_EX_OUTPUT_CLK_DATA,
} PNL_EX_OUTPUT_MODE;



typedef enum
{
    E_PNL_EX_MISC_MFC_ENABLE = 0x0001,
    E_PNL_EX_MISC_SKIP_CALIBRATION = 0x0002,

    E_PNL_EX_MISC_MFC_MCP = 0x0010,
    E_PNL_EX_MISC_MFC_ABChannel = 0x0020,
    E_PNL_EX_MISC_MFC_ACChannel = 0x0040,
    E_PNL_EX_MISC_MFC_ENABLE_60HZ = 0x0080,
    E_PNL_EX_MISC_MFC_ENABLE_240HZ = 0x0100,
} PNL_EX_MISC;

typedef enum
{
    E_PNL_EX_TCON_TAB_TYPE_GENERAL,
    E_PNL_EX_TCON_TAB_TYPE_GPIO,
    E_PNL_EX_TCON_TAB_TYPE_SCALER,
    E_PNL_EX_TCON_TAB_TYPE_MOD,
    E_PNL_EX_TCON_TAB_TYPE_GAMMA,
    E_PNL_EX_TCON_TAB_TYPE_POWER_SEQUENCE_ON,
    E_PNL_EX_TCON_TAB_TYPE_POWER_SEQUENCE_OFF,
} PNL_EX_TCON_TAB_TYPE;






typedef struct
{



    const char* ( * const Name ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U16 ( * const HStart ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U16 ( * const VStart ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U16 ( * const Width ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U16 ( * const Height ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U16 ( * const HTotal ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U16 ( * const VTotal ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U8 ( * const HSynWidth ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U8 ( * const HSynBackPorch ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U8 ( * const VSynBackPorch ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U16 ( * const DefaultVFreq ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U8 ( * const LPLL_Mode ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U8 ( * const LPLL_Type ) ( const PNL_DeviceId *pPNL_DeviceId );
    PNL_EX_ASPECT_RATIO ( * const AspectRatio ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U32 ( * const MinSET ) ( const PNL_DeviceId *pPNL_DeviceId );
    MS_U32 ( * const MaxSET ) ( const PNL_DeviceId *pPNL_DeviceId );
# 426 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL_EX.h"
    void ( * const SetSSC ) ( const PNL_DeviceId *pPNL_DeviceId, MS_U16 u16Fmodulation, MS_U16 u16Rdeviation, MS_BOOL bEnable ) ;



    MS_BOOL ( * const Enable ) ( const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bEnable ) ;





    MS_BOOL ( * const SetGammaTbl ) ( const PNL_DeviceId *pPNL_DeviceId,
                                      PNL_EX_GAMMA_TYPE eGammaType,
                                      MS_U8* pu8GammaTab[3],
                                      PNL_EX_GAMMA_MAPPEING_MODE Gamma_Map_Mode ) ;



    MS_U8** ( * const GammaTab ) ( const PNL_DeviceId *pPNL_DeviceId ) ;


    void ( * const Dump ) ( const PNL_DeviceId *pPNL_DeviceId ) ;



    MS_U8 ( * const DimCtrl ) ( const PNL_DeviceId *pPNL_DeviceId, PNL_EX_DIMMING_CTRL max_min_setting ) ;



    MS_U16 ( * const OnTiming ) ( const PNL_DeviceId *pPNL_DeviceId, PNL_EX_POWER_TIMING_SEQ power_on_sequence_timing ) ;



    MS_U16 ( * const OffTiming ) ( const PNL_DeviceId *pPNL_DeviceId, PNL_EX_POWER_TIMING_SEQ power_off_sequence_timing ) ;




    void ( *TurnBackLightOn ) ( const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bEnable ) ;
    PNL_EX_OUT_TIMING_MODE
          ( * const OutTimingMode )( const PNL_DeviceId *pPNL_DeviceId );





    MS_BOOL (* const SetGammaValue)( const PNL_DeviceId *pPNL_DeviceId, MS_U8 u8Channel, MS_U16 u16Offset, MS_U16 u16GammaValue);





    MS_BOOL ( * const GetGammaTbl ) ( const PNL_DeviceId *pPNL_DeviceId,
                                      PNL_EX_GAMMA_TYPE eGammaType,
                                      MS_U8* pu8GammaTab[3],
                                      PNL_EX_GAMMA_MAPPEING_MODE Gamma_Map_Mode ) ;
}XC_PNL_EX_OBJ;


typedef struct __attribute__((packed))
{
    const char *m_pPanelName;
#if !(defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300))
#if !defined (__aarch64__)
    MS_U32 u32AlignmentDummy0;
#endif
#endif



    MS_U8 m_bPanelDither :1;
    PNL_EX_LINK_TYPE m_ePanelLinkType :4;




    MS_U8 m_bPanelDualPort :1;
    MS_U8 m_bPanelSwapPort :1;
    MS_U8 m_bPanelSwapOdd_ML :1;
    MS_U8 m_bPanelSwapEven_ML :1;
    MS_U8 m_bPanelSwapOdd_RB :1;
    MS_U8 m_bPanelSwapEven_RB :1;

    MS_U8 m_bPanelSwapLVDS_POL :1;
    MS_U8 m_bPanelSwapLVDS_CH :1;
    MS_U8 m_bPanelPDP10BIT :1;
    MS_U8 m_bPanelLVDS_TI_MODE :1;




    MS_U8 m_ucPanelDCLKDelay;
    MS_U8 m_bPanelInvDCLK :1;
    MS_U8 m_bPanelInvDE :1;
    MS_U8 m_bPanelInvHSync :1;
    MS_U8 m_bPanelInvVSync :1;





    MS_U8 m_ucPanelDCKLCurrent;
    MS_U8 m_ucPanelDECurrent;
    MS_U8 m_ucPanelODDDataCurrent;
    MS_U8 m_ucPanelEvenDataCurrent;




    MS_U16 m_wPanelOnTiming1;
    MS_U16 m_wPanelOnTiming2;
    MS_U16 m_wPanelOffTiming1;
    MS_U16 m_wPanelOffTiming2;





    MS_U8 m_ucPanelHSyncWidth;
    MS_U8 m_ucPanelHSyncBackPorch;




    MS_U8 m_ucPanelVSyncWidth;
    MS_U8 m_ucPanelVBackPorch;


    MS_U16 m_wPanelHStart;
    MS_U16 m_wPanelVStart;
    MS_U16 m_wPanelWidth;
    MS_U16 m_wPanelHeight;


    MS_U16 m_wPanelMaxHTotal;
    MS_U16 m_wPanelHTotal;
    MS_U16 m_wPanelMinHTotal;

    MS_U16 m_wPanelMaxVTotal;
    MS_U16 m_wPanelVTotal;
    MS_U16 m_wPanelMinVTotal;

    MS_U8 m_dwPanelMaxDCLK;
    MS_U8 m_dwPanelDCLK;
    MS_U8 m_dwPanelMinDCLK;


    MS_U16 m_wSpreadSpectrumStep;
    MS_U16 m_wSpreadSpectrumSpan;

    MS_U8 m_ucDimmingCtl;
    MS_U8 m_ucMaxPWMVal;
    MS_U8 m_ucMinPWMVal;

    MS_U8 m_bPanelDeinterMode :1;
    PNL_EX_ASPECT_RATIO m_ucPanelAspectRatio;
# 591 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL_EX.h"
    MS_U16 m_u16LVDSTxSwapValue;
    PNL_EX_TIBITMODE m_ucTiBitMode;
    PNL_EX_OUTPUTFORMAT_BITMODE m_ucOutputFormatBitMode;

    MS_U8 m_bPanelSwapOdd_RG :1;
    MS_U8 m_bPanelSwapEven_RG :1;
    MS_U8 m_bPanelSwapOdd_GB :1;
    MS_U8 m_bPanelSwapEven_GB :1;




    MS_U8 m_bPanelDoubleClk :1;
    MS_U32 m_dwPanelMaxSET;
    MS_U32 m_dwPanelMinSET;
    PNL_EX_OUT_TIMING_MODE m_ucOutTimingMode;
    MS_U8 m_bPanelNoiseDith :1;
} PNL_EX_PanelType;


typedef struct
{
    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;
    MS_BOOL bInterlaceMode;
    MS_BOOL bYUVOutput;
} PNL_EX_DST_DispInfo;


typedef struct
{
    MS_U32 u32pair;
    MS_U16 u16channel;
    MS_BOOL bEnable;
} PNL_EX_HW_LVDSResInfo;


typedef struct
{
    MS_U8 u8ODTbl[1056];
    MS_U32 u32PNL_version;

#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32OD_MSB_Addr;
#else
    MS_PHYADDR u32OD_MSB_Addr;
#endif
    MS_U32 u32OD_MSB_Size;
#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32OD_LSB_Addr;
#else
    MS_PHYADDR u32OD_LSB_Addr;
#endif
    MS_U32 u32OD_LSB_Size;
} PNL_EX_OD_INITDATA;

typedef struct
{
 MS_U16 m_u16ExpectSwingLevel;
    MS_U8 m_u8ModCaliPairSel;
 MS_U8 m_u8ModCaliTarget;
 MS_S8 m_s8ModCaliOffset;
 MS_BOOL m_bPVDD_2V5;
}PNL_EX_ModCaliInfo;
# 673 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL_EX.h"
extern XC_PNL_EX_OBJ g_IPanelEx;

typedef enum
{
    E_PNL_EX_NO_OUTPUT,
    E_PNL_EX_CLK_ONLY,
    E_PNL_EX_CLK_DATA,
    E_PNL_EX_MAX,
} PNL_EX_PREINIT_OPTIONS;

DLL_PUBLIC PNL_EX_Result MApi_PNL_EX_GetLibVer(const MSIF_Version **ppVersion);
DLL_PUBLIC const PNL_EX_ApiInfo* MApi_PNL_EX_GetInfo(const PNL_DeviceId *pPNL_DeviceId);
DLL_PUBLIC MS_BOOL MApi_PNL_EX_GetStatus(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_ApiStatus *pPnlStatus);
DLL_PUBLIC MS_BOOL MApi_PNL_EX_GetStatusEx(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_ApiExtStatus *pPnlExtStatus);

DLL_PUBLIC MS_BOOL MApi_PNL_EX_SetDbgLevel(MS_U16 u16DbgSwitch);

DLL_PUBLIC MS_BOOL MApi_PNL_EX_IOMapBaseInit(const PNL_DeviceId *pPNL_DeviceId);

DLL_PUBLIC MS_BOOL MApi_PNL_EX_PreInit(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_PREINIT_OPTIONS eInitParam);

#ifndef _API_XC_PANEL_EX_C_
#define MApi_PNL_EX_Init(x...) MApi_PNL_EX_Init_Ex(x, (MSIF_Version){{ PNL_EX_API_VERSION },});
#endif

DLL_PUBLIC MS_BOOL MApi_PNL_EX_Init_Ex(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_PanelType *pSelPanelType , MSIF_Version LIBVER);
DLL_PUBLIC void MApi_PNL_EX_SetOutput(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_OUTPUT_MODE eOutputMode);
DLL_PUBLIC MS_BOOL MApi_PNL_EX_ChangePanelType(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_PanelType *pSelPanelType);






DLL_PUBLIC MS_BOOL MApi_PNL_EX_TCONMAP_DumpTable(const PNL_DeviceId *pPNL_DeviceId, MS_U8 *pTCONTable, MS_U8 u8Tcontype);
DLL_PUBLIC MS_BOOL MApi_PNL_EX_TCONMAP_Power_Sequence(const PNL_DeviceId *pPNL_DeviceId, MS_U8 *pTCONTable, MS_BOOL bEnable);
DLL_PUBLIC void MApi_PNL_EX_TCON_Count_Reset ( const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bEnable );
DLL_PUBLIC void MApi_PNL_EX_TCON_Init( const PNL_DeviceId *pPNL_DeviceId );
DLL_PUBLIC MS_BOOL MApi_PNL_EX_GetDstInfo(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);

DLL_PUBLIC MS_BOOL MApi_PNL_EX_Control_Out_Swing(const PNL_DeviceId *pPNL_DeviceId, MS_U16 u16Swing_Level);
DLL_PUBLIC MS_BOOL MApi_PNL_EX_ForceSetPanelDCLK(const PNL_DeviceId *pPNL_DeviceId, MS_U16 u16PanelDCLK ,MS_BOOL bSetDCLKEnable );
DLL_PUBLIC MS_BOOL MApi_PNL_EX_ForceSetPanelHStart(const PNL_DeviceId *pPNL_DeviceId, MS_U16 u16PanelHStart ,MS_BOOL bSetHStartEnable);

DLL_PUBLIC void MApi_PNL_EX_SetOutputPattern(const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bEnable, MS_U16 u16Red , MS_U16 u16Green, MS_U16 u16Blue);
DLL_PUBLIC void MApi_PNL_EX_Mod_Calibration_Setting(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_ModCaliInfo *pstModCaliInfo);
DLL_PUBLIC MS_BOOL MApi_PNL_EX_Mod_Do_Calibration(const PNL_DeviceId *pPNL_DeviceId);





DLL_PUBLIC void MApi_PNL_EX_BD_LVDS_Output_Type(const PNL_DeviceId *pPNL_DeviceId, MS_U16 Type);
DLL_PUBLIC void MApi_PNL_EX_SetLPLLTypeExt(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_LINK_EXT_TYPE eLPLL_TypeExt);
DLL_PUBLIC void MApi_PNL_EX_Init_MISC(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_MISC ePNL_MISC);
DLL_PUBLIC void MApi_PNL_EX_MOD_OutputConfig_User(const PNL_DeviceId *pPNL_DeviceId, MS_U32 u32OutputCFG0_7, MS_U32 u32OutputCFG8_15, MS_U32 u32OutputCFG16_21);
DLL_PUBLIC void MApi_PNL_EX_HWLVDSReservedtoLRFlag(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_HW_LVDSResInfo lvdsresinfo);

DLL_PUBLIC void MApi_PNL_EX_MOD_PVDD_Power_Setting(const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bIs2p5);


DLL_PUBLIC int MApi_PNL_EX_SetSSC_En(const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bEnable);





DLL_PUBLIC int MApi_PNL_EX_SetSSC_Fmodulation(const PNL_DeviceId *pPNL_DeviceId, MS_U16 u16Fmodulation);





DLL_PUBLIC int MApi_PNL_EX_SetSSC_Rdeviation(const PNL_DeviceId *pPNL_DeviceId, MS_U16 u16Rdeviation);
DLL_PUBLIC PNL_EX_Result MApi_PNL_EX_SkipTimingChange(const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bFlag);







DLL_PUBLIC PNL_EX_Result MApi_PNL_EX_OverDriver_Init(const PNL_DeviceId *pPNL_DeviceId, PNL_EX_OD_INITDATA *pPNL_ODInitData, MS_U32 u32ODInitDataLen);






DLL_PUBLIC PNL_EX_Result MApi_PNL_EX_OverDriver_Enable(const PNL_DeviceId *pPNL_DeviceId, MS_BOOL bEnable);






DLL_PUBLIC MS_BOOL MApi_PNL_EX_Get_TCON_Capability(const PNL_DeviceId *pPNL_DeviceId);






DLL_PUBLIC void MApi_PNL_EX_SetPairSwap(const PNL_DeviceId *pPNL_DeviceId, MS_U32 u32Polarity);






DLL_PUBLIC void MApi_PNL_EX_CalExtLPLLSETbyDClk(const PNL_DeviceId *pPNL_DeviceId, MS_U32 ldHz);
# 792 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL_EX.h"
DLL_PUBLIC MS_BOOL MApi_PNL_EX_SetDiffSwingLevel(const PNL_DeviceId *pPNL_DeviceId, MS_U8 u8Swing_Level);


#ifdef __cplusplus
}
#endif

#endif
# 126 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
#ifndef _DRVTVENCODER_H
#define _DRVTVENCODER_H 

#include "MsDevice.h"
#include "MsCommon.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif




#define MSIF_VE_TAG {'M','S','I','F'}
#define MSIF_VE_CLASS {'0','0'}
#define MSIF_VE_CUS 0x6666
#define MSIF_VE_MOD 0x6666
#define MSIF_VE_CHIP 0Xffff
#define MSIF_VE_CPU '1'
#define MSIF_VE_LIB_CODE {'V','E','_','_'}
#define MSIF_VE_LIBVER {'0','1'}
#define MSIF_VE_BUILDNUM {'1','4'}
#define MSIF_VE_CHANGELIST {'0','0','6','8','8','5','4','7'}


#define VE_DRV_VERSION \
    MSIF_VE_TAG, \
    MSIF_VE_CLASS, \
    MSIF_VE_CUS, \
    MSIF_VE_MOD, \
    MSIF_VE_CHIP, \
    MSIF_VE_CPU, \
    MSIF_VE_LIB_CODE, \
    MSIF_VE_LIBVER, \
    MSIF_VE_BUILDNUM, \
    MSIF_VE_CHANGELIST, \
    MSIF_OS


#define VE_VECAPTURESTATE_VERSION 0
#define VE_INPUTSRC_INFO_VERSION 0
#define VE_INITDATA_VERSION 0





typedef enum _VE_Result
{
    E_VE_NOT_SUPPORT = -1,
    E_VE_FAIL = 0,
    E_VE_OK = 1,
    E_VE_TIMEOUT,
    E_VE_QUEUE_FULL,
    E_VE_BUSY
} VE_Result;


typedef enum
{
    MS_VE_NTSC,
    MS_VE_NTSC_443,
    MS_VE_NTSC_J,
    MS_VE_PAL_M,
    MS_VE_PAL_N,
    MS_VE_PAL_NC,
    MS_VE_PAL,
    MS_VE_SECAM,
    MS_VE_VIDEOSYS_NUM,
} MS_VE_VIDEOSYS;

typedef enum
{
    MS_VE_LAYER_NONE = 0,
    MS_VE_LAYER_FRAME_VIDEO_MUX1_MUX2,
    MS_VE_LAYER_FRAME_VIDEO_MUX2_MUX1,
    MS_VE_LAYER_FRAME_MUX1_VIDEO_MUX2,
    MS_VE_LAYER_FRAME_MUX1_MUX2_VIDEO,
    MS_VE_LAYER_FRAME_MUX2_VIDEO_MUX1,
    MS_VE_LAYER_FRAME_MUX2_MUX1_VIDEO,
    MS_VE_LAYER_RESERVED,
} MS_VE_OSD_LAYER_SEL;


typedef struct
{
    MS_BOOL bNTSC;
    MS_BOOL bPAL;
    MS_BOOL bVESupported;
} VE_Caps;



typedef struct
{
    MS_BOOL bSupport_UpScale;
    MS_BOOL bSupport_CropMode;
} MS_VE_Ext_Cap;


typedef struct DLL_PACKED
{
    VE_Caps stCaps;
} VE_DrvInfo;


typedef struct DLL_PACKED
{
    MS_VE_VIDEOSYS VideoSystem;
    MS_U16 u16H_CapStart;
    MS_U16 u16H_CapSize;
    MS_U16 u16V_CapStart;
    MS_U16 u16V_CapSize;

} VE_DrvStatus;

typedef struct
{
    MS_U8* pVE_TBL;
    MS_U8* pVE_Coef_TBL;
    MS_U8* pVBI_TBL;
    MS_BOOL bvtotal_525;
    MS_BOOL bPALSwitch;
    MS_BOOL bPALout;
}MS_VE_Out_VideoSYS, *PMS_VE_Out_VideoSYS;


typedef enum
{
    MS_VE_DEST_NONE = 0,
    MS_VE_DEST_SCART,
    MS_VE_DEST_CVBS,
    MS_VE_DEST_SVIDEO,
    MS_VE_DEST_YPBPR,
    MS_VE_DEST_NUM,
} MS_VE_OUTPUT_DEST_TYPE;


typedef enum
{
    MS_VE_SRC_DTV = 0x00,
    MS_VE_SRC_ATV = 0x01,
    MS_VE_SRC_CVBS0 = 0x02,
    MS_VE_SRC_CVBS1 = 0x03,
    MS_VE_SRC_CVBS2 = 0x04,
    MS_VE_SRC_CVBS3 = 0x05,
    MS_VE_SRC_SVIDEO = 0x06,
    MS_VE_SRC_DSUB = 0x07,
    MS_VE_SRC_COMP = 0x08,
    MS_VE_SRC_HDMI_A = 0x09,
    MS_VE_SRC_HDMI_B = 0x0A,
    MS_VE_SRC_HDMI_C = 0x0B,
    MS_VE_SRC_MAIN = 0x0C,
    MS_VE_SRC_SUB = 0x0D,
    MS_VE_SRC_SCALER = 0x0E,
    MS_VE_SRC_DI = 0x0F,
    MS_VE_SRC_BT656 = 0x10,
    MS_VE_SRC_DTV_FROM_MVOP = 0x11,
    MS_VE_SRC_DNR = 0x12,
    MS_VE_SRC_NONE = 0xFF,
}MS_VE_INPUT_SRC_TYPE;

typedef struct
{
    MS_U32 PreHScalingRatio;
    MS_U32 PreVScalingRatio;
    MS_U32 PostHScalingRatio;
    MS_U32 PostVScalingRatio;
}MS_VE_Backup_Reg, *PMS_VE_Backup_Reg;


typedef enum
{
    MS_VE_SWITCH_DST_SUCCESS,
    MS_VE_SWITCH_DST_INVALID_COMBINATION,
    MS_VE_SWITCH_DST_INVALID_PARAM,
    MS_VE_SWITCH_DST_FAIL,
}MS_SWITCH_VE_DST_STATUS;



typedef enum
{
    MS_VE_OUT_CCIR656,
    MS_VE_OUT_TVENCODER,
    MS_VE_OUT_CAPTURE,
}MS_VE_OUT_TYPE;

typedef struct DLL_PACKED
{
    MS_U16 u16Width;
    MS_U16 u16height;
    MS_PHY u32MiuBaseAddr;
    MS_U32 u32MemSize;
    MS_BOOL bVECapture;
}MS_VE_Output_CAPTURE, *PMS_VE_Output_CAPTURE;


typedef struct
{
    MS_VE_OUTPUT_DEST_TYPE OutputDstType;
    MS_SWITCH_VE_DST_STATUS Status;
}MS_Switch_VE_Dest_Info, *PMS_Switch_VE_Dest_Info;

typedef enum
{
    MS_VE_HMirrorMode,
    MS_VE_VMirrorMode,
    MS_VE_HVBothMirrorMode,
    MS_VE_NoneMirror,
}MS_VE_MirrorStatus;


typedef enum
{
    MS_VE_SWITCH_SRC_SUCCESS,
    MS_VE_SWITCH_SRC_INVALID_PARAM,
    MS_VE_SWITCH_SRC_FAIL,
}MS_SWITCH_VE_SRC_STATUS;


typedef struct
{
    MS_VE_INPUT_SRC_TYPE InputSrcType;
    MS_SWITCH_VE_SRC_STATUS Status;
}MS_Switch_VE_Src_Info, *PMS_Switch_VE_Src_Info;

typedef struct
{
    MS_U16 u16Version;
    MS_VE_INPUT_SRC_TYPE eInputSrcType;
    MS_VE_INPUT_SRC_TYPE eInputSrcOfMixedSrc;

}MS_VE_InputSrc_Info, *PMS_VE_InputSrc_Info;


typedef struct
{
    MS_BOOL bEnable;
    MS_VE_OUT_TYPE OutputType;
}MS_VE_Output_Ctrl, *PMS_VE_Output_Ctrl;


typedef struct DLL_PACKED
{
    MS_U16 u16H_CapStart;
    MS_U16 u16H_CapSize;
    MS_U16 u16V_CapStart;
    MS_U16 u16V_CapSize;
    MS_U16 u16H_SC_CapStart;
    MS_U16 u16H_SC_CapSize;
    MS_U16 u16V_SC_CapStart;
    MS_U16 u16V_SC_CapSize;
    MS_U16 u16InputVFreq;
    MS_BOOL bHDuplicate;
    MS_BOOL bSrcInterlace;
}MS_VE_Set_Mode_Type;


typedef struct
{
    PMS_VE_Output_Ctrl output_ctrl;
    MS_Switch_VE_Src_Info src_info;
    MS_Switch_VE_Dest_Info dst_info;
}MS_VE_ApiStatus;


typedef struct
{
    MS_U16 x;
    MS_U16 y;
    MS_U16 width;
    MS_U16 height;
} MS_VE_WINDOW_TYPE;


typedef struct DLL_PACKED
{
    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;
    MS_BOOL bInterlaceMode;
} MS_VE_DST_DispInfo;


typedef enum
{
    MS_VE_REG_BANK_3B,
    MS_VE_REG_BANK_3E,
    MS_VE_REG_BANK_3F,
} MS_VE_REG_BANK;


typedef struct
{

    MS_U16 u16VttIn;
    MS_U16 u16HttIn;
    MS_U16 u16HdeIn;
    MS_U16 u16VdeIn;

    MS_U16 u16Vde_St;
    MS_U16 u16Hde_St;

}MS_VE_PLL_InCfg;


typedef struct DLL_PACKED
{
    MS_U16 u16HScalingsrc;
    MS_U16 u16HScalingdst;
    MS_U16 u16VScalingsrc;
    MS_U16 u16VScalingdst;
    MS_BOOL bHCusScalingEnable;
    MS_BOOL bVCusScalingEnable;
}MS_VE_CusScalingInfo, *PMS_VE_CusScalingInfo;


typedef struct
{
    MS_U16 u16Version;
    MS_U16 u16Length;
    MS_BOOL bEnable;
    MS_U8 u8FrameCount;
    MS_U8 u8Result;
}MS_VE_VECAPTURESTATE, *PMS_VE_VECAPTURESTATE;

#ifdef UFO_VE_INITEX

typedef struct
{

    MS_U32 u32VEInitData_Version;
    MS_U16 u16VEInitData_Length;

    MS_PHYADDR phyMIUAddress;
    MS_PHYADDR phyMIUSize;
} VE_INITDATA;
#endif
# 480 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_GetLibVer(const MSIF_Version **ppVersion);






const VE_DrvInfo * MDrv_VE_GetInfo(void);







VE_Result MDrv_VE_GetStatus(VE_DrvStatus *pDrvStatus);







void MDrv_VE_SetDbgLevel(MS_U16 level);







void MDrv_VE_GetCaps(VE_Caps* pCaps);







void MDrv_VE_SwitchInputSource(PMS_Switch_VE_Src_Info pSwitchInfo);







MS_SWITCH_VE_SRC_STATUS MDrv_VE_SetInputSource(PMS_VE_InputSrc_Info pInputSrcInfo);
# 542 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
void MDrv_VE_SwitchOuputDest(PMS_Switch_VE_Dest_Info pSwitchInfo);







void MDrv_VE_SetOutputCtrl(PMS_VE_Output_Ctrl pOutputCtrl);







MS_BOOL MDrv_VE_SetOutputVideoStd(MS_VE_VIDEOSYS VideoSystem);
# 574 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
MS_BOOL MDrv_VE_SetCusTable(MS_VE_VIDEOSYS VideoSystem, MS_U8* pTbl);






void MDrv_VE_EnableCusTable(MS_BOOL bEnable);






void MDrv_VE_PowerOn(void);





void MDrv_VE_PowerOff(void);






MS_BOOL MDrv_VE_SetIOMapBase(void);







#if defined(UFO_PUBLIC_HEADER_700)
void MDrv_VE_Init(MS_PHY u32MIUAddress);
#else
void MDrv_VE_Init(MS_PHYADDR u32MIUAddress);
#endif

#ifdef UFO_VE_INITEX






VE_Result MDrv_VE_InitEx(VE_INITDATA *pVE_InitData);
#endif







#if defined(UFO_PUBLIC_HEADER_700)
MS_BOOL SYMBOL_WEAK MDrv_VE_GetConfig(MS_PHY *pMIUAddress);
#else
MS_BOOL SYMBOL_WEAK MDrv_VE_GetConfig(MS_PHYADDR *pMIUAddress);
#endif






MS_BOOL MDrv_VE_Exit(void);
# 651 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
void MDrv_VE_SetWSSData(MS_BOOL bEn, MS_U16 u16WSSData);






MS_U16 MDrv_VE_GetWSSData(void);







void MDrv_VE_SetMode(MS_VE_Set_Mode_Type * pVESetMode);







void MDrv_VE_SetBlackScreen(MS_BOOL bEn);






MS_BOOL MDrv_VE_IsBlackScreenEnabled(void);







void MDrv_VE_EnableTtx(MS_BOOL bEnable);

#if defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_700)







void MDrv_VE_SetTtxBuffer(MS_PHY phyStartAddr, MS_U32 u32Size);
#else







void MDrv_VE_SetTtxBuffer(MS_U32 u32StartAddr, MS_U32 u32Size);
#endif






void MDrv_VE_ClearTtxReadDoneStatus(void);






MS_BOOL MDrv_VE_GetTtxReadDoneStatus(void);







void MDrv_VE_SetVbiTtxActiveLines(MS_U8 u8LinePerField);







void MDrv_VE_SetVbiTtxActiveLinesBitmap(MS_U32 u32Bitmap);
# 750 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
void MDrv_VE_SetVbiTtxRange(MS_U16 odd_start, MS_U16 odd_end,
                            MS_U16 even_start, MS_U16 enen_end);






void MDrv_VE_EnableCcSw(MS_BOOL bEnable);
# 769 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
void MDrv_VE_SetCcRange(MS_U16 odd_start, MS_U16 odd_end, MS_U16 even_start, MS_U16 enen_end);
# 778 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
void MDrv_VE_SendCcData(MS_BOOL bIsOdd, MS_U16 data);







void MDrv_VE_set_display_window(MS_VE_WINDOW_TYPE stDispWin);







VE_Result MDrv_VE_SetFrameColor(MS_U32 u32aRGB);







void MDrv_VE_SetOSD(MS_BOOL bEnable);







VE_Result MDrv_VE_Set_OSDLayer(MS_VE_OSD_LAYER_SEL eVideoOSDLayer);






MS_VE_OSD_LAYER_SEL MDrv_VE_Get_OSDLayer(void);







VE_Result MDrv_VE_Set_VideoAlpha(MS_U8 u8Val);







VE_Result MDrv_VE_Get_VideoAlpha(MS_U8 *pu8Val);







void MDrv_VE_SetRGBIn(MS_BOOL bEnable);






MS_VE_VIDEOSYS MDrv_VE_Get_Output_Video_Std(void);







void MDrv_VE_SetCaptureMode(MS_BOOL bEnable);







MS_BOOL MApi_VE_GetDstInfo(MS_VE_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);







void MDrv_VE_Set_TestPattern(MS_BOOL bEn);
# 883 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
void MApi_VE_W2BYTE_MSK(MS_VE_REG_BANK VE_BK, MS_U32 u32Reg, MS_U16 u16Val, MS_U16 u16Mask);
# 893 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
MS_U16 MApi_VE_R2BYTE_MSK(MS_VE_REG_BANK VE_BK, MS_U32 u32Reg, MS_U16 u16Mask);
# 902 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
void MDrv_VE_DumpTable(MS_U8 *pVETable, MS_U8 u8TableType);
# 911 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_DisableRegWrite(MS_BOOL bFlag);







void MDrv_VE_ShowColorBar(MS_BOOL bEnable);
# 929 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_AdjustPositionBase(MS_S32 s32WAddrAdjustment, MS_S32 s32RAddrAdjustment);
# 938 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_SetFrameLock(MS_VE_PLL_InCfg *pInCfg, MS_BOOL bEnable);







VE_Result MDrv_VE_Set_Customer_Scaling(MS_VE_CusScalingInfo *pstVECusScalingInfo);






VE_Result MDrv_VE_set_crop_window(MS_VE_WINDOW_TYPE stCropWin);






VE_Result MDrv_VE_set_be_display_window(MS_VE_WINDOW_TYPE stDispWin);






VE_Result MDrv_VE_Get_Ext_Caps(MS_VE_Ext_Cap *cap);
# 977 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_SetWindow(MS_VE_WINDOW_TYPE *stSrcWin, MS_VE_WINDOW_TYPE *stCropWin,
        MS_VE_WINDOW_TYPE *stDispWin);







void MDrv_VE_InitVECapture(PMS_VE_Output_CAPTURE pVECapture);







MS_BOOL MDrv_VE_EnaVECapture(PMS_VE_VECAPTURESTATE pstVECapState);







MS_BOOL MDrv_VE_GetVECaptureState(PMS_VE_VECAPTURESTATE pstVECapState);
# 1011 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
MS_BOOL MDrv_VE_VECaptureWaitOnFrame(PMS_VE_VECAPTURESTATE pstVECapState);
# 1020 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_Adjust_FrameStart(MS_VE_WINDOW_TYPE *stSrcWin,MS_S16 pixel_offset);
# 1029 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_SetWSS525Data(MS_BOOL bEn, MS_U32 u32WSSData);






MS_U32 MDrv_VE_GetWSS525Data(void);







void MDrv_VE_OnOffWSS(MS_BOOL ben);







MS_BOOL MDrv_VE_GetWSSStatus(void);







void MDrv_VE_OnOffMV(MS_BOOL ben);







MS_BOOL MDrv_VE_GetMVStatus(void);







void MDrv_VE_OnOffDCS(MS_BOOL ben);







MS_BOOL MDrv_VE_GetDCSStatus(void);







MS_U32 MDrv_TVE_SetPowerState(EN_POWER_MODE u16PowerState);

#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_500_3)







VE_Result MDrv_VE_ReloadSetting(void);
#endif

#ifdef UFO_PUBLIC_HEADER_212
# 1116 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_Set_PreHSD_ScalingRatio(MS_U16 u16In_Hsize,MS_U16 u16Out_Hsize,MS_U16 u16In_RatioHsize,MS_U16 u16Out_RatioHsize);
# 1128 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_Set_PreVSD_ScalingRatio(MS_U16 u16In_Vsize,MS_U16 u16Out_Vsize,MS_U16 u16In_RatioVsize,MS_U16 u16Out_RatioVsize);
# 1139 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTVEncoder.h"
VE_Result MDrv_VE_Set_v_upscaling(MS_BOOL Benable,MS_U16 u16In_Vsize,MS_U16 u16Out_Vsize);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 143 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
#ifndef _DRV_WDT_H_
#define _DRV_WDT_H_ 



#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"




#define MSIF_WDT_LIB_CODE {'W','D','T','_'}
#define MSIF_WDT_LIBVER {'0','1'}
#define MSIF_WDT_BUILDNUM {'0','4'}
#define MSIF_WDT_CHANGELIST {'0','0','3','8','2','1','7','1'}

#define WDT_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_WDT_LIB_CODE, \
    MSIF_WDT_LIBVER, \
    MSIF_WDT_BUILDNUM, \
    MSIF_WDT_CHANGELIST, \
    MSIF_OS

#define MAX_TIMER_NUM 2

typedef enum _WDT_DbgLv
{
    E_WDT_DBGLV_NONE,
    E_WDT_DBGLV_ERR_ONLY,
    E_WDT_DBGLV_INFO,
    E_WDT_DBGLV_ALL
}WDT_DbgLv;

typedef enum
{
    E_WDT_FAIL,
    E_WDT_OK,
} WDT_Result;

typedef enum _E_PIU_Timer
{
    E_TIMER_0,
    E_TIMER_1,
} E_PIU_Timer;

typedef struct _tmr_interrupt {
 MS_U32 u32TmrInit;
  MS_U32 u32TmrMax;
 void (*TmrFnct)(void *, void *, void *);
 void *TmrFnctArg0;
 void *TmrFnctArg1;
 void *TmrFnctArg2;
 MS_BOOL bTmrEn;
}tmr_interrupt;
# 221 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_GetLibVer(const MSIF_Version **ppVersion);
# 232 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_Init(WDT_DbgLv eLevel);
# 243 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_Stop(WDT_DbgLv eLevel);
# 254 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_Clear(void);
# 265 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_ClearRstFlag(void);
# 276 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_IsReset(void);
# 287 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_IsEnable(void);
# 299 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_SetTimer(WDT_DbgLv eLevel, MS_U16 sec);
# 311 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_SetTimer_ms(WDT_DbgLv eLevel, MS_U16 msec);
# 323 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_SetTimer_us(WDT_DbgLv eLevel, MS_U16 usec);
# 335 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
WDT_Result MDrv_WDT_SetIntTimer(WDT_DbgLv eLevel, MS_U16 sec);
# 347 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_Init(void);
# 356 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_CfgFnct(E_PIU_Timer eTimer, void (*fnct)(void *, void *, void *), void *arg0, void *arg1, void *arg2 );
# 365 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_Count(E_PIU_Timer eTimer, MS_BOOL bEnable);
# 374 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_INT(E_PIU_Timer eTimer, MS_BOOL bEnable);
# 383 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_Rst(E_PIU_Timer eTimer);
# 392 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_SetMaxMatch(E_PIU_Timer eTimer, MS_U32 u32MaxTimer);
# 401 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
MS_BOOL MDrv_TIMER_HitMaxMatch(E_PIU_Timer eTimer);
# 410 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
MS_U32 MDrv_TIMER_GetMaxMatch(E_PIU_Timer eTimer);
# 419 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
MS_U32 MDrv_TIMER_GetCounter(E_PIU_Timer eTimer);
# 428 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
MS_U32 MDrv_TIMER_GetSecond(E_PIU_Timer eTimer);
# 437 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
MS_U32 MDrv_TIMER_GetMs(E_PIU_Timer eTimer);
# 446 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
MS_U32 MDrv_TIMER_GetUs(E_PIU_Timer eTimer);
# 455 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_Delay(E_PIU_Timer eTimer, MS_U32 u32Second);
# 464 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_DelayMs(E_PIU_Timer eTimer, MS_U32 u32MS);







void MDrv_TIMER_DelayUs(E_PIU_Timer eTimer, MS_U32 u32US);
# 481 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
void MDrv_TIMER_Exit(void);
# 491 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWDT.h"
MS_U16 MDrv_WDT_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef __cplusplus
}
#endif


#endif
# 140 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvLDM.h"
#ifndef _DRV_LDM_H_
#define _DRV_LDM_H_ 


#ifdef __cplusplus
extern "C"
{
#endif


#ifdef MDRV_LDM_C
#define MDRV_INTERFACE 
#else
#define MDRV_INTERFACE extern
#endif


#define MDRV_LDM_IOC_MAGIC ('L')
#define MDRV_LDM_IOC_INIT _IO(MDRV_LDM_IOC_MAGIC, 0)
#define MDRV_LDM_IOC_DEINIT _IO(MDRV_LDM_IOC_MAGIC, 1)
#define MDRV_LDM_IOC_ENABLE _IOW(MDRV_LDM_IOC_MAGIC, 2, MS_U32)
#define MDRV_LDM_IOC_DISABLE _IOW(MDRV_LDM_IOC_MAGIC, 3, MS_U32)
#define MDRV_LDM_IOC_SUSPEND _IOW(MDRV_LDM_IOC_MAGIC, 4, MS_U32)
#define MDRV_LDM_IOC_RESUME _IOW(MDRV_LDM_IOC_MAGIC, 5, MS_U32)
#define MDRV_LDM_IOC_SET_STRENGTH _IOW(MDRV_LDM_IOC_MAGIC, 6, MS_U32)
#define MDRV_LDM_IOC_GET_DATA _IOR(MDRV_LDM_IOC_MAGIC, 7, MS_U32)
#define MDRV_LDM_IOC_DEBUG _IOW(MDRV_LDM_IOC_MAGIC, 8, MS_U32)
#define MDRV_LDM_IOC_CUS_PATH _IOW(MDRV_LDM_IOC_MAGIC, 9, MS_U32)
#define MDRV_LDM_IOC_DEMO_PATTERN _IOW(MDRV_LDM_IOC_MAGIC, 10, MS_U32)
#define MDRV_LDM_IOC_DUMP_DRAM _IOW(MDRV_LDM_IOC_MAGIC, 11, MS_U32)
#define MDRV_LDM_IOC_MAX_NR (12)



typedef enum
{
    E_LDM_STATUS_INIT = 1,
    E_LDM_STATUS_ENABLE = 2,
    E_LDM_STATUS_DISNABLE,
    E_LDM_STATUS_SUSPEND,
    E_LDM_STATUS_RESUME,
    E_LDM_STATUS_DEINIT,
} EN_LDM_STATUS;

typedef enum
{
    E_LDM_RET_SUCCESS = 0,
    E_LDM_RET_FAIL = 1,
    E_LDM_RET_NOT_SUPPORTED,
    E_LDM_RET_PARAMETER_ERROR,
    E_LDM_RET_OBTAIN_MUTEX_FAIL,
} EN_LDM_RETURN;

typedef enum
{
    E_LDM_DEBUG_LEVEL_ERROR=0x01,
    E_LDM_DEBUG_LEVEL_WARNING=0x02,
    E_LDM_DEBUG_LEVEL_INFO=0x04,
    E_LDM_DEBUG_LEVEL_ALL=0x07,
    E_LDM_DEBUG_LEVEL_MAX
}EN_LDM_DEBUG_LEVEL;

typedef enum
{
    E_LDM_DATA_TYPE_LDF=0x01,
    E_LDM_DATA_TYPE_LDB=0x02,
    E_LDM_DATA_TYPE_SPI=0x03,
    E_LDM_DATA_TYPE_MAX
}EN_LDM_GET_DATA_TYPE;

typedef enum
{
    E_LDM_DEMO_PATTERN_SWITCH_SINGLE_LED=0x00,
    E_LDM_DEMO_PATTERN_LEFT_RIGHT_HALF=0x01,
    E_LDM_DEMO_PATTERN_MARQUEE=0x02,
    E_LDM_DEMO_PATTERN_LEFT_RIGHT_COLOR_SHELTER=0x03,
    E_LDM_DEMO_PATTERN_MAX
}EN_LDM_DEMO_PATTERN;


typedef struct __attribute__((packed))
{
    MS_U8 aCusPath[64];
    MS_U8 aCusPathU[64];
}ST_LDM_CONF_PATH;

typedef struct __attribute__((packed))
{
    EN_LDM_GET_DATA_TYPE enDataType;
    MS_PHY phyAddr;
}ST_LDM_GET_DATA;

typedef struct __attribute__((packed))
{
    MS_BOOL bOn;
    EN_LDM_DEMO_PATTERN enDemoPattern;
    MS_U16 u16LEDNum;
}ST_LDM_DEMO_PATTERN;

typedef struct __attribute__((packed))
{
    MS_U32 u32CommandIndex;
    void *pContent;
}ST_LDM_CMD_INFO;

typedef struct
{

    MS_U32 u32LDFAddr0_l;
    MS_U32 u32LDFAddr0_r;
    MS_U32 u32LDFAddr1_l;
    MS_U32 u32LDFAddr1_r;

    MS_U32 u32LDBAddr0_l;
    MS_U32 u32LDBAddr0_r;
    MS_U32 u32LDBAddr1_l;
    MS_U32 u32LDBAddr1_r;

    MS_U32 u32Edge2DAddr;

    MS_U32 u32DataOffset;
}__attribute__((packed))ST_LDM_CFG_MMAP_ADDR;







MDRV_INTERFACE MS_U8 MDrv_LDM_SetDbgLevel(EN_LDM_DEBUG_LEVEL eLevel);

#if defined(MSOS_TYPE_LINUX)






MDRV_INTERFACE MS_U8 MDrv_LDM_GetStatus(void);






MDRV_INTERFACE MS_U8 MDrv_LDM_SetConfPath(ST_LDM_CONF_PATH stPath);







MDRV_INTERFACE MS_U8 MDrv_LDM_Init(MS_PHY phyAddr);







MDRV_INTERFACE MS_U8 MDrv_LDM_Enable(void);







MDRV_INTERFACE MS_U8 MDrv_LDM_Disable(MS_U8 u8Lumma);







MDRV_INTERFACE MS_U8 MDrv_LDM_GetData(ST_LDM_GET_DATA *stData);







MDRV_INTERFACE MS_U8 MDrv_LDM_SetStrength(MS_U8 u8Percent);







MDRV_INTERFACE MS_U8 MDrv_LDM_Suspend(void);







MDRV_INTERFACE MS_U8 MDrv_LDM_Resume(void);







MDRV_INTERFACE MS_U8 MDrv_LDM_DemoPattern(ST_LDM_DEMO_PATTERN stPattern);







MDRV_INTERFACE MS_U8 MDrv_LDM_DumpDRAM(EN_LDM_GET_DATA_TYPE eType);







MDRV_INTERFACE MS_U8 MDrv_LDM_Deinit(void);
# 374 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvLDM.h"
MDRV_INTERFACE MS_U8 MDrv_LDM_SendCommads(ST_LDM_CMD_INFO* pstCMD,MS_U8 u8Number);
#endif






MS_BOOL MDrv_LDM_SetIOMapBase(MS_U8 u8ClkHz);






MS_BOOL MDrv_LDM_Config_MmapAddr(ST_LDM_CFG_MMAP_ADDR *stLdmCfgAddr);
# 398 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvLDM.h"
MS_BOOL MDrv_LDM_SetMIUPackFormat(MS_U8 u8HWNum,MS_U8 u8PackOffset,MS_U8 u8PackLength);







MS_BOOL MDrv_LDM_SetYoffEnd(MS_U8 u8HWNum,MS_U8 u8YoffEnd);







MS_BOOL MDrv_LDM_SetBlLdmaSize(MS_U8 u8Height,MS_U8 u8Width);







MS_BOOL MDrv_LDM_SetDmaEnable(MS_U8 u8HWNum, MS_BOOL bEnable);
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA_v2.h"
#ifndef _DRV_BDMA_V2_H_
#define _DRV_BDMA_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "UFO.h"





typedef enum {
    MDrv_CMD_BDMA_MemCopy,
    MDrv_CMD_BDMA_Search,
    MDrv_CMD_BDMA_CRC32,
    MDrv_CMD_BDMA_Pattern_Fill,
    MDrv_CMD_BDMA_FlashCopy2Dram,
    MDrv_CMD_BDMA_MOBFSearch,
    MDrv_CMD_BDMA_GetStatus,
    MDrv_CMD_BDMA_GetInfo,
    MDrv_CMD_BDMA_GetLibVer,
    MDrv_CMD_BDMA_GetMinSize,
    MDrv_CMD_BDMA_SetDbgLevel,
    MDrv_CMD_BDMA_SetSPIOffsetForMCU,
    MDrv_CMD_BDMA_WaitFlashDone,
    MDrv_CMD_BDMA_Init,
    MDrv_CMD_BDMA_CopyHnd,
} eBdmaIoctlOpt;
# 144 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA_v2.h"
typedef struct _BDMA_API_V1
{
}BDMA_API_V1;

typedef struct _BDMA_API_V2
{
}BDMA_API_V2;

#ifdef BIFROST_32BIT_MODE

typedef struct _BDMA_INIT_PARAM
{
    MS_U32 u64Miu1Base;
}BDMA_INIT_PARAM, *PBDMA_INIT_PARAM;

typedef struct _BDMA_MEMCOPY_PARAM
{
    MS_U32 phy64SrcAddr;
    MS_U32 phy64DstAddr;
    MS_U32 u32Len;
}BDMA_MEMCOPY_PARAM, *PBDMA_MEMCOPY_PARAM;


typedef struct DLL_PACKED _BDMA_SEARCH_PARAM
{
    MS_PHYADDR u32Addr;
    MS_U32 u32Len;
    MS_U32 u32Pattern;
    MS_U32 u32ExcluBit;
    BDMA_SrcDev eDev;
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3)
    MS_U32* pSearchAddr;
#else
    MS_U32 pSearchAddr;
#endif
}BDMA_SEARCH_PARAM, *PBDMA_SEARCH_PARAM;


typedef struct _BDMA_CRC32_PARAM
{
    MS_U32 phy64Addr;
    MS_U32 u32Len;
    MS_U32 u32Poly;
    MS_U32 u32Seed;
    BDMA_SrcDev eDev;
    MS_BOOL bReflect;
    MS_U32 u32CRC32;
}BDMA_CRC32_PARAM, *PBDMA_CRC32_PARAM;


typedef struct _BDMA_PATTERN_FILL_PARAM
{
    MS_PHYADDR u32Addr;
    MS_U32 u32Len;
    MS_U32 u32Pattern;
    BDMA_DstDev eDev;
}BDMA_PATTERN_FILL_PARAM, *PBDMA_PATTERN_FILL_PARAM;


typedef struct DLL_PACKED _BDMA_FLASHCOPY2DRAM_PARAM
{
    MS_PHYADDR u32FlashAddr;
    MS_PHYADDR u32DramAddr;
    MS_U32 u32Len;
}BDMA_FLASHCOPY2DRAM_PARAM, *PBDMA_FLASHCOPY2DRAM_PARAM;


typedef struct DLL_PACKED _BDMA_COPYHND_PARAM
{
    MS_U32 phy64SrcAddr;
    MS_U32 phy64DstAddr;
    MS_U32 u32Len;
    BDMA_CpyType eCpyType;
    MS_U8 u8OpCfg;
}BDMA_COPYHND_PARAM, *PBDMA_COPYHND_PARAM;


#ifdef MOBF_ENABLE
typedef struct DLL_PACKED _BDMA_MOBFSEARCH_PARAM
{
    MS_U32 phy64Addr;
    MS_U32 u32Len;
    BDMA_MOBF_PS* pMobfPsCfg;
    BDMA_SrcDev eDev;
    MS_U32 phy64SearchAddr;
}BDMA_MOBFSEARCH_PARAM, *PBDMA_MOBFSEARCH_PARAM;
#endif
#else

typedef struct _BDMA_INIT_PARAM
{
    MS_PHY u64Miu1Base;
}BDMA_INIT_PARAM, *PBDMA_INIT_PARAM;

typedef struct _BDMA_MEMCOPY_PARAM
{
    MS_PHY phy64SrcAddr;
    MS_PHY phy64DstAddr;
    MS_U32 u32Len;
}BDMA_MEMCOPY_PARAM, *PBDMA_MEMCOPY_PARAM;


typedef struct DLL_PACKED _BDMA_SEARCH_PARAM
{
    MS_PHYADDR u32Addr;
    MS_U32 u32Len;
    MS_U32 u32Pattern;
    MS_U32 u32ExcluBit;
    BDMA_SrcDev eDev;
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3)
    MS_U32* pSearchAddr;
#else
    MS_U32 pSearchAddr;
#endif
}BDMA_SEARCH_PARAM, *PBDMA_SEARCH_PARAM;


typedef struct _BDMA_CRC32_PARAM
{
    MS_PHY phy64Addr;
    MS_U32 u32Len;
    MS_U32 u32Poly;
    MS_U32 u32Seed;
    BDMA_SrcDev eDev;
    MS_BOOL bReflect;
    MS_U32 u32CRC32;
}BDMA_CRC32_PARAM, *PBDMA_CRC32_PARAM;


typedef struct _BDMA_PATTERN_FILL_PARAM
{
    MS_PHYADDR u32Addr;
    MS_U32 u32Len;
    MS_U32 u32Pattern;
    BDMA_DstDev eDev;
}BDMA_PATTERN_FILL_PARAM, *PBDMA_PATTERN_FILL_PARAM;


typedef struct DLL_PACKED _BDMA_FLASHCOPY2DRAM_PARAM
{
    MS_PHYADDR u32FlashAddr;
    MS_PHYADDR u32DramAddr;
    MS_U32 u32Len;
}BDMA_FLASHCOPY2DRAM_PARAM, *PBDMA_FLASHCOPY2DRAM_PARAM;


typedef struct DLL_PACKED _BDMA_COPYHND_PARAM
{
    MS_PHY phy64SrcAddr;
    MS_PHY phy64DstAddr;
    MS_U32 u32Len;
    BDMA_CpyType eCpyType;
    MS_U8 u8OpCfg;
}BDMA_COPYHND_PARAM, *PBDMA_COPYHND_PARAM;


#ifdef MOBF_ENABLE
typedef struct DLL_PACKED _BDMA_MOBFSEARCH_PARAM
{
    MS_PHY phy64Addr;
    MS_U32 u32Len;
    BDMA_MOBF_PS* pMobfPsCfg;
    BDMA_SrcDev eDev;
    MS_PHY phy64SearchAddr;
}BDMA_MOBFSEARCH_PARAM, *PBDMA_MOBFSEARCH_PARAM;
#endif
#endif


typedef struct DLL_PACKED _BDMA_GETSTATUS_PARAM
{
    BDMA_Status *pStatus;
}BDMA_GETSTATUS_PARAM, *PBDMA_GETSTATUS_PARAM;



typedef struct _BDMA_GETINFO_PARAM
{
    MS_U8 u8ChNum;
    MS_U16 u16ChipVer;
    MS_U32 u32IOMap;
    MS_U32 u32MIU1Base;
    MS_S32 s32Mutex;
    MS_BOOL bInit;
    BDMA_DbgLv eDbgLv;
    BDMA_HwInfo sHwCap;
}BDMA_GETINFO_PARAM, *PBDMA_GETINFO_PARAM;


typedef struct DLL_PACKED _BDMA_GETLIBVER_PARAM
{
    const MSIF_Version **ppVersion;
}BDMA_GETLIBVER_PARAM, *PBDMA_GETLIBVER_PARAM;


typedef struct _BDMA_GETMINSIZE_PARAM
{
    MS_U32 u32MinSize;
}BDMA_GETMINSIZE_PARAM, *PBDMA_GETMINSIZE_PARAM;


typedef struct _BDMA_SETDBGLEVEL_PARAM
{
    BDMA_DbgLv eLevel;
}BDMA_SETDBGLEVEL_PARAM, *PBDMA_SETDBGLEVEL_PARAM;
# 360 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvBDMA_v2.h"
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_common.h"
#ifndef _DRV_DMD_COMMON_H_
#define _DRV_DMD_COMMON_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
# 119 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_common.h"
#define USE_UTOPIA2P0 




typedef enum
{
    _QPSK = 0x0,
    _16QAM = 0x1,
    _64QAM = 0x2,
    _UNKNOW_QAM = 0xff,
}DMD_CONSTEL;

typedef enum
{
    _CR1Y2 = 0x0,
    _CR2Y3 = 0x1,
    _CR3Y4 = 0x2,
    _CR5Y6 = 0x3,
    _CR7Y8 = 0x4,
    _UNKNOW_CR = 0xff,
}DMD_CODERATE;



#if(1)
typedef struct
{
    float power_db;
    MS_U8 sar3_val;
}DMD_RFAGC_SSI;

typedef struct
{
    float power_db;
    MS_U8 agc_val;
}DMD_IFAGC_SSI;

typedef struct
{
    float attn_db;
    MS_U8 agc_err;
}DMD_IFAGC_ERR;

typedef struct
{
    DMD_CONSTEL constel;
    DMD_CODERATE code_rate;
    float p_ref;
}DMD_SSI_DBM_NORDIGP1;

typedef struct
{
    DMD_CONSTEL constel;
    DMD_CODERATE code_rate;
    float cn_ref;
}DMD_SQI_CN_NORDIGP1;

typedef struct
{
    DMD_RFAGC_SSI *pRfagcSsi;
    MS_U16 u16RfagcSsi_Size;
    DMD_IFAGC_SSI *pIfagcSsi_LoRef;
    MS_U16 u16IfagcSsi_LoRef_Size;
    DMD_IFAGC_SSI *pIfagcSsi_HiRef;
    MS_U16 u16IfagcSsi_HiRef_Size;
    DMD_IFAGC_ERR *pIfagcErr_LoRef;
    MS_U16 u16IfagcErr_LoRef_Size;
    DMD_IFAGC_ERR *pIfagcErr_HiRef;
    MS_U16 u16IfagcErr_HiRef_Size;
}DMD_SSI_TABLE;
#endif
typedef struct _s_I2C_Interface_func
{
    MS_BOOL (*I2C_WriteBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8addrcount, MS_U8* pu8addr, MS_U16 u16size, MS_U8* pu8data);
    MS_BOOL (*I2C_ReadBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8AddrNum, MS_U8* paddr, MS_U16 u16size, MS_U8* pu8data);
}s_I2C_Interface_func;





DLL_PUBLIC MS_BOOL MDrv_DMD_PreInit(void);
DLL_PUBLIC void MDrv_DMD_RFAGC_Tristate(MS_BOOL bEnable);
DLL_PUBLIC void MDrv_DMD_IFAGC_Tristate(MS_BOOL bEnable);
# 214 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_common.h"
DLL_PUBLIC MS_BOOL MDrv_DMD_TSO_Clk_Control(MS_U8 *u8cmd_array);
DLL_PUBLIC MS_BOOL MDrv_DMD_ReadReg(MS_U32 u32Reg, MS_U8 *u8Value);
DLL_PUBLIC MS_BOOL MDrv_DMD_WriteReg(MS_U32 u32Reg, MS_U8 u8Value);
DLL_PUBLIC MS_BOOL MDrv_DMD_WriteRegs(MS_U32 u32Reg, MS_U8 *u8Value, MS_U8 u8Length);
DLL_PUBLIC MS_BOOL MDrv_DMD_I2C_Channel_Change(MS_U8 ch_num);
DLL_PUBLIC MS_BOOL MDrv_DMD_I2C_Channel_Set(MS_U8 ch_num);

DLL_PUBLIC MS_BOOL MDrv_DMD_SSPI_Init(MS_U8 u8DeviceNum);
DLL_PUBLIC MS_BOOL MDrv_DMD_SSPI_MIU_Writes(MS_U32 u32Addr, MS_U8 *pdata, MS_U16 u16Size);
DLL_PUBLIC MS_BOOL MDrv_DMD_SSPI_MIU_Reads(MS_U32 u32Addr, MS_U8 *pdata, MS_U16 u16Size);
DLL_PUBLIC MS_BOOL MDrv_DMD_SSPI_RIU_Write8(MS_U16 u16Addr, MS_U8 data);
DLL_PUBLIC MS_BOOL MDrv_DMD_SSPI_RIU_Read8(MS_U16 u16Addr, MS_U8 *pdata);
#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_EXTERN_MSB123xc.h"
#ifndef _DRV_DVBT_H_
#define _DRV_DVBT_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 121 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_EXTERN_MSB123xc.h"
#define MSIF_DMD_MSB123xc_INTERN_LIB_CODE {'1','2', '3','x'}
#define MSIF_DMD_MSB123xc_INTERN_LIBVER {'0','1'}
#define MSIF_DMD_MSB123xc_INTERN_BUILDNUM {'0','0' }
#define MSIF_DMD_MSB123xc_INTERN_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_MSB123xc_EXTERN_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_MSB123xc_INTERN_LIB_CODE, \
    MSIF_DMD_MSB123xc_INTERN_LIBVER, \
    MSIF_DMD_MSB123xc_INTERN_BUILDNUM, \
    MSIF_DMD_MSB123xc_INTERN_CHANGELIST, \
    MSIF_OS

#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))




typedef enum
{
    E_DMD_MSB123xc_DBGLV_NONE,
    E_DMD_MSB123xc_DBGLV_INFO,
    E_DMD_MSB123xc_DBGLV_NOTICE,
    E_DMD_MSB123xc_DBGLV_WARNING,
    E_DMD_MSB123xc_DBGLV_ERR,
    E_DMD_MSB123xc_DBGLV_CRIT,
    E_DMD_MSB123xc_DBGLV_ALERT,
    E_DMD_MSB123xc_DBGLV_EMERG,
    E_DMD_MSB123xc_DBGLV_DEBUG,
} eDMD_MSB123xc_DbgLv;

typedef enum
{

    C_opmode_rfagc_en = 0x20,
    C_opmode_humdet_en,
    C_opmode_dcr_en,
    C_opmode_iqb_en,
    C_opmode_auto_iq,
    C_opmode_auto_rfmax,
    C_opmode_auto_aci,
    C_opmode_auto_scan,
    C_opmode_auto_scan_sym_rate,
    C_opmode_auto_scan_qam,
    C_opmode_atv_detector_en,
    C_opmode_rsv_0x0B,
    C_opmode_rsv_0x0C,
    C_opmode_rsv_0x0D,
    C_opmode_rsv_0x0E,
    C_opmode_rsv_0x0F,


    C_config_rssi,
    C_config_zif,
    C_config_freq,
    C_config_fc_l,
    C_config_fc_h,
    C_config_fs_l,
    C_config_fs_h,
    C_config_bw_l,
    C_config_bw_h,
    C_config_bw1_l,
    C_config_bw1_h,
    C_config_bw2_l,
    C_config_bw2_h,
    C_config_bw3_l,
    C_config_bw3_h,
    C_config_rsv_0x1F,
    C_config_rfmax,
    C_config_qam,
    C_config_iq_swap,
    C_config_cci,
    C_config_ts_serial,
    C_config_ts_clk_rate,
    C_config_ts_out_inv,
    C_config_ts_data_swap,

    DVBC_PARAM_LEN,
} DVBC_Param;

typedef enum
{
#if 1

    T_OPMODE_RFAGC_EN = 0x20,
    T_OPMODE_HUMDET_EN,
    T_OPMODE_DCR_EN,
    T_OPMODE_IIS_EN,
    T_OPMODE_CCI_EN,
    T_OPMODE_ACI_EN,
    T_OPMODE_IQB_EN,
    T_OPMODE_AUTO_IQ,
    T_OPMODE_AUTO_RFMAX,
    T_OPMODE_AUTO_ACI,
    T_OPMODE_FIX_MODE_CP,
    T_OPMODE_FIX_TPS,
    T_OPMODE_AUTO_SCAN,
    T_OPMODE_RSV_0X2D,
    T_OPMODE_RSV_0X2E,
    T_OPMODE_RSV_0X2F,


    T_CONFIG_RSSI,
    T_CONFIG_ZIF,
    T_CONFIG_FREQ,
    T_CONFIG_FC_L,
    T_CONFIG_FC_H,
    T_CONFIG_FS_L,
    T_CONFIG_FS_H,
    T_CONFIG_BW,
    T_CONFIG_MODE,
    T_CONFIG_CP,
    T_CONFIG_LP_SEL,
    T_CONFIG_CSTL,
    T_CONFIG_HIER,
    T_CONFIG_HPCR,
    T_CONFIG_LPCR,
    T_CONFIG_IQ_SWAP,
    T_CONFIG_RFMAX,
    T_CONFIG_CCI,
    T_CONFIG_ICFO_RANGE,
    T_CONFIG_RFAGC_REF,
    T_CONFIG_IFAGC_REF_2K,
    T_CONFIG_IFAGC_REF_8K,
    T_CONFIG_IFAGC_REF_ACI,
    T_CONFIG_IFAGC_REF_IIS_2K,
    T_CONFIG_IFAGC_REF_IIS_8K,
    T_CONFIG_ACI_DET_TH_L,
    T_CONFIG_ACI_DET_TH_H,
    T_CONFIG_TS_SERIAL,
    T_CONFIG_TS_CLK_RATE,
    T_CONFIG_TS_OUT_INV,
    T_CONFIG_TS_DATA_SWAP,
    T_CONFIG_2K_SFO_H,
    T_CONFIG_2K_SFO_L,
    T_CONFIG_8K_SFO_H,
    T_CONFIG_8K_SFO_L,
    T_CONFIG_CHECK_CHANNEL,
    T_CONFIG_SLICER_SNR_POS,
    T_CONFIG_TDP_CCI_KP,
    T_CONFIG_CCI_FSWEEP,
    T_CONFIG_TS_CLK_RATE_AUTO,
    T_CONFIG_IF_INV_PWM_OUT_EN,





    T_PARAM_CHECK_SUM,

    T_DVBT_LOCK_HIS = 0xF0,
 T_DVBT2_NOCHAN_Flag = 0xF1,
 T_DVBT_NOCHAN_Flag = 0xF2,

    DVBT_PARAM_LEN,
#else
T_OPMODE_RFAGC_EN = 0x20,
T_OPMODE_AUTO_IQ,
T_CONFIG_ZIF,
T_CONFIG_FC_L,
T_CONFIG_FC_H,
T_CONFIG_FS_L,
T_CONFIG_FS_H,
T_CONFIG_BW,
T_CONFIG_IQ_SWAP,
T_CONFIG_TS_SERIAL,
T_CONFIG_TS_CLK_RATE,
T_CONFIG_TS_OUT_INV,
T_CONFIG_TS_DATA_SWAP,
T_CONFIG_TS_CLK_RATE_AUTO,
T_PARAM_CHECK_SUM,
 DVBT_PARAM_LEN,

#endif
} DVBT_Param;

typedef enum
{

    E_T2_CHECK_SUM_L = 0x00,
    E_T2_CHECK_SUM_H,
    E_T2_FW_VER_0,
    E_T2_FW_VER_1,
    E_T2_FW_VER_2,


    E_T2_ZIF_EN = 0x20,
    E_T2_RF_AGC_EN,
    E_T2_HUM_DET_EN,
    E_T2_DCR_EN,
    E_T2_IQB_EN,
    E_T2_IIS_EN,
    E_T2_CCI_EN,
    E_T2_LOW_PWR_DET_EN,
    E_T2_ACI_DET_EN,
    E_T2_TD_MOTION_EN,
    E_T2_FD_MOTION_EN,


    E_T2_BW = 0x40,
    E_T2_FC_L = 0x41,
    E_T2_FC_H = 0x42,
    E_T2_FS_L,
    E_T2_FS_H,
    E_T2_ZIF,
    E_T2_GI,
    E_T2_ACI_DET_TYPE,
    E_T2_AGC_REF,
    E_T2_RSSI_REF,
    E_T2_SNR_TIME_L,
    E_T2_SNR_TIME_H,
    E_T2_BER_CMP_TIME_L,
    E_T2_BER_CMP_TIME_H,
    E_T2_SFO_CFO_NUM,
    E_T2_CCI,
    E_T2_ACI_DET_TH_L,
    E_T2_ACI_DET_TH_H,
    E_T2_TS_SERIAL = 0x52,
    E_T2_TS_CLK_RATE = 0x53,
    E_T2_TS_OUT_INV = 0x54,
    E_T2_TS_DATA_SWAP = 0x55,
    E_T2_TDP_CCI_KP,
    E_T2_CCI_FSWEEP,
    E_T2_TS_ERR_POL,
    E_T2_IF_AGC_INV_PWM_EN,


    E_T2_DVBT2_LOCK_HIS = 0xF0,
    E_T2_FEF_DET_IND,
    E_T2_MPLP_NO_COMMON_IND,


    E_T2_PLP_ID_ARR = 0x100,
    E_T2_L1_FLAG = 0x120,
    E_T2_PLP_ID,
    E_T2_GROUP_ID,
    E_T2_PARAM_NUM,
} E_DVBT2_PARAM;

typedef enum
{
    E_DMD_MSB123xc_DEMOD_I2C_DYNAMIC_SLAVE_ID_1,
    E_DMD_MSB123xc_DEMOD_I2C_DYNAMIC_SLAVE_ID_2,
    E_DMD_MSB123xc_DEMOD_I2C_DYNAMIC_SLAVE_ID_3,
    E_DMD_MSB123xc_DEMOD_I2C_DYNAMIC_SLAVE_ID_4
} eDMD_MSB123xc_DemodI2CSlaveID;

typedef enum
{
    E_DMD_MSB123xc_DEMOD_I2C_READ_BYTES,
    E_DMD_MSB123xc_DEMOD_I2C_WRITE_BYTES
} eDMD_MSB123xc_DemodI2CMethod;


typedef struct
{
    MS_U8 u8WO_SPI_Flash;
    MS_BOOL bPreloadDSPCodeFromMainCHIPI2C;
    MS_BOOL bFlashWPEnable;
    void (*fpGPIOReset)(MS_BOOL bOnOff);
    MS_BOOL (*fpMSB123xc_I2C_Access)(eDMD_MSB123xc_DemodI2CSlaveID eSlaveID, eDMD_MSB123xc_DemodI2CMethod eMethod, MS_U8 u8AddrSize, MS_U8 *pu8Addr, MS_U16 u16Size, MS_U8 *pu8Data);
    MS_U8* pDVBC_DSP_REG;
    MS_U8* pDVBT_DSP_REG;
    MS_U8* pDVBT2_DSP_REG;
    MS_BOOL bEnableSPILoadCode;
    void (*fpMSB123xc_SPIPAD_En)(MS_BOOL bOnOff);
} sDMD_MSB123xc_InitData;

typedef enum
{
    E_DMD_MSB123xc_DEMOD_NONE,
    E_DMD_MSB123xc_DEMOD_DVBT2,
    E_DMD_MSB123xc_DEMOD_DVBT,
    E_DMD_MSB123xc_DEMOD_DVBC,
} eDMD_MSB123xc_DemodulatorType;

typedef enum
{
    E_DMD_MSB123xc_FAIL=0,
    E_DMD_MSB123xc_OK=1
} DMD_MSB123xc_Result;


typedef struct
{
    MS_U16 u16Version;
} DMD_MSB123xc_Info;







extern MS_BOOL MDrv_DMD_MSB123xc_Init(sDMD_MSB123xc_InitData *pDMD_MSB123xc_InitData, MS_U32 u32InitDataLen);



extern MS_BOOL MDrv_DMD_MSB123xc_Exit(void);
# 440 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_EXTERN_MSB123xc.h"
extern MS_BOOL MDrv_DMD_MSB123xc_SetDbgLevel(eDMD_MSB123xc_DbgLv u8DbgLevel);
# 450 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_EXTERN_MSB123xc.h"
extern MS_BOOL MDrv_DMD_MSB123xc_GetLibVer(const MSIF_Version **ppVersion);




extern MS_BOOL MDrv_DMD_MSB123xc_GetFWVer(MS_U16 *ver);





extern MS_BOOL MDrv_DMD_MSB123xc_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern MS_BOOL MDrv_DMD_MSB123xc_SetReg(MS_U16 u16Addr, MS_U8 u8Data);





extern MS_BOOL MDrv_DMD_MSB123xc_SetRegs(MS_U16 u16Addr, MS_U8* u8pData, MS_U16 data_size);





extern MS_BOOL MDrv_DMD_MSB123xc_SetReg2Bytes(MS_U16 u16Addr, MS_U16 u16Data);





extern MS_BOOL MDrv_DMD_MSB123xc_GetDSPReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern MS_BOOL MDrv_DMD_MSB123xc_SetDSPReg(MS_U16 u16Addr, MS_U8 u8Data);



extern void MDrv_DMD_MSB123xc_SetCurrentDemodulatorType(eDMD_MSB123xc_DemodulatorType eCurrentDemodulatorType);



extern MS_BOOL MDrv_DMD_MSB123xc_LoadDSPCode(void);



extern MS_BOOL MDrv_DMD_MSB123xc_DTV_DVBT_DSPReg_CRC(void);



extern MS_BOOL MDrv_DMD_MSB123xc_Power_On_Initialization(void);
#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ISDBT_v2.h"
#ifndef _DRV_ISDBT_V2_H_
#define _DRV_ISDBT_V2_H_ 

#include "drvDMD_ISDBT.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 121 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ISDBT_v2.h"
#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif





typedef enum {
    DMD_ISDBT_DRV_CMD_SetDbgLevel,
    DMD_ISDBT_DRV_CMD_GetInfo,
    DMD_ISDBT_DRV_CMD_GetLibVer,
    DMD_ISDBT_DRV_CMD_Init,
    DMD_ISDBT_DRV_CMD_Exit,
    DMD_ISDBT_DRV_CMD_GetConfig,
    DMD_ISDBT_DRV_CMD_AdvSetConfig,
    DMD_ISDBT_DRV_CMD_SetPowerState,
    DMD_ISDBT_DRV_CMD_GetLock,
    DMD_ISDBT_DRV_CMD_GetModulationMode,
    DMD_ISDBT_DRV_CMD_GetSignalStrength,
    DMD_ISDBT_DRV_CMD_GetFreqOffset,
    DMD_ISDBT_DRV_CMD_GetSignalQuality,
    DMD_ISDBT_DRV_CMD_GetSignalQualityOfLayerA,
    DMD_ISDBT_DRV_CMD_GetSignalQualityOfLayerB,
    DMD_ISDBT_DRV_CMD_GetSignalQualityOfLayerC,
    DMD_ISDBT_DRV_CMD_GetSignalQualityCombine,
    DMD_ISDBT_DRV_CMD_GetSNR,
    DMD_ISDBT_DRV_CMD_Read_PKT_ERR,
    DMD_ISDBT_DRV_CMD_GetPreViterbiBer,
    DMD_ISDBT_DRV_CMD_GetPostViterbiBer,
    DMD_ISDBT_DRV_CMD_GET_PKT_ERR,
    DMD_ISDBT_DRV_CMD_SetSerialControl,
    DMD_ISDBT_DRV_CMD_IIC_BYPASS_MODE,
    DMD_ISDBT_DRV_CMD_SWITCH_SSPI_GPIO,
    DMD_ISDBT_DRV_CMD_GPIO_GET_LEVEL,
    DMD_ISDBT_DRV_CMD_GPIO_SET_LEVEL,
    DMD_ISDBT_DRV_CMD_GPIO_OUT_ENABLE,
    DMD_ISDBT_DRV_CMD_DoIQSwap,
    DMD_ISDBT_DRV_CMD_GetReg,
    DMD_ISDBT_DRV_CMD_SetReg,
    DMD_ISDBT_DRV_CMD_MD_Init,
    DMD_ISDBT_DRV_CMD_MD_Exit,
    DMD_ISDBT_DRV_CMD_MD_GetConfig,
    DMD_ISDBT_DRV_CMD_MD_AdvSetConfig,
    DMD_ISDBT_DRV_CMD_MD_SetActive,
    DMD_ISDBT_DRV_CMD_MD_SetPowerState,
    DMD_ISDBT_DRV_CMD_MD_GetLock,
    DMD_ISDBT_DRV_CMD_MD_GetModulationMode,
    DMD_ISDBT_DRV_CMD_MD_GetSignalStrength,
    DMD_ISDBT_DRV_CMD_MD_GetFreqOffset,
    DMD_ISDBT_DRV_CMD_MD_GetSignalQuality,
    DMD_ISDBT_DRV_CMD_MD_GetSignalQualityOfLayerA,
    DMD_ISDBT_DRV_CMD_MD_GetSignalQualityOfLayerB,
    DMD_ISDBT_DRV_CMD_MD_GetSignalQualityOfLayerC,
    DMD_ISDBT_DRV_CMD_MD_GetSignalQualityCombine,
    DMD_ISDBT_DRV_CMD_MD_GetSNR,
    DMD_ISDBT_DRV_CMD_MD_Get_PKT_ERR,
    DMD_ISDBT_DRV_CMD_MD_GetPreViterbiBer,
    DMD_ISDBT_DRV_CMD_MD_GetPostViterbiBer,
    DMD_ISDBT_DRV_CMD_MD_Read_PKT_ERR,
    DMD_ISDBT_DRV_CMD_MD_SetSerialControl,
    DMD_ISDBT_DRV_CMD_MD_IIC_BYPASS_MODE,
    DMD_ISDBT_DRV_CMD_MD_SWITCH_SSPI_GPIO,
    DMD_ISDBT_DRV_CMD_MD_GPIO_GET_LEVEL,
    DMD_ISDBT_DRV_CMD_MD_GPIO_SET_LEVEL,
    DMD_ISDBT_DRV_CMD_MD_GPIO_OUT_ENABLE,
    DMD_ISDBT_DRV_CMD_MD_DoIQSwap,
    DMD_ISDBT_DRV_CMD_MD_GetReg,
    DMD_ISDBT_DRV_CMD_MD_SetReg
} DMD_ISDBT_DRV_COMMAND;

typedef struct DLL_PACKED _ISDBT_DBG_LEVEL_PARAM
{
    DMD_ISDBT_DbgLv u8DbgLevel;
} ISDBT_DBG_LEVEL_PARAM, *PISDBT_DBG_LEVEL_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_INFO_PARAM
{
    DMD_ISDBT_Info* pInfo;
} ISDBT_GET_INFO_PARAM, *PISDBT_GET_INFO_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_LIB_VER_PARAM
{
    const MSIF_Version **ppVersion;
} ISDBT_GET_LIB_VER_PARAM, *PISDBT_GET_LIB_VER_PARAM;

typedef struct DLL_PACKED _ISDBT_INIT_PARAM
{
    MS_U8 id;
    DMD_ISDBT_InitData *pDMD_ISDBT_InitData;
    MS_U32 u32InitDataLen;
} ISDBT_INIT_PARAM, *PISDBT_INIT_PARAM;

typedef struct DLL_PACKED _ISDBT_SET_CONFIG_PARAM
{
    MS_U8 id;
    DMD_ISDBT_DEMOD_TYPE eType;
    MS_BOOL bEnable;
} ISDBT_SET_CONFIG_PARAM, *PISDBT_SET_CONFIG_PARAM;

typedef struct DLL_PACKED _ISDBT_ID_PARAM
{
    MS_U8 id;
} ISDBT_ID_PARAM, *PISDBT_ID_PARAM;

typedef struct DLL_PACKED _ISDBT_SET_POWER_STATE_PARAM
{
    MS_U8 id;
    EN_POWER_MODE u16PowerState;
} ISDBT_SET_POWER_STATE_PARAM, *PISDBT_SET_POWER_STATE_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_LOCK_PARAM
{
    MS_U8 id;
    DMD_ISDBT_GETLOCK_TYPE eType;
    DMD_ISDBT_LOCK_STATUS status;
} ISDBT_GET_LOCK_PARAM, *PISDBT_GET_LOCK_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_MODULATION_MODE_PARAM
{
    MS_U8 id;
    EN_ISDBT_Layer eLayerIndex;
    sISDBT_MODULATION_MODE IsdbtModulationMode;
} ISDBT_GET_MODULATION_MODE_PARAM, *PISDBT_GET_MODULATION_MODE_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_SIGNAL_STRENGTH_PARAM
{
    MS_U8 id;
    MS_U16 u16Strength;
} ISDBT_GET_SIGNAL_STRENGTH_PARAM, *PISDBT_GET_SIGNAL_STRENGTH_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_FREQ_OFFSET_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_ISDBT_CFO_DATA cfo;
    #else
    MS_S16 cfo;
    #endif
} ISDBT_GET_FREQ_OFFSET_PARAM, *PISDBT_GET_FREQ_OFFSET_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_SIGNAL_QUALITY_PARAM
{
    MS_U8 id;
    MS_U16 u16SignalQuality;
} ISDBT_GET_SIGNAL_QUALITY_PARAM, *PISDBT_GET_SIGNAL_QUALITY_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_SNR_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_ISDBT_SNR_DATA snr;
    #else
    float snr;
    #endif
} ISDBT_GET_SNR_PARAM, *PISDBT_GET_SNR_PARAM;

typedef struct DLL_PACKED _ISDBT_READ_PKT_ERR_PARAM
{
    MS_U8 id;
    EN_ISDBT_Layer eIsdbtLayer;
    MS_U16 u16PacketErr;
} ISDBT_READ_PKT_ERR_PARAM, *PISDBT_READ_PKT_ERR_PARAM;

typedef struct DLL_PACKED _ISDBT_GET_BER_PARAM
{
    MS_U8 id;
    DMD_ISDBT_GET_BER_VALUE ber;
} ISDBT_GET_BER_PARAM, *PISDBT_GET_BER_PARAM;

typedef struct DLL_PACKED _ISDBT_SET_SERIAL_CONTROL_PARAM
{
    MS_U8 id;
    MS_U8 u8TsConfigData;
} ISDBT_SET_SERIAL_CONTROL_PARAM, *PISDBT_SET_SERIAL_CONTROL_PARAM;

typedef struct DLL_PACKED _ISDBT_IIC_BYPASS_MODE_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} ISDBT_IIC_BYPASS_MODE_PARAM, *PISDBT_IIC_BYPASS_MODE_PARAM;

typedef struct DLL_PACKED _ISDBT_SWITCH_SSPI_GPIO_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} ISDBT_SWITCH_SSPI_GPIO_PARAM, *PISDBT_SWITCH_SSPI_GPIO_PARAM;

typedef struct DLL_PACKED _ISDBT_GPIO_LEVEL_PARAM
{
    MS_U8 id;
    MS_U8 u8Pin;
    MS_BOOL bLevel;
} ISDBT_GPIO_LEVEL_PARAM, *PISDBT_GPIO_LEVEL_PARAM;

typedef struct DLL_PACKED _ISDBT_GPIO_OUT_ENABLE_PARAM
{
    MS_U8 id;
    MS_U8 u8Pin;
    MS_BOOL bEnableOut;
} ISDBT_GPIO_OUT_ENABLE_PARAM, *PISDBT_GPIO_OUT_ENABLE_PARAM;

typedef struct DLL_PACKED _ISDBT_DO_IQ_SWAP_PARAM
{
    MS_U8 id;
    MS_BOOL bIsQPad;
} ISDBT_DO_IQ_SWAP_PARAM, *PISDBT_DO_IQ_SWAP_PARAM;

typedef struct DLL_PACKED _ISDBT_REG_PARAM
{
    MS_U8 id;
    MS_U16 u16Addr;
    MS_U8 u8Data;
} ISDBT_REG_PARAM, *PISDBT_REG_PARAM;






DLL_PUBLIC extern void ISDBTRegisterToUtopia(FUtopiaOpen ModuleType);
DLL_PUBLIC extern MS_U32 ISDBTOpen(void** ppInstance, MS_U32 u32ModuleVersion, void* pAttribute);
DLL_PUBLIC extern MS_U32 ISDBTClose(void* pInstance);
DLL_PUBLIC extern MS_U32 ISDBTIoctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCLKM.h"
#ifndef _DRVCLKM_H_
#define _DRVCLKM_H_ 
# 106 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCLKM.h"
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
# 120 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCLKM.h"
#define CLKM_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'C','L','K','M'}, \
    {'0','1'}, \
    {'0','6'}, \
    {'0','0','3','1','0','0','5','0'}, \
    MSIF_OS



typedef enum _CLKM_DbgLvl
{
    E_CLKM_DBGLVL_NONE = 0,
    E_CLKM_DBGLVL_WARNING,
    E_CLKM_DBGLVL_ERROR,
    E_CLKM_DBGLVL_INFO,
    E_CLKM_DBGLVL_ALL,
}CLKM_DbgLvl;


typedef struct _CLKM_Info
{
    MS_BOOL bInit;
    MS_S32 s32fd;
    MS_S32 s32Mutex;

}CLKM_Info;



typedef enum {

    E_MDRV_CMD_CLKM_Init,
    E_MDRV_CMD_CLKM_GET_HANDLE,
    E_MDRV_CMD_CLKM_CLK_GATE_DIABLE,
    E_MDRV_CMD_CLKM_SET_CLK_SOURCE,
    E_MDRV_CMD_CLKM_GET_SRAM_SD_INFO,


} eClkmIoctlOpt;

typedef enum _CLKM_Result
{
    E_CLKM_NOT_SUPPORT = -1
    ,E_CLKM_FAIL = 0
    ,E_CLKM_OK = 1
    ,E_CLKM_TIMEOUT
    ,E_CLKM_BUSY
}CLKM_Result;


typedef struct _CLKM_GetHandle_PARAM
{
    char *s8_Handle_Name;
    MS_S32 s32_Handle;

}CLKM_GetHandle_PARAM,*PCLKM_GetHandle_PARAM;


typedef struct _CLKM_CLK_GATE_DISABLE_PARAM
{

    MS_S32 s32_Handle;

}CLKM_CLK_GATE_DISABLE_PARAM,*PCLKM_CLK_GATE_DISABLE_PARAM;


typedef struct _CLKM_SET_CLK_SRC_PARAM
{
    MS_S32 s32_Handle;
    char *clk_src_name;

}CLKM_SET_CLK_SRC_PARAM,*PCLKM_SET_CLK_SRC_PARAM;


typedef struct _CLKM_GET_SRAM_SD_INFO_PARAM
{
    char *sram_sd_name;
    MS_U16 sram_sd_value;

}CLKM_GET_SRAM_SD_INFO_PARAM,*PCLKM_GET_SRAM_SD_INFO_PARAM;




MS_BOOL Drv_CLKM_Init(void);

void Drv_Clkm_Clk_Gate_Disable(MS_S32 s32Handle);

void Drv_Clkm_Set_Clk_Source(MS_S32 s32Handle,char *clk_src_name);

 MS_S32 Drv_Clkm_Get_Handle(char *name);

 MS_U16 Drv_Get_Sram_Sd_Info(char *name);

#ifdef __cplusplus
}
#endif
#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor_v2.h"
#ifndef _XC_PCMONITOR_H_
#define _XC_PCMONITOR_H_ 

#ifdef __cplusplus
extern "C"
{
#endif



typedef struct
{
    MS_U8 u8MaxWindowNum;
    MS_BOOL bReturnValue;
} stXC_PCMONITOR_INIT, *pstXC_PCMONITOR_INIT;

typedef struct
{
    SCALER_WIN eWindow;
} stXC_PCMONITOR_RESTART, *pstXC_PCMONITOR_RESTART;

typedef struct
{
    MS_U16 u16TimingStableCounter;
    MS_U16 u16TimingNosyncCounter;
} stXC_PCMONITOR_SETTIMINGCOUNT, *pstXC_PCMONITOR_SETTIMINGCOUNT;

typedef struct
{
    INPUT_SOURCE_TYPE_t eCurrentSrc;
    SCALER_WIN eWindow;
    XC_PCMONITOR_STATUS eReturnValue;
} stXC_PCMONITOR, *pstXC_PCMONITOR;

typedef struct
{
    SCALER_WIN eWindow;
    XC_PCMONITOR_STATUS eReturnValue;
} stXC_PCMONITOR_GETCURRENTSTATE, *pstXC_PCMONITOR_GETCURRENTSTATE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_PCMONITOR_GETSYNCSTATUS, *pstXC_PCMONITOR_GETSYNCSTATUS;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U16 u16ReturnValue;
} stXC_PCMONITOR_GET_HFREQX10, *pstXC_PCMONITOR_GET_HFREQX10;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U32 u32ReturnValue;
} stXC_PCMONITOR_GET_HFREQX1K, *pstXC_PCMONITOR_GET_HFREQX1K;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U16 u16ReturnValue;
} stXC_PCMONITOR_GET_VFREQX10, *pstXC_PCMONITOR_GET_VFREQX10;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U32 u32ReturnValue;
} stXC_PCMONITOR_GET_VFREQX1K, *pstXC_PCMONITOR_GET_VFREQX1K;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U16 u16ReturnValue;
} stXC_PCMONITOR_GET_VTOTAL, *pstXC_PCMONITOR_GET_VTOTAL;

typedef struct DLL_PACKED
{
    SCALER_WIN eWindow;
    MS_WINDOW_TYPE* msWin;
} stXC_PCMONITOR_GET_DVI_HDMI_DE_INFO, *pstXC_PCMONITOR_GET_DVI_HDMI_DE_INFO;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_PCMONITOR_SYNCLOSS, *pstXC_PCMONITOR_SYNCLOSS;

typedef struct
{
    MS_BOOL bPollingOnly;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_PCMONITOR_INVALIDTIMINGDETECT, *pstXC_PCMONITOR_INVALIDTIMINGDETECT;

typedef struct
{
    INPUT_SOURCE_TYPE_t eCurrentSrc;
    MS_U16 u16TimingStableCounter;
    MS_U16 u16TimingNosyncCounter;
    E_APIXC_ReturnValue eReturnValue;
} stXC_PCMONITOR_SETTIMINGCOUNTEX, *pstXC_PCMONITOR_SETTIMINGCOUNTEX;

#ifdef __cplusplus
}
#endif

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO.h"
#ifndef _UFO_H_
#define _UFO_H_ 




#define UFO_PUBLIC_HEADER_700 




#define UFO_DMX_FQ 

#define UFO_DMX_TSO2 
#define UFO_DMX_RES_ALLOC_EN 
#define UFO_DMX_TSIO 
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/UFO.h"
#define UFO_GOP_DIP_PINPON 




#define UFO_DIP_HVSP 
#define UFO_DIP_OSD_BLENDING 
#define UFO_DIP_SELECT_TILE_BLOCK 
#define UFO_DIP_SUPPORT_3DDI 




#define UFO_XC_SETPIXELSHIFT 




#define UFO_XC_HDR 

#ifdef UFO_XC_HDR



#define UFO_XC_HDR_VERSION 2
#endif




#define UFO_XC_AUTO_DOWNLOAD 




#define UFO_XC_SET_DSINFO_V0 




#define UFO_XC_GETOUTPUTINTELACETIMING 





#define UFO_XC_SETBLACKVIDEOBYMODE 




#define UFO_MVOP_GET_IS_XC_GEN_TIMING 




#define UFO_MVOP_GET_IS_MVOP_AUTO_GEN_BLACK 




#define UFO_XC_VMARK 




#define UFO_SET_XC_CMA_INFORMATION 




#define UFO_XC_PQ_SUPPORT_REPEATER_COLOR_THROUGH_MODE 




#define UFO_XC_PQ_SUPPORT_SWDRIVING_MULTI_DEVICES 




#define UFO_XC_PQ_SUPPORT_SWMOTION 





#define UFO_AUDIO_AD_SUPPORT 





#define UFO_SUPPORT_VCM 





#define UFO_DEMOD_DVBS_SUPPORT_DMD_INT 
#define UFO_DEMOD_DVBC_SUPPORT_DMD_INT 





#define UFO_DEMOD_GetParam_NEW_FLOW 





#define UFO_DEMOD_GET_AGC_INFO 
#define UFO_DEMOD_DVBC_GET_AGC_INFO 


#define UFO_XC_DAC_POWERCONTROL 


#define UFO_SUPPORT_KERNEL_FLOATING 




#define UFO_SYS_TEE_INFO_SET_MBOOT 

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH_v2.h"
#ifndef _DRV_SERFLASH_V2_H_
#define _DRV_SERFLASH_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif







typedef enum {
    MDrv_CMD_SERFLASH_GetInfo,
 MDrv_CMD_SERFLASH_GetLibVer,
    MDrv_CMD_SERFLASH_GetStatus,
    MDrv_CMD_SERFLASH_SetDbgLevel,
    MDrv_CMD_SERFLASH_SetWPInfo,
    MDrv_CMD_SERFLASH_SetMcuCSCallBack,
    MDrv_CMD_SERFLASH_SetFlashWPCallBack,
    MDrv_CMD_SERFLASH_DetectType,
    MDrv_CMD_SERFLASH_DetectSize,
    MDrv_CMD_SERFLASH_Set2XRead,
    MDrv_CMD_SERFLASH_SetCKG,
    MDrv_CMD_SERFLASH_ClkDiv,
    MDrv_CMD_SERFLASH_SetMode,
    MDrv_CMD_SERFLASH_ReadUID,
    MDrv_CMD_SERFLASH_ChipSelect,
    MDrv_CMD_SERFLASH_Init,
    MDrv_CMD_SERFLASH_ReadID,
    MDrv_CMD_SERFLASH_Read,
    MDrv_CMD_SERFLASH_EraseChip,
    MDrv_CMD_SERFLASH_AddressToBlock,
    MDrv_CMD_SERFLASH_BlockToAddress,
    MDrv_CMD_SERFLASH_AddressErase,
    MDrv_CMD_SERFLASH_BlockErase,
    MDrv_CMD_SERFLASH_SectorErase,
    MDrv_CMD_SERFLASH_CheckWriteDone,
    MDrv_CMD_SERFLASH_Write,
    MDrv_CMD_SERFLASH_DMA,
    MDrv_CMD_SERFLASH_WriteProtect,
    MDrv_CMD_SERFLASH_WriteProtect_Enable_All_Range,
    MDrv_CMD_SERFLASH_WriteProtect_Disable_All_Range,
    MDrv_CMD_SERFLASH_WriteProtect_Disable_Range_Set,
    MDrv_CMD_SERFLASH_WriteProtect_Area,
    MDrv_CMD_SERFLASH_ReadStatusRegister,
    MDrv_CMD_SERFLASH_ReadStatusRegister2,
    MDrv_CMD_SERFLASH_WriteStatusRegister,
    MDrv_CMD_SERFLASH_CopyHnd,
    MDrv_CMD_SERFLASH_SetGPIO,
} eSerflashIoctlOpt;
# 165 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH_v2.h"
typedef struct _SERFLASH_READID
{
    MS_U8 *pu8FlashID;
    MS_U32 u32IDSize;
}SERFLASH_READID, *PSERFLASH_READID;

typedef struct _SERFLASH_READ
{
    MS_U32 u32FlashAddr;
    MS_U32 u32FlashSize;
    MS_U8 *user_buffer;
}SERFLASH_READ, *PSERFLASH_READ;

typedef struct _SERFLASH_ADDRTOBLK
{
    MS_U32 u32FlashAddr;
    MS_U32 *pu32BlockIndex;
}SERFLASH_ADDRTOBLK, *PSERFLASH_ADDRTOBLK;

typedef struct _SERFLASH_BLKTOADDR
{
    MS_U32 u32BlockIndex;
    MS_U32 *pu32FlashAddr;
}SERFLASH_BLKTOADDR, *PSERFLASH_BLKTOADDR;

typedef struct _SERFLASH_ADDRERASE
{
    MS_U32 u32StartAddr;
    MS_U32 u32EraseSize;
    MS_BOOL bWait;
}SERFLASH_ADDRERASE, *PSERFLASH_ADDRERASE;

typedef struct _SERFLASH_BLKERASE
{
    MS_U32 u32StartBlock;
    MS_U32 u32EndBlock;
    MS_BOOL bWait;
}SERFLASH_BLKERASE, *PSERFLASH_BLKERASE;

typedef struct _SERFLASH_SECERASE
{
    MS_U32 u32StartAddr;
    MS_U32 u32EndAddr;
}SERFLASH_SECERASE, *PSERFLASH_SECERASE;

typedef struct _SERFLASH_WRITE
{
    MS_U32 u32FlashAddr;
    MS_U32 u32FlashSize;
    MS_U8 *user_buffer;
}SERFLASH_WRITE, *PSERFLASH_WRITE;

typedef struct _SERFLASH_DMA
{
    MS_U32 u32FlashStart;
    MS_U32 u32DRAMStart;
    MS_U32 u32Size;
}SERFLASH_DMA, *PSERFLASH_DMA;

typedef struct _SERFLASH_WP
{
    MS_BOOL bEnable;
}SERFLASH_WP, *PSERFLASH_WP;

typedef struct _SERFLASH_WPDISABLERANGESET
{
    MS_U32 u32DisableLowerBound;
    MS_U32 u32DisableSize;
}SERFLASH_WPDISABLERANGESET, *PSERFLASH_WPDISABLERANGESET;

typedef struct _SERFLASH_WPAREA
{
    MS_BOOL bEnableAllArea;
    MS_U8 u8BlockProtectBits;
}SERFLASH_WPAREA, *PSERFLASH_WPAREA;

typedef struct _SERFLASH_COPYHND
{
    MS_PHYADDR u32FlashAddr;
    MS_PHYADDR u32DstAddr;
    MS_U32 u32Len;
    SPIDMA_Dev eDstDev;
    MS_U8 u8OpCfg;
}SERFLASH_COPYHND, *PSERFLASH_COPYHND;

typedef struct _SERFLASH_GETSTATUS
{
    SERFLASH_DrvStatus* pDrvStatus;
}SERFLASH_GETSTATUS, *PSERFLASH_GETSTATUS;

typedef struct _SERFLASH_GETLIBVER
{
    const MSIF_Version **ppVersion;
}SERFLASH_GETLIBVER, *PSERFLASH_GETLIBVER;

typedef struct _SERFLASH_SETDBGLEVEL
{
    MS_U8 u8DbgLevel;
}SERFLASH_SETDBGLEVEL, *PSERFLASH_SETDBGLEVEL;

typedef struct _SERFLASH_SETWPINFO
{
    MS_BOOL bWPInfo;
}SERFLASH_SETWPINFO, *PSERFLASH_SETWPINFO;

typedef struct _SERFLASH_SETMCUCSCB
{
    ms_Mcu_ChipSelect_CB ChipSel_cb;
}SERFLASH_SETMCUCSCB, *PSERFLASH_SETMCUCSCB;

typedef struct _SERFLASH_SETFLASHWPCB
{
    ms_Flash_SetHWWP_CB FlashWP_cb;
}SERFLASH_SETFLASHWPCB, *PSERFLASH_SETFLASHWPCB;

typedef struct _SERFLASH_DETECTSIZE
{
    MS_U32 *u32FlashSize;
}SERFLASH_DETECTSIZE, *PSERFLASH_DETECTSIZE;

typedef struct _SERFLASH_SET2XREAD
{
    MS_BOOL b2XMode;
}SERFLASH_SET2XREAD, *PSERFLASH_SET2XREAD;

typedef struct _SERFLASH_SETCKG
{
    SPI_DrvCKG eCKGspi;
}SERFLASH_SETCKG, *PSERFLASH_SETCKG;

typedef struct _SERFLASH_CLKDIV
{
    SPI_DrvClkDiv eClkDivspi;
}SERFLASH_CLKDIV, *PSERFLASH_CLKDIV;

typedef struct _SERFLASH_SETMODE
{
    MS_BOOL bXiuRiu;
}SERFLASH_SETMODE, *PSERFLASH_SETMODE;

typedef struct _SERFLASH_CHIPSELECT
{
    MS_U8 u8FlashIndex;
}SERFLASH_CHIPSELECT, *PSERFLASH_CHIPSELECT;

typedef struct _SERFLASH_READSTATUSREG
{
    MS_U8 *pu8StatusReg;
}SERFLASH_READSTATUSREG, *PSERFLASH_READSTATUSREG;

typedef struct _SERFLASH_READSTATUSREG2
{
    MS_U8 *pu8StatusReg;
}SERFLASH_READSTATUSREG2, *PSERFLASH_READSTATUSREG2;

typedef struct _SERFLASH_WRITESTATUSREG
{
    MS_U16 u16StatusReg;
}SERFLASH_WRITESTATUSREG, *PSERFLASH_WRITESTATUSREG;

typedef struct _SERFLASH_SETGPIO
{
    MS_BOOL bSwitch;
}SERFLASH_SETGPIO, *PSERFLASH_SETGPIO;
# 340 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH_v2.h"
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2.h"
#ifndef _DRV_DVBT2_H_
#define _DRV_DVBT2_H_ 

#include "MsTypes.h"

#include "MsCommon.h"
#include "drvDMD_common.h"
#ifdef __cplusplus
extern "C"
{
#endif
# 123 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2.h"
#define MSIF_DMD_DVBT2_INTERN_LIB_CODE {'D','V', 'B','T'}
#define MSIF_DMD_DVBT2_INTERN_LIBVER {'0','1'}
#define MSIF_DMD_DVBT2_INTERN_BUILDNUM {'2','1' }
#define MSIF_DMD_DVBT2_INTERN_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_DVBT2_INTERN_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_DVBT2_INTERN_LIB_CODE, \
    MSIF_DMD_DVBT2_INTERN_LIBVER, \
    MSIF_DMD_DVBT2_INTERN_BUILDNUM, \
    MSIF_DMD_DVBT2_INTERN_CHANGELIST, \
    MSIF_OS

#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))




typedef enum
{
    DMD_T2_DBGLV_NONE,
    DMD_T2_DBGLV_INFO,
    DMD_T2_DBGLV_NOTICE,
    DMD_T2_DBGLV_WARNING,
    DMD_T2_DBGLV_ERR,
    DMD_T2_DBGLV_CRIT,
    DMD_T2_DBGLV_ALERT,
    DMD_T2_DBGLV_EMERG,
    DMD_T2_DBGLV_DEBUG,
} DMD_T2_DbgLv;

typedef enum
{
    E_DMD_T2_LOCK,
    E_DMD_T2_CHECKING,
    E_DMD_T2_CHECKEND,
    E_DMD_T2_UNLOCK,
    E_DMD_T2_NULL,
} DMD_T2_LOCK_STATUS;

typedef enum
{
    E_DMD_DVBT2_GETLOCK,
    E_DMD_DVBT2_FEC_LOCK,
    E_DMD_DVBT2_P1_LOCK,
    E_DMD_DVBT2_DCR_LOCK,
    E_DMD_DVBT2_AGC_LOCK,
    E_DMD_DVBT2_MODE_DET,
    E_DMD_DVBT2_P1_EVER_LOCK,
    E_DMD_DVBT2_L1_CRC_LOCK,
    E_DMD_DVBT2_NO_CHANNEL,
    E_DMD_DVBT2_NO_CHANNEL_IFAGC,
    E_DMD_DVBT2_ATV_DETECT,
    E_DMD_DVBT2_BER_LOCK,
    E_DMD_DVBT2_SNR_LOCK,
} DMD_DVBT2_GETLOCK_TYPE;

typedef enum
{
    E_DMD_T2_RF_BAND_5MHz = 0x01,
    E_DMD_T2_RF_BAND_1p7MHz = 0x00,
    E_DMD_T2_RF_BAND_6MHz = 0x02,
    E_DMD_T2_RF_BAND_7MHz = 0x03,
    E_DMD_T2_RF_BAND_8MHz = 0x04,
    E_DMD_T2_RF_BAND_10MHz = 0x05,
    E_DMD_T2_RF_BAND_INVALID
} DMD_DVBT2_RF_CHANNEL_BANDWIDTH;

typedef enum
{

    E_DMD_T2_CHECK_SUM_L = 0x00,
    E_DMD_T2_CHECK_SUM_H,
    E_DMD_T2_FW_VER_0,
    E_DMD_T2_FW_VER_1,
    E_DMD_T2_FW_VER_2,


    E_DMD_T2_ZIF_EN = 0x20,
    E_DMD_T2_RF_AGC_EN,
    E_DMD_T2_HUM_DET_EN,
    E_DMD_T2_DCR_EN,
    E_DMD_T2_IQB_EN,
    E_DMD_T2_IIS_EN,
    E_DMD_T2_CCI_EN,
    E_DMD_T2_LOW_PWR_DET_EN,
    E_DMD_T2_ACI_DET_EN,
    E_DMD_T2_TD_MOTION_EN,
    E_DMD_T2_FD_MOTION_EN,


    E_DMD_T2_BW = 0x40,
    E_DMD_T2_FC_L = 0x41,
    E_DMD_T2_FC_H = 0x42,
    E_DMD_T2_FS_L,
    E_DMD_T2_FS_H,
    E_DMD_T2_ZIF,
    E_DMD_T2_GI,
    E_DMD_T2_ACI_DET_TYPE,
    E_DMD_T2_AGC_REF,
    E_DMD_T2_RSSI_REF,
    E_DMD_T2_SNR_TIME_L,
    E_DMD_T2_SNR_TIME_H,
    E_DMD_T2_BER_CMP_TIME_L,
    E_DMD_T2_BER_CMP_TIME_H,
    E_DMD_T2_SFO_CFO_NUM,
    E_DMD_T2_CCI,
    E_DMD_T2_ACI_DET_TH_L,
    E_DMD_T2_ACI_DET_TH_H,
    E_DMD_T2_TS_SERIAL = 0x52,
    E_DMD_T2_TS_CLK_RATE = 0x53,
    E_DMD_T2_TS_OUT_INV = 0x54,
    E_DMD_T2_TS_DATA_SWAP = 0x55,
    E_DMD_T2_TDP_CCI_KP,
    E_DMD_T2_CCI_FSWEEP,
    E_DMD_T2_TS_ERR_POL,
    E_DMD_T2_IF_AGC_INV_PWM_EN,
    E_DMD_T2_CCI_TYPE,
    E_DMD_T2_LITE,

    E_DMD_T2_TOTAL_CFO_0 = 0x85,
    E_DMD_T2_TOTAL_CFO_1,


    E_T2EQ_START_ADDR_0 = 0x90,
    E_T2EQ_START_ADDR_1,
    E_T2EQ_START_ADDR_2,
    E_T2EQ_START_ADDR_3,


    E_T2TDI_START_ADDR_0,
    E_T2TDI_START_ADDR_1,
    E_T2TDI_START_ADDR_2,
    E_T2TDI_START_ADDR_3,


    E_T2DJB_START_ADDR_0,
    E_T2DJB_START_ADDR_1,
    E_T2DJB_START_ADDR_2,
    E_T2DJB_START_ADDR_3,


    E_T2FW_START_ADDR_0,
    E_T2FW_START_ADDR_1,
    E_T2FW_START_ADDR_2,
    E_T2FW_START_ADDR_3,


    E_DMD_T2_DVBT2_LOCK_HIS = 0xF0,
    E_DMD_T2_FEF_DET_IND,
    E_DMD_T2_MPLP_NO_COMMON_IND,
    E_DMD_T2_SNR_L,
    E_DMD_T2_SNR_H,
    E_DMD_T2_DOPPLER_DET_FLAG,
    E_DMD_T2_DOPPLER_DET_TH_L,
    E_DMD_T2_DOPPLER_DET_TH_H,


    E_DMD_T2_PLP_ID_ARR = 0x100,
    E_DMD_T2_L1_FLAG = 0x120,
    E_DMD_T2_PLP_ID,
    E_DMD_T2_GROUP_ID,


    E_DMD_T2_TS_DATA_RATE_0 = 0x130,
    E_DMD_T2_TS_DATA_RATE_1 = 0x131,
    E_DMD_T2_TS_DATA_RATE_2 = 0x132,
    E_DMD_T2_TS_DATA_RATE_3 = 0x133,
    E_DMD_T2_TS_DATA_RATE_CHANGE_IND = 0x134,
    E_DMD_T2_TS_DIV_172 = 0x135,
    E_DMD_T2_TS_DIV_288 = 0x136,
    E_DMD_T2_TS_DIV_432 = 0x137,
    E_DMD_T2_PARAM_NUM,
} DVBT2_PARAM;

typedef enum
{
    _T2_QPSK = 0x0,
    _T2_16QAM = 0x1,
    _T2_64QAM = 0x2,
    _T2_256QAM = 0x3,
    _T2_QAM_UNKNOWN = 0xFF,
} DMD_T2_CONSTEL;

typedef enum
{
    _T2_CR1Y2 = 0x0,
    _T2_CR3Y5 = 0x1,
    _T2_CR2Y3 = 0x2,
    _T2_CR3Y4 = 0x3,
    _T2_CR4Y5 = 0x4,
    _T2_CR5Y6 = 0x5,
    _T2_CR_UNKNOWN = 0xFF,
} DMD_T2_CODERATE;

typedef struct
{
    DMD_T2_CONSTEL constel;
    DMD_T2_CODERATE code_rate;
    float p_ref;
}DMD_T2_SSI_DBM_NORDIGP1;

typedef struct
{
    DMD_T2_CONSTEL constel;
    DMD_T2_CODERATE code_rate;
    float cn_ref;
}DMD_T2_SQI_CN_NORDIGP1;



typedef enum
{
    E_DMD_DVBT2_INT_UNKNOWN=0,
    E_DMD_DVBT2_INT_LOCK,
    E_DMD_DVBT2_INT_UNLOCK
} DMD_DVBT2_INT_TYPE;

#ifdef UFO_DEMOD_DVBT2_SUPPORT_DMD_INT
typedef void (*fpIntCallBack)(MS_U8 u8arg);
#endif



typedef struct
{

    MS_U8 u8SarChannel;
    DMD_RFAGC_SSI *pTuner_RfagcSsi;
    MS_U16 u16Tuner_RfagcSsi_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_LoRef;
    MS_U16 u16Tuner_IfagcSsi_LoRef_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_HiRef;
    MS_U16 u16Tuner_IfagcSsi_HiRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_LoRef;
    MS_U16 u16Tuner_IfagcErr_LoRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_HiRef;
    MS_U16 u16Tuner_IfagcErr_HiRef_Size;
    DMD_T2_SQI_CN_NORDIGP1 *pSqiCnNordigP1;
    MS_U16 u16SqiCnNordigP1_Size;


    MS_U8 *u8DMD_DVBT2_DSPRegInitExt;
    MS_U8 u8DMD_DVBT2_DSPRegInitSize;
    MS_U8 *u8DMD_DVBT2_InitExt;
    MS_U32 u32EqStartAddr;
    MS_U32 u32TdiStartAddr;
    MS_U32 u32DjbStartAddr;
    MS_U32 u32FwStartAddr;
} DMD_DVBT2_InitData;

typedef enum
{
    E_DMD_DVBT2_FAIL=0,
    E_DMD_DVBT2_OK=1
} DMD_DVBT2_Result;


typedef enum
{
    E_DMD_DVBT2_MODULATION_INFO,
    E_DMD_DVBT2_DEMOD_INFO,
    E_DMD_DVBT2_LOCK_INFO,
    E_DMD_DVBT2_PRESFO_INFO,
    E_DMD_DVBT2_LOCK_TIME_INFO,
    E_DMD_DVBT2_BER_INFO,
    E_DMD_DVBT2_AGC_INFO,
} DMD_DVBT2_INFO_TYPE;

typedef struct
{
    MS_U16 u16Version;
    MS_U8 u16DemodState;
 float SfoValue;
 float TotalCfo;
    MS_U16 u16ChannelLength;
 MS_U8 u8Fft;
 MS_U8 u8Constel;
 MS_U8 u8Gi;
 MS_U8 u8HpCr;
 MS_U8 u8LpCr;
 MS_U8 u8Hiearchy;
 MS_U8 u8Fd;
 MS_U8 u8ChLen;
 MS_U8 u8SnrSel;
 MS_U8 u8PertoneNum;
 MS_U8 u8DigAci;
 MS_U8 u8FlagCi;
 MS_U8 u8TdCoef;
} DMD_DVBT2_Info;
# 443 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2.h"
typedef enum
{
    T2_MODUL_MODE,
    T2_FFT_VALUE,
    T2_GUARD_INTERVAL,
    T2_CODE_RATE,
    T2_PREAMBLE,
    T2_S1_SIGNALLING,
    T2_PILOT_PATTERN,
    T2_BW_EXT,
    T2_PAPR_REDUCTION,
    T2_OFDM_SYMBOLS_PER_FRAME,
    T2_PLP_ROTATION,
    T2_PLP_FEC_TYPE,
    T2_NUM_PLP,
 T2_PLP_TYPE,
 T2_PLP_TIME_IL_TYPE,
 T2_PLP_TIME_IL_LENGTH,
 T2_DAT_ISSY,
 T2_PLP_MODE,
 T2_L1_MODULATION,
 T2_NUM_T2_FRAMES,
 T2_PLP_NUM_BLOCKS_MAX,
 T2_FEF_ENABLE,
    T2_PARAM_MAX_NUM,
} DMD_DVBT2_SIGNAL_INFO;
# 479 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_Init(DMD_DVBT2_InitData *pDMD_DVBT2_InitData, MS_U32 u32InitDataLen);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_Exit(void);
# 499 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT2.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_SetDbgLevel(DMD_T2_DbgLv u8DbgLevel);




extern DLL_PUBLIC DMD_DVBT2_Info* MDrv_DMD_DVBT2_GetInfo(DMD_DVBT2_INFO_TYPE eInfoType);




extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetLibVer(const MSIF_Version **ppVersion);





extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_SetReg(MS_U16 u16Addr, MS_U8 u8Data);




extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetFWVer(MS_U16 *ver);




extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_SetSerialControl(MS_BOOL bEnable);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_SetReset(void);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_SetConfig(DMD_DVBT2_RF_CHANNEL_BANDWIDTH BW, MS_BOOL bSerialTS, MS_U8 u8PlpID);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_SetActive(MS_BOOL bEnable);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetLock(DMD_DVBT2_GETLOCK_TYPE eType, DMD_T2_LOCK_STATUS *eLockStatus);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetSignalStrength(MS_U16 *u16Strength);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetSignalStrengthWithRFPower(MS_U16 *u16Strength, float fRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetSignalQuality(MS_U16 *u16Quality);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetSignalQualityWithRFPower(MS_U16 *u16Quality, float fRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetSNR(float *fSNR);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetPostLdpcBer(float *ber);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetPreLdpcBer(float *ber);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetPacketErr(MS_U16 *pktErr);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetL1Info(MS_U16 *u16Info, DMD_DVBT2_SIGNAL_INFO eSignalType);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetFreqOffset(float *pFreqOff);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_NORDIG_SSI_Table_Write(DMD_T2_CONSTEL constel, DMD_T2_CODERATE code_rate, float write_value);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_NORDIG_SSI_Table_Read(DMD_T2_CONSTEL constel, DMD_T2_CODERATE code_rate, float *read_value);

extern DLL_PUBLIC MS_U32 MDrv_DMD_DVBT2_SetPowerState(EN_POWER_MODE u16PowerState);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetPlpBitMap(MS_U8* u8PlpBitMap);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_GetPlpGroupID(MS_U8 u8PlpID, MS_U8* u8GroupID);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBT2_SetPlpID(MS_U8 u8PlpID, MS_U8 u8GroupID);

#ifdef UFO_DEMOD_DVBT2_SUPPORT_DMD_INT
MS_BOOL MDrv_DMD_DVBT2_Reg_INT_CB(fpIntCallBack fpCBReg);
#endif

#ifdef __cplusplus
}
#endif


#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiLD_v2.h"
#ifndef _API_XC_LD_V2_H_
#define _API_XC_LD_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"


typedef enum
{
    E_LD_POOL_ID_INTERNAL = 0,
    E_LD_POOL_ID_NUM,
    E_LD_POOL_ID_MAX = E_LD_POOL_ID_NUM,
} E_LD_POOL_ID;


typedef enum
{
    E_LD_CMD_INIT,



    E_LD_CMD_SETDBGLEVEL,
    E_LD_CMD_NUM,
    E_LD_CMD_MAX = E_LD_CMD_NUM,
} E_LD_IOCTL_CMDS;



typedef struct _stLD_SetDbgLevel
{
    MS_U16 u16DbgSwitch;
    MS_U16 u16Return;
} stLD_SetDbgLevel, *pstLD_SetDbgLevel;

typedef struct _stLD_CommInit
{
    MS_U16 u16Return;
} stLD_CommInit, *pstLD_CommInit;

typedef struct _stLD_Init_Parameter
{
    pstLD_Init_Parameters pLD_InitData;
    MS_U16 u16DataLen;
    MS_U16 u16Return;
} stLD_Init, *pstLD_Init;

#ifdef __cplusplus
}
#endif

#endif
# 136 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
#ifndef _DRV_TEMP_H_
#define _DRV_TEMP_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "UFO.h"



#define MSIF_PWM_LIB_CODE {'P','W','M','_'}
#define MSIF_PWM_LIBVER {'0','1'}
#define MSIF_PWM_BUILDNUM {'0','6'}
#define MSIF_PWM_CHANGELIST {'0','0','3','4','3','8','2','1'}
#define MSIF_PWM_OS '0'

#define PWM_DRV_VERSION \
            MSIF_TAG, \
            MSIF_CLASS, \
            MSIF_CUS, \
            MSIF_MOD, \
            MSIF_CHIP, \
            MSIF_CPU, \
            MSIF_PWM_LIB_CODE, \
            MSIF_PWM_LIBVER, \
            MSIF_PWM_BUILDNUM, \
            MSIF_PWM_CHANGELIST, \
            MSIF_OS

#define PWM_DIV (4)

typedef enum _PWM_DbgLv
{
    E_PWM_DBGLV_NONE,
    E_PWM_DBGLV_ERR_ONLY,
    E_PWM_DBGLV_INFO,
    E_PWM_DBGLV_ALL
}PWM_DbgLv;

typedef enum _PWM_ChNum
{
    E_PWM_CH0,
    E_PWM_CH1,
    E_PWM_CH2,
    E_PWM_CH3,
    E_PWM_CH4,
    E_PWM_CH5,
    E_PWM_CH6,
    E_PWM_CH7,
    E_PWM_CH8,
    E_PWM_CH9
}PWM_ChNum;

typedef enum _PWM_Property
{
    E_PWM_GetPeriod,
    E_PWM_GetDutyCycle,
    E_PWM_GetShift,
    E_PWM_GetDiv,
    E_PWM_GetPolarity,
    E_PWM_GetVdben,
    E_PWM_GetRsten,
    E_PWM_GetDben,
    E_PWM_GetOen
}PWM_Property;

typedef enum _PWM_CntMode
{
    E_PWM_Normal = 0x00,
    E_PWM_01Mode = 0x10,
    E_PWM_10Mode = 0x11
}PWM_CntMode;

typedef enum _PWM_Result
{
    E_PWM_OK,
    E_PWM_FAIL
} PWM_Result;

typedef struct _PWM_Info
{
    MS_U8 u8ChNum;
    MS_U32 u32IOMap;
    MS_U32 mck;
}PWM_Info;


typedef struct _PWM_Arg
{
    MS_U16 index;
    MS_U8 div;
    MS_U16 period;
    MS_U16 duty;
    MS_BOOL polarity;
    MS_BOOL vdben;
    MS_BOOL rsten;
    MS_BOOL dben;
} PWM_Arg;

typedef struct _PWM_DrvStatus
{
    MS_BOOL PWM0;
    MS_BOOL PWM1;
    MS_BOOL PWM2;
    MS_BOOL PWM3;
    MS_BOOL PWM4;
    MS_BOOL PWM5;
    MS_BOOL PWM6;
    MS_BOOL PWM7;
    MS_BOOL PWM8;
} PWM_DrvStatus;

typedef struct _PWM_3D_Arg
{
 MS_U32 Shift;
 MS_U32 Duty;
} PWM_3D_Arg;

typedef enum _N_LR_SYNC_SEL
{
    E_VSYNC = 0,
    E_LR_RISING = 1,
    E_LR_FALLING = 2,
    E_LR_RISING_FALLING = 3
} N_LR_SYNC_SEL;


typedef enum _PM_PWM_ChNum
{
    E_PM_PWM_CH0,
    E_PM_PWM_CH1,
    E_PM_PWM_CH2,
}PM_PWM_ChNum;

typedef enum _PM_PWM_PAD_CFG
{
    PAD_PM_VID0,
    PAD_PM_GPIO_1,
    PAD_PM_VID1,
    PAD_PM_GPIO_3,
    PAD_GPIO_2,
    PAD_GPIO_4,
}PM_PWM_PAD_CFG;

#define NON_INVERSE 0
#define INVERSE 1




#include "drvPWM_v2.h"
#include "MsDevice.h"
# 301 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
#if defined(UFO_PUBLIC_HEADER_500_3)
void MDrv_PM_PWM_Enable(PM_PWM_ChNum index, PM_PWM_PAD_CFG Pad_Sel, MS_BOOL b_en);
#else
void MDrv_PM_PWM_Enable(void);
#endif
# 314 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
#if defined(UFO_PUBLIC_HEADER_500_3)
void MDrv_PM_PWM_Period(PM_PWM_ChNum index,MS_U16 u16PeriodPWM);
#else
void MDrv_PM_PWM_Period(MS_U16 u16PeriodPWM);
#endif
# 327 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
#if defined(UFO_PUBLIC_HEADER_500_3)
void MDrv_PM_PWM_DutyCycle(PM_PWM_ChNum index,MS_U16 u16DutyPWM);
#else
void MDrv_PM_PWM_DutyCycle(MS_U16 u16DutyPWM);
#endif
# 340 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
#if defined(UFO_PUBLIC_HEADER_500_3)
void MDrv_PM_PWM_Div(PM_PWM_ChNum index,MS_U8 u8DivPWM);
#else
void MDrv_PM_PWM_Div(MS_U8 u8DivPWM);
#endif
# 353 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
#if defined(UFO_PUBLIC_HEADER_500_3)
void MDrv_PM_PWM_Polarity(PM_PWM_ChNum index,MS_BOOL bPolPWM);
#else
void MDrv_PM_PWM_Polarity(MS_BOOL bPolPWM);
#endif
# 366 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
#if defined(UFO_PUBLIC_HEADER_500_3)
void MDrv_PM_PWM_Dben(PM_PWM_ChNum index,MS_BOOL bdbenPWM);
#else
void MDrv_PM_PWM_Dben(MS_BOOL bDbenPWM);
#endif
# 379 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
MS_U16 MDrv_PWM_SetPowerState(EN_POWER_MODE u16PowerState);
# 388 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_GetLibVer(const MSIF_Version **ppVersion);
# 397 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_GetStatus(PWM_DrvStatus *pStatus);
# 406 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_Init(PWM_DbgLv eLevel);
# 415 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_Oen(PWM_ChNum u8IndexPWM, MS_BOOL bOenPWM);
# 424 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_Period(PWM_ChNum u8IndexPWM, MS_U32 u32PeriodPWM);






PWM_Result MDrv_PWM_GetProperty(PWM_Property eProperty, PWM_ChNum u8IndexPWM, MS_U32 *u32PWMVar);
# 440 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_DutyCycle(PWM_ChNum u8IndexPWM, MS_U32 u32DutyPWM);







PWM_Result MDrv_PWM_UnitDiv(MS_U16 u16UnitDivPWM);






void MDrv_PWM_Div(PWM_ChNum u8IndexPWM, MS_U16 u16DivPWM);





void MDrv_PWM_Polarity(PWM_ChNum u8IndexPWM, MS_BOOL bPolPWM);






void MDrv_PWM_Vdben(PWM_ChNum u8IndexPWM, MS_BOOL bVdbenPWM);





void MDrv_PWM_ResetEn(PWM_ChNum u8IndexPWM, MS_BOOL bRstPWM);






void MDrv_PWM_Dben(PWM_ChNum u8IndexPWM, MS_BOOL bDbenPWM);
# 490 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
void MDrv_PWM_IMPULSE_EN(PWM_ChNum index, MS_BOOL bdbenPWM);
# 499 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
void MDrv_PWM_ODDEVEN_SYNC(PWM_ChNum index, MS_BOOL bdbenPWM);






void MDrv_PWM_RstMux(PWM_ChNum u8IndexPWM, MS_BOOL bMuxPWM);






void MDrv_PWM_RstCnt(PWM_ChNum u8IndexPWM, MS_U8 u8RstCntPWM);






void MDrv_PWM_BypassUnit(PWM_ChNum u8IndexPWM, MS_BOOL bBypassPWM);
# 532 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM01_CntMode(PWM_CntMode u8CntModePWM);
# 544 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM23_CntMode(PWM_CntMode u8CntModePWM);
# 556 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM67_CntMode(PWM_CntMode u8CntModePWM);
# 565 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_Shift(PWM_ChNum u8IndexPWM, MS_U32 u32DutyPWM);
# 574 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
void MDrv_PWM_Nvsync(PWM_ChNum u8IndexPWM, MS_BOOL bNvsPWM);
# 583 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
void MDrv_PWM_Align(PWM_ChNum u8IndexPWM, MS_BOOL bAliPWM);
# 592 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
MS_BOOL MDrv_PWM_Set3DMode(PWM_ChNum u8IndexPWM, PWM_3D_Arg *pArraySeting, MS_U8 u8ArraySize);







PWM_Result MDrv_PWM_SetDbgLevel(PWM_DbgLv eLevel);
# 609 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWM.h"
PWM_Result MDrv_PWM_INV_3D_Flag(MS_BOOL bInvPWM);

void MDrv_PWM_3D_LR_Sync(PWM_ChNum u8IndexPWM, MS_BOOL bNvsPWM, N_LR_SYNC_SEL LrSyncSel, MS_U8 u8RstCnt);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvXC_IOPort.h"
#ifndef _IOPORT_H_
#define _IOPORT_H_ 
# 115 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvXC_IOPort.h"
typedef enum
{
    INPUT_PORT_NONE_PORT = 0,

    INPUT_PORT_ANALOG0 = 1,
    INPUT_PORT_ANALOG1,
    INPUT_PORT_ANALOG2,
    INPUT_PORT_ANALOG3,
    INPUT_PORT_ANALOG4,



    INPUT_PORT_ANALOG0_SYNC = 10,
    INPUT_PORT_ANALOG1_SYNC,
    INPUT_PORT_ANALOG2_SYNC,
    INPUT_PORT_ANALOG3_SYNC,
    INPUT_PORT_ANALOG4_SYNC,



    INPUT_PORT_YMUX_CVBS0 = 30,
    INPUT_PORT_YMUX_CVBS1,
    INPUT_PORT_YMUX_CVBS2,
    INPUT_PORT_YMUX_CVBS3,
    INPUT_PORT_YMUX_CVBS4,
    INPUT_PORT_YMUX_CVBS5,
    INPUT_PORT_YMUX_CVBS6,
    INPUT_PORT_YMUX_CVBS7,
    INPUT_PORT_YMUX_G0,
    INPUT_PORT_YMUX_G1,
    INPUT_PORT_YMUX_G2,



    INPUT_PORT_CMUX_CVBS0 = 50,
    INPUT_PORT_CMUX_CVBS1,
    INPUT_PORT_CMUX_CVBS2,
    INPUT_PORT_CMUX_CVBS3,
    INPUT_PORT_CMUX_CVBS4,
    INPUT_PORT_CMUX_CVBS5,
    INPUT_PORT_CMUX_CVBS6,
    INPUT_PORT_CMUX_CVBS7,
    INPUT_PORT_CMUX_R0,
    INPUT_PORT_CMUX_R1,
    INPUT_PORT_CMUX_R2,



    INPUT_PORT_DVI0 = 80,
    INPUT_PORT_DVI1,
    INPUT_PORT_DVI2,
    INPUT_PORT_DVI3,



    INPUT_PORT_MVOP = 100,
    INPUT_PORT_MVOP2,
    INPUT_PORT_MVOP3,

    INPUT_PORT_SCALER_OP = 110,

} E_MUX_INPUTPORT;


typedef enum
{
    E_INPUT_NOT_SUPPORT_MHL = 0x0,
    E_INPUT_SUPPORT_MHL_PORT_DVI0 = 0x1,
    E_INPUT_SUPPORT_MHL_PORT_DVI1 = 0x2,
    E_INPUT_SUPPORT_MHL_PORT_DVI2 = 0x4,
    E_INPUT_SUPPORT_MHL_PORT_DVI3 = 0x8,
    E_INPUT_ALL_SUPPORT_MHL = 0xF,

}EN_MUX_INPUTPORT_MHL_INFO;


typedef enum
{
    OUTPUT_PORT_NONE_PORT = 0,

    OUTPUT_PORT_SCALER_MAIN_WINDOW = 1,
    OUTPUT_PORT_SCALER2_MAIN_WINDOW = 2,



    OUTPUT_PORT_SCALER_SUB_WINDOW1 = 10,
    OUTPUT_PORT_SCALER2_SUB_WINDOW = 11,



    OUTPUT_PORT_CVBS1 = 20,
    OUTPUT_PORT_CVBS2,



    OUTPUT_PORT_YPBPR1 = 40,
    OUTPUT_PORT_YPBPR2,



    OUTPUT_PORT_HDMI1 = 60,
    OUTPUT_PORT_HDMI2,



    OUTPUT_PORT_OFFLINE_DETECT = 80,


    OUTPUT_PORT_DWIN = 100,

} E_MUX_OUTPUTPORT;

#define IsAnalogPort(x) ( (x) >= INPUT_PORT_ANALOG0 && (x) <= INPUT_PORT_ANALOG4 )
#define IsDVIPort(x) ( (x) >= INPUT_PORT_DVI0 && (x) <= INPUT_PORT_DVI3 )
#define IsYCVBSPort(x) ( (x) >= INPUT_PORT_YMUX_CVBS0 && (x) <= INPUT_PORT_YMUX_CVBS7 )
#define IsCCVBSPort(x) ( (x) >= INPUT_PORT_CMUX_CVBS0 && (x) <= INPUT_PORT_CMUX_CVBS7 )
#define IsCVBSPort(x) ( IsYCVBSPort(x) || IsCCVBSPort(x) )





#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC.h"
#ifndef _API_VDEC_H_
#define _API_VDEC_H_ 

#include "MsDevice.h"
#include "MsTypes.h"
#ifdef __cplusplus
extern "C"
{
#endif



#define MSIF_VDEC_LIB_CODE {'V','D','E','C'}
#define MSIF_VDEC_LIBVER {'0','E'}
#define MSIF_VDEC_BUILDNUM {'0','2'}
#define MSIF_VDEC_CHANGELIST {'0','0','6','8','9','1','8','8'}


#define VDEC_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_VDEC_LIB_CODE, \
    MSIF_VDEC_LIBVER, \
    MSIF_VDEC_BUILDNUM, \
    MSIF_VDEC_CHANGELIST, \
    MSIF_OS

#define VDEC_DEFAULT_DBG_MSG_LEVEL E_VDEC_DBG_LEVEL_DBG
#define VDEC_RVD_BROKEN_BY_US 0x80000000
#define VDEC_MVD_PIC_START_FLAG 0x40000000
#define VDEC_BIT(_bit_) (1 << (_bit_))
#ifndef VDEC_CAP_SYSTEM_PREGET_FB_MEM_USAGE_SIZE
#define VDEC_CAP_SYSTEM_PREGET_FB_MEM_USAGE_SIZE 
#endif




#define VDEC_FPA_TYPE_CHECKERBOARD_INTERLEAVING 0
#define VDEC_FPA_TYPE_COLUMN_INTERLEAVEING 1
#define VDEC_FPA_TYPE_ROW_INTERLEAVEING 2
#define VDEC_FPA_TYPE_SIDE_BY_SIDE_PACKING 3
#define VDEC_FPA_TYPE_TOP_BOTTOM_PACKING 4
#define VDEC_FPA_TYPE_TEMPORAL_INTERLEAVING_FRM 5


typedef enum
{

    E_VDEC_EVENT_OFF = 0x00,

    E_VDEC_EVENT_DISP_ONE = VDEC_BIT(0),

    E_VDEC_EVENT_DISP_REPEAT = VDEC_BIT(1),

    E_VDEC_EVENT_DISP_WITH_CC = VDEC_BIT(2),

    E_VDEC_EVENT_DEC_ONE = VDEC_BIT(3),

    E_VDEC_EVENT_DEC_I = VDEC_BIT(4),

    E_VDEC_EVENT_DEC_ERR = VDEC_BIT(5),

    E_VDEC_EVENT_DISP_INFO_CHG = VDEC_BIT(6),

    E_VDEC_EVENT_USER_DATA_FOUND = VDEC_BIT(7),

    E_VDEC_EVENT_DISP_INFO_RDY = VDEC_BIT(8),

    E_VDEC_EVENT_FIRST_FRAME = VDEC_BIT(9),

    E_VDEC_EVENT_PIC_FOUND = VDEC_BIT(10),

    E_VDEC_EVENT_VIDEO_UNMUTE = VDEC_BIT(11),

    E_VDEC_EVENT_SEQ_HDR_FOUND = VDEC_BIT(12),

    E_VDEC_EVENT_AFD_FOUND = VDEC_BIT(13),

    E_VDEC_EVENT_ES_DATA_ERR = VDEC_BIT(14),

    E_VDEC_EVENT_XC_LOW_DEALY = VDEC_BIT(16)
} VDEC_EventFlag;


typedef enum
{
    E_VDEC_CB_MAIN = 0,
    E_VDEC_CB_SUB,
} VDEC_CB_TYPE;


typedef enum
{

    E_VDEC_CODEC_TYPE_NONE = 0,

    E_VDEC_CODEC_TYPE_MPEG2,

    E_VDEC_CODEC_TYPE_H263,

    E_VDEC_CODEC_TYPE_MPEG4,

    E_VDEC_CODEC_TYPE_DIVX311,

    E_VDEC_CODEC_TYPE_DIVX412,

    E_VDEC_CODEC_TYPE_FLV,

    E_VDEC_CODEC_TYPE_VC1_ADV,

    E_VDEC_CODEC_TYPE_VC1_MAIN,

    E_VDEC_CODEC_TYPE_RV8,

    E_VDEC_CODEC_TYPE_RV9,

    E_VDEC_CODEC_TYPE_H264,

    E_VDEC_CODEC_TYPE_AVS,

    E_VDEC_CODEC_TYPE_MJPEG,

    E_VDEC_CODEC_TYPE_MVC,

    E_VDEC_CODEC_TYPE_VP8,

    E_VDEC_CODEC_TYPE_HEVC,

    E_VDEC_CODEC_TYPE_VP9,

    E_VDEC_CODEC_TYPE_HEVC_DV
} VDEC_CodecType;


typedef enum
{

    E_VDEC_SRC_MODE_DTV = 0,

    E_VDEC_SRC_MODE_TS_FILE,

    E_VDEC_SRC_MODE_FILE,

    E_VDEC_SRC_MODE_TS_FILE_DUAL_ES,

    E_VDEC_SRC_MODE_FILE_DUAL_ES,
} VDEC_SrcMode;


typedef enum
{

    E_VDEC_FAIL = 0,

    E_VDEC_OK,

    E_VDEC_RET_INVALID_PARAM,

    E_VDEC_RET_ILLEGAL_ACCESS,

    E_VDEC_RET_HARDWARE_BREAKDOWN,

    E_VDEC_RET_UNSUPPORTED,

    E_VDEC_RET_TIMEOUT,

    E_VDEC_RET_NOT_READY,

    E_VDEC_RET_NOT_INIT,

    E_VDEC_RET_NOT_EXIT,

    E_VDEC_RET_NOT_RUNNING,
} VDEC_Result;


typedef enum
{

    E_VDEC_DISP_ACTION_DISPLAY = 1,

    E_VDEC_DISP_ACTION_RELEASE,
} VDEC_DispCmdAction;


typedef enum
{

    E_VDEC_FREEZE_AT_CUR_PIC = 1,

    E_VDEC_FREEZE_AT_LAST_PIC,
} VDEC_FreezePicSelect;


typedef enum
{
    E_VDEC_ERR_CODE_BASE = 0x01000000,
    E_VDEC_ERR_CODE_NOT_SUPPORT,
    E_VDEC_ERR_CODE_ILLEGAL_ACCESS,
    E_VDEC_ERR_CODE_FRMRATE_NOT_SUPPORT,
    E_VDEC_ERR_CODE_DIVX_PLUS_UNSUPPORTED,
    E_VDEC_ERR_CODE_EXCEED_HW_CAP,
    E_VDEC_ERR_CODE_CODEC_COMPARE_CASE1,
    E_VDEC_ERR_CODE_CODEC_COMPARE_CASE2,

    E_VDEC_MVD_ERR_CODE_BASE = 0x02000000,
        E_VDEC_MVD_ERR_CODE_SHAPE ,
        E_VDEC_MVD_ERR_CODE_USED_SPRITE ,
        E_VDEC_MVD_ERR_CODE_NOT_8_BIT ,
        E_VDEC_MVD_ERR_CODE_NERPRED_ENABLE ,
        E_VDEC_MVD_ERR_CODE_REDUCED_RES_ENABLE ,
        E_VDEC_MVD_ERR_CODE_SCALABILITY ,
        E_VDEC_MVD_ERR_CODE_OTHER ,
        E_VDEC_MVD_ERR_CODE_H263_ERROR ,
        E_VDEC_MVD_ERR_CODE_RES_NOT_SUPPORT ,
        E_VDEC_MVD_ERR_CODE_MPEG4_NOT_SUPPORT ,
        E_VDEC_MVD_ERR_CODE_PROFILE_NOT_SUPPORT ,
        E_VDEC_MVD_ERR_CODE_RCV_ERROR_OCCUR ,
        E_VDEC_MVD_ERR_CODE_VC1_NOT_SUPPORT ,
        E_VDEC_MVD_ERR_CODE_UNKNOW_CODEC_NOT_SUPPORT ,
        E_VDEC_MVD_ERR_CODE_SLQ_TBL_NOT_SUPPORT ,
        E_VDEC_MVD_ERR_CODE_FRAME_BUF_NOT_ENOUGH ,

    E_VDEC_HVD_ERR_CODE_BASE = 0x03000000,
        E_VDEC_HVD_ERR_CODE_GENERAL_BASE = (0x0000|E_VDEC_HVD_ERR_CODE_BASE),
        E_VDEC_HVD_ERR_CODE_OUT_OF_SPEC ,
        E_VDEC_HVD_ERR_CODE_UNKNOW_ERR,
        E_VDEC_HVD_ERR_CODE_HW_BREAK_DOWN,
        E_VDEC_HVD_ERR_CODE_HW_DEC_TIMEOUT,
        E_VDEC_HVD_ERR_CODE_OUT_OF_MEMORY,
        E_VDEC_HVD_ERR_CODE_UNKNOWN_CODEC,

        E_VDEC_HVD_ERR_CODE_AVC_BASE = (0x1000|E_VDEC_HVD_ERR_CODE_BASE),
        E_VDEC_HVD_ERR_CODE_AVC_SPS_BROKEN,
        E_VDEC_HVD_ERR_CODE_AVC_SPS_NOT_IN_SPEC,
        E_VDEC_HVD_ERR_CODE_AVC_SPS_NOT_ENOUGH_FRM,
        E_VDEC_HVD_ERR_CODE_AVC_PPS_BROKEN,
        E_VDEC_HVD_ERR_CODE_AVC_REF_LIST,
        E_VDEC_HVD_ERR_CODE_AVC_NO_REF,
        E_VDEC_HVD_ERR_CODE_AVC_RES,

        E_VDEC_HVD_ERR_CODE_AVS_BASE = (0x2000|E_VDEC_HVD_ERR_CODE_BASE),
        E_VDEC_HVD_ERR_CODE_AVS_RES,

        E_VDEC_HVD_ERR_CODE_RM_BASE = (0x3000|E_VDEC_HVD_ERR_CODE_BASE),
        E_VDEC_HVD_ERR_CODE_RM_PACKET_HEADER,
        E_VDEC_HVD_ERR_CODE_RM_FRAME_HEADER,
        E_VDEC_HVD_ERR_CODE_RM_SLICE_HEADER,
        E_VDEC_HVD_ERR_CODE_RM_BYTE_CNT,
        E_VDEC_HVD_ERR_CODE_RM_DISP_TIMEOUT,
        E_VDEC_HVD_ERR_CODE_RM_NO_REF,
        E_VDEC_HVD_ERR_CODE_RM_VLC,
        E_VDEC_HVD_ERR_CODE_RM_SIZE,
        E_VDEC_HVD_ERR_CODE_RM_RES,

    E_VDEC_RVD_ERR_CODE_BASE = 0x04000000,
        E_VDEC_RVD_ERR_CODE_PACKET_HEADER,
        E_VDEC_RVD_ERR_CODE_FRAME_HEADER,
        E_VDEC_RVD_ERR_CODE_SLICE_HEADER,
        E_VDEC_RVD_ERR_CODE_DECODE_TIMEOUT,
        E_VDEC_RVD_ERR_CODE_OUT_OF_MEMORY,
        E_VDEC_RVD_ERR_CODE_BYTE_POS,
        E_VDEC_RVD_ERR_CODE_DISPLAY_TIMEOUT,

    E_VDEC_MJPEG_ERR_CODE_BASE = 0x05000000,
        E_VDEC_HVD_ERR_CODE_MJPEG_RES,
} VDEC_ErrCode;


typedef enum
{

    E_VDEC_FRC_NORMAL = 0,

    E_VDEC_FRC_DISP_TWICE,

    E_VDEC_FRC_3_2_PULLDOWN,

    E_VDEC_FRC_PAL_TO_NTSC,

    E_VDEC_FRC_NTSC_TO_PAL,

    E_VDEC_FRC_MODE_50P_60P,

    E_VDEC_FRC_MODE_60P_50P,
} VDEC_FrcMode;


typedef enum
{

    E_VDEC_TRICK_DEC_ALL = 0,

    E_VDEC_TRICK_DEC_IP,

    E_VDEC_TRICK_DEC_I,
} VDEC_TrickDec;


typedef enum
{

    E_VDEC_SPEED_DEFAULT = 0,

    E_VDEC_SPEED_FAST,

    E_VDEC_SPEED_SLOW,
} VDEC_SpeedType;


typedef enum
{

    E_VDEC_DISP_SPEED_1X = 1,

    E_VDEC_DISP_SPEED_2X = 2,

    E_VDEC_DISP_SPEED_4X = 4,

    E_VDEC_DISP_SPEED_8X = 8,

    E_VDEC_DISP_SPEED_16X = 16,

    E_VDEC_DISP_SPEED_32X = 32,
} VDEC_DispSpeed;


typedef enum
{

    E_VDEC_MJPEG_SCALE_1to1 = 0,

    E_VDEC_MJPEG_SCALE_2to1,

    E_VDEC_MJPEG_SCALE_4to1,

    E_VDEC_MJPEG_SCALE_8to1,
} VDEC_MJpegScaleFactor;


typedef enum
{

    E_VDEC_TIME_STAMP_NONE = 0,

    E_VDEC_TIME_STAMP_PTS,

    E_VDEC_TIME_STAMP_DTS,

    E_VDEC_TIME_STAMP_STS,

    E_VDEC_TIME_STAMP_PTS_MPEG_DIRECTV_SD,

    E_VDEC_TIME_STAMP_DTS_MPEG_DIRECTV_SD,

} VDEC_TimeStampType;


typedef enum
{

    E_VDEC_DBG_LEVEL_NONE = 0,

    E_VDEC_DBG_LEVEL_ERR,

    E_VDEC_DBG_LEVEL_INFO,

    E_VDEC_DBG_LEVEL_DBG,

    E_VDEC_DBG_LEVEL_TRACE,

    E_VDEC_DBG_LEVEL_FW,
} VDEC_DbgLevel;


typedef enum
{
    E_VDEC_FW_SOURCE_NONE,
    E_VDEC_FW_SOURCE_DRAM,
    E_VDEC_FW_SOURCE_FLASH,
}VDEC_FWSourceType;


typedef enum
{
    E_VDEC_CC_NONE = 0x00,
    E_VDEC_CC_608 = 0x01,
    E_VDEC_CC_708 = 0x02,
    E_VDEC_CC_UNPACKED = 0x03,
} VDEC_CCFormat;


typedef enum
{
    E_VDEC_CC_TYPE_NONE = 0,
    E_VDEC_CC_TYPE_NTSC_FIELD1 = 1,
    E_VDEC_CC_TYPE_NTSC_FIELD2 = 2,
    E_VDEC_CC_TYPE_DTVCC = 3,
    E_VDEC_CC_TYPE_NTSC_TWOFIELD = 4,
} VDEC_CCType;

typedef enum
{
    E_VDEC_CC_GET_BUFF_START = 0x1,
    E_VDEC_CC_GET_BUFF_SIZE,
    E_VDEC_CC_GET_708_ENABLE
} VDEC_CCInfoCmd;

typedef enum
{
    E_VDEC_STAGE_STOP = 0,
    E_VDEC_STAGE_INIT,
    E_VDEC_STAGE_PLAY,
    E_VDEC_STAGE_PAUSE,
} VDEC_Stage;


typedef enum
{

    E_VDEC_PATTERN_FLUSH = 0,

    E_VDEC_PATTERN_FILEEND,
}VDEC_PatternType;

typedef enum
{
    E_VDEC_FW_STATUS_FLAG_NONE = 0,
    E_VDEC_FW_STATUS_FLAG_SEEK_TO_I = VDEC_BIT(0),
}VDEC_FW_STATUS_FLAG;

typedef struct
{
    MS_BOOL bInit;
    MS_BOOL bIdle;
    VDEC_Stage eStage;
} VDEC_Status;

typedef struct
{
    MS_U32 u32Tmp;
} VDEC_Info;

typedef enum
{
    E_VDEC_FRM_TYPE_I = 0,
    E_VDEC_FRM_TYPE_P,
    E_VDEC_FRM_TYPE_B,
    E_VDEC_FRM_TYPE_OTHER,
} VDEC_FrameType;

typedef enum
{
    E_VDEC_FIELDTYPE_NONE,
    E_VDEC_FIELDTYPE_TOP,
    E_VDEC_FIELDTYPE_BOTTOM,
    E_VDEC_FIELDTYPE_BOTH,
} VDEC_FieldType;

typedef enum
{
    E_VDEC_PATTERN_BEFORE_FRM = 0,
    E_VDEC_PATTERN_AFTER_FRM,
    E_VDEC_PATTERN_SKIP_DATA,
} VDEC_PatchPattern;

typedef enum
{
    E_VDEC_PIC_STRUCTURE_RSV = 0,
    E_VDEC_PIC_STRUCTURE_TOP,
    E_VDEC_PIC_STRUCTURE_BOT,
    E_VDEC_PIC_STRCUTURE_FRM,
} VDEC_PicStructure;


typedef enum
{
    E_VDEC_CLOCK_SPEED_NONE = 0,
    E_VDEC_CLOCK_SPEED_HIGHEST,
    E_VDEC_CLOCK_SPEED_HIGH,
    E_VDEC_CLOCK_SPEED_MEDIUM,
    E_VDEC_CLOCK_SPEED_LOW,
    E_VDEC_CLOCK_SPEED_LOWEST,
    E_VDEC_CLOCK_SPEED_DEFAULT,
} VDEC_ClockSpeed;


typedef enum
{

    VDEC_USER_CMD_SET_CONTROL_BASE = 0x0000,
    VDEC_USER_CMD_REPEAT_LAST_FIELD,
    VDEC_USER_CMD_AVSYNC_REPEAT_TH,
    VDEC_USER_CMD_DISP_ONE_FIELD,
    VDEC_USER_CMD_FD_MASK_DELAY_COUNT,
    VDEC_USER_CMD_FRC_OUTPUT,
    VDEC_USER_CMD_FRC_DROP_TYPE,
    VDEC_USER_CMD_FAST_DISPLAY,
    VDEC_USER_CMD_IGNORE_ERR_REF,
    VDEC_USER_CMD_FORCE_FOLLOW_DTV_SPEC,
    VDEC_USER_CMD_AVC_MIN_FRM_GAP,
    VDEC_USER_CMD_DISABLE_SEQ_CHG,
    VDEC_USER_CMD_AVC_DISABLE_ANTI_VDEAD,
    VDEC_USER_CMD_DTV_RESET_MVD_PARSER,
    VDEC_USER_CMD_PVR_FLUSH_FRAME_BUFFER,
    VDEC_USER_CMD_SET_DTV_USER_DATA_MODE,
    VDEC_USER_CMD_SET_SINGLE_TASK_MODE,
    VDEC_USER_CMD_FORCE_INTERLACE_MODE,
    VDEC_USER_CMD_RELEASE_FD_MASK,
    VDEC_USER_CMD_SET_DECODE_MODE,
    VDEC_USER_CMD_SHOW_DECODE_ORDER,
    VDEC_USER_CMD_SUPPORT_AVC_TO_MVC,
    VDEC_USER_CMD_3DLR_VIEW_EXCHANGE,
    VDEC_USER_CMD_FORCE_AUTO_MUTE,
    VDEC_USER_CMD_SET_VSIZE_ALIGN,
    VDEC_USER_CMD_AVC_DISP_IGNORE_CROP,
    VDEC_USER_CMD_SET_DISP_FINISH_MODE,
    VDEC_USER_CMD_SET_AVSYNC_MODE,
    VDEC_USER_CMD_SET_CC608_INFO_ENHANCE_MODE,
    VDEC_USER_CMD_PUSH_DISPQ_WITH_REF_NUM,
    VDEC_USER_CMD_SET_IDCT_MODE,
    VDEC_USER_CMD_DROP_ERR_FRAME,
    VDEC_USER_CMD_SHOW_FIRST_FRAME_DIRECT,
    VDEC_USER_CMD_SET_XC_LOW_DELAY_PARA,
    VDEC_USER_CMD_AUTO_EXHAUST_ES_MODE,
    VDEC_USER_CMD_SET_MIN_TSP_DATA_SIZE,
    VDEC_USER_CMD_AVC_SUPPORT_REF_NUM_OVER_MAX_DPB_SIZE,
    VDEC_USER_CMD_FRAMEBUFFER_AUTO_MODE,
#if defined(UFO_PUBLIC_HEADER_700)||defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_300)
    VDEC_USER_CMD_AUTO_DROP_DISPLAY_QUEUE,
    VDEC_USER_CMD_SET_PTS_US_MODE,
    VDEC_USER_CMD_FORCE_PROGRESSIVE_MODE,
    VDEC_USER_CMD_AVC_NEW_SLOW_MOTION,
    VDEC_USER_CMD_USE_CPB_REMOVAL_DEALY,
    VDEC_USER_CMD_RETURN_INVALID_AFD,
    VDEC_USER_CMD_SET_DV_XC_SHM_ADDR,
    VDEC_USER_CMD_SET_ENABLE_HDR,
    VDEC_USER_CMD_DISABLE_PBFRAME_MODE,
    VDEC_USER_CMD_SET_SLOW_SYNC,
    VDEC_USER_CMD_SET_FRAMEBUFF2,
    VDEC_USER_CMD_SET_TRICKPLAY_2X_MODE,
    VDEC_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    VDEC_USER_CMD_DISABLE_ES_FULL_STOP,
    VDEC_USER_CMD_DIRECT_STC_MODE,
#endif
#if defined(UFO_PUBLIC_HEADER_212)
    VDEC_USER_CMD_AUTO_DROP_DISPLAY_QUEUE,
    VDEC_USER_CMD_USE_CPB_REMOVAL_DEALY,
    VDEC_USER_CMD_SET_PTS_US_MODE,
    VDEC_USER_CMD_FORCE_PROGRESSIVE_MODE,
    VDEC_USER_CMD_SET_TRICKPLAY_2X_MODE,
    VDEC_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    VDEC_USER_CMD_DISABLE_ES_FULL_STOP,
    VDEC_USER_CMD_DIRECT_STC_MODE,
    VDEC_USER_CMD_AVC_NEW_SLOW_MOTION,
    VDEC_USER_CMD_RETURN_INVALID_AFD,
    VDEC_USER_CMD_SET_SLOW_SYNC,
    VDEC_USER_CMD_SET_FRAMEBUFF2,
    VDEC_USER_CMD_DISABLE_PBFRAME_MODE,
    VDEC_USER_CMD_SET_DV_XC_SHM_ADDR,
    VDEC_USER_CMD_SET_ENABLE_HDR,
#endif
    VDEC_USER_CMD_SET_BUFFER_INFO,
    VDEC_USER_CMD_HDR10_UPDATE_PERFRAME,
    VDEC_USER_CMD_SET_CODEC_CONFIG,
    VDEC_USER_CMD_SET_VP94K2KCHECK,
    VDEC_USER_CMD_PUSI_CONTROL,


    VDEC_USER_CMD_MVC_SET_CMD_BASE = 0x0800,
    VDEC_USER_CMD_MVC_BBU2_PUSH_PACKET,
    VDEC_USER_CMD_MVC_BBU2_FIRE_DECCMD,


    VDEC_USER_CMD_GET_CONTROL_BASE = 0x1000,
    VDEC_USER_CMD_GET_CHROMA_TYPE,
    VDEC_USER_CMD_GET_REAL_FRAMERATE,
    VDEC_USER_CMD_GET_COLOR_MATRIX,
    VDEC_USER_CMD_GET_DYNSCALE_ENABLED,
    VDEC_USER_CMD_GET_ORI_INTERLACE_MODE,
    VDEC_USER_CMD_GET_FPA_SEI,
    VDEC_USER_CMD_GET_U64PTS,
    VDEC_USER_CMD_GET_FB_USAGE_MEM,
    VDEC_USER_CMD_GET_XC_LOW_DELAY_INT_STATE,
    VDEC_USER_CMD_GET_FLUSH_PATTEN_ENTRY_NUM,
    VDEC_USER_CMD_GET_FW_STATUS_FLAG,
    VDEC_USER_CMD_GET_DS_BUF_MIU_SEL,
#if defined(UFO_PUBLIC_HEADER_700)||defined(UFO_PUBLIC_HEADER_300)
    VDEC_USER_CMD_GET_PVRSEAMLESS_INFO,
    VDEC_USER_CMD_GET_PRE_PAS_U64PTS,
    VDEC_USER_CMD_GET_SEQ_CHANGE_INFO,
    VDEC_USER_CMD_GET_MIN_TSP_DATA_SIZE,
    VDEC_USER_CMD_GET_CLLI_SEI,
    VDEC_USER_CMD_GET_DISP_QUEUE_EMPTY,
    VDEC_USER_CMD_GET_BUFFER_INFO,
    VDEC_USER_CMD_GET_NEXT_DISP_FRAME_QOS_INFO,
    VDEC_USER_CMD_GET_NOT_SUPPORT_INFO,
#endif
#if defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_500_3)
    VDEC_USER_CMD_GET_PRE_PAS_U64PTS,
    VDEC_USER_CMD_GET_SEQ_CHANGE_INFO,
    VDEC_USER_CMD_GET_DISP_QUEUE_EMPTY,
    VDEC_USER_CMD_GET_NOT_SUPPORT_INFO,
    VDEC_USER_CMD_GET_PVRSEAMLESS_INFO,
    VDEC_USER_CMD_GET_MIN_TSP_DATA_SIZE,
    VDEC_USER_CMD_GET_CLLI_SEI,
    VDEC_USER_CMD_GET_BUFFER_INFO,
    VDEC_USER_CMD_GET_NEXT_DISP_FRAME_QOS_INFO,
#endif
#if defined(UFO_PUBLIC_HEADER_212)
    VDEC_USER_CMD_GET_PVRSEAMLESS_INFO,
    VDEC_USER_CMD_GET_PRE_PAS_U64PTS,
    VDEC_USER_CMD_GET_SEQ_CHANGE_INFO,
    VDEC_USER_CMD_GET_MIN_TSP_DATA_SIZE,
    VDEC_USER_CMD_GET_CLLI_SEI,
    VDEC_USER_CMD_GET_DISP_QUEUE_EMPTY,
    VDEC_USER_CMD_GET_BUFFER_INFO,
    VDEC_USER_CMD_GET_NEXT_DISP_FRAME_QOS_INFO,
    VDEC_USER_CMD_GET_NOT_SUPPORT_INFO,
#endif

    VDEC_USER_CMD_MVC_GET_CMD_BASE = 0x1800,
    VDEC_USER_CMD_GET_MVC_SUB_FRAME_DISP_INFO,
    VDEC_USER_CMD_GET_MVC_BBU2_DECQ_VACANCY,
    VDEC_USER_CMD_GET_MVC_ES2_READ_PTR,
    VDEC_USER_CMD_GET_MVC_ES2_WRITE_PTR,
    VDEC_USER_CMD_GET_ES_QUANTITY,
    VDEC_USER_CMD_GET_ES2_QUANTITY,
    VDEC_USER_CMD_GET_MAIN_STREAM_ID,



    VDEC_USER_CMD_SYSTEM_PRESET_CONTROL_BASE = 0x2000,
    VDEC_USER_CMD_SYSTEM_PRESET_VPU_CLOCK,


    VDEC_USER_CMD_SYSTEM_PRESET_HVD_BASE = 0x2100,
    VDEC_USER_CMD_SYSTEM_PRESET_HVD_CLOCK,


    VDEC_USER_CMD_SYSTEM_PRESET_MVD_BASE = 0x2200,
    VDEC_USER_CMD_SYSTEM_PRESET_MVD_CLOCK,
    VDEC_USER_CMD_VPU_SECURITY_MODE,


    VDEC_USER_CMD_PRESET_CONTROL_BASE = 0x2300,
    VDEC_USER_CMD_HVD_ONE_PENDING_BUFFER_MODE,
    VDEC_USER_CMD_MVD_HWBUFFER_REMAPPING_MODE,
    VDEC_USER_CMD_FRAMERATE_HANDLING,

    VDEC_USER_CMD_SET_SHAREMEMORY_BASE,
    VDEC_USER_CMD_HVD_COL_BBU_MODE,
    VDEC_USER_CMD_HVD_IAPGN_BUF_SHARE_BW_MODE,
    VDEC_USER_CMD_DTV_DEBUG_MODE,
    VDEC_USER_CMD_HVD_TS_IN_BBU_MODE,
    VDEC_USER_CMD_AUTO_ARRANGE_FRAMEBUFFER_USAGE,
    VDEC_USER_CMD_THUMBNAIL_MODE,
    VDEC_USER_CMD_FORCE_8BIT_DEC_MODE,
    VDEC_USER_CMD_MFCODEC_MODE,
    VDEC_USER_CMD_VDEC_FEATURE,
    VDEC_USER_CMD_SET_DISPLAY_MODE,
    VDEC_USER_CMD_CAL_FRAMERATE,
    VDEC_USER_CMD_SETPOWERSTATE,



    VDEC_USER_CMD_SYSTEM_PREGET_CONTROL_BASE = 0x4000,
    VDEC_USER_CMD_SYSTEM_PREGET_FB_MEMORY_USAGE_SIZE,

} VDEC_User_Cmd;


typedef enum
{
    VDEC_FW_TYPE_MVD = 0,
    VDEC_FW_TYPE_HVD,
} VDEC_FwType;


typedef enum
{
    VDEC_FB_REDUCTION_NONE = 0,
    VDEC_FB_REDUCTION_1_2,
    VDEC_FB_REDUCTION_1_4
} VDEC_FBReductionType;


typedef enum
{

    VDEC_XC_LOW_DELAY_NONE = 0x00,

    VDEC_XC_DISABLE_BLACK_SCREEN = VDEC_BIT(0),

    VDEC_XC_RELEASE_FORCE_READ_BANK = VDEC_BIT(1),

    VDEC_XC_RELEASE_BOB_MODE = VDEC_BIT(2),
} VDEC_XcLowDelayType;


typedef enum
{

    VDEC_SEQ_CHANGE_FIRST_TIME = VDEC_BIT(0),

    VDEC_SEQ_CHANGE_RESOLUTION = VDEC_BIT(1),

    VDEC_SEQ_CHANGE_PICTURE_TYPE = VDEC_BIT(2),

    VDEC_SEQ_CHANGE_ASPECT_RATIO = VDEC_BIT(3),

    VDEC_SEQ_CHANGE_FRAME_RATE = VDEC_BIT(4),

    VDEC_SEQ_CHANGE_HDR_INFO = VDEC_BIT(5),
} VDEC_SeqChangeInfo;



typedef struct
{

    VDEC_CCFormat eFormat;

    VDEC_CCType eType;

    MS_VIRT u32BufStAdd;

    MS_U32 u32BufSize;
} VDEC_CCCfg;


typedef struct
{

    MS_U16 u16HorSize;

    MS_U16 u16VerSize;

    MS_U32 u32FrameRate;

    MS_U8 u8Interlace;

    MS_U8 u8AFD;

    MS_U16 u16SarWidth;

    MS_U16 u16SarHeight;

    MS_U16 u16CropRight;

    MS_U16 u16CropLeft;

    MS_U16 u16CropBottom;

    MS_U16 u16CropTop;

    MS_U16 u16Pitch;

    MS_U16 u16PTSInterval;

    MS_U8 u8MPEG1;

    MS_U8 u8PlayMode;

    MS_U8 u8FrcMode;

    MS_U8 u8AspectRate;

    MS_BOOL bWithChroma;



    MS_BOOL bColorInXVYCC;

    MS_VIRT u32DynScalingAddr;

    MS_U32 u32DynScalingSize;

    MS_U8 u8DynScalingDepth;

    MS_BOOL bEnableMIUSel;

    MS_U32 u32AspectWidth;

    MS_U32 u32AspectHeight;
} VDEC_DispInfo;


typedef struct
{

    MS_PHY u32FWBinaryAddr;

    MS_U32 u32FWBinarySize;

    MS_PHY u32CodeBufAddr;

    MS_U32 u32CodeBufSize;

    MS_PHY u32FrameBufAddr;

    MS_U32 u32FrameBufSize;

    MS_PHY u32BitstreamBufAddr;

    MS_U32 u32BitstreamBufSize;

    MS_PHY u32DrvProcBufAddr;

    MS_U32 u32DrvProcBufSize;

    MS_PHY u32VlcBinarySrcAddr;

    MS_U32 u32VlcTabBinarySize;

    VDEC_DbgLevel eDbgMsgLevel;

    VDEC_FWSourceType eFWSourceType;
} VDEC_SysCfg;


typedef struct
{

    VDEC_SrcMode eSrcMode;

    VDEC_TimeStampType eTimeStampType;

    VDEC_MJpegScaleFactor eMJpegScaleFactor;

    MS_BOOL bWithoutNalStCode;

    MS_U32 u32FrameRate;
    MS_U32 u32FrameRateBase;

    MS_U16 u16Width[8];

    MS_U16 u16Height[8];

    MS_U16 u16NumSizes;
} VDEC_VideoInfo;


typedef struct
{

    MS_PHY u32LumaAddr;

    MS_PHY u32ChromaAddr;

    MS_U32 u32TimeStamp;

    MS_U32 u32ID_L;

    MS_U32 u32ID_H;

    MS_U16 u16Pitch;

    MS_U16 u16Width;

    MS_U16 u16Height;

    VDEC_FrameType eFrameType;

    VDEC_FieldType eFieldType;
} VDEC_FrameInfo;


typedef struct
{

    MS_U16 u16VSize;

    MS_U16 u16HSize;

    MS_S16 s16VOffset;

    MS_S16 s16HOffset;
} VDEC_ExtDispInfo;


typedef struct
{

    VDEC_FrameInfo stFrmInfo;

    MS_U32 u32PriData;

    MS_U32 u32Idx;

    VDEC_DispInfo stDispInfo;
} VDEC_DispFrame;


typedef struct
{

    MS_U8 u8TimeCodeHr;

    MS_U8 u8TimeCodeMin;

    MS_U8 u8TimeCodeSec;

    MS_U8 u8TimeCodePic;

    MS_U8 u8DropFrmFlag;

    MS_U8 u8Reserved[3];
} VDEC_TimeCode;


typedef struct
{
    VDEC_FBReductionType eLumaFBReduction;
    VDEC_FBReductionType eChromaFBReduction;
    MS_BOOL bEnableAutoMode;
} VDEC_FBReduction;


typedef struct
{

    VDEC_CodecType eCodecType;

    VDEC_SysCfg SysConfig;

    VDEC_VideoInfo VideoInfo;

    MS_BOOL EnableDynaScale;

    MS_BOOL bDisableDropErrFrame;

    MS_BOOL bDisableErrConceal;

    MS_BOOL bRepeatLastField;

    MS_U8 u8ErrThreshold;

    MS_U32 u32DSVirtualBoxWidth;

    MS_U32 u32DSVirtualBoxHeight;
} VDEC_InitParam;


typedef struct
{

    MS_U32 u32Version;

    VDEC_CodecType eCodecType;

    VDEC_SysCfg SysConfig;

    VDEC_VideoInfo VideoInfo;

    MS_BOOL EnableDynaScale;

    MS_BOOL bDisableDropErrFrame;

    MS_BOOL bDisableErrConceal;

    MS_BOOL bRepeatLastField;

    MS_U8 u8ErrThreshold;

    MS_U32 u32DSVirtualBoxWidth;

    MS_U32 u32DSVirtualBoxHeight;

    VDEC_FBReduction stFBReduction;
} VDEC_InitParam_EX1;


typedef struct
{

    MS_U32 u32ID_H;

    MS_U32 u32ID_L;

    MS_U32 u32StAddr;

    MS_U32 u32Size;

    MS_U32 u32Timestamp;
} VDEC_DecCmd;


typedef struct
{

    MS_U32 u32ID_H;

    MS_U32 u32ID_L;

    VDEC_DispCmdAction eAction;
} VDEC_DispCmd;

typedef struct
{
    MS_BOOL bEnable;
    MS_U32 u32Delay;
    MS_U16 u16Tolerance;
} VDEC_AVSyncCfg;


typedef void (*VDEC_EventCb)(MS_U32 eFlag, void *param);

typedef struct
{
    MS_U32 u32Version;

    VDEC_PicStructure u8PicStructure;
    MS_U8 u8TopFieldFirst;
    MS_U16 u16TempRef;
    MS_U32 u32Pts;

    MS_U32 u32UserDataBuf;

    MS_U32 u32UserDataSize;
} VDEC_CC_Info;


typedef struct
{
    MS_U32 u32Ver;
    MS_U32 u32Val;
} VDEC_CC_InputPara;

typedef struct
{
    MS_U32 u32OutputFrameRate;
    MS_U8 u8Interlace;
} VDEC_FRC_OutputParam;

typedef struct
{
    MS_U8 u8Frm_packing_arr_cnl_flag;
    MS_U8 u8Frm_packing_arr_type;
    MS_U8 u8content_interpretation_type;
    MS_U8 u1Quincunx_sampling_flag;

    MS_U8 u1Spatial_flipping_flag;
    MS_U8 u1Frame0_flipping_flag;
    MS_U8 u1Field_views_flag;
    MS_U8 u1Current_frame_is_frame0_flag;

    MS_U8 u1Frame0_self_contained_flag;
    MS_U8 u1Frame1_self_contained_flag;
    MS_U8 u4Frame0_grid_position_x;
    MS_U8 u4Frame0_grid_position_y;

    MS_U8 u4Frame1_grid_position_x;
    MS_U8 u4Frame1_grid_position_y;
    MS_U8 u8Reserved01;
    MS_U8 u8Reserved02;
}VDEC_Frame_packing_SEI;

typedef enum
{
    E_VDEC_TRICKPLAY2X_COUNTVSYNC = 0,
    E_VDEC_TRICKPLAY2X_AVSYNC
}VDEC_TrickPlay2xMode;


typedef struct
{
    VDEC_CodecType eCodecType;
    MS_PHY u32DataAddr;
    MS_U32 u32MemUsageSize;
    MS_U16 u16DataSize;
} VDEC_FbMemUsage_Param;

typedef struct
{
    MS_U8 u8RepeatPeriod;
    MS_U8 u8DropPeriod;
}VDEC_Slow_Sync;






VDEC_Result MApi_VDEC_GetLibVer(const MSIF_Version **ppVersion);
VDEC_Result MApi_VDEC_GetInfo(const VDEC_Info **ppInfo);
MS_BOOL MApi_VDEC_GetStatus(VDEC_Status *pStatus);
MS_BOOL MApi_VDEC_CheckCaps(VDEC_CodecType eCodecType);
VDEC_Result MApi_VDEC_EnableTurboMode(MS_BOOL bEnable);
VDEC_Result MApi_VDEC_Init(VDEC_InitParam *pInitParam);
VDEC_Result MApi_VDEC_Init_EX(void *pInfo, MS_U32 u32Size);
VDEC_Result MApi_VDEC_Rst(void);
VDEC_Result MApi_VDEC_Exit(void);
VDEC_Result MApi_VDEC_CheckDispInfoRdy(void);
VDEC_Result MApi_VDEC_SetFrcMode(VDEC_FrcMode eFrcMode);
VDEC_Result MApi_VDEC_SetDynScalingParams( MS_PHY u32Addr , MS_U32 u32Size);
VDEC_Result MApi_VDEC_SetDbgLevel(VDEC_DbgLevel eDbgLevel);


VDEC_Result MApi_VDEC_Play(void);
VDEC_Result MApi_VDEC_Pause(void);
VDEC_Result MApi_VDEC_Resume(void);
VDEC_Result MApi_VDEC_StepDisp(void);
VDEC_Result MApi_VDEC_IsStepDispDone(void);
VDEC_Result MApi_VDEC_StepDecode(void);
VDEC_Result MApi_VDEC_IsStepDecodeDone(void);
VDEC_Result MApi_VDEC_SetTrickMode(VDEC_TrickDec eTrickDec);
VDEC_Result MApi_VDEC_SetBlockDisplay(MS_BOOL bEnable);

VDEC_Result MApi_VDEC_EnableESBuffMalloc(MS_BOOL bEnable);
MS_U32 MApi_VDEC_GetESBuffVacancy(void* pData);
VDEC_Result MApi_VDEC_GetESBuff(MS_U32 u32ReqSize, MS_U32* u32AvailSize, MS_PHY* u32Addr);
# 1230 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC.h"
VDEC_Result MApi_VDEC_PushDecQ(VDEC_DecCmd *pCmd);
VDEC_Result MApi_VDEC_PushDispQ(VDEC_DispCmd *pCmd);
VDEC_Result MApi_VDEC_Flush(VDEC_FreezePicSelect eFreezePic);
VDEC_Result MApi_VDEC_EnableLastFrameShow(MS_BOOL bEnable);
VDEC_Result MApi_VDEC_SetSpeed(VDEC_SpeedType eSpeedType, VDEC_DispSpeed eSpeed);
VDEC_Result MApi_VDEC_SetFreezeDisp(MS_BOOL bEnable);
VDEC_Result MApi_VDEC_SetBlueScreen(MS_BOOL bOn);
VDEC_Result MApi_VDEC_ResetPTS(MS_U32 u32PtsBase);
VDEC_Result MApi_VDEC_AVSyncOn(MS_BOOL bOn, MS_U32 u32SyncDelay, MS_U16 u16SyncTolerance);
VDEC_Result MApi_VDEC_SetAVSyncFreerunThreshold(MS_U32 u32Threshold );

VDEC_Result MApi_VDEC_GetDispInfo(VDEC_DispInfo *pDispinfo);
VDEC_Result MApi_VDEC_IsAVSyncOn(void);
VDEC_Result MApi_VDEC_IsWithValidStream(void);
VDEC_Result MApi_VDEC_IsDispFinish(void);
VDEC_Result MApi_VDEC_IsFrameRdy(void);
VDEC_Result MApi_VDEC_IsIFrameFound(void);
VDEC_Result MApi_VDEC_IsSeqChg(void);
VDEC_Result MApi_VDEC_IsReachSync(void);
VDEC_Result MApi_VDEC_IsFreerun(void);
VDEC_Result MApi_VDEC_IsStartSync(void);
VDEC_Result MApi_VDEC_IsWithLowDelay(void);
VDEC_Result MApi_VDEC_IsAllBufferEmpty(void);
VDEC_Result MApi_VDEC_GetExtDispInfo(VDEC_ExtDispInfo *pExtDispinfo);
VDEC_Result MApi_VDEC_GetDecFrameInfo(VDEC_FrameInfo *pFrmInfo);
VDEC_Result MApi_VDEC_GetDispFrameInfo(VDEC_FrameInfo *pFrmInfo);
VDEC_Result MApi_VDEC_GetNextDispFrame(VDEC_DispFrame** ppDispFrm);
VDEC_Result MApi_VDEC_DisplayFrame(VDEC_DispFrame *pDispFrm);
VDEC_Result MApi_VDEC_ReleaseFrame(VDEC_DispFrame *pDispFrm);

VDEC_Result MApi_VDEC_GetDecTimeCode(VDEC_TimeCode* pTimeCode);
VDEC_Result MApi_VDEC_GetDispTimeCode(VDEC_TimeCode* pTimeCode);
VDEC_Result MApi_VDEC_SetEvent(MS_U32 u32EnableEvent, VDEC_EventCb pfn, void* param);
VDEC_Result MApi_VDEC_UnsetEvent(MS_U32 u32EnableEvent);
VDEC_Result MApi_VDEC_SetEvent_EX(VDEC_CB_TYPE cb_type, MS_U32 u32EnableEvent, VDEC_EventCb pfn, void* param);
VDEC_Result MApi_VDEC_UnsetEvent_EX(VDEC_CB_TYPE cb_type, MS_U32 u32EnableEvent);
VDEC_Result MApi_VDEC_GetEventInfo(MS_U32* u32EventFlag);
VDEC_Result MApi_VDEC_GetPatchPattern(VDEC_PatchPattern ePatternType, MS_U32 *pu32Staddr, MS_U32 *pu32Len);
VDEC_Result MApi_VDEC_FireDecCmd(void);
VDEC_Result MApi_VDEC_SeekToPTS(MS_U32 u32PTS);
VDEC_Result MApi_VDEC_SkipToPTS(MS_U32 u32PTS);


VDEC_Result MApi_VDEC_DisableDeblocking(MS_BOOL bDisable);
VDEC_Result MApi_VDEC_DisableQuarterPixel(MS_BOOL bDisable);
VDEC_Result MApi_VDEC_SetAutoRmLstZeroByte(MS_BOOL bOn);
VDEC_Result MApi_VDEC_SetBalanceBW(MS_U8 u8QuarPixelTH, MS_U8 u8DeBlockingTH, MS_U8 u8UpperBound, MS_U8 u8SafeCoef);

MS_U8 MApi_VDEC_GetActiveFormat(void);
MS_U8 MApi_VDEC_GetColourPrimaries(void);
MS_U8 MApi_VDEC_GetGOPCnt(void);
MS_U32 MApi_VDEC_GetESWritePtr(void);
MS_U32 MApi_VDEC_GetESReadPtr(void);
MS_U32 MApi_VDEC_GetPTS(void);
MS_U32 MApi_VDEC_GetNextPTS(void);
MS_U32 MApi_VDEC_GetErrCode(void);
MS_U32 MApi_VDEC_GetErrCnt(void);
MS_U32 MApi_VDEC_GetBitsRate(void);
MS_U32 MApi_VDEC_GetFrameCnt(void);
MS_U32 MApi_VDEC_GetSkipCnt(void);
MS_U32 MApi_VDEC_GetDropCnt(void);
MS_U32 MApi_VDEC_GetDecQVacancy(void);
MS_U32 MApi_VDEC_GetDispQVacancy(void);
MS_BOOL MApi_VDEC_Is32PullDown(void);
VDEC_Result MApi_VDEC_IsAlive(void);
MS_S64 MApi_VDEC_GetVideoPtsStcDelta(void);
MS_BOOL MApi_VDEC_IsCCAvailable(void);
VDEC_Result MApi_VDEC_GetCCInfo(void *pInfo, MS_U32 u32Size);

VDEC_TrickDec MApi_VDEC_GetTrickMode(void);
VDEC_CodecType MApi_VDEC_GetActiveCodecType(void);

VDEC_Result MDrv_VDEC_GenPattern(VDEC_PatternType ePatternType , MS_PHY u32Addr , MS_U32* u32Size);
VDEC_Result MApi_VDEC_GenPattern(VDEC_PatternType ePatternType, MS_PHY u32Addr, MS_U32 *pu32Size);
MS_U32 MApi_VDEC_GetPatternLeastLength(VDEC_PatternType ePatternType );

VDEC_Result MApi_VDEC_MHEG_DecodeIFrame(MS_PHY u32FrameBufAddr,
                                        MS_PHY u32SrcSt,
                                        MS_PHY u32SrcEnd);
VDEC_Result MApi_VDEC_MHEG_IsIFrameDecoding(void);
VDEC_Result MApi_VDEC_MHEG_RstIFrameDec(void);


VDEC_Result MApi_VDEC_CC_StartParsing(VDEC_CCCfg *pCCParam);
VDEC_Result MApi_VDEC_CC_StopParsing(void);
VDEC_Result MApi_VDEC_CC_GetWritePtr(MS_U32 *pWrite);
VDEC_Result MApi_VDEC_CC_GetReadPtr(MS_U32 *pRead);
VDEC_Result MApi_VDEC_CC_UpdateReadPtr(MS_U32 u32EachPacketSize);
VDEC_Result MApi_VDEC_CC_GetIsOverflow(MS_BOOL *pbOverflow);

VDEC_Result MApi_VDEC_CC_Init(MS_U32 *pIn);
VDEC_Result MApi_VDEC_CC_SetCfg(VDEC_CCFormat eFmt, VDEC_CCType eType, MS_U32 *pIn);
VDEC_Result MApi_VDEC_CC_SetBuffStartAdd(VDEC_CCFormat eFmt, MS_U32 *pIn);
VDEC_Result MApi_VDEC_CC_UpdateWriteAdd(VDEC_CCFormat eFmt, MS_U32 *pIn);
VDEC_Result MApi_VDEC_CC_UpdateReadAdd(VDEC_CCFormat eFmt, MS_U32 *pIn);
VDEC_Result MApi_VDEC_CC_DisableParsing(VDEC_CCFormat eFmt);
VDEC_Result MApi_VDEC_CC_GetIsRstDone(VDEC_CCFormat eFmt);
VDEC_Result MApi_VDEC_CC_GetIsBuffOverflow(VDEC_CCFormat eFmt);
MS_PHY MApi_VDEC_CC_GetWriteAdd(VDEC_CCFormat eFmt);
MS_PHY MApi_VDEC_CC_GetReadAdd(VDEC_CCFormat eFmt);

VDEC_Result MApi_VDEC_DbgCmd(MS_U32 u8Cmd, MS_U32 u32CmdArg);
VDEC_Result MApi_VDEC_DbgSetData(MS_VIRT u32Addr, MS_U32 u32Data);
VDEC_Result MApi_VDEC_DbgGetData(MS_VIRT u32Addr, MS_U32 *u32Data);

VDEC_Result MApi_VDEC_SetControl(VDEC_User_Cmd cmd_id, MS_VIRT param);
VDEC_Result MApi_VDEC_PreSetControl(VDEC_User_Cmd cmd_id, MS_U32 param);

MS_U32 MApi_VDEC_GetFwVersion(VDEC_FwType eFwType);

MS_U32 MApi_VDEC_GetDispCnt(void);

VDEC_Result MApi_VDEC_GetControl(VDEC_User_Cmd cmd_id, MS_U32 *param);
VDEC_Result MApi_VDEC_FlushPTSBuf(void);


VDEC_Result MApi_VDEC_SystemPreSetControl(VDEC_User_Cmd cmd_id, void *pParam);


VDEC_Result MApi_VDEC_V2_SetPowerState(EN_POWER_MODE u16PowerState);

VDEC_Result MApi_VDEC_V2_GetLibVer(const MSIF_Version **ppVersion);
VDEC_Result MApi_VDEC_V2_GetInfo(const VDEC_Info **ppInfo);
MS_BOOL MApi_VDEC_V2_GetStatus(VDEC_Status *pStatus);
MS_BOOL MApi_VDEC_V2_CheckCaps(VDEC_CodecType eCodecType);
VDEC_Result MApi_VDEC_V2_EnableTurboMode(MS_BOOL bEnable);
VDEC_Result MApi_VDEC_V2_Init(VDEC_InitParam *pInitParam);
VDEC_Result MApi_VDEC_V2_Init_EX(void *pInfo, MS_U32 u32Size);
VDEC_Result MApi_VDEC_V2_Rst(void);
VDEC_Result MApi_VDEC_V2_Exit(MS_BOOL);
VDEC_Result MApi_VDEC_V2_CheckDispInfoRdy(void);
VDEC_Result MApi_VDEC_V2_SetFrcMode(VDEC_FrcMode eFrcMode);
VDEC_Result MApi_VDEC_V2_SetDynScalingParams( MS_PHY u32Addr , MS_U32 u32Size);
VDEC_Result MApi_VDEC_V2_Play(void);
VDEC_Result MApi_VDEC_V2_Pause(void);
VDEC_Result MApi_VDEC_V2_Resume(void);
VDEC_Result MApi_VDEC_V2_StepDisp(void);
VDEC_Result MApi_VDEC_V2_IsStepDispDone(void);
VDEC_Result MApi_VDEC_V2_SeekToPTS(MS_U32 u32PTS);
VDEC_Result MApi_VDEC_V2_SkipToPTS(MS_U32 u32PTS);
VDEC_Result MApi_VDEC_V2_StepDecode(void);
VDEC_Result MApi_VDEC_V2_IsStepDecodeDone(void);
VDEC_Result MApi_VDEC_V2_SetTrickMode(VDEC_TrickDec eTrickDec);
VDEC_Result MApi_VDEC_V2_PushDecQ(VDEC_DecCmd *pCmd);
VDEC_Result MApi_VDEC_V2_FireDecCmd(void);
MS_U32 MApi_VDEC_V2_GetDecQVacancy(void);
MS_BOOL MApi_VDEC_V2_IsCCAvailable(void);
VDEC_Result MApi_VDEC_V2_GetCCInfo(void *pInfo, MS_U32 u32Size);
VDEC_Result MApi_VDEC_V2_Flush(VDEC_FreezePicSelect eFreezePic);
MS_U32 MApi_VDEC_V2_GetESWritePtr(void);
MS_U32 MApi_VDEC_V2_GetESReadPtr(void);
VDEC_Result MApi_VDEC_V2_EnableLastFrameShow(MS_BOOL bEnable);
VDEC_Result MApi_VDEC_V2_IsDispFinish(void);
VDEC_Result MApi_VDEC_V2_SetSpeed(VDEC_SpeedType eSpeedType, VDEC_DispSpeed eSpeed);
VDEC_Result MApi_VDEC_V2_IsFrameRdy(void);
VDEC_Result MApi_VDEC_V2_SetFreezeDisp(MS_BOOL bEnable);
VDEC_Result MApi_VDEC_V2_SetBlueScreen(MS_BOOL bOn);
VDEC_Result MApi_VDEC_V2_ResetPTS(MS_U32 u32PtsBase);
VDEC_Result MApi_VDEC_V2_AVSyncOn(MS_BOOL bOn, MS_U32 u32SyncDelay, MS_U16 u16SyncTolerance);
VDEC_Result MApi_VDEC_V2_SetAVSyncFreerunThreshold(MS_U32 u32Threshold );
VDEC_Result MApi_VDEC_V2_IsAVSyncOn(void);
MS_U32 MApi_VDEC_V2_GetPTS(void);
MS_U32 MApi_VDEC_V2_GetNextPTS(void);
VDEC_Result MApi_VDEC_V2_IsStartSync(void);
VDEC_Result MApi_VDEC_V2_IsReachSync(void);
VDEC_Result MApi_VDEC_V2_IsFreerun(void);
VDEC_Result MApi_VDEC_V2_MHEG_DecodeIFrame(MS_PHY u32FrameBufAddr,
                                        MS_PHY u32SrcSt,
                                        MS_PHY u32SrcEnd);
VDEC_Result MApi_VDEC_V2_MHEG_IsIFrameDecoding(void);
VDEC_Result MApi_VDEC_V2_MHEG_RstIFrameDec(void);
MS_U32 MApi_VDEC_V2_GetErrCode(void);
MS_U32 MApi_VDEC_V2_GetErrCnt(void);
VDEC_CodecType MApi_VDEC_V2_GetActiveCodecType(void);
MS_U32 MApi_VDEC_V2_GetBitsRate(void);
MS_BOOL MApi_VDEC_V2_Is32PullDown(void);
VDEC_Result MApi_VDEC_V2_IsAlive(void);
MS_S64 MApi_VDEC_V2_GetVideoPtsStcDelta(void);
VDEC_Result MApi_VDEC_V2_IsWithValidStream(void);
VDEC_Result MApi_VDEC_V2_IsIFrameFound(void);
VDEC_Result MApi_VDEC_V2_IsWithLowDelay(void);
VDEC_Result MApi_VDEC_V2_IsAllBufferEmpty(void);
MS_U8 MApi_VDEC_V2_GetGOPCnt(void);
MS_U32 MApi_VDEC_V2_GetFrameCnt(void);
MS_U32 MApi_VDEC_V2_GetSkipCnt(void);
MS_U32 MApi_VDEC_V2_GetDropCnt(void);
VDEC_Result MApi_VDEC_V2_GetDispInfo(VDEC_DispInfo *pDispinfo);
VDEC_TrickDec MApi_VDEC_V2_GetTrickMode(void);
MS_U8 MApi_VDEC_V2_GetActiveFormat(void);
MS_U8 MApi_VDEC_V2_GetColourPrimaries(void);
VDEC_Result MApi_VDEC_V2_GetHWKey(MS_U8 *pu8Key);
VDEC_Result MApi_VDEC_V2_IsSeqChg(void);
VDEC_Result MApi_VDEC_V2_SetDbgLevel(VDEC_DbgLevel eDbgLevel);
VDEC_Result MApi_VDEC_V2_GetDecFrameInfo(VDEC_FrameInfo* pFrmInfo);
VDEC_Result MApi_VDEC_V2_GetDispFrameInfo(VDEC_FrameInfo *pFrmInfo);
VDEC_Result MApi_VDEC_V2_GetExtDispInfo(VDEC_ExtDispInfo *pExtDispinfo);
VDEC_Result MApi_VDEC_V2_GetDecTimeCode(VDEC_TimeCode* pTimeCode);
VDEC_Result MApi_VDEC_V2_GetDispTimeCode(VDEC_TimeCode* pTimeCode);
VDEC_Result MApi_VDEC_V2_CC_StartParsing(VDEC_CCCfg* pCCParam);
VDEC_Result MApi_VDEC_V2_CC_StopParsing(void);
VDEC_Result MApi_VDEC_V2_CC_GetWritePtr(MS_U32* pu32Write);
VDEC_Result MApi_VDEC_V2_CC_GetReadPtr(MS_U32* pu32Write);
VDEC_Result MApi_VDEC_V2_CC_UpdateReadPtr(MS_U32 u32EachPacketSize);
VDEC_Result MApi_VDEC_V2_CC_GetIsOverflow(MS_BOOL* pbOverflow);
VDEC_Result MApi_VDEC_V2_SetEvent(MS_U32 u32EnableEvent, VDEC_EventCb pfn, void* param);
VDEC_Result MApi_VDEC_V2_UnsetEvent(MS_U32 u32EnableEvent);
VDEC_Result MApi_VDEC_V2_SetEvent_EX(VDEC_CB_TYPE cb_type, MS_U32 u32EnableEvent, VDEC_EventCb pfn, void* param);
VDEC_Result MApi_VDEC_V2_UnsetEvent_EX(VDEC_CB_TYPE cb_type, MS_U32 u32EnableEvent);
VDEC_Result MApi_VDEC_V2_GetEventInfo(MS_U32* u32EventFlag);
VDEC_Result MApi_VDEC_V2_GenPattern(VDEC_PatternType ePatternType, MS_PHY u32Addr, MS_U32 *pu32Size);
MS_U32 MApi_VDEC_V2_GetPatternLeastLength(VDEC_PatternType ePatternType );
VDEC_Result MApi_VDEC_V2_DisableDeblocking(MS_BOOL bDisable);
VDEC_Result MApi_VDEC_V2_DisableQuarterPixel(MS_BOOL bDisable);
VDEC_Result MApi_VDEC_V2_SetAutoRmLstZeroByte(MS_BOOL bOn);
VDEC_Result MApi_VDEC_V2_SetBalanceBW(MS_U8 u8QuarPixelTH, MS_U8 u8DeBlockingTH, MS_U8 u8UpperBound, MS_U8 u8SafeCoef);
VDEC_Result MApi_VDEC_V2_DbgDumpStatus(void);
VDEC_Result MApi_VDEC_V2_SetControl(VDEC_User_Cmd cmd_id, MS_U32 param);
VDEC_Result MApi_VDEC_V2_GetControl(VDEC_User_Cmd cmd_id, MS_U32 *param);
MS_U32 MApi_VDEC_V2_GetDispCnt(void);
MS_U32 MApi_VDEC_V2_GetFwVersion(VDEC_FwType eFwType);
VDEC_Result MApi_VDEC_V2_SetBlockDisplay(MS_BOOL bEnable);
VDEC_Result MApi_VDEC_V2_EnableESBuffMalloc(MS_BOOL bEnable);
MS_U32 MApi_VDEC_V2_GetESBuffVacancy(void* pData);
VDEC_Result MApi_VDEC_V2_GetESBuff(MS_U32 u32ReqSize, MS_U32* u32AvailSize, MS_PHY* u32Addr);
VDEC_Result MApi_VDEC_V2_GetNextDispFrame(VDEC_DispFrame** ppDispFrm);
VDEC_Result MApi_VDEC_V2_DisplayFrame(VDEC_DispFrame *pDispFrm);
VDEC_Result MApi_VDEC_V2_DisplayFrame(VDEC_DispFrame *pDispFrm);
VDEC_Result MApi_VDEC_V2_FlushPTSBuf(void);
VDEC_Result MApi_VDEC_V2_CaptureFrame(MS_U32 u32FrmPriData, MS_BOOL bEnable);
VDEC_Result MApi_VDEC_V2_CC_Init(MS_U32 *pIn);
VDEC_Result MApi_VDEC_V2_CC_SetCfg(VDEC_CCFormat eFmt, VDEC_CCType eType, MS_U32 *pIn);
VDEC_Result MApi_VDEC_V2_CC_SetBuffStartAdd(VDEC_CCFormat eFmt, MS_U32 *pIn);
VDEC_Result MApi_VDEC_V2_CC_UpdateWriteAdd(VDEC_CCFormat eFmt, MS_U32 *pIn);
VDEC_Result MApi_VDEC_V2_CC_UpdateReadAdd(VDEC_CCFormat eFmt, MS_U32 *pIn);
VDEC_Result MApi_VDEC_V2_CC_DisableParsing(VDEC_CCFormat eFmt);
VDEC_Result MApi_VDEC_V2_CC_GetInfo(VDEC_CCFormat eFmt, VDEC_CCInfoCmd eCmd, MS_U32 *pOut);
VDEC_Result MApi_VDEC_V2_CC_GetIsRstDone(VDEC_CCFormat eFmt);
VDEC_Result MApi_VDEC_V2_CC_GetIsBuffOverflow(VDEC_CCFormat eFmt);
MS_PHY MApi_VDEC_V2_CC_GetWriteAdd(VDEC_CCFormat eFmt);
MS_PHY MApi_VDEC_V2_CC_GetReadAdd(VDEC_CCFormat eFmt);
VDEC_Result MApi_VDEC_V2_CC_SystemPreSetControl(VDEC_User_Cmd cmd_id, void *pParam);
VDEC_Result MApi_VDEC_V2_CC_PreSetControl(VDEC_User_Cmd cmd_id, MS_U32 param);






#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMFC.h"
#ifndef _DRV_MFC_H_
#define _DRV_MFC_H_ 






#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"





#define MFC_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'M','F','V','_'}, \
    {'0','1'}, \
    {'0','1'}, \
    {'0','0','1','4','0','9','4','2'}, \
    MSIF_OS






#define U8 MS_U8
#define U16 MS_U16
#define U32 MS_U32
#define S8 MS_S8
#define S16 MS_S16
#define S32 MS_S32

typedef struct MST_MFC_DRV_SYS_INFO_s
{

 U8 u8LVDSChannel;
    U8 u8LVDSBitNum;
    U8 u8LVDSTiMode;
    U8 u8LVDSSwapMsbLsb;
    U8 u8LVDSSwap_P_N;
    U8 u8LVDSSwapOddEven;


 U8 u8PanelType;
 U8 u8PanelBitNum;
 U8 u8PanelChannel;
 U8 u8PanelDither;
 U8 u8PanelLVDSTiMode;
 U8 u8PanelLVDSSwapPol;
 U8 u8PanelLVDSSwapCH;
 U8 u8PanelLVDSSwapPair;
 U8 u8PanelLVDSShiftPair;
 U8 u8PanelBlankCPVC;
 U8 u8PanelBlankOEC;
 U8 u8PanelBlankTPC;
 U8 u8PanelBlankSTHC;

 U16 u16HStart;
    U16 u16VStart;
    U16 u16Width;
    U16 u16Height;
    U16 u16HTotal;
    U16 u16VTotal;
    U8 u8PanelVfreq;
 U8 u8PanelIncVtotalFor50Hz;
 U8 u8PanelCSC;
 U16 u16MFCMemoryClk;
 U16 u16MFCMemoryType;
 U8 u8PanelGAMMA;
 U8 u8ODMode;
 U8 u8IPMode;
 U8 u8Preset;
 U8 u8MirrorMode;
 U8 u8UseMPIF;
} MST_MFC_DRV_SYS_INFO_t, *PMST_MFC_DRV_SYS_INFO_t;

void MDrv_URSA_Init(PMST_MFC_DRV_SYS_INFO_t mfcSysInfo, MS_U8 u8IsS7M);
void MDrv_URSA_ControlFrameLockMode(MS_U8 u8type);
void MDrv_URSA_SetSpreadSpectrum(MS_U16 u16KHz, MS_U16 u16Percent, MS_BOOL bEnable, MS_BOOL bMiuLVDS);
void MDrv_URSA_SetVFreq(MS_U16 u16Inputfreq, MS_BOOL bEnableFPLL);

#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_v2.h"
#ifndef _API_ACE_PRIV_H_
#define _API_ACE_PRIV_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"

typedef enum
{
    E_ACE_CMD_INIT,
    E_ACE_CMD_EXIT,
    E_ACE_CMD_DMS,
    E_ACE_CMD_SETPCYUV2RGB,
    E_ACE_CMD_SELECTYUVTORGBMATRIX,
    E_ACE_CMD_SETCOLORCORRECTIONTABLE,
    E_ACE_CMD_SETPCSRGBTABLE,
    E_ACE_CMD_GETCOLORMATRIX,
    E_ACE_CMD_SETCOLORMATRIX,
    E_ACE_CMD_SETBYPASSCOLORMATRIX,
    E_ACE_CMD_SETIHC,
    E_ACE_CMD_SETICC,
    E_ACE_CMD_SETIBC,
    E_ACE_CMD_PATCHDTGCOLORCHECKER,
    E_ACE_CMD_GETACEINFO,
    E_ACE_CMD_GETACEINFOEX,
    E_ACE_CMD_PICSETCONTRAST,
    E_ACE_CMD_PICSETBRIGHTNESS,
    E_ACE_CMD_PICSETBRIGHTNESSPRECISE,
    E_ACE_CMD_PICSET_PRE_Y_OFFSET,
    E_ACE_CMD_PICGET_PRE_Y_OFFSET,
    E_ACE_CMD_PICSETHUE,
    E_ACE_CMD_SKIPWAITVSYNC,
    E_ACE_CMD_PICSETSATURATION,
    E_ACE_CMD_PICSETSHARPNESS,
    E_ACE_CMD_PICSETCOLORTEMP,
    E_ACE_CMD_PICSETCOLORTEMPEX,
    E_ACE_CMD_PICSETPOSTCOLORTEMP_V02,
    E_ACE_CMD_SETFLESHTONE,
    E_ACE_CMD_SETBLACKADJUST,
    E_ACE_CMD_SET_IHC_SRAM,
    E_ACE_CMD_SET_ICC_SRAM,
    E_ACE_CMD_ENABLEMWE,
    E_ACE_CMD_MWESETMIRRORMODE,
    E_ACE_CMD_MWECLONEVISUALEFFECT,
    E_ACE_CMD_MWESETREGTABLE,
    E_ACE_CMD_SETMWELOADFROMPQ,
    E_ACE_CMD_MWESTATUS,
    E_ACE_CMD_MWEHANDLE,
    E_ACE_CMD_MWEFUNCSEL,
    E_ACE_CMD_MWESETDISPWIN,
    E_ACE_CMD_3DCLONEPQMAP,
    E_ACE_CMD_DNR_BLENDING_NRTBL,
    E_ACE_CMD_DNR_BLENDING_MISC,
    E_ACE_CMD_DNR_BLENDING,
    E_ACE_CMD_DNR_GET_PRECISIONSHIFT,
    E_ACE_CMD_DNR_GETMOTION_WEIGHT,
    E_ACE_CMD_DNR_GETLUMA_WEIGHT,
    E_ACE_CMD_DNR_GETNOISE_WEIGHT,
    E_ACE_CMD_DNR_GETMOTION,
    E_ACE_CMD_DNR_INIT_MOTION,
    E_ACE_CMD_DNR_INIT_LUMA,
    E_ACE_CMD_DNR_INIT_NOISE,
    E_ACE_CMD_DNR_SETPARAM,
    E_ACE_CMD_DNR_GETPARAM,
    E_ACE_CMD_DNR_SETNRTBL,
    E_ACE_CMD_GETLIBVER,
    E_ACE_CMD_GETINFO,
    E_ACE_CMD_GETSTATUS,
    E_ACE_CMD_SETDBGLEVEL,
    E_ACE_CMD_COLORCORRECTIONTABLE,
    E_ACE_CMD_SETCOLORMATRIXCONTROL,
    E_ACE_CMD_SETRBCHANNELRANGE,
    E_ACE_CMD_PICSETPOSTCOLORTEMP,
    E_ACE_CMD_PICSETPOSTCOLORTEMPEX,
    E_ACE_CMD_PICSETPOSTCOLORTEMP2,
    E_ACE_CMD_PICSETPOSTCOLORTEMP2EX,
    E_ACE_CMD_SET_POWERSTATE,
    E_ACE_CMD_SET_HDR_INFO,
    E_ACE_CMD_SET_CONTRAST_BY_GAMMA_TABLE,
    E_ACE_CMD_PICSETCOLORTEMP_10BITS,
    E_ACE_CMD_NUM,
    E_ACE_CMD_MAX = E_ACE_CMD_NUM,
} E_ACE_IOCTL_CMDS;

typedef struct DLL_PACKED _stACE_Init
{
    XC_ACE_InitData *pstXC_ACE_InitData;
    MS_U32 u32InitDataLen;
    MS_BOOL bReturn;
} stACE_Init,*pstACE_Init;

typedef struct _stACE_Exit
{
    MS_BOOL bReturn;
} stACE_Exit,*pstACE_Exit;

typedef struct _stACE_DMS
{
    MS_BOOL eWindow;
    MS_BOOL bisATV;
} stACE_DMS,*pstACE_DMS;

typedef struct _stACE_SetPCYUV2RGB
{
    MS_BOOL eWindow;
    MS_BOOL bEnable;
} stACE_SetPCYUV2RGB,*pstACE_SetPCYUV2RGB;

typedef struct DLL_PACKED _stACE_SelectYUVtoRGBMatrix
{
    MS_BOOL eWindow;
    MS_U8 ucMatrix;
    MS_S16* psUserYUVtoRGBMatrix;
} stACE_SelectYUVtoRGBMatrix,*pstACE_SelectYUVtoRGBMatrix;

typedef struct _stACE_SetColorCorrectionTable
{
    MS_BOOL bScalerWin;
} stACE_SetColorCorrectionTable,*pstACE_SetColorCorrectionTable;

typedef struct _stACE_SetPCsRGBTable
{
    MS_BOOL bScalerWin;
} stACE_SetPCsRGBTable,*pstACE_SetPCsRGBTable;

typedef struct DLL_PACKED _stACE_ColorMatrix
{
    MS_BOOL eWindow;
    MS_U16* pu16Matrix;
} stACE_ColorMatrix,*pstACE_ColorMatrix;

typedef struct _stACE_SetBypassColorMatrix
{
    MS_BOOL bEnable;
    E_XC_ACE_RESULT eResult;
} stACE_SetBypassColorMatrix,*pstACE_SetBypassColorMatrix;

typedef struct _stACE_SetIHC
{
    MS_BOOL bScalerWin;
    XC_ACE_IHC_COLOR_TYPE eIHC;
    MS_U8 u8Val;
    MS_BOOL bReturn;
} stACE_SetIHC,*pstACE_SetIHC;

typedef struct _stACE_SetICC
{
    MS_BOOL bScalerWin;
    XC_ACE_ICC_COLOR_TYPE eICC;
    MS_U8 u8Val;
    MS_BOOL bReturn;
} stACE_SetICC,*pstACE_SetICC;

typedef struct _stACE_SetIBC
{
    MS_BOOL bScalerWin;
    XC_ACE_IBC_COLOR_TYPE eIBC;
    MS_U8 u8Val;
    MS_BOOL bReturn;
} stACE_SetIBC,*pstACE_SetIBC;

typedef struct _stACE_PatchDTGColorChecker
{
    MS_U8 u8Mode;
} stACE_PatchDTGColorChecker,*pstACE_PatchDTGColorChecker;

typedef struct _stACE_GetACEInfo
{
    MS_BOOL bWindow;
    E_XC_ACE_INFOTYPE eXCACEInfoType;
    MS_U16 u16Return;
} stACE_GetACEInfo,*pstACE_GetACEInfo;

typedef struct DLL_PACKED _stACE_GetACEInfoEx
{
    MS_BOOL bWindow;
    XC_ACE_InfoEx *pInfoEx;
} stACE_GetACEInfoEx,*pstACE_GetACEInfoEx;

typedef struct _stACE_PicSetBrightness
{
    MS_BOOL eWindow;
    MS_U8 u8Brightness_R;
    MS_U8 u8Brightness_G;
    MS_U8 u8Brightness_B;
} stACE_PicSetBrightness,*pstACE_PicSetBrightness;

typedef struct _stACE_PicSetBrightnessPrecise
{
    MS_BOOL eWindow;
    MS_U16 u16Brightness_R;
    MS_U16 u16Brightness_G;
    MS_U16 u16Brightness_B;
} stACE_PicSetBrightnessPrecise,*pstACE_PicSetBrightnessPrecise;

typedef struct _stACE_PreYOffset
{
    MS_BOOL eWindow;
    MS_U8 u8PreYOffset;
} stACE_PreYOffset,*pstACE_PreYOffset;

typedef struct _stACE_PicSetSharpness
{
    MS_BOOL eWindow;
    MS_U8 u8Sharpness;
} stACE_PicSetSharpness,*pstACE_PicSetSharpness;

typedef struct _stACE_PicSetHue
{
    MS_BOOL eWindow;
    MS_BOOL bUseYUVSpace;
    MS_U8 u8Hue;
} stACE_PicSetHue,*pstACE_PicSetHue;

typedef struct _stACE_PicSetContrast
{
    MS_BOOL eWindow;
    MS_BOOL bUseYUVSpace;
    MS_U8 u8Contrast;
} stACE_PicSetContrast,*pstACE_PicSetContrast;

typedef struct _stACE_SkipWaitVsync
{
    MS_BOOL eWindow;
    MS_BOOL bIsSkipWaitVsyn;
    E_XC_ACE_RESULT eResult;
} stACE_SkipWaitVsync,*pstACE_SkipWaitVsync;

typedef struct _stACE_PicSetSaturation
{
    MS_BOOL eWindow;
    MS_BOOL bUseYUVSpace;
    MS_U8 u8Saturation;
} stACE_PicSetSaturation,*pstACE_PicSetSaturation;

typedef struct _stACE_SetFleshTone
{
    MS_BOOL eWindow;
    MS_BOOL bEn;
    MS_U8 u8FleshTone;
} stACE_SetFleshTone,*pstACE_SetFleshTone;

typedef struct _stACE_SetBlackAdjust
{
    MS_BOOL eWindow;
    MS_U8 u8BlackAdjust;
} stACE_SetBlackAdjust,*pstACE_SetBlackAdjust;

typedef struct DLL_PACKED _stACE_PicSetColorTemp
{
    MS_BOOL eWindow;
    MS_BOOL bUseYUVSpace;
    XC_ACE_color_temp* pstColorTemp;
} stACE_PicSetColorTemp,*pstACE_PicSetColorTemp;

typedef struct DLL_PACKED _stACE_PicSetColorTempEx
{
    MS_BOOL eWindow;
    MS_BOOL bUseYUVSpace;
    XC_ACE_color_temp_ex* pstColorTemp;
} stACE_PicSetColorTempEx,*pstACE_PicSetColorTempEx;

typedef struct DLL_PACKED _stACE_PicSetPostColorTemp_V02
{
    MS_BOOL eWindow;
    XC_ACE_color_temp_ex2* pstColorTemp;
} stACE_PicSetPostColorTemp_V02,*pstACE_PicSetPostColorTemp_V02;

typedef struct DLL_PACKED _stACE_PicSetPostColorTemp
{
    MS_BOOL eWindow;
    XC_ACE_color_temp* pstColorTemp;
} stACE_PicSetPostColorTemp,*pstACE_PicSetPostColorTemp;

typedef struct DLL_PACKED _stACE_PicSetPostColorTempEx
{
    MS_BOOL eWindow;
    MS_BOOL bUseYUVSpace;
    XC_ACE_color_temp_ex* pstColorTemp;
} stACE_PicSetPostColorTempEx,*pstACE_PicSetPostColorTempEx;

typedef struct DLL_PACKED _stACE_GetLibVer
{
    const MSIF_Version **ppVersion;
    E_XC_ACE_RESULT eResult;
} stACE_GetLibVer,*pstACE_GetLibVer;

typedef struct DLL_PACKED _stACE_GetInfo
{
    const XC_ACE_ApiInfo* pstApiInfo;
} stACE_GetInfo,*pstACE_GetInfo;

typedef struct _stACE_SetDbgLevel
{
    MS_U16 u16DbgSwitch;
    MS_BOOL bReturn;
} stACE_SetDbgLevel,*pstACE_SetDbgLevel;

typedef struct DLL_PACKED _stACE_GetStatus
{
    XC_ACE_ApiStatus *pDrvStatus;
    MS_BOOL bWindow;
    MS_BOOL bReturn;
} stACE_GetStatus,*pstACE_GetStatus;

typedef struct _stACE_MWESetMirrorMode
{
    E_XC_ACE_MWE_MIRROR_TYPE eMirrorMode;
} stACE_MWESetMirrorMode,*pstACE_MWESetMirrorMode;

typedef struct _stACE_EnableMWE
{
    MS_BOOL bEnable;
} stACE_EnableMWE,*pstACE_EnableMWE;

typedef struct _stACE_3DClonePQMap
{
    XC_ACE_WEAVETYPE enWeaveType;
} stACE_3DClonePQMap,*pstACE_3DClonePQMap;

typedef struct DLL_PACKED _stACE_MWESetRegTable
{
    XC_ACE_TAB_Info *pMWETable;
    MS_BOOL bReturn;
} stACE_MWESetRegTable,*pstACE_MWESetRegTable;

typedef struct _stACE_SetMWELoadFromPQ
{
    MS_BOOL bEnable;
    MS_BOOL bReturn;
} stACE_SetMWELoadFromPQ,*pstACE_SetMWELoadFromPQ;

typedef struct _stACE_MWESetDispWin
{
    MS_U16 u16MWE_Disp_Hstart;
    MS_U16 u16MWE_Disp_Vstart;
    MS_U16 u16MWE_Disp_Width;
    MS_U16 u16MWE_Disp_Height;
} stACE_MWESetDispWin,*pstACE_MWESetDispWin;

typedef struct _stACE_MWEStatus
{
    MS_BOOL bReturn;
} stACE_MWEStatus,*pstACE_MWEStatus;

typedef struct _stACE_MWEFuncSel
{
    MS_BOOL eWindow;
    E_XC_ACE_MWE_FUNC mwe_func;
} stACE_MWEFuncSel,*pstACE_MWEFuncSel;

typedef struct DLL_PACKED _stACE_Set_IHC_SRAM
{
    MS_U16 *pBuf;
    MS_U16 u16ByteSize;
    MS_BOOL bReturn;
} stACE_Set_IHC_SRAM,*pstACE_Set_IHC_SRAM;

typedef struct DLL_PACKED _stACE_Set_ICC_SRAM
{
    MS_U16 *pBuf;
    MS_U16 u16ByteSize;
    MS_BOOL bReturn;
} stACE_Set_ICC_SRAM,*pstACE_Set_ICC_SRAM;

typedef struct _stACE_DNR_Get_PrecisionShift
{
    MS_U16 u16Return;
} stACE_DNR_Get_PrecisionShift,*pstACE_DNR_Get_PrecisionShift;

typedef struct DLL_PACKED _stACE_DNR_Blending_NRTbl
{
    MS_U8 *pu8NewNR;
    MS_U8 u8Weight;
    MS_U8 u8Step;
    MS_U16 *pu16PreY0;
    MS_U16 *pu16PreY1;
    MS_U8 *pu8NRTBL;
} stACE_DNR_Blending_NRTbl,*pstACE_DNR_Blending_NRTbl;

typedef struct _stACE_DNR_Blending
{
    MS_U8 u8NewItem;
    MS_U16 u16PreItem;
    MS_U8 u8Weight;
    MS_U8 u8Return;
} stACE_DNR_Blending,*pstACE_DNR_Blending;

typedef struct _stACE_DNR_Blending_MISC
{
    MS_U8 u8NewItem;
    MS_U16 u16PreItem;
    MS_U8 u8Weight;
    MS_U8 u8Step;
    MS_U16 u16Return;
} stACE_DNR_Blending_MISC,*pstACE_DNR_Blending_MISC;

typedef struct _stACE_DNR_GetMotion
{
    MS_U8 u8Return;
} stACE_DNR_GetMotion,*pstACE_DNR_GetMotion;

typedef struct _stACE_DNR_GetMotion_Weight
{
    MS_U8 u8CurMotion;
    MS_U8 u8PreMotion;
    MS_U8 u8CurMotionLvl;
    MS_U8 u8PreMotionLvl;
    MS_U8 u8DeFlick_Thre;
    MS_U8 u8DeFilick_Step;
    MS_U8 u8Return;
} stACE_DNR_GetMotion_Weight,*pstACE_DNR_GetMotion_Weight;

typedef struct _stACE_DNR_DNR_GetNoise_Weight
{
    MS_U8 u8CurNoise;
    MS_U8 u8PreNoise;
    MS_U8 u8Range;
    MS_U8 u8DeFlick_Th;
    MS_U8 u8DeFlick_Step;
    MS_U8 u8Return;
} stACE_DNR_GetNoise_Weight,*pstACE_DNR_GetNoise_Weight;

typedef struct _stACE_DNR_GetLuma_Weight
{
    MS_U8 u8CurAvgLuma;
    MS_U8 u8PreAvgLuam;
    MS_U8 u8CurLumaLvl;
    MS_U8 u8PreLumaLvl;
    MS_U8 u8DeFlick_Th;
    MS_U8 u8DeFlick_Step;
    MS_U8 u8Return;
} stACE_DNR_GetLuma_Weight,*pstACE_DNR_GetLuma_Weight;

typedef struct _stACE_DNR_GetParam
{
    MS_BOOL eWindow;
    XC_ACE_DNR_Param eParam;
    MS_U8 u8Return;
} stACE_DNR_GetParam,*pstACE_DNR_GetParam;

typedef struct _stACE_DNR_SetParam
{
    MS_BOOL eWindow;
    XC_ACE_DNR_Param eParam;
    MS_U16 u16val;
} stACE_DNR_SetParam,*pstACE_DNR_SetParam;

typedef struct DLL_PACKED _stACE_DNR_SetNRTbl
{
    MS_U8 *pu8Tbl;
} stACE_DNR_SetNRTbl,*pstACE_DNR_SetNRTbl;

typedef struct DLL_PACKED _stACE_ColorCorrectionTable
{
    MS_BOOL bScalerWin;
    MS_S16 *psColorCorrectionTable;
} stACE_ColorCorrectionTable,*pstACE_ColorCorrectionTable;

typedef struct _stACE_SetRBChannelRange
{
    MS_BOOL bScalerWin;
    MS_BOOL bRange;
} stACE_SetRBChannelRange,*pstACE_SetRBChannelRange;

typedef struct _stACE_SetColorMatrixControl
{
    MS_BOOL bScalerWin;
    MS_BOOL bEnable;
} stACE_SetColorMatrixControl,*pstACE_SetColorMatrixControl;

typedef struct DLL_PACKED _stACE_SetColorMatrix
{
    MS_BOOL eWindow;
    MS_U16* pu16Matrix;
} stACE_SetColorMatrix,*pstACE_SetColorMatrix;

typedef struct _stACE_Set_PowerState
{
    EN_POWER_MODE enPowerState;
    MS_U32 u32Return;
} stACE_Set_PowerState,*pstACE_Set_PowerState;

typedef struct DLL_PACKED _stACE_SetHDRInitData
{
    XC_ACE_HDRinit *pstHDRInitData;
    MS_BOOL bReturn;
} stACE_SetHDRInitData, *pstACE_HDRInitData;

typedef struct _stACE_SetContrastByGammaTable
{
    MS_BOOL bScalerWin;
    MS_BOOL bEnable;
    MS_U8 u8Contrast;
    MS_U8 u8BaseValue;
} stACE_SetContrastByGammaTable, *pstACE_SetContrastByGammaTable;

#ifdef __cplusplus
}
#endif

#undef _API_ACE_PRIV_H_
#endif
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx2.h"
#ifndef _API_HDMITX_H_
#define _API_HDMITX_H_ 

#include "MsTypes.h"






#ifdef __cplusplus
extern "C"
{
#endif
# 158 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx2.h"
typedef enum
{
    HDMITX_RES_640x480p =0,
    HDMITX_RES_720x480i = 1,
    HDMITX_RES_720x576i = 2,
    HDMITX_RES_720x480p = 3,
    HDMITX_RES_720x576p = 4,
    HDMITX_RES_1280x720p_50Hz = 5,
    HDMITX_RES_1280x720p_60Hz = 6,
    HDMITX_RES_1920x1080i_50Hz = 7,
    HDMITX_RES_1920x1080i_60Hz = 8,
    HDMITX_RES_1920x1080p_24Hz = 9,
    HDMITX_RES_1920x1080p_25Hz = 10,
    HDMITX_RES_1920x1080p_30Hz = 11,
    HDMITX_RES_1920x1080p_50Hz = 12,
    HDMITX_RES_1920x1080p_60Hz = 13,
    HDMITX_RES_MAX = 14,
} HDMITX_VIDEO_TIMING;
# 185 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx2.h"
MS_BOOL MApi_HDMITx2_Init(void);

MS_BOOL MApi_HDMITx2_Exit(void);

void MApi_HDMITx2_SetInitTiming(HDMITX_VIDEO_TIMING TFlag1);

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGPD_v2.h"
#ifndef _API_GPD_V2_H_
#define _API_GPD_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"





typedef enum {
    MApi_CMD_GPD_Init,
    MApi_CMD_GPD_InputSource,
    MApi_CMD_GPD_OutputDecode,
    MApi_CMD_GPD_OutputDecodeROI,
    MApi_CMD_GPD_OutputDecodeMGIF,
    MApi_CMD_GPD_GetDuration,
    MApi_CMD_GPD_SetGIFMode,
    MApi_CMD_GPD_ScalingEnable,
    MApi_CMD_GPD_ScalingDisable,
    MApi_CMD_GPD_SetControl,
    MApi_CMD_GPD_GetControl,
    MApi_CMD_GPD_GetCRCResult
} E_GPD_V2_IOCTL_CMD;


typedef struct DLL_PACKED _GPD_INIT_PARAM
{
    MS_PHY SrcBuf;
    void* retVal;
}GPD_INIT_PARAM, *PGPD_INIT_PARAM;

typedef struct DLL_PACKED _GPD_INPUTSOURCE_PARAM
{
    gpd_pic_info* param;
    MS_PHY InputBuf;
    MS_U32 Size;
    MS_S32 retVal;
}GPD_INPUTSOURCE_PARAM, *PGPD_INPUTSOURCE_PARAM;

typedef struct DLL_PACKED _GPD_OUTPUTDECODE_PARAM
{
    MS_PHY DecodeBuf;
    MS_U32 ocolor;
    MS_U32 Size;
    MS_S32 retVal;
}GPD_OUTPUTDECODE_PARAM, *PGPD_OUTPUTDECODE_PARAM;

typedef struct DLL_PACKED _GPD_OUTPUTDECODEROI_PARAM
{
    MS_PHY DecodeBuf;
    MS_U32 ocolor;
    MS_U32 Size;
    gpd_roi_info *roi;
    MS_S32 retVal;
}GPD_OUTPUTDECODEROI_PARAM, *PGPD_OUTPUTDECODEROI_PARAM;

typedef struct DLL_PACKED _GPD_GETDURATION_PARAM
{
    MS_S32 retVal;
}GPD_GETDURATION_PARAM, *PGPD_GETDURATION_PARAM;

typedef struct DLL_PACKED _GPD_SETGIFMODE_PARAM
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    int mode;
#else
   MS_U32 mode;
#endif
}GPD_SETGIFMODE_PARAM, *PGPD_SETGIFMODE_PARAM;

typedef struct DLL_PACKED _GPD_SCALINGENABLE_PARAM
{
    MS_U32 mode;
}GPD_SCALINGENABLE_PARAM, *PGPD_SCALINGENABLE_PARAM;


typedef struct DLL_PACKED _GPD_CONTROL_PARAM
{
    gpd_user_cmd cmd_id;
    MS_VIRT param;
    MS_S32 retVal;
}GPD_CONTROL_PARAM, *PGPD_CONTROL_PARAM;

typedef struct DLL_PACKED _GPD_GET_CONTROL_PARAM
{
    gpd_get_cmd cmd_id;
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    U32* param;
#else
    MS_VIRT param;
#endif
    MS_S32 retVal;
}GPD_GET_CONTROL_PARAM, *PGPD_GET_CONTROL_PARAM;

typedef struct DLL_PACKED _GPD_GETCRCRESULT_PARAM
{
    const MS_U8 *pu8Data;
    MS_U32 u32Size;
    MS_U32 u32Width;
    MS_U32 ocolor;
    MS_U32 retVal;
}GPD_GETCRCRESULT_PARAM, *PGPD_GETCRCRESULT_PARAM;


void GPDRegisterToUtopia(FUtopiaOpen ModuleType);
MS_U32 GPD_Open(void** ppInstance, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 GPD_Close(void* pInstance);
MS_U32 GPD_Ioctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);


#ifdef __cplusplus
}
#endif

#endif
# 96 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drv_mfe_st.h"
#ifndef _DRV_MFE_ST_H_
#define _DRV_MFE_ST_H_ 

#ifdef __cplusplus
extern "C"
{
#endif


#define MFE_SUPPORT_REDUCE_MODE 





typedef enum {
    MFE_Invalid = 0x00,
    MFE_Init = 0x20,
    MFE_Idle = 0x30,
    MFE_Busy = 0x40,
    MFE_DeInit = 0x50,
    MFE_Error = 0x60,
    MFE_ReInit = 0x70,

 } MFE_STATE;


typedef enum
{
MFE_CLK_VERY_SLOW = 0,
MFE_CLK_SLOW = 1,
MFE_CLK_MEDIUM = 2,
MFE_CLK_FAST = 3,
} MFE_CLK_LEVEL;


typedef enum
{
BITS_INFO_ZERO = 0,
BITS_INFO_UNKNOW,
BITS_INFO_FRAMEDONE,
BITS_INFO_BUFFULL,
BITS_INFO_IMG_BUFFULL,
} BITS_STATUS_INFO;


typedef enum
{
GETBITS_NOT_READY=0,
GETBITS_READY=1,
} MFE_HW_STATUS;


typedef enum
{
PROGRESSIVE = 0,
INTERLACE_SPLITED,
INTERLACE_NONSPLITED,
} MFE_INTERLACE_INFO;


typedef enum
{
YUVTILE = 0,
MSTTILE = 1,
MFE_YUYV = 2,
MFE_YVYU = 3,
MFE_UYVY = 4,
MFE_VYUY = 5,
MFE_EVDTILE = 6,
MFE_32x32TILE = 7,
MFE_NV12 = 8,
MFE_NV21 = 9,
} MFE_COLOR_FORMAT_INFO;

#define MAX_OUTBUFFER 10UL


typedef struct {
    MS_PHY miuAddress;
    MS_VIRT miuPointer;
    MS_VIRT virtual_addr;
    MS_S32 size;
    BITS_STATUS_INFO status;
    MS_S32 is_more_bits;
    MS_U8 voptype;
    MS_PHY IVOP_address;
    MS_S32 stuffing_bytes;
} BITSFRAME_INFO;


typedef struct MEMMAP
{
    MS_U8 *miuPointer;
    MS_PHY miuAddress;
    MS_U32 size;
} MEMMAP_t;


typedef struct MEMMAP_CUR
{
    MEMMAP_t Cur_Y0;
    MEMMAP_t Cur_C0;
    MEMMAP_t Cur_Y1;
    MEMMAP_t Cur_C1;
} MEMMAP_CUR_t;


typedef struct _MFE_CROP_INFO
{
    MS_BOOL crop_en;
    MS_U32 crop_top;
    MS_U32 crop_bottom;
    MS_U32 crop_left;
    MS_U32 crop_right;
} MFE_CROP_INFO_t;


typedef struct _MFE_API_INFO
{
    MS_PHY miu_offset;
    MS_PHY mfe_phy_buf_addr;
    MS_VIRT mfe_vir_buf_ptr;
    MS_U32 mfe_phy_buf_size;
    MS_U32 Encode_stop;
} MFE_API_INFO_t;


typedef struct _MFE_ADV_INFO
{
    MS_U32 low_bandwidth_en;
    MS_U32 input_imi_en;
    MEMMAP_t imi_buf_addr;
} MFE_ADV_INFO_t;


typedef struct{
    MS_U32 is_off;
    MFE_CLK_LEVEL clock_level;
} POWERON_t;


typedef struct _SPSPPS_INFO
{
    MS_U8* pHeaderSPS;
    MS_U32 SPSLen;
    MS_U8* pHeaderPPS;
    MS_U32 PPSLen;
} SPSPPS_INFO_t;


typedef struct _VOL_INFO
{
    MS_U8* pHeader;
    MS_U32 Len;
} VOL_INFO_t;



typedef void (*StreamCallback)(void *pCtx, MS_S32 s32FrameType, void *pStreamData, MS_U32 u32DataLen, MS_U32 bFirstOrLastByteOfFrame);


typedef void (*CleanCallback)(MS_U32 u32FrameCoded, MS_VIRT u32YUVPlane);





typedef struct{

    MS_S32 width;
    MS_S32 height;
    MS_PHY BitsBuffStart;
    MS_U32 BitsBuffSize;
    MS_S32 nOutBuffer;
    MS_S32 OutBufferSize;
    MEMMAP_t InBuffer;
    MEMMAP_t BitstreamOutBuffer;
    MS_S32 BitstreamOutBufferSize;



    MS_S32 nCodecType;
    MS_S32 nDispWidth, nDispHeight;
    MS_S32 nBufWidth, nBufHeight;
    MFE_INTERLACE_INFO bInterlace;
    MFE_COLOR_FORMAT_INFO bColorFormat;

    MS_S32 nPbetweenI;
    MS_S32 nBbetweenP;
    MS_S32 nP_is_infinite;

    MS_S32 FrameRatex100;
    MS_S32 nBitrate;
    MS_S32 m_bFrameMode;
    MS_S32 out_frametag_top;

    MS_S32 nTotalFrames;
    MS_S32 TimeIncreamentRes;
    MS_S32 VopTimeIncreament;

    MS_S32 quality;
    MS_S32 fdc_mode;
    MS_S32 exif_enable;
    MFE_CLK_LEVEL MFEClk;

    MFE_API_INFO_t MfeApiInfo;
    MFE_ADV_INFO_t MfeAdvInfo;

    MS_U32 nDropFlag;
    MS_U32 nSkipFlag;
    MS_U32 enableVTRateControl;
    MS_U32 enableSecurityMode;
    MS_U32 enableISR;
    MS_U32 enableCABAC;

    MFE_CROP_INFO_t MfeCropInfo;
    MS_U32 enableReduceBW;
    MS_U32 enableFastMode;
    MFE_STATE mfe_state;
    void* g_pCustomCtx;
    StreamCallback g_StreamCallBackFunc;
    CleanCallback g_CleanCallBackFunc;

    void* mfe_drvHandle;

    MS_S32 reserved0;
    MS_S32 reserved1;
    MS_S32 reserved2;
    MS_S32 reserved3;
    MS_S32 reserved4;
    MS_S32 reserved5;
}PVR_Info;

#define API_HWCAP_VERSION0 1UL


typedef struct{
    MS_U32 u32ApiHW_Version;
    MS_U16 u16ApiHW_Length;
    MS_BOOL bIsSupportEncoder;
    MS_U8 u8MaxEncodeFrame;
    MS_U16 u16MaxEncodeWidth;
    MS_U16 u16MaxEncodeHeight;
    MS_BOOL bSupportSubVidWin;
    MS_BOOL bSupportMpeg4;
    MS_BOOL bSupportH264;

}MFE_HwCapV0;

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiACP.h"
#ifndef _API_ACP_H_
#define _API_ACP_H_ 

#ifdef __cplusplus
extern "C" {
#endif





#define MSIF_ACP_LIB_CODE {'A','C','P','_'}
#define MSIF_ACP_LIBVER {'0','0'}
#define MSIF_ACP_BUILDNUM {'0','2'}
#define MSIF_ACP_CHANGELIST {'0','0','6','1','4','0','9','2'}






typedef enum _ACP_Result
{
    E_ACP_NOT_SUPPORT = -1,
    E_ACP_FAIL = 0,
    E_ACP_OK = 1,
} ACP_Result;


typedef enum
{
    MS_VE_MV_NTSC_START = 0,
    MS_VE_MV_NTSC_TYPE1 = MS_VE_MV_NTSC_START,
    MS_VE_MV_NTSC_TYPE2,
    MS_VE_MV_NTSC_TYPE3,
    MS_VE_MV_NTSC_TEST_N01,
    MS_VE_MV_NTSC_TEST_N02,
    MS_VE_MV_NTSC_TYPE2_TTX,
    MS_VE_MV_NTSC_TEST_N01_TTX,
    MS_VE_MV_PAL_START = 0x10,
    MS_VE_MV_PAL_TYPE1 = MS_VE_MV_PAL_START,
    MS_VE_MV_PAL_TYPE2,
    MS_VE_MV_PAL_TYPE3,
    MS_VE_MV_PAL_TEST_P01,
    MS_VE_MV_PAL_TEST_P02,
    MS_VE_MV_PAL_TYPE2_TTX,
    MS_VE_MV_PAL_TEST_P01_TTX,
} MS_VE_MV_TYPE;

typedef struct
{
    MS_U8 u8CPC[2];
    MS_U8 u8CPS[34];
}MS_ACP_MV_ByteInfo;

typedef struct
{

    MS_U32 u32ACP_MV_BitControl_version;
    MS_U32 u32ACP_MV_BitControl_Length;

    MS_BOOL bIsYPbPr;
    union
    {
        MS_U8 u8MV_ByteInfo[36];
        MS_ACP_MV_ByteInfo MV_ByteInfo;
    }__attribute__ ((__packed__))ByteInfo ;
}MS_ACP_MV_BitControl;
# 183 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiACP.h"
ACP_Result SYMBOL_WEAK MApi_ACP_SetProtection(MS_BOOL bEnable, MS_BOOL bIsYPbPr, MS_U8 u8Type);
# 192 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiACP.h"
ACP_Result MApi_ACP_SetMV_BitControl(MS_BOOL bEnable, MS_ACP_MV_BitControl MV_BitControl_Data);
# 201 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiACP.h"
ACP_Result MApi_DCS_SetProtection(MS_BOOL bEnable, MS_U8 u8Type);
# 210 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiACP.h"
ACP_Result MApi_DCS_SetActivationKey(MS_U8 *pu8ActivationKeyTbl, MS_U8 u8ActivationKeyTblSize);

#ifdef __cplusplus
}
#endif

#endif
# 122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
#ifndef _DRVPWS_H_
#define _DRVPWS_H_ 
# 134 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsCommon.h"
#include "MsTypes.h"




#define MSIF_PWS_LIB_CODE {'P','W','S','_'}
#define MSIF_PWS_LIBVER {'0','2'}
#define MSIF_PWS_BUILDNUM {'0','9'}
#define MSIF_PWS_CHANGELIST {'0','0','4','4','8','1','7','6'}

#define PWS_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_PWS_LIB_CODE, \
    MSIF_PWS_LIBVER, \
    MSIF_PWS_BUILDNUM, \
    MSIF_PWS_CHANGELIST, \
    MSIF_OS

#define SIOCDEVON 0x89F1
#define SIOCDEVOFF 0x89F2

#define PWS_VERSION 0x00000001






typedef enum
{
    PWS_FAIL = 0,
    PWS_SUCCESS = 1
} E_PWS_Result;

#if defined (MSOS_TYPE_LINUX)
typedef enum
{
    PHY_OFF = 0,
    PHY_ON = 1
} E_PWS_PHY;
#endif

typedef enum
{
    PWS_ADD_SOURCE = 0,
    PWS_DEL_SOURCE = 1,
    PWS_INVAILD_OP = 2
} E_PWS_Operation;

typedef enum
{
    PWS_FULL = 0,
    PWS_OFF_LINE_DETECT = 1
} E_PWS_Sync;

typedef enum
{
    _NO_SOURCE_ = 0,
    _USB_ = BIT_(0),
    _SV_ = BIT_(1),
    _HDMI4_ = BIT_(2),
    _HDMI3_ = BIT_(3),
    _HDMI2_ = BIT_(4),
    _HDMI1_ = BIT_(5),
    _YPbPr_ = BIT_(6),
    _SCART_ = BIT_(7),
    _RGB_ = BIT_(8),
    _CVBS_ = BIT_(9),
    _ATV_SSIF_ = BIT_(10),
    _ATV_VIF_ = BIT_(11),
    _DTV_ATSC_ = BIT_(12),
    _DTV_DVB_ = BIT_(13),
    _CVBSOe_ = BIT_(14),
    _CVBSOi_ = BIT_(15),
    _UNKNOWN_ = BIT_(16)
} E_PWS_SouceInfo;

typedef enum
{
    E_PWS_DBGLV_NONE,
    E_PWS_DBGLV_ERR_ONLY,
    E_PWS_DBGLV_REG_DUMP,
    E_PWS_DBGLV_INFO,
    E_PWS_DBGLV_ALL
} E_PWS_DBG_LEVEL;

typedef struct
{
    E_PWS_DBG_LEVEL u8DbgLevel;
    MS_BOOL bInit;
} PWS_Status;

typedef struct
{
    E_PWS_SouceInfo SourceList;
    MS_U32 u32IOMap;
} PWS_Info;

typedef enum
{
    E_PWS_API_UNUSED = 0,
    E_PWS_USE_HANDLE_SOURCE = 1,
    E_PWS_USE_HANDLE_IP = 2
} E_PWS_Use;

typedef enum
{
    E_PWS_IP_ON = 0,
    E_PWS_IP_OFF = 1,
    E_PWS_IP_RESET = 2,
} E_PWS_IpPowerCtrl;

typedef enum
{
    E_PWS_IP_CALLBACK_BEFORE_ON = 0,
    E_PWS_IP_CALLBACK_BEFORE_OFF = 1,
    E_PWS_IP_CALLBACK_AFTER_ON = 2,
    E_PWS_IP_CALLBACK_AFTER_OFF = 3,
    E_PWS_IP_CALLBACK_UNKNOWN = 4
} E_PWS_CallbackCtrl;

#define STR_LEN 32
typedef void (*P_PWS_Callback)(void);
typedef struct
{
    E_PWS_CallbackCtrl ctrl;
    unsigned char regName[STR_LEN];
    P_PWS_Callback _PWSCallback;
} PWS_RegisterCallback;

typedef enum
{
    E_PWS_VIF_NO_SAW = 0,
    E_PWS_VIF_SINGLE_SAW = 1,
    E_PWS_VIF_DUAL_SAW = 2,
    E_PWS_VIF_SINGLE_SAW_DIF = 3,
    E_PWS_VIF_UNKNOWN = 3
} E_PWS_VIF_type;

#define PWS_Register_CB_size 2


typedef enum
{
    E_PWS_IP_AUDIO = 0,
    E_PWS_IP_DEMOD,
    E_PWS_IP_AUPLL,
    E_PWS_IP_USB_PORT0,
    E_PWS_IP_USB_PORT1,
    E_PWS_IP_USB_PORT2,
    E_PWS_IP_USB_PORT3,
    E_PWS_IP_USB_3,
    E_PWS_IP_MHL,
    E_PWS_IP_VEDIO,
    E_PWS_IP_ATSC_DVBTC,
    E_PWS_IP_GME,
    E_PWS_IP_GMAC,
    E_PWS_IP_IDAC,
    E_PWS_IP_ETH,
    E_PWS_IP_TSP,
    E_PWS_IP_CLK_R2_SECURE,
    E_PWS_IP_VE,
    E_PWS_IP_AUDIO_R2,
    E_PWS_IP_MAX
} E_PWS_IP_name;

typedef enum
{
    E_PWS_SCENE_MM_MAIN = 0,
    E_PWS_SCENE_MM_SUB,
    E_PWS_SCENE_MAX
} E_PWS_SCENE_name;
# 329 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_GetLibVer(const MSIF_Version **ppVersion);
# 338 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_SetDbgLevel(E_PWS_DBG_LEVEL eLEVEL);
# 347 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
void MDrv_PWS_GetInfo(PWS_Info *pInfo);
# 356 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
void MDrv_PWS_GetStatus(PWS_Status *pStatus);
# 365 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_SouceInfo MDrv_PWS_GetSourceInfo(void);
# 374 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
MS_U16 MDrv_PWS_Read2Byte(MS_U32 u32RegAddr );
# 383 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_IpPowerControl(E_PWS_IP_name eIpName, E_PWS_IpPowerCtrl pwr_type);
# 392 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_ScenePowerControl(E_PWS_SCENE_name eSceneName, E_PWS_IpPowerCtrl pwr_type);
# 401 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_Init(E_PWS_VIF_type eVifType);
# 410 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_HandleSource(E_PWS_Operation operation,E_PWS_SouceInfo source,E_PWS_Sync sync_type);
# 419 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_HandleIP(E_PWS_IpPowerCtrl IpPowerCtrl,const unsigned char *RegName);
# 428 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_RegisterCallback(MS_U8 index,E_PWS_CallbackCtrl cb_ctrl,unsigned char *RegName,P_PWS_Callback pfCallback);
# 437 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_CancelCallback(MS_U8 index);
# 446 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
MS_U32 MDrv_PWS_SetPowerState(EN_POWER_MODE u16PowerState);
#if defined (MSOS_TYPE_LINUX)
# 456 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
E_PWS_Result MDrv_PWS_PHYPower(E_PWS_PHY bSetFlag);
#endif




typedef enum {
    MDrv_CMD_PWS_GetLibVer,
    MDrv_CMD_PWS_SetDbgLevel,
    MDrv_CMD_PWS_HandleSource,
    MDrv_CMD_PWS_PHYPower,
} ePwsIoctlOpt;

typedef E_PWS_Result (*IOCTL_PWS_GETLIBVER)(const MSIF_Version **);
typedef E_PWS_Result (*IOCTL_PWS_SETDBGLEVEL)(E_PWS_DBG_LEVEL);
typedef E_PWS_Result (*IOCTL_PWS_HANDLESOURCE)(E_PWS_Operation, E_PWS_SouceInfo, E_PWS_Sync);
#if defined (MSOS_TYPE_LINUX)
typedef E_PWS_Result (*IOCTL_PWS_PHYPOWER)(E_PWS_PHY);
#endif

typedef struct _PWS_INSTANT_PRIVATE
{
    IOCTL_PWS_GETLIBVER fpPWSGetLibVer;
    IOCTL_PWS_SETDBGLEVEL fpPWSSetDbgLevel;
    IOCTL_PWS_HANDLESOURCE fpPWSHandleSource;
#if defined (MSOS_TYPE_LINUX)
    IOCTL_PWS_PHYPOWER fpPWSPHYPower;
#endif
}PWS_INSTANT_PRIVATE;


typedef struct _PWS_GETLIBVER_PARAM
{
    const MSIF_Version **ppVersion;
}PWS_GETLIBVER_PARAM, *PPWS_GETLIBVER_PARAM;


typedef struct _PWS_SETDBGLEVEL_PARAM
{
    E_PWS_DBG_LEVEL DbgLevel;
}PWS_SETDBGLEVEL_PARAM, *PPWS_SETDBGLEVEL_PARAM;


typedef struct _PWS_HANDLESOURCE_PARAM
{
    E_PWS_Operation operation;
    E_PWS_SouceInfo source;
    E_PWS_Sync sync_type;
}PWS_HANDLESOURCE_PARAM, *PPWS_HANDLESOURCE_PARAM;

#if defined (MSOS_TYPE_LINUX)

typedef struct _PWS_PHYPOWER_PARAM
{
    E_PWS_PHY bSetFlag;
}PWS_PHYPOWER_PARAM, *PPWS_PHYPOWER_PARAM;
#endif

void PWSRegisterToUtopia(FUtopiaOpen ModuleType);
# 523 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
MS_U32 PWSOpen(void** pInstance, MS_U32 u32ModuleVersion, void* pAttribute);
# 532 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
MS_U32 PWSClose(void* pInstance);
# 541 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPWS.h"
MS_U32 PWSIoctl(void* pInstance, MS_U32 u32Cmd, void *pArgs);


typedef struct _PWS_RESOURCE_PRIVATE
{
    MS_U32 Dummy;
}PWS_RESOURCE_PRIVATE;

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCIPHER_v2.h"
#ifndef _DRV_CIPHER_V2_H_
#define _DRV_CIPHER_V2_H_ 

#include "drvCIPHER.h"

#ifdef __cplusplus
extern "C"
{
#endif







typedef enum {
    E_MDRV_CMD_CIPHER_Init,
    E_MDRV_CMD_CIPHER_Reset,
    E_MDRV_CMD_CIPHER_ResetKey,
    E_MDRV_CMD_CIPHER_DbgLevel,
    E_MDRV_CMD_CIPHER_DMACalc,
    E_MDRV_CMD_CIPHER_HASH,
    E_MDRV_CMD_CIPHER_IsDMADone,
    E_MDRV_CMD_CIPHER_IsHASHDone,

} eCipherIoctlOpt;
# 137 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCIPHER_v2.h"
typedef struct DLL_PACKED _CIPHER_RESETKEY
{
    MS_U32 u32CAVid;
    MS_U32 u32KeyIdx;
    DRV_CIPHER_RET ret;
} CIPHER_RESETKEY;

typedef struct DLL_PACKED _CIPHER_DBGLEVEL
{
    CIPHER_DBGMSG_LEVEL eDBGMsgLevel;
} CIPHER_DBGLEVEL;

typedef struct DLL_PACKED _CIPHER_DMACALC
{
    DRV_CIPHER_DMACFG stCfg;
    MS_U32 *pu32CmdId;
    DRV_CIPHER_RET ret;
} CIPHER_DMACALC;

typedef struct DLL_PACKED _CIPHER_HASHCALC
{
    DRV_CIPHER_HASHCFG stCfg;
    MS_U32 *pu32CmdId;
    DRV_CIPHER_RET ret;
} CIPHER_HASHCALC;

typedef struct DLL_PACKED _CIPHER_ISDMADONE
{
    MS_U32 u32CmdId;
    MS_U32 *pu32Exception;
} CIPHER_ISDMADONE;

typedef struct DLL_PACKED _CIPHER_ISHASHDONE
{
    MS_U32 u32CmdId;
    MS_U32 *pu32Exception;
} CIPHER_ISHASHDONE;
# 182 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCIPHER_v2.h"
MS_U32 CIPHEROpen(void** pInstantTmp, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 CIPHERClose(void* pInstantTmp);
MS_U32 CIPHERIoctl(void* pInstantTmp, MS_U32 u32Cmd, void* pu32Args);



#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP_v2.h"
#ifndef _MVOP_H_
#define _MVOP_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"

typedef enum
{
    E_MVOP_POOL_ID_INTERNAL = 0,
} E_MVOP_POOL_ID;


typedef enum
{

    E_MVOP_CMD_INIT,
    E_MVOP_CMD_EXIT,
    E_MVOP_CMD_ENABLE,
    E_MVOP_CMD_SET_INPUTCFG,
    E_MVOP_CMD_SET_OTPUTCFG,
    E_MVOP_CMD_ENABLE_BLACK_BG,
    E_MVOP_CMD_ENABLE_UV_SHIFT,
    E_MVOP_CMD_SET_MONO_MODE,

    E_MVOP_CMD_GET_HSIZE,
    E_MVOP_CMD_GET_VSIZE,
    E_MVOP_CMD_GET_HSTART,
    E_MVOP_CMD_GET_VSTART,
    E_MVOP_CMD_GET_IS_INTERLACE,
    E_MVOP_CMD_GET_IS_HDUPLICATE,
    E_MVOP_CMD_GET_IS_ENABLE,
    E_MVOP_CMD_GET_OUTPUT_TIMING,
    E_MVOP_CMD_GET_LIBVER,
    E_MVOP_CMD_CHECK_CAPABILITY,
    E_MVOP_CMD_GET_MAX_HOFFSET,
    E_MVOP_CMD_GET_MAX_VOFFSET,

    E_MVOP_CMD_SET_DBG_LEVEL,
    E_MVOP_CMD_GET_INFO,
    E_MVOP_CMD_GET_STATUS,
    E_MVOP_CMD_SET_CLK,
    E_MVOP_CMD_SET_PATTERN,
    E_MVOP_CMD_SET_TILE_FORMAT,
    E_MVOP_CMD_GET_DST_INFO,
    E_MVOP_CMD_SET_FIXVTT,
    E_MVOP_CMD_SET_MMIO_MAPBASE,
    E_MVOP_CMD_MIU_SWITCH,
    E_MVOP_CMD_SET_BASEADD,
    E_MVOP_CMD_SEL_OP_FIELD,
    E_MVOP_CMD_SET_REGSIZE_FROM_MVD,
    E_MVOP_CMD_SET_START_POS,
    E_MVOP_CMD_SET_IMAGE_WIDTH_HIGHT,
    E_MVOP_CMD_SET_VOP_MIRROR_MODE,
    E_MVOP_CMD_INV_OP_VS,
    E_MVOP_CMD_FORCE_TOP,
    E_MVOP_CMD_ENABLE_FREERUN_MODE,
    E_MVOP_CMD_GET_BASE_ADD,


    E_MVOP_CMD_SUB_INIT,
    E_MVOP_CMD_SUB_EXIT,
    E_MVOP_CMD_SUB_ENABLE,
    E_MVOP_CMD_SUB_SET_INPUTCFG,
    E_MVOP_CMD_SUB_SET_OTPUTCFG,

    E_MVOP_CMD_SUB_ENABLE_BLACK_BG,
    E_MVOP_CMD_SUB_ENABLE_UV_SHIFT,
    E_MVOP_CMD_SUB_SET_MONO_MODE,
    E_MVOP_CMD_SUB_GET_HSIZE,
    E_MVOP_CMD_SUB_GET_VSIZE,
    E_MVOP_CMD_SUB_GET_HSTART,
    E_MVOP_CMD_SUB_GET_VSTART,
    E_MVOP_CMD_SUB_GET_IS_INTERLACE,
    E_MVOP_CMD_SUB_GET_IS_HDUPLICATE,
    E_MVOP_CMD_SUB_GET_IS_ENABLE,
    E_MVOP_CMD_SUB_GET_OUTPUT_TIMING,
    E_MVOP_CMD_SUB_CHECK_CAPABILITY,
    E_MVOP_CMD_SUB_GET_MAXHOFFSET,
    E_MVOP_CMD_SUB_GET_MAXVOFFSET,
    E_MVOP_CMD_SUB_SET_CLK,
    E_MVOP_CMD_SUB_SET_PATTERN,
    E_MVOP_CMD_SUB_SET_TILE_FORMAT,
    E_MVOP_CMD_SUB_GET_DST_INFO,
    E_MVOP_CMD_SUB_SET_FIXVTT,
    E_MVOP_CMD_SUB_SET_MMIO_MAPBASE,
    E_MVOP_CMD_SUB_MIU_SWITCH,
    E_MVOP_CMD_SUB_SET_BASEADD,
    E_MVOP_CMD_SUB_SET_VOP_MIRRORMODE,
    E_MVOP_CMD_SUB_ENABLE_FREERUN_MODE,
    E_MVOP_CMD_SUB_GET_BASEADD,


    E_MVOP_CMD_EX_INIT,
    E_MVOP_CMD_EX_EXIT,
    E_MVOP_CMD_EX_ENABLE,
    E_MVOP_CMD_EX_SET_INPUTCFG,
    E_MVOP_CMD_EX_SET_OTPUTCFG,

    E_MVOP_CMD_EX_SET_CLK,
    E_MVOP_CMD_EX_SET_PATTERN,
    E_MVOP_CMD_EX_SET_TILEFORMAT,
    E_MVOP_CMD_EX_ENABLE_UV_SHIFT,
    E_MVOP_CMD_EX_ENABLE_BLACK_BG,
    E_MVOP_CMD_EX_SET_MONO_MODE,
    E_MVOP_CMD_EX_SET_FIXVTT,
    E_MVOP_CMD_EX_MIU_SWITCH,
    E_MVOP_CMD_EX_SET_VOP_MIRRORMODE,
    E_MVOP_CMD_EX_ENABLE_FREERUN_MODE,

    E_MVOP_CMD_EX_GET_OUTPUT_TIMING,
    E_MVOP_CMD_EX_GET_IS_ENABLE,
    E_MVOP_CMD_EX_GET_HSIZE,
    E_MVOP_CMD_EX_GET_VSIZE,
    E_MVOP_CMD_EX_GET_HSTART,
    E_MVOP_CMD_EX_GET_VSTART,
    E_MVOP_CMD_EX_GET_IS_INTERLACE,
    E_MVOP_CMD_EX_GET_IS_HDUPLICATE,
    E_MVOP_CMD_EX_GET_STATUS,
    E_MVOP_CMD_EX_CHECK_CAPABILITY,
    E_MVOP_CMD_EX_GET_DST_INFO,

    E_MVOP_CMD_SEND_BLUE_SCREEN,
    E_MVOP_CMD_SET_COMMAND,
    E_MVOP_CMD_GET_COMMAND,
    E_MVOP_CMD_SET_FREQUENCY,

    E_MVOP_CMD_ENABLE_INTERRUPT,
    E_MVOP_CMD_GET_INT_STATUS,
    E_MVOP_CMD_SUB_ENABLE_INTERRUPT,
    E_MVOP_CMD_SUB_GET_INT_STATUS,
    E_MVOP_CMD_EX_ENABLE_INTERRUPT,
    E_MVOP_CMD_EX_GET_INT_STATUS,

    E_MVOP_CMD_SET_POWERSTATE,

    E_MVOP_CMD_NUM,
    E_MVOP_CMD_MAX = E_MVOP_CMD_NUM,
} E_MVOP_IOCTL_CMDS;


typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_ENABLE,*pstMVOP_ENABLE;

typedef struct DLL_PACKED
{
    MVOP_InputSel in;
    MVOP_InputCfg* pCfg;
    MVOP_Result eRet;
} stMVOP_SET_INPUTCFG,*pstMVOP_SET_INPUTCFG;

typedef struct DLL_PACKED
{
    MVOP_VidStat *pstVideoStatus;
    MS_BOOL bEnHDup;
    MVOP_Result eRet;
} stMVOP_SET_OTPUTCFG,*pstMVOP_SET_OTPUTCFG;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_ENABLE_UV_SHIFT,*pstMVOP_ENABLE_UV_SHIFT;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SET_MONO_MODE,*pstMVOP_SET_MONO_MODE;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_GET_HSIZE,*pstMVOP_GET_HSIZE;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_GET_VSIZE,*pstMVOP_GET_VSIZE;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_GET_HSTART,*pstMVOP_GET_HSTART;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_GET_VSTART,*pstMVOP_GET_VSTART;

typedef struct DLL_PACKED
{
    MS_BOOL bRet;
} stMVOP_GET_IS_INTERLACE, *pstMVOP_GET_IS_INTERLACE;

typedef struct DLL_PACKED
{
    MS_BOOL bRet;
} stMVOP_GET_IS_HDUPLICATE, *pstMVOP_GET_IS_HDUPLICATE;

typedef struct DLL_PACKED
{
    MS_BOOL* pbEnable;
    MVOP_Result eRet;
} stMVOP_GET_IS_ENABLE, *pstMVOP_GET_IS_ENABLE;

typedef struct DLL_PACKED
{
    MVOP_Timing* pMVOPTiming;
    MVOP_Result eRet;
} stMVOP_GET_OUTPUT_TIMING, *pstMVOP_GET_OUTPUT_TIMING;

typedef struct DLL_PACKED
{
    const MSIF_Version **ppVersion;
    MVOP_Result eRet;
} stMVOP_GET_LIBVER,*pstMVOP_GET_LIBVER;

typedef struct DLL_PACKED
{
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Fps;
    MVOP_Result bRet;
} stMVOP_CHECK_CAPABILITY,*pstMVOP_CHECK_CAPABILITY;

typedef struct DLL_PACKED
{
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Fps;
    MS_U16 u16Ret;
} stMVOP_GET_MAX_HOFFSET, *pstMVOP_GET_MAX_HOFFSET;

typedef struct DLL_PACKED
{
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Fps;
    MS_U16 u16Ret;
} stMVOP_GET_MAX_VOFFSET, *pstMVOP_GET_MAX_VOFFSET;

typedef struct DLL_PACKED
{
    MS_U8 level;
} stMVOP_SET_DBG_LEVEL,*pstMVOP_SET_DBG_LEVEL;

typedef struct DLL_PACKED
{
    const MVOP_DrvInfo* pRet;
} stMVOP_GET_INFO, *pstMVOP_GET_INFO;

typedef struct DLL_PACKED
{
    MVOP_DrvStatus *pMVOPStat;
    MS_BOOL bRet;
} stMVOP_GET_STATUS, *pstMVOP_GET_STATUS;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SET_CLK, *pstMVOP_SET_CLK;

typedef struct DLL_PACKED
{
    MVOP_Pattern enMVOPPattern;
} stMVOP_SET_PATTERN, *pstMVOP_SET_PATTERN;

typedef struct DLL_PACKED
{
    MVOP_TileFormat eTileFmt;
    MS_BOOL bRet;
} stMVOP_SET_TILE_FORMAT, *pstMVOP_SET_TILE_FORMAT;

typedef struct DLL_PACKED
{
    MVOP_DST_DispInfo *pDstInfo;
    MS_U32 u32SizeofDstInfo;
    MS_BOOL bRet;
} stMVOP_GET_DST_INFO, *pstMVOP_GET_DST_INFO;

typedef struct DLL_PACKED
{
    MS_U16 u16FixVtt;
    MS_BOOL bRet;
} stMVOP_SET_FIXVTT, *pstMVOP_SET_FIXVTT;

typedef struct DLL_PACKED
{
    MS_BOOL bRet;
} stMVOP_SET_MMIO_MAPBASE, *pstMVOP_SET_MMIO_MAPBASE;

typedef struct DLL_PACKED
{
    MS_U8 u8Miu;
    MVOP_Result eRet;
} stMVOP_MIU_SWITCH, *pstMVOP_MIU_SWITCH;

typedef struct DLL_PACKED
{
    MS_PHY u32YOffset;
    MS_PHY u32UVOffset;
    MS_BOOL bProgressive;
    MS_BOOL b422pack;
    MS_BOOL bRet;
} stMVOP_SET_BASEADD, *pstMVOP_SET_BASEADD;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SEL_OP_FIELD, *pstMVOP_SEL_OP_FIELD;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SET_REGSIZE_FROM_MVD, *pstMVOP_SET_REGSIZE_FROM_MVD;

typedef struct DLL_PACKED
{
    MS_U16 u16Xpos;
    MS_U16 u16Ypos;
} stMVOP_SET_START_POS, *pstMVOP_SET_START_POS;

typedef struct DLL_PACKED
{
    MS_U16 u16Width;
    MS_U16 u16Height;
    MS_BOOL bRet;
} stMVOP_SET_IMAGE_WIDTH_HIGHT, *pstMVOP_SET_IMAGE_WIDTH_HIGHT;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MVOP_DrvMirror eMirrorMode;
} stMVOP_SET_VOP_MIRROR_MODE, *pstMVOP_SET_VOP_MIRROR_MODE;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_INV_OP_VS, *pstMVOP_INV_OP_VS;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_FORCE_TOP, *pstMVOP_FORCE_TOP;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_BOOL bRet;
} stMVOP_ENABLE_FREERUN_MODE, *pstMVOP_ENABLE_FREERUN_MODE;

typedef struct DLL_PACKED
{
    MS_PHY* u32YOffset;
    MS_PHY* u32UVOffset;
} stMVOP_GET_BASE_ADD, *pstMVOP_GET_BASE_ADD;


typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SUB_ENABLE,*pstMVOP_SUB_ENABLE;

typedef struct DLL_PACKED
{
    MVOP_InputSel in;
    MVOP_InputCfg* pCfg;
    MVOP_Result eRet;
} stMVOP_SUB_SET_INPUTCFG,*pstMVOP_SUB_SET_INPUTCFG;

typedef struct DLL_PACKED
{
    MVOP_VidStat *pstVideoStatus;
    MS_BOOL bEnHDup;
    MVOP_Result eRet;
} stMVOP_SUB_SET_OTPUTCFG,*pstMVOP_SUB_SET_OTPUTCFG;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SUB_ENABLE_UV_SHIFT,*pstMVOP_SUB_ENABLE_UV_SHIFT;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SUB_SET_MONO_MODE,*pstMVOP_SUB_SET_MONO_MODE;

typedef struct DLL_PACKED
{
    MVOP_DrvStatus *pMVOPStat;
    MS_BOOL bRet;
} stMVOP_SUB_GET_STATUS, *pstMVOP_SUB_GET_STATUS;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_SUB_GET_HSIZE,*pstMVOP_SUB_GET_HSIZE;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_SUB_GET_VSIZE,*pstMVOP_SUB_GET_VSIZE;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_SUB_GET_HSTART,*pstMVOP_SUB_GET_HSTART;

typedef struct DLL_PACKED
{
    MS_U16 u16Ret;
} stMVOP_SUB_GET_VSTART,*pstMVOP_SUB_GET_VSTART;

typedef struct DLL_PACKED
{
    MS_BOOL bRet;
} stMVOP_SUB_GET_IS_INTERLACE, *pstMVOP_SUB_GET_IS_INTERLACE;

typedef struct DLL_PACKED
{
    MS_BOOL bRet;
} stMVOP_SUB_GET_IS_HDUPLICATE, *pstMVOP_SUB_GET_IS_HDUPLICATE;

typedef struct DLL_PACKED
{
    MS_BOOL* pbEnable;
    MVOP_Result eRet;
} stMVOP_SUB_GET_IS_ENABLE, *pstMVOP_SUB_GET_IS_ENABLE;

typedef struct DLL_PACKED
{
    MVOP_Timing* pMVOPTiming;
    MVOP_Result eRet;
} stMVOP_SUB_GET_OUTPUT_TIMING, *pstMVOP_SUB_GET_OUTPUT_TIMING;

typedef struct DLL_PACKED
{
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Fps;
    MS_BOOL bRet;
} stMVOP_SUB_CHECK_CAPABILITY,*pstMVOP_SUB_CHECK_CAPABILITY;

typedef struct DLL_PACKED
{
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Fps;
    MS_U16 u16Ret;
} stMVOP_SUB_GET_MAX_HOFFSET, *pstMVOP_SUB_GET_MAX_HOFFSET;

typedef struct DLL_PACKED
{
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Fps;
    MS_U16 u16Ret;
} stMVOP_SUB_GET_MAX_VOFFSET, *pstMVOP_SUB_GET_MAX_VOFFSET;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
} stMVOP_SUB_SET_CLK, *pstMVOP_SUB_SET_CLK;

typedef struct DLL_PACKED
{
    MVOP_Pattern enMVOPPattern;
} stMVOP_SUB_SET_PATTERN, *pstMVOP_SUB_SET_PATTERN;

typedef struct DLL_PACKED
{
    MVOP_TileFormat eTileFmt;
    MS_BOOL bRet;
} stMVOP_SUB_SET_TILE_FORMAT, *pstMVOP_SUB_SET_TILE_FORMAT;

typedef struct DLL_PACKED
{
    MVOP_DST_DispInfo *pDstInfo;
    MS_U32 u32SizeofDstInfo;
    MS_BOOL bRet;
} stMVOP_SUB_GET_DST_INFO, *pstMVOP_SUB_GET_DST_INFO;

typedef struct DLL_PACKED
{
    MS_U16 u16FixVtt;
    MS_BOOL bRet;
} stMVOP_SUB_SET_FIXVTT, *pstMVOP_SUB_SET_FIXVTT;

typedef struct DLL_PACKED
{
    MS_BOOL bRet;
} stMVOP_SUB_SET_MMIO_MAPBASE, *pstMVOP_SUB_SET_MMIO_MAPBASE;

typedef struct DLL_PACKED
{
    MS_U8 u8Miu;
    MVOP_Result eRet;
} stMVOP_SUB_MIU_SWITCH, *pstMVOP_SUB_MIU_SWITCH;

typedef struct DLL_PACKED
{
    MS_PHY u32YOffset;
    MS_PHY u32UVOffset;
    MS_BOOL bProgressive;
    MS_BOOL b422pack;
    MS_BOOL bRet;
} stMVOP_SUB_SET_BASEADD, *pstMVOP_SUB_SET_BASEADD;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MVOP_DrvMirror eMirrorMode;
} stMVOP_SUB_SET_VOP_MIRROR_MODE, *pstMVOP_SUB_SET_VOP_MIRROR_MODE;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_BOOL bRet;
} stMVOP_SUB_ENABLE_FREERUN_MODE, *pstMVOP_SUB_ENABLE_FREERUN_MODE;

typedef struct DLL_PACKED
{
    MS_PHY* u32YOffset;
    MS_PHY* u32UVOffset;
} stMVOP_SUB_GET_BASE_ADD, *pstMVOP_SUB_GET_BASE_ADD;


typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U32 u32InitParam;
    MVOP_Result eRet;
} stMVOP_EX_INIT,*pstMVOP_EX_INIT;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U32 u32ExitParam;
    MVOP_Result eRet;
} stMVOP_EX_EXIT,*pstMVOP_EX_EXIT;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bEnable;
    MVOP_Result eRet;
} stMVOP_EX_ENABLE,*pstMVOP_EX_ENABLE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_InputSel in;
    MVOP_InputCfg* pCfg;
    MVOP_Result eRet;
} stMVOP_EX_SET_INPUTCFG,*pstMVOP_EX_SET_INPUTCFG;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_VidStat *pstVideoStatus;
    MS_BOOL bEnHDup;
    MVOP_Result eRet;
} stMVOP_EX_SET_OTPUTCFG,*pstMVOP_EX_SET_OTPUTCFG;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bEnable;
} stMVOP_EX_SET_CLK, *pstMVOP_EX_SET_CLK;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_Pattern enMVOPPattern;
    MVOP_Result eRet;
} stMVOP_EX_SET_PATTERN, *pstMVOP_EX_SET_PATTERN;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_TileFormat eTileFmt;
    MVOP_Result eRet;
} stMVOP_EX_SET_TILE_FORMAT, *pstMVOP_EX_SET_TILE_FORMAT;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bEnable;
    MVOP_Result eRet;
} stMVOP_EX_ENABLE_UV_SHIFT,*pstMVOP_EX_ENABLE_UV_SHIFT;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_Result eRet;
} stMVOP_EX_ENABLE_BLACK_BG,*pstMVOP_EX_ENABLE_BLACK_BG;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bEnable;
    MVOP_Result eRet;
} stMVOP_EX_SET_MONO_MODE,*pstMVOP_EX_SET_MONO_MODE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U16 u16FixVtt;
    MVOP_Result eRet;
} stMVOP_EX_SET_FIXVTT, *pstMVOP_EX_SET_FIXVTT;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U8 u8Miu;
    MVOP_Result eRet;
} stMVOP_EX_MIU_SWITCH, *pstMVOP_EX_MIU_SWITCH;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bEnable;
    MVOP_DrvMirror eMirrorMode;
    MVOP_Result eRet;
} stMVOP_EX_SET_VOP_MIRROR_MODE, *pstMVOP_EX_SET_VOP_MIRROR_MODE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bEnable;
    MVOP_Result eRet;
} stMVOP_EX_ENABLE_FREERUN_MODE, *pstMVOP_EX_ENABLE_FREERUN_MODE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_Timing* pMVOPTiming;
    MVOP_Result eRet;
} stMVOP_EX_GET_OUTPUT_TIMING, *pstMVOP_EX_GET_OUTPUT_TIMING;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL* pbEnable;
    MVOP_Result eRet;
} stMVOP_EX_GET_IS_ENABLE, *pstMVOP_EX_GET_IS_ENABLE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U16 u16Ret;
} stMVOP_EX_GET_HSIZE,*pstMVOP_EX_GET_HSIZE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U16 u16Ret;
} stMVOP_EX_GET_VSIZE,*pstMVOP_EX_GET_VSIZE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U16 u16Ret;
} stMVOP_EX_GET_HSTART,*pstMVOP_EX_GET_HSTART;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U16 u16Ret;
} stMVOP_EX_GET_VSTART,*pstMVOP_EX_GET_VSTART;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bRet;
} stMVOP_EX_GET_IS_INTERLACE, *pstMVOP_EX_GET_IS_INTERLACE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_BOOL bRet;
} stMVOP_EX_GET_IS_HDUPLICATE, *pstMVOP_EX_GET_IS_HDUPLICATE;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_DrvStatus *pMVOPStat;
    MS_BOOL bRet;
} stMVOP_EX_GET_STATUS, *pstMVOP_EX_GET_STATUS;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U32 u32InParam;
    MS_BOOL bRet;
} stMVOP_EX_CHECK_CAPABILITY,*pstMVOP_EX_CHECK_CAPABILITY;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MVOP_DST_DispInfo *pDstInfo;
    MS_U32 u32SizeofDstInfo;
    MS_BOOL bRet;
} stMVOP_EX_GET_DST_INFO, *pstMVOP_EX_GET_DST_INFO;

typedef struct DLL_PACKED
{
    MS_U16 u16Width;
    MS_U16 u16Height;
    MVOP_Result eRet;
} stMVOP_SEND_BLUE_SCREEN, *pstMVOP_SEND_BLUE_SCREEN;

typedef struct DLL_PACKED
{
    MVOP_Command eCmd;
    MVOP_Result eRet;
    MVOP_Handle* stHd;
    void* pPara;
} stMVOP_SET_COMMAND, *pstMVOP_SET_COMMAND;

typedef struct DLL_PACKED
{
    MVOP_Command eCmd;
    MS_U32 u32ParaSize;
    MVOP_Result eRet;
    MVOP_Handle* stHd;
    void* pPara;
} stMVOP_GET_COMMAND, *pstMVOP_GET_COMMAND;

typedef struct DLL_PACKED
{
    MVOP_FREQUENCY eFreq;
} stMVOP_SET_FREQUENCY, *pstMVOP_SET_FREQUENCY;

typedef struct DLL_PACKED
{
    MS_U8 eIntType;
    MS_BOOL bRet;
} stMVOP_ENABLE_INTERRUPT, *pstMVOP_ENABLE_INTERRUPT;

typedef struct DLL_PACKED
{
    MS_U8 u8Ret;
} stMVOP_GET_INT_STATUS, *pstMVOP_GET_INT_STATUS;

typedef struct DLL_PACKED
{
    MS_U8 eIntType;
    MS_BOOL bRet;
} stMVOP_SUB_ENABLE_INTERRUPT, *pstMVOP_SUB_ENABLE_INTERRUPT;

typedef struct DLL_PACKED
{
    MS_U8 u8Ret;
} stMVOP_SUB_GET_INT_STATUS, *pstMVOP_SUB_GET_INT_STATUS;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U8 eIntType;
    MS_BOOL bRet;
} stMVOP_EX_ENABLE_INTERRUPT, *pstMVOP_EX_ENABLE_INTERRUPT;

typedef struct DLL_PACKED
{
    MVOP_DevID eID;
    MS_U8 u8Ret;
} stMVOP_EX_GET_INT_STATUS, *pstMVOP_EX_GET_INT_STATUS;

#if 1
typedef struct DLL_PACKED
{
    EN_POWER_MODE u16PowerState;
    MS_U32 u32Ret;
} stMVOP_SET_POWER_STATE, *pstMVOP_SET_POWER_STATE;
#endif



void MVOPRegisterToUtopia(FUtopiaOpen ModuleType);
MS_U32 MVOPOpen(void** ppInstance, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 MVOPClose(void* pInstance);
MS_U32 MVOPIoctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);
MS_U32 MVOPStr(MS_U32 u32PowerState, void* pModule);

#ifdef __cplusplus
}
#endif

#undef _MVOP_H_
#endif
# 95 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx_v2.h"
#ifndef _API_HDMITX_V2_H_
#define _API_HDMITX_V2_H_ 

#include "MsTypes.h"






#ifdef __cplusplus
extern "C"
{
#endif



typedef enum
{
    E_HDMITX_CMD_INIT,
    E_HDMITX_CMD_EXIT,
    E_HDMITX_CMD_TURNONOFF,
    E_HDMITX_CMD_ENABLEPACKETGEN,
    E_HDMITX_CMD_SETHDMITXMODE,
    E_HDMITX_CMD_SETHDMITXMODE_CD,
    E_HDMITX_CMD_SETTMDSONOFF,
    E_HDMITX_CMD_DISABLETMDSCTRL,
    E_HDMITX_CMD_SETRBCHANNELSWAP,
    E_HDMITX_CMD_EXHIBIT,

    E_HDMITX_CMD_GETRXSTATUS,
    E_HDMITX_CMD_GETRXDCINFOFROMEDID,
    E_HDMITX_CMD_GETRXVIDEODORMATFROMEDID,
    E_HDMITX_CMD_GETVICLISTFROMEDID,
    E_HDMITX_CMD_GETDATABLOCKLENGTHFROMEDID,
    E_HDMITX_CMD_GETRXAUDIOFORMATFROMEDID,
    E_HDMITX_CMD_EDID_HDMISUPPORT,
    E_HDMITX_CMD_GETRXIDMANUFACTURERNAME,
    E_HDMITX_CMD_GETEDIDDATA,
    E_HDMITX_CMD_GETRX3DSTRUCTUREFROMEDID,
    E_HDMITX_CMD_GETCOLORFORMATFROMEDID,
    E_HDMITX_CMD_PKT_USER_DEFINE_CLEAR,

    E_HDMITX_CMD_PKT_USER_DEFINE,
    E_HDMITX_CMD_PKT_CONTENT_DEFINE,
    E_HDMITX_CMD_SETVIDEOONOFF,
    E_HDMITX_CMD_SETCOLORFORMAT,
    E_HDMITX_CMD_SET_VS_INFOFRAME,
    E_HDMITX_CMD_SETVIDEOOUTPUTTIMING,
    E_HDMITX_CMD_SETVIDEOUTPUTTIMINGBYCUSTOMER,
    E_HDMITX_CMD_SETVIDEOOUTPUTASEPCTRATIO,
    E_HDMITX_CMD_SETVIDEOOUTPUTOVERSCAN_AFD,
    E_HDMITX_CMD_SETAUDIOONOFF,
    E_HDMITX_CMD_SETAUDIOFREQUENCY,

    E_HDMITX_CMD_SETVIDEOOUTPUTOVERSCAN_AFD_II,
 E_HDMITX_CMD_SETAUDIOCONFIGURATION,
    E_HDMITX_CMD_SETAUDIOSOURCEFORMAT,
    E_HDMITX_CMD_SETAVIINFOEXTCOLORIMETRY,
    E_HDMITX_CMD_GETAUDIOCTS,
    E_HDMITX_CMD_MUTEAUDIOFIFO,
    E_HDMITX_CMD_GETHDCPKEY,
    E_HDMITX_CMD_GETBKSV,
    E_HDMITX_CMD_GETAKSV,
    E_HDMITX_CMD_SETHDCPONOFF,
    E_HDMITX_CMD_SETAVMUTE,

    E_HDMITX_CMD_GETAVMUTESTATUS,
    E_HDMITX_CMD_HDCP_REVOCATIONKEY_LIST,
    E_HDMITX_CMD_HDCP_REVOCATIONKEY_CHECK,
    E_HDMITX_CMD_HDCP_ISSRMSIGNATUREVALID,
    E_HDMITX_CMD_GETHDCPSTATUS,
    E_HDMITX_CMD_HDCP_STARTAUTH,
    E_HDMITX_CMD_GETINTHDCPSTATUS,
    E_HDMITX_CMD_GETHDCP_PRESTATUS,
    E_HDMITX_CMD_UNHDCPRXCONTROL,
    E_HDMITX_CMD_HDCPRXFAILCONTROL,

    E_HDMITX_CMD_GETLIBVER,
 E_HDMITX_CMD_GETINFO,
    E_HDMITX_CMD_GETSTATUS,
    E_HDMITX_CMD_SETDBGLEVEL,
    E_HDMITX_CMD_SETHPDGPIOPIN,
    E_HDMITX_CMD_ANALOGTUNING,
    E_HDMITX_CMD_FORCEHDMIOUTPUTMODE,
    E_HDMITX_CMD_FORCEHDMIOUTPUTCOLORFORMAT,
    E_HDMITX_CMD_DISABLEREGWRITE,
    E_HDMITX_CMD_GETEDIDPHYADR,

    E_HDMITX_CMD_SETCECONOFF,
 E_HDMITX_CMD_GETCECSTATUS,
    E_HDMITX_CMD_EDIDCHECKING,
    E_HDMITX_CMD_RXBYPASS_MODE,
    E_HDMITX_CMD_DISABLE_RXBYPASS,
    E_HDMITX_CMD_SETAKSV2R0INTERVAL,
    E_HDMITX_CMD_ISRXVALID,
    E_HDMITX_CMD_GETCHIPCAPS,
    E_HDMITX_CMD_SETPOWERSTATE,
    E_HDMITX_CMD_GETEDIDDATABLOCK,
    E_HDMITX_CMD_GETKSVLIST,
    E_HDMITX_CMD_HDCP2ACCESSX74,
    E_HDMITX_CMD_HDCP2TxInit,
    E_HDMITX_CMD_HDCP2TxEnableEncrypt,
    E_HDMITX_CMD_HDCP2TxFillCipherKey,
    E_HDMITX_CMD_GENERALCTRL,
    E_HDMITX_CMD_COLOR_AND_RANGE_TRANSFORM,
    E_HDMITX_CMD_SSC_ENABLE,
    E_HDMITX_CMD_SET_COLORIMETRY,
    E_HDMITX_CMD_GET_FULL_RX_STATUS,

    E_HDMITX_CMD_TIMING_CAPABILITY_CHECK,
    E_HDMITX_CMD_GET_PANELSIZE_FROM_EDID,
    E_HDMITX_CMD_GET_TMDS_STATUS,
    #if (defined(VANCLEEF_MCP) || defined(RAPTORS_MCP))
    E_HDMITX_CMD_VANCLEEF_LOADHDCPKEY,
    #endif
} E_HDMITX_IOCTL_CMDS;

typedef struct _stHDMITx_Init
{
    MS_BOOL bReturn;
} stHDMITx_Init,*pstHDMITx_Init;

typedef struct _stHDMITx_Exit
{
    MS_BOOL bReturn;
} stHDMITx_Exit,*pstHDMITx_Exit;


typedef struct _stHDMITx_TurnOnOff
{
    MS_BOOL state;
} stHDMITx_TurnOnOff,*pstHDMITx_TurnOnOff;

typedef struct _stHDMITx_EnablePacketGen
{
    MS_BOOL bflag;
} stHDMITx_EnablePacketGen,*pstHDMITx_EnablePacketGen;


typedef struct _stHDMITx_SetHDMITxMode
{
    HDMITX_OUTPUT_MODE mode;
} stHDMITx_SetHDMITxMode,*pstHDMITx_SetHDMITxMode;


typedef struct _stHDMITx_SetHDMITxMode_CD
{
    HDMITX_OUTPUT_MODE mode;
    HDMITX_VIDEO_COLORDEPTH_VAL val;
} stHDMITx_SetHDMITxMode_CD,*pstHDMITx_SetHDMITxMode_CD;

typedef struct _stHDMITx_SetTMDSOnOff
{
    MS_BOOL state;
} stHDMITx_SetTMDSOnOff,*pstHDMITx_SetTMDSOnOff;


typedef struct _stHDMITx_DisableTMDSCtrl
{
    MS_BOOL bFlag;
} stHDMITx_DisableTMDSCtrl,*pstHDMITx_DisableTMDSCtrl;

typedef struct _stHDMITx_SetRBChannelSwap
{
    MS_BOOL state;
} stHDMITx_SetRBChannelSwap,*pstHDMITx_SetRBChannelSwap;

typedef struct _stHDMITx_GetRxStatus
{
    MS_BOOL bReturn;
} stHDMITx_GetRxStatus,*pstHDMITx_GetRxStatus;

typedef struct _stHDMITx_GetRxDCInfoFromEDID
{
    HDMITX_VIDEO_COLORDEPTH_VAL *val;
    MS_BOOL bReturn;
} stHDMITx_GetRxDCInfoFromEDID,*pstHDMITx_GetRxDCInfoFromEDID;

typedef struct _stHDMITx_GetRxVideoFormatFromEDID
{
    MS_U8 *pu8Buffer;
    MS_U8 u8BufSize;
    MS_BOOL bReturn;
} stHDMITx_GetRxVideoFormatFromEDID,*pstHDMITx_GetRxVideoFormatFromEDID;

typedef struct _stHDMITx_GetVICListFromEDID
{
    MS_U8 *pu8Buffer;
    MS_U8 u8BufSize;
    MS_BOOL bReturn;
} stHDMITx_GetVICListFromEDID,*pstHDMITx_GetVICListFromEDID;

typedef struct _stHDMITx_GetColorFormatFromEDID
{
    HDMITX_VIDEO_TIMING timing;
    HDMITX_EDID_COLOR_FORMAT *pColorFmt;
    MS_BOOL bReturn;
} stHDMITx_GetColorFormatFromEDID,*pstHDMITx_GetColorFormatFromEDID;

typedef struct _stHDMITx_GetDataBlockLengthFromEDID
{
    MS_U8 *pu8Length;
    MS_U8 u8TagCode;
    MS_BOOL bReturn;
} stHDMITx_GetDataBlockLengthFromEDID,*pstHDMITx_GetDataBlockLengthFromEDID;

typedef struct _stHDMITx_GetRxAudioFormatFromEDID
{
    MS_U8 *pu8Buffer;
    MS_U8 u8BufSize;
    MS_BOOL bReturn;
} stHDMITx_GetRxAudioFormatFromEDID,*pstHDMITx_GetRxAudioFormatFromEDID;

typedef struct _stHDMITx_EDID_HDMISupport
{
    MS_BOOL *HDMI_Support;
    MS_BOOL bReturn;
} stHDMITx_EDID_HDMISupport,*pstHDMITx_EDID_HDMISupport;

typedef struct _stHDMITx_GetRxIDManufacturerName
{
    MS_U8 *pu8Buffer;
    MS_BOOL bReturn;
} stHDMITx_GetRxIDManufacturerName,*pstHDMITx_GetRxIDManufacturerName;

typedef struct _stHDMITx_GetEDIDData
{
    MS_U8 *pu8Buffer;
    MS_BOOL BlockIdx;
    MS_BOOL bReturn;
} stHDMITx_GetEDIDData,*pstHDMITx_GetEDIDData;

typedef struct _stHDMITx_GetRx3DStructureFromEDID
{
    HDMITX_VIDEO_TIMING timing;
    HDMITX_EDID_3D_STRUCTURE_ALL *p3DStructure;
    MS_BOOL bReturn;
} stHDMITx_GetRx3DStructureFromEDID,*pstHDMITx_GetRx3DStructureFromEDID;

typedef struct _stHDMITx_PKT_User_Define
{
    HDMITX_PACKET_TYPE packet_type;
    MS_BOOL def_flag;
 HDMITX_PACKET_PROCESS def_process;
    MS_U8 def_fcnt;
} stHDMITx_PKT_User_Define,*pstHDMITx_PKT_User_Define;

typedef struct _stHDMITx_PKT_Content_Define
{
    HDMITX_PACKET_TYPE packet_type;
    MS_U8 *data;
    MS_U8 length;
    MS_BOOL bReturn;
} stHDMITx_PKT_Content_Define,*pstHDMITx_PKT_Content_Define;

typedef struct _stHDMITx_SetVideoOnOff
{
    MS_BOOL state;
} stHDMITx_SetVideoOnOff,*pstHDMITx_SetVideoOnOff;


typedef struct _stHDMITx_SetColorFormat
{
    HDMITX_VIDEO_COLOR_FORMAT in_color;
    HDMITX_VIDEO_COLOR_FORMAT out_color;
} stHDMITx_SetColorFormat,*pstHDMITx_SetColorFormat;

typedef struct _stHDMITx_Set_VS_InfoFrame
{
    HDMITX_VIDEO_VS_FORMAT vs_format;
    HDMITX_VIDEO_3D_STRUCTURE vs_3d;
    HDMITX_VIDEO_4k2k_VIC vs_vic;
} stHDMITx_Set_VS_InfoFrame,*pstHDMITx_Set_VS_InfoFrame;

typedef struct _stHDMITx_SetVideoOutputTiming
{
    HDMITX_VIDEO_TIMING mode;
} stHDMITx_SetVideoOutputTiming,*pstHDMITx_SetVideoOutputTiming;

typedef struct DLL_PACKED
{
    HDMITX_VIDEO_TIMING u8Mode;
    HDMITX_TIMING_INFO_BY_CUSTOMER stTiminginfo;
} stHDMITx_SetVideoOutputTimingByCustomer,*pstHDMITx_stHDMITx_SetVideoOutputTimingByCustomer;

typedef struct _stHDMITx_SetVideoOutputAsepctRatio
{
    HDMITX_VIDEO_ASPECT_RATIO out_ar;
} stHDMITx_SetVideoOutputAsepctRatio,*pstHDMITx_SetVideoOutputAsepctRatio;

typedef struct _stHDMITx_SetVideoOutputOverscan_AFD
{
    MS_BOOL bflag;
    HDMITX_VIDEO_SCAN_INFO out_scaninfo;
    MS_U8 out_afd;
} stHDMITx_SetVideoOutputOverscan_AFD,*pstHDMITx_SetVideoOutputOverscan_AFD;

typedef struct _stHDMITx_SetAudioOnOff
{
    MS_BOOL state;
} stHDMITx_SetAudioOnOff,*pstHDMITx_SetAudioOnOff;

typedef struct _stHDMITx_SetAudioFrequency
{
    HDMITX_AUDIO_FREQUENCY freq;
} stHDMITx_SetAudioFrequency,*pstHDMITx_SetAudioFrequency;

typedef struct _stHDMITx_SetVideoOutputOverscan_AFD_II
{
    MS_BOOL bflag;
    HDMITX_VIDEO_SCAN_INFO out_scaninfo;
    MS_U8 out_afd;
    MS_U8 A0;
} stHDMITx_SetVideoOutputOverscan_AFD_II,*pstHDMITx_SetVideoOutputOverscan_AFD_II;

typedef struct _stHDMITx_SetAudioConfiguration
{
    HDMITX_AUDIO_FREQUENCY freq;
    HDMITX_AUDIO_CHANNEL_COUNT ch;
    HDMITX_AUDIO_CODING_TYPE type;
} stHDMITx_SetAudioConfiguration,*pstHDMITx_SetAudioConfiguration;

typedef struct _stHDMITx_SetAudioSourceFormat
{
    HDMITX_AUDIO_SOURCE_FORMAT fmt;
} stHDMITx_SetAudioSourceFormat,*pstHDMITx_SetAudioSourceFormat;

typedef struct _stHDMITx_SetAVIInfoExtColorimetry
{
    HDMITX_AVI_EXTENDED_COLORIMETRY enExtColorimetry;
    HDMITX_AVI_YCC_QUANT_RANGE enYccQuantRange;
    MS_BOOL bReturn;
} stHDMITx_SetAVIInfoExtColorimetry, *pstHDMITx_SetAVIInfoExtColorimetry;

typedef struct _stHDMITx_GetAudioCTS
{
    MS_U32 u32Return;
} stHDMITx_GetAudioCTS,*pstHDMITx_GetAudioCTS;

typedef struct _stHDMITx_MuteAudioFIFO
{
    MS_BOOL bflag;
} stHDMITx_MuteAudioFIFO,*pstHDMITx_MuteAudioFIFO;

typedef struct _stHDMITx_GetHdcpKey
{
    MS_BOOL useinternalkey;
    MS_U8 *data;
} stHDMITx_GetHdcpKey,*pstHDMITx_GetHdcpKey;

typedef struct _stHDMITx_GetBksv
{
    MS_U8 *pdata;
    MS_BOOL bReturn;
} stHDMITx_GetBksv,*pstHDMITx_GetBksv;

typedef struct _stHDMITx_GetAksv
{
    MS_U8 *pdata;
    MS_BOOL bReturn;
} stHDMITx_GetAksv,*pstHDMITx_GetAksv;

typedef struct _stHDMITx_SetHDCPOnOff
{
    MS_BOOL state;
} stHDMITx_SetHDCPOnOff,*pstHDMITx_SetHDCPOnOff;

typedef struct _stHDMITx_SetAVMUTE
{
    MS_BOOL bflag;
} stHDMITx_SetAVMUTE,*pstHDMITx_SetAVMUTE;

typedef struct _stHDMITx_GetAVMUTEStatus
{
    MS_BOOL bReturn;
} stHDMITx_GetAVMUTEStatus,*pstHDMITx_GetAVMUTEStatus;

typedef struct _stHDMITx_HDCP_RevocationKey_List
{
    MS_U8 *data;
    MS_U16 size;
} stHDMITx_HDCP_RevocationKey_List,*pstHDMITx_HDCP_RevocationKey_List;

typedef struct _stHDMITx_HDCP_RevocationKey_Check
{
    HDMITX_REVOCATION_STATE stReturn;
} stHDMITx_HDCP_RevocationKey_Check,*pstHDMITx_HDCP_RevocationKey_Check;

typedef struct _stHDMITx_HDCP_IsSRMSignatureValid
{
    MS_U8 *data;
    MS_U32 size;
    MS_BOOL bReturn;
} stHDMITx_HDCP_IsSRMSignatureValid,*pstHDMITx_HDCP_IsSRMSignatureValid;

typedef struct _stHDMITx_GetHDCPStatus
{
    HDMITX_HDCP_STATUS stReturn;
} stHDMITx_GetHDCPStatus,*pstHDMITx_GetHDCPStatus;

typedef struct _stHDMITx_HDCP_StartAuth
{
    MS_BOOL bFlag;
} stHDMITx_HDCP_StartAuth,*pstHDMITx_HDCP_StartAuth;

typedef struct _stHDMITx_GetINTHDCPStatus
{
    HDMITX_INT_HDCP_STATUS stReturn;
} stHDMITx_GetINTHDCPStatus,*pstHDMITx_GetINTHDCPStatus;

typedef struct _stHDMITx_GetHDCP_PreStatus
{
    HDMITX_INT_HDCP_STATUS stReturn;
} stHDMITx_GetHDCP_PreStatus,*pstHDMITx_GetHDCP_PreStatus;

typedef struct _stHDMITx_UnHDCPRxControl
{
    HDMITX_UNHDCPRX_CONTROL state;
} stHDMITx_UnHDCPRxControl,*pstHDMITx_UnHDCPRxControl;

typedef struct _stHDMITx_HDCPRxFailControl
{
    HDMITX_HDCPRXFail_CONTROL state;
} stHDMITx_HDCPRxFailControl,*pstHDMITx_HDCPRxFailControl;

typedef struct _stHDMITx_GetLibVer
{
    const MSIF_Version **ppVersion;
    MS_BOOL bReturn;
} stHDMITx_GetLibVer,*pstHDMITx_GetLibVer;

typedef struct _stHDMITx_GetInfo
{
    HDMI_TX_INFO *pInfo;
    MS_BOOL bReturn;
} stHDMITx_GetInfo,*pstHDMITx_GetInfo;

typedef struct _stHDMITx_GetStatus
{
    HDMI_TX_Status *pStatus;
    MS_BOOL bReturn;
} stHDMITx_GetStatus,*pstHDMITx_GetStatus;

typedef struct _stHDMITx_SetDbgLevel
{
    MS_U16 u16DbgSwitch;
    MS_BOOL bReturn;
} stHDMITx_SetDbgLevels,*pstHDMITx_SetDbgLevel;

typedef struct _stHDMITx_SetHPDGpioPin
{
    MS_U8 u8pin;
} stHDMITx_SetHPDGpioPin,*pstHDMITx_SetHPDGpioPin;

typedef struct _stHDMITx_AnalogTuning
{
    HDMITX_ANALOG_TUNING *pInfo;
} stHDMITx_AnalogTuning,*pstHDMITx_AnalogTuning;

typedef struct _stHDMITx_ForceHDMIOutputMode
{
    MS_BOOL bflag;
    HDMITX_OUTPUT_MODE output_mode;
} stHDMITx_ForceHDMIOutputMode,*pstHDMITx_ForceHDMIOutputMode;

typedef struct _stHDMITx_ForceHDMIOutputColorFormat
{
    MS_BOOL bflag;
    HDMITX_VIDEO_COLOR_FORMAT output_color;
    MS_BOOL bReturn;
} stHDMITx_ForceHDMIOutputColorFormat,*pstHDMITx_ForceHDMIOutputColorFormat;

typedef struct _stHDMITx_DisableRegWrite
{
    MS_BOOL bFlag;
} stHDMITx_DisableRegWrite,*pstHDMITx_DisableRegWrite;

typedef struct _stHDMITx_GetEDIDPhyAdr
{
    MS_U8 *pdata;
} stHDMITx_GetEDIDPhyAdr,*pstHDMITx_GetEDIDPhyAdr;

typedef struct _stHDMITx_SetCECOnOff
{
    MS_BOOL bflag;
} stHDMITx_SetCECOnOff,*pstHDMITx_SetCECOnOff;

typedef struct _stHDMITx_GetCECStatus
{
    MS_BOOL bReturn;
} stHDMITx_GetCECStatus,*pstHDMITx_GetCECStatus;

typedef struct _stHDMITx_EdidChecking
{
    MS_BOOL bReturn;
} stHDMITx_EdidChecking,*pstHDMITx_EdidChecking;

typedef struct _stHDMITx_RxBypass_Mode
{
    HDMITX_INPUT_FREQ freq;
    MS_BOOL bflag;
    MS_BOOL bReturn;
} stHDMITx_RxBypass_Mode,*pstHDMITx_RxBypass_Mode;

typedef struct _stHDMITx_Disable_RxBypass
{
    MS_BOOL bReturn;
} stHDMITx_Disable_RxBypass,*pstHDMITx_Disable_RxBypass;

typedef struct _stHDMITx_SetAksv2R0Interval
{
    MS_U32 u32Interval;
    MS_BOOL bReturn;
} stHDMITx_SetAksv2R0Interval,*pstHDMITx_SetAksv2R0Interval;

typedef struct _stHDMITx_IsHDCPRxValid
{
    MS_BOOL bReturn;
} stHDMITx_IsHDCPRxValid,*pstHDMITx_IsHDCPRxValid;

typedef struct _stHDMITx_GetChipCaps
{
    EN_HDMITX_CAPS eCapType;
    MS_U32* pRet;
    MS_U32 ret_size;
    MS_BOOL bReturn;
} stHDMITx_GetChipCaps,*pstHDMITx_GetChipCaps;

typedef struct _stHDMITx_SetPowerState
{
    EN_POWER_MODE u16PowerState;
    MS_U32 u32Return;
} stHDMITx_SetPowerState,*pstHDMITx_SetPowerState;

typedef struct _stHDMITx_GetEdidDataBlocks
{
    HDMITX_CEA_DB_TAG_CODE enTagCode;
    HDMITX_CEA_EXT_TAG_CODE enExtTagCode;
    MS_U8* pu8Data;
    MS_U32 u32DataLen;
    MS_U32* pu32RealLen;
    MS_BOOL bReturn;
} stHDMITx_GetEdidDataBlocks, *pstHDMITx_GetEdidDataBlocks;

typedef struct _stHDMITx_GetKSVList
{
    MS_U8* pu8Bstatus;
    MS_U8* pu8KSVList;
    MS_U16 u16BufLen;
    MS_U16* pu16KSVLength;
    MS_BOOL bReturn;
} stHDMITx_GetKSVList, *pstHDMITx_GetKSVList;

typedef struct _stHDMITx_HDCP2AccessX74
{
    MS_U8 u8PortIdx;
    MS_U8 u8OffsetAddr;
    MS_U8 u8OpCode;
    MS_U8 *pu8RdBuf;
    MS_U16 u16RdLen;
    MS_U8 *pu8WRBuff;
    MS_U16 u16WrLen;
    MS_BOOL bReturn;
} stHDMITx_HDCP2AccessX74, *pstHDMITx_HDCP2AccessX74;

typedef struct _stHDMITx_HDCP2TxInit
{
    MS_U8 u8PortIdx;
    MS_BOOL bEnable;
} stHDMITx_HDCP2TxInit, *pstHDMITx_HDCP2TxInit;

typedef struct _stHDMITx_HDCP2TxEnableEncrypt
{
    MS_U8 u8PortIdx;
    MS_BOOL bEnable;
} stHDMITx_HDCP2TxEnableEncrypt, *pstHDMITx_HDCP2TxEnableEncrypt;

typedef struct _stHDMITx_HDCP2TxFillCipherKey
{
    MS_U8 u8PortIdx;
    MS_U8 *pu8Riv;
    MS_U8 *pu8KsXORLC128;
} stHDMITx_HDCP2TxFillCipherKey, *pstHDMITx_HDCP2TxFillCipherKey;

typedef struct _stHDMITx_GeneralCtrl
{
    MS_U32 u32Cmd;
    void *pu8Buf;
    MS_U32 u32BufSize;
    MS_BOOL bReturn;
} stHDMITx_GeneralCtrl, *pstHDMITx_GeneralCtrl;

typedef struct
{
    HDMITX_VIDEO_COLOR_FORMAT input_color;
    HDMITX_VIDEO_COLOR_FORMAT output_color;
    HDMITX_QUANT_RANGE input_range;
    HDMITX_QUANT_RANGE output_range;
    MS_BOOL result;
} stHDMITX_COLOR_AND_RANGE_TRANSFORM_PARAMETERS, *pstHDMITX_COLOR_AND_RANGE_TRANSFORM_PARAMETERS;

typedef struct
{
    MS_U8 ubSSCEn;
    MS_BOOL result;
} stHDMITX_SSCENABLE, *pstHDMITX_SSCENABLE;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    HDMITX_AVI_COLORIMETRY colorimetry;
    MS_U8 u8Return;
} stHDMITX_SET_COLORIMETRY, *pstHDMITX_SET_COLORIMETRY;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    MS_U32 u32RxStatus;
} stHDMITX_GET_FULL_RX_STATUS, *pstHDMITX_GET_FULL_RX_STATUS;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    HDMITX_OUTPUT_MODE eOutputMode;
    HDMITX_VIDEO_TIMING eTiming;
    HDMITX_VIDEO_COLOR_FORMAT eInColor;
    HDMITX_VIDEO_COLOR_FORMAT eOutColor;
    HDMITX_VIDEO_COLORDEPTH_VAL eColorDepth;
    HDMITX_TIMING_ERROR ubRet;
} stHDMITX_CHECK_LEGAL_TIMING, *pstHDMITX_CHECK_LEGAL_TIMING;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    MS_U32 u32TMDSStatus;
    MS_U32 u32Ret;
} stHDMITX_GET_TMDS_STATUS, *pstHDMITX_GET_TMDS_STATUS;

#if defined(VANCLEEF_MCP) || defined(RAPTORS_MCP)
typedef struct _stHDMITx_Vancleef_LoadHDCPKey
{
    MS_U8 *pHdcpKey;
    MS_U32 u32Size;
    MS_BOOL bReturn;
} stHDMITx_Vancleef_LoadHDCPKey,*pstHDMITx_Vancleef_LoadHDCPKey;
#endif

#ifdef __cplusplus
}
#endif


#endif
# 129 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiLD.h"
#ifndef _API_XC_LD_H_
#define _API_XC_LD_H_ 



#include "MsTypes.h"

#ifdef __cplusplus
extern "C" {
#endif





#define LD_LOG_DBG 1


#if LD_LOG_DBG
#define LD_DBG(_fmt,_args...) {printf("LD:"_fmt, ##_args); }
#define LD_ASSERT(_fmt,_args...) {printf("LD ASSERT: %s %d:"_fmt, __FILE__, __LINE__, ##_args); }
#else
#define LD_DBG(_fmt,_args...) { }
#define LD_ASSERT(_fmt,_args...) {printf("LD ASSERT: %s %d:"_fmt, __FILE__, __LINE__, ##_args); }
#endif







typedef enum
{
    E_APILD_STATUS_SUCCESS = 0,
    E_APILD_STATUS_FAIL = 1,
    E_APILD_STATUS_NOT_SUPPORTED,
    E_APILD_STATUS_PARAMETER_ERROR,
    E_APILD_OBTAIN_MUTEX_FAIL,
    E_APILD_OBTAIN_MMIO_FAIL,
} E_LD_RETURN;

typedef enum
{
    E_LD_LED_EDGE_TB_TYPE = 0,
    E_LD_LED_EDGE_LR_TYPE = 1,
    E_LD_LED_DIRECT_TYPE = 2,
    E_LD_LED_LOCAL_TYPE = 3,
    E_LD_LED_TYPE_NUM,
    E_LD_LED_TYPE_MAX = E_LD_LED_TYPE_NUM,
} E_LD_TYPE;

typedef struct _stLD_Init_Parameters
{
    E_LD_TYPE ePnlLDType;
    MS_U8* pu8RawData;
    MS_U16 u16DataSize;
    MS_U16 u16PnlWidth;
    MS_U16 u16PnlHeight;
    MS_U16 u16MemSize;
    MS_PHYADDR u32MemAdrress;
    MS_U32 u32Reserved;
} stLD_Init_Parameters, *pstLD_Init_Parameters;
# 202 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiLD.h"
MS_U16 MApi_LD_Init(pstLD_Init_Parameters pstLDArgs, MS_U16 u16DataLen);







MS_BOOL MApi_LD_SetDbgLevel(MS_U16 u16DbgSwitch);


#ifdef __cplusplus
}
#endif

#endif
# 144 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
#ifndef _API_JPEG_H_
#define _API_JPEG_H_ 

#ifdef __cplusplus
extern "C" {
#endif



#define MSIF_JPEG_LIB_CODE {'J','P','E','G'}
#define MSIF_JPEG_LIBVER {'0','1'}
#define MSIF_JPEG_BUILDNUM {'0','H'}
#define MSIF_JPEG_CHANGELIST {'0','0','7','1','8','4','1','5'}




#define JPEG_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_JPEG_LIB_CODE, \
    MSIF_JPEG_LIBVER, \
    MSIF_JPEG_BUILDNUM, \
    MSIF_JPEG_CHANGELIST, \
    MSIF_OS




#define JPEG_DEFAULT_EXIF_SIZE (64*1024UL + 128)

#define SUPPORT_MPO_FORMAT 1

#define SUPPORT_EXIF_EXTRA_INFO TRUE

#define SUPPORT_GET_FULL_IMAGE_INFO 1

#if SUPPORT_MPO_FORMAT
#define JPEG_MPO_MAX_SUPPORT_IMAGE 4
#endif



#define JPEG_UTOPIA20 (1)
# 200 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
typedef enum
{
    E_JPEG_FAILED = 0
  , E_JPEG_OKAY = 1
  , E_JPEG_DONE = 2
  , E_JPEG_RETRY = 3
} JPEG_Result;




typedef enum
{
    E_JPEG_NO_ERROR = 0
  , E_JPEG_BAD_DHT_COUNTS = -200
  , E_JPEG_BAD_DHT_INDEX = -201
  , E_JPEG_BAD_DHT_MARKER = -202
  , E_JPEG_BAD_DQT_MARKER = -203
  , E_JPEG_BAD_DQT_TABLE = -204
  , E_JPEG_BAD_PRECISION = -205
  , E_JPEG_BAD_HEIGHT = -206
  , E_JPEG_BAD_WIDTH = -207
  , E_JPEG_TOO_MANY_COMPONENTS = -208
  , E_JPEG_BAD_SOF_LENGTH = -209
  , E_JPEG_BAD_VARIABLE_MARKER = -210
  , E_JPEG_BAD_DRI_LENGTH = -211
  , E_JPEG_BAD_SOS_LENGTH = -212
  , E_JPEG_BAD_SOS_COMP_ID = -213
  , E_JPEG_W_EXTRA_BYTES_BEFORE_MARKER = -214
  , E_JPEG_NO_ARITHMETIC_SUPPORT = -215
  , E_JPEG_UNEXPECTED_MARKER = -216
  , E_JPEG_NOT_JPEG = -217
  , E_JPEG_UNSUPPORTED_MARKER = -218
  , E_JPEG_BAD_DQT_LENGTH = -219
  , E_JPEG_TOO_MANY_BLOCKS = -221
  , E_JPEG_UNDEFINED_QUANT_TABLE = -222
  , E_JPEG_UNDEFINED_HUFF_TABLE = -223
  , E_JPEG_NOT_SINGLE_SCAN = -224
  , E_JPEG_UNSUPPORTED_COLORSPACE = -225
  , E_JPEG_UNSUPPORTED_SAMP_FACTORS = -226
  , E_JPEG_DECODE_ERROR = -227
  , E_JPEG_BAD_RESTART_MARKER = -228
  , E_JPEG_ASSERTION_ERROR = -229
  , E_JPEG_BAD_SOS_SPECTRAL = -230
  , E_JPEG_BAD_SOS_SUCCESSIVE = -231
  , E_JPEG_STREAM_READ = -232
  , E_JPEG_NOTENOUGHMEM = -233
  , E_JPEG_STOP_DECODE = -234
  , E_JPEG_BAD_APP1_MARKER = -235
  , E_JPEG_NO_THUMBNAIL = -236
  , E_JPEG_UNSUPPORTED_HUFF_DECODE = -237
  , E_JPEG_READBUFFER_TOOSMALL = -238
  , E_JPEG_NOT_ENOUGH_HEADER_INFO = -240
  , E_JPEG_RE_INIT = -241
  , E_JPEG_NOT_INIT = -242
  , E_JPEG_BAD_APP0_MARKER = -243
#if SUPPORT_MPO_FORMAT
  , E_JPEG_BAD_APP2_MARKER = -250
#endif
  , E_JPEG_JPD_DECODE_ERROR = 0x5566
} JPEG_ErrCode;




typedef enum
{
    E_JPEG_TYPE_MAIN = 0
  , E_JPEG_TYPE_THUMBNAIL = 1
  , E_JPEG_TYPE_MJPEG = 2
}JPEG_DecType;




typedef enum
{
    E_JPEG_BUFFER_NONE = 0
  , E_JPEG_BUFFER_HIGH = 1
  , E_JPEG_BUFFER_LOW = 2
} JPEG_BuffLoadType;




typedef enum
{
    E_JPEG_DEBUG_NONE = 0x0
  , E_JPEG_DEBUG_API = 0x01
  , E_JPEG_DEBUG_DRV = 0x02
  , E_JPEG_DEBUG_HAL = 0x04
  , E_JPEG_DEBUG_MSG = 0x07
  , E_JPEG_DEBUG_ERR = 0x08
  , E_JPEG_DEBUG_ALL = 0x0F
  , E_JPEG_DEBUG_MJPEG = 0x10
} JPEG_DbgLevel;




typedef enum
{
    E_JPEG_EVENT_DEC_NONE = 0x00
  , E_JPEG_EVENT_DEC_DONE = 0x01
  , E_JPEG_EVENT_DEC_ECS_ERROR = 0x02
  , E_JPEG_EVENT_DEC_IS_ERROR = 0x04
  , E_JPEG_EVENT_DEC_RST_ERROR = 0x08
  , E_JPEG_EVENT_DEC_MRBL_DONE = 0x10
  , E_JPEG_EVENT_DEC_MRBH_DONE = 0x20
  , E_JPEG_EVENT_DEC_MRB_DONE = 0x30
  , E_JPEG_EVENT_DEC_MWB_FULL = 0x40
  , E_JPEG_EVENT_DEC_ERROR_MASK = 0x0E
} JPEG_Event;




typedef enum
{
    E_JPEG_DEC_DONE = 0
  , E_JPEG_DEC_FAILED = 1
  , E_JPEG_DEC_RST_ERROR = 2
  , E_JPEG_DEC_BITSTREAM_ERROR = 3
  , E_JPEG_DEC_MRBL_DONE = 4
  , E_JPEG_DEC_MRBH_DONE = 5
  , E_JPEG_DEC_DECODING = 6
} JPEG_DecodeStatus;




typedef enum
{
    E_JPEG_EXIF_ORIENT_NOT_FOUND = 0
  , E_JPEG_EXIF_ORIENT_ROTATE_0 = 1
  , E_JPEG_EXIF_ORIENT_MIRROR_LR = 2
  , E_JPEG_EXIF_ORIENT_ROTATE_180 = 3
  , E_JPEG_EXIF_ORIENT_MIRROR_TB = 4
  , E_JPEG_EXIF_ORIENT_ROTATE_90_MIRROR_LR = 5
  , E_JPEG_EXIF_ORIENT_ROTATE_90 = 6
  , E_JPEG_EXIF_ORIENT_ROTATE_90_MIRROR_TB = 7
  , E_JPEG_EXIF_ORIENT_ROTATE_270 = 8
  , E_JPEG_EXIF_ORIENT_RESERVED = 9
} JPEG_EXIF_Orientation;

typedef enum
{
    E_JPEG_GET_EXIF_MANUFACTURER = 0
  , E_JPEG_GET_EXIF_MODEL = 1
  , E_JPEG_GET_EXIF_FLASH = 2
  , E_JPEG_GET_EXIF_ISO_SPEED_RATINGS = 3
  , E_JPEG_GET_EXIF_SHUTTER_SPEED_VALUE = 4
  , E_JPEG_GET_EXIF_APERTURE_VALUE = 5
  , E_JPEG_GET_EXIF_EXPOSURE_BIAS_VALUE = 6
  , E_JPEG_GET_EXIF_FOCAL_LENGTH = 7
  , E_JPEG_GET_EXIF_IMAGE_WIDTH = 8
  , E_JPEG_GET_EXIF_IMAGE_HEIGHT = 9
  , E_JPEG_GET_EXIF_EXPOSURE_TIME = 10
  , E_JPEG_GET_EXIF_F_NUMBER = 11
  , E_JPEG_GET_EXIF_EXPOSURE_PROGRAM = 12
  , E_JPEG_GET_Y_SAMPLING_FACTOR_HORIZONTAL = 13
  , E_JPEG_GET_Y_SAMPLING_FACTOR_VERTICAL = 14
  , E_JPEG_GET_COMPONENTS_NUM = 15
  , E_JPEG_GET_IS_PROGRESSIVE = 16
  , E_JPEG_GET_COLOR_FORMAT = 17
#if SUPPORT_GET_FULL_IMAGE_INFO
  , E_JPEG_GET_FULL_IMAGE_WIDTH = 18
  , E_JPEG_GET_FULL_IMAGE_HEIGHT = 19
  , E_JPEG_IS_FULL_IMAGE_PROGRESSIVE = 20
#endif
} EN_JPEG_GET_CTRL_ID;

typedef enum
{
     E_JPEG_INPUT_FORMAT_GRAY_SCALE = 0
, E_JPEG_INPUT_FORMAT_YUV444 = 1
, E_JPEG_INPUT_FORMAT_YUV422 = 2
, E_JPEG_INPUT_FORMAT_YUV420 = 3
, E_JPEG_INPUT_FORMAT_YUV411 = 4
, E_JPEG_INPUT_FORMAT_CMYK = 5
, E_JPEG_INPUT_FORMAT_RGB = 6
}EN_JPEG_INPUT_COLOR_FORMAT;




typedef enum
{
    E_NJPEG00_NONE,
    E_NJPEG01_TABLE_READ_WRITE,
    E_NJPEG13_ROI,
    E_NJPEG17_OBUF_OUTPUT_FORMAT_YC_SWAP,
    E_NJPEG17_OBUF_OUTPUT_FORMAT_UV_SWAP,
    E_NJPEG17_OBUF_OUTPUT_FORMAT_UV_7BIT,
    E_NJPEG17_OBUF_OUTPUT_FORMAT_UV_MSB,
    E_NJPEG18_IBUF_BURST_LENGTH,
    E_NJPEG21_NO_RESET_TABLE,
    E_NJPEG23_WRITE_PROTECT,
    E_NJPEG25_DOWNSCALE_1_2,
    E_NJPEG25_DOWNSCALE_1_4,
    E_NJPEG25_DOWNSCALE_1_8
}NJPEG_VerificationMode;
# 410 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
typedef MS_S32 (*JPEG_FillHdrFunc)(MS_PHY BufAddr, MS_U32 BufLength);







typedef void (*JPEG_IsrFuncCb)(void);





typedef struct DLL_PACKED
{
    MS_PHY u32MRCBufAddr;
    MS_U32 u32MRCBufSize;
    MS_PHY u32MWCBufAddr;
    MS_U32 u32MWCBufSize;
    MS_PHY u32InternalBufAddr;
    MS_U32 u32InternalBufSize;
    MS_U32 u32DecByteRead;
    MS_BOOL bEOF;
    MS_U8 u8DecodeType;
    MS_BOOL bInitMem;
    JPEG_FillHdrFunc pFillHdrFunc;
} JPEG_InitParam;




typedef struct DLL_PACKED
{
    MS_U16 u16MaxWidth;
    MS_U16 u16MaxHeight;
    MS_U16 u16MaxProWidth;
    MS_U16 u16MaxProHeight;
    MS_BOOL bBaseline;
    MS_BOOL bProgressive;
    MS_BOOL bMJPEG;
} JPEG_DrvCap;




typedef struct DLL_PACKED
{
    const MSIF_Version* pu8DrvVer;
    MS_U8* pu8HalVer;
    MS_U8* pu8FwVer;
    JPEG_DrvCap stDrvCap;
} JPEG_Info;




typedef struct DLL_PACKED
{
    MS_U32 u32CurMRCAddr;
    MS_U16 u16CurVidx;
    MS_U16 u16CurRow;
    MS_U16 u16CurCol;
    MS_BOOL bDrvBusy;
    MS_BOOL bIsrEnable;
} JPEG_Status;




typedef struct DLL_PACKED
{
    MS_U32 u32Year;
    MS_U32 u32Month;
    MS_U32 u32Day;
    MS_U32 u32Hour;
    MS_U32 u32Minute;
    MS_U32 u32Second;
    MS_BOOL bHasDataTime;
}JPEG_EXIF_DateTime;

typedef enum
{
    E_DECODE_NONE = 0,
    E_DECODE_DONE,
    E_DECODING,
    E_DECODE_ERR,
    E_STREAM_READ_ERR
} EN_JPEG_DECODE_STATUS;

typedef struct DLL_PACKED
{
    MS_U16 u16Xdensity;
    MS_U16 u16Ydensity;
    MS_U8 u8Unit;


}APP0_Unit;


typedef struct DLL_PACKED
{
    union
    {
        struct
        {
            MS_U32 numerator;
            MS_U32 denominator;
        };

        struct
        {
            MS_S32 s_numerator;
            MS_S32 s_denominator;
        };
    };
} JPEG_RATIONAL;

typedef struct DLL_PACKED _JPEG_CB_EVENT_PARAM
{
    MS_U32 type;
    MS_PHY BufAddr;
    MS_U32 BufLength;
    MS_S32 param;
}JPEG_CB_EVENT_PARAM, *PJPEG_CB_EVENT_PARAM;

typedef enum
{
    JPEG_CB_EVENT_NONE,
    JPEG_CB_EVENT_FILL_HDR,
    JPEG_CB_EVENT_ISR
}JPEG_CB_EVENT;

#if SUPPORT_MPO_FORMAT

typedef struct DLL_PACKED
{
    MS_U32 attribute;
    MS_U32 size;
    MS_U32 offset;
    MS_U16 image1_no;
    MS_U16 image2_no;
} JPEG_MPO_MP_ENTRY_INFO;


typedef struct DLL_PACKED
{
    MS_U32 start_of_offset;
    MS_U32 num_of_image;
    JPEG_MPO_MP_ENTRY_INFO mp_entry[JPEG_MPO_MAX_SUPPORT_IMAGE];
} JPEG_MPO_INDEX_INFO;


typedef struct DLL_PACKED
{
    MS_U32 MPIndividualNum;
    MS_U32 PanOrientation;
    JPEG_RATIONAL PanOverlap_H;
    JPEG_RATIONAL PanOverlap_V;
    MS_U32 BaseViewpointNum;
    JPEG_RATIONAL ConvergenceAngle;
    JPEG_RATIONAL BaselineLength;
    JPEG_RATIONAL VerticalDivergence;
    JPEG_RATIONAL AxisDistance_X;
    JPEG_RATIONAL AxisDistance_Y;
    JPEG_RATIONAL AxisDistance_Z;
    JPEG_RATIONAL YawAngle;
    JPEG_RATIONAL PitchAngle;
    JPEG_RATIONAL RollAngle;
    MS_BOOL used;
} JPEG_MPO_ATTRIBUTE_INFO;

#endif







void MApi_JPEG_EnableOJPD(MS_BOOL bOnOff);
# 602 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_Init_UsingOJPD(JPEG_InitParam *pInitParam);
# 613 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
void msAPI_JPEG_get_APP0_info( MS_U8 *unit,MS_U16 *x, MS_U16 *y );
# 626 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_Init(JPEG_InitParam *pInitParam);
# 638 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_DecodeHdr(void);
# 650 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_Decode(void);







void MApi_JPEG_Exit(void);







JPEG_ErrCode MApi_JPEG_GetErrorCode(void);







JPEG_Event MApi_JPEG_GetJPDEventFlag(void);







void MApi_JPEG_SetJPDEventFlag(JPEG_Event eEvtVal);







void MApi_JPEG_Rst(void);







void MApi_JPEG_PowerOn(void);







void MApi_JPEG_PowerOff(void);







MS_U16 MApi_JPEG_GetCurVidx(void);







MS_BOOL MApi_JPEG_IsProgressive(void);







MS_BOOL MApi_JPEG_ThumbnailFound(void);







MS_U16 MApi_JPEG_GetWidth(void);







MS_U16 MApi_JPEG_GetHeight(void);







MS_U16 MApi_JPEG_GetOriginalWidth(void);







MS_U16 MApi_JPEG_GetOriginalHeight(void);







MS_U16 MApi_JPEG_GetNonAlignmentWidth(void);







MS_U16 MApi_JPEG_GetNonAlignmentHeight(void);







MS_U16 MApi_JPEG_GetAlignedPitch(void);







MS_U16 MApi_JPEG_GetAlignedPitch_H(void);







MS_U16 MApi_JPEG_GetAlignedWidth(void);







MS_U16 MApi_JPEG_GetAlignedHeight(void);







MS_U8 MApi_JPEG_GetScaleDownFactor(void);
# 827 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
void MApi_JPEG_SetMaxDecodeResolution(MS_U16 u16Width, MS_U16 u16Height);
# 836 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
void MApi_JPEG_SetProMaxDecodeResolution(MS_U16 u16ProWidth, MS_U16 u16ProHeight);







void MApi_JPEG_SetMRBufferValid(JPEG_BuffLoadType u8MRBuffType);
# 853 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
void MApi_JPEG_UpdateReadInfo(MS_U32 u32DataRead, MS_BOOL bEOFflag);







void MApi_JPEG_ProcessEOF(JPEG_BuffLoadType u8MRBuffType);







void MApi_JPEG_SetErrCode(JPEG_ErrCode ErrStatus);







void MApi_JPEG_SetDbgLevel(MS_U8 u8DbgLevel);







MS_U8 MApi_JPEG_GetDbgLevel(void);







void MApi_JPEG_GetInfo(JPEG_Info *pJPEG_Info);







void MApi_JPEG_GetStatus(JPEG_Status *pJPEG_Status);
# 913 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetLibVer(const MSIF_Version **ppVersion);
# 925 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_HdlVidxChk(void);
# 937 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetBuffLoadType(JPEG_BuffLoadType *pBuffLoadType);
# 949 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_EnableISR(JPEG_IsrFuncCb IsrCb);
# 961 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_DisableISR(void);







JPEG_DecodeStatus MApi_JPEG_WaitDone(void);
# 981 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFDateTime(JPEG_EXIF_DateTime *DateTime);
# 993 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFOrientation(JPEG_EXIF_Orientation *eOrientation);
#if SUPPORT_EXIF_EXTRA_INFO
# 1007 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFManufacturer(MS_U8 *pu8Manufacturer, MS_U8 u8size);
# 1020 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFModel(MS_U8 *pu8Model, MS_U8 u8size);
# 1032 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFFlash(MS_U16 *pu16Flash);
# 1044 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFISOSpeedRatings(MS_U32 *pu32ISOSpeedRatings);
# 1056 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFShutterSpeedValue(JPEG_RATIONAL *pShutterSpeedValue);
# 1068 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFApertureValue(JPEG_RATIONAL *pApertureValue);
# 1080 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFExposureBiasValue(JPEG_RATIONAL *pExposureBiasValue);
# 1092 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFFocalLength(JPEG_RATIONAL *pFocalLength);
# 1104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFImageWidth(MS_U32 *pu32ImageWidth);
# 1116 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFImageHeight(MS_U32 *pu32ImageHeight);
# 1128 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFExposureTime(JPEG_RATIONAL *pExposureTime);
# 1140 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetEXIFFNumber(JPEG_RATIONAL *pFNumber);
#endif
# 1155 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
JPEG_Result MApi_JPEG_GetControl(EN_JPEG_GET_CTRL_ID eGetID, MS_U32 *param, MS_U32 u32Size);







void MApi_JPEG_DisableAddressConvert(void);






MS_PHY MApi_JPEG_GetFreeMemory(MS_U32 size);






MS_U32 MApi_JPEG_GetDataOffset(void);







MS_U32 MApi_JPEG_GetSOFOffset(void);







void MApi_JPEG_SetNJPDInstance(MS_U8 JPDNum);
JPEG_Result MApi_JPEG_SupportCMYK(MS_BOOL bEnable);
JPEG_Result MApi_JPEG_SupportRGB(MS_BOOL bEnable);







void MApi_JPEG_SetMHEG5(MS_BOOL bEnable);

#if SUPPORT_MPO_FORMAT
# 1214 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
MS_BOOL MApi_JPEG_IsMPOFormat(void);







MS_BOOL MApi_JPEG_GetMPOIndex(JPEG_MPO_INDEX_INFO **ppMPOIndex);







MS_BOOL MApi_JPEG_GetMPOAttr(MS_U32 image_no, JPEG_MPO_ATTRIBUTE_INFO **ppMPOAttr);







void MApi_JPEG_DumpMPO(void);
# 1247 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
MS_BOOL MApi_JPEG_SetMPOBuffer(MS_U32 read_offset, MS_U32 output_start);
# 1256 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
void MApi_JPEG_SetMPOMaxDecodeResolution(MS_U16 u16Width, MS_U16 u16Height);
# 1265 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG.h"
void MApi_JPEG_SetMPOProMaxDecodeResolution(MS_U16 u16ProWidth, MS_U16 u16ProHeight);
#endif







void MApi_JPEG_SetVerificationMode(NJPEG_VerificationMode VerificationMode);







NJPEG_VerificationMode MApi_JPEG_GetVerificationMode(void);







void MApi_NJPD_Debug(void);







MS_BOOL MApi_JPEG_IsNJPD(void);

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCH34.h"
#ifndef __DRV_CH34_H__
#define __DRV_CH34_H__ 

#ifdef __cplusplus
extern "C"
{
#endif
# 120 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCH34.h"
#define ATTRIBUTE_INFO_VERSION 1
#define SET_DAC_OUTPUT_SWING_VERSION 1
#define SET_SIGMA_DELTA_GAIN_VERSION 1


#define CH34_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'C','H','3','4'}, \
    {'0','1'}, \
    {'0','1'}, \
    {'0','0','0','0','0','0','0','0'}, \
    MSIF_OS






typedef enum
{

    En_Drv_CH34_FAIL = 0,

    En_Drv_CH34_OK,

    En_Drv_CH34_INVALID_PARAM,

    En_Drv_CH34_NotSupport,
}CH34_Drv_Result;

typedef enum
{
    E_CH34_VIDEO_SYS_NTSC = 0,
    E_CH34_VIDEO_SYS_PAL,
    E_CH34_VIDEO_SYS_NUM,
} E_CH34_VIDEO_SYS;

typedef enum
{
    E_CH34_AUDIO_SYS_MONO = 0,
    E_CH34_AUDIO_SYS_BTSC,
    E_CH34_AUDIO_SYS_BTSC_SAP,
    E_CH34_AUDIO_SYS_A2,
    E_CH34_AUDIO_SYS_NUM,
} E_CH34_AUDIO_SYS;

typedef enum
{
    E_CH34_CH3 = 0,
    E_CH34_CH4,
    E_CH34_NUM,
} E_CH34_CHANNEL;

typedef enum{
    E_CH34_SPEC_DEFAULT = 0,
    E_CH34_SPEC_ABNT_NBR_15604,
} E_CH34_SPEC_SELECT;

typedef enum{
    E_CH34_DAC_SWING_LEVEL0 = 0,
    E_CH34_DAC_SWING_LEVEL1,
    E_CH34_DAC_SWING_LEVEL2,
    E_CH34_DAC_SWING_LEVEL3,
} E_CH34_DAC_SWING_LEVEL;

typedef enum
{
    E_CH34_SIGMA_DELTA_GAIN_LEVEL0 = 0,
    E_CH34_SIGMA_DELTA_GAIN_LEVEL1,
    E_CH34_SIGMA_DELTA_GAIN_LEVEL2,
    E_CH34_SIGMA_DELTA_GAIN_LEVEL3,
} E_CH34_SIGMA_DELTA_GAIN_LEVEL;

typedef enum
{
    CH34_CMD_NONE = 0,
    CH34_CMD_SET_DAC_OUTPUT_SWING,
    CH34_CMD_SET_SIGMA_DELTA_GAIN,
    CH34_CMD_NUMBER,
} CH34_CTRL_ID;

typedef struct{
    MS_U32 u32AttributeInfo_Version;
    MS_U16 u16AttributeInfo_Length;
    E_CH34_CHANNEL eChannel;
    E_CH34_VIDEO_SYS eVideoSys;
    E_CH34_AUDIO_SYS eAudioSys;
    E_CH34_SPEC_SELECT eSpecSelect;
} CH34_ATTRIBUTE_INFO;

typedef struct{
    MS_U32 u32SetDACOutputSwing_Version;
    MS_U16 u16SetDACOutputSwing_Length;
    E_CH34_DAC_SWING_LEVEL eDACSwingLevel;
} CH34_SET_DAC_OUTPUT_SWING;

typedef struct{
    MS_U32 u32SetSigmaDeltaGain_Version;
    MS_U16 u16SetSigmaDeltaGain_Length;
    E_CH34_SIGMA_DELTA_GAIN_LEVEL eSigmaDeltaGainLevel;
} CH34_SET_SIGMA_DELTA_GAIN;

#define CH34_TABLE_OFFSET 4
#define CH34_TABLE_MAX_DEPTH 2000





CH34_Drv_Result MDrv_Ch34_Init(void);
CH34_Drv_Result MDrv_Ch34_TurnOnOff(MS_BOOL bOn);
CH34_Drv_Result MDrv_Ch34_SetMode(E_CH34_CHANNEL channel, E_CH34_VIDEO_SYS videosys, E_CH34_AUDIO_SYS audiosys);
CH34_Drv_Result MDrv_Ch34_WriteCH34Table(MS_U8* pTable);
CH34_Drv_Result MDrv_Ch34_SetAttribute(CH34_ATTRIBUTE_INFO* pInfo);
MS_BOOL MDrv_Ch34_GeneralCtrl(MS_U32 u32Cmd, void* pBuf, MS_U32 u32BufSize);

#ifdef __cplusplus
}
#endif


#endif
# 105 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsCommon.h"
#ifndef _MS_COMMON_H_
#define _MS_COMMON_H_ 

#ifndef MSOS_TYPE_LINUX_KERNEL
#include <stdio.h>
#include <stdlib.h>
#else
#endif

#ifdef MSOS_TYPE_ECOS
#include <cyg/infra/diag.h>
#endif

#include <stdarg.h>

#ifdef CONFIG_ENABLE_MENUCONFIG
    #include "autoconf.h"
#endif

#ifdef MSOS_TYPE_LINUX
    #include <limits.h>
#elif defined(MSOS_TYPE_ECOS)
    #include <limits.h>
#elif defined(MSOS_TYPE_OPTEE)
    #include <limits.h>
#else
    #ifndef MSOS_TYPE_LINUX_KERNEL
 #ifndef MSOS_TYPE_OPTEE
  #define ULONG_MAX 0xffffffff
    #else

    #endif
    #endif
#endif



#include "MsOS.h"
#include "MsTypes.h"
#include "MsIRQ.h"

#include "MsDevice.h"

#ifdef CONFIG_ENABLE_MENUCONFIG
    #include "autoconf.h"
#endif



#ifndef DLL_PUBLIC
#define DLL_PUBLIC __attribute__ ((visibility ("default")))
#endif
#ifndef DLL_LOCAL
#define DLL_LOCAL __attribute__ ((visibility ("hidden")))
#endif

#ifndef MSOS_TYPE_LINUX_KERNEL
#define SYMBOL_WEAK __attribute__((weak))
#else
#define SYMBOL_WEAK 
#endif




#define GEN_EXCEP { while(1); }


#if 0
#ifdef __aeon__






#define CACHED_BASE ((void *)0x00000000)
#define UNCACHED_BASE ((void *)0x80000000)

#define CACHED_SIZE ((void *)0x20000000)
#define UNCACHED_SIZE ((void *)0x20000000)




#define KSEG0_BASE CACHED_BASE
#define KSEG1_BASE UNCACHED_BASE
#define KSEG0_SIZE CACHED_SIZE
#define KSEG1_SIZE UNCACHED_SIZE


#define KSEG02KSEG1(addr) ((void *)((U32)(addr)|0x80000000))
#define KSEG12KSEG0(addr) ((void *)((U32)(addr)&~0x80000000))


#define VA2PA(addr) ((void *)(((U32)addr) & 0x1fffffff))
#define PA2KSEG0(addr) ((void *)(((U32)addr) | 0x00000000))
#define PA2KSEG1(addr) ((void *)(((U32)addr) | 0x80000000))
#endif

#if defined(__mips__)


#define KSEG0_BASE ((void *)0x80000000)
#define KSEG1_BASE ((void *)0xa0000000)
#define KSEG0_SIZE 0x20000000
#define KSEG1_SIZE 0x20000000


#define KSEG02KSEG1(addr) ((void *)((MS_U32)(addr)|0x20000000))
#define KSEG12KSEG0(addr) ((void *)((MS_U32)(addr)&~0x20000000))


#define VA2PA(addr) ((void *)(((MS_U32)addr) & 0x1fffffff))
#define PA2KSEG0(addr) ((void *)(((MS_U32)addr) | 0x80000000))
#define PA2KSEG1(addr) ((void *)(((MS_U32)addr) | 0xa0000000))
#endif
#endif

#if 0

#define KSEG0_BASE ((void *)0x80000000)
#define KSEG1_BASE ((void *)0xa0000000)
#define KSEG0_SIZE 0x20000000
#define KSEG1_SIZE 0x20000000


#define KSEG02KSEG1(addr) ((void *)((U32)(addr)|0x20000000))
#define KSEG12KSEG0(addr) ((void *)((U32)(addr)&~0x20000000))


#define VA2PA(addr) ((void *)(((U32)addr) & 0x1fffffff))
#define PA2KSEG0(addr) ((void *)(((U32)addr) | 0x80000000))
#define PA2KSEG1(addr) ((void *)(((U32)addr) | 0xa0000000))
#endif


#ifdef MSOS_TYPE_ECOS
    #ifdef BLOCK_ASSERT
        #define MS_ASSERT(_bool_) \
                { \
                    if ( ! ( _bool_ ) ) \
                    { \
                       diag_printf("\033[35m UTOPIA ASSERT: %s, %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                        *(volatile unsigned int *)(ULONG_MAX) = 0; \
                    } \
                }
    #else
        #define MS_ASSERT(_bool_) \
                { \
                    if ( ! ( _bool_ ) ) \
                    { \
                       diag_printf("\033[35m UTOPIA ASSERT: %s, %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                    } \
                }
    #endif
#else
#ifdef MSOS_TYPE_LINUX_KERNEL
    #ifdef BLOCK_ASSERT
        #define MS_ASSERT(_bool_) \
                { \
                    if (!(_bool_)) \
                    { \
                        printk("\033[35m ASSERT FAIL: %s, %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                        panic("mstar panic\n"); \
                        *(volatile unsigned int *)(ULONG_MAX) = 0; \
                    } \
                }
    #else
        #define MS_ASSERT(_bool_) \
                { \
                    if (!(_bool_)) \
                    { \
                        printk("\033[35m ASSERT FAIL: %s, %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                        panic("mstar panic\n"); \
                    } \
                }
    #endif
#else
    #ifdef BLOCK_ASSERT
        #define MS_ASSERT(_bool_) \
                { \
                    if ( ! ( _bool_ ) ) \
                    { \
                        printf("\033[35m UTOPIA ASSERT: %s, %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                        *(volatile unsigned int *)(ULONG_MAX) = 0; \
                    } \
                }
    #else
        #define MS_ASSERT(_bool_) \
                { \
                    if ( ! ( _bool_ ) ) \
                    { \
                        printf("\033[35m UTOPIA ASSERT: %s, %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                    } \
                }
    #endif
#endif
#endif



#ifdef MSOS_TYPE_ECOS
#define MS_PANIC(_bool_) \
        { \
            if ( ! ( _bool_ ) ) \
            { \
                diag_printf("\033[35m UTOPIA ASSERT: %s %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                *(volatile unsigned int *)(ULONG_MAX) = 0; \
            } \
        }
#elif defined(MSOS_TYPE_OPTEE)
#define MS_PANIC(_bool_) \
        { \
            if ( ! ( _bool_ ) ) \
            { \
                printf("\033[35m UTOPIA ASSERT: %s %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                while(1); \
            } \
        }
#else
#define MS_PANIC(_bool_) \
        { \
            if ( ! ( _bool_ ) ) \
            { \
                printf("\033[35m UTOPIA ASSERT: %s %s %s %d\033[35m\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__); \
                *(volatile unsigned int *)(ULONG_MAX) = 0; \
            } \
        }
#endif


#ifndef MIN
#define MIN(_a_,_b_) ((_a_) < (_b_) ? (_a_) : (_b_))
#endif
#ifndef MAX
#define MAX(_a_,_b_) ((_a_) > (_b_) ? (_a_) : (_b_))
#endif


#define ALIGN_4(_x_) (((_x_) + 3) & ~3)
#define ALIGN_8(_x_) (((_x_) + 7) & ~7)
#define ALIGN_16(_x_) (((_x_) + 15) & ~15)
#define ALIGN_32(_x_) (((_x_) + 31) & ~31)

#define MASK(x) (((1<<(x ##_BITS))-1) << x ##_SHIFT)
#ifndef BIT
#define BIT(_bit_) (1 << (_bit_))
#endif
#define BIT_(x) BIT(x)
#define BITS(_bits_,_val_) ((BIT(((1)?_bits_)+1)-BIT(((0)?_bits_))) & (_val_<<((0)?_bits_)))
#define BMASK(_bits_) (BIT(((1)?_bits_)+1)-BIT(((0)?_bits_)))


#define READ_BYTE(_reg) (*(volatile MS_U8*)(_reg))
#define READ_WORD(_reg) (*(volatile MS_U16*)(_reg))
#define READ_LONG(_reg) (*(volatile MS_U32*)(_reg))
#define WRITE_BYTE(_reg,_val) { (*((volatile MS_U8*)(_reg))) = (MS_U8)(_val); }
#define WRITE_WORD(_reg,_val) { (*((volatile MS_U16*)(_reg))) = (MS_U16)(_val); }
#define WRITE_LONG(_reg,_val) { (*((volatile MS_U32*)(_reg))) = (MS_U32)(_val); }


#if 1
typedef struct _cmd_mload_utopia_interface_s cmd_mload_utopia_interface;
struct _cmd_mload_utopia_interface_s
{

  MS_PHY (*get_next_mload_ringbuf_write_ptr)(cmd_mload_utopia_interface *cmdinf);
  MS_PHY (*update_mload_ringbuf_read_ptr)(cmd_mload_utopia_interface *cmdinf, MS_PHY next_read_ptr);
  MS_S32 (*mload_copy_buf)(cmd_mload_utopia_interface *cmdinf, void *mload_buf, MS_U32 size,
                                                                                MS_U16 u16Alignment, MS_PHY *phyRetAddr);
  MS_U16 (*check_buf_available)(cmd_mload_utopia_interface *cmdinf , MS_U32 cmdq_num);
  MS_S32 (*write_dummy_reg_cmdq)(cmd_mload_utopia_interface *cmdinf, MS_U16 value);
  MS_U32 (*read_dummy_reg_cmdq)(cmd_mload_utopia_interface *cmdinf);

  MS_S32 (*write_reg_cmdq_mask)(cmd_mload_utopia_interface *cmdinf, MS_U32 reg_addr, MS_U16 value, MS_U16 write_mask);
  MS_S32 (*write_reg_cmdq)(cmd_mload_utopia_interface *cmdinf, MS_U32 reg_addr, MS_U16 value);
  MS_S32 (*cmdq_poll_reg_bits)(cmd_mload_utopia_interface *cmdinf, MS_U32 reg_addr, MS_U16 value, MS_U16 write_mask);
  MS_S32 (*cmdq_add_wait_event_cmd)(cmd_mload_utopia_interface *cmdinf, MS_U16 event);
  MS_S32 (*cmdq_abort_command)(cmd_mload_utopia_interface *cmdinf);

  MS_S32 (*kick_off_cmdq)(cmd_mload_utopia_interface *cmdinf);

  MS_S32 (*is_cmdq_empty_idle)(cmd_mload_utopia_interface *cmdinf);

  VOID *ctx;
};
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvTCF.h"
#ifndef __DRV_TCF_H__
#define __DRV_TCF_H__ 

#include "MsTypes.h"
#include "MsDevice.h"
#include "MsCommon.h"




#define DRV_TCF_OK 0x00000000
#define DRV_TCF_FAIL 0x00000001
#define DRV_TCF_BUSY 0x00000002
#define DRV_TCF_INVALID_INPUT 0x00000003







#define CF_NVM_RAW_WORDS (64)
#define CF_PERSIST_STATE_WORDS (128)
#define CF_REG128_WORDS (4)
#define CF_REG64_WORDS (2)
#define CF_BITMAP_WORDS (8)
#define CF_CMD_WORDS (21)
#define CF_CWC_WORDS (4)
#define CF_PRODUCT_OR_ENTRIES (8)

#define CF_OP_TYPE_MASK 0x0000E000
#define CF_OP_TYPE_POS 13
typedef enum
{
    E_CF_OP_TYPE_OP_CWC = 0x0,
    E_CF_OP_TYPE_OP_PERSO = 0x1,
    E_CF_OP_TYPE_OP_DIFF = 0x2,
    E_CF_OP_TYPE_OP_FEATURE = 0x3,
    E_CF_OP_TYPE_OP_MFR_TEST = 0x4
} CF_OPERATION_TYPE;

typedef enum
{
    E_CF_TRANS_STATUS_BUSY_INIT = 0x0,
    E_CF_TRANS_STATUS_BUSY_SETUP = 0x1,
    E_CF_TRANS_STATUS_READY = 0x2,
    E_CF_TRANS_STATUS_INPUT = 0x3,
    E_CF_TRANS_STATUS_BUSY_OP = 0x4,
    E_CF_TRANS_STATUS_DONE_OK = 0x8,
    E_CF_TRANS_STATUS_DONE_ERROR = 0x9,
    E_CF_TRANS_STATUS_DONE_MFR_TEST = 0xE
} CF_TRANS_STATUS_VALUES;

typedef enum
{
    E_CF_NVM_STATUS_READY = 0x0,
    E_CF_NVM_STATUS_UNBISTED = 0x1,
    E_CF_NVM_STATUS_UNPERSO = 0x2,
    E_CF_NVM_STATUS_ERROR = 0x3
} CF_NVM_STATUS_VALUES;

typedef enum
{
    E_CF_DIFF_STATUS_UNDIFFERENTIATED = 0x0,
    E_CF_DIFF_STATUS_DIFFERENTIATED = 0x1
} CF_DIFF_STATUS_VALUES;

typedef enum
{
    E_CF_OPERATION_TYPE_OP_CWC = 0x0,
    E_CF_OPERATION_TYPE_OP_PERSO = 0x1,
    E_CF_OPERATION_TYPE_OP_DIFF = 0x2,
    E_CF_OPERATION_TYPE_OP_FEATURE = 0x3,
    E_CF_OPERATION_TYPE_OP_MFR_TEST = 0x4,
    E_CF_OPERATION_TYPE_OP_UNDEFINED1 = 0x5,
    E_CF_OPERATION_TYPE_OP_UNDEFINED2 = 0x6,
    E_CF_OPERATION_TYPE_OP_UNDEFINED3 = 0x7
} CF_OPERATION_TYPE_VALUES;

typedef enum
{
    E_CF_DECM_SOURCE_NONE = 0x0,
    E_CF_DECM_SOURCE_SW = 0x1,
    E_CF_DECM_SOURCE_KEY = 0x2,
    E_CF_DECM_SOURCE_MIX = 0x3
} CF_DECM_SOURCE_VALUES;

typedef enum
{
    E_CF_OUTPUT_USAGE_SHV = 0x0,
    E_CF_OUTPUT_USAGE_CWC_DIRECT = 0x1,
    E_CF_OUTPUT_USAGE_CWC_XOR = 0x2,
    E_CF_OUTPUT_USAGE_CWC_AES_KEY = 0x3
} CF_OUTPUT_USAGE_VALUES;




typedef enum
{
    E_CFB_USE_CASE_3_1_1 = 0x00,
    E_CFB_USE_CASE_3_1_2,
    E_CFB_USE_CASE_3_2_1,
    E_CFB_USE_CASE_3_2_2,
    E_CFB_USE_CASE_3_2_3,
    E_CFB_USE_CASE_3_3_1,
    E_CFB_USE_CASE_3_3_2,
    E_CFB_USE_CASE_3_3_3,
    E_CFB_USE_CASE_3_3_4,
    E_CFB_USE_CASE_3_4_1,
    E_CFB_USE_CASE_3_4_2,
    E_CFB_USE_CASE_3_5_1,
    E_CFB_USE_CASE_3_5_2,
    E_CFB_USE_CASE_3_5_3,
    E_CFB_USE_CASE_3_5_4,
    E_CFB_USE_CASE_3_6,
    E_CFB_USE_CASE_KLGEN_CACWC,
} CFB_USE_CASE;

typedef enum
{
    E_CFB_NO_OTP_KEY = 0x00,
    E_CFB_OTP_KEY_1,
    E_CFB_OTP_KEY_2,
    E_CFB_OTP_KEY_3,
    E_CFB_OTP_KEY_4,
    E_CFB_OTP_KEY_5,
    E_CFB_OTP_KEY_6,
    E_CFB_OTP_KEY_7,
    E_CFB_OTP_KEY_8,
} CFB_OTP_KEY_IDX;



#define CFKE_OP_CLRKE_CMD (0x00005FFF)
#define CFKE_STATUS_DONE (0x8)
#define CFKE_INPUT_WORDS (4)

typedef enum
{
    E_CFKE_TRANS_STATUS_BUSY_INIT = 0x0,
    E_CFKE_TRANS_STATUS_READY = 0x2,
    E_CFKE_TRANS_STATUS_BUSY_OP = 0x4,
    E_CFKE_TRANS_STATUS_DONE_OK = 0x8,
    E_CFKE_TRANS_STATUS_DONE_ERROR = 0x9,
    E_CFKE_TRANS_STATUS_DONE_TEST = 0xE,
} CFKE_TRANS_STATUS_VALUES;

typedef enum
{
    E_CFKE_ERROR_NO_ERROR = 0x0,
    E_CFKE_ERROR_INVALID_COMMAND = 0x1,
    E_CFKE_ERROR_CF = 0x2,
    E_CFKE_ERROR_INVALID_TAGS = 0x4,
    E_CFKE_ERROR_COMMAND_FAIL = 0x8,
} CFKE_ERROR_CODE;

typedef enum
{
    E_CFKE_OP_DCF = 0x0,
    E_CFKE_OP_XOR = 0x1,
    E_CFKE_OP_AES = 0x2,
    E_CFKE_OP_UNW = 0x3,
    E_CFKE_OP_HWDECM = 0x4,
    E_CFKE_OP_CLRKE = 0x5,
    E_CFKE_OP_TEST = 0xA,
    E_CFKE_OP_USER_HASH = 0xF,
} CFKE_OPERATION_TYPE, CFKE_CMD_OP;

typedef enum
{
    E_CFKE_UNW_REQUIRED_TRUE = 0x0,
    E_CFKE_UNW_REQUIRED_FALSE = 0x1,
} CFKE_DIFF_ALLOW_NON_UNW;

typedef enum
{
    E_CFKE_CK_ALLOWED_FALSE = 0x0,
    E_CFKE_CK_ALLOWED_TRUE = 0x1,
} CFKE_DIFF_ALLOW_CK;

typedef enum
{
    E_CFKE_CONTENT_OUTPUT_ALLOW_NONE = 0x0,
    E_CFKE_CONTENT_OUTPUT_ALLOW_A = 0x1,
    E_CFKE_CONTENT_OUTPUT_ALLOW_AB = 0x2,
    E_CFKE_CONTENT_OUTPUT_ALLOW_ABC = 0x3,
} CFKE_DIFF_CONTENT_OUTPUT_ALLOWED;

typedef enum
{
    E_CFKE_DEST_CW = 0x0,
    E_CFKE_DEST_CK = 0x1,
    E_CFKE_DEST_SLOTA = 0x4,
    E_CFKE_DEST_SLOTB = 0x5,
    E_CFKE_DEST_SLOTC = 0x6,
    E_CFKE_DEST_SLOTD = 0x7,
    E_CFKE_DEST_NULL = 0xF,

} CFKE_CMD_DEST;

typedef enum
{
    E_CFKE_SRC_NULL = 0x0,
    E_CFKE_SRC_CF = 0x1,
    E_CFKE_SRC_TVEF = 0x2,
    E_CFKE_SRC_SLOTA = 0x4,
    E_CFKE_SRC_SLOTB = 0x5,
    E_CFKE_SRC_SLOTC = 0x6,
    E_CFKE_SRC_SLOTD = 0x7,
    E_CFKE_SRC_SLOTAL = 0x8,
    E_CFKE_SRC_SLOTBL = 0x9,
    E_CFKE_SRC_SLOTCL = 0xA,
    E_CFKE_SRC_SLOTDL = 0xB,
} CFKE_CMD_SRC;




#define CRIKL_KL_ENG_NPD (0x80)
#define CRIKL_KL_ENG_MULTI2 (0x40)
#define CRIKL_KL_ENG_CSAV2 (0x20)
#define CRIKL_KL_ENG_CSAV3 (0x10)
#define CRIKL_KL_ENG_ASA (0x08)
#define CRIKL_KL_ENG_DES (0x04)
#define CRIKL_KL_ENG_TDES (0x02)
#define CRIKL_KL_ENG_AES (0x01)

#define CRIKL_KL_DEST_AESDMA (0x04)
#define CRIKL_KL_DEST_PVR (0x02)
#define CRIKL_KL_DEST_CIPHER (0x01)


typedef enum
{
    E_CRIKL_SCMB_CTL_NONE = 0x0,
    E_CRIKL_SCMB_CTL_RESERVE = 0x1,
    E_CRIKL_SCMB_CTL_EVEN_KEY = 0x2,
    E_CRIKL_SCMB_CTL_ODD_KEY = 0x3,
} CRIKL_SCRAMBLE_CONTROL;

typedef enum
{
    E_CRIKL_MIRROR_CF_STATUS = 0x0,
    E_CRIKL_MIRROR_CFKE_STATUS = 0x1,
    E_CRIKL_MIRROR_CF_PLATFORM = 0x2,
    E_CRIKL_MIRROR_CF_FEATURE = 0x3,
} CRIKL_MIRROR_MEM;

typedef enum
{
    E_CRIKL_KEY_SIZE_64 = 0x0,
    E_CRIKL_KEY_SIZE_128 = 0x1,
    E_CRIKL_KEY_SIZE_192 = 0x2,
    E_CRIKL_KEY_SIZE_256 = 0x3,
} CRIKL_KEY_SZIE;

typedef enum
{
    E_CRIKL_OP_DONT_CARE = 0x0,
    E_CRIKL_OP_DECRYPT = 0x1,
    E_CRIKL_OP_ENCRYPT = 0x2,
} CRIKL_OP_SEL;

typedef enum
{
    E_CRIKL_KTE0 = 0x0,
    E_CRIKL_KTE1 = 0x1,
    E_CRIKL_KTE2 = 0x2,
    E_CRIKL_KTE3 = 0x3,
} CRIKL_KTE_SEL;






typedef MS_U32 DRV_TCF_RET;




typedef struct
{
    MS_U8 u8VersionEpoch;
    MS_U8 u8ManufacturerId;
    MS_U8 u8NetlistVersion;
    MS_U8 u8VersionBuildId;
} DRV_CF_VERSION;

typedef struct
{
    MS_U32 u32FeatureVector;
} DRV_CF_FEATURE_VECTOR;

typedef struct
{
    MS_U8 eTransStatus;
    MS_U8 u8UseNvmKey;
    MS_U8 eOperationType;
    MS_U8 eDecmSrc;
    MS_U8 eOutputUsage;
    MS_U8 u8ProductRange;
    MS_U8 u8ProductOffset;
} DRV_CF_TRANS_STATUS;

typedef struct
{
    MS_U8 eNvmStatus;
    MS_U8 eDiffStatus;
    MS_U8 u8RecentReset;
    MS_U8 u8CfAlert;
    MS_U8 u8DevelopmentMode;
    MS_U8 u8FuseActivate;
    MS_U8 u8FuseBlock;
} DRV_CF_CF_STATUS;

typedef struct
{
    MS_U8 u8HwDecmValid;
    MS_U8 u8HwDecmError;
} DRV_CF_DECM_STATUS;

typedef struct
{
    MS_U32 Op[CF_CMD_WORDS];
} DRV_CF_OPERATION;

typedef struct
{
    MS_U8 eOperationType;
    MS_U8 eTransStatus;
    MS_U8 u8CwcValid;
    MS_U32 Shv[4];
} DRV_CF_RESULT;




typedef struct
{
    MS_U8 u8CwcPid;
    MS_U8 u8CwcFld;
    MS_U8 u8CwcFscb;
    MS_U8 u8CwcScb;
    MS_U8 u8CwcTsid;
    MS_U8 u8CwcDst;
} DRV_CFB_CWCCFG;

typedef struct
{
    MS_U8 u8UseCase;
    MS_U8 u8OtpKeyIdx;
    MS_U8 u8CAcwcSrc;
    MS_U32 CACWC[4];
    MS_U32 EPK[4];
    MS_U32 EFUV[4];

    DRV_CFB_CWCCFG stCwcCfg;
} DRV_CFB_CFBCFG;



typedef struct
{
 CFKE_CMD_SRC eSrcType;
 MS_U32 pu32KeySlotData[4];
} DRV_CFKE_SOURCE;

typedef struct
{
 MS_U32 u32UnwPathData;
 MS_U32 pu832ValidatorData[2];
} DRV_CFKE_UNWRAP_DATA;

typedef struct
{
 MS_U32 pu32UsrHashData[4];
} DRV_CFKE_USER_HASH_DATA;

typedef struct
{
    CFKE_OPERATION_TYPE eOpType;
    DRV_CFKE_SOURCE eOpSrc1;
    DRV_CFKE_SOURCE eOpSrc2;
    CFKE_CMD_DEST eOpDest;
    DRV_CFKE_UNWRAP_DATA UnwData;
} DRV_CFKE_OPERATION;




typedef struct
{

    MS_BOOL bDscmbKey;

    CRIKL_SCRAMBLE_CONTROL eScmbCtl;
    MS_U8 u8DscmbId;

    MS_U8 u8KeySlotIdx;


    MS_U8 u8VendorNo;
    MS_U16 u16VendorAtt;


    MS_U8 u8OutputAllowed;
    MS_BOOL bMultiEng;
    MS_BOOL bLsb64;
    CRIKL_KEY_SZIE eKeySize;


    MS_U8 u8KlEng;
    MS_U8 u8Drop;
    MS_U8 u8Cnt;


    MS_U8 u8KlDest;
    CRIKL_OP_SEL eOpSel;
    CRIKL_KTE_SEL eKteSel;
    MS_BOOL bLock;
    MS_BOOL bParaVld;
    MS_BOOL bKlEn;
} DRV_CRIKL_KEY_CONFIG;







DLL_PUBLIC DRV_TCF_RET MDrv_TCF_Init(void);
DLL_PUBLIC DRV_TCF_RET MDrv_CF_Version_Info(DRV_CF_VERSION *pstVersion);
DLL_PUBLIC DRV_TCF_RET MDrv_CF_Trans_Status(DRV_CF_TRANS_STATUS *pstTransStatus);
DLL_PUBLIC DRV_TCF_RET MDrv_CF_Cf_Status(DRV_CF_CF_STATUS *pstCfStatus);
DLL_PUBLIC DRV_TCF_RET MDrv_CF_FeatureVector(DRV_CF_FEATURE_VECTOR *pstCfFeature);
DLL_PUBLIC DRV_TCF_RET MDrv_CF_Issue_Op(DRV_CF_OPERATION *pCfOperations);
DLL_PUBLIC DRV_TCF_RET MDrv_CF_IsFinished(void);
DLL_PUBLIC DRV_TCF_RET MDrv_CF_Read_Op_Result(DRV_CF_RESULT *pCfResult);



DLL_PUBLIC DRV_TCF_RET MDrv_CFB_Init(void);
DLL_PUBLIC DRV_TCF_RET MDrv_CFB_Enable(void);
DLL_PUBLIC DRV_TCF_RET MDrv_CFB_Reset(void);
DLL_PUBLIC DRV_TCF_RET MDrv_CFB_Setup(DRV_CFB_CFBCFG *pstCFBCfg);
DLL_PUBLIC DRV_TCF_RET MDrv_CFB_Is_Ready(void);
DLL_PUBLIC DRV_TCF_RET MDrv_CFB_Is_Done(void);


DLL_PUBLIC void MDrv_CFB_DBG_KT_Response(void);
DLL_PUBLIC MS_U8 MDrv_CFB_DBG_CFB_FSM(void);



DLL_PUBLIC DRV_TCF_RET MDrv_CFKE_Cmd_Exe(DRV_CFKE_OPERATION *pCfkeOp);
DLL_PUBLIC DRV_TCF_RET MDrv_CFKE_IsDone(CFKE_ERROR_CODE *eCfkeErr);
DLL_PUBLIC DRV_TCF_RET MDrv_CFKE_IsReady(void);
DLL_PUBLIC DRV_TCF_RET MDrv_CFKE_UserHash_Setup(DRV_CFKE_USER_HASH_DATA *pUserHash);


DLL_PUBLIC MS_U32 MDrv_CRIKL_Mirror(CRIKL_MIRROR_MEM eCandidate);
DLL_PUBLIC DRV_TCF_RET MDrv_CRIKL_Set_KeyConfig(DRV_CRIKL_KEY_CONFIG *stKeyCfg);

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOPSC_Ex.h"
#ifndef _API_GOPSC_EX_H_
#define _API_GOPSC_EX_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#define MSIF_GOPSC_EX_LIBVER {'0','0'}
#define MSIF_GOPSC_EX_BUILDNUM {'1','1'}
#define MSIF_GOPSC_EX_CHANGELIST {'0','0','3','9','1','8','8','7'}

typedef enum
{
    EN_Bilinear = 0,
    EN_Cubic
}EN_GOPSC_VScalingMode;

typedef struct
{
    MS_U16 srcWidth;
    MS_U16 srcHeight;
    MS_U16 destWidth;
    MS_U16 destHeight;
    MS_U8 bEnableScaleX;
    MS_U8 bEnableScaleY;
}GOPSC_SizeInfo;

typedef struct
{
    MS_U16 xStart;
    MS_U16 xEnd;
    MS_U16 yStart;
    MS_U16 yEnd;
    MS_U8 bEnableSkipX;
    MS_U8 bEnableSkipY;
}GOPSC_SkipPixelInfo;

typedef struct
{
    MS_U32 u32Version;
    MS_U32 u32Id;
}GOPSC_DeviceInfo;

typedef enum
{

    En_GOPSC_FAIL = 0,

    En_GOPSC_OK,

    En_GOPSC_INVALID_PARAM,

    En_GOPSC_NOT_INITIALIZE,

    En_GOPSC_NotSupport,
}GOPSC_Result;

typedef enum
{
    None = 0x0,
    SetOutputRateControl = 0x1,
    EnableP2I = 0x2,
    HalfMode = 0x4,
}EN_GOPSCCmd;

typedef enum
{
    EN_Source_GOP,
    EN_Source_OP,
}EN_GOPSC_Source;

typedef struct
{
    EN_GOPSC_VScalingMode en_VScalingMode;
    EN_GOPSC_Source en_Source;
    MS_U16 dlyLineNumber;
    MS_BOOL P2IEnable;
    MS_BOOL HalfModeEnable;
    MS_BOOL OutputRateControlEnable;
 MS_BOOL UseP2IFormula;
}GOPSC_Info;

GOPSC_Result MApi_GOPSC_Init(GOPSC_DeviceInfo* DevInfo);
GOPSC_Result MApi_GOPSC_Enable(GOPSC_DeviceInfo* DevInfo, MS_BOOL enable);
GOPSC_Result MApi_GOPSC_GetGOPSCInfo(GOPSC_DeviceInfo* DevInfo, GOPSC_Info* gopscInfo);
GOPSC_Result MApi_GOPSC_SetGOPSCInfo(GOPSC_DeviceInfo* DevInfo, GOPSC_Info* gopscInfo);
GOPSC_Result MApi_GOPSC_SetHVSPSize(GOPSC_DeviceInfo* DevInfo, GOPSC_SizeInfo* sizeInfo, MS_U32 flag);
GOPSC_Result MApi_GOPSC_SetSkipPixel(GOPSC_DeviceInfo* DevInfo, GOPSC_SkipPixelInfo* skippixelInfo, MS_U32 flag);
GOPSC_Result MApi_GOPSC_ScalingDownOnce(GOPSC_DeviceInfo* DevInfo, MS_U8 FrameNum);




#ifdef __cplusplus
}
#endif

#endif
# 104 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsIRQ.h"
#ifndef _MS_IRQ_H_
#define _MS_IRQ_H_ 



#ifdef __cplusplus
extern "C"
{
#endif




#define MS_IRQ_MAX (256)
#define ENABLE_USB_PORT0 
#define E_IRQ_FIQ_INVALID 0xFFFF


typedef enum
{

    E_INT_IRQ_0x00_START = 0x00,
    E_INT_IRQ_UART0 = E_INT_IRQ_0x00_START+0,
    E_INT_IRQ_BDMA_CH0 = E_INT_IRQ_0x00_START+1,
    E_INT_IRQ_BDMA_CH1 = E_INT_IRQ_0x00_START+2,
    E_INT_IRQ_MVD = E_INT_IRQ_0x00_START+3,
    E_INT_IRQ_PS = E_INT_IRQ_0x00_START+4,
    E_INT_IRQ_NFIE = E_INT_IRQ_0x00_START+5,
    E_INT_IRQ_USB = E_INT_IRQ_0x00_START+6,
    E_INT_IRQ_UHC = E_INT_IRQ_0x00_START+7,
    E_INT_IRQ_EC_BRIDGE = E_INT_IRQ_0x00_START+8,
    E_INT_IRQ_EMAC = E_INT_IRQ_0x00_START+9,
    E_INT_IRQ_DISP = E_INT_IRQ_0x00_START+10,
    E_INT_IRQ_DHC = E_INT_IRQ_0x00_START+11,
    E_INT_IRQ_PMSLEEP = E_INT_IRQ_0x00_START+12,
    E_INT_IRQ_SBM = E_INT_IRQ_0x00_START+13,
    E_INT_IRQ_COMB = E_INT_IRQ_0x00_START+14,
    E_INT_IRQ_ECC_DERR = E_INT_IRQ_0x00_START+15,
    E_INT_IRQ_0x00_END = 0x0F,

    E_INT_IRQ_0x10_START = 0x10,
    E_INT_IRQ_TSP2HK = E_INT_IRQ_0x10_START+0,
    E_INT_IRQ_VE = E_INT_IRQ_0x10_START+1,
    E_INT_IRQ_CIMAX2MCU = E_INT_IRQ_0x10_START+2,
    E_INT_IRQ_DC = E_INT_IRQ_0x10_START+3,
    E_INT_IRQ_GOP = E_INT_IRQ_0x10_START+4,
    E_INT_IRQ_PCM = E_INT_IRQ_0x10_START+5,
    E_INT_IRQ_IIC0 = E_INT_IRQ_0x10_START+6,
    E_INT_IRQ_RTC = E_INT_IRQ_0x10_START+7,
    E_INT_IRQ_KEYPAD = E_INT_IRQ_0x10_START+8,
    E_INT_IRQ_PM = E_INT_IRQ_0x10_START+9,
    E_INT_IRQ_DDC2BI = E_INT_IRQ_0x10_START+10,
    E_INT_IRQ_SCM = E_INT_IRQ_0x10_START+11,
    E_INT_IRQ_VBI = E_INT_IRQ_0x10_START+12,
    E_INT_IRQ_M4VD = E_INT_IRQ_0x10_START+13,
    E_INT_IRQ_FCIE2RIU = E_INT_IRQ_0x10_START+14,
    E_INT_IRQ_ADCDVI2RIU = E_INT_IRQ_0x10_START+15,
    E_INT_IRQ_0x10_END = 0x1F,


    E_INT_FIQ_0x20_START = 0x20,
    E_INT_FIQ_EXTIMER0 = E_INT_FIQ_0x20_START+0,
    E_INT_FIQ_EXTIMER1 = E_INT_FIQ_0x20_START+1,
    E_INT_FIQ_WDT = E_INT_FIQ_0x20_START+2,
    E_INT_FIQ_AEON_TO_8051 = E_INT_FIQ_0x20_START+3,
    E_INT_FIQ_8051_TO_AEON = E_INT_FIQ_0x20_START+4,
    E_INT_FIQ_8051_TO_BEON = E_INT_FIQ_0x20_START+5,
    E_INT_FIQ_BEON_TO_8051 = E_INT_FIQ_0x20_START+6,
    E_INT_FIQ_BEON_TO_AEON = E_INT_FIQ_0x20_START+7,
    E_INT_FIQ_AEON_TO_BEON = E_INT_FIQ_0x20_START+8,
    E_INT_FIQ_JPD = E_INT_FIQ_0x20_START+9,
    E_INT_FIQ_MENULOAD = E_INT_FIQ_0x20_START+10,
    E_INT_FIQ_HDMI_NON_PCM = E_INT_FIQ_0x20_START+11,
    E_INT_FIQ_SPDIF_IN_NON_PCM = E_INT_FIQ_0x20_START+12,
    E_INT_FIQ_EMAC = E_INT_FIQ_0x20_START+13,
    E_INT_FIQ_SE_DSP2UP = E_INT_FIQ_0x20_START+14,
    E_INT_FIQ_TSP2AEON = E_INT_FIQ_0x20_START+15,
    E_INT_FIQ_0x20_END = 0x2F,

    E_INT_FIQ_0x30_START = 0x30,
    E_INT_FIQ_VIVALDI_STR = E_INT_FIQ_0x30_START+0,
    E_INT_FIQ_VIVALDI_PTS = E_INT_FIQ_0x30_START+1,
    E_INT_FIQ_DSP_MIU_PROT = E_INT_FIQ_0x30_START+2,
    E_INT_FIQ_XIU_TIMEOUT = E_INT_FIQ_0x30_START+3,
    E_INT_FIQ_DMA_DONE = E_INT_FIQ_0x30_START+4,
    E_INT_FIQ_VSYNC_VE4VBI = E_INT_FIQ_0x30_START+5,
    E_INT_FIQ_FIELD_VE4VBI = E_INT_FIQ_0x30_START+6,
    E_INT_FIQ_VDMCU2HK = E_INT_FIQ_0x30_START+7,
    E_INT_FIQ_VE_DONE_TT = E_INT_FIQ_0x30_START+8,
    E_INT_FIQ_INT_CCFL = E_INT_FIQ_0x30_START+9,
    E_INT_FIQ_INT = E_INT_FIQ_0x30_START+10,
    E_INT_FIQ_IR = E_INT_FIQ_0x30_START+11,
    E_INT_FIQ_AFEC_VSYNC = E_INT_FIQ_0x30_START+12,
    E_INT_FIQ_DEC_DSP2UP = E_INT_FIQ_0x30_START+13,
    E_INT_FIQ_MIPS_WDT = E_INT_FIQ_0x30_START+14,
    E_INT_FIQ_DEC_DSP2MIPS = E_INT_FIQ_0x30_START+15,
    E_INT_FIQ_0x30_END = 0x3F,

    E_INT_IRQ_0x40_START = 0x40,
    E_INT_IRQ_SVD_HVD = E_INT_IRQ_0x40_START+0,
    E_INT_IRQ_USB2 = E_INT_IRQ_0x40_START+1,
    E_INT_IRQ_UHC2 = E_INT_IRQ_0x40_START+2,
    E_INT_IRQ_MIU = E_INT_IRQ_0x40_START+3,
    E_INT_IRQ_GDMA = E_INT_IRQ_0x40_START+4,
    E_INT_IRQ_UART2 = E_INT_IRQ_0x40_START+5,
    E_INT_IRQ_UART1 = E_INT_IRQ_0x40_START+6,
    E_INT_IRQ_DEMOD = E_INT_IRQ_0x40_START+7,
    E_INT_IRQ_MPIF = E_INT_IRQ_0x40_START+8,
    E_INT_IRQ_JPD = E_INT_IRQ_0x40_START+9,
    E_INT_IRQ_AEON2HI = E_INT_IRQ_0x40_START+10,
    E_INT_IRQ_BDMA0 = E_INT_IRQ_0x40_START+11,
    E_INT_IRQ_BDMA1 = E_INT_IRQ_0x40_START+12,
    E_INT_IRQ_OTG = E_INT_IRQ_0x40_START+13,
    E_INT_IRQ_MVD_CHECKSUM_FAIL = E_INT_IRQ_0x40_START+14,
    E_INT_IRQ_TSP_CHECKSUM_FAIL = E_INT_IRQ_0x40_START+15,
    E_INT_IRQ_0x40_END = 0x4F,

    E_INT_IRQ_0x50_START = 0x50,
    E_INT_IRQ_CA_I3 = E_INT_IRQ_0x50_START+0,
    E_INT_IRQ_HDMI_LEVEL = E_INT_IRQ_0x50_START+1,
    E_INT_IRQ_MIPS_WADR_ERR = E_INT_IRQ_0x50_START+2,
    E_INT_IRQ_RASP = E_INT_IRQ_0x50_START+3,
    E_INT_IRQ_CA_SVP = E_INT_IRQ_0x50_START+4,
    E_INT_IRQ_UART2MCU = E_INT_IRQ_0x50_START+5,
    E_INT_IRQ_URDMA2MCU = E_INT_IRQ_0x50_START+6,
    E_INT_IRQ_IIC1 = E_INT_IRQ_0x50_START+7,
    E_INT_IRQ_HDCP = E_INT_IRQ_0x50_START+8,
    E_INT_IRQ_DMA_WADR_ERR = E_INT_IRQ_0x50_START+9,
    E_INT_IRQ_UP_IRQ_UART_CA = E_INT_IRQ_0x50_START+10,
    E_INT_IRQ_UP_IRQ_EMM_ECM = E_INT_IRQ_0x50_START+11,
    E_INT_IRQ_ONIF = E_INT_IRQ_0x50_START+12,
    E_INT_IRQ_USB1 = E_INT_IRQ_0x50_START+13,
    E_INT_IRQ_UHC1 = E_INT_IRQ_0x50_START+14,
    E_INT_IRQ_MFE = E_INT_IRQ_0x50_START+15,
    E_INT_IRQ_0x50_END = 0x5F,

    E_INT_FIQ_0x60_START = 0x60,
    E_INT_FIQ_IR_INT_RC = E_INT_FIQ_0x60_START+0,
    E_INT_FIQ_HDMITX_IRQ_EDGE = E_INT_FIQ_0x60_START+1,
    E_INT_FIQ_UP_IRQ_UART_CA = E_INT_FIQ_0x60_START+2,
    E_INT_FIQ_UP_IRQ_EMM_ECM = E_INT_FIQ_0x60_START+3,
    E_INT_FIQ_PVR2MI_INT0 = E_INT_FIQ_0x60_START+4,
    E_INT_IRQ_CA_RSA_INT0 = E_INT_FIQ_0x60_START+4,
    E_INT_FIQ_PVR2MI_INT1 = E_INT_FIQ_0x60_START+5,
    E_INT_IRQ_FIQ_INT = E_INT_FIQ_0x60_START+6,
    E_INT_IRQ_UART3 = E_INT_FIQ_0x60_START+7,
    E_INT_FIQ_AEON_TO_MIPS_VPE0 = E_INT_FIQ_0x60_START+8,
    E_INT_FIQ_AEON_TO_MIPS_VPE1 = E_INT_FIQ_0x60_START+9,
    E_INT_FIQ_SECEMAC = E_INT_FIQ_0x60_START+10,
    E_INT_FIQ_IR2_INT = E_INT_FIQ_0x60_START+11,
    E_INT_FIQ_MIPS_VPE1_TO_MIPS_VPE0 = E_INT_FIQ_0x60_START+12,
    E_INT_FIQ_MIPS_VPE1_TO_AEON = E_INT_FIQ_0x60_START+13,
    E_INT_FIQ_MIPS_VPE1_TO_8051 = E_INT_FIQ_0x60_START+14,
    E_INT_FIQ_IR2_INT_RC = E_INT_FIQ_0x60_START+15,
    E_INT_FIQ_0x60_END = 0x6F,

    E_INT_FIQ_0x70_START = 0x70,
    E_INT_FIQ_MIPS_VPE0_TO_MIPS_VPE1 = E_INT_FIQ_0x70_START+0,
    E_INT_FIQ_MIPS_VPE0_TO_AEON = E_INT_FIQ_0x70_START+1,
    E_INT_FIQ_MIPS_VPE0_TO_8051 = E_INT_FIQ_0x70_START+2,
    E_INT_FIQ_IR_IN = E_INT_FIQ_0x70_START+3,
    E_INT_FIQ_DMDMCU2HK = E_INT_FIQ_0x70_START+4,
    E_INT_FIQ_R2TOMCU_INT0 = E_INT_FIQ_0x70_START+5,
    E_INT_FIQ_R2TOMCU_INT1 = E_INT_FIQ_0x70_START+6,
    E_INT_FIQ_DSPTOMCU_INT0 = E_INT_FIQ_0x70_START+7,
    E_INT_FIQ_DSPTOMCU_INT1 = E_INT_FIQ_0x70_START+8,
    E_INT_FIQ_USB = E_INT_FIQ_0x70_START+9,
    E_INT_FIQ_UHC = E_INT_FIQ_0x70_START+10,
    E_INT_FIQ_USB1 = E_INT_FIQ_0x70_START+11,
    E_INT_FIQ_UHC1 = E_INT_FIQ_0x70_START+12,
    E_INT_FIQ_USB2 = E_INT_FIQ_0x70_START+13,
    E_INT_FIQ_UHC2 = E_INT_FIQ_0x70_START+14,
    E_INT_FIQ_EXTIMER2 = E_INT_FIQ_0x70_START+15,

    E_INT_FIQ_0x70_END = 0x7F,




    E_INT_IRQ_0x80_START = 0x80,
    E_INT_IRQ_MLINK = E_INT_IRQ_0x80_START+0,
    E_INT_IRQ_AFEC = E_INT_IRQ_0x80_START+1,
    E_INT_IRQ_DPTX = E_INT_IRQ_0x80_START+2,
    E_INT_IRQ_TMDDRLINK = E_INT_IRQ_0x80_START+3,
    E_INT_IRQ_DISPI = E_INT_IRQ_0x80_START+4,
    E_INT_IRQ_EXP_MLINK = E_INT_IRQ_0x80_START+5,
    E_INT_IRQ_M4VE = E_INT_IRQ_0x80_START+6,
    E_INT_IRQ_DVI_HDMI_HDCP = E_INT_IRQ_0x80_START+7,
    E_INT_IRQ_G3D2MCU = E_INT_IRQ_0x80_START+8,
    E_INT_IRQ_VP6 = E_INT_IRQ_0x80_START+9,
    E_INT_IRQ_INT = E_INT_IRQ_0x80_START+10,
    E_INT_IRQ_CEC = E_INT_IRQ_0x80_START+11,
    E_INT_IRQ_HDCP_IIC = E_INT_IRQ_0x80_START+12,
    E_INT_IRQ_HDCP_X74 = E_INT_IRQ_0x80_START+13,
    E_INT_IRQ_WADR_ERR = E_INT_IRQ_0x80_START+14,
    E_INT_IRQ_DCSUB = E_INT_IRQ_0x80_START+15,
    E_INT_IRQ_0x80_END = 0x8F,

    E_INT_IRQ_0x90_START = 0x90,
    E_INT_IRQ_GE = E_INT_IRQ_0x90_START+0,
    E_INT_IRQ_SYNC_DET = E_INT_IRQ_0x90_START+1,
    E_INT_IRQ_FSP = E_INT_IRQ_0x90_START+2,
    E_INT_IRQ_PWM_RP_L = E_INT_IRQ_0x90_START+3,
    E_INT_IRQ_PWM_FP_L = E_INT_IRQ_0x90_START+4,
    E_INT_IRQ_PWM_RP_R = E_INT_IRQ_0x90_START+5,
    E_INT_IRQ_PWM_FP_R = E_INT_IRQ_0x90_START+6,
    E_INT_IRQ_FRC_SC = E_INT_IRQ_0x90_START+7,
    E_INT_IRQ_FRC_INT_FIQ2HST0 = E_INT_IRQ_0x90_START+8,
    E_INT_IRQ_SMART = E_INT_IRQ_0x90_START+9,
    E_INT_IRQ_MVD2MIPS = E_INT_IRQ_0x90_START+10,
    E_INT_IRQ_GPD = E_INT_IRQ_0x90_START+11,
    E_INT_IRQ_DS = E_INT_IRQ_0x90_START+12,
    E_INT_IRQ_FRC_INT_IRQ2HST0 = E_INT_IRQ_0x90_START+13,
    E_INT_IRQ_MIIC_DMA_INT3 = E_INT_IRQ_0x90_START+14,
    E_INT_IRQ_MIIC_INT3 = E_INT_IRQ_0x90_START+15,
    E_INT_IRQ_0x90_END = 0x9F,

    E_INT_IRQ_0xA0_START = 0xA0,
    E_INT_IRQ_IIC2 = E_INT_IRQ_0xA0_START+0,
    E_INT_IRQ_MIIC_DMA0 = E_INT_IRQ_0xA0_START+1,
    E_INT_IRQ_MIIC_DMA1 = E_INT_IRQ_0xA0_START+2,
    E_INT_IRQ_MIIC_DMA2 = E_INT_IRQ_0xA0_START+3,
    E_INT_IRQ_MSPI0 = E_INT_IRQ_0xA0_START+4,
    E_INT_IRQ_MSPI1 = E_INT_IRQ_0xA0_START+5,
    E_INT_IRQ_EXT_GPIO0 = E_INT_IRQ_0xA0_START+6,
    E_INT_IRQ_EXT_GPIO1 = E_INT_IRQ_0xA0_START+7,
    E_INT_IRQ_EXT_GPIO2 = E_INT_IRQ_0xA0_START+8,
    E_INT_IRQ_EXT_GPIO3 = E_INT_IRQ_0xA0_START+9,
    E_INT_IRQ_EXT_GPIO4 = E_INT_IRQ_0xA0_START+10,
    E_INT_IRQ_EXT_GPIO5 = E_INT_IRQ_0xA0_START+11,
    E_INT_IRQ_EXT_GPIO6 = E_INT_IRQ_0xA0_START+12,
    E_INT_IRQ_EXT_GPIO7 = E_INT_IRQ_0xA0_START+13,
    E_INT_IRQ_MIIC_DMA_INT2 = E_INT_IRQ_0xA0_START+14,
    E_INT_IRQ_MIIC_INT2 = E_INT_IRQ_0xA0_START+15,
    E_INT_IRQ_0xA0_END = 0xAF,

    E_INT_IRQ_0xB0_START = 0xB0,
    E_INT_IRQ_MIIC_DMA_INT1 = E_INT_IRQ_0xB0_START+0,
    E_INT_IRQ_MIIC_INT1 = E_INT_IRQ_0xB0_START+1,
    E_INT_IRQ_MIIC_DMA_INT0 = E_INT_IRQ_0xB0_START+2,
    E_INT_IRQ_MIIC_INT0 = E_INT_IRQ_0xB0_START+3,
    E_INT_IRQ_UHC30 = E_INT_IRQ_0xB0_START+4,
    E_INT_IRQ_AU_DMA = E_INT_IRQ_0xB0_START+5,
    E_INT_IRQ_DIPW = E_INT_IRQ_0xB0_START+6,
    E_INT_IRQ_HDMITX = E_INT_IRQ_0xB0_START+7,
    E_INT_IRQ_U3_DPHY = E_INT_IRQ_0xB0_START+8,
    E_INT_IRQEXPL_TSO = E_INT_IRQ_0xB0_START+9,
    E_INT_IRQ_TSP_TSO0 = E_INT_IRQ_0xB0_START+9,
    E_INT_IRQEXPH_CEC1 = E_INT_IRQ_0xB0_START+10,
    E_INT_IRQ_TSP_TSO1 = E_INT_IRQ_0xB0_START+10,
    E_INT_IRQ_BT_DMA = E_INT_IRQ_0xB0_START+11,
    E_INT_IRQ_BT_TAB = E_INT_IRQ_0xB0_START+12,
    E_INT_IRQ_SATA = E_INT_IRQ_0xB0_START+13,
    E_INT_IRQ_MHL_CBUS_PM = E_INT_IRQ_0xB0_START+14,
    E_INT_IRQ_MHL_CBUS_WAKEUP = E_INT_IRQ_0xB0_START+15,
    E_INT_IRQ_0xB0_END = 0xBF,




    E_INT_FIQ_0xC0_START = 0xC0,
    E_INT_FIQ_DMARD = E_INT_FIQ_0xC0_START+0,
    E_INT_FIQ_AU_DMA_BUF_INT = E_INT_FIQ_0xC0_START+1,
    E_INT_FIQ_8051_TO_MIPS_VPE1 = E_INT_FIQ_0xC0_START+2,
    E_INT_FIQ_DVI_DET = E_INT_FIQ_0xC0_START+3,
    E_INT_FIQ_PM_GPIO0 = E_INT_FIQ_0xC0_START+4,
    E_INT_FIQ_PM_GPIO1 = E_INT_FIQ_0xC0_START+5,
    E_INT_FIQ_PM_GPIO2 = E_INT_FIQ_0xC0_START+6,
    E_INT_FIQ_PM_GPIO3 = E_INT_FIQ_0xC0_START+7,
    E_INT_FIQ_PM_XIU_TIMEOUT = E_INT_FIQ_0xC0_START+8,
    E_INT_FIQ_PWM_RP_RP_L = E_INT_FIQ_0xC0_START+9,
    E_INT_FIQ_PWM_RP_FP_L = E_INT_FIQ_0xC0_START+10,
    E_INT_FIQ_PWM_RP_RP_R = E_INT_FIQ_0xC0_START+11,
    E_INT_FIQ_PWM_RP_FP_R = E_INT_FIQ_0xC0_START+12,
    E_INT_FIQ_8051_TO_MIPS_VPE0 = E_INT_FIQ_0xC0_START+13,
    E_INT_FIQ_FRC_R2_TO_MIPS = E_INT_FIQ_0xC0_START+14,
    E_INT_FIQ_VP6 = E_INT_FIQ_0xC0_START+15,
    E_INT_FIQ_0xC0_END = 0xCF,

    E_INT_FIQ_0xD0_START = 0xD0,
    E_INT_FIQ_STRETCH = E_INT_FIQ_0xD0_START+0,
    E_INT_FIQ_GPIO0 = E_INT_FIQ_0xD0_START+1,
    E_INT_FIQ_GPIO1 = E_INT_FIQ_0xD0_START+2,
    E_INT_FIQ_GPIO2 = E_INT_FIQ_0xD0_START+3,
    E_INT_FIQ_GPIO3 = E_INT_FIQ_0xD0_START+4,
    E_INT_FIQ_GPIO4 = E_INT_FIQ_0xD0_START+5,
    E_INT_FIQ_GPIO5 = E_INT_FIQ_0xD0_START+6,
    E_INT_FIQ_GPIO6 = E_INT_FIQ_0xD0_START+7,
    E_INT_FIQ_GPIO7 = E_INT_FIQ_0xD0_START+8,
    E_INT_FIQ_VE_VSYNC_IN = E_INT_FIQ_0xD0_START+9,
    E_INT_FIQEXPL_HST0_TO_3 = E_INT_FIQ_0xD0_START+10,
    E_INT_FIQEXPL_HST1_TO_3 = E_INT_FIQ_0xD0_START+11,
    E_INT_FIQEXPL_HST2_TO_3 = E_INT_FIQ_0xD0_START+12,
    E_INT_FIQEXPH_CMDQ = E_INT_FIQ_0xD0_START+13,
    E_INT_FIQEXPH_HDMITX_EDGE = E_INT_FIQ_0xD0_START+14,
    E_INT_FIQEXPH_UHC30 = E_INT_FIQ_0xD0_START+15,
    E_INT_INT_FIQ_0xD0_END = 0xDF,

    E_INT_FIQ_0xE0_START = 0xE0,
    E_INT_FIQ_LDM_DMA0 = E_INT_FIQ_0xE0_START+0,
    E_INT_IRQ_RASP1 = E_INT_FIQ_0xE0_START+0,
    E_INT_FIQ_LDM_DMA1 = E_INT_FIQ_0xE0_START+1,
    E_INT_IRQ_SECEMAC = E_INT_FIQ_0xE0_START+1,
    E_INT_IRQ_SDIO = E_INT_FIQ_0xE0_START+2,
    E_INT_IRQ_UHC3 = E_INT_FIQ_0xE0_START+3,
    E_INT_IRQ_USB3 = E_INT_FIQ_0xE0_START+4,
    E_INT_FIQ_GPIO8 = E_INT_FIQ_0xE0_START+5,
    E_INT_FIQ_GPIO9 = E_INT_FIQ_0xE0_START+6,
    E_INT_FIQ_DISP_TGEN0 = E_INT_FIQ_0xE0_START+7,
    E_INT_FIQ_CA_CRYPTO_DMA = E_INT_FIQ_0xE0_START+7,
    E_INT_FIQ_DISP_TGEN1 = E_INT_FIQ_0xE0_START+8,
    E_INT_IRQ_CA_PROG_PVR = E_INT_FIQ_0xE0_START+8,
    E_INT_FIQ_DISP_TGEN2 = E_INT_FIQ_0xE0_START+9,
    E_INT_IRQ_CA_NSK_INT = E_INT_FIQ_0xE0_START+9,
    E_INT_FIQ_DISP_TGEN3 = E_INT_FIQ_0xE0_START+10,
    E_INT_IRQ_TSP_ECM_FLT = E_INT_FIQ_0xE0_START+10,
    E_INT_IRQ_ERROR_RESP = E_INT_FIQ_0xE0_START+11,
    E_INT_IRQ_MIU_SECURITY = E_INT_FIQ_0xE0_START+12,
    E_INT_FIQ_TEMPERATURE_FLAG_FALL = E_INT_FIQ_0xE0_START+13,
    E_INT_IRQ_DISP1 = E_INT_FIQ_0xE0_START+13,
    E_INT_FIQ_TEMPERATURE_FLAG_RISE = E_INT_FIQ_0xE0_START+14,
    E_INT_IRQ_RTC1 = E_INT_FIQ_0xE0_START+14,
    E_INT_FIQ_U3_DPHY = E_INT_FIQ_0xE0_START+15,
    E_INT_IRQ_GPU2MCU = E_INT_FIQ_0xE0_START+15,
    E_INT_FIQ_0xE0_END = 0xEF,

    E_INT_FIQ_0xF0_START = 0xF0,
    E_INT_FIQ_DEC_DSP2R2M = E_INT_FIQ_0xF0_START+0,
    E_INT_FIQ_AEON_TO_R2M = E_INT_FIQ_0xF0_START+1,
    E_INT_FIQ_R2M_TO_AEON = E_INT_FIQ_0xF0_START+2,
    E_INT_FIQ_R2M_TO_8051 = E_INT_FIQ_0xF0_START+3,
    E_INT_IRQ_VIVALDI_DMA_INTR2 = E_INT_FIQ_0xF0_START+4,
    E_INT_FIQ_AU_DMA_INT = E_INT_FIQ_0xF0_START+4,
    E_INT_IRQ_VIVALDI_DMA_INTR1 = E_INT_FIQ_0xF0_START+5,
    E_INT_FIQ_AU_PCM_DMA_INT = E_INT_FIQ_0xF0_START+5,
    E_INT_IRQ_AFEC_INT = E_INT_FIQ_0xF0_START+6,
    E_INT_FIQ_AU_SPDIF_TX_CS0 = E_INT_FIQ_0xF0_START + 7,
    E_INT_FIQ_AU_SPDIF_TX_CS1 = E_INT_FIQ_0xF0_START + 8,
    E_INT_FIQ_PCM_DMA = E_INT_FIQ_0xF0_START + 9,
    E_INT_FIQ_DMDMCU2HK_1 = E_INT_FIQ_0xF0_START+9,
    E_INT_FIQ_VE_SW_WR2BUF = E_INT_FIQ_0xF0_START+10,
    E_INT_IRQ_FRM_PM = E_INT_FIQ_0xF0_START+11,
    E_INT_FIQ_FRM_PM = E_INT_FIQ_0xF0_START+12,
    E_INT_FIQ_SATA_PHY = E_INT_FIQ_0xF0_START+13,
    E_INT_IRQ_FIQ_NONE = E_INT_FIQ_0xF0_START+14,
    E_INT_IRQ_FIQ_ALL = E_INT_FIQ_0xF0_START+15,
    E_INT_FIQ_0xF0_END = 0xFF,

    E_INT_IRQ_0x100_START = 0x100,
    E_INT_IRQ_RIU_ERROR = E_INT_IRQ_0x100_START+0,
    E_INT_IRQ_EVD = E_INT_IRQ_0x100_START+1,
    E_INT_IRQ_SWCD = E_INT_IRQ_0x100_START+1,
    E_INT_IRQ_MIU_SECURE = E_INT_IRQ_0x100_START+2,
    E_INT_IRQ_TIMER2 = E_INT_IRQ_0x100_START+3,
    E_INT_FIQ_8051_TO_SECURER2 = E_INT_IRQ_0x100_START+4,
    E_INT_FIQ_AEON_TO_SECURER2 = E_INT_IRQ_0x100_START+5,
    E_INT_FIQ_BEON_TO_SECURER2 = E_INT_IRQ_0x100_START+6,
    E_INT_FIQ_SECURER2_TO_BEON = E_INT_IRQ_0x100_START+7,
    E_INT_FIQ_SECURER2_TO_AEON = E_INT_IRQ_0x100_START+8,
    E_INT_FIQ_SECURER2_TO_8051 = E_INT_IRQ_0x100_START+9,
    E_INT_IRQ_SAR1 = E_INT_IRQ_0x100_START+10,
    E_INT_IRQ_IDAC_PLUG_DET = E_INT_IRQ_0x100_START+11,
    E_INT_FIQ_AU_SPDIF_TX_CS2 = E_INT_IRQ_0x100_START+12,
    E_INT_IRQ_CA_IP_INT = E_INT_IRQ_0x100_START+13,
    E_INT_IRQ_AKL_INT = E_INT_IRQ_0x100_START+14,
    E_INT_FIQ_MB_A2M_INT0 = E_INT_IRQ_0x100_START+15,
    E_INT_FIQ_0x100_END = 0x10F,

    E_INT_FIQ_0x110_START = 0x110,
    E_INT_FIQ_MB_D2M_INT0 = E_INT_FIQ_0x110_START+0,
    E_INT_FIQ_MB_D2M_INT1 = E_INT_FIQ_0x110_START+1,
    E_INT_FIQ_MB_A2M_INT1 = E_INT_FIQ_0x110_START+2,
    E_INT_FIQ_MB_A2M_INT2 = E_INT_FIQ_0x110_START+3,
    E_INT_FIQ_MB_A2M_INT3 = E_INT_FIQ_0x110_START+4,
    E_INT_IRQ_FIQ_OTG = E_INT_FIQ_0x110_START+5,
    E_INT_IRQ_VP9_HK2VD_R2 = E_INT_FIQ_0x110_START+6,
    E_INT_FIQ_8051_TO_SECURE51 = E_INT_FIQ_0x110_START+7,
    E_INT_FIQ_SECURE51_TO_8051 = E_INT_FIQ_0x110_START+8,
    E_INT_FIQ_BEON_TO_SECURE51 = E_INT_FIQ_0x110_START+9,
    E_INT_FIQ_SECURE51_TO_BEON = E_INT_FIQ_0x110_START+10,
    E_INT_FIQ_SECURER2_TO_SECURE51 = E_INT_FIQ_0x110_START+11,
    E_INT_FIQ_SECURE51_TO_SECURER2 = E_INT_FIQ_0x110_START+12,
    E_INT_FIQ_PM_SD_CDZ0 = E_INT_FIQ_0x110_START + 13,
    E_INT_FIQ_PM_SD_CDZ1 = E_INT_FIQ_0x110_START + 14,
    E_INT_FIQ_TSO_INT = E_INT_FIQ_0x110_START + 15,
    E_INT_FIQ_0x110_END = 0x11F,

    E_INT_IRQ_0x120_START = 0x120,
    E_INT_IRQ_SPI2FCIE = E_INT_IRQ_0x120_START + 0,
    E_INT_IRQ_USB30_SS_INT = E_INT_IRQ_0x120_START + 1,
    E_INT_IRQ_USB30_HS_UHC_INT0 = E_INT_IRQ_0x120_START + 2,
    E_INT_IRQ_USB30_HS_UHC_INT1 = E_INT_IRQ_0x120_START + 3,
    E_INT_IRQ_USB30_HS_USB_INT = E_INT_IRQ_0x120_START + 4,
    E_INT_IRQ_MIIC_INT4 = E_INT_IRQ_0x120_START + 5,
    E_INT_IRQ_MIIC_INT5 = E_INT_IRQ_0x120_START + 6,
    E_INT_IRQ_UART4 = E_INT_IRQ_0x120_START + 7,
    E_INT_IRQ_BDMA = E_INT_IRQ_0x120_START + 8,
    E_INT_IRQ_ZDEC = E_INT_IRQ_0x120_START + 9,
    E_INT_IRQ_FRC = E_INT_IRQ_0x120_START + 10,
    E_INT_FIQ_USB3 = E_INT_IRQ_0x120_START + 11,
    E_INT_FIQ_UHC3 = E_INT_IRQ_0x120_START + 12,
    E_INT_FIQ_R2TOMCU_INT2 = E_INT_IRQ_0x120_START + 13,
    E_INT_FIQ_R2TOMCU_INT3 = E_INT_IRQ_0x120_START + 14,
    E_INT_IRQ_PM_ERROR_RESP = E_INT_IRQ_0x120_START + 15,
    E_INT_IRQ_0x120_END = 0x12F,

    E_INT_IRQ_0x130_START = 0x130,
    E_INT_IRQ_AUDMA_V2_INT = E_INT_IRQ_0x130_START + 1,
    E_INT_IRQ_EMMC_OSP_INT = E_INT_IRQ_0x130_START + 2,
    E_INT_IRQ_MHL_ECBUS_INT = E_INT_IRQ_0x130_START + 3,
    E_INT_IRQ_SDIO_OSP_INT = E_INT_IRQ_0x130_START + 4,
    E_INT_IRQ_DISP_FE_INT = E_INT_IRQ_0x130_START + 7,
    E_INT_IRQ_SCDC_PM_INT = E_INT_IRQ_0x130_START + 8,
    E_INT_IRQ_USB30_HS1_USB_INT = E_INT_IRQ_0x130_START + 9,
    E_INT_IRQ_USB30_HS1_UHC_INT = E_INT_IRQ_0x130_START + 10,
    E_INT_IRQ_USB30_HS_UHC_INT = E_INT_IRQ_0x130_START + 11,
    E_INT_IRQ_TSP_FI_QUEUE_INT = E_INT_IRQ_0x130_START + 12,
    E_INT_IRQ_DISP_SC2_INT = E_INT_IRQ_0x130_START + 13,
    E_INT_IRQ_MSPI_MCARD_INT = E_INT_IRQ_0x130_START + 14,
    E_INT_IRQ_CFKTKS_NONSEC_INT = E_INT_IRQ_0x130_START + 15,
    E_INT_IRQ_0x130_END = 0x13F,

    E_INT_IRQ_0x140_START = 0x140,
    E_INT_IRQ_CFKTKS_INT = E_INT_IRQ_0x140_START + 0,
    E_INT_IRQ_CFDONE_INT = E_INT_IRQ_0x140_START + 1,
    E_INT_IRQ_MIU_TLB_INT = E_INT_IRQ_0x140_START + 2,
    E_INT_IRQ_PAS_PTS_COMBINE_INT = E_INT_IRQ_0x140_START + 3,
    E_INT_IRQ_AESDMA_S_INT = E_INT_IRQ_0x140_START + 4,
    E_INT_IRQ_VD_EVD_R22HI_INT = E_INT_IRQ_0x140_START + 5,
    E_INT_IRQ_MOD_DET_INT = E_INT_IRQ_0x140_START + 6,
    E_INT_HDCP_ICC_INT = E_INT_IRQ_0x140_START + 7,
    E_INT_CMDQ_SUB_INT = E_INT_IRQ_0x140_START + 8,
    E_INT_OTG_INIT = E_INT_IRQ_0x140_START + 9,
    E_INT_VP9_HK2VD_R2_INT = E_INT_IRQ_0x140_START + 10,
    E_INT_KG1_INT = E_INT_IRQ_0x140_START + 11,
    E_INT_PKA_ALL_INT = E_INT_IRQ_0x140_START + 12,
    E_INT_AESDMA_PROT_2_INT = E_INT_IRQ_0x140_START + 13,
    E_INT_CERT_KTKS_INI_NONSEC_INT = E_INT_IRQ_0x140_START + 14,
    E_INT_CERT_KTKS_INT = E_INT_IRQ_0x140_START + 15,
    E_INT_IRQ_0x140_END = 0x14F,

    E_INT_FIQ_0x150_START = 0x150,
    E_INT_FIQ_LAN_ESD_INT = E_INT_FIQ_0x150_START + 0,
    E_INT_FIQ_TIMER2_INT = E_INT_FIQ_0x150_START + 1,
    E_INT_FIQ_SPI2FCIE = E_INT_FIQ_0x150_START + 2,
    E_INT_IRQ_EXT_GPIO_MERGE = E_INT_FIQ_0x150_START + 3,
    E_INT_IRQ_DIMOND_L3_BRIDGE_INT = E_INT_FIQ_0x150_START + 4,
    E_INT_IRQ_PAS_PTS_INTRL_COMBINE = E_INT_FIQ_0x150_START + 5,
    E_INT_FIQ_GPIO22_INT = E_INT_FIQ_0x150_START + 6,
    E_INT_IRQ_PAS_PTS_INT_COMBINE = E_INT_FIQ_0x150_START + 7,
    E_INT_IRQ_GPIO22_INT_INV = E_INT_FIQ_0x150_START + 8,
    E_INT_IRQ_AESDMA = E_INT_FIQ_0x150_START + 9,
    E_INT_FIQ_MIU_CMA_CLR = E_INT_FIQ_0x150_START + 10,
    E_INT_FIQ_TSP_SPARE_CA2PM_8 = E_INT_FIQ_0x150_START + 11,
    E_INT_FIQ_MIU_NS = E_INT_FIQ_0x150_START + 12,
    E_INT_FIQ_0x150_END = 0x15F,


    E_INT_IRQ_0x160_START = 0x160,
    E_INT_IRQ_AESDMA2_S_INT = E_INT_IRQ_0x160_START + 0,
    E_INT_IRQ_AESMDA2_INT = E_INT_IRQ_0x160_START + 1,
    E_INT_IRQ_RXIU_TIMEOUT_NODEF_INT = E_INT_IRQ_0x160_START + 2,
    E_INT_IRQ_EVD_LITE = E_INT_IRQ_0x160_START + 3,
    E_INT_IRQ_PCIE = E_INT_IRQ_0x160_START + 4,
    E_INT_IRQ_PCIE_PHY = E_INT_IRQ_0x160_START + 5,
    E_INT_IRQ_SMART1 = E_INT_IRQ_0x160_START + 6,
    E_INT_IRQ_TSIO_INT = E_INT_IRQ_0x160_START + 7,
    E_INT_IRQ_SATA_PHY = E_INT_IRQ_0x160_START + 8,
    E_INT_IRQ_TSIO_LOC_DEC = E_INT_IRQ_0x160_START + 9,
    E_INT_IRQ_PKA_ALL_INT = E_INT_IRQ_0x160_START + 10,
    E_INT_IRQ_VIVALDI_V9_MIU_AL = E_INT_IRQ_0x160_START + 11,
    E_INT_IRQ_PWD_STATUS_INT = E_INT_IRQ_0x160_START + 12,
 E_INT_IRQ_PM_IRQ_OUT = E_INT_IRQ_0x160_START + 13,
 E_INT_IRQ_RXIU_TIMEOUT_NODEFINE_INT = E_INT_IRQ_0x160_START + 14,
    E_INT_IRQ_0x160_END = 0x16F,

    E_INT_IRQ_0x170_START = 0x170,
    E_INT_IRQ_GMAC = E_INT_IRQ_0x170_START + 0,
    E_INT_FIQ_SEC_TIMER0 = E_INT_IRQ_0x170_START + 1,
    E_INT_FIQ_SEC_TIMER1 = E_INT_IRQ_0x170_START + 2,
    E_INT_FIQ_SEC_GUARD_INT = E_INT_IRQ_0x170_START + 3,
    E_INT_FIQ_USB_INT_P0 = E_INT_IRQ_0x170_START + 4,
    E_INT_FIQ_UHC_INT_P0 = E_INT_IRQ_0x170_START + 5,
    E_INT_FIQ_USB30_SS_INT = E_INT_IRQ_0x170_START + 6,
    E_INT_FIQ_OTG_INT_P0 = E_INT_IRQ_0x170_START + 7,
    E_INT_FIQ_USB_INT_P1 = E_INT_IRQ_0x170_START + 8,
    E_INT_FIQ_UHC_INT_P1 = E_INT_IRQ_0x170_START + 9,
    E_INT_FIQ_USB31_HS_USB_INT = E_INT_IRQ_0x170_START + 10,
    E_INT_FIQ_USB30_HS_UHC_INT = E_INT_IRQ_0x170_START + 11,
    E_INT_IRQ_UART5 = E_INT_IRQ_0x170_START + 12,
    E_INT_IRQ_DIAMOND_L3_BRIDGE = E_INT_IRQ_0x170_START + 13,
    E_INT_IRQ_MOD_DETECT_INT = E_INT_IRQ_0x170_START + 14,
    E_INT_IRQ_0x170_END = 0x17F,

    E_INT_IRQ_0x180_START = 0x180,
    E_INT_IRQ_GPIO12_INT_INV = E_INT_IRQ_0x180_START + 1,
    E_INT_IRQ_GPIO12_INT = E_INT_IRQ_0x180_START + 2,
    E_INT_FIQ_GPIO12_INT_INV = E_INT_IRQ_0x180_START + 3,
    E_INT_FIQ_GPIO12_INT = E_INT_IRQ_0x180_START + 4,
    E_INT_FIQ_GPIO22_INT_INV = E_INT_IRQ_0x180_START + 5,
    E_INT_IRQ_GPIO22_INT = E_INT_IRQ_0x180_START + 6,
    E_INT_IRQ_TS0_VLD = E_INT_IRQ_0x180_START + 7,
    E_INT_IRQ_TS1_VLD = E_INT_IRQ_0x180_START + 8,
    E_INT_IRQ_TSIO = E_INT_IRQ_0x180_START + 9,
    E_INT_IRQ_GPIO_TRIGGER = E_INT_IRQ_0x180_START + 10,
    E_INT_IRQ_RTC2 = E_INT_IRQ_0x180_START + 11,
    E_INT_IRQ_VDR2_ADDR_LIMIT = E_INT_IRQ_0x180_START + 12,
    E_INT_IRQ_VIVALDI_AL_L = E_INT_IRQ_0x180_START + 13,
    E_INT_FIQ_SEC_GUARD = E_INT_IRQ_0x180_START + 14,
    E_INT_IRQ_0x180_END = 0x18F,

    E_INT_FIQ_0x190_START = 0x190,
    E_INT_FIQ_TS0_VLD = E_INT_FIQ_0x190_START + 1,
    E_INT_FIQ_TS1_VLD = E_INT_FIQ_0x190_START + 2,
    E_INT_FIQ_TS2_VLD = E_INT_FIQ_0x190_START + 3,
    E_INT_FIQ_TS3_VLD = E_INT_FIQ_0x190_START + 4,
    E_INT_FIQ_TS4_VLD = E_INT_FIQ_0x190_START + 5,
    E_INT_FIQ_TS5_VLD = E_INT_FIQ_0x190_START + 6,
    E_INT_FIQ_TS3_CLK = E_INT_FIQ_0x190_START + 7,
    E_INT_FIQ_TS4_CLK = E_INT_FIQ_0x190_START + 8,
    E_INT_FIQ_TS5_CLK = E_INT_FIQ_0x190_START + 9,
    E_INT_FIQ_TS6_CLK = E_INT_FIQ_0x190_START + 10,
 E_INT_FIQ_EMAC_MAN_INT = E_INT_FIQ_0x190_START + 11,
 E_INT_IRQ_GMAC_TX = E_INT_FIQ_0x190_START + 12,
    E_INT_FIQ_0x190_END = 0x19F,

    E_INT_IRQ_MAX,
} InterruptNum;

typedef enum
{

    E_FRCINT_IRQ_0x00_START = 0x00,
    E_FRCINT_IRQ_ERROR_RESP_INT = E_FRCINT_IRQ_0x00_START+ 6,
    E_FRCINT_IRQ_MC2D_MEDONE_INT3 = E_FRCINT_IRQ_0x00_START+ 7,
    E_FRCINT_IRQ_MC2D_MEDONE_INT2 = E_FRCINT_IRQ_0x00_START+ 8,
    E_FRCINT_IRQ_MC2D_MEDONE_INT1 = E_FRCINT_IRQ_0x00_START+ 9,
    E_FRCINT_IRQ_MC2D_MEDONE_INT0 = E_FRCINT_IRQ_0x00_START+10,
    E_FRCINT_IRQ_FSC_INT1 = E_FRCINT_IRQ_0x00_START+11,
    E_FRCINT_IRQ_FSC_INT0 = E_FRCINT_IRQ_0x00_START+12,
    E_FRCINT_IRQ_FO_INT_CPU0_OP_INT = E_FRCINT_IRQ_0x00_START+13,
    E_FRCINT_IRQ_FO_INT_CPU1_OP_INT = E_FRCINT_IRQ_0x00_START+14,
    E_FRCINT_IRQ_0x00_END = 0x0F,

    E_FRCINT_IRQ_0x10_START = 0x10,
    E_FRCINT_IRQ_FRC_XIU_TIMEOUT = E_FRCINT_IRQ_0x10_START+5,
    E_FRCINT_IRQ_PWM_RP_L = E_FRCINT_IRQ_0x10_START+6,
    E_FRCINT_IRQ_PWM_FP_L = E_FRCINT_IRQ_0x10_START+7,
    E_FRCINT_IRQ_PWM_RP_R = E_FRCINT_IRQ_0x10_START+8,
    E_FRCINT_IRQ_PWM_FP_R = E_FRCINT_IRQ_0x10_START+9,
    E_FRCINT_IRQ_SC = E_FRCINT_IRQ_0x10_START+10,
    E_FRCINT_IRQ_D2B = E_FRCINT_IRQ_0x10_START+11,
    E_FRCINT_IRQ_MSPI3 = E_FRCINT_IRQ_0x10_START+12,
    E_FRCINT_IRQ_MSPI2 = E_FRCINT_IRQ_0x10_START+13,
    E_FRCINT_IRQ_MSPI1 = E_FRCINT_IRQ_0x10_START+14,
    E_FRCINT_IRQ_MSPI0 = E_FRCINT_IRQ_0x10_START+15,
    E_FRCINT_IRQ_0x10_END = 0x1F,


    E_FRCINT_FIQ_0x20_START = 0x20,
    E_FRCINT_FIQ_HST0_TO_HST1 = E_FRCINT_FIQ_0x20_START+ 0,
    E_FRCINT_FIQ_HST0_TO_HST2 = E_FRCINT_FIQ_0x20_START+ 1,
    E_FRCINT_FIQ_HST0_TO_HST3 = E_FRCINT_FIQ_0x20_START+ 2,
    E_FRCINT_FIQ_HST1_TO_HST0 = E_FRCINT_FIQ_0x20_START+ 3,
    E_FRCINT_FIQ_HST1_TO_HST2 = E_FRCINT_FIQ_0x20_START+ 4,
    E_FRCINT_FIQ_HST1_TO_HST3 = E_FRCINT_FIQ_0x20_START+ 5,
    E_FRCINT_FIQ_HST2_TO_HST0 = E_FRCINT_FIQ_0x20_START+ 6,
    E_FRCINT_FIQ_HST2_TO_HST1 = E_FRCINT_FIQ_0x20_START+ 7,
    E_FRCINT_FIQ_HST2_TO_HST3 = E_FRCINT_FIQ_0x20_START+ 8,
    E_FRCINT_FIQ_HST3_TO_HST0 = E_FRCINT_FIQ_0x20_START+ 9,
    E_FRCINT_FIQ_HST3_TO_HST1 = E_FRCINT_FIQ_0x20_START+10,
    E_FRCINT_FIQ_HST3_TO_HST2 = E_FRCINT_FIQ_0x20_START+11,
    E_FRCINT_FIQ_FRC_TIMER0 = E_FRCINT_FIQ_0x20_START+12,
    E_FRCINT_FIQ_FRC_TIMER1 = E_FRCINT_FIQ_0x20_START+13,


    E_FRCINT_FIQ_HKCPU_TO_FRCR2 = E_FRCINT_FIQ_HST0_TO_HST1,
    E_FRCINT_FIQ_FRCR2_TO_HKCPU = E_FRCINT_FIQ_HST1_TO_HST0,
    E_FRCINT_FIQ_HKIPVS_TO_FRCR2 = E_FRCINT_FIQ_HST0_TO_HST2,
    E_FRCINT_FIQ_HKOPVS_TO_FRCR2 = E_FRCINT_FIQ_HST0_TO_HST3,
    E_FRCINT_FIQ_MIPS_TO_FRCR2 = E_FRCINT_FIQ_HST0_TO_HST1,
    E_FRCINT_FIQ_FRCR2_TO_MIPS = E_FRCINT_FIQ_HST1_TO_HST2,

    E_FRCINT_FIQ_0x20_END = 0x2F,

    E_FRCINT_FIQ_0x30_START = 0x30,
    E_FRCINT_FIQ_FRC_XIU_TIMEOUT = E_FRCINT_FIQ_0x30_START+ 2,
    E_FRCINT_FIQ_FRC_TO_MCU = E_FRCINT_FIQ_0x30_START+ 4,
    E_FRCINT_FIQ_MCU_TO_FRC = E_FRCINT_FIQ_0x30_START+ 5,

    E_FRCINT_FIQ_PWM_RP_L = E_FRCINT_FIQ_0x30_START+ 6,
    E_FRCINT_FIQ_PWM_FP_L = E_FRCINT_FIQ_0x30_START+ 7,
    E_FRCINT_FIQ_PWM_RP_R = E_FRCINT_FIQ_0x30_START+ 8,
    E_FRCINT_FIQ_PWM_FP_R = E_FRCINT_FIQ_0x30_START+ 9,
    E_FRCINT_FIQ_LDM_DMA_DONE3 = E_FRCINT_FIQ_0x30_START+10,
    E_FRCINT_FIQ_LDM_DMA_DONE2 = E_FRCINT_FIQ_0x30_START+11,
    E_FRCINT_FIQ_LDM_DMA_DONE1 = E_FRCINT_FIQ_0x30_START+12,
    E_FRCINT_FIQ_LDM_DMA_DONE0 = E_FRCINT_FIQ_0x30_START+13,
    E_FRCINT_FIQ_SC = E_FRCINT_FIQ_0x30_START+14,
    E_FRCINT_FIQ_OP2_VS = E_FRCINT_FIQ_0x30_START+15,
    E_FRCINT_FIQ_0x30_END = 0x3F,

    E_FRCINT_FIQ_0x40_START = 0x40,
    E_FRCINT_FIQ_MC2D_MEDONE_INT3 = E_FRCINT_FIQ_0x40_START+ 1,
    E_FRCINT_FIQ_MC2D_MEDONE_INT2 = E_FRCINT_FIQ_0x40_START+ 2,
    E_FRCINT_FIQ_FSC_INIT1 = E_FRCINT_FIQ_0x40_START+ 3,
    E_FRCINT_FIQ_FSC_INIT0 = E_FRCINT_FIQ_0x40_START+ 4,
    E_FRCINT_FIQ_FO_INT_CPU0_OP = E_FRCINT_FIQ_0x40_START+ 5,
    E_FRCINT_FIQ_FO_INT_CPU1_OP = E_FRCINT_FIQ_0x40_START+ 6,

    E_FRCINT_FIQ_0x40_END = E_FRCINT_FIQ_0x40_START+15,


    E_FRCINT_FIQ_0xF0_START = 0xF0,
    E_FRCINT_IRQ_FIQ_NONE = E_FRCINT_FIQ_0xF0_START+14,
    E_FRCINT_IRQ_FIQ_ALL = E_FRCINT_FIQ_0xF0_START+15,
    E_FRCINT_FIQ_0xF0_END = 0xFF,

} InterruptNum_Frc;

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCPU.h"
#ifndef _DRV_CPU_H_
#define _DRV_CPU_H_ 

#include "MsTypes.h"
#include "MsDevice.h"

#ifdef __cplusplus
extern "C"
{
#endif

#define CPU_UTOPIA20 (1)
# 125 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCPU.h"
#define MSIF_COPRO_LIB_CODE {'C','O','P','R'}
#define MSIF_COPRO_LIBVER {'0','2'}
#define MSIF_COPRO_BUILDNUM {'1','0'}
#define MSIF_COPRO_CHANGELIST {'0','0','5','5','7','0','9','3'}

#define COPRO_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_COPRO_LIB_CODE, \
    MSIF_COPRO_LIBVER, \
    MSIF_COPRO_BUILDNUM, \
    MSIF_COPRO_CHANGELIST, \
    MSIF_OS





typedef enum
{
    E_COPRO_OK,
    E_COPRO_FAIL,
} COPRO_Result;

typedef struct _COPRO_DrvInfo
{
    MS_BOOL Init;
    MS_U32 u32Addr;
} COPRO_DrvInfo;


typedef struct _COPRO_DrvStatus
{
    MS_BOOL HwBusy;
} COPRO_DrvStatus;

typedef enum _COPRO_DbgLv
{
    E_COPRO_DBGLV_NONE,
    E_COPRO_DBGLV_ERR_ONLY,
    E_COPRO_DBGLV_INFO,
    E_COPRO_DBGLV_ALL
}COPRO_DbgLv;

typedef enum
{
    Q_PARALLEL,
    Q_STATE,
    Q_MPEG2_FS,
    Q_MPEG2,
    Q_TSPLAYER_FS,
    Q_TSPLAYER,
    Q_VDPLAYER_FS,
    Q_VDPLAYER,
    Q_MBFS,
    Q_IR,
    Q_OBAMA,
    Q_PRINT_MESSAGE,
    Q_CIPLUS,
    Q_DLNA,
    Q_BTPD,
    Q_KTV,
    Q_SHWFS,
    Q_APENGINE,
    Q_MM,
    Q_MHEG5,
    Q_NWDEBUG,
    Q_NUM,
} Q_TYPE;




#if (CPU_UTOPIA20)
#include "drvCPU_v2.h"
#endif





    void MDrv_COPRO_Disable(void);




    void MDrv_COPRO_Enable(MS_U32 u32_ADR);


    void MDrv_SetBEON_Host(MS_BOOL bHost);




    void MDrv_COPRO_Init_Front(void);




    void MDrv_COPRO_Init_End(MS_U32 u32_ADR);




    const COPRO_DrvInfo* MDrv_COPRO_GetInfo(void);




    COPRO_Result MDrv_COPRO_GetLibVer(const MSIF_Version **ppVersion);




    COPRO_Result MDrv_COPRO_GetStatus(COPRO_DrvStatus *pStatus);



    void MDrv_COPRO_SetDbgLevel(MS_U8 u8Level);




    MS_VIRT MDrv_COPRO_GetBase(void);




    MS_U32 MDrv_CPU_QueryClock(void);




    MS_U32 MDrv_CPU_SetPowerState(EN_POWER_MODE u16PowerState);




 MS_U32 MDrv_CPU_GetDqmemInfo(MS_U32 *pu32_DqmemAddr, MS_U32 *pu32_DqmemSize);

#if !defined(CONFIG_FRC)
void MDrv_FRCR2_Init_Front(void);
void MDrv_FRCR2_Init_End(MS_U32 u32_ADR);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 224 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
#ifndef __API_DMX_H__
#define __API_DMX_H__ 

#include "MsCommon.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif


#define DMX_PID_NULL (0x1FFFUL)



#define DMX_SECT_FLT_DEPTH (16UL)


#define DMX_DMXID_NULL ((MS_U8)0xFFUL)
#define MSIF_DMX_LIB_CODE {'D','M','X','_'}
#define MSIF_DMX_LIBVER {'1','5'}
#define MSIF_DMX_BUILDNUM {'0','3'}
#define MSIF_DMX_CHANGELIST {'0','0','6','1','7','4','7','0'}


#define DMX_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMX_LIB_CODE, \
    MSIF_DMX_LIBVER, \
    MSIF_DMX_BUILDNUM, \
    MSIF_DMX_CHANGELIST, \
    MSIF_OS


typedef enum
{
    DMX_FILTER_STATUS_OK,
    DMX_FILTER_STATUS_ERROR,
    DMX_FILTER_STATUS_NOT_SUPPORT,
    DMX_FILTER_STATUS_MULTIPRC_RUNNING
} DMX_FILTER_STATUS;


typedef enum
{
    DMX_DBG_NONE,
    DMX_DBG_ERR,
    DMX_DBG_WARN,
    DMX_DBG_INFO,
    DMX_DBG_PVR,
    DMX_DBG_FUNC
} DMX_DBGMSG_LEVEL;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__)) _DMX_FW_Param
#else
typedef struct DLL_PACKED _DMX_FW_Param
#endif
{
    MS_PHY phyFWAddr;
    MS_U32 u32FWSize;

    MS_PHY phyVQAddr;
    MS_U32 u32VQSize;

    MS_U32 u32IsHK;
    MS_U32 u32Res;

    MS_U32 _zero_reserved[2];

} DMX_TSPParam;


#if 0

typedef enum
{
    DMX_FILTER_TYPE_VIDEO,
    DMX_FILTER_TYPE_AUDIO,
    DMX_FILTER_TYPE_AUDIO2,
    DMX_FILTER_TYPE_SECTION,
    DMX_FILTER_TYPE_PES,
    DMX_FILTER_TYPE_PACKET,
    DMX_FILTER_TYPE_PCR,
    DMX_FILTER_TYPE_TELETEXT,

    DMX_FILTER_SOURCE_TYPE_MASK = 0xC0000000,
    DMX_FILTER_SOURCE_TYPE_LIVE = 0x80000000,
    DMX_FILTER_SOURCE_TYPE_FILE = 0x40000000,
} DMX_FILTER_TYPE;
#endif


#define DMX_FILTER_TYPE MS_U32

#define DMX_FILTER_TYPE_VIDEO 0x00000000UL
#define DMX_FILTER_TYPE_AUDIO 0x00000001UL
#define DMX_FILTER_TYPE_AUDIO2 0x00000002UL
#define DMX_FILTER_TYPE_SECTION 0x00000003UL
#define DMX_FILTER_TYPE_PES 0x00000004UL
#define DMX_FILTER_TYPE_PACKET 0x00000005UL
#define DMX_FILTER_TYPE_PCR 0x00000006UL
#define DMX_FILTER_TYPE_TELETEXT 0x00000007UL
#define DMX_FILTER_TYPE_VIDEO3D 0x00000008UL
#define DMX_FILTER_TYPE_VIDEO2 DMX_FILTER_TYPE_VIDEO3D
#define DMX_FILTER_TYPE_AUDIO3 0x00000009UL
#define DMX_FILTER_TYPE_AUDIO4 0x0000000AUL
#define DMX_FILTER_TYPE_REC 0x0000000BUL
#define DMX_FILTER_TYPE_SCMBCHK 0x0000000CUL
#define DMX_FILTER_TYPE_SECTION_VER 0x0000000DUL
#define DMX_FILTER_TYPE_SECTION_NO_PUSI 0x0000000EUL
#define DMX_FILTER_TYPE_VIDEO3 0x0000000FUL
#define DMX_FILTER_TYPE_VIDEO4 0x00000010UL
#if defined(UFO_PUBLIC_HEADER_500_3)
#define DMX_FILTER_TYPE_PVR 0x00000010UL
#define DMX_FILTER_TYPE_PVR1 0x00000011UL
#define DMX_FILTER_TYPE_PVR2 0x00000012UL
#define DMX_FILTER_TYPE_PVR3 0x00000013UL
#else
#define DMX_FILTER_TYPE_PVR 0x00000011UL
#define DMX_FILTER_TYPE_PVR1 0x00000012UL
#define DMX_FILTER_TYPE_PVR2 0x00000013UL
#define DMX_FILTER_TYPE_PVR3 0x00000014UL
#endif
#define DMX_FILTER_TYPE_PVR4 0x00000015UL
#define DMX_FILTER_TYPE_PVR5 0x00000016UL
#define DMX_FILTER_TYPE_PVR6 0x00000017UL
#define DMX_FILTER_TYPE_PVR7 0x00000018UL
#define DMX_FILTER_TYPE_PVR8 0x00000019UL
#define DMX_FILTER_TYPE_PVR9 0x0000001AUL
#define DMX_FILTER_TYPE_AUDIO5 0x0000001BUL
#define DMX_FILTER_TYPE_AUDIO6 0x0000001CUL
#define DMX_FILTER_TYPE_VIDEO5 0x0000001DUL
#define DMX_FILTER_TYPE_VIDEO6 0x0000001EUL
#define DMX_FILTER_TYPE_VIDEO7 0x0000001FUL
#define DMX_FILTER_TYPE_VIDEO8 0x00000020UL
#define DMX_FILTER_FLT_MASK 0xF3FF0F00UL

#define DMX_FILTER_SOURCE_TYPE_MASK 0xF0FC0000UL
#define DMX_FILTER_SOURCE_TYPE_LIVE 0x80000000UL
#define DMX_FILTER_SOURCE_TYPE_FILE 0x40000000UL
#define DMX_FILTER_SOURCE_TYPE_LIVEB DMX_FILTER_SOURCE_TYPE_FILE
#define DMX_FILTER_SOURCE_TYPE_TS1 0x00800000UL
#define DMX_FILTER_SOURCE_TYPE_TS2 0x00400000UL
#define DMX_FILTER_SOURCE_TYPE_TS3 0x00200000UL
#define DMX_FILTER_SOURCE_TYPE_FILE1 0x00100000UL
#define DMX_FILTER_SOURCE_TYPE_FILE2 0x00080000UL
#define DMX_FILTER_SOURCE_TYPE_FILE3 0x00040000UL
#define DMX_FILTER_SOURCE_TYPE_TS4 0x00000000UL
#define DMX_FILTER_SOURCE_TYPE_TS5 0x000C0000UL
#define DMX_FILTER_SOURCE_TYPE_TS6 0x00140000UL
#define DMX_FILTER_SOURCE_TYPE_FILE4 0x00180000UL
#define DMX_FILTER_SOURCE_TYPE_FILE5 0x001C0000UL
#define DMX_FILTER_SOURCE_TYPE_FILE6 0x00240000UL



#define DMX_FILTER_SOURCEID_MASK 0x00010F00UL
#define DMX_FILTER_SOURCEID_0 0x00000000UL
#define DMX_FILTER_SOURCEID_1 0x00000100UL
#define DMX_FILTER_SOURCEID_2 0x00000200UL
#define DMX_FILTER_SOURCEID_3 0x00000300UL
#define DMX_FILTER_SOURCEID_4 0x00000400UL
#define DMX_FILTER_SOURCEID_5 0x00000500UL
#define DMX_FILTER_SOURCEID_6 0x00000600UL
#define DMX_FILTER_SOURCEID_7 0x00000700UL
#define DMX_FILTER_SOURCEID_8 0x00000800UL
#define DMX_FILTER_SOURCEID_9 0x00000900UL
#define DMX_FILTER_SOURCEID_10 0x00000a00UL
#define DMX_FILTER_SOURCEID_11 0x00000b00UL
#define DMX_FILTER_SOURCEID_12 0x00000c00UL
#define DMX_FILTER_SOURCEID_13 0x00000d00UL
#define DMX_FILTER_SOURCEID_14 0x00000e00UL
#define DMX_FILTER_SOURCEID_15 0x00000f00UL
#define DMX_FILTER_SOURCEID_16 0x00010000UL
#define DMX_FILTER_SOURCEID_17 0x00010100UL
#define DMX_FILTER_SOURCEID_18 0x00010200UL
#define DMX_FILTER_SOURCEID_19 0x00010300UL
#define DMX_FILTER_SOURCEID_20 0x00010400UL
#define DMX_FILTER_SOURCEID_21 0x00010500UL
#define DMX_FILTER_SOURCEID_22 0x00010600UL
#define DMX_FILTER_SOURCEID_23 0x00010700UL
#define DMX_FILTER_SOURCEID_24 0x00010800UL
#define DMX_FILTER_SOURCEID_25 0x00010900UL
#define DMX_FILTER_SOURCEID_26 0x00010a00UL
#define DMX_FILTER_SOURCEID_27 0x00010b00UL
#define DMX_FILTER_SOURCEID_28 0x00010c00UL
#define DMX_FILTER_SOURCEID_29 0x00010d00UL
#define DMX_FILTER_SOURCEID_30 0x00010e00UL
#define DMX_FILTER_SOURCEID_31 0x00010f00UL



#define DMX_FILTER_FLT_TYPE_DUPSEC 0x02000000UL


#define DMX_FILTER_SOURCE_TYPE_PLAYBACK DMX_FILTER_SOURCE_TYPE_LIVE
#define DMX_FILTER_SOURCE_TYPE_PVR0 0x20000000UL
#define DMX_FILTER_SOURCE_TYPE_PVR1 0x10000000UL

#define DMX_FILTER_FLT_SCMB_MASK 0x30000000UL
#define DMX_FILTER_FLT_TYPE_SCMB 0x20000000UL
#define DMX_FILTER_FLT_TYPE_SCMB_SHAREKEY 0x10000000UL



#define DMX_FILTER_TYPE_EX_I_FRAME_PVR 0x01000000UL



typedef enum
{
    DMX_DEBUG_CMD_NONE,
    DMX_DEBUG_CMD_CLEAR,
    DMX_DEBUG_CMD_ENABLE,
    DMX_DEBUG_CMD_DISABLE,
} DMX_DEBUG_CMD;


typedef enum
{
    DMX_DEBUG_SRC_TS0 = 0,
    DMX_DEBUG_SRC_TS1 = 1,
    DMX_DEBUG_SRC_TS2 = 2,
    DMX_DEBUG_SRC_FILE = 3,
    DMX_DEBUG_SRC_TS3 = 4,
    DMX_DEBUG_SRC_FILE0 = DMX_DEBUG_SRC_FILE,
    DMX_DEBUG_SRC_FILE1 = 5,
    DMX_DEBUG_SRC_FILE2 = 6,
    DMX_DEBUG_SRC_FILE3 = 7,
    DMX_DEBUG_SRC_MMFI0 = 8,
    DMX_DEBUG_SRC_MMFI1 = 9,
    DMX_DEBUG_SRC_TS4 = 10,
    DMX_DEBUG_SRC_TS5 = 11,
    DMX_DEBUG_SRC_TS6 = 12,
    DMX_DEBUG_SRC_FILE4 = 13,
    DMX_DEBUG_SRC_FILE5 = 14,
    DMX_DEBUG_SRC_FILE6 = 15,
} DMX_DEBUG_SRC;


typedef enum
{
    DMX_DEBUG_TSIF_TS0,
    DMX_DEBUG_TSIF_TS1,
    DMX_DEBUG_TSIF_TSCB,
    DMX_DEBUG_TSIF_TS2,
    DMX_DEBUG_TSIF_TS3,
    DMX_DEBUG_TSIF_TS4,
    DMX_DEBUG_TSIF_TS5,
    DMX_DEBUG_TSIF_TS6,

} DMX_DEBUG_TSIF;


typedef enum
{
    DMX_DEBUG_FIFO_VIDEO,
    DMX_DEBUG_FIFO_AUDIO,
    DMX_DEBUG_FIFO_VIDEO3D,
    DMX_DEBUG_FIFO_VIDEO2 = DMX_DEBUG_FIFO_VIDEO3D,
    DMX_DEBUG_FIFO_AUDIOB,
    DMX_DEBUG_FIFO_AUDIOC,
    DMX_DEBUG_FIFO_AUDIOD,
    DMX_DEBUG_FIFO_VIDEO3,
    DMX_DEBUG_FIFO_VIDEO4,
    DMX_DEBUG_FIFO_VIDEO5,
    DMX_DEBUG_FIFO_VIDEO6,
    DMX_DEBUG_FIFO_VIDEO7,
    DMX_DEBUG_FIFO_VIDEO8,
    DMX_DEBUG_FIFO_AUDIOE,
    DMX_DEBUG_FIFO_AUDIOF

} DMX_DEBUG_FIFO;


typedef enum
{
    DMX_DEBUG_PKT_DEMUX_0,
    DMX_DEBUG_PKT_DEMUX_0_FILE,
    DMX_DEBUG_PKT_DEMUX_1,
    DMX_DEBUG_PKT_DEMUX_2,
    DMX_DEBUG_MMFI0,
    DMX_DEBUG_MMFI1,
    DMX_DEBUG_PKT_DEMUX_3,
    DMX_DEBUG_PKT_DEMUX_1_FILE,
    DMX_DEBUG_PKT_DEMUX_2_FILE,
    DMX_DEBUG_PKT_DEMUX_3_FILE,
    DMX_DEBUG_PKT_DEMUX_4,
    DMX_DEBUG_PKT_DEMUX_5,
    DMX_DEBUG_PKT_DEMUX_6,
    DMX_DEBUG_PKT_DEMUX_4_FILE,
    DMX_DEBUG_PKT_DEMUX_5_FILE,
    DMX_DEBUG_PKT_DEMUX_6_FILE,

} DMX_DEBUG_FIFO_SRC;





typedef enum
{
    DMX_FLOW_PLAYBACK = 0,
    DMX_FLOW_PVR = 1,
    DMX_FLOW_PVR1 = 2,

    DMX_FLOW_PVRCA = 3,

    DMX_FLOW_FILEIN_MM = 4,
    DMX_FLOW_MMFI0 = DMX_FLOW_FILEIN_MM,
    DMX_FLOW_FILEIN_MM3D = 5,
    DMX_FLOW_MMFI1 = DMX_FLOW_FILEIN_MM3D,

    DMX_FLOW_CIPHSS_PLAYBACK = 6,
    DMX_FLOW_CIPHSS_PVRCA = 7,

    DMX_FLOW_PVR2 = 8,
    DMX_FLOW_PVR3 = 9,
    DMX_FLOW_PVR4 = 10,
    DMX_FLOW_PVR5 = 11,

    DMX_FLOW_TSO_PLAYBACK = 12,
    DMX_FLOW_PLAYBACK1 = 13,
    DMX_FLOW_PVRCA1 = 14,

    DMX_FLOW_TSO_PLAYBACK1 = 15,
    DMX_FLOW_PLAYBACK2 = 16,
    DMX_FLOW_PLAYBACK3 = 17,

    DMX_FLOW_PLAYBACK_NOCA = 18,
    DMX_FLOW_PLAYBACK_SRC_TS1 = 19,

    DMX_FLOW_PLAYBACK_FI = 20,

    DMX_FLOW_TSO_MMT = 21,

    DMX_FLOW_TSIO_PLAYBACK = 22,

    DMX_FLOW_PLAYBACK4 = 23,
    DMX_FLOW_PLAYBACK5 = 24,
    DMX_FLOW_PLAYBACK6 = 25,

    DMX_FLOW_NUM,
} DMX_FLOW;


typedef enum
{
    DMX_FLOW_INPUT_DEMOD,
    DMX_FLOW_INPUT_MEM,
    DMX_FLOW_INPUT_EXT_INPUT0,
    DMX_FLOW_INPUT_EXT_INPUT1,
    DMX_FLOW_INPUT_EXT_INPUT2,
    DMX_FLOW_INPUT_EXT_INPUT3,
    DMX_FLOW_INPUT_MEM_NOPASSCA,
    DMX_FLOW_INPUT_DEMOD1,
    DMX_FLOW_INPUT_TSO,
    DMX_FLOW_INPUT_TSO1,
    DMX_FLOW_INPUT_MEM_PASSCA1,
    DMX_FLOW_INPUT_MEM1,
    DMX_FLOW_INPUT_EXT_INPUT4,
    DMX_FLOW_INPUT_EXT_INPUT5,

    DMX_FLOW_INPUT_EXT_INPUT0_3WIRE,
    DMX_FLOW_INPUT_EXT_INPUT1_3WIRE,
    DMX_FLOW_INPUT_EXT_INPUT2_3WIRE,
    DMX_FLOW_INPUT_EXT_INPUT3_3WIRE,
    DMX_FLOW_INPUT_EXT_INPUT4_3WIRE,
    DMX_FLOW_INPUT_EXT_INPUT5_3WIRE,
    DMX_FLOW_INPUT_EXT_INPUT6_3WIRE,

    DMX_FLOW_INPUT_TSIO,

    DMX_FLOW_INPUT_EXT_INPUT6,
    DMX_FLOW_INPUT_EXT_INPUT7,
    DMX_FLOW_INPUT_EXT_INPUT7_3WIRE,

    DMX_FLOW_INPUT_DISABLE,

} DMX_FLOW_INPUT;


typedef enum
{
    DMX_FLOW_OUTPUT_NONE = 0,
    DMX_FLOW_OUTPUT_EXT_PAD1 = 1,
    DMX_FLOW_OUTPUT_EXT_PAD3 = 3,
}DMX_FLOW_OUTPUT_PAD;


typedef enum
{
    DMX_TSIF_LIVE0,
    DMX_TSIF_LIVE1,
    DMX_TSIF_LIVE2,
    DMX_TSIF_LIVE3,

    DMX_TSIF_FILE0,
    DMX_TSIF_FILE1,
    DMX_TSIF_FILE2,
    DMX_TSIF_FILE3,

    DMX_TSIF_MMT,

    DMX_TSIF_LIVE4,
    DMX_TSIF_LIVE5,
    DMX_TSIF_LIVE6,

    DMX_TSIF_FILE4,
    DMX_TSIF_FILE5,
    DMX_TSIF_FILE6,

    DMX_TSIF_MAX,
} DMX_TSIF;


typedef enum
{
    DMX_PVR_EGN0,
    DMX_PVR_EGN1,
    DMX_PVR_EGN2,
    DMX_PVR_EGN3,
    DMX_PVR_EGN4,
    DMX_PVR_EGN5,

    DMX_PVR_TSO0,

    DMX_PVR_EGN6,
    DMX_PVR_EGN7,
    DMX_PVR_EGN8,
    DMX_PVR_EGN9,

    DMX_PVR_ENG_NUM,
} DMX_PVR_ENG;

#if 0


typedef enum
{
    DMX_EVENT_DATA_READY = 0x00000001,
    DMX_EVENT_BUF_OVERFLOW = 0x00000002,
    DMX_EVENT_PVRBUF_FULL = 0x00000010,


    DMX_EVENT_CB_MASK = 0x80000000,
    DMX_EVENT_CB_POLL = 0x00000000,
    DMX_EVENT_CB_SELF = 0x80000000,
    DMX_EVENT_CB_SELF_TYPE2 = 0xC0000000,
} DMX_EVENT;
#endif

#define DMX_EVENT MS_U32
#define DMX_EVENT_DATA_READY 0x00000001UL
#define DMX_EVENT_BUF_OVERFLOW 0x00000002UL
#define DMX_EVENT_SEC_CRCERROR 0x00000004UL
#define DMX_EVENT_PVRBUF_FULL 0x00000010UL
#define DMX_EVENT_PVR1BUF_FULL 0x00000020UL
#define DMX_EVENT_PVRBUF_SIZE_MET 0x00000040UL


#define DMX_EVENT_CB_MASK 0x80000000UL
#define DMX_EVENT_CB_POLL 0x00000000UL
#define DMX_EVENT_CB_SELF 0x80000000UL
#define DMX_EVENT_CB_SELF_TYPE2 0xC0000000UL


typedef enum
{
    DMX_BURSTSINGLE = 0x00,
    DMX_BURST2BYTE = 0x01,
    DMX_BURST4BYTE = 0x02,
    DMX_BURST8BYTE = 0x03,
} DMX_BURSTTYPE;

#if 0


typedef enum
{
    DMX_SECT_MODE_CONTI = 0x00000000,
    DMX_SECT_MODE_ONESHOT = 0x00000001,


    DMX_SECT_MODE_CRCCHK = 0x00000002,
    DMX_SECT_MODE_AUTO_ADDR = 0x00000004,
} DMX_SECT_MODE;
#endif

#define DMX_SECT_MODE MS_U32
#define DMX_SECT_MODE_CONTI 0x00000000UL
#define DMX_SECT_MODE_ONESHOT 0x00000001UL
#define DMX_SECT_MODE_PESSCMCHK 0x00000003UL


#define DMX_SECT_MODE_CRCCHK 0x00000002UL
#define DMX_SECT_MODE_AUTO_ADDR 0x00000004UL
#define DMX_SECT_MODE_AUTO_CRCCHK 0x00000008UL


#define DMX_FIFO_STATUS MS_U32
#define DMX_FIFO_STATUS_LV_MASK 0x0000000FUL
#define DMX_FIFO_STATUS_LV_USAGE_MASK 0x0000000CUL
#define DMX_FIFO_STATUS_LV_USAGE_SHIFT 2UL
#define DMX_FIFO_STATUS_LV_EMPTY 0x00000001UL
#define DMX_FIFO_STATUS_RST_MASK 0x80000000UL
#define DMX_FIFO_STATUS_RST_EN 0x80000000UL


typedef enum
{
    DMX_FILEIN_TSIF0,
    DMX_FILEIN_TSIF1,
    DMX_FILEIN_TSIF2,
    DMX_FILEIN_TSIF3,
    DMX_FILEIN_TSIF4,
    DMX_FILEIN_TSIF5,
    DMX_FILEIN_TSIF6,
    DMX_FILEIN_INVALID,
} DMX_FILEIN_PATH;



typedef enum
{
    DMX_PES_AUDIO2_FIFO = 0,
    DMX_PES_AUDIO_FIFO = 1,
    DMX_PES_VIDEO_FIFO = 2,
    DMX_PES_NO_BYPASS_FIFO = 3,
    DMX_PES_VIDEO3D_FIFO = 4,
    DMX_PES_VIDEO2_FIFO = DMX_PES_VIDEO3D_FIFO,
    DMX_PES_AUDIO3_FIFO = 5,
    DMX_PES_AUDIO4_FIFO = 6,
    DMX_PES_VIDEO3_FIFO = 7,
    DMX_PES_VIDEO4_FIFO = 8,
    DMX_PES_AUDIO5_FIFO = 9,
    DMX_PES_AUDIO6_FIFO = 10,
    DMX_PES_VIDEO5_FIFO = 11,
    DMX_PES_VIDEO6_FIFO = 12,
    DMX_PES_VIDEO7_FIFO = 13,
    DMX_PES_VIDEO8_FIFO = 14,

} DMX_FILEIN_DST;


typedef void (*DMX_NotifyCb)(MS_U8 u8DmxId, DMX_EVENT enEvent);

typedef void (*DMX_Type2NotifyCb)(MS_U8 u8DmxId, DMX_EVENT enEvent, MS_U32 NotifyParam1);

typedef void (*DMX_Type2NotifyCb_Ex)(MS_U32 u32DmxId, DMX_EVENT enEvent, void* NotifyParamEx);

typedef MS_BOOL (*DMX_CheckCb)(MS_U8 u8DmxId, MS_U8* start, MS_U8* end, MS_U8* read, MS_U8* write);


typedef struct
{
    MS_U32 streaminfo;
} DMX_Stream_info;


typedef struct DLL_PACKED
{
    MS_U32 u32DmxInfoSize;
    DMX_FILTER_TYPE DmxFltType;
} DMX_Info_EX;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    MS_PHY SectBufAddr;
    MS_U32 SectBufSize;
    DMX_SECT_MODE SectMode;
    DMX_EVENT Event;
    DMX_NotifyCb pNotify;
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700)
#if !defined (__aarch64__)
    MS_U32 u32AlignDummy0;
#endif
#endif
    DMX_Type2NotifyCb pType2Notify;
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700)
#if !defined (__aarch64__)
    MS_U32 u32AlignDummy1;
#endif
#endif
    MS_U32 Type2NotifyParam1;
} DMX_Sect_info;


typedef struct DLL_PACKED
{
    MS_U32 u32SectInfoSize;
    MS_PHY SectBufAddr;
    MS_U32 SectBufSize;
    DMX_SECT_MODE SectMode;
    DMX_EVENT Event;
    DMX_Type2NotifyCb_Ex pType2Notify_Ex;
    void* pType2NotifyParamEx;
} DMX_Sect_info_Ex;



#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    union {
        DMX_Stream_info StreamInfo;
        DMX_Sect_info SectInfo;
    } Info;
} DMX_Flt_info;


typedef struct DLL_PACKED
{
    MS_U32 u32FltInfoSize;
    MS_BOOL bSet;
    DMX_Sect_info_Ex SectInfoEx;
    DMX_FILTER_TYPE DmxFltType;
} DMX_Flt_info_Ex;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    MS_PHY pPvrBuf0;
    MS_PHY pPvrBuf1;
    MS_U32 PvrBufSize0;
    MS_U32 PvrBufSize1;
    DMX_EVENT Event;
    DMX_NotifyCb pNotify;

    MS_U16 u16CaPvrModel;
    MS_BOOL bSpsEnable;

} DMX_Pvr_info;


typedef enum
{
    DMX_CA_PVR_TSP = 0x00000000UL,
    DMX_CA_PVR_PROG0 = 0x00000001UL,
    DMX_CA_PVR_PROG1 = 0x00000002UL,
}DMX_CA_PVRMODE;




typedef struct DLL_PACKED
{
    DMX_DEBUG_CMD TspCmd;
    DMX_DEBUG_SRC TspSrc;
    DMX_DEBUG_FIFO TspFifo;
} DMX_DisContiCnt_info, DMX_DropPktCnt_info;

typedef struct DLL_PACKED
{
    DMX_DEBUG_CMD TspCmd;
    DMX_DEBUG_TSIF TspTsif;
} DMX_LockPktCnt_info;

typedef struct DLL_PACKED
{
    DMX_DEBUG_CMD TspCmd;
    DMX_DEBUG_FIFO TspFifo;
    DMX_DEBUG_FIFO_SRC TspFifoSrc;
} DMX_AVPktCnt_info;



typedef enum
{
    DMX_CAP_PID_FILTER_NUM = 0,
    DMX_CAP_SEC_FILTER_NUM = 1,
    DMX_CAP_SEC_BUF_NUM = 2,

    DMX_CAP_PVR_ENG_NUM = 3,
    DMX_CAP_PVR_FILTER_NUM = 4,
    DMX_CAP_PVR1_FILTER_NUM = 5,

    DMX_CAP_MMFI_AUDIO_FILTER_NUM = 6,
    DMX_CAP_MMFI_V3D_FILTER_NUM = 7,

    DMX_CAP_MMFI0_FILTER_NUM = 6,
    DMX_CAP_MMFI1_FILTER_NUM = 7,

    DMX_CAP_TSIF_NUM = 8,
    DMX_CAP_DEMOD_NUM = 9,
    DMX_CAP_TS_PAD_NUM = 10,
    DMX_CAP_VQ_NUM = 11,

    DMX_CAP_CA_FLT_NUM = 12,
    DMX_CAP_CA_KEY_NUM = 13,

    DMX_CAP_FW_ALIGN = 14,
    DMX_CAP_VQ_ALIGN = 15,
    DMX_CAP_VQ_PITCH = 16,
    DMX_CAP_SEC_BUF_ALIGN = 17,
    DMX_CAP_PVR_ALIGN = 18,

    DMX_CAP_PVRCA_PATH_NUM = 19,

    DMX_CAP_SHAREKEY_FLT_RANGE = 20,
    DMX_CAP_PVRCA0_FLT_RANGE = 21,
    DMX_CAP_PVRCA1_FLT_RANGE = 22,
    DMX_CAP_PVRCA2_FLT_RANGE = 23,
    DMX_CAP_SHAREKEY_FLT1_RANGE = 24,
    DMX_CAP_SHAREKEY_FLT2_RANGE = 25,

    DMX_CAP_HW_TYPE = 26,

    DMX_CAP_RESOURCE_SIZE = 27,

    DMX_CAP_VFIFO_NUM = 28,
    DMX_CAP_AFIFO_NUM = 29,

    DMX_CAP_HWPCR_SUPPORT = 30,
    DMX_CAP_PCRFLT_START_IDX = 31,
    DMX_CAP_TSP_HWWP_SET_NUM = 32,

    DMX_CAP_DSCMB_ENG_NUM = 33,

    DMX_CAP_MAX_MERGESTR_NUM = 34,

    DMX_CAP_MAX_SEC_FLT_DEPTH = 35,
    DMX_CAP_FW_BUF_SIZE = 36,
    DMX_CAP_FW_BUF_RANGE = 37,
    DMX_CAP_VQ_BUF_RANGE = 38,
    DMX_CAP_SEC_BUF_RANGE = 39,
    DMX_CAP_FIQ_NUM = 40,

    DMX_CAP_NULL,
} DMX_QUERY_TYPE;


typedef enum
{
    DMX_HW_TYPE_NONE = 0UL,
    DMX_HW_TYPE_TV_SERIES = 0x00001000UL,
    DMX_HW_TYPE_TV_TYPE1 = 0x00001001UL,
    DMX_HW_TYPE_TV_TYPE2 = 0x00001002UL,
    DMX_HW_TYPE_TV_TYPE2_CA2 = 0x00001006UL,
    DMX_HW_TYPE_STB_SERIES = 0x00002000UL,
    DMX_HW_TYPE_STB_TYPE1 = 0x00002001UL,
    DMX_HW_TYPE_STB_TYPE2 = 0x00002002UL,
    DMX_HW_TYPE_STB_TYPE3 = 0x00002003UL,
    DMX_HW_TYPE_STB_TYPE3_CASPS = 0x80002003UL,
} DMX_HW_TYPE;


typedef enum
{
    DMX_TIMESTAMP_CLK_90K = 0x00000000UL,
    DMX_TIMESTAMP_CLK_27M = 0x00000001UL,

    DMX_TIMESTAMP_CLK_STC0_90K = 0x00000100UL,
    DMX_TIMESTAMP_CLK_STC0_27M = 0x00000101UL,

    DMX_TIMESTAMP_CLK_STC1_90K = 0x00000200UL,
    DMX_TIMESTAMP_CLK_STC1_27M = 0x00000201UL,

    DMX_TIMESTAMP_CLK_STC2_90K = 0x00000300UL,
    DMX_TIMESTAMP_CLK_STC2_27M = 0x00000301UL,

    DMX_TIMESTAMP_CLK_STC3_90K = 0x00000400UL,
    DMX_TIMESTAMP_CLK_STC3_27M = 0x00000401UL,

    DMX_TIMESTAMP_CLK_STC4_90K = 0x00000500UL,
    DMX_TIMESTAMP_CLK_STC4_27M = 0x00000501UL,

    DMX_TIMESTAMP_CLK_STC5_90K = 0x00000600UL,
    DMX_TIMESTAMP_CLK_STC5_27M = 0x00000601UL,

    DMX_TIMESTAMP_CLK_STC6_90K = 0x00000700UL,
    DMX_TIMESTAMP_CLK_STC6_27M = 0x00000701UL,

    DMX_TIMESTAMP_CLK_STC7_90K = 0x00000800UL,
    DMX_TIMESTAMP_CLK_STC7_27M = 0x00000801UL

} DMX_TimeStamp_Clk;


typedef enum
{
    DMX_PKTMODE_188 = 0x00000000UL,
    DMX_PKTMODE_192 = 0x00000001UL,
    DMX_PKTMODE_204 = 0x00000002UL,
    DMX_PKTMODE_130 = 0x00000003UL,
    DMX_PKTMODE_134 = 0x00000004UL,
    DMX_PKTMODE_200 = 0x00000005UL,

    DMX_PKTMODE_MERG188 = 0x00000006UL,
    DMX_PKTMODE_MERG192 = 0x00000007UL,
    DMX_PKTMODE_MERG200 = 0x00000008UL,

    DMX_PKTMODE_MXL192 = 0x00000009UL,
    DMX_PKTMODE_MXL196 = 0x0000000AUL,
    DMX_PKTMODE_MXL200 = 0x0000000BUL,

    DMX_PKTMODE_PES = 0x00000100UL
} DMX_Filein_PacketMode;

#define DMX_PacketMode DMX_Filein_PacketMode


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    MS_U32 Rate;
    DMX_Filein_PacketMode PKT_Mode;
} DMX_Filein_info;


#define DMX_Pvr_PacketMode DMX_Filein_PacketMode




#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    DMX_FLOW_INPUT Input;
    MS_BOOL bClkInv;
    MS_BOOL bExtSync;
    MS_BOOL bParallel;
}DMX_FlowInput_Info;


#define DMX_MMFI_PATH MS_U32
#define DMX_MMFI_AUDIO 0UL
#define DMX_MMFI_VIDEO 1UL
#define DMX_MMFI_PATH0 DMX_MMFI_AUDIO
#define DMX_MMFI_PATH1 DMX_MMFI_VIDEO



typedef enum
{
    DMX_MMFI_FLTTYPE_AUD = 0x00,
    DMX_MMFI_FLTTYPE_AUDB = 0x01,
    DMX_MMFI_FLTTYPE_VD3D = 0x02,
    DMX_MMFI_FLTTYPE_VD2 = DMX_MMFI_FLTTYPE_VD3D,
    DMX_MMFI_FLTTYPE_VD = 0x03,
    DMX_MMFI_FLTTYPE_AUDC = 0x04,
    DMX_MMFI_FLTTYPE_AUDD = 0x05,
    DMX_MMFI_FLTTYPE_VD3 = 0x06,
    DMX_MMFI_FLTTYPE_VD4 = 0x07,
    DMX_MMFI_FLTTYPE_AUDE = 0x08,
    DMX_MMFI_FLTTYPE_AUDF = 0x09,
    DMX_MMFI_FLTTYPE_VD5 = 0x0A,
    DMX_MMFI_FLTTYPE_VD6 = 0x0B,
    DMX_MMFI_FLTTYPE_VD7 = 0x0C,
    DMX_MMFI_FLTTYPE_VD8 = 0x0D,

    DMX_MMFI1_FLTTYPE_MASK = 0x80,
}DMX_MMFI_FLTTYPE;


typedef enum
{
    DMX_MMFI_PES_NO_BYPASS_AU = 0x0000,

    DMX_MMFI_PES_PS_AU = 0x0001,
    DMX_MMFI_PES_PS_AUB = 0x0002,

    DMX_MMFI_PES_APID_BYPASS = 0x0004,
    DMX_MMFI_PES_APIDB_BYPASS = 0x0008,

    DMX_MMFI_PES_NO_BYPASS_V3D = 0x0010,
    DMX_MMFI_PES_NO_BYPASS_VD2 = DMX_MMFI_PES_NO_BYPASS_V3D,
    DMX_MMFI_PES_PS_V3D = 0x0020,
    DMX_MMFI_PES_PS_VD2 = DMX_MMFI_PES_PS_V3D,
    DMX_MMFI_PES_V3DPID_BYPASS = 0x0040,
    DMX_MMFI_PES_V2PID_BYPASS = DMX_MMFI_PES_V3DPID_BYPASS,

    DMX_MMFI_PES_NO_BYPASS_VD = 0x0080,
    DMX_MMFI_PES_VPID_BYPASS = 0x0100,

    DMX_MMFI_PES_NO_BYPASS_TS = 0x0200,

    DMX_MMFI_PES_PS_VD = 0x0400,

    DMX_MMFI_PES_PS_AUC = 0x0800,
    DMX_MMFI_PES_PS_AUD = 0x1000,

    DMX_MMFI_PES_PS_VD3 = 0x2000,
    DMX_MMFI_PES_PS_VD4 = 0x4000,

    DMX_MMFI_PES_PS_AUE = 0x0003,
    DMX_MMFI_PES_PS_AUF = 0x0005,

    DMX_MMFI_PES_PS_VD5 = 0x0006,
    DMX_MMFI_PES_PS_VD6 = 0x0007,
    DMX_MMFI_PES_PS_VD7 = 0x0009,
    DMX_MMFI_PES_PS_VD8 = 0x000A,

    DMX_MMFI1_PES_TYPE_MASK = 0x8000,
}DMX_MMFI_DST;


typedef enum
{
    E_DMX_TSO_OUTCLK_DIV2N,
    E_DMX_TSO_OUTCLK_DIVN,
    E_DMX_TSO_OUTCLK_62M,
    E_DMX_TSO_OUTCLK_54M,
    E_DMX_TSO_OUTCLK_PTSOOUT,
    E_DMX_TSO_OUTCLK_PTSOOUT_DIV8,
    E_DMX_TSO_OUTCLK_Dmd,
    E_DMX_TSO_OUTCLK_27M,
    E_DMX_TSO_OUTCLK_108M,
    E_DMX_TSO_OUTCLK_123M,
}DMX_TSO_OutClk;


typedef enum
{
    E_DMX_TSO_OUTCLKSRC_172M_2N,
    E_DMX_TSO_OUTCLKSRC_288M_2N,
    E_DMX_TSO_OUTCLKSRC_432M_2N,
    E_DMX_TSO_OUTCLKSRC_216M_N,
    E_DMX_TSO_OUTCLKSRC_P_TS0IN,
    E_DMX_TSO_OUTCLKSRC_P_TS1IN,
    E_DMX_TSO_OUTCLKSRC_P_TS2IN,
    E_DMX_TSO_OUTCLKSRC_P_TS3IN,
    E_DMX_TSO_OUTCLKSRC_P_TS4IN,
    E_DMX_TSO_OUTCLKSRC_P_TS5IN,
}DMX_TSO_OutClkSrc;


typedef enum
{
    E_DMX_TSO_CFG_NONE = 0x00000000UL,
    E_DMX_TSO_CFG_OPIF = 0x00000001UL,
}DMX_TSO_CfgCmd;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    MS_U32 u32Res;
    DMX_FLOW eFlow;
    DMX_TSIF eTSOInIf;
    DMX_FlowInput_Info stInputInfo;
    MS_U8 u8LocalStrId;
    MS_BOOL bBypassAll;
    MS_BOOL bEnable;
    MS_BOOL bSet;
}DMX_TSO_InputCfg;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    MS_U32 u32Res;
    DMX_FLOW eFlow;
    DMX_FLOW_OUTPUT_PAD eOutPad;
    MS_U16 u16OutPktSize;
    MS_BOOL bEnable;

    MS_BOOL bDefOutClk;
    MS_BOOL bOutClkInv;
    DMX_TSO_OutClk eTsoOutClk;
    DMX_TSO_OutClkSrc eTsoOutClkSrc;
    MS_U16 u16DivNum;
    MS_BOOL bSet;
}DMX_TSO_OutputCfg;


typedef struct DLL_PACKED
{
    MS_U32 u32Res;
    MS_U32 u32TsoEng;
    MS_U32 u32TsoCfgDataSize;
    MS_BOOL bSet;

    DMX_TSO_CfgCmd eCfgCmd;
    MS_U32 u32CmdData0;
}DMX_TSO_Cfg;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    MS_U8 u8AddrMode;
    MS_PHY u32BufStart;
    MS_U32 u32BufSize;
} DMX_FQ_Info;


typedef enum
{
    E_DMX_FQ_SKIP_RUSH_DATA_PATH_NON = 0x00000000UL,
    E_DMX_FQ_SKIP_APES_RUSH_DATA = 0x00000008UL,
    E_DMX_FQ_SKIP_APES_B_RUSH_DATA = 0x00000010UL,
    E_DMX_FQ_SKIP_VPES_RUSH_DATA = 0x00000020UL,
    E_DMX_FQ_SKIP_SEC_RUSH_DATA = 0x00000040UL,
    E_DMX_FQ_SKIP_ADP_RUSH_DATA = 0x00000080UL,
    E_DMX_FQ_SKIP_PCR_RUSH_DATA = 0x00000100UL,
    E_DMX_FQ_SKIP_RASP_RUSH_DATA = 0x00000200UL,
    E_DMX_FQ_SKIP_PVR1_RUSH_DATA = E_DMX_FQ_SKIP_RASP_RUSH_DATA,
    E_DMX_FQ_SKIP_PCR1_RUSH_DATA = 0x00001000UL,
    E_DMX_FQ_SKIP_PVR3_RUSH_DATA = E_DMX_FQ_SKIP_PCR1_RUSH_DATA,
    E_DMX_FQ_SKIP_CFG1_MASK = 0x80000000UL,
    E_DMX_FQ_SKIP_APES_C_RUSH_DATA = 0x80000008UL,
    E_DMX_FQ_SKIP_APES_D_RUSH_DATA = 0x80000010UL,
    E_DMX_FQ_SKIP_V3DPES_RUSH_DATA = 0x80000020UL,
    E_DMX_FQ_SKIP_V2PES_RUSH_DATA = E_DMX_FQ_SKIP_V3DPES_RUSH_DATA,
    E_DMX_FQ_SKIP_PVR2_RUSH_DATA = 0x80000200UL,
}DMX_FQ_SkipPath;


typedef enum
{
    E_DMX_FQ_CFG_NONE = 0x00000000UL,
    E_DMX_FQ_CFG_SEL_SRCMUX = 0x000000001L,
    E_DMX_FQ_CFG_FLT_NULL_PKT = 0x000000002L

}DMX_FQ_CfgCmd;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef struct __attribute__((__packed__))
#else
typedef struct DLL_PACKED
#endif
{
    MS_U32 u32Res;
    MS_U32 u32FQEng;
    MS_U32 u32CfgDataSize;
    MS_BOOL bSet;
    DMX_FQ_CfgCmd eCfgCmd;
    DMX_TSIF eFqSrcSel;
}DMX_FQ_Cfg;


typedef enum
{
    E_DMX_TEI_REMOVE_AUDIO_PKT,
    E_DMX_TEI_REMOVE_VIDEO_PKT,

    E_DMX_TEI_REMOVE_PKT0_LIVE,
    E_DMX_TEI_REMOVE_PKT0_FILE,
    E_DMX_TEI_REMOVE_PKT1,
    E_DMX_TEI_REMOVE_PKT2,

    E_DMX_TEI_REMOVE_AUDIO2_PKT,
    E_DMX_TEI_REMOVE_AUDIO3_PKT,
    E_DMX_TEI_REMOVE_AUDIO4_PKT,

    E_DMX_TEI_REMOVE_VIDEO2_PKT,
    E_DMX_TEI_REMOVE_VIDEO3_PKT ,
    E_DMX_TEI_REMOVE_VIDEO4_PKT ,

}DMX_TEI_RmPktType;


typedef enum
{
    DMX_RES_NONE,
    DMX_RES_STC_ENG,
    DMX_RES_FLOW_PB_LIVE,
    DMX_RES_FLOW_PB_FILE,
    DMX_RES_FLOW_MMFI
}DMX_RES_TYPE;


#define eStcUpdateCtrlMode MS_U8
#define DMX_STC_UPDATE_FW 0x00
#define DMX_STC_UPDATE_HK 0x01
#define DMX_STC_UPDATE_UPDATEONCE 0x02


#define eS2PClkOpt MS_U32
#define S2P_CLK_OPT_NONE 0x00000000
#define S2P_CLK_OPT_INVERT 0x00000001
#define S2P_CLK_OPT_NON_INVERT 0x00000002


typedef enum
{
    DMX_PIPEID_GRP_NONE,
    DMX_PIPEID_GRP_PVR,
    DMX_PIPEID_GRP_FILE,
    DMX_PIPEID_GRP_MMFI,
    DMX_PIPEID_GRP_MAX_NUM,
}DMX_PIPEID_GROUP;

typedef union GENERAL_ENGID{
    DMX_PVR_ENG PvrEng;
    DMX_FILEIN_PATH FileinPath;
    DMX_MMFI_PATH MmfiPath;
} DMX_GENERAL_ENGID;




#ifdef DMX_UTOPIA_20
#include "apiDMX_v2.h"
#endif
# 1364 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_InitLibResource(void *pResMemAddr);
# 1374 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SetFW(MS_PHY pFwAddr, MS_U32 u32FwSize);
# 1383 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SetFwDataAddr(MS_PHY phyDataAddr, MS_U32 u32size);






DMX_FILTER_STATUS MApi_DMX_SetHK(MS_BOOL bIsHK);







DMX_FILTER_STATUS MApi_DMX_Init(void);







MS_U32 SYMBOL_WEAK MApi_DMX_TSPInit_GetConfig(DMX_TSPParam *pstParam);
# 1415 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_TSPInit(DMX_TSPParam *param);






DMX_FILTER_STATUS MApi_DMX_Exit(void);
# 1431 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_ForceExit(void);






DMX_FILTER_STATUS MApi_DMX_Suspend(void);
# 1447 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Resume(MS_PHY phyFWAddr, MS_U32 u32FWSize);






DMX_FILTER_STATUS MApi_DMX_ChkAlive(void);







DMX_FILTER_STATUS MApi_DMX_Reset(void);







DMX_FILTER_STATUS MApi_DMX_ReleaseSemaphone(void);
# 1481 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
void MApi_DMX_WriteProtect_Enable(MS_BOOL bEnable, MS_PHY* pphyStartAddr, MS_PHY* pphyEndAddr);
# 1492 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
void MApi_DMX_OrzWriteProtect_Enable(MS_BOOL bEnable, MS_PHY phyStartAddr, MS_PHY phyEndAddr);
# 1505 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Read_DropPktCnt(MS_U16* pu16ADropCnt, MS_U16* pu16VDropCnt);
# 1515 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_U32 MApi_DMX_SetPowerState(EN_POWER_MODE u16PowerState, MS_PHY phyFWAddr, MS_U32 u32FWSize);
# 1524 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_TEI_RemoveErrorPkt(DMX_TEI_RmPktType eDmxPktType, MS_BOOL bEnable);
# 1534 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SetPacketMode(DMX_FLOW DmxFlow, DMX_PacketMode ePktMode);
# 1546 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SetMergeStrSyncByte(MS_U32 u32SrcID, MS_U8 u8SyncByte);
# 1556 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_DropScmbPkt(DMX_FILTER_TYPE pDmxFltType, MS_BOOL bEnable);
# 1567 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_ResAllocate(DMX_RES_TYPE eResType, void *pRes);
# 1578 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_ResFree(DMX_RES_TYPE eResType, void *pRes);
# 1589 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_Pcr_Get_MapSTC(MS_U32 u32PcrFltId, MS_U32 *pu32StcEng);
# 1601 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SetOwner(MS_U32 u32DmxIdStart, MS_U32 u32DmxIdEnd, MS_BOOL bOwner);
# 1611 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_GetCap(DMX_QUERY_TYPE DmxQueryType, void* pOutput);
# 1627 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_GetCap_Ex(char* pstrQueryType, MS_S32 s32Strlen, void* pOutput, MS_S32* ps32OutSize);
# 1637 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Parl_Invert(DMX_FLOW DmxFlow, MS_BOOL bInvert);
# 1646 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SetBurstLen(DMX_BURSTTYPE BurstType);
# 1655 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_VQ_Enable(MS_BOOL bEnable);
# 1671 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_FlowSet(DMX_FLOW DmxFlow, DMX_FLOW_INPUT DmxFlowInput, MS_BOOL bClkInv, MS_BOOL bExtSync, MS_BOOL bParallel);
# 1682 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PVR_FlowSet(DMX_PVR_ENG Eng, DMX_TSIF ePvrSrcTSIf, MS_BOOL bDscmbRec);
# 1695 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_FlowInput_Status(DMX_FLOW DmxFlow, DMX_FLOW_INPUT *pDmxFlowInput, MS_BOOL *pbClkInv, MS_BOOL *pbExtSync, MS_BOOL *pbParallel);
# 1705 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_FlowEnable(DMX_FLOW DmxFlow, MS_BOOL bEnable);
# 1715 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_LiveAB_En(MS_BOOL bPF_EN);
# 1724 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL MApi_DMX_IsLiveAB_Enable(void);
# 1735 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_Flow_DscmbEng(DMX_TSIF eTsIf, MS_U32* pu32EngId, MS_BOOL bSet);
# 1752 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TsOutputPadCfg(DMX_FLOW_OUTPUT_PAD eOutPad, DMX_FLOW_INPUT eInSrcPad, MS_BOOL bInParallel, MS_U32 u32ResvNum, MS_U32 *pu32Resv);
# 1765 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TsS2POutputClkPhase(MS_U16 u16Val, MS_BOOL bEnable, MS_U32 u32S2pOpt);
# 1778 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_STC64_Mode_Enable(MS_BOOL bEnable);
# 1788 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Stc_Get(MS_U32* pu32Stc32, MS_U32* pu32Stc);
# 1798 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Stc_Set(MS_U32 u32Stc32, MS_U32 u32Stc);
# 1808 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pcr_Get(MS_U32* pu32Pcr32, MS_U32* pu32Pcr);
# 1819 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_Stc_Select(DMX_FILTER_TYPE eFltSrc, MS_U32 u32StcEng);
# 1830 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Stc_Eng_Get(MS_U8 u8Eng, MS_U32* pu32Stc32, MS_U32* pu32Stc);
# 1841 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Stc_Eng_Set(MS_U8 u8Eng, MS_U32 u32Stc32, MS_U32 u32Stc);
# 1852 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pcr_Eng_Get(MS_U8 u8PcrEng, MS_U32* pu32Pcr32, MS_U32* pu32Pcr);
# 1865 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_STC_UpdateCtrl(MS_U8 u8Eng, eStcUpdateCtrlMode eMode);
# 1876 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Stc_Eng_SetOffset(MS_U32 u32Eng, MS_U32 u32Offset, MS_BOOL bAdd);
# 1887 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Stc_Clk_Adjust(MS_U32 u32EngId, MS_BOOL bUpClk, MS_U32 u32Percentage);
# 1900 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Open(DMX_FILTER_TYPE DmxFltType, MS_U8* pu8DmxId);
# 1910 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Open_Ex(DMX_Info_EX *pDmxInfo, MS_U32* pu32DmxId);
# 1919 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Close(MS_U32 u32DmxId);
# 1928 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Start(MS_U32 u32DmxId);
# 1937 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Stop(MS_U32 u32DmxId);
# 1968 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Info(MS_U32 u32DmxId, DMX_Flt_info* pDmxFltInfo, DMX_FILTER_TYPE* pDmxFltType, MS_BOOL bSet);
# 1991 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Info_Ex(MS_U32 u32DmxId, DMX_Flt_info_Ex* pDmxFltInfo);
# 2002 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pid(MS_U32 u32DmxId, MS_U16* pu16Pid, MS_BOOL bSet);
# 2012 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_IsStart(MS_U32 u32DmxId, MS_BOOL* pbEnable);
# 2033 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_CopyData(MS_U32 u32DmxId, MS_U8* pu8Buf, MS_U32 u32BufSize, MS_U32* pu32ActualSize, MS_U32* pu32RmnSize, DMX_CheckCb pfCheckCB);
# 2044 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Proc(MS_U32 u32DmxId, DMX_EVENT* pEvent);
# 2054 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Change_FilterSource(MS_U32 u32DmxId, DMX_FILTER_TYPE DmxFltSrcType);
# 2076 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_LiveSrcSwitch(DMX_FILTER_TYPE TgtFlow);







DMX_FILTER_STATUS MApi_DMX_GetOwner(MS_U32 u32DmxId, MS_BOOL* pbOwner);
# 2100 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_FltScmbSts(DMX_FILTER_TYPE FltSrc, MS_U32 u32FltGroupId, MS_U32 PidFltId, MS_U32 *pu32ScmbSts);
# 2111 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_PesScmbSts(MS_U32 u32DmxId, MS_U8* pu8scmb);
# 2122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_TsScmbSts(MS_U32 u32DmxId, MS_U8* pu8ScmSts);
# 2139 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Open_MultiFlt( DMX_FILTER_TYPE DmxFltType , MS_U8* pu8DmxId, MS_U8 u8TargetDmxId);
# 2149 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Drop_Enable(MS_BOOL bSet);
# 2162 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SectReset(MS_U32 u32DmxId);
# 2172 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SectReadSet(MS_U32 u32DmxId, MS_PHY Read);
# 2182 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SectReadGet(MS_U32 u32DmxId, MS_PHY* pRead);
# 2192 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SectWriteGet(MS_U32 u32DmxId, MS_PHY* pWrite);
# 2201 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SectStartGet(MS_U32 u32DmxId, MS_PHY* pStart);
# 2210 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SectEndGet(MS_U32 u32DmxId, MS_PHY* pEnd);
# 2225 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SectPatternSet(MS_U32 u32DmxId, MS_U8* pPattern, MS_U8* pMask, MS_U8 *pu8NotMask, MS_U32 MatchSize);
# 2239 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_TTX_WriteGet(MS_U32 u32DmxId, MS_PHY* pWrite);
# 2248 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_GetAccess(MS_U32 u32Try);






DMX_FILTER_STATUS MApi_DMX_ReleaseAccess(void);
# 2268 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_AVFifo_Reset(DMX_FILTER_TYPE DmxFltType, MS_BOOL bFlush);
# 2278 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_AVFifo_Status(DMX_FILTER_TYPE DmxFltType, DMX_FIFO_STATUS* u32FifoLevel);
# 2287 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_RemoveDupAVPkt(MS_BOOL bEnable);
# 2297 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_RemoveDupAVFifoPkt(DMX_FILTER_TYPE DmxFltType, MS_BOOL bEnable);
# 2306 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_AU_BD_Mode_Enable(MS_BOOL bEnable);
# 2317 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_AVFifo_BlockEnable(DMX_FILTER_TYPE DmxFltType, MS_BOOL bEnable);
# 2327 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_AVFifo_BypassTsHD(DMX_FILTER_TYPE DmxFltType, MS_BOOL bEnable);
# 2338 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Open(DMX_Pvr_info* pPvrInfo);







DMX_FILTER_STATUS MApi_DMX_Pvr_Close(void);
# 2355 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Pause(MS_BOOL bPause);
# 2365 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Pid_Open(MS_U32 Pid, MS_U8* pu8DmxId);
# 2375 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Pid_Close(MS_U8 u8DmxId);
# 2385 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Start(MS_BOOL bPvrAll);
# 2394 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Stop(void);
# 2404 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_WriteGet(MS_PHY* pphyWrite);
# 2414 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PVR_SetPacketMode(MS_BOOL bSet);
# 2424 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_SetRecordStamp(MS_U32 u32Stamp);
# 2434 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_GetRecordStamp(MS_U32* pu32Stamp);
# 2446 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_MOBF_Enable(MS_BOOL bEnable, MS_U32 u32key0, MS_U32 u32key1);
# 2456 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_SetPlaybackStamp(MS_U32 u32Stamp);







DMX_FILTER_STATUS MApi_DMX_Pvr_GetPlaybackStamp(MS_U32* pu32Stamp);







DMX_FILTER_STATUS MApi_DMX_Pvr_TimeStampEnable(void);







DMX_FILTER_STATUS MApi_DMX_Pvr_TimeStampDisable(void);
# 2494 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Open(DMX_PVR_ENG Eng ,DMX_Pvr_info* pPvrInfo);
# 2503 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Close(DMX_PVR_ENG Eng );
# 2513 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Pause(DMX_PVR_ENG Eng ,MS_BOOL bPause);
# 2524 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Pid_Open(DMX_PVR_ENG Eng ,MS_U32 Pid, MS_U8* pu8DmxId);
# 2534 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Pid_Close(DMX_PVR_ENG Eng ,MS_U8 u8DmxId);
# 2544 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Start(DMX_PVR_ENG Eng ,MS_BOOL bPvrAll);
# 2553 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Stop(DMX_PVR_ENG Eng );
# 2563 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_WriteGet(DMX_PVR_ENG Eng ,MS_PHY* pphyWrite);
# 2573 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_SetPacketMode(DMX_PVR_ENG Eng ,MS_BOOL bSet);
# 2583 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_Pvr_Eng_SetPacketMode_Ex(DMX_PVR_ENG Eng, DMX_Pvr_PacketMode ePvrPktMode);
# 2593 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_SetRecordStamp(DMX_PVR_ENG Eng ,MS_U32 u32Stamp);
# 2603 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_GetRecordStamp(DMX_PVR_ENG Eng ,MS_U32* pu32Stamp);
# 2615 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_MOBF_Enable(MS_U8 u8Eng, MS_BOOL bEnable, MS_U32 u32key0, MS_U32 u32key1);
# 2625 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_IsStart(DMX_PVR_ENG Eng, MS_BOOL *pbIsStart);
# 2641 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_Pid(DMX_PVR_ENG Eng ,MS_U8 u8DmxId , MS_U32 *Pid, MS_BOOL bSet);
# 2650 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_SetRecordStampClk(DMX_PVR_ENG Eng, DMX_TimeStamp_Clk eClk);
# 2661 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_CallbackSize(DMX_PVR_ENG Eng, MS_U32* pu32CallbackSize, MS_BOOL bSet);
# 2671 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_SetCaMode(DMX_PVR_ENG Eng, DMX_CA_PVRMODE eCaMode, MS_BOOL bspsEnable);
# 2681 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Pvr_Eng_SetPlaybackStampClk(MS_U8 u8Eng, DMX_TimeStamp_Clk eClk);
# 2693 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PvrCA_Pid_Open(MS_U32 Pid, MS_U8* pu8DmxId);
# 2703 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PvrCA_Pid_Close(MS_U8 u8DmxId);
# 2713 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PvrCA_Start(MS_BOOL bPvrAll);







DMX_FILTER_STATUS MApi_DMX_PvrCA_Stop(void);
# 2736 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PvrCA_Eng_Pid_Open(DMX_PVR_ENG Eng, MS_U32 Pid, MS_U8* pu8DmxId, MS_U8 u8ShareKeyType);
# 2745 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PvrCA_Eng_Pid_Close(DMX_PVR_ENG Eng, MS_U8 u8DmxId);
# 2754 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_PvrCA_Eng_Start(DMX_PVR_ENG Eng, MS_BOOL bPvrAll);







DMX_FILTER_STATUS MApi_DMX_PvrCA_Eng_Stop(DMX_PVR_ENG Eng);
# 2778 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Pvr_Eng_Pid_Open(DMX_PVR_ENG Eng, MS_U32 Pid, MS_U8* pu8DmxId, MS_U8 u8ShareKeyType);
# 2788 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Filein_Pvr_Eng_Pid_Close(DMX_PVR_ENG Eng, MS_U8 u8DmxId);
# 2798 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Pvr_Eng_Start(DMX_PVR_ENG Eng, MS_BOOL bPvrAll);
# 2807 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Filein_Pvr_Eng_Stop(DMX_PVR_ENG Eng);
# 2822 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Start(DMX_FILEIN_DST Dst, MS_PHY pBuf, MS_U32 u32BufSize);







DMX_FILTER_STATUS MApi_DMX_Filein_Stop(void);
# 2840 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Info(DMX_Filein_info *pFileinInfo);







DMX_FILTER_STATUS MApi_DMX_Filein_Pause(void);







DMX_FILTER_STATUS MApi_DMX_Filein_Resume(void);
# 2865 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL MApi_DMX_Filein_IsIdle(void);
# 2874 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL MApi_DMX_Filein_IsBusy(void);
# 2883 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL MApi_DMX_Filein_IsPause(void);
# 2892 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_CMDQ_Reset(void);
# 2902 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_CMDQ_GetEmptyNum(MS_U32 *pu32EmptySlot);
# 2912 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_CMDQ_FIFOWriteLevel(MS_U8 *pu8CmdQStatus);
# 2921 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
void MApi_DMX_BypassFileInTimeStamp(MS_BOOL bbypass);
# 2934 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_CMDQ_FIFOWriteLevel(MS_U8 *pu8CmdQStatus);
# 2944 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_GetFileInTimeStamp(MS_U32 *pu32FileInTS);
# 2954 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_GetReadAddr(MS_PHY* pphyRead);
# 2965 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_MOBF_Enable(MS_BOOL bEnable, MS_U32 u32key);
# 2980 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_Start(DMX_FILEIN_PATH ePath, DMX_FILEIN_DST Dst, MS_PHY pBuf, MS_U32 u32BufSize);







 DMX_FILTER_STATUS MApi_DMX_Filein_Eng_Stop(DMX_FILEIN_PATH ePath);
# 2997 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_Info(DMX_FILEIN_PATH ePath, DMX_Filein_info *pFileinInfo);







DMX_FILTER_STATUS MApi_DMX_Filein_Eng_Pause(DMX_FILEIN_PATH ePath);







DMX_FILTER_STATUS MApi_DMX_Filein_Eng_Resume(DMX_FILEIN_PATH ePath);
# 3022 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL MApi_DMX_Filein_Eng_IsIdle(DMX_FILEIN_PATH ePath);







 MS_BOOL MApi_DMX_Filein_Eng_IsBusy(DMX_FILEIN_PATH ePath);







 MS_BOOL MApi_DMX_Filein_Eng_IsPause(DMX_FILEIN_PATH ePath);







DMX_FILTER_STATUS MApi_DMX_Filein_Eng_CMDQ_Reset(DMX_FILEIN_PATH ePath);
# 3055 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_CMDQ_GetEmptyNum(DMX_FILEIN_PATH ePath, MS_U32 *pu32EmptySlot);







void MApi_DMX_Filein_Eng_BypassFileInTimeStamp(DMX_FILEIN_PATH ePath, MS_BOOL bbypass);
# 3072 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_CMDQ_FIFOWriteLevel(DMX_FILEIN_PATH ePath, MS_U8 *pu8CmdQStatus);
# 3081 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_GetFileInTimeStamp(DMX_FILEIN_PATH ePath, MS_U32 *pu32FileInTS);
# 3091 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_GetReadAddr(DMX_FILEIN_PATH ePath, MS_PHY* pphyRead);
# 3101 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_MOBF_Enable(DMX_FILEIN_PATH ePath, MS_BOOL bEnable, MS_U32 u32key);
# 3110 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_PlaybackTimeStampEnable(DMX_FILEIN_PATH ePath);
# 3119 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_PlaybackTimeStampDisable(DMX_FILEIN_PATH ePath);
# 3129 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_SetPlaybackStamp(DMX_FILEIN_PATH ePath,MS_U32 u32Stamp);
# 3138 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Filein_Eng_GetPlaybackStamp(DMX_FILEIN_PATH ePath,MS_U32* pu32Stamp);
# 3153 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL MApi_DMX_MMFI_Filein_IsIdle(DMX_MMFI_PATH ePath);
# 3162 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL MApi_DMX_MMFI_Filein_IsBusy(DMX_MMFI_PATH ePath);
# 3171 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_Filein_CMDQ_Reset(DMX_MMFI_PATH ePath);
# 3187 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_Filein_CMDQ_GetEmptyNum(DMX_MMFI_PATH ePath, MS_U32 *pu32EmptySlot);
# 3198 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_Filein_Start(DMX_MMFI_DST eDst, MS_PHY pBuf, MS_U32 u32BufSize);
# 3208 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_Filein_Info(DMX_MMFI_PATH ePath, DMX_Filein_info *pFileinInfo);
# 3217 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
void MApi_DMX_MMFI_Filein_BypassTimeStamp(DMX_MMFI_PATH ePath, MS_BOOL bbypass);
# 3226 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_GetFileInTimeStamp(DMX_MMFI_PATH ePath, MS_U32 *pu32FileInTS);
# 3238 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_Pid_Open(DMX_MMFI_FLTTYPE flttype, MS_U16 u16Pid, MS_U8* pu8DmxId);
# 3247 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_Pid_Close(MS_U8 u8DmxId);
# 3261 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_Filein_CMDQ_FIFOWriteLevel(DMX_MMFI_PATH ePath, MS_U8 *pu8CmdQStatus);
# 3271 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_SetPlaybackTimeStamp(DMX_MMFI_PATH ePath, MS_U32 u32pcr2);
# 3281 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_GetPlaybackTimeStamp(DMX_MMFI_PATH ePath, MS_U32 *pu32pcr2);
# 3290 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_RemoveDupAVPkt(MS_BOOL bEnable);
# 3299 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_TimeStampEnable(DMX_MMFI_PATH ePath);
# 3308 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_TimeStampDisable(DMX_MMFI_PATH ePath);
# 3318 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_MOBF_Enable(DMX_MMFI_PATH ePath, MS_BOOL bEnable, MS_U32 u32key);
# 3329 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_MOBF_SetLevel(DMX_MMFI_PATH epath, MS_U8 u8level);
# 3339 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_MMFI_TimeStampClk(DMX_MMFI_PATH ePath, DMX_TimeStamp_Clk eClk);
# 3355 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Filein_Info(MS_U8 u8Eng, DMX_Filein_info *pFileinInfo);
# 3364 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
MS_BOOL SYMBOL_WEAK MApi_DMX_TSO_Filein_IsIdle(MS_U8 u8Eng);
# 3374 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Filein_CMDQ_GetEmptyNum(MS_U8 u8Eng, MS_U32 *pu32EmptySlot);
# 3383 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Filein_CMDQ_Reset(MS_U8 u8Eng);
# 3394 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Filein_Start(MS_U8 u8Eng, MS_PHY pBuf, MS_U32 u32BufSize);
# 3403 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Filein_Stop(MS_U8 u8Eng);
# 3413 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_SetPlaybackTimeStamp(MS_U8 u8Eng, MS_U32 u32Stamp);
# 3423 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_GetPlaybackStamp(MS_U8 u8Eng, MS_U32* pu32Stamp);
# 3433 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_GetFileInTimeStamp(MS_U8 u8Eng, MS_U32 *pu32Stamp);
# 3443 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_BypassFileInTimeStamp(MS_U8 u8Eng, MS_BOOL bbypass);







DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_TimeStampEnable(MS_U8 u8Eng);
# 3460 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_TimeStampDisable(MS_U8 u8Eng);
# 3477 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_SetOutClk(MS_U8 u8Eng, DMX_TSO_OutClk eTsOutClk, DMX_TSO_OutClkSrc eTsOutClkSrc, MS_U16 u16DivNum, MS_BOOL bClkInv);
# 3487 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_OutputEnable(MS_U8 u8Eng, MS_BOOL bEnable);
# 3500 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_LocalStreamId(MS_U8 u8Eng, DMX_TSIF eIf, MS_U8* pu8StrId, MS_BOOL bSet);
# 3511 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_SVQBuf_Set(MS_U8 u8Eng, MS_PHY phyAddr, MS_U32 u32BufSize);
# 3534 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Flow_InputCfg(DMX_TSO_InputCfg* pstInputCfg);
# 3557 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Flow_OutputCfg(DMX_TSO_OutputCfg* pstOutputCfg);
# 3568 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Configure(DMX_TSO_Cfg* pstTsoCfg);
# 3580 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Pid_Open(MS_U8 u8Eng, DMX_TSIF eTSOInSrc, MS_U16 u16Pid, MS_U16* pu16DmxId);
# 3590 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Pid_Close(MS_U8 u8Eng, MS_U16 u16DmxId);
# 3599 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSO_Filein_GetReadAddr(MS_U8 u8Eng, MS_PHY* pphyRead);
# 3610 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_TSP_Get_FW_VER(MS_U32* u32FWVer);







DMX_FILTER_STATUS MApi_DMX_SetDbgLevel(DMX_DBGMSG_LEVEL level);
# 3630 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS MApi_DMX_Get_Intr_Count(MS_U32* pu32Count);







DMX_FILTER_STATUS MApi_DMX_GetLibVer(const MSIF_Version **ppVersion);
# 3648 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_GetDbgPortInfo(MS_U32 u32DbgSel,MS_U32* u32DbgInfo);
# 3658 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_SetFwDbgParam(MS_PHY phyAddr, MS_U32 u32Size, MS_U32 u32DbgWord);
# 3667 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_DisContiCnt(DMX_DisContiCnt_info* pDmxInfo, MS_U32* pu32Cnt);
# 3676 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_DropPktCnt(DMX_DropPktCnt_info* pDmxInfo, MS_U32* pu32Cnt);
# 3686 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_LockPktCnt(DMX_LockPktCnt_info* pDmxInfo, MS_U32* pu32Cnt);
# 3695 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_AVPktCnt(DMX_AVPktCnt_info* DmxInfo, MS_U32* pu32Cnt);
# 3704 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_SecTEI_PktCount(DMX_FILTER_TYPE FltSrc, MS_U32* pu32PktCnt);







DMX_FILTER_STATUS MApi_DMX_Reset_SecTEI_PktCount(DMX_FILTER_TYPE FltSrc);
# 3721 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_Get_SecDisCont_PktCount(MS_U32 u32DmxID, MS_U32* pu32PktCnt);







 DMX_FILTER_STATUS MApi_DMX_Reset_SecDisCont_PktCount(MS_U32 u32DmxID);
# 3744 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_SetFltRushPass(MS_U32 u32DmxId, MS_U8 u8Enable);
# 3754 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_Init(MS_U32 u32FQEng, DMX_FQ_Info* pFQInfo);







DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_Exit(MS_U32 u32FQEng);







DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_RushEnable(MS_U32 u32FQEng);
# 3780 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_SkipRushData(MS_U32 u32FQEng, DMX_FQ_SkipPath eSkipPath);
# 3792 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_Configure(DMX_FQ_Cfg* pstFqCfg);
# 3802 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_SetRushAddr(MS_U32 u32FQEng, MS_PHY phyRushAddr);
# 3812 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_ReadGet(MS_U32 u32FQEng, MS_PHY* pphyRead);
# 3822 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_FQ_WriteGet(MS_U32 u32FQEng, MS_PHY* pphyWrite);
# 3838 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
 DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_MStr_SyncByte(DMX_TSIF eIf, MS_U8 u8StrId, MS_U8* pu8SyncByte, MS_BOOL bSet);
# 3852 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_Get_PipeId(DMX_PIPEID_GROUP eGroup, DMX_GENERAL_ENGID EngId, MS_U32 *pu32PipeId);
# 3865 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX.h"
DMX_FILTER_STATUS MApi_DMX_CMD_Run(MS_U32 u32Cmd, MS_U32 u32Config, MS_U32 u32DataNum, void *pData);


#define DMX_CMD_RUN_DISABLE_SEC_CC_CHECK 0x00000001
#define DMX_CMD_SET_PESCPY_CONT_MODE 0x00000010
    #define DMX_CMD_PESCPY_CONT_MODE_DISABLE 0
    #define DMX_CMD_PESCPY_CONT_MODE_ENABLE 1
#define DMX_CMD_ENABLE_INIT_REF_CNT 0x00000100
#define DMX_CMD_STC_ADJUST_UNIT 0x00000020
#define DMX_CMD_PVR_PES_MODE 0x00000030

#if 0
DMX_FILTER_STATUS MApi_DMX_ResetFileinTimestamp(void)
#endif


#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvXC_IOPort_EX.h"
#ifndef _IOPORT_EX_H_
#define _IOPORT_EX_H_ 
# 117 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvXC_IOPort_EX.h"
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMS_v2.h"
#ifndef _DMS_V2_H_
#define _DMS_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
#include "UFO.h"





typedef enum
{

    E_DMS_CMD_INIT,
    E_DMS_CMD_CREATEWINDOW,
    E_DMS_CMD_CONNECT,
    E_DMS_CMD_DISCONNECT,
    E_DMS_CMD_DESTORYWINDOW,
    E_DMS_CMD_SETWINDOW,
    E_DMS_CMD_GETWINDOWINFO,
    E_DMS_CMD_VIDEOFLIP,
    E_DMS_CMD_SETZORDER,
    E_DMS_CMD_VIDEOMUTE,
    E_DMS_CMD_SETMUTECOLOR,
    E_DMS_CMD_VIDEOFREEZE,
    E_DMS_CMD_GETSTATUS,
    E_DMS_CMD_NUM,
    E_DMS_CMD_MAX = E_DMS_CMD_NUM,
}EN_DMS_IOCTL_CMDS;

typedef struct DLL_PACKED
{
    ST_DMS_INITDATA *pstDMS_InitData;
    MS_U32 u32InitDataLen;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_INIT,*PST_DMS_INIT;

typedef struct DLL_PACKED
{
    ST_DMS_WINDOW stOutputWin;
    MS_U32 u32ZOrder;
    MS_U32* pu32WindowID;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_CREATEWIN,*PST_DMS_CREATEWIN;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    MS_U32 enInputSourceType;
    ST_DMS_DISPFRAMEFORMAT *pstDispFrameFormat;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_CONNECT,*PST_DMS_CONNECT;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_DISCONNECT,*PST_DMS_DISCONNECT;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_DESTORYWIN,*PST_DMS_DESTORYWIN;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    ST_DMS_SETWIN_INFO *pstDMS_SetWin_Info;
    MS_U32 u32InfoDataLen;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_SETWIN,*PST_DMS_SETWIN;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    ST_DMS_GETWIN_INFO *pstDMS_GetWin_Info;
    MS_U32 u32InfoDataLen;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_GETWININFO,*PST_DMS_GETWININFO;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    ST_DMS_DISPFRAMEFORMAT* pstDispFrameFormat;
    MS_U32 u32InfoDataLen;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_FLIP,*PST_DMS_FLIP;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    MS_U32 u32ZOrder;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_ZORDER,*PST_DMS_ZORDER;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    MS_U32 u32Enable;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_FREEZE,*PST_DMS_FREEZE;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    MS_U32 u32Enable;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_MUTE,*PST_DMS_MUTE;

typedef struct DLL_PACKED
{
    MS_U32 u32WindowID;
    ST_DMS_COLOR stMuteColor;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_MUTECOLOR,*PST_DMS_MUTECOLOR;

typedef struct DLL_PACKED
{
    EN_DMS_STATUS *peStatus;
    EN_DMS_RESULT eReturnValue;
} ST_DMS_GETSTATUS,*PST_DMS_GETSTATUS;

#ifdef __cplusplus
}
#endif

#endif
# 138 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
#ifndef __MDRV_UART_H__
#define __MDRV_UART_H__ 
# 175 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"



#define UART_CAPS_AEON 0x00000001
#define UART_CAPS_PIU 0x00000002
# 195 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
#define UART_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'U','A','R','T'}, \
    {'0','1'}, \
    {'0','6'}, \
    {'0','0','3','1','0','0','5','0'}, \
    MSIF_OS

#define UART_TYPE_AEON 0x10
#define UART_TYPE_PIU 0x20
#define UART_TYPE_EYWA 0




#define UART_BAUD_RATE 115200

#define UART_DEV_NULL ((ms_uart_dev_t)0)






typedef enum
{
    E_UART_OK,
    E_UART_FAIL,
} UART_Result;

typedef struct _UART_DrvInfo
{
    MS_BOOL Init;
    MS_U32 Caps;
} UART_DrvInfo;

typedef struct _UART_DrvStatus
{
    MS_BOOL HwBusy;
} UART_DrvStatus;


typedef enum
{
    E_UART_INVALID = -1,
    E_UART_AEON,
    E_UART_VDEC,
    E_UART_TSP,
    E_UART_PIU_UART0,
    E_UART_PIU_UART1,
    E_UART_PIU_UART2,
    E_UART_PIU_FUART0,
    E_UART_HK51_UART0,
    E_UART_HK51_UART1,
    E_UART_VD51_UART0,
    E_UART_VD51_UART1,

    E_UART_AEON_R2,
    E_UART_AEON_AUDIO_R2,
    E_UART_DMD51_UART0,
    E_UART_DMD51_UART1,
    E_UART_SECURE_R2,
    E_UART_OFF,
} UART_DEVICE_TYPE;




typedef enum
{
    E_UART_PORT_INVALID = -1,
    E_UART_PORT0,
    E_UART_PORT1,
    E_UART_PORT2,
    E_UART_PORT3,
    E_UART_PORT4,
} UART_PORT_TYPE;




typedef enum
{


    E_UART_PAD_1_0,
    E_UART_PAD_1_1,
    E_UART_PAD_1_2,
    E_UART_PAD_1_3,

    E_UART_PAD_2_0,
    E_UART_PAD_2_1,
    E_UART_PAD_2_2,
    E_UART_PAD_2_3,

    E_UART_PAD_3_0,
    E_UART_PAD_3_1,
    E_UART_PAD_3_2,
    E_UART_PAD_3_3,

    E_UART_PAD_4_0,
    E_UART_PAD_4_1,
    E_UART_PAD_4_2,
    E_UART_PAD_4_3,
}UART_PAD_TYPE;

typedef enum _UART_DbgLv
{
    E_UART_DBGLV_NONE
    ,E_UART_DBGLV_ERR_ONLY
    ,E_UART_DBGLV_INFO
    ,E_UART_DBGLV_ALL
}UART_DbgLv;



typedef void (*ms_uart_rx_callback)(int c);


typedef void (*ms_uart_rx_callback_halreg)(int c, MS_U32 pHalReg);
# 331 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U32 mdrv_uart_open(UART_DEVICE_TYPE uart_dev);


MS_U32 MDrv_UART_SetPowerState(EN_POWER_MODE u16PowerState);







MS_U16 mdrv_uart_close(MS_VIRT uart);
# 352 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_connect(UART_PORT_TYPE uart_port, UART_DEVICE_TYPE uart_dev);







UART_DEVICE_TYPE mdrv_uart_get_connection(UART_PORT_TYPE uart_port);
# 371 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_connect_mux(UART_DEVICE_TYPE uart_dev, UART_PORT_TYPE uart_port, UART_PAD_TYPE uart_pad);
# 380 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_invert(UART_PORT_TYPE uart_port, MS_BOOL bInv);
# 392 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_set_baudrate(MS_VIRT uart, MS_U32 baudrate);
# 402 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_set_rx_callback(MS_VIRT uart, ms_uart_rx_callback rx_cb);
# 414 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_set_tx_buffer(MS_VIRT uart, void *tx_buffer, MS_U16 len);
# 426 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_set_rx_buffer(MS_VIRT uart, void *rx_buffer, MS_U16 len);







MS_U16 mdrv_uart_rx_enable(MS_VIRT uart);







MS_U16 mdrv_uart_tx_enable(MS_VIRT uart);







MS_U16 mdrv_uart_rx_disable(MS_VIRT uart);







MS_U16 mdrv_uart_tx_disable(MS_VIRT uart);
# 468 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_read(MS_VIRT uart, MS_U8 *buf, MS_U32 len);
# 478 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_write(MS_VIRT uart, const MS_U8 *buf, MS_U16 len);
# 487 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_poll(MS_VIRT hUart, int types);
# 496 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U16 mdrv_uart_set_rx_callback_halreg(MS_VIRT uart, ms_uart_rx_callback_halreg rx_cb);
# 507 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
typedef void(*P_UART_ISR_Proc)(MS_U8 u8UARTID);
# 516 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
UART_Result MDrv_UART_SetIOMapBase(void);
# 525 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
void MDrv_UART_Init(UART_DEVICE_TYPE uart_dev, MS_U32 baudrate);
# 534 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
void MDrv_UART_Standby_Init (void);
# 543 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
void MDrv_UART_PutChar(MS_U8 u8Ch);
# 552 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
void MDrv_UART_PutString(char *u8str);
# 561 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
MS_U8 MDrv_UART_GetChar(void);
# 570 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
void MDrv_UART_GetFile(MS_U8 *pu8Buf, MS_U32 u32Len);
# 579 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
const UART_DrvInfo* MDrv_UART_GetInfo(void);
# 588 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
struct device* MDrv_UART_GetDev(UART_DEVICE_TYPE uart_dev);
# 597 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
UART_Result MDrv_UART_GetLibVer(const MSIF_Version **ppVersion);
# 606 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
UART_Result MDrv_UART_GetStatus(UART_DrvStatus *pStatus);
# 615 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
void MDrv_UART_SetDbgLevel(MS_U8 level);
# 624 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUART.h"
UART_Result MDrv_UART_SetPMRxEnable(MS_BOOL bEnable);
void MDrv_UART_SetUARTSecurityBank(UART_DEVICE_TYPE uart_dev);

#if UART_TYPE_EYWA
#define EYWA_PAYLOAD_LEN 8
#define EYWA_DEFAULT_PARITY 0

typedef struct _Eywa_FastUart_struct
{
 MS_U8 data_type;
 MS_U8 data_type_inv;
 MS_U16 len;
 MS_U8 payload[EYWA_PAYLOAD_LEN];
 MS_U8 parity;
} Eywa_FastUart_struct;

typedef enum
{
 E_EYWA_INVALID = 0,
 E_EYWA_KEYPAD,
 E_EYWA_VOICE,
 E_EYWA_GYROSCOPE,
 E_EYWA_GSENSOR,
 E_EYWA_TOUCHPAD
} EYWA_DATATYPE;

typedef enum
{
 E_EYWA_INV_INVALID = 0xFF,
 E_EYWA_INV_KEYPAD = 0xFE,
 E_EYWA_INV_VOICE = 0xFD,
 E_EYWA_INV_GYROSCOPE = 0xFC,
 E_EYWA_INV_GSENSOR = 0xFB,
 E_EYWA_INV_TOUCHPAD = 0xFA
} EYWA_DATATYPE_INV;

void Eywa_UART_RecvHandler(MS_U8);
MS_U8 Eywa_Cal8BitsChecksum(MS_U8 *, MS_U32);
void Eywa_UART_Init(void);

#endif


#ifdef __cplusplus
}
#endif

#endif
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
#ifndef _API_VOIP_MFE_H_
#define _API_VOIP_MFE_H_ 

#ifdef __cplusplus
extern "C"
{
#endif





#define I_VOP 0UL
#define P_VOP 1UL
#define B_VOP 2UL



 typedef enum {
    PQ_LOW,
    PQ_NORMAL,
    PQ_HIGH
 } PQ_LEVEL;


 typedef enum {
    VOIP_MPEG4,
    VOIP_H263,
    VOIP_H264,
    VOIP_JPEG
 } VOIP_CODEC_TYPE;


typedef enum {
    MPEG4_ENC = 0,
    H263_ENC = 1,
    H264_ENC = 2,
    JPEG_ENC = 3,
    UNKNOWN_TYPE = 0xFF
} MFE_CODEC_TYPE;
# 238 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
typedef enum {
    MFE_ENC_SETCONF_FRAME_TYPE = 100,
    MFE_ENC_SETCONF_CHANGE_FRAME_RATE,
    MFE_ENC_SETCONF_CHANGE_BIT_RATE,
    MFE_ENC_SETCONF_OUT_BSP_BUFFER,
    MFE_ENC_SETCONF_FRAME_TAG,
    MFE_ENC_SETCONF_JPE_QUALITY,
    MFE_ENC_SETCONF_CHANGE_BIT_RATE_AND_FRAME_RATE,
    MFE_ENC_SETCONF_RESET_SPSPPS,
    MFE_ENC_SETCONF_SET_COLORFORMAT,

    MFE_ENC_GETCONF_FRAME_TAG = 300,
    MFE_ENC_GETCONF_OUT_BSP_BUFFER,
    MFE_ENC_GETCONF_JPE_QUALITY,
    MFE_ENC_GETCONF_DROP,
    MFE_ENC_GETCONF_CONFIG,
} MFE_ENC_CONF;
# 273 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
MS_BOOL MApi_MFE_Encode(void);
# 283 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
MS_BOOL MApi_MFE_CompressOnePicture_ex(MEMMAP_CUR_t YUVPlane, MS_BOOL bForceIframe);
# 292 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
MS_BOOL MApi_MFE_GetVOL_ex(void *header_info);







MS_BOOL MApi_MFE_DeInitialize(void);






MFE_STATE MApi_MFE_GetState(void);
# 320 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
MS_BOOL MApi_MFE_Initialize_ex(PVR_Info* in_Info,
StreamCallback out_cb,CleanCallback mfe_CleanBufStatus, void *ctx);
# 331 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
MS_BOOL MApi_MFE_SetConfig(MFE_ENC_CONF conf_type, void *value);
# 341 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
MS_BOOL MApi_MFE_GetConfig(MFE_ENC_CONF conf_type, void *value);
# 351 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVOIPMFE.h"
MS_BOOL MApi_MFE_GetHWCap(MFE_HwCapV0 *pDrv, MS_U32 *len);
#ifdef __cplusplus
}
#endif

#endif
# 140 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
#ifndef __DRV_SC_H__
#define __DRV_SC_H__ 


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsDevice.h"
#include "UFO.h"
# 159 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
#define MSIF_SC_LIB_CODE {'S','C'}
#define MSIF_SC_LIBVER {'0','1'}
#define MSIF_SC_BUILDNUM {'0','1'}
#define MSIF_SC_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define SC_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_SC_LIB_CODE, \
    MSIF_SC_LIBVER, \
    MSIF_SC_BUILDNUM, \
    MSIF_SC_CHANGELIST, \
    MSIF_OS

#define SC_ATR_LEN_MAX 33
#define SC_ATR_LEN_MIN 2
#define SC_HIST_LEN_MAX 15
#define SC_PPS_LEN_MAX 6
#define SC_FIFO_SIZE 512


#define SC_UART_CHAR_7 (0x02)
#define SC_UART_CHAR_8 (0x03)
#define SC_UART_STOP_1 (0x00)
#define SC_UART_STOP_2 (0x04)
#define SC_UART_PARITY_NO (0x00)
#define SC_UART_PARITY_ODD (0x08)
#define SC_UART_PARITY_EVEN (0x08|0x10)

#define SC_PROC_LOCK (0xFE66)
#define SC_PROC_UNLOCK (0x0)





typedef struct _SC_Status
{
    MS_BOOL bCardIn;

} SC_Status;

typedef enum _SC_DbgLv
{
    E_SC_DBGLV_NONE,
    E_SC_DBGLV_ERR_ONLY,
    E_SC_DBGLV_REG_DUMP,
    E_SC_DBGLV_INFO,
    E_SC_DBGLV_ALL,
} SC_DbgLv;


typedef enum
{
    E_SC_FAIL,
    E_SC_OK,
    E_SC_PPSFAIL,
    E_SC_INVCONV,
    E_SC_CARDIN,
    E_SC_CARDOUT,
    E_SC_NODATA,
    E_SC_TIMEOUT,
    E_SC_OVERFLOW,
    E_SC_CRCERROR,
    E_SC_DATAERROR,
    E_SC_PARMERROR,
} SC_Result;


typedef enum
{
    E_SC_EVENT_DATA,
    E_SC_EVENT_IN,
    E_SC_EVENT_OUT,

} SC_Event;


typedef enum
{
    E_SC_CLK_3M,
    E_SC_CLK_4P5M,
    E_SC_CLK_6M,
    E_SC_CLK_13M,
    E_SC_CLK_4M,
} SC_ClkCtrl;


typedef enum
{
    E_SC_VCC_CTRL_8024_ON,
    E_SC_VCC_CTRL_LOW,
    E_SC_VCC_CTRL_HIGH,
    E_SC_OCP_VCC_HIGH,
    E_SC_VCC_VCC_ONCHIP_8024,
} SC_VccCtrl;


typedef enum
{
    E_SC_VOLTAGE_3_POINT_3V,
    E_SC_VOLTAGE_5V,
    E_SC_VOLTAGE_MAX
} SC_VoltageCtrl;

typedef void(*P_SC_En5V_Callback)(MS_BOOL bEnable);


typedef enum
{
    E_SC_HIGH_ACTIVE = 0x0,
    E_SC_LOW_ACTIVE = 0xff3
} SC_CardDetType;


typedef struct
{
    MS_U8 u8Protocal;
    SC_ClkCtrl eCardClk;
    MS_U8 u8UartMode;
    MS_U16 u16ClkDiv;
    SC_VccCtrl eVccCtrl;
    MS_U16 u16Bonding;
    P_SC_En5V_Callback pfOCPControl;
    MS_U8 u8Convention;
    SC_VoltageCtrl eVoltage;
    SC_CardDetType u8CardDetInvert;
} SC_Param;


typedef void (*P_SC_Callback)(MS_U8 u8SCID, SC_Event eEvent);

typedef struct _Smart_Dev
{

} SC_Dev;



typedef struct
{

    MS_U8 u8Protocol;
    MS_BOOL bSpecMode;
    MS_U8 pu8Atr[SC_ATR_LEN_MAX];
    MS_U16 u16AtrLen;
    MS_U8 pu8Hist[SC_HIST_LEN_MAX];
    MS_U16 u16HistLen;
    MS_U8 u8Fi;
    MS_U8 u8Di;
#ifdef UFO_PUBLIC_HEADER_212
    MS_U8 u8N;
#endif

    MS_BOOL bInited;
    MS_BOOL bOpened;
    MS_BOOL bCardIn;
    MS_BOOL blast_cardin;
    SC_ClkCtrl eCardClk;
    MS_U8 u8UartMode;
    SC_VccCtrl eVccCtrl;
    MS_U16 u16ClkDiv;
    MS_U16 u16Bonding;
    P_SC_En5V_Callback pfEn5V;
    MS_U8 u8Convention;

    MS_U8 u8FifoRx[SC_FIFO_SIZE];
    MS_U16 u16FifoRxRead;
    MS_U16 u16FifoRxWrite;

    MS_U8 u8FifoTx[SC_FIFO_SIZE];
    MS_U16 u16FifoTxRead;
    MS_U16 u16FifoTxWrite;
    P_SC_Callback pfNotify;

    MS_BOOL bLastCardIn;
    MS_S32 s32DevFd;
#ifdef UFO_PUBLIC_HEADER_212
    SC_VoltageCtrl eVoltage;
#endif
} SC_Info;



typedef struct
{
    MS_U8 u8DevNum;

} SC_Caps;


typedef enum
{

    SC_CMDIDX_RAW_EXCHANGE = 0x01,
    SC_CMDIDX_GET_ATR = 0x02,
    SC_CMDIDX_SEND = 0x03,
    SC_CMDIDX_RECV = 0x04,

    SC_CMDIDX_ACK_51ToMIPS = 0x30,


    SC_CMDIDX_ACK_MIPSTo51 = 0xA0,

} SC_CmdIndex;



typedef enum
{
    E_SC_ACKFLG_NULL = 0,
    E_SC_ACKFLG_WAIT_RAW_EXCHANGE = (1<<0),
    E_SC_ACKFLG_WAIT_GET_ATR = (1<<1),
    E_SC_ACKFLG_WAIT_SEND = (1<<2),
    E_SC_ACKFLG_WAIT_RECV = (1<<3),

} SC_AckFlags;

typedef struct __attribute__ ((packed, aligned (4096)))
{
    MS_U8 u8SCID;
    MS_U16 u16DataLen;
    MS_U16 u16ReplyMaxLen;
    MS_U8 u8Data[259];


} SC_DataCfg;


typedef struct
{
    MS_PHY u32DataBuffAddr;
    MS_PHY u32FwBuffAddr;
} SC_BuffAddr;
# 409 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Init(MS_U8 u8SCID);
# 418 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Open(MS_U8 u8SCID, MS_U8 u8Protocol, SC_Param* pParam, P_SC_Callback pfSmartNotify);
# 427 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Config(MS_U8 u8SCID, SC_Param* pParam);
# 436 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Close(MS_U8 u8SCID);
# 445 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Reset(MS_U8 u8SCID, SC_Param* pParam);
# 454 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Activate(MS_U8 u8SCID);
# 463 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Deactivate(MS_U8 u8SCID);
# 472 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Reset_ATR(MS_U8 u8SCID, SC_Param* pParam, MS_U8 *pu8Atr, MS_U16 *pu16AtrLen, MS_U8 *pu8His, MS_U16 *pu16HisLen);
# 481 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_PPS(MS_U8 u8SCID);
# 490 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Send(MS_U8 u8SCID, MS_U8 *pu8SendData, MS_U16 u16SendDataLen, MS_U32 u32TimeoutMs);
# 499 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Recv(MS_U8 u8SCID, MS_U8 *pu8ReadData, MS_U16 *u16ReadDataLen, MS_U32 u32TimeoutMs);
# 508 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_T0_SendRecv(MS_U8 u8SCID, MS_U8 *pu8SendData, MS_U16 u16SendLen, MS_U8 *pu8RecvData, MS_U16 *pu16RecvLen);
# 517 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_T1_SendRecv(MS_U8 u8SCID, MS_U8 *pu8SendData, MS_U16 *u16SendDataLen, MS_U8 *pu8ReadData, MS_U16 *u16ReadDataLen);
# 526 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_T14_SendRecv(MS_U8 u8SCID, MS_U8 *pu8SendData, MS_U16 u16SendLen, MS_U8 *pu8RecvData, MS_U16 *pu16RecvLen);
# 535 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Exit(MS_U8 u8SCID);
# 544 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_GetATR(MS_U8 u8SCID, MS_U32 u32TimeOut,MS_U8 *pu8Atr, MS_U16 *pu16AtrLen, MS_U8 *pu8His, MS_U16 *pu16HisLen);
# 553 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
const SC_Info* MDrv_SC_GetInfo(MS_U8 u8SCID);
# 562 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_GetLibVer(const MSIF_Version **ppVersion);
# 571 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_GetStatus(MS_U8 u8SCID, SC_Status *pStatus);
# 580 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
void MDrv_SC_SetDbgLevel(SC_DbgLv eLevel);
# 589 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_SetPPS(MS_U8 u8SCID, MS_U8 u8SCProtocol, MS_U8 u8Di,MS_U8 u8Fi);
# 598 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_ClearState(MS_U8 u8SCID);
# 607 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_PowerOff(void);
# 616 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_SetGuardTime(MS_U8 u8SCID, MS_U8 u8GuardTime);
# 626 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_Task_Proc(void);
# 635 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
MS_BOOL MDrv_SC_ISR_Proc(MS_U8 u8SCID);
# 644 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_RawExchange(MS_U8 u8SCID, MS_U8 *pu8SendData, MS_U16 *u16SendDataLen, MS_U8 *pu8ReadData, MS_U16 *u16ReadDataLen);
# 653 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_RawExchangeTimeout(MS_U8 u8SCID, MS_U8 *pu8SendData, MS_U16 *u16SendDataLen, MS_U8 *pu8ReadData, MS_U16 *u16ReadDataLen, MS_U32 u32TimeoutMs);
# 662 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
SC_Result MDrv_SC_SetBuffAddr(SC_BuffAddr *pScBuffAddr);
# 671 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
MS_BOOL MDrv_SC_CardVoltage_Config(MS_U8 u8SCID, SC_VoltageCtrl eVoltage);
# 680 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
void MDrv_SC_EnableTimeout(MS_BOOL bTimeout);
# 689 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSC.h"
MS_U32 MDrv_SC_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef __cplusplus
}
#endif

#endif
# 121 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
#ifndef _DRV_MVOP_H_
#define _DRV_MVOP_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
#include "MsDevice.h"
#include "UFO.h"
# 140 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
#define MSIF_MVOP_LIB_CODE {'M','V','O','P'}
#define MSIF_MVOP_LIBVER {'1','0'}
#define MSIF_MVOP_BUILDNUM {'4','2'}
#define MSIF_MVOP_CHANGELIST {'0','0','7','0','2','3','8','3'}

#define MVOP_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_MVOP_LIB_CODE, \
    MSIF_MVOP_LIBVER, \
    MSIF_MVOP_BUILDNUM, \
    MSIF_MVOP_CHANGELIST, \
    MSIF_OS


#define _SUPPORT_IMG_OFFSET_ 
#define ENABLE_UTOPIA2_INTERFACE 1
#define ENABLE_MUTEX 1




typedef enum
{
    E_MVOP_OK = 0,
    E_MVOP_FAIL = 1,
    E_MVOP_INVALID_PARAM = 2,
    E_MVOP_NOT_INIT = 3,
    E_MVOP_UNSUPPORTED = 4
} MVOP_Result;


typedef enum
{
    E_MVOP_TILE_8x32 = 0,
    E_MVOP_TILE_16x32 = 1,
    E_MVOP_TILE_NONE = 2
} MVOP_TileFormat;


typedef enum
{
    E_MVOP_RGB_565 = 0,
    E_MVOP_RGB_888 = 1,
    E_MVOP_RGB_NONE = 0xff
} MVOP_RgbFormat;


typedef enum
{
    VOPINPUT_HARDWIRE = 0,
    VOPINPUT_HARDWIRECLIP = 1,
    VOPINPUT_MCUCTRL = 2,
    VOPINPUT_IFRAME = 3,
} VOPINPUTMODE;


typedef enum
{
    E_VOPMIRROR_VERTICAL = 1,
    E_VOPMIRROR_HORIZONTALL = 2,
    E_VOPMIRROR_HVBOTH = 3,
    E_VOPMIRROR_NONE = 4,
} MVOP_DrvMirror;


typedef enum
{
    E_MVOP_RPTFLD_NONE = 0,
    E_MVOP_RPTFLD_TOP = 1,
    E_MVOP_RPTFLD_BOT = 2,
} MVOP_RptFldMode;


typedef enum
{
    E_MVOP_OUTPUT_3D_NONE,
    E_MVOP_OUTPUT_3D_TB,
    E_MVOP_OUTPUT_3D_SBS,
    E_MVOP_OUTPUT_3D_LA,
    E_MVOP_OUTPUT_3D_MAXNUM,
}EN_MVOP_Output_3D_TYPE;

typedef enum
{
    MVOP_MPEG4 = 0,
    MVOP_MJPEG,
    MVOP_H264,

    MVOP_RM,
    MVOP_TS,
    MVOP_MPG,
    MVOP_UNKNOW,

}MVOP_VIDEO_TYPE;



typedef struct DLL_PACKED
{
    MS_PHY u32YOffset;
    MS_PHY u32UVOffset;
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16StripSize;

    MS_BOOL bYUV422;
    MS_BOOL bSD;
    MS_BOOL bProgressive;




    MS_BOOL bUV7bit;
    MS_BOOL bDramRdContd;
    MS_BOOL bField;
    MS_BOOL b422pack;
    MS_U16 u16CropX;
    MS_U16 u16CropY;
    MS_U16 u16CropWidth;
    MS_U16 u16CropHeight;
    MVOP_VIDEO_TYPE enVideoType;
} MVOP_InputCfg;


typedef struct DLL_PACKED
{
    MS_U16 u16V_TotalCount;
    MS_U16 u16H_TotalCount;
    MS_U16 u16VBlank0_Start;
    MS_U16 u16VBlank0_End;
    MS_U16 u16VBlank1_Start;
    MS_U16 u16VBlank1_End;
    MS_U16 u16TopField_Start;
    MS_U16 u16BottomField_Start;
    MS_U16 u16TopField_VS;
    MS_U16 u16BottomField_VS;
    MS_U16 u16HActive_Start;

    MS_BOOL bInterlace;
    MS_U8 u8Framerate;
    MS_U16 u16H_Freq ;
    MS_U16 u16Num;
    MS_U16 u16Den;
    MS_U8 u8MvdFRCType;

    MS_U16 u16ExpFrameRate;
    MS_U16 u16Width;
    MS_U16 u16Height;
    MS_U16 u16HImg_Start;
    MS_U16 u16VImg_Start0;
    MS_U16 u16VImg_Start1;
    MS_BOOL bHDuplicate;
} MVOP_Timing;


typedef struct DLL_PACKED
{
    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;
    MS_BOOL bInterlaceMode;
}MVOP_DST_DispInfo;


typedef struct
{
    MS_U16 u16V_TotalCount;
    MS_U16 u16H_TotalCount;
    MS_U16 u16VBlank0_Start;
    MS_U16 u16VBlank0_End;
    MS_U16 u16VBlank1_Start;
    MS_U16 u16VBlank1_End;
    MS_U16 u16TopField_Start;
    MS_U16 u16BottomField_Start;
    MS_U16 u16TopField_VS;
    MS_U16 u16BottomField_VS;
    MS_U16 u16HActive_Start;
    MS_BOOL bInterlace;
    MS_BOOL bEnabled;
}MVOP_TimingInfo_FromRegisters;

typedef enum
{
    MVOP_PATTERN_NORMAL = 0,
    MVOP_PATTERN_COLORBAR = 1,
    MVOP_PATTERN_FRAMECOLOR = 2,
    MVOP_PATTERN_YCBCR = 3,
    MVOP_PATTERN_Y = 4,
    MVOP_PATTERN_CB = 5,
    MVOP_PATTERN_CR = 6,
    MVOP_PATTERN_DEFAULT = 7
} MVOP_Pattern;

typedef enum
{
    MVOP_INPUT_DRAM = 0,
    MVOP_INPUT_H264 = 1,
    MVOP_INPUT_MVD = 2,
    MVOP_INPUT_RVD = 3,
    MVOP_INPUT_CLIP = 4,
    MVOP_INPUT_JPD = 5,
    MVOP_INPUT_HVD_3DLR = 6,
    MVOP_INPUT_MVD_3DLR = 7,
    MVOP_INPUT_DRAM_3DLR= 8,
    MVOP_INPUT_EVD = 9,
    MVOP_INPUT_EVD_3DLR = 10,
    MVOP_INPUT_VP9 = 11,
    MVOP_INPUT_EVD_DV = 12,
    MVOP_INPUT_H264_DV = 13,
    MVOP_INPUT_UNKNOWN = -1
} MVOP_InputSel;


typedef struct DLL_PACKED
{
    MS_U16 u16HorSize;
    MS_U16 u16VerSize;
    MS_U16 u16FrameRate;
    MS_U8 u8AspectRate;
    MS_U8 u8Interlace;
    MS_U16 u16HorOffset;
    MS_U16 u16VerOffset;
} MVOP_VidStat;


typedef struct DLL_PACKED _MVOP_DrvInfo
{
    MS_U32 u32MaxSynClk;
    MS_U32 u32MinSynClk;
    MS_U32 u32MaxFreerunClk;
} MVOP_DrvInfo;


typedef struct DLL_PACKED _MVOP_DrvStatus
{
    MS_BOOL bIsInit;
    MS_BOOL bIsEnable;
    MS_BOOL bIsUVShift;
    MS_BOOL bIsBlackBG;
    MS_BOOL bIsMonoMode;
    MS_BOOL bIsSetTiming;
} MVOP_DrvStatus;


typedef enum
{
    E_MVOP_MODULE_MAIN = 0,
    E_MVOP_MODULE_SUB = 1,
    E_MVOP_MODULE_MAX
} MVOP_Module;


typedef enum
{
    E_MVOP_DEV_0 = 0,
    E_MVOP_DEV_1 = 1,
    E_MVOP_DEV_2 = 2,
    E_MVOP_DEV_NONE = 0xff
} MVOP_DevID;


typedef struct DLL_PACKED _MVOP_Handle
{
    MVOP_Module eModuleNum;
} MVOP_Handle;


typedef enum
{
    E_MVOP_MAIN_VIEW = 0,
    E_MVOP_2ND_VIEW = 0x01,
} MVOP_3DView;

typedef struct DLL_PACKED
{
    MVOP_3DView eView;
    MS_PHY u32YOffset;
    MS_PHY u32UVOffset;
} MVOP_BaseAddInput;

typedef struct DLL_PACKED
{
    MS_BOOL bIsEnableLuma;
    MS_BOOL bIsEnableChroma;
    MS_U8 u8LumaValue;
    MS_U8 u8ChromaValue;
} MVOP_VC1RangeMapInfo;

typedef struct DLL_PACKED
{
    MS_PHY u32MSBYOffset;
    MS_PHY u32MSBUVOffset;
    MS_PHY u32LSBYOffset;
    MS_PHY u32LSBUVOffset;
    MS_BOOL bProgressive;
    MS_BOOL b422Pack;
    MS_BOOL bEnLSB;
} MVOP_EVDBaseAddInput;

typedef enum
{
    E_MVOP_EVD_8BIT = 0,
    E_MVOP_EVD_10BIT = 0x01,
} MVOP_EVDBit;

typedef struct DLL_PACKED
{
    MS_BOOL bEnableEVD;
    MVOP_EVDBit eEVDBit[2];
}MVOP_EVDFeature;

typedef enum
{
    E_MVOP_MAIN_STREAM = 0,

} MVOP_StreamID;


typedef enum
{
    E_MVOP_CMD_SET_TYPE = 0x100,
    E_MVOP_CMD_SET_VSIZE_MIN,
    E_MVOP_CMD_SET_STB_FD_MASK_CLR,
    E_MVOP_CMD_SET_3DLR_INST_VBLANK,
    E_MVOP_CMD_SET_3DLR_ALT_OUT,
    E_MVOP_CMD_SET_RGB_FMT,
    E_MVOP_CMD_SET_SW_CTRL_FIELD_ENABLE,
    E_MVOP_CMD_SET_SW_CTRL_FIELD_DSIABLE,
    E_MVOP_CMD_SET_3DLR_2ND_CFG,
    E_MVOP_CMD_SET_VSIZE_DUPLICATE,
    E_MVOP_CMD_SET_3DLR_ALT_OUT_SBS,
    E_MVOP_CMD_SET_FIELD_DUPLICATE,
    E_MVOP_CMD_SET_VSYNC_MODE,
    E_MVOP_CMD_SET_VSIZE_X4_DUPLICATE,
    E_MVOP_CMD_SET_HSIZE_X4_DUPLICATE,
    E_MVOP_CMD_SET_BASE_ADD_MULTI_VIEW,
    E_MVOP_CMD_SET_FIRE_MVOP,
    E_MVOP_CMD_SET_VC1_RANGE_MAP,
    E_MVOP_CMD_SET_POWER_STATE,
    E_MVOP_CMD_SET_420_BW_SAVING_MODE,
    E_MVOP_CMD_SET_EVD_BASE_ADD,
    E_MVOP_CMD_SET_EVD_FEATURE,
    E_MVOP_CMD_SET_MVD_LATE_REPEAT,
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700)
    E_MVOP_CMD_SET_HANDSHAKE_MODE,
    E_MVOP_CMD_SET_FRC_OUTPUT,
#endif
    E_MVOP_CMD_SET_XC_GEN_TIMING,
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_MVOP_CMD_SET_RESET_SETTING,
#endif
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500)
    E_MVOP_CMD_SET_XC_H_DOWN_SCALE,
#endif
    E_MVOP_CMD_SET_SEL_OP_FIELD,
    E_MVOP_CMD_SET_SIZE_FROM_MVD,
    E_MVOP_CMD_SET_CROP_START_POS,
    E_MVOP_CMD_SET_IMAGE_WIDTH_HEIGHT,
    E_MVOP_CMD_SET_INV_OP_VS,
    E_MVOP_CMD_SET_FORCE_TOP,
#if defined(UFO_PUBLIC_HEADER_212)
    E_MVOP_CMD_SET_10B_8B_DITHER,
    E_MVOP_CMD_SET_HANDSHAKE_MODE,
    E_MVOP_CMD_SET_FRC_OUTPUT,
#endif
#if defined(UFO_PUBLIC_HEADER_500)
    E_MVOP_CMD_SET_MVOP_2P,
#endif
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_MVOP_CMD_SET_STREAM_INFO,
#endif
    E_MVOP_CMD_SET_FORCE_P_MODE,
    E_MVOP_CMD_SET_EXT_FPS,
    E_MVOP_CMD_SET_INTERLACE_FIELD_MODE,
    E_MVOP_CMD_SET_UV_SWAP,

    E_MVOP_CMD_GET_TYPE = 0x400,
    E_MVOP_CMD_GET_3DLR_ALT_OUT,
    E_MVOP_CMD_GET_MIRROR_MODE,
    E_MVOP_CMD_GET_3DLR_2ND_CFG,
    E_MVOP_CMD_GET_VSIZE_DUPLICATE,
    E_MVOP_CMD_GET_BASE_ADD_BITS,
    E_MVOP_CMD_GET_TOTAL_MVOP_NUM,
    E_MVOP_CMD_GET_MAXIMUM_CLK,
    E_MVOP_CMD_GET_CURRENT_CLK,
    E_MVOP_CMD_GET_BASE_ADD_MULTI_VIEW,
    E_MVOP_CMD_GET_TOP_FIELD_IMAGE_VSTART,
    E_MVOP_CMD_GET_BOTTOM_FIELD_IMAGE_VSTART,
    E_MVOP_CMD_GET_VCOUNT,
    E_MVOP_CMD_GET_HANDSHAKE_MODE,
    E_MVOP_CMD_GET_MAX_FPS,
#if defined(UFO_PUBLIC_HEADER_212)
    E_MVOP_CMD_GET_4K2K2PMODE,
    E_MVOP_CMD_GET_ISMVOPSENDDATA,
#endif
    E_MVOP_CMD_GET_CROP_FOR_XC,
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_MVOP_CMD_GET_MVOP_SW_CROP_ADD,
    E_MVOP_CMD_GET_IS_SW_CROP,
    E_MVOP_CMD_GET_OUTPUT_HV_RATIO,
#endif
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_212)
    E_MVOP_CMD_GET_INPUT,
    E_MVOP_CMD_GET_SUB_INPUT,
#endif
    E_MVOP_CMD_GET_IS_XC_GEN_TIMING,
    E_MVOP_CMD_GET_IS_MVOP_AUTO_GEN_BLACK,
} MVOP_Command;

typedef enum
{
    E_MVOP_SYNCMODE,
    E_MVOP_FREERUNMODE,
    E_MVOP_27MHZ = 27000000ul,
    E_MVOP_54MHZ = 54000000ul,
    E_MVOP_72MHZ = 72000000ul,
    E_MVOP_108MHZ = 108000000ul,
    E_MVOP_123MHZ = 123000000ul,
    E_MVOP_144MHZ = 144000000ul,
    E_MVOP_160MHZ = 160000000ul,
    E_MVOP_172MHZ = 172000000ul,
    E_MVOP_192MHZ = 192000000ul,
    E_MVOP_320MHZ = 320000000ul,
}MVOP_FREQUENCY;


typedef enum
{
    E_MVOP_INT_NONE = 0,
    E_MVOP_INT_BUFF_UF = 0x01,
    E_MVOP_INT_BUFF_OF = 0x02,
    E_MVOP_INT_VSYNC = 0x04,
    E_MVOP_INT_HSYNC = 0x08,
    E_MVOP_INT_RDY = 0x10,
    E_MVOP_INT_FDCHNG = 0x20,
} MVOP_IntType;

typedef struct DLL_PACKED
{
    MS_U8 u8StrVer;
    MS_U8 u8Rsrvd;
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Fps;
} MVOP_CapInput;

typedef struct
{
    MS_BOOL bEnable3DLRALT;
    MS_BOOL bEnable3DLRSBS;
    MS_BOOL bEnableVdup;
    MS_BOOL bEnableVx4;
    MS_BOOL bEnableHx4;
    MS_BOOL bEnableVsyncMode;
    MS_BOOL bEnableHMirror;
    MS_BOOL bEnableVMirror;
    MS_BOOL bEnableBWSave;
    MS_BOOL bEnableRptPreVsync;
} MVOP_ComdFlag;

typedef enum
{
    E_MVOP_HS_NOT_SUPPORT = 0,
    E_MVOP_HS_ENABLE = 0x01,
    E_MVOP_HS_DISABLE = 0x02,
    E_MVOP_HS_INVALID_PARAM = 0x03,

} MVOP_HSMode;

typedef struct DLL_PACKED
{
    MS_U32 u32Framerate;
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_BOOL b3DTB;
    MS_BOOL b3DSBS;
    MS_BOOL bReserve[6];
} MVOP_GetMaxFps;

#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
typedef enum
{
    E_MVOP_PRO = 0,
    E_MVOP_INT_TB_ONE_FRAME = 0x01,
    E_MVOP_INT_TB_SEP_FRAME = 0x02,

} MVOP_OutputImodeType;
#endif

typedef struct DLL_PACKED
{
    MS_U16 u16XStart;
    MS_U16 u16YStart;
    MS_U16 u16XSize;
    MS_U16 u16YSize;
    MS_U32 reserve[2];
} MVOP_XCGetCrop;

typedef struct
{
    MS_U32 u32MSBStartY0;
    MS_U32 u32MSBStartUV0;
    MS_U32 u32MSBStartY1;
    MS_U32 u32MSBStartUV1;

    MS_U32 u32LSBStartY0;
    MS_U32 u32LSBStartUV0;
    MS_U32 u32LSBStartY1;
    MS_U32 u32LSBStartUV1;
    MVOP_XCGetCrop stXCCrop;
    MS_U16 u16XCap;
    MS_U16 u16YCap;
    MS_U32 reserve[4];
    MS_U32 u32MFCodecInfo;
    MS_U32 u32LumaMFCbitlen;
    MS_U32 u32ChromaMFCbitlen;
    MS_U16 u16Pitch;
    MS_U16 u16Pitch_2bit;
} MVOP_XCGetCropMirAdd;

typedef struct
{
    float fHratio;
    float fVratio;
    float reserve0[4];
    MS_U32 reserve1[2];
} MVOP_OutputHVRatio;

typedef struct
{
    MS_U16 u16Xpos;
    MS_U16 u16Ypos;
} MVOP_SetCropPos;

typedef struct
{
    MS_U16 u16Width;
    MS_U16 u16Height;
} MVOP_SetImageWH;

typedef enum
{
    E_MVOP_10to8_NONE = 0,
    E_MVOP_10to8_ROUND_TOSS = 0x01,
    E_MVOP_10to8_ROUND_RANDOM = 0x02,
    E_MVOP_10to8_ROUND_HALF = 0x03,
    E_MVOP_10to8_PSEU_STOP = 0x04,
} MVOP_10to8Mode;

typedef enum
{
    E_MVOP_SET_SI_NONE = 0,
    E_MVOP_SET_SI_DV_SINGLE = 0x01,
    E_MVOP_SET_SI_DV_DUAL = 0x02
} MVOP_SetStreamInfo;
# 714 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
void MDrv_MVOP_GetConfig (MVOP_Handle* stHd);
# 724 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
void MDrv_MVOP_Init (void);







void MDrv_MVOP_Exit(void);






void MDrv_MVOP_Enable ( MS_BOOL bEnable );
# 752 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_SetInputCfg (MVOP_InputSel in, MVOP_InputCfg* pCfg);
# 765 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_SetOutputCfg(MVOP_VidStat *pstVideoStatus, MS_BOOL bEnHDup);






void MDrv_MVOP_EnableBlackBG ( void );







void MDrv_MVOP_EnableUVShift(MS_BOOL bEnable);






void MDrv_MVOP_SetMonoMode(MS_BOOL bEnable);







MS_U16 MDrv_MVOP_GetHSize(void);






MS_U16 MDrv_MVOP_GetVSize(void);






MS_U16 MDrv_MVOP_GetHStart(void);






MS_U16 MDrv_MVOP_GetVStart(void);






MS_BOOL MDrv_MVOP_GetIsInterlace(void);






MS_BOOL MDrv_MVOP_GetIsHDuplicate(void);






MVOP_Result MDrv_MVOP_GetIsEnable ( MS_BOOL* pbEnable );
# 849 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_GetOutputTiming(MVOP_Timing* pMVOPTiming);
# 861 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_GetLibVer(const MSIF_Version **ppVersion);
# 870 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_BOOL MDrv_MVOP_CheckCapability(MS_U16 u16HSize, MS_U16 u16VSize, MS_U16 u16Fps);
# 880 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_U16 MDrv_MVOP_GetMaxHOffset(MS_U16 u16HSize, MS_U16 u16VSize, MS_U16 u16Fps);
# 889 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_U16 MDrv_MVOP_GetMaxVOffset(MS_U16 u16HSize, MS_U16 u16VSize, MS_U16 u16Fps);







void MDrv_MVOP_SetDbgLevel(MS_U8 level);






const MVOP_DrvInfo* MDrv_MVOP_GetInfo(void);






MS_BOOL MDrv_MVOP_GetStatus(MVOP_DrvStatus *pMVOPStat);
MS_BOOL MDrv_MVOP_EnableInterrupt(MS_U8 eIntType);
# 921 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
void MDrv_MVOP_SetPattern(MVOP_Pattern enMVOPPattern);






MS_BOOL MDrv_MVOP_SetTileFormat(MVOP_TileFormat eTileFmt);







MS_BOOL MDrv_MVOP_GetDstInfo(MVOP_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);






MS_BOOL MDrv_MVOP_SetFixVtt(MS_U16 u16FixVtt);






MS_BOOL MDrv_MVOP_SetMMIOMapBase(void);
# 962 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_MiuSwitch(MS_U8 u8Miu);
# 972 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_BOOL MDrv_MVOP_SetBaseAdd(MS_PHY u32YOffset, MS_PHY u32UVOffset, MS_BOOL bProgressive, MS_BOOL b422pack);






void MDrv_MVOP_SEL_OP_FIELD(MS_BOOL bEnable);






void MDrv_MVOP_SetRegSizeFromMVD(MS_BOOL bEnable);







void MDrv_MVOP_SetStartPos(MS_U16 u16Xpos ,MS_U16 u16Ypos);







MS_BOOL MDrv_MVOP_SetImageWidthHight(MS_U16 u16Width ,MS_U16 u16Height);







void MDrv_MVOP_SetVOPMirrorMode(MS_BOOL bEnable,MVOP_DrvMirror eMirrorMode);






void MDrv_MVOP_INV_OP_VS(MS_BOOL bEnable);






void MDrv_MVOP_FORCE_TOP(MS_BOOL bEnable);






MS_BOOL MDrv_MVOP_EnableFreerunMode(MS_BOOL bEnable);







void MDrv_MVOP_GetBaseAdd(MS_PHY* u32YOffset, MS_PHY* u32UVOffset);






MS_BOOL MDrv_MVOP_SubGetStatus(MVOP_DrvStatus *pMVOPStat);






MS_U16 MDrv_MVOP_SubGetHStart(void);






MS_U16 MDrv_MVOP_SubGetVStart(void);






void MDrv_MVOP_SubSetPattern(MVOP_Pattern enMVOPPattern);






MS_BOOL MDrv_MVOP_SubSetTileFormat(MVOP_TileFormat eTileFmt);






MS_BOOL MDrv_MVOP_SubSetMMIOMapBase(void);






void MDrv_MVOP_SubInit(void);






void MDrv_MVOP_SubExit(void);






void MDrv_MVOP_SubEnable(MS_BOOL bEnable);






MVOP_Result MDrv_MVOP_SubGetIsEnable (MS_BOOL* pbEnable);






void MDrv_MVOP_SubEnableUVShift(MS_BOOL bEnable);






void MDrv_MVOP_SubEnableBlackBG(void);






void MDrv_MVOP_SubSetMonoMode(MS_BOOL bEnable);
# 1143 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_SubSetInputCfg (MVOP_InputSel in, MVOP_InputCfg* pCfg);
# 1156 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_SubSetOutputCfg(MVOP_VidStat *pstVideoStatus, MS_BOOL bEnHDup);
# 1168 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_SubGetOutputTiming(MVOP_Timing* pMVOPTiming);






MS_U16 MDrv_MVOP_SubGetHSize(void);






MS_U16 MDrv_MVOP_SubGetVSize(void);






MS_BOOL MDrv_MVOP_SubGetIsInterlace(void);






MS_BOOL MDrv_MVOP_SubGetIsHDuplicate(void);
# 1205 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_BOOL MDrv_MVOP_SubCheckCapability(MS_U16 u16HSize, MS_U16 u16VSize, MS_U16 u16Fps);
# 1214 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_U16 MDrv_MVOP_SubGetMaxHOffset(MS_U16 u16HSize, MS_U16 u16VSize, MS_U16 u16Fps);
# 1223 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_U16 MDrv_MVOP_SubGetMaxVOffset(MS_U16 u16HSize, MS_U16 u16VSize, MS_U16 u16Fps);







MS_BOOL MDrv_MVOP_SubGetDstInfo(MVOP_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);






MS_BOOL MDrv_MVOP_SubSetFixVtt(MS_U16 u16FixVtt);
# 1250 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_SubMiuSwitch(MS_U8 u8Miu);







void MDrv_MVOP_SubSetVOPMirrorMode(MS_BOOL bEnable, MVOP_DrvMirror eMirrorMode);






MS_BOOL MDrv_MVOP_SubEnableFreerunMode(MS_BOOL bEnable);
# 1275 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_BOOL MDrv_MVOP_SubSetBaseAdd(MS_PHY u32YOffset, MS_PHY u32UVOffset, MS_BOOL bProgressive, MS_BOOL b422pack);







void MDrv_MVOP_SubGetBaseAdd(MS_PHY* u32YOffset, MS_PHY* u32UVOffset);
# 1297 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_Init(MVOP_DevID eID, MS_U32 u32InitParam);
# 1309 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_Exit(MVOP_DevID eID, MS_U32 u32ExitParam);
# 1322 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_Enable(MVOP_DevID eID, MS_BOOL bEnable);
# 1336 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_SetInputCfg (MVOP_DevID eID, MVOP_InputSel in, MVOP_InputCfg* pCfg);
# 1350 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_SetOutputCfg(MVOP_DevID eID, MVOP_VidStat *pstVideoStatus, MS_BOOL bEnHDup);
# 1364 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_SetPattern(MVOP_DevID eID, MVOP_Pattern enMVOPPattern);
# 1377 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_SetTileFormat(MVOP_DevID eID, MVOP_TileFormat eTileFmt);
# 1390 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_EnableUVShift(MVOP_DevID eID, MS_BOOL bEnable);







MVOP_Result MDrv_MVOP_EX_EnableBlackBG(MVOP_DevID eID);
# 1411 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_SetMonoMode(MVOP_DevID eID, MS_BOOL bEnable);
# 1424 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_SetFixVtt(MVOP_DevID eID, MS_U16 u16FixVtt);
# 1437 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_MiuSwitch(MVOP_DevID eID, MS_U8 u8Miu);
# 1451 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_SetVOPMirrorMode(MVOP_DevID eID, MS_BOOL bEnable, MVOP_DrvMirror eMirrorMode);
# 1464 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_EnableFreerunMode(MVOP_DevID eID, MS_BOOL bEnable);
# 1478 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_EX_GetOutputTiming(MVOP_DevID eID, MVOP_Timing* pMVOPTiming);







MVOP_Result MDrv_MVOP_EX_GetIsEnable (MVOP_DevID eID, MS_BOOL* pbEnable);







MS_U16 MDrv_MVOP_EX_GetHStart(MVOP_DevID eID);







MS_U16 MDrv_MVOP_EX_GetVStart(MVOP_DevID eID);







MS_U16 MDrv_MVOP_EX_GetHSize(MVOP_DevID eID);







MS_U16 MDrv_MVOP_EX_GetVSize(MVOP_DevID eID);







MS_BOOL MDrv_MVOP_EX_GetIsInterlace(MVOP_DevID eID);







MS_BOOL MDrv_MVOP_EX_GetIsHDuplicate(MVOP_DevID eID);







MS_BOOL MDrv_MVOP_EX_GetStatus(MVOP_DevID eID, MVOP_DrvStatus *pMVOPStat);
#if defined (__aarch64__)
MS_BOOL MDrv_MVOP_EX_CheckCapability(MVOP_DevID eID, MS_U64 u32InParam);
#else
# 1555 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MS_BOOL MDrv_MVOP_EX_CheckCapability(MVOP_DevID eID, MS_U32 u32InParam);
#endif
MS_BOOL MDrv_MVOP_EX_GetDstInfo(MVOP_DevID eID, MVOP_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);







MVOP_Result MDrv_MVOP_SendBlueScreen(MS_U16 u16Width, MS_U16 u16Height);
# 1574 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_SetCommand(MVOP_Handle* stHd, MVOP_Command eCmd, void* pPara);
# 1589 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVOP.h"
MVOP_Result MDrv_MVOP_GetCommand(MVOP_Handle* stHd, MVOP_Command eCmd, void* pPara, MS_U32 u32ParaSize);






void MDrv_MVOP_SetFrequency(MVOP_FREQUENCY eFreq);






MS_U32 MDrv_MVOP_SetPowerState(EN_POWER_MODE u16PowerState);
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
#ifndef _API_XC_EX_H_
#define _API_XC_EX_H_ 

#include "MsCommon.h"
#include "MsDevice.h"

#include "drvXC_IOPort.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 123 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
#ifdef MSOS_TYPE_LINUX_KERNEL
#define SYMBOL_WEAK 
#else
#define SYMBOL_WEAK __attribute__((weak))
#endif

#define MSIF_XC_EX_LIB_CODE {'X','C','E','X'}
#define MSIF_XC_EX_LIBVER {'0','9'}
#define MSIF_XC_EX_BUILDNUM {'0','8'}
#define MSIF_XC_EX_CHANGELIST {'0','0','7','0','9','8','0','1'}
#define XC_EX_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_XC_EX_LIB_CODE , \
    MSIF_XC_EX_LIBVER , \
    MSIF_XC_EX_BUILDNUM , \
    MSIF_XC_EX_CHANGELIST, \
    MSIF_OS

#define XC_EX_INITDATA_VERSION 1
#define XC_EX_OUTPUT_TIMING_ADJUST_VERSION 1

#define XC_EX_PANEL_INFO_EX_VERSION 2

#define XC_EX_HW2DTO3DPARA_VERSION 2

#define XC_EX_DETECT3DFORMATPARA_VERSION 1



#define XC_EX_APISTATUS_EX_VERSION 5



#define XC_EX_3D_FPINFOPARA_VERSION 1

#define XC_EX_REPORT_PIXELINFO_VERSION 1


#define XC_EX_ODSC_DISPINFO_VERSIN 1

#define _XC_EX_BIT(_bit_) (1 << (_bit_))






typedef enum
{
    E_XC_EX_RET_FAIL = 0,
    E_XC_EX_RET_OK,
    E_XC_EX_RET_FAIL_FUN_NOT_SUPPORT,
    E_XC_EX_RET_FAIL_ENUM_NOT_SUPPORT,
    E_XC_EX_RET_FAIL_INVALID_PARAMETER,
} XC_EX_RETURN_VALUE;




#define XC_EX_DBGLEVEL_OFF (0x0000)
#define XC_EX_DBGLEVEL_SETWINDOW (0x0001)
#define XC_EX_DBGLEVEL_SETTIMING (0x0002)
#define XC_EX_DBGLEVEL_SYNCDETECT (0x0004)
#define XC_EX_DBGLEVEL_MUX (0x0008)
#define XC_EX_DBGLEVEL_MODEPARSE (0x0010)
#define XC_EX_DBGLEVEL_HDMIMONITOR (0x0020)
#define XC_EX_DBGLEVEL_AUTOGEOMETRY (0x0040)
#define XC_EX_DGBLEVEL_CROPCALC (0x0080)

#define XC_EX_DBGLEVEL_SETTIMING_ISR (0x0100)
#define XC_EX_DBGLEVEL_DWIN_SETWINDOW (0x0200)
#define XC_EX_DBGLEVEL_FUNCTION_TRACE (0x0400)
#define XC_EX_DBGLEVEL_PARAMETER_TRACE (0x0800)





#define XC_EX_MD_VSYNC_POR_BIT _XC_EX_BIT(0)
#define XC_EX_MD_HSYNC_POR_BIT _XC_EX_BIT(1)
#define XC_EX_MD_HSYNC_LOSS_BIT _XC_EX_BIT(2)
#define XC_EX_MD_VSYNC_LOSS_BIT _XC_EX_BIT(3)
#define XC_EX_MD_INTERLACE_BIT _XC_EX_BIT(4)
#define XC_EX_MD_USER_MODE_BIT _XC_EX_BIT(7)
#define XC_EX_MD_SYNC_LOSS (XC_EX_MD_HSYNC_LOSS_BIT | XC_EX_MD_VSYNC_LOSS_BIT)




#define XC_EX_DOUBLEHD_PRESCALE_VONEHDSIZE (540)

#define XC_EX_DOUBLEHD_1080X2I_FRAME_VSIZE (1080)
#define XC_EX_DOUBLEHD_1080X2I_FIELD_VSIZE (540)
#define XC_EX_DOUBLEHD_1080X2I_HSIZE (1920)
#define XC_EX_DOUBLEHD_1080X2I_VACT_SPACE1 (23)
#define XC_EX_DOUBLEHD_1080X2I_VACT_SPACE2 (22)
#define XC_EX_DOUBLEHD_1080X2I_VSIZE (XC_EX_DOUBLEHD_1080X2I_FRAME_VSIZE*2+XC_EX_DOUBLEHD_1080X2I_VACT_SPACE1*2+XC_EX_DOUBLEHD_1080X2I_VACT_SPACE2)

#define XC_EX_DOUBLEHD_1080X2P_VSIZE (2205)
#define XC_EX_DOUBLEHD_1080X2P_FRAME_VSIZE (1080)
#define XC_EX_DOUBLEHD_1080X2P_HSIZE (1920)
#define XC_EX_DOUBLEHD_1080X2P_GARBAGE_VSIZE (45)

#define XC_EX_DOUBLEHD_720X2P_VSIZE (1470)
#define XC_EX_DOUBLEHD_720X2P_FRAME_VSIZE (720)
#define XC_EX_DOUBLEHD_720X2P_HSIZE (1280)
#define XC_EX_DOUBLEHD_720X2P_GARBAGE_VSIZE (30)

#define XC_EX_DOUBLEHD_576X2P_VSIZE (1201)
#define XC_EX_DOUBLEHD_576X2P_FRAME_VSIZE (576)
#define XC_EX_DOUBLEHD_576X2P_HSIZE (720)
#define XC_EX_DOUBLEHD_576X2P_GARBAGE_VSIZE (49)

#define XC_EX_DOUBLEHD_576X2I_FRAME_VSIZE (576)
#define XC_EX_DOUBLEHD_576X2I_FIELD_VSIZE (288)
#define XC_EX_DOUBLEHD_576X2I_HSIZE (720)
#define XC_EX_DOUBLEHD_576X2I_VACT_SPACE1 (21)
#define XC_EX_DOUBLEHD_576X2I_VACT_SPACE2 (22)
#define XC_EX_DOUBLEHD_576X2I_VSIZE (XC_EX_DOUBLEHD_576X2I_FRAME_VSIZE*2+XC_EX_DOUBLEHD_576X2I_VACT_SPACE1*2+XC_EX_DOUBLEHD_576X2I_VACT_SPACE2)

#define XC_EX_DOUBLEHD_480X2P_VSIZE (1005)
#define XC_EX_DOUBLEHD_480X2P_FRAME_VSIZE (480)
#define XC_EX_DOUBLEHD_480X2P_HSIZE (720)
#define XC_EX_DOUBLEHD_480X2P_GARBAGE_VSIZE (45)

#define XC_EX_DOUBLEHD_480X2I_FRAME_VSIZE (480)
#define XC_EX_DOUBLEHD_480X2I_FIELD_VSIZE (240)
#define XC_EX_DOUBLEHD_480X2I_HSIZE (720)
#define XC_EX_DOUBLEHD_480X2I_VACT_SPACE1 (23)
#define XC_EX_DOUBLEHD_480X2I_VACT_SPACE2 (22)
#define XC_EX_DOUBLEHD_480X2I_VSIZE (XC_EX_DOUBLEHD_480X2I_FRAME_VSIZE*2+XC_EX_DOUBLEHD_480X2I_VACT_SPACE1*2+XC_EX_DOUBLEHD_480X2I_VACT_SPACE2)


#define XC_EX_FIELD_INTERLEAVE_1080X2I_FRAME_VSIZE (1080)
#define XC_EX_FIELD_INTERLEAVE_1080X2I_FIELD_VISZE (540)
#define XC_EX_FIELD_INTERLEAVE_1080X2I_HISZE (1920)
#define XC_EX_FIELD_INTERLEAVE_1080X2I_VACT_SPACE (23)
#define XC_EX_FIELD_INTERLEAVE_1080X2I_VISZE (XC_EX_FIELD_INTERLEAVE_1080X2I_FRAME_VSIZE+XC_EX_FIELD_INTERLEAVE_1080X2I_VACT_SPACE)



#define XC_EX_PANEL_INFO_EX_INVALID_ALL 0xFFFF
# 279 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
typedef enum
{
    E_XC_EX_MAIN_WINDOW=0,
    E_XC_EX_SUB_WINDOW=1,
    E_XC_EX_MAX_WINDOW
} XC_EX_SCALER_WIN;

#define XC_EX_PIP_WINDOWS E_XC_EX_MAX_WINDOW


typedef struct __attribute__((packed))
{
    MS_U16 x;
    MS_U16 y;
    MS_U16 width;
    MS_U16 height;
} XC_EX_WINDOW_TYPE;
# 304 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
typedef enum
{
    E_XC_EX_INPUT_SOURCE_VGA,
    E_XC_EX_INPUT_SOURCE_TV,

    E_XC_EX_INPUT_SOURCE_CVBS,
    E_XC_EX_INPUT_SOURCE_CVBS2,
    E_XC_EX_INPUT_SOURCE_CVBS3,
    E_XC_EX_INPUT_SOURCE_CVBS4,
    E_XC_EX_INPUT_SOURCE_CVBS5,
    E_XC_EX_INPUT_SOURCE_CVBS6,
    E_XC_EX_INPUT_SOURCE_CVBS7,
    E_XC_EX_INPUT_SOURCE_CVBS8,
    E_XC_EX_INPUT_SOURCE_CVBS_MAX,

    E_XC_EX_INPUT_SOURCE_SVIDEO,
    E_XC_EX_INPUT_SOURCE_SVIDEO2,
    E_XC_EX_INPUT_SOURCE_SVIDEO3,
    E_XC_EX_INPUT_SOURCE_SVIDEO4,
    E_XC_EX_INPUT_SOURCE_SVIDEO_MAX,

    E_XC_EX_INPUT_SOURCE_YPBPR,
    E_XC_EX_INPUT_SOURCE_YPBPR2,
    E_XC_EX_INPUT_SOURCE_YPBPR3,
    E_XC_EX_INPUT_SOURCE_YPBPR_MAX,

    E_XC_EX_INPUT_SOURCE_SCART,
    E_XC_EX_INPUT_SOURCE_SCART2,
    E_XC_EX_INPUT_SOURCE_SCART_MAX,

    E_XC_EX_INPUT_SOURCE_HDMI,
    E_XC_EX_INPUT_SOURCE_HDMI2,
    E_XC_EX_INPUT_SOURCE_HDMI3,
    E_XC_EX_INPUT_SOURCE_HDMI4,
    E_XC_EX_INPUT_SOURCE_HDMI_MAX,

    E_XC_EX_INPUT_SOURCE_DTV,

    E_XC_EX_INPUT_SOURCE_DVI,
    E_XC_EX_INPUT_SOURCE_DVI2,
    E_XC_EX_INPUT_SOURCE_DVI3,
    E_XC_EX_INPUT_SOURCE_DVI4,
    E_XC_EX_INPUT_SOURCE_DVI_MAX,


    E_XC_EX_INPUT_SOURCE_STORAGE,
    E_XC_EX_INPUT_SOURCE_KTV,
    E_XC_EX_INPUT_SOURCE_JPEG,


    E_XC_EX_INPUT_SOURCE_DTV2,
    E_XC_EX_INPUT_SOURCE_STORAGE2,


    E_XC_EX_INPUT_SOURCE_DTV3,


    E_XC_EX_INPUT_SOURCE_SCALER_OP,

    E_XC_EX_INPUT_SOURCE_VGA2,
    E_XC_EX_INPUT_SOURCE_VGA3,

    E_XC_EX_INPUT_SOURCE_NUM,
    E_XC_EX_INPUT_SOURCE_NONE = E_XC_EX_INPUT_SOURCE_NUM,
} XC_EX_INPUT_SOURCE_TYPE;

#define XC_EX_IsSrcTypeAV(x) (((x)>=E_XC_EX_INPUT_SOURCE_CVBS)&&((x)<=E_XC_EX_INPUT_SOURCE_CVBS_MAX))
#define XC_EX_IsSrcTypeSV(x) (((x)>=E_XC_EX_INPUT_SOURCE_SVIDEO)&&((x)<=E_XC_EX_INPUT_SOURCE_SVIDEO_MAX))
#define XC_EX_IsSrcTypeATV(x) ((x)==E_XC_EX_INPUT_SOURCE_TV)
#define XC_EX_IsSrcTypeScart(x) (((x)>=E_XC_EX_INPUT_SOURCE_SCART)&&((x)<=E_XC_EX_INPUT_SOURCE_SCART_MAX))
#define XC_EX_IsSrcTypeHDMI(x) (((x)>=E_XC_EX_INPUT_SOURCE_HDMI)&&((x)<=E_XC_EX_INPUT_SOURCE_HDMI_MAX))
#define XC_EX_IsSrcTypeVga(x) ((x)==E_XC_EX_INPUT_SOURCE_VGA)
#define XC_EX_IsSrcTypeYPbPr(x) (((x)>=E_XC_EX_INPUT_SOURCE_YPBPR)&&((x)<=E_XC_EX_INPUT_SOURCE_YPBPR_MAX))
#define XC_EX_IsSrcTypeDTV(x) (((x)==E_XC_EX_INPUT_SOURCE_DTV) || ((x)==E_XC_EX_INPUT_SOURCE_DTV2) || ((x)==E_XC_EX_INPUT_SOURCE_DTV3))
#define XC_EX_IsSrcTypeDVI(x) (((x)>=E_XC_EX_INPUT_SOURCE_DVI)&&((x)<=E_XC_EX_INPUT_SOURCE_DVI_MAX))
#define XC_EX_IsSrcTypeJpeg(x) ((x)==E_XC_EX_INPUT_SOURCE_JPEG)
#define XC_EX_IsSrcTypeStorage(x) (((x)==E_XC_EX_INPUT_SOURCE_STORAGE) || ((x)==E_XC_EX_INPUT_SOURCE_STORAGE2) || XC_EX_IsSrcTypeJpeg(x))
#define XC_EX_IsSrcTypeDigitalVD(x) ( XC_EX_IsSrcTypeAV(x)||XC_EX_IsSrcTypeSV(x)||XC_EX_IsSrcTypeATV(x)||XC_EX_IsSrcTypeScart(x))
#define XC_EX_IsSrcTypeAnalog(x) ( XC_EX_IsSrcTypeVga(x)|| XC_EX_IsSrcTypeYPbPr(x))
#define XC_EX_IsSrcTypeVideo(x) ( XC_EX_IsSrcTypeYPbPr(x) || XC_EX_IsSrcTypeATV(x) || XC_EX_IsSrcTypeAV(x) || XC_EX_IsSrcTypeSV(x) || XC_EX_IsSrcTypeScart(x) || XC_EX_IsSrcTypeDTV(x) )
#define XC_EX_IsSrcTypeCapture(x) ((x)==E_XC_EX_INPUT_SOURCE_SCALER_OP)
# 393 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
typedef struct
{
    MS_U32 u32Version;
    MS_U32 u32Id;
} XC_DEVICE_ID;


typedef enum
{
    E_XC_EX_DEVICE0,
    E_XC_EX_DEVICE1,
    E_XC_EX_DEVICE_MAX,
} XC_EX_DEVICE_NUM;


typedef enum
{
    E_XC_EX_OUTPUT_NONE = 0,
    E_XC_EX_OUTPUT_SCALER_MAIN_WINDOW,
    E_XC_EX_OUTPUT_SCALER_SUB_WINDOW = 10,

    E_XC_EX_OUTPUT_CVBS1 = 20,
    E_XC_EX_OUTPUT_CVBS2,


    E_XC_EX_OUTPUT_YPBPR0 = 40,
    E_XC_EX_OUTPUT_YPBPR1,


    E_XC_EX_OUTPUT_HDMI1 = 60,
    E_XC_EX_OUTPUT_HDMI2,

    E_XC_EX_OUTPUT_OFFLINE_DETECT = 80,

    E_XC_EX_OUTPUT_SCALER_DWIN = 100,

    E_XC_EX_OUTPUT_NUM,
}XC_EX_DEST_TYPE;



typedef enum
{

    E_XC_EX_DEINT_OFF=0,
    E_XC_EX_DEINT_2DDI_BOB,
    E_XC_EX_DEINT_2DDI_AVG,
    E_XC_EX_DEINT_3DDI_HISTORY,
    E_XC_EX_DEINT_3DDI,
} XC_EX_DEINTERLACE_MODE;



typedef struct DLL_PACKED
{
    MS_U8 u8SyncStatus;
    MS_U16 u16Hperiod;
    MS_U16 u16Vtotal;
} XC_EX_IP_SYNC_STATUS;


typedef enum
{
    E_XC_EX_FREE_RUN_COLOR_BLACK,
    E_XC_EX_FREE_RUN_COLOR_WHITE,
    E_XC_EX_FREE_RUN_COLOR_BLUE,
    E_XC_EX_FREE_RUN_COLOR_RED,
    E_XC_EX_FREE_RUN_COLOR_GREEN,
    E_XC_EX_FREE_RUN_COLOR_MAX,
} XC_EX_FREERUN_COLOR;


typedef enum
{
    E_XC_EX_PNL_CHG_DCLK = 0,
    E_XC_EX_PNL_CHG_HTOTAL = 1,
    E_XC_EX_PNL_CHG_VTOTAL = 2,
} XC_EX_PNL_OUT_TIMING_MODE;

typedef enum
{
    E_XC_EX_PNL_LPLL_TTL,
    E_XC_EX_PNL_LPLL_LVDS,
    E_XC_EX_PNL_LPLL_RSDS,
    E_XC_EX_PNL_LPLL_MINILVDS,
    E_XC_EX_PNL_LPLL_ANALOG_MINILVDS,
    E_XC_EX_PNL_LPLL_DIGITAL_MINILVDS,
    E_XC_EX_PNL_LPLL_MFC,
    E_XC_EX_PNL_LPLL_DAC_I,
    E_XC_EX_PNL_LPLL_DAC_P,
    E_XC_EX_PNL_LPLL_PDPLVDS,
    E_XC_EX_PNL_LPLL_EXT,
} XC_EX_PNL_LPLL_TYPE;


typedef enum
{

    E_XC_EX_PNL_LPLL_EPI34_8P = E_XC_EX_PNL_LPLL_EXT,
    E_XC_EX_PNL_LPLL_EPI28_8P,
    E_XC_EX_PNL_LPLL_EPI34_6P,
    E_XC_EX_PNL_LPLL_EPI28_6P,


    E_XC_EX_PNL_LPLL_MINILVDS_5P_2L,
    E_XC_EX_PNL_LPLL_MINILVDS_4P_2L,
    E_XC_EX_PNL_LPLL_MINILVDS_3P_2L,
    E_XC_EX_PNL_LPLL_MINILVDS_6P_1L,
    E_XC_EX_PNL_LPLL_MINILVDS_5P_1L,
    E_XC_EX_PNL_LPLL_MINILVDS_4P_1L,
    E_XC_EX_PNL_LPLL_MINILVDS_3P_1L,

    E_XC_EX_PNL_LPLL_HS_LVDS,
    E_XC_EX_PNL_LPLL_HF_LVDS,

    E_XC_EX_PNL_LPLL_TTL_TCON,
    E_XC_EX_PNL_LPLL_MINILVDS_2CH_3P_8BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_2CH_4P_8BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_2CH_5P_8BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_2CH_6P_8BIT,

    E_XC_EX_PNL_LPLL_MINILVDS_1CH_3P_8BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_1CH_4P_8BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_1CH_5P_8BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_1CH_6P_8BIT,

    E_XC_EX_PNL_LPLL_MINILVDS_2CH_3P_6BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_2CH_4P_6BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_2CH_5P_6BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_2CH_6P_6BIT,

    E_XC_EX_PNL_LPLL_MINILVDS_1CH_3P_6BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_1CH_4P_6BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_1CH_5P_6BIT,
    E_XC_EX_PNL_LPLL_MINILVDS_1CH_6P_6BIT,

} XC_EX_PNL_LPLL_EXT_TYPE;

typedef enum
{
    E_XC_EX_MOD_OUTPUT_SINGLE = 0,
    E_XC_EX_MOD_OUTPUT_DUAL = 1,

    E_XC_EX_MOD_OUTPUT_QUAD = 2,

} XC_EX_OUTPUT_MODE;

typedef enum
{
    E_XC_EX_VFREQ_50HZ = 0x00,
    E_XC_EX_VFREQ_60HZ = 0x01,
    E_XC_EX_VFREQ_FROM_SRC = 0x02,
    E_XC_EX_VFREQ_FROM_PANEL = 0x03,
} XC_EX_VFREQ_SEL;


typedef enum
{
    E_XC_EX_NONE =0x00,
    E_XC_EX_IP = 0x01,
    E_XC_EX_VOP2 = 0x02,
    E_XC_EX_BRI = 0x04,


    E_XC_EX_OP2 = 0x08,
    E_XC_EX_GAM = 0x10,
    E_XC_EX_DITHER = 0x20,


    E_XC_EX_OVERLAP = 0x40,
    E_XC_EX_IP_SUB = 0x80,
} XC_EX_SOURCE_TO_VE;


typedef enum
{
    E_XC_EX_SCARTID_NONE = 0x00,
    E_XC_EX_SCARTID_TO_HSYNC0 = 0x01,
    E_XC_EX_SCARTID_TO_HSYNC1 = 0x02,
    E_XC_EX_SCARTID_TO_HSYNC2 = 0x04,
    E_XC_EX_SCARTID_TO_SOG0 = 0x08,
    E_XC_EX_SCARTID_TO_SOG1 = 0x10,
    E_XC_EX_SCARTID_TO_SOG2 = 0x20,
} XC_EX_SCART_ID_PORT;


typedef enum
{
    E_XC_EX_SUPPORT_IMMESWITCH = 0x00000001,

    E_XC_EX_SUPPORT_DVI_AUTO_EQ = 0x00000005,

    E_XC_EX_SUPPORT_FRC_INSIDE = 0x00000100,

} XC_EX_CAPABILITY;

typedef enum
{
    E_XC_EX_IMMESWITCH = 0x00000001,

    E_XC_EX_DVI_AUTO_EQ = 0x00000002,

    E_XC_EX_FRC_INSIDE = 0x00000004,

    E_XC_EX_DIP_CHIP_CAPS = 0x00000008,

    E_XC_EX_3D_FBL_CAPS = 0x00000010,

    E_XC_EX_HW_SEAMLESS_ZAPPING = 0x00000020,

    E_XC_EX_SUPPORT_DEVICE1 = 0x00000040,

    E_XC_EX_SUPPORT_DETECT3D_IN3DMODE = 0x00000080,

    E_XC_EX_2DTO3D_VERSION = 0x00000100,

    E_XC_EX_SUPPORT_FORCE_VSP_IN_DS_MODE = 0x00000200,

    E_XC_EX_SUPPORT_FRCM_MODE = 0x00000400,

    E_XC_EX_SUPPORT_INTERLACE_OUT = 0x00000800,

    E_XC_EX_SUPPORT_4K2K_WITH_PIP = 0x00001000,

    E_XC_EX_SUPPORT_4K2K_60P = 0x00002000,

} XC_EX_CAPS;

typedef enum
{
    E_XC_EX_DS_INDEX_MVOP,
    E_XC_EX_DS_INDEX_SCALER,
    E_XC_EX_DS_INDEX_MAX,
} XC_EX_DS_INDEX_SOURCE;


typedef struct __attribute__((packed))
{


    MS_U16 u16HStart;

    MS_U16 u16VStart;

    MS_U16 u16Width;

    MS_U16 u16Height;

    MS_U16 u16HTotal;

    MS_U16 u16VTotal;

    MS_U16 u16DefaultVFreq;

    MS_U8 u8LPLL_Mode;
    XC_EX_PNL_OUT_TIMING_MODE enPnl_Out_Timing_Mode;


    MS_U16 u16DefaultHTotal;
    MS_U16 u16DefaultVTotal;

    MS_U32 u32MinSET;
    MS_U32 u32MaxSET;
    XC_EX_PNL_LPLL_TYPE eLPLL_Type;
} XC_EX_PANEL_INFO;
# 679 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
typedef struct __attribute__((packed))
{
    MS_U32 u32PanelInfoEx_Version;
    MS_U16 u16PanelInfoEX_Length;
    MS_U16 u16VFreq;


    MS_U16 u16HTotal;
    MS_BOOL bHTotalValid;
    MS_U16 u16VTotal;
    MS_BOOL bVTotalValid;
    MS_U32 u32DClk;
    MS_BOOL bDClkValid;
    MS_U16 u16MinHTotal;
    MS_BOOL bMinHTotalValid;
    MS_U16 u16MinVTotal;
    MS_BOOL bMinVTotalValid;
    MS_U32 u32MinDClk;
    MS_BOOL bMinDClkValid;
    MS_U16 u16MaxHTotal;
    MS_BOOL bMaxHTotalValid;
    MS_U16 u16MaxVTotal;
    MS_BOOL bMaxVTotalValid;
    MS_U32 u32MaxDClk;
    MS_BOOL bMaxDClkValid;

    MS_U16 u16HSyncWidth;
    MS_BOOL bHSyncWidthValid;
    MS_U16 u16HSyncBackPorch;



    MS_BOOL bHSyncBackPorchValid;
    MS_U16 u16VSyncWidth;
    MS_BOOL bVSyncWidthValid;
    MS_U16 u16VSyncBackPorch;
    MS_BOOL bVSyncBackPorchValid;

    MS_U16 u16HttSteps;
    MS_BOOL bHttStepsValid;
    MS_U16 u16HttDelay;
    MS_BOOL bHttDelayValid;
    MS_U16 u16VttSteps;
    MS_BOOL bVttStepsValid;
    MS_U16 u16VttDelay;
    MS_BOOL bVttDelayValid;
    MS_U16 u16DclkSteps;
    MS_BOOL bDclkStepsValid;
    MS_U16 u16DclkDelay;
    MS_BOOL bDclkDelayValid;
}XC_EX_PANEL_INFO_EX;


typedef struct DLL_PACKED
{
    MS_U32 u32TimingAdjustSetting_version;

    MS_U16 u16HTotal_Step;
    MS_U16 u16HTotal_Delay;
    MS_U16 u16HTotal_Ratio;

    MS_U16 u16VTotal_Step;
    MS_U16 u16VTotal_Delay;
    MS_U16 u16VTotal_Ratio;

    MS_U16 u16Dclk_Step;
    MS_U16 u16Dclk_Delay;
    MS_U16 u16Dclk_Ratio;

} XC_EX_OUTPUT_TIMING_ADJUST_SETTING;


typedef struct __attribute__((packed))
{
    MS_U32 u32XC_version;

    MS_U32 u32XTAL_Clock;


    MS_PHY u32Main_FB_Start_Addr;
    MS_PHY u32Main_FB_Size;
    MS_PHY u32Sub_FB_Start_Addr;
    MS_PHY u32Sub_FB_Size;


    MS_BOOL bCEC_Use_Interrupt;


    MS_BOOL bIsShareGround;


    MS_BOOL bEnableIPAutoCoast;

    MS_BOOL bMirror;


    XC_EX_PANEL_INFO stPanelInfo;


    MS_BOOL bDLC_Histogram_From_VBlank;


    MS_U16 eScartIDPort_Sel;


    MS_PHY u32Main_FRCM_FB_Start_Addr;
    MS_PHY u32Main_FRCM_FB_Size;
    MS_PHY u32Sub_FRCM_FB_Start_Addr;
    MS_PHY u32Sub_FRCM_FB_Size;
} XC_EX_INITDATA;


typedef struct __attribute__((packed))
{
    MS_U8 u8MaxWindowNum;
    MS_U8 u8NumOfDigitalDDCRam;
    MS_U8 u8MaxFrameNumInMem;
    MS_U8 u8MaxFieldNumInMem;
} XC_EX_ApiInfo;


typedef struct DLL_PACKED
{



    XC_EX_INPUT_SOURCE_TYPE enInputSourceType;




    XC_EX_WINDOW_TYPE stCapWin;
    XC_EX_WINDOW_TYPE stDispWin;
    XC_EX_WINDOW_TYPE stCropWin;




    MS_BOOL bInterlace;
    MS_BOOL bHDuplicate;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_U16 u16DefaultHtotal;
    MS_U8 u8DefaultPhase;




    MS_BOOL bHCusScaling;
    MS_U16 u16HCusScalingSrc;
    MS_U16 u16HCusScalingDst;
    MS_BOOL bVCusScaling;
    MS_U16 u16VCusScalingSrc;
    MS_U16 u16VCusScalingDst;




    MS_BOOL bDisplayNineLattice;




    MS_BOOL bPreHCusScaling;
    MS_U16 u16PreHCusScalingSrc;
    MS_U16 u16PreHCusScalingDst;
    MS_BOOL bPreVCusScaling;
    MS_U16 u16PreVCusScalingSrc;
    MS_U16 u16PreVCusScalingDst;
    MS_U16 u16DefaultPhase;
} XC_EX_SETWIN_INFO;
# 866 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
typedef struct DLL_PACKED
{
    MS_PHY u32DS_Info_BaseAddr;
    MS_U8 u8MIU_Select;
    MS_U8 u8DS_Index_Depth;
    MS_BOOL bOP_DS_On;
    MS_BOOL bIPS_DS_On;
    MS_BOOL bIPM_DS_On;
} XC_EX_DynamicScaling_Info;


typedef struct
{
    MS_U16 u16MinDstWidth;
    MS_U16 u16MinDstHeight;
    MS_BOOL bEna;
} XC_EX_PreScalingLimit_Info;


typedef enum
{
    E_XC_DIP_EX_SOURCE_TYPE_SUB2 = 0,
    E_XC_DIP_EX_SOURCE_TYPE_MAIN = 1,
    E_XC_DIP_EX_SOURCE_TYPE_SUB = 2,
    E_XC_DIP_EX_SOURCE_TYPE_OP_MAIN = 3,
    E_XC_DIP_EX_SOURCE_TYPE_OP_SUB = 4,
    E_XC_DIP_EX_SOURCE_TYPE_DRAM = 5,
    E_XC_DIP_EX_SOURCE_TYPE_OP_CAPTURE = 6,
    E_XC_DIP_EX_SOURCE_TYPE_OP_SC1_CAPTURE = 7,
    E_XC_DIP_EX_SOURCE_TYPE_SC2_OP_CAPTURE = 8,
    E_XC_DIP_EX_SOURCE_TYPE_OSD = 9,
    E_XC_DIP_EX_SOURCE_TYPE_MVOP0 =10,
    E_XC_DIP_EX_SOURCE_TYPE_MVOP1 =11,
    E_XC_DIP_EX_MAX_SOURCE_NUM
} XC_DIP_EX_SOURCE_TYPE;


typedef enum
{
    E_XC_EX_PATH_TYPE_SYNCHRONOUS,
    E_XC_EX_PATH_TYPE_ASYNCHRONOUS,
} XC_EX_PATH_TYPE;


typedef struct DLL_PACKED
{
    XC_EX_PATH_TYPE Path_Type;
    XC_EX_INPUT_SOURCE_TYPE src;
    XC_EX_DEST_TYPE dest;

    void (* path_thread)(XC_EX_INPUT_SOURCE_TYPE src, MS_BOOL bRealTimeMonitorOnly);
    void (* SyncEventHandler )(XC_EX_INPUT_SOURCE_TYPE src, void* para);
    void (* DestOnOff_Event_Handler )(XC_EX_INPUT_SOURCE_TYPE src, void* para);
    void (* dest_periodic_handler )(XC_EX_INPUT_SOURCE_TYPE src, MS_BOOL bRealTimeMonitorOnly) ;
} XC_EX_MUX_PATH_INFO;


typedef enum
{
    E_XC_EX_IMAGE_STORE_444_24BIT,
    E_XC_EX_IMAGE_STORE_422_16BIT,
    E_XC_EX_IMAGE_STORE_422_24BIT,
} XC_EX_IMAGE_STORE_FMT;


typedef struct DLL_PACKED
{



    XC_EX_INPUT_SOURCE_TYPE enInputSourceType;




    XC_EX_WINDOW_TYPE stCapWin;
    XC_EX_WINDOW_TYPE stDispWin;
    XC_EX_WINDOW_TYPE stCropWin;




    MS_BOOL bInterlace;
    MS_BOOL bHDuplicate;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_U16 u16DefaultHtotal;
    MS_U8 u8DefaultPhase;




    MS_BOOL bHCusScaling;
    MS_U16 u16HCusScalingSrc;
    MS_U16 u16HCusScalingDst;
    MS_BOOL bVCusScaling;
    MS_U16 u16VCusScalingSrc;
    MS_U16 u16VCusScalingDst;




    MS_BOOL bDisplayNineLattice;






    MS_U16 u16H_SizeAfterPreScaling;
    MS_U16 u16V_SizeAfterPreScaling;
    MS_BOOL bPreV_ScalingDown;


    XC_EX_WINDOW_TYPE ScaledCropWin;


    MS_U32 u32Op2DclkSet;


    MS_BOOL bBlackscreenEnabled;
    MS_BOOL bBluescreenEnabled;
    MS_U16 u16VideoDark;

    MS_U16 u16V_Length;
    MS_U16 u16BytePerWord;
    MS_U16 u16OffsetPixelAlignment;
    MS_U8 u8BitPerPixel;
    XC_EX_DEINTERLACE_MODE eDeInterlaceMode;
    MS_U8 u8DelayLines;
    MS_BOOL bMemFmt422;
    XC_EX_IMAGE_STORE_FMT eMemory_FMT;
    MS_BOOL bForceNRoff;
    MS_BOOL bEn3DNR;
    MS_BOOL bUseYUVSpace;
    MS_BOOL bMemYUVFmt;
    MS_BOOL bForceRGBin;
    MS_BOOL bLinearMode;



    MS_BOOL bFBL;
    MS_BOOL bFastFrameLock;
    MS_BOOL bDoneFPLL;
    MS_BOOL bEnableFPLL;
    MS_BOOL bFPLL_LOCK;


#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32IPMBase0;
    MS_PHY u32IPMBase1;
    MS_PHY u32IPMBase2;
#else
    MS_U32 u32IPMBase0;
    MS_U32 u32IPMBase1;
    MS_U32 u32IPMBase2;
#endif
    MS_U16 u16IPMOffset;
    MS_U32 u16IPMFetch;
} XC_EX_ApiStatus;


typedef struct DLL_PACKED
{
    MS_U32 u32ApiStatusEx_Version;
    MS_U16 u16ApiStatusEX_Length;




    XC_EX_INPUT_SOURCE_TYPE enInputSourceType;




    XC_EX_WINDOW_TYPE stCapWin;
    XC_EX_WINDOW_TYPE stDispWin;
    XC_EX_WINDOW_TYPE stCropWin;




    MS_BOOL bInterlace;
    MS_BOOL bHDuplicate;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_U16 u16DefaultHtotal;
    MS_U8 u8DefaultPhase;




    MS_BOOL bHCusScaling;
    MS_U16 u16HCusScalingSrc;
    MS_U16 u16HCusScalingDst;
    MS_BOOL bVCusScaling;
    MS_U16 u16VCusScalingSrc;
    MS_U16 u16VCusScalingDst;




    MS_BOOL bDisplayNineLattice;






    MS_U16 u16H_SizeAfterPreScaling;
    MS_U16 u16V_SizeAfterPreScaling;
    MS_BOOL bPreV_ScalingDown;


    XC_EX_WINDOW_TYPE ScaledCropWin;


    MS_U32 u32Op2DclkSet;


    MS_BOOL bBlackscreenEnabled;
    MS_BOOL bBluescreenEnabled;
    MS_U16 u16VideoDark;

    MS_U16 u16V_Length;
    MS_U16 u16BytePerWord;
    MS_U16 u16OffsetPixelAlignment;
    MS_U8 u8BitPerPixel;
    XC_EX_DEINTERLACE_MODE eDeInterlaceMode;
    MS_U8 u8DelayLines;
    MS_BOOL bMemFmt422;
    XC_EX_IMAGE_STORE_FMT eMemory_FMT;
    MS_BOOL bForceNRoff;
    MS_BOOL bEn3DNR;
    MS_BOOL bUseYUVSpace;
    MS_BOOL bMemYUVFmt;
    MS_BOOL bForceRGBin;
    MS_BOOL bLinearMode;



    MS_BOOL bFBL;
    MS_BOOL bFastFrameLock;
    MS_BOOL bDoneFPLL;
    MS_BOOL bEnableFPLL;
    MS_BOOL bFPLL_LOCK;


#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32IPMBase0;
    MS_PHY u32IPMBase1;
    MS_PHY u32IPMBase2;
#else
    MS_U32 u32IPMBase0;
    MS_U32 u32IPMBase1;
    MS_U32 u32IPMBase2;
#endif
    MS_U16 u16IPMOffset;
    MS_U32 u16IPMFetch;




    MS_BOOL bPreHCusScaling;
    MS_U16 u16PreHCusScalingSrc;
    MS_U16 u16PreHCusScalingDst;
    MS_BOOL bPreVCusScaling;
    MS_U16 u16PreVCusScalingSrc;
    MS_U16 u16PreVCusScalingDst;

    MS_BOOL bPQSetHSD;

    MS_U16 u16DefaultPhase;
    MS_BOOL bIsHWDepthAdjSupported;
    MS_BOOL bIs2LineMode;
    MS_BOOL bIsPNLYUVOutput;

    MS_U8 u8HDMIPixelRepetition;

#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32FRCMBase0;
    MS_PHY u32FRCMBase1;
    MS_PHY u32FRCMBase2;
#else
    MS_U32 u32FRCMBase0;
    MS_U32 u32FRCMBase1;
    MS_U32 u32FRCMBase2;
#endif
}XC_EX_ApiStatusEx;


typedef struct DLL_PACKED
{
    MS_U32 u32HighAccurateInputVFreq;
    MS_U16 u16InputVFreq;
    MS_U16 u16InputVTotal;
    MS_BOOL bMVOPSrc;
    MS_BOOL bFastFrameLock;
    MS_BOOL bInterlace;
} XC_EX_SetTiming_Info;






typedef struct
{
    MS_U16 u16CH_AVG[3];
} XC_EX_AUTOADC_TYPE;


typedef enum
{
    E_XC_EX_AUTO_MIN_R ,
    E_XC_EX_AUTO_MIN_G ,
    E_XC_EX_AUTO_MIN_B ,
    E_XC_EX_AUTO_MAX_R ,
    E_XC_EX_AUTO_MAX_G ,
    E_XC_EX_AUTO_MAX_B ,
} XC_EX_AUTO_GAIN_TYPE;


typedef enum
{
    E_XC_EX_OFF,
    E_XC_EX_480P,
    E_XC_EX_576P,
    E_XC_EX_720P,
    E_XC_EX_1080P,
    E_XC_EX_480I,
    E_XC_EX_576I,
    E_XC_EX_720I,
    E_XC_EX_1080I,
} XC_EX_Internal_TimingType;





typedef enum
{
    E_XC_EX_REST_SCALER_ALL = _XC_EX_BIT(0),
    E_XC_EX_REST_IP_F1 = _XC_EX_BIT(1),
    E_XC_EX_REST_IP_F2 = _XC_EX_BIT(2),
    E_XC_EX_REST_OP = _XC_EX_BIT(3),
    E_XC_EX_REST_IP_ALL = _XC_EX_BIT(4),
    E_XC_EX_REST_CLK = (_XC_EX_BIT(6)|_XC_EX_BIT(3)),
} XC_EX_SOFTWARE_REST_TYPE_t;


typedef enum
{
    E_XC_EX_EURO_AUS_HDTV_NORMAL = 0,
    E_XC_EX_EURO_HDTV_DETECTED,
    E_XC_EX_AUSTRALIA_HDTV_DETECTED,
} XC_EX_DETECT_EURO_HDTV_STATUS_TYPE;





typedef struct
{
    MS_S16 s16X_Start;
    MS_S16 s16Y_Start;
    MS_S16 s16X_Size;
    MS_S16 s16Y_Size;

    MS_U8 *pRect;
    MS_U32 u32RectPitch;
    MS_U16 u16PointSize;
} XC_EX_RECT_INFO;


typedef struct
{
    MS_U8 R_Cr;
    MS_U8 G_Y;
    MS_U8 B_Cb;
} XC_EX_PIXEL_24BIT;


typedef struct
{
    MS_U32 B_Cb :10;
    MS_U32 G_Y :10;
    MS_U32 R_Cr :10;
    MS_U32 u8Dummy:2;
} XC_EX_PIXEL_32BIT;


typedef struct
{
    MS_U8 u8G_Y;
    MS_U8 u8BR_CbCr;
} XC_EX_PIXEL_422_8BIT;

typedef enum
{
    E_XC_EX_OUTPUTDATA_RGB10BITS = 0x00,
    E_XC_EX_OUTPUTDATA_RGB8BITS = 0x01,
    E_XC_EX_OUTPUTDATA_4228BITS = 0x03,

    E_XC_EX_OUTPUTDATA_FRC_RGB10BITS = 0x04,
    E_XC_EX_OUTPUTDATA_FRC_RGB8BITS = 0x05,
    E_XC_EX_OUTPUTDATA_FRC_4228BITS = 0x06,
} XC_EX_OUTPUTDATA_TYPE;

typedef enum
{
    E_XC_EX_INPUTDATA_RGB10BITS = 0x00,
    E_XC_EX_INPUTDATA_RGB8BITS = 0x01,
    E_XC_EX_INPUTDATA_4228BITS = 0x03,
} XC_EX_INPUTDATA_TYPE;



typedef struct
{
    MS_U16 u16X;
    MS_U16 u16Xsize;
    MS_U16 u16Y;
    MS_U16 u16Ysize;
} XC_EX_AUTO_CAL_WINDOW;

typedef struct
{
    XC_EX_IMAGE_STORE_FMT eStoreFmt;
    XC_EX_AUTO_CAL_WINDOW eCal_Win_Size;
    XC_EX_AUTOADC_TYPE pixelMax;
    XC_EX_AUTOADC_TYPE pixelMin;
    XC_EX_AUTOADC_TYPE pixelAverage;
} XC_EX_IMAGE_MEM_INFO;


typedef enum
{
    E_XC_EX_VOP_CHR = 0,
    E_XC_EX_VOP_CHG,
    E_XC_EX_VOP_CHB,
    E_XC_EX_VOP_ALL,
} XC_EX_VOP_CHANNEL;


typedef enum
{
    E_XC_EX_IP0_SEL_GOP0,
    E_XC_EX_IP0_SEL_GOP1,
    E_XC_EX_IP0_SEL_GOP2,
    E_XC_EX_NIP_SEL_GOP0,
    E_XC_EX_NIP_SEL_GOP1,
    E_XC_EX_NIP_SEL_GOP2,
    E_XC_EX_MVOP_SEL,
} XC_EX_IPSEL_GOP;


typedef enum
{
    E_XC_EX_MEM_FMT_AUTO = 0,
    E_XC_EX_MEM_FMT_444 = 1,
    E_XC_EX_MEM_FMT_422 = 2,
} XC_EX_MEM_FMT;





typedef enum
{

    PQ_EX_MAIN_WINDOW=0,

    PQ_EX_SUB_WINDOW=1,

    PQ_EX_MAX_WINDOW
} PQ_EX_WIN;

typedef enum
{
    PQ_EX_XC_ID_0,
    PQ_EX_XC_ID_1,
    PQ_EX_XC_ID_NUM,
}PQ_EX_XC_ID;




typedef enum
{

    PQ_EX_FOURCE_COLOR_DEFAULT,

    PQ_EX_FOURCE_COLOR_RGB,

    PQ_EX_FOURCE_COLOR_YUV,
} PQ_EX_FOURCE_COLOR_FMT;




typedef enum DLL_PACKED
{

    PQ_EX_DEINT_OFF=0,

    PQ_EX_DEINT_2DDI_BOB,

    PQ_EX_DEINT_2DDI_AVG,

    PQ_EX_DEINT_3DDI_HISTORY,

    PQ_EX_DEINT_3DDI,
} PQ_EX_DEINTERLACE_MODE;



typedef struct DLL_PACKED
{

    MS_BOOL bFBL;

    MS_BOOL bInterlace;

    MS_U16 u16input_hsize;

    MS_U16 u16input_vsize;

    MS_U16 u16input_vtotal;

    MS_U16 u16input_vfreq;

    MS_U16 u16ouput_vfreq;

    MS_U16 u16display_hsize;

    MS_U16 u16display_vsize;
}MS_PQ_EX_Mode_Info;



typedef enum
{

    PQ_EX_INPUT_SOURCE_VGA,

    PQ_EX_INPUT_SOURCE_TV,


    PQ_EX_INPUT_SOURCE_CVBS,


    PQ_EX_INPUT_SOURCE_SVIDEO,


    PQ_EX_INPUT_SOURCE_YPBPR,

    PQ_EX_INPUT_SOURCE_SCART,



    PQ_EX_INPUT_SOURCE_HDMI,


    PQ_EX_INPUT_SOURCE_DTV,


    PQ_EX_INPUT_SOURCE_DVI,



    PQ_EX_INPUT_SOURCE_STORAGE,

    PQ_EX_INPUT_SOURCE_KTV,

    PQ_EX_INPUT_SOURCE_JPEG,


    PQ_EX_INPUT_SOURCE_NUM,

    PQ_EX_INPUT_SOURCE_NONE = PQ_EX_INPUT_SOURCE_NUM,
} PQ_EX_INPUT_SOURCE_TYPE;



typedef enum
{
    E_PQ_EX_IOCTL_NONE = 0x00000000,
    E_PQ_EX_IOCTL_HSD_SAMPLING = 0x00000001,
    E_PQ_EX_IOCTL_PREVSD_BILINEAR = 0x00000002,
    E_PQ_EX_IOCTL_ADC_SAMPLING = 0x00000003,
    E_PQ_EX_IOCTL_RFBL_CTRL = 0x00000004,
    E_PQ_EX_IOCTL_PQ_SUGGESTED_FRAMENUM = 0x00000008,
    E_PQ_EX_IOCTL_SET_UCFEATURE = 0x00000010,
 E_PQ_EX_IOCTL_SKIP_MADI_TBL = 0x00000020,
    E_PQ_EX_IOCTL_NUM,
} PQ_EX_IOCTL_FLAG_TYPE;

typedef struct DLL_PACKED s_PQ_EX_Function
{

    void (* pq_disable_filmmode)(PQ_EX_WIN eWindow, MS_BOOL bOn);

    MS_BOOL (* pq_load_scalingtable)(PQ_EX_WIN eWindow, MS_U8 eXRuleType, MS_BOOL bPreV_ScalingDown,
                                      MS_BOOL bInterlace, MS_BOOL bColorSpaceYUV, MS_U16 u16InputSize, MS_U16 u16SizeAfterScaling);

    MS_BOOL (* pq_set_csc)(PQ_EX_WIN eWindow, PQ_EX_FOURCE_COLOR_FMT enFourceColor);

    PQ_EX_DEINTERLACE_MODE (* pq_set_memformat)(PQ_EX_WIN eWindow, MS_BOOL bMemFmt422, MS_BOOL bFBL, MS_U8 *u8BitsPerPixel);

    void (* pq_set_420upsampling)(PQ_EX_WIN eWindow, MS_BOOL bFBL, MS_BOOL bPreV_ScalingDown, MS_U16 u16V_CropStart);

    void (* pq_set_modeInfo)(PQ_EX_WIN eWindow, PQ_EX_INPUT_SOURCE_TYPE enInputSourceType, MS_PQ_EX_Mode_Info *pstPQModeInfo);

    void (* pq_deside_srctype)(PQ_EX_WIN eWindow, PQ_EX_INPUT_SOURCE_TYPE enInputSourceType);

    MS_BOOL (* pq_get_memyuvfmt)(PQ_EX_WIN eWindow, PQ_EX_FOURCE_COLOR_FMT enFourceColor);

    MS_BOOL (* pq_ioctl)(PQ_EX_WIN eWindow, MS_U32 u32Flag, void *pBuf, MS_U32 u32BufSize);

    void (* pq_disable_filmmode_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, MS_BOOL bOn);

    MS_BOOL (* pq_load_scalingtable_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, MS_U8 eXRuleType, MS_BOOL bPreV_ScalingDown,
                                      MS_BOOL bInterlace, MS_BOOL bColorSpaceYUV, MS_U16 u16InputSize, MS_U16 u16SizeAfterScaling);

    MS_BOOL (* pq_set_csc_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, PQ_EX_FOURCE_COLOR_FMT enFourceColor);

    PQ_EX_DEINTERLACE_MODE (* pq_set_memformat_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, MS_BOOL bMemFmt422, MS_BOOL bFBL, MS_U8 *u8BitsPerPixel);

    void (* pq_set_420upsampling_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, MS_BOOL bFBL, MS_BOOL bPreV_ScalingDown, MS_U16 u16V_CropStart);

    void (* pq_set_modeInfo_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, PQ_EX_INPUT_SOURCE_TYPE enInputSourceType, MS_PQ_EX_Mode_Info *pstPQModeInfo);

    void (* pq_deside_srctype_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, PQ_EX_INPUT_SOURCE_TYPE enInputSourceType);

    MS_BOOL (* pq_get_memyuvfmt_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, PQ_EX_FOURCE_COLOR_FMT enFourceColor);

    MS_BOOL (* pq_ioctl_ex)(PQ_EX_XC_ID eXCID, PQ_EX_WIN eWindow, MS_U32 u32Flag, void *pBuf, MS_U32 u32BufSize);
}PQ_EX_Function_Info;

typedef struct
{
    MS_U32 u32ratio;
    MS_BOOL bADVMode;
} PQ_EX_HSD_SAMPLING_INFO;

typedef struct
{
    PQ_EX_INPUT_SOURCE_TYPE enPQSourceType;
    MS_PQ_EX_Mode_Info stPQModeInfo;
    MS_U16 u16ratio;
} PQ_EX_ADC_SAMPLING_INFO;


typedef struct DLL_PACKED
{
    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;
    MS_BOOL bInterlaceMode;
    MS_BOOL bYUVInput;
} XC_EX_DST_DispInfo;

typedef enum
{

    E_XC_EX_GOP_XCDST_IP2=0,


    E_XC_EX_GOP_XCDST_IP1_MAIN=1,


    E_XC_EX_GOP_XCDST_IP1_SUB=2,


    E_XC_EX_GOP_XCDST_OP1_MAIN=3,

    E_XC_EX_MAX_GOP_XCDST_SUPPORT

} XC_EX_GOP_XCDST_TYPE;


typedef enum
{

    E_XC_EX_VOP_SEL_OSD_BLEND0,

    E_XC_EX_VOP_SEL_OSD_BLEND1,

    E_XC_EX_VOP_SEL_OSD_BLEND2,

    E_XC_EX_VOP_SEL_MACE_RGB,

    E_XC_EX_VOP_SEL_OSD_NONE,

    E_XC_EX_VOP_SEL_OSD_LAST = 0x80,
} XC_EX_VOP_SEL_OSD_XC2VE_MUX;


typedef enum
{

    E_XC_EX_3D_INPUT_FRAME_PACKING = 0x00,
    E_XC_EX_3D_INPUT_FIELD_ALTERNATIVE = 0x01,
    E_XC_EX_3D_INPUT_LINE_ALTERNATIVE = 0x02,
    E_XC_EX_3D_INPUT_SIDE_BY_SIDE_FULL = 0x03,
    E_XC_EX_3D_INPUT_L_DEPTH = 0x04,
    E_XC_EX_3D_INPUT_L_DEPTH_GRAPHICS_GRAPHICS_DEPTH = 0x05,
    E_XC_EX_3D_INPUT_TOP_BOTTOM = 0x06,
    E_XC_EX_3D_INPUT_SIDE_BY_SIDE_HALF = 0x08,

    E_XC_EX_3D_INPUT_CHECK_BORAD = 0x09,


    E_XC_EX_3D_INPUT_MODE_USER = 0x10,
    E_XC_EX_3D_INPUT_MODE_NONE = E_XC_EX_3D_INPUT_MODE_USER,
    E_XC_EX_3D_INPUT_FRAME_ALTERNATIVE,
    E_XC_EX_3D_INPUT_SIDE_BY_SIDE_HALF_INTERLACE,

    E_XC_EX_3D_INPUT_FRAME_PACKING_OPT,

    E_XC_EX_3D_INPUT_TOP_BOTTOM_OPT,
    E_XC_EX_3D_INPUT_NORMAL_2D,
    E_XC_EX_3D_INPUT_NORMAL_2D_INTERLACE,
    E_XC_EX_3D_INPUT_NORMAL_2D_INTERLACE_PTP,
    E_XC_EX_3D_INPUT_SIDE_BY_SIDE_HALF_INTERLACE_OPT,
    E_XC_EX_3D_INPUT_NORMAL_2D_HW,
    E_XC_EX_3D_INPUT_PIXEL_ALTERNATIVE,
} XC_EX_3D_INPUT_MODE;


typedef enum
{
    E_XC_EX_3D_OUTPUT_MODE_NONE,
    E_XC_EX_3D_OUTPUT_LINE_ALTERNATIVE ,
    E_XC_EX_3D_OUTPUT_TOP_BOTTOM,
    E_XC_EX_3D_OUTPUT_SIDE_BY_SIDE_HALF,
    E_XC_EX_3D_OUTPUT_FRAME_ALTERNATIVE,
    E_XC_EX_3D_OUTPUT_FRAME_L,
    E_XC_EX_3D_OUTPUT_FRAME_R,
    E_XC_EX_3D_OUTPUT_FRAME_ALTERNATIVE_NOFRC,
    E_XC_EX_3D_OUTPUT_CHECKBOARD_HW,
    E_XC_EX_3D_OUTPUT_LINE_ALTERNATIVE_HW,
    E_XC_EX_3D_OUTPUT_PIXEL_ALTERNATIVE_HW,
    E_XC_EX_3D_OUTPUT_FRAME_L_HW,
    E_XC_EX_3D_OUTPUT_FRAME_R_HW,
    E_XC_EX_3D_OUTPUT_FRAME_ALTERNATIVE_HW,
    E_XC_EX_3D_OUTPUT_TOP_BOTTOM_HW,
    E_XC_EX_3D_OUTPUT_SIDE_BY_SIDE_HALF_HW,
    E_XC_EX_3D_OUTPUT_FRAME_PACKING,
    E_XC_EX_3D_OUTPUT_FRAME_ALTERNATIVE_LLRR,
    E_XC_EX_3D_OUTPUT_FRAME_ALTERNATIVE_LLRR_HW,
    E_XC_EX_3D_OUTPUT_TOP_TOP,
    E_XC_EX_3D_OUTPUT_BOTTOM_BOTTOM,
    E_XC_EX_3D_OUTPUT_LEFT_LEFT,
    E_XC_EX_3D_OUTPUT_RIGHT_RIGHT,
} XC_EX_3D_OUTPUT_MODE;

typedef enum
{
    E_XC_EX_3D_OUTPUT_FI_MODE_NONE ,
    E_XC_EX_3D_OUTPUT_FI_1920x1080 ,
    E_XC_EX_3D_OUTPUT_FI_960x1080 ,
    E_XC_EX_3D_OUTPUT_FI_1920x540 ,

    E_XC_EX_3D_OUTPUT_FI_1280x720 ,
} XC_EX_3D_OUTPUT_FI_MODE;

typedef enum
{
    E_XC_EX_3D_AUTODETECT_SW,
    E_XC_EX_3D_AUTODETECT_HW,
    E_XC_EX_3D_AUTODETECT_HW_COMPATIBLE,
    E_XC_EX_3D_AUTODETECT_MAX
} XC_EX_3D_AUTODETECT_METHOD;

typedef enum
{
    E_XC_EX_3D_PANEL_NONE,
    E_XC_EX_3D_PANEL_SHUTTER,
    E_XC_EX_3D_PANEL_PELLICLE,
    E_XC_EX_3D_PANEL_4K1K_SHUTTER,
    E_XC_EX_3D_PANEL_MAX,
} XC_EX_3D_PANEL_TYPE;


typedef struct __attribute__((packed))
{
    MS_U32 u32Hw2dTo3dPara_Version;
    MS_U16 u16Concave;
    MS_U16 u16Gain;
    MS_U16 u16Offset;
    MS_U16 u16ArtificialGain;
    MS_U16 u16EleSel;
    MS_U16 u16ModSel;
    MS_U16 u16EdgeBlackWidth;
} XC_EX_3D_HW2DTO3D_PARA;


typedef struct DLL_PACKED
{
    MS_U32 u32Detect3DFormatPara_Version;

    MS_U16 u16HorSearchRange;
    MS_U16 u16VerSearchRange;
    MS_U16 u16GYPixelThreshold;
    MS_U16 u16RCrPixelThreshold;
    MS_U16 u16BCbPixelThreshold;
    MS_U16 u16HorSampleCount;
    MS_U16 u16VerSampleCount;
    MS_U16 u16MaxCheckingFrameCount;
    MS_U16 u16HitPixelPercentage;

    MS_BOOL bEnableOverscan;
} XC_EX_3D_DETECT3DFORMAT_PARA;


typedef struct DLL_PACKED
{
    MS_U32 u32FPInfoPara_Version;
    MS_U16 u16HBlank;
    MS_BOOL bEnableUserSetting;
} XC_EX_3D_FPINFO_PARA;

typedef enum
{
    E_XC_EX_DBG_FPLL_MODE_DISABLE_ALL = 0,
    E_XC_EX_DBG_FPLL_MODE_DISABLE = 1,
    E_XC_EX_DBG_FPLL_MODE_ENABLE = 2,
    E_XC_EX_DBG_FPLL_MODE_MAX,
} XC_EX_FPLL_DBG_MODE;

typedef enum
{
    E_XC_EX_DBG_FPLL_FLAG_PHASELIMIT = 0,
    E_XC_EX_DBG_FPLL_FLAG_D5D6D7 = 1,
    E_XC_EX_DBG_FPLL_FLAG_IGAIN = 2,
    E_XC_EX_DBG_FPLL_FLAG_PGAIN = 3,
    E_XC_EX_DBG_FPLL_FLAG_INITSETSTEP = 4,
    E_XC_EX_DBG_FPLL_FLAG_INITSETDELAY= 5,
    E_XC_EX_DBG_FPLL_FLAG_MAX,
} XC_EX_FPLL_DBG_FLAG;

typedef enum
{
    E_XC_EX_FPLL_MODE_DISABLE_ALL = 0,
    E_XC_EX_FPLL_MODE_DISABLE = 1,
    E_XC_EX_FPLL_MODE_ENABLE = 2,
    E_XC_EX_FPLL_MODE_MAX,
} XC_EX_FPLL_MODE;

typedef enum
{
    E_XC_EX_FPLL_FLAG_PHASELIMIT = 0,
    E_XC_EX_FPLL_FLAG_D5D6D7 = 1,
    E_XC_EX_FPLL_FLAG_IGAIN = 2,
    E_XC_EX_FPLL_FLAG_PGAIN = 3,
    E_XC_EX_FPLL_FLAG_INITSETSTEP = 4,
    E_XC_EX_FPLL_FLAG_INITSETDELAY= 5,
    E_XC_EX_FPLL_FLAG_MAX,
} XC_EX_FPLL_FLAG;

typedef enum
{
    E_XC_EX_MLOAD_UNSUPPORTED = 0,
    E_XC_EX_MLOAD_DISABLED = 1,
    E_XC_EX_MLOAD_ENABLED = 2,
} XC_EX_MLOAD_TYPE;

typedef enum
{
    E_XC_EX_MLG_UNSUPPORTED = 0,
    E_XC_EX_MLG_DISABLED = 1,
    E_XC_EX_MLG_ENABLED = 2,
} XC_EX_MLG_TYPE;

typedef enum
{
    E_XC_EX_HDMI_SYNC_DE,
    E_XC_EX_HDMI_SYNC_HV,
} XC_EX_HDMI_SYNC_TYPE;

typedef enum
{
    E_XC_EX_FRC_1_1 = 0,
    E_XC_EX_FRC_1_2 = 1,
    E_XC_EX_FRC_5_12 = 2,
    E_XC_EX_FRC_2_5 = 3,
    E_XC_EX_FRC_1_4 = 4,
} XC_EX_FRC_TYPE;


typedef struct __attribute__((packed))
{
    MS_U16 u16LowerBound;
    MS_U16 u16HigherBound;
#if defined(UFO_PUBLIC_HEADER_500) ||defined(UFO_PUBLIC_HEADER_300)||defined(UFO_PUBLIC_HEADER_700)||defined(UFO_PUBLIC_HEADER_212)
    MS_U8 u8FRC_In:4;
    MS_U8 u8FRC_Out:4;
#else
    MS_U8 u8Padding;
    MS_U8 u8FRC_In;
    MS_U8 u8FRC_Out;
#endif
    XC_EX_FRC_TYPE eFRC_Type;
} XC_EX_FRC_SETTING;

typedef enum
{
    E_PQ_ex_IOCTL_GET_HSD_SAMPLING,
    E_PQ_ex_IOCTL_MAX,
} E_PQ_ex_IOCTL_FLAG;


typedef enum
{
    E_XC_EX_GET_PIXEL_RET_FAIL = 0,
    E_XC_EX_GET_PIXEL_RET_OK,
    E_XC_EX_GET_PIXEL_RET_OUT_OF_RANGE,
} XC_EX_GET_PixelRGB_ReturnValue;


typedef enum
{
    E_XC_EX_GET_PIXEL_STAGE_AFTER_DLC = 0x01,
    E_XC_EX_GET_PIXEL_STAGE_PRE_GAMMA = 0x02,
    E_XC_EX_GET_PIXEL_STAGE_AFTER_OSD = 0x03,
    E_XC_EX_GET_PIXEL_STAGE_MAX = 0xFF,
} XC_EX_GET_PIXEL_RGB_STAGE;

typedef struct DLL_PACKED
{
    XC_EX_GET_PIXEL_RGB_STAGE enStage;
    MS_U16 u16x;
    MS_U16 u16y;
    MS_U32 u32r;
    MS_U32 u32g;
    MS_U32 u32b;
} XC_EX_Get_Pixel_RGB;

typedef struct DLL_PACKED
{
    MS_U32 u32ReportPixelInfo_Version;
    MS_U16 u16ReportPixelInfo_Length;
    XC_EX_GET_PIXEL_RGB_STAGE enStage;
    MS_U16 u16RepWinColor;
    MS_U16 u16XStart;
    MS_U16 u16XEnd;
    MS_U16 u16YStart;
    MS_U16 u16YEnd;
    MS_U16 u16RCrMin;
    MS_U16 u16RCrMax;
    MS_U16 u16GYMin;
    MS_U16 u16GYMax;
    MS_U16 u16BCbMin;
    MS_U16 u16BCbMax;
    MS_U32 u32RCrSum;
    MS_U32 u32GYSum;
    MS_U32 u32BCbSum;
    MS_BOOL bShowRepWin;
} XC_EX_REPORT_PIXELINFO;


typedef enum
{

    E_SC_EX_INT_DIPW = 1,
    E_SC_EX_INT_MEMSYNC_MAIN = 3,
    E_SC_EX_INT_START = 4,
    E_SC_EX_INT_RESERVED1 = E_SC_EX_INT_START,


    E_SC_EX_INT_VSINT,
    E_SC_EX_INT_F2_VTT_CHG,
    E_SC_EX_INT_F1_VTT_CHG,
    E_SC_EX_INT_F2_VS_LOSE,
    E_SC_EX_INT_F1_VS_LOSE,
    E_SC_EX_INT_F2_JITTER,
    E_SC_EX_INT_F1_JITTER,
    E_SC_EX_INT_F2_IPVS_SB,
    E_SC_EX_INT_F1_IPVS_SB,
    E_SC_EX_INT_F2_IPHCS_DET,
    E_SC_EX_INT_F1_IPHCS_DET,


    E_SC_EX_INT_PWM_RP_L_INT,
    E_SC_EX_INT_PWM_FP_L_INT,
    E_SC_EX_INT_F2_HTT_CHG,
    E_SC_EX_INT_F1_HTT_CHG,
    E_SC_EX_INT_F2_HS_LOSE,
    E_SC_EX_INT_F1_HS_LOSE,
    E_SC_EX_INT_PWM_RP_R_INT,
    E_SC_EX_INT_PWM_FP_R_INT,
    E_SC_EX_INT_F2_CSOG,
    E_SC_EX_INT_F1_CSOG,
    E_SC_EX_INT_F2_RESERVED2,
    E_SC_EX_INT_F1_RESERVED2,
    E_SC_EX_INT_F2_ATP_READY,
    E_SC_EX_INT_F1_ATP_READY,
    E_SC_EX_INT_F2_RESERVED3,
    E_SC_EX_INT_F1_RESERVED3,

    E_SC_EX_MAX_SC_INT,
} SC_EX_INT_SRC;

typedef enum
{

    E_XC_EX_INT_RESERVED1 = 4,
    E_XC_EX_INT_VSINT,
    E_XC_EX_INT_F2_VTT_CHG,
    E_XC_EX_INT_F1_VTT_CHG,
    E_XC_EX_INT_F2_VS_LOSE,
    E_XC_EX_INT_F1_VS_LOSE,
    E_XC_EX_INT_F2_JITTER,
    E_XC_EX_INT_F1_JITTER,
    E_XC_EX_INT_F2_IPVS_SB,
    E_XC_EX_INT_F1_IPVS_SB,
    E_XC_EX_INT_F2_IPHCS_DET,
    E_XC_EX_INT_F1_IPHCS_DET,


    E_XC_EX_INT_PWM_RP_L_INT,
    E_XC_EX_INT_PWM_FP_L_INT,
    E_XC_EX_INT_F2_HTT_CHG,
    E_XC_EX_INT_F1_HTT_CHG,
    E_XC_EX_INT_F2_HS_LOSE,
    E_XC_EX_INT_F1_HS_LOSE,
    E_XC_EX_INT_PWM_RP_R_INT,
    E_XC_EX_INT_PWM_FP_R_INT,
    E_XC_EX_INT_F2_CSOG,
    E_XC_EX_INT_F1_CSOG,
    E_XC_EX_INT_F2_RESERVED2,
    E_XC_EX_INT_F1_RESERVED2,
    E_XC_EX_INT_F2_ATP_READY,
    E_XC_EX_INT_F1_ATP_READY,
    E_XC_EX_INT_F2_RESERVED3,
    E_XC_EX_INT_F1_RESERVED3,
} XC_EX_INT_SRC;


typedef enum
{
    E_XC_EX_VOP_LAYER_VIDEO_MUX1_MUX2 = 0,
    E_XC_EX_VOP_LAYER_FRAME_VIDEO_MUX1_MUX2,
    E_XC_EX_VOP_LAYER_FRAME_VIDEO_MUX2_MUX1,
    E_XC_EX_VOP_LAYER_FRAME_MUX1_VIDEO_MUX2,
    E_XC_EX_VOP_LAYER_FRAME_MUX1_MUX2_VIDEO,
    E_XC_EX_VOP_LAYER_FRAME_MUX2_VIDEO_MUX1,
    E_XC_EX_VOP_LAYER_FRAME_MUX2_MUX1_VIDEO,
    E_XC_EX_VOP_LAYER_RESERVED,
} XC_EX_VOP_OSD_LAYER_SEL;


typedef enum
{
    E_XC_EX_OP2VOPDE_MAINWINDOW = 0,
    E_XC_EX_OP2VOPDE_SUBWINDOW,
    E_XC_EX_OP2VOPDE_WHOLEFRAME,
    E_XC_EX_OP2VOPDE_WHOLEFRAME_WITHOSD,
} XC_EX_OP2VOP_DE_SEL;

typedef void (*SC_EX_InterruptCb) (SC_EX_INT_SRC enIntNum, void *pParam);



typedef struct DLL_PACKED
{
    MS_U32 u32XC_version;
    MS_U16 u16InVFreq;
    MS_U16 u16OutVFreq;
    MS_BOOL bInterlace;

} XC_EX_OUTPUTFRAME_Info;



typedef enum
{
    E_XC_EX_INIT_MISC_A_NULL = 0,
    E_XC_EX_INIT_MISC_A_IMMESWITCH = 1,
    E_XC_EX_INIT_MISC_A_IMMESWITCH_DVI_POWERSAVING = 2,
    E_XC_EX_INIT_MISC_A_DVI_AUTO_EQ = 4,

    E_XC_EX_INIT_MISC_A_FRC_INSIDE = 8,
    E_XC_EX_INIT_MISC_A_OSD_TO_HSLVDS = 0x10,
    E_XC_EX_INIT_MISC_A_FRC_INSIDE_60HZ = 0x20,
    E_XC_EX_INIT_MISC_A_FRC_INSIDE_240HZ = 0x40,
} XC_EX_INIT_MISC_A;



typedef struct DLL_PACKED
{
    MS_U32 u32XCMISC_version;
    MS_U32 u32MISC_A;
    MS_U32 u32MISC_B;
    MS_U32 u32MISC_C;
    MS_U32 u32MISC_D;
} XC_EX_INITMISC;

typedef enum
{
    E_XC_EX_FLOCK_DIV_OFF = 0,
    E_XC_EX_FLOCK_DIV_ON,
    E_XC_EX_FLOCK_FPLL_ON,

} XC_EX_FLOCK_TYPE;

typedef struct __attribute__((packed))
{

    MS_PHY u32FRC_MEMC_MemAddr;
    MS_PHY u32FRC_MEMC_MemSize;
    MS_PHY u32FRC_OD_MemAddr;
    MS_PHY u32FRC_OD_MemSize;
    MS_PHY u32FRC_LD_MemAddr;
    MS_PHY u32FRC_LD_MemSize;
    MS_PHY u32FRC_ME1_MemAddr;
    MS_PHY u32FRC_ME1_MemSize;
    MS_PHY u32FRC_ME2_MemAddr;
    MS_PHY u32FRC_ME2_MemSize;
    MS_PHY u32FRC_2D3D_Render_MemAddr;
    MS_PHY u32FRC_2D3D_Render_MemSize;
    MS_PHY u32FRC_2D3D_Render_Detection_MemAddr;
    MS_PHY u32FRC_2D3D_Render_Detection_MemSize;
    MS_PHY u32FRC_Halo_MemAddr;
    MS_PHY u32FRC_Halo_MemSize;
    MS_PHY u32FRC_R2_MemAddr;
    MS_PHY u32FRC_R2_MemSize;
    MS_PHY u32FRC_ADL_MemAddr;
    MS_PHY u32FRC_ADL_MemSize;

    MS_PHY u32FRC_FrameSize;
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700) ||defined(UFO_PUBLIC_HEADER_300) ||defined(UFO_PUBLIC_HEADER_212)
    MS_U16 u16FB_YcountLinePitch;
#else
    MS_PHY u16FB_YcountLinePitch;
#endif
    MS_U16 u16PanelWidth;
    MS_U16 u16PanelHeigh;
    MS_U8 u8FRC3DPanelType;
    MS_U8 u83Dmode;
    MS_U8 u8IpMode;
    MS_U8 u8MirrorMode;
    MS_U8 u83D_FI_out;
    MS_BOOL bFRC;

} XC_EX_FRC_INFO, *p_XC_EX_FRC_INFO;

typedef struct __attribute__((packed))
{
    MS_U32 u32XC_PREINIT_version;

    XC_EX_FRC_INFO FRCInfo;

    MS_U16 u16VTrigX;
    MS_U16 u16VTrigY;





    MS_U8 u8PanelHSyncWidth;
    MS_U8 u8PanelHSyncBackPorch;




    MS_U8 u8PanelVSyncWidth;
    MS_U8 u8PanelVSyncBackPorch;

} XC_EX_PREINIT_INFO, *p_XC_EX_PREINIT_INFO;

typedef enum
{
    E_XC_EX_PREINIT_NULL = 0x00,
    E_XC_EX_PREINIT_FRC = 0x01,
    E_XC_EX_PREINIT_FRC_3D_TYPE = 0x02,
    E_XC_EX_PREINIT_NUM,

} XC_EX_PREINIT;

typedef enum
{
    E_XC_EX_MIRROR_NORMAL,
    E_XC_EX_MIRROR_H_ONLY,
    E_XC_EX_MIRROR_V_ONLY,
    E_XC_EX_MIRROR_HV,
    E_XC_EX_MIRROR_MAX,
} XC_EX_MirrorMode;

typedef enum
{
    E_XC_EX_MEMORY_IP_READ_REQUEST,
    E_XC_EX_MEMORY_IP_WRITE_REQUEST,
    E_XC_EX_MEMORY_OP_READ_REQUEST,
    E_XC_EX_MEMORY_OP_WRITE_REQUEST,
    E_XC_EX_MEMORY_REQUEST_MAX,
} XC_EX_MEMORY_REQUEST_TYPE;



typedef enum
{
    E_XC_EX_VIDEO_ON_OSD_LAYER_DEAFULT = 0,
    E_XC_EX_VIDEO_ON_OSD_LAYER_0 = 1,
    E_XC_EX_VIDEO_ON_OSD_LAYER_1 = 2,
    E_XC_EX_VIDEO_ON_OSD_LAYER_2 = 3,
    E_XC_EX_VIDEO_ON_OSD_LAYER_3 = 4,
    E_XC_EX_VIDEO_ON_OSD_LAYER_NUM,
} XC_EX_VIDEO_ON_OSD_LAYER;


typedef enum
{
    E_XC_EX_OSD_0 = 0,
    E_XC_EX_OSD_1 = 1,
    E_XC_EX_OSD_2 = 2,
    E_XC_EX_OSD_3 = 3,
    E_XC_EX_OSD_4 = 4,
    E_XC_EX_OSD_NUM,
} E_XC_EX_OSD_INDEX;


typedef enum
{
    E_XC_EX_OSD_BlENDING_MODE0 = 0,
    E_XC_EX_OSD_BlENDING_MODE1 = 1,
    E_XC_EX_OSD_BlENDING_TYPE_NUM,
} XC_EX_OSD_BlENDING_TYPE;


typedef enum
{
    E_XC_EX_PRE_SCALING = 0,
    E_XC_EX_POST_SCALING,
    E_XC_EX_BOTH_SCALING,
} XC_EX_SCALING_TYPE;


typedef enum
{
    E_XC_EX_H_VECTOR = 0,
    E_XC_EX_V_VECTOR,
    E_XC_EX_HV_VECTOR,
} XC_EX_VECTOR_TYPE;


typedef enum
{
    E_XC_EX_MCDI_ME1 = 0,
    E_XC_EX_MCDI_ME2 = 1,
    E_XC_EX_MCDI_BOTH,
    E_XC_EX_MCDI_SUB_ME1,
    E_XC_EX_MCDI_SUB_ME2,
    E_XC_EX_MCDI_SUB_BOTH,
    E_XC_EX_MCDI_MAX,
} XC_EX_MCDI_TYPE;

typedef struct
{
    MS_U8 p1;
    MS_U8 p2;
    MS_U8 p3;
    MS_U8 p4;
    MS_U8 p5;
    MS_U8 p6;
    MS_U8 p7;
    MS_U8 p8;
} XC_EX_FRC_R2_CMD_PARAMETER, *p_XC_EX_FRC_R2_CMD_PARAMETER;


typedef enum
{
    E_XC_EX_LD_PANEL_LG32inch_LR10 = 0x0,
    E_XC_EX_LD_PANEL_LG37inch_LR10 = 0x1,
    E_XC_EX_LD_PANEL_LG42inch_LR16 = 0x2,
    E_XC_EX_LD_PANEL_LG47inch_LR16 = 0x3,
    E_XC_EX_LD_PANEL_LG55inch_LR16 = 0x4,
    E_XC_EX_LD_PANEL_LG55inch_LR12 = 0x5,
    E_XC_EX_LD_PANEL_CMO42inch_LR16 = 0x6,
    E_XC_EX_LD_PANEL_DEFAULT,
    E_XC_EX_LD_PANEL_NUMS,
} XC_EX_LD_PANEL_TYPE;

typedef enum
{
    E_XC_EX_LD_MODE_OFF = 0,
    E_XC_EX_LD_MODE_LOW = 1,
    E_XC_EX_LD_MODE_MID = 2,
    E_XC_EX_LD_MODE_HIGH = 3,
} XC_EX_LD_MODE;


typedef struct DLL_PACKED
{
    MS_U16 u16PixelStep;
    MS_U8 u8ColorThreshold;
    MS_U8 u8TryTimes;
    MS_U16 u16LinearDiff;
} XC_EX_DETECTNL_PARA;

#define XC_EX_FRC_PATHCTRL_ALLOFF (0x0000)
#define XC_EX_FRC_PATHCTRL_OP2COLORMATRIX (0x0001)
#define XC_EX_FRC_PATHCTRL_OP2CSCDITHER (0x0002)
#define XC_EX_FRC_PATHCTRL_OP2BRIGHTNESS (0x0004)
#define XC_EX_FRC_PATHCTRL_OP2CONTRAST (0x0008)
#define XC_EX_FRC_PATHCTRL_OP2NOISEROUND (0x0010)


typedef struct
{
    MS_U16 u16OC_Tgen_HTotal;
    MS_U16 u16OC_Tgen_VTotal;

    MS_U16 u16OC_Tgen_Hsync_Start;
    MS_U16 u16OC_Tgen_Hsync_End;
    MS_U16 u16OC_Tgen_HframDE_Start;
    MS_U16 u16OC_Tgen_HframDE_End;

    MS_U16 u16OC_Tgen_Vsync_Start;
    MS_U16 u16OC_Tgen_Vsync_End;
    MS_U16 u16OC_Tgen_VframDE_Start;
    MS_U16 u16OC_Tgen_VframDE_End;
} XC_EX_OSDC_TGEN_INFO;


typedef struct
{
    MS_BOOL bOC_ClK_En;
    MS_BOOL bOC_Mixer_Bypass_En;
    MS_BOOL bOC_Mixer_InvAlpha_En;
    MS_BOOL bOC_Mixer_Hsync_Vfde_Out;
    MS_BOOL bOC_Mixer_Hfde_Vfde_Out;
    MS_U16 u16OC_Lpll_type;
    MS_U8 u8OC_OutputFormat;
} XC_EX_OSDC_CTRL_INFO;

typedef enum
{
    E_XC_EX_OSDC_TGEN_MANUAL = 0,
    E_XC_EX_OSDC_TGEN_1366x768,
    E_XC_EX_OSDC_TGEN_1920x1080,
    E_XC_EX_OSDC_TGEN_3840x2160,

    E_XC_EX_OSDC_TGEN_MAX,
} XC_EX_OSDC_TGEN_Type;

typedef enum
{
    E_XC_EX_OSDC_INIT = 0,
    E_XC_EX_OSDC_CTRL_TGEN,
    E_XC_EX_OSDC_CTRL_MISC,

} XC_EX_OSDC_CTRL_TYPE;


typedef struct DLL_PACKED
{
    MS_U32 ODSC_DISPInfo_Version;

    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;

    MS_U32 SYNCHST;
    MS_U32 SYNCHEND;
    MS_U32 SYNCVST;
    MS_U32 SYNCVEND;

    MS_BOOL bCLK_EN;
    MS_BOOL bMIXER_BYPASS_EN;
    MS_BOOL bMIXER_INVALPHA_EN;
    MS_BOOL bMIXER_HSTVFDEOUT_EN;
    MS_BOOL bMIXER_HFDEVFDEOUT_EN;

} XC_EX_OSDC_DST_DispInfo;


typedef enum
{
    E_XC_EX_BYPASS_HDMI = 0,
    E_XC_EX_BYPASS_DC_MAIN,
    E_XC_EX_BYPASS_DC_SUB,
}XC_EX_BYPASS_InputSource;



typedef enum
{
    E_XC_EX_OP1_PATGEN_DISP_LB_MODE,
    E_XC_EX_OP1_PATGEN_OPM_MODE,
}XC_EX_OP1_PATGEN_MODE;

typedef enum{
    E_XC_EX_OP1_PATTERN_OFF = 0,
    E_XC_EX_OP1_WB_PATTERN,
    E_XC_EX_OP1_PURE_RED_PATTERN,
    E_XC_EX_OP1_PURE_GREEN_PATTERN,
    E_XC_EX_OP1_PURE_BLUE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_PATTERN,
    E_XC_EX_OP1_PURE_BLACK_PATTERN,
    E_XC_EX_OP1_PURE_GREY_PATTERN,
    E_XC_EX_OP1_PURE_COLOR_V_BAR_PATTERN,
    E_XC_EX_OP1_PURE_COLOR_H_BAR_PATTERN,
    E_XC_EX_OP1_PURE_GREY_BAR_16_PATTERN,
    E_XC_EX_OP1_PURE_GREY_BAR_32_PATTERN,
    E_XC_EX_OP1_PURE_GREY_BAR_64_PATTERN,
    E_XC_EX_OP1_PURE_GREY_RGB_32_PATTERN,
    E_XC_EX_OP1_PURE_RGB_CHECKERBOARD_PATTERN,
    E_XC_EX_OP1_DOAFADE_GRAY_PATTERN,
    E_XC_EX_OP1_CALIBRATION_COLOR_DOTFADE_PATTERN,
    E_XC_EX_OP1_CALIBRATION_PATTERN,
    E_XC_EX_OP1_PATTERN_1,
    E_XC_EX_OP1_PATTERN_2,
    E_XC_EX_OP1_PATTERN_3,
    E_XC_EX_OP1_3D_PATTERN,
    E_XC_EX_OP1_PURE_RED_100IRE_PATTERN,
    E_XC_EX_OP1_PURE_GREEN_100IRE_PATTERN,
    E_XC_EX_OP1_PURE_BLUE_100IRE_PATTERN,
    E_XC_EX_OP1_PURE_RED_70IRE_PATTERN,
    E_XC_EX_OP1_PURE_GREEN_70IRE_PATTERN,
    E_XC_EX_OP1_PURE_BLUE_70IRE_PATTERN,
    E_XC_EX_OP1_PURE_RED_40IRE_PATTERN,
    E_XC_EX_OP1_PURE_GREEN_40IRE_PATTERN,
    E_XC_EX_OP1_PURE_BLUE_40IRE_PATTERN,
    E_XC_EX_OP1_PURE_RED_20IRE_PATTERN,
    E_XC_EX_OP1_PURE_GREEN_20IRE_PATTERN,
    E_XC_EX_OP1_PURE_BLUE_20IRE_PATTERN,
    E_XC_EX_OP1_PURE_RED_10IRE_PATTERN,
    E_XC_EX_OP1_PURE_GREEN_10IRE_PATTERN,
    E_XC_EX_OP1_PURE_BLUE_10IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_100IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_90IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_80IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_70IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_60IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_50IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_40IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_30IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_20IRE_PATTERN,
    E_XC_EX_OP1_PURE_WHITE_10IRE_PATTERN,
    E_XC_EX_OP1_PURE_GAMMA_GREY1_PATTERN,
    E_XC_EX_OP1_PURE_GAMMA_GREY2_PATTERN,
    E_XC_EX_OP1_PURE_RGB_CHECKERBOARD_PATTERN_2,
}XC_EX_OP1_PATTERN;


typedef enum
{
    E_XC_EX_3D_ATTRIBUTE_OSD,
    E_XC_EX_3D_ATTRIBUTE_NUM,
} XC_EX_3D_ATTRIBUTE_TYPE;


typedef enum
{
    E_XC_EX_3D_OSD_BLENDING_SC_IP,
    E_XC_EX_3D_OSD_BLENDING_SC_OP,
    E_XC_EX_3D_OSD_BLENDING_FRC_IP,
    E_XC_EX_3D_OSD_BLENDING_FRC_OP,
    E_XC_EX_3D_OSD_BLENDING_NUM,
} XC_EX_3D_OSD_BLENDING_POINT;

#ifdef UFO_XC_SCAN_TYPE

typedef enum
{
    E_XC_EX_NORMAL_MODE = 0,
    E_XC_EX_FORCE_P_MODE,
    E_XC_EX_FORCE_I_MODE,
}XC_EX_SCAN_TYPE;
#endif
# 2361 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_GetLibVer(const MSIF_Version **ppVersion);





DLL_PUBLIC const XC_EX_ApiInfo * MApi_XC_EX_GetInfo(XC_DEVICE_ID *pDeviceId);







DLL_PUBLIC MS_BOOL MApi_XC_EX_GetStatus(XC_DEVICE_ID *pDeviceId, XC_EX_ApiStatus *pDrvStatus, XC_EX_SCALER_WIN eWindow);
# 2392 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_U16 MApi_XC_EX_GetStatusEx(XC_DEVICE_ID *pDeviceId, XC_EX_ApiStatusEx *pDrvStatusEx, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_BOOL MApi_XC_EX_SetDbgLevel(MS_U16 u16DbgSwitch);
# 2408 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_FPLLDbgMode(XC_DEVICE_ID *pDeviceId, XC_EX_FPLL_DBG_MODE DbgMode, XC_EX_FPLL_DBG_FLAG DbgFlag, MS_U32 u32Data);







DLL_PUBLIC void MApi_XC_EX_FPLLCustomerMode(XC_DEVICE_ID *pDeviceId, XC_EX_FPLL_MODE eMode, XC_EX_FPLL_FLAG eFlag, MS_U32 u32Data);




DLL_PUBLIC MS_BOOL MDrv_XC_EX_SetIOMapBase(XC_DEVICE_ID *pDeviceId);







DLL_PUBLIC MS_BOOL MApi_XC_EX_Init(XC_DEVICE_ID *pDeviceId, XC_EX_INITDATA *pXC_InitData, MS_U32 u32InitDataLen);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Init_MISC(XC_DEVICE_ID *pDeviceId, XC_EX_INITMISC *pXC_Init_Misc, MS_U32 u32InitMiscDataLen);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_GetMISCStatus(XC_DEVICE_ID *pDeviceId, XC_EX_INITMISC *pXC_Init_Misc);







DLL_PUBLIC MS_U32 MApi_XC_EX_GetCapability(MS_U32 u32Id);




DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_GetChipCaps(XC_EX_CAPS eCapType, MS_U32* pRet, MS_U32 ret_size);




DLL_PUBLIC MS_BOOL MApi_XC_EX_Exit(XC_DEVICE_ID *pDeviceId);
# 2475 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_SetDynamicScaling(XC_DEVICE_ID *pDeviceId, XC_EX_DynamicScaling_Info *pstDSInfo, MS_U32 u32DSInfoLen, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_GetDynamicScalingStatus(XC_DEVICE_ID *pDeviceId);






#if defined(UFO_PUBLIC_HEADER_700)
DLL_PUBLIC MS_PHY MApi_XC_EX_Get_DNRBaseOffset(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
#else
DLL_PUBLIC MS_U32 MApi_XC_EX_Get_DNRBaseOffset(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
#endif






#define MApi_XC_EX_Get_StoreFrameNum MApi_XC_EX_Get_FrameNumFactor
DLL_PUBLIC MS_U8 MApi_XC_EX_Get_FrameNumFactor(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_SetPreScalingLimit(XC_DEVICE_ID *pDeviceId, XC_EX_PreScalingLimit_Info *pXCPrescalingLimit, XC_EX_SCALER_WIN eWindow);
# 2516 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_SetWindow(XC_DEVICE_ID *pDeviceId, XC_EX_SETWIN_INFO *pstXC_SetWin_Info, MS_U32 u32InitDataLen, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC MS_BOOL MApi_XC_EX_SetDualWindow(XC_DEVICE_ID *pDeviceId, XC_EX_SETWIN_INFO *pstXC_SetWin_Info_Main, XC_EX_SETWIN_INFO *pstXC_SetWin_Info_Sub);
# 2533 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_SetTravelingWindow(XC_DEVICE_ID *pDeviceId, XC_EX_SETWIN_INFO *pstXC_SetWin_Info, MS_U32 u32InitDataLen, XC_EX_SCALER_WIN eWindow);
# 2544 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetInputSource( XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE enInputSourceType, XC_EX_SCALER_WIN eWindow );






DLL_PUBLIC MS_BOOL MApi_XC_EX_IsYUVSpace(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_BOOL MApi_XC_EX_IsMemoryFormat422(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_EnableForceRGBin(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC MS_BOOL MApi_XC_EX_EnableMirrorModeEx( XC_DEVICE_ID *pDeviceId, XC_EX_MirrorMode eMirrorMode, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC XC_EX_MirrorMode MApi_XC_EX_GetMirrorModeTypeEx(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
# 2592 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_GetSyncStatus(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE eCurrentSrc , XC_EX_IP_SYNC_STATUS *sXC_Sync_Status, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC MS_U8 MApi_XC_EX_WaitOutputVSync(XC_DEVICE_ID *pDeviceId, MS_U8 u8NumVSyncs, MS_U16 u16Timeout, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC MS_U8 MApi_XC_EX_WaitInputVSync(XC_DEVICE_ID *pDeviceId,MS_U8 u8NumVSyncs, MS_U16 u16Timeout, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_SetHdmiSyncMode(XC_EX_HDMI_SYNC_TYPE esynctype);





DLL_PUBLIC XC_EX_HDMI_SYNC_TYPE MApi_XC_EX_GetHdmiSyncMode(void);
# 2631 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetRepWindow(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_WINDOW_TYPE Window, MS_U8 u8Color);







DLL_PUBLIC void MApi_XC_EX_Set_OPWriteOffEnable(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_ForceSet_OPWriteOffEnable(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable , XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_SetDispWinToReg(XC_DEVICE_ID *pDeviceId, XC_EX_WINDOW_TYPE *pstDspwin, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_GetDispWinFromReg(XC_DEVICE_ID *pDeviceId, XC_EX_WINDOW_TYPE *pstDspwin, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_FreezeImg(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_BOOL MApi_XC_EX_IsFreezeImg(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_GenerateBlackVideoForBothWin( XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC void MApi_XC_EX_Set_BLSK(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC void MApi_XC_EX_GenerateBlackVideo(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_IsBlackVideoEnable(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_EnableFrameBufferLess(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC MS_BOOL MApi_XC_EX_IsCurrentFrameBufferLessMode(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC void MApi_XC_EX_EnableRequest_FrameBufferLess(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC MS_BOOL MApi_XC_EX_IsCurrentRequest_FrameBufferLessMode(XC_DEVICE_ID *pDeviceId);




DLL_PUBLIC MS_U16 MApi_XC_EX_Get_3D_HW_Version(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Get_3D_IsSupportedHW2DTo3D(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_Mode(XC_DEVICE_ID *pDeviceId,
                            XC_EX_3D_INPUT_MODE e3dInputMode,
                            XC_EX_3D_OUTPUT_MODE e3dOutputMode,
                            XC_EX_3D_PANEL_TYPE e3dPanelType,
                            XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_MainWin_FirstMode(XC_DEVICE_ID *pDeviceId, MS_BOOL bMainFirst);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_LR_Frame_Exchg(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC MS_BOOL MApi_XC_EX_3D_Is_LR_Frame_Exchged(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC XC_EX_3D_INPUT_MODE MApi_XC_EX_Get_3D_Input_Mode(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC XC_EX_3D_OUTPUT_MODE MApi_XC_EX_Get_3D_Output_Mode(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC XC_EX_3D_PANEL_TYPE MApi_XC_EX_Get_3D_Panel_Type(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Get_3D_MainWin_First(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_BOOL MApi_XC_EX_3DMainSub_IPSync(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_VerVideoOffset(XC_DEVICE_ID *pDeviceId, MS_U16 u163DVerVideoOffset);
DLL_PUBLIC MS_U16 MApi_XC_EX_Get_3D_VerVideoOffset(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Is3DFormatSupported(XC_DEVICE_ID *pDeviceId,
                                    XC_EX_3D_INPUT_MODE e3dInputMode,
                                    XC_EX_3D_OUTPUT_MODE e3dOutputMode);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_HShift(XC_DEVICE_ID *pDeviceId, MS_U16 u16HShift);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Enable_3D_LR_Sbs2Line(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);
DLL_PUBLIC MS_U16 MApi_XC_EX_Get_3D_HShift(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_HW2DTo3D_Buffer(XC_DEVICE_ID *pDeviceId, MS_PHY u32HW2DTO3D_DD_Buf, MS_PHY u32HW2DTO3D_DR_Buf);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_HW2DTo3D_Parameters(XC_DEVICE_ID *pDeviceId, XC_EX_3D_HW2DTO3D_PARA st3DHw2DTo3DPara);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Get_3D_HW2DTo3D_Parameters(XC_DEVICE_ID *pDeviceId, XC_EX_3D_HW2DTO3D_PARA *pst3DHw2DTo3DPara);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_Detect3DFormat_Parameters(XC_DEVICE_ID *pDeviceId, XC_EX_3D_DETECT3DFORMAT_PARA *pstDetect3DFormatPara);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Get_3D_Detect3DFormat_Parameters(XC_DEVICE_ID *pDeviceId, XC_EX_3D_DETECT3DFORMAT_PARA *pstDetect3DFormatPara);
DLL_PUBLIC XC_EX_3D_INPUT_MODE MApi_XC_EX_Detect3DFormatByContent(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC MS_BOOL MApi_XC_EX_DetectNL(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow, XC_EX_DETECTNL_PARA* pstDetectNLatticePara);
DLL_PUBLIC MS_BOOL MApi_XC_EX_3D_PostPQSetting(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_FPInfo(XC_DEVICE_ID *pDeviceId, XC_EX_3D_FPINFO_PARA *pstFPInfoPara);
DLL_PUBLIC MS_BOOL MApi_XC_EX_EnableAutoDetect3D(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_3D_AUTODETECT_METHOD enDetectMethod);
DLL_PUBLIC MS_BOOL MApi_XC_EX_GetAutoDetect3DFlag(XC_DEVICE_ID *pDeviceId, XC_EX_3D_AUTODETECT_METHOD *penDetectMethod, MS_BOOL *pbEnable);
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_3D_SubWinClk(XC_DEVICE_ID *pDeviceId);




DLL_PUBLIC MS_BOOL MApi_XC_EX_3D_Is_LR_Sbs2Line(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC MS_BOOL MApi_SC_EX_3D_Is_Skip_Default_LR_Flag(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC MS_BOOL MApi_XC_EX_3D_Enable_Skip_Default_LR_Flag(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);

#ifdef UFO_XC_SCAN_TYPE





DLL_PUBLIC XC_EX_RETURN_VALUE SYMBOL_WEAK MApi_XC_EX_SetScanType(XC_EX_SCAN_TYPE enScanType);
#endif




#define XC_EX_MAX_SYNC_DATA_PATH_SUPPORTED (6)
#define XC_EX_MAX_ASYNC_DATA_PATH_SUPPORTED (2)
#define XC_EX_MAX_DATA_PATH_SUPPORTED (XC_EX_MAX_SYNC_DATA_PATH_SUPPORTED+XC_EX_MAX_ASYNC_DATA_PATH_SUPPORTED)





DLL_PUBLIC void MApi_XC_EX_Mux_Init(XC_DEVICE_ID *pDeviceId, void (*input_source_to_input_port)(XC_EX_INPUT_SOURCE_TYPE src_ids , E_MUX_INPUTPORT* port_ids , MS_U8* u8port_count ) );





DLL_PUBLIC void MApi_XC_EX_Mux_SourceMonitor(XC_DEVICE_ID *pDeviceId, MS_BOOL bRealTimeMonitorOnly);







DLL_PUBLIC MS_S16 MApi_XC_EX_Mux_CreatePath(XC_DEVICE_ID *pDeviceId, XC_EX_MUX_PATH_INFO* Path_Info, MS_U32 u32InitDataLen);







DLL_PUBLIC MS_S16 MApi_XC_EX_Mux_DeletePath(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE src, XC_EX_DEST_TYPE dest);







DLL_PUBLIC MS_S16 MApi_XC_EX_Mux_EnablePath(XC_DEVICE_ID *pDeviceId, MS_U16 PathId);
# 2842 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_Mux_TriggerPathSyncEvent(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE src , void* para);






DLL_PUBLIC void MApi_XC_EX_Mux_TriggerDestOnOffEvent(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE src , void* para);
# 2858 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_S16 MApi_XC_EX_Mux_OnOffPeriodicHandler(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE src, MS_BOOL bEnable);






DLL_PUBLIC MS_U8 MApi_XC_EX_Mux_GetPathInfo(XC_DEVICE_ID *pDeviceId, XC_EX_MUX_PATH_INFO* Paths);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Mux_SetSupportMhlPathInfo(XC_DEVICE_ID *pDeviceId, MS_U8 u8MhlSupportInfo);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Mux_SetMhlHotPlugInverseInfo(XC_DEVICE_ID *pDeviceId, MS_BOOL bIsMhlHotPlugInverse);






DLL_PUBLIC E_MUX_INPUTPORT MApi_XC_EX_Mux_GetHDMIPort( XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE src );






DLL_PUBLIC MS_U8 MApi_XC_EX_MUX_MapInputSourceToVDYMuxPORT( XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE u8InputSourceType );




DLL_PUBLIC void MApi_XC_EX_Set_NR(XC_DEVICE_ID *pDeviceId, MS_BOOL bEn, XC_EX_SCALER_WIN eWindow);

DLL_PUBLIC void MApi_XC_EX_FilmMode_P(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC MS_BOOL MApi_XC_EX_GetUCEnabled(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);




DLL_PUBLIC void MApi_XC_EX_GenSpecificTiming(XC_DEVICE_ID *pDeviceId, XC_EX_Internal_TimingType timingtype);
# 2923 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_GetDEBypassMode(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC void MApi_XC_EX_GetDEWindow(XC_DEVICE_ID *pDeviceId, XC_EX_WINDOW_TYPE *psWin, XC_EX_SCALER_WIN eWindow);
# 2940 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_GetDEWidthHeightInDEByPassMode(XC_DEVICE_ID *pDeviceId, MS_U16* pu16Width,MS_U16* pu16Height ,XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC void MApi_XC_EX_GetCaptureWindow(XC_DEVICE_ID *pDeviceId, XC_EX_WINDOW_TYPE* capture_win, XC_EX_SCALER_WIN eWindow);
# 2957 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetCaptureWindowVstart(XC_DEVICE_ID *pDeviceId, MS_U16 u16Vstart , XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_SetCaptureWindowHstart(XC_DEVICE_ID *pDeviceId, MS_U16 u16Hstart , XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_SetCaptureWindowVsize(XC_DEVICE_ID *pDeviceId, MS_U16 u16Vsize , XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_SetCaptureWindowHsize(XC_DEVICE_ID *pDeviceId, MS_U16 u16Hsize , XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC void MApi_XC_EX_SoftwareReset(XC_DEVICE_ID *pDeviceId, MS_U8 u8Reset, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U16 MApi_XC_EX_CalculateHFreqx10(XC_DEVICE_ID *pDeviceId, MS_U16 u16HPeriod);






DLL_PUBLIC MS_U32 MApi_XC_EX_CalculateHFreqx1K(XC_DEVICE_ID *pDeviceId, MS_U16 u16HPeriod);







DLL_PUBLIC MS_U16 MApi_XC_EX_CalculateVFreqx10(XC_DEVICE_ID *pDeviceId, MS_U16 u16HFreq, MS_U16 u16VTotal);







DLL_PUBLIC MS_U32 MApi_XC_EX_CalculateVFreqx1K(XC_DEVICE_ID *pDeviceId, MS_U32 u16HFreq, MS_U16 u16VTotal);






DLL_PUBLIC MS_U32 MApi_XC_EX_GetAccurateVFreqx1K(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
# 3032 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_InterruptAttach(XC_DEVICE_ID *pDeviceId, SC_EX_INT_SRC enIntNum, SC_EX_InterruptCb pIntCb, void * pParam);
# 3041 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_InterruptDeAttach(XC_DEVICE_ID *pDeviceId, SC_EX_INT_SRC enIntNum, SC_EX_InterruptCb pIntCb, void * pParam);





DLL_PUBLIC void MApi_XC_EX_DisableInputSource(XC_DEVICE_ID *pDeviceId, MS_BOOL bDisable, XC_EX_SCALER_WIN eWidnow);






DLL_PUBLIC MS_BOOL MApi_XC_EX_IsInputSourceDisabled(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_ChangePanelType(XC_DEVICE_ID *pDeviceId, XC_EX_PANEL_INFO *pstPanelInfo);
# 3070 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_U16 MApi_XC_EX_GetCurrentReadBank(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
# 3080 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_U16 MApi_XC_EX_GetCurrentWriteBank(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC void MApi_XC_EX_SetAutoPreScaling(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U8 MApi_XC_EX_GetVSyncWidth(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
# 3105 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_set_GOP_Enable(XC_DEVICE_ID *pDeviceId, MS_U8 MaxGOP, MS_U8 UseNum, MS_U8 u8MuxNum, MS_BOOL bEnable);






DLL_PUBLIC void MApi_XC_EX_ip_sel_for_gop(XC_DEVICE_ID *pDeviceId, MS_U8 u8MuxNum , XC_EX_IPSEL_GOP ipSelGop);




DLL_PUBLIC void MApi_XC_EX_SetVOPNBL(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC MS_BOOL MApi_XC_EX_GetDstInfo(XC_DEVICE_ID *pDeviceId, XC_EX_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo, XC_EX_GOP_XCDST_TYPE XCDstType);





DLL_PUBLIC void MApi_XC_EX_set_FD_Mask(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Get_FD_Mask(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC void MApi_XC_EX_set_FD_Mask_byWin(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Get_FD_Mask_byWin(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Get_FD_Mask_Status(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC void MApi_XC_EX_SetIP1TestPattern(XC_DEVICE_ID *pDeviceId, MS_U8 u8Enable, MS_U16 u6Pattern_type, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_InitIPForInternalTiming(XC_DEVICE_ID *pDeviceId, XC_EX_Internal_TimingType timingtype);





DLL_PUBLIC void MApi_XC_EX_SetIPMux(XC_DEVICE_ID *pDeviceId, MS_U8 u8Val);







DLL_PUBLIC MS_BOOL MApi_XC_EX_Is_H_Sync_Active(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_BOOL MApi_XC_EX_Is_V_Sync_Active(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
# 3197 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_GetAutoPositionWindow(XC_DEVICE_ID *pDeviceId, MS_U8 u8ValidData, XC_EX_SCALER_WIN eWindow, XC_EX_WINDOW_TYPE *pstAutoPositionWindow);
# 3209 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetFrameBufferAddress(XC_DEVICE_ID *pDeviceId, MS_PHY u32FBAddress, MS_PHY u32FBSize, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC MS_BOOL MApi_XC_EX_IsFrameBufferEnoughForCusScaling(XC_DEVICE_ID *pDeviceId, XC_EX_SETWIN_INFO *pstXC_SetWin_Info, XC_EX_SCALER_WIN eWindow);
# 3226 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetScalerMemoryRequest(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_MEMORY_REQUEST_TYPE eType, XC_EX_SCALER_WIN eWindow);
# 3239 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_Get_PixelData(XC_DEVICE_ID *pDeviceId, MS_U16 u16CorX, MS_U16 u16CorY, XC_EX_PIXEL_32BIT* pixel);
# 3249 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_U32 MApi_XC_EX_GetAvailableSize(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow, MS_U8 u8FBNum, MS_U32 u32InputSize);
# 3260 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetFrameColor(XC_DEVICE_ID *pDeviceId, MS_U32 u32aRGB);






DLL_PUBLIC void MApi_XC_EX_SetDispWindowColor(XC_DEVICE_ID *pDeviceId, MS_U8 u8Color, XC_EX_SCALER_WIN eWindow);
# 3276 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SupportSourceToVE(XC_DEVICE_ID *pDeviceId, MS_U16* pOutputCapability);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetOutputCapture(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SOURCE_TO_VE eSourceToVE);





DLL_PUBLIC void MApi_XC_EX_SetGammaOnOff (XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);






DLL_PUBLIC void MApi_XC_EX_SetPreGammaGain(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow, XC_EX_VOP_CHANNEL eVop_Channel, MS_U16 u16Val);






DLL_PUBLIC void MApi_XC_EX_SetPreGammaOffset(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow, XC_EX_VOP_CHANNEL eVop_Channel, MS_U16 u16Val);
# 3313 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetPanelTiming(XC_DEVICE_ID *pDeviceId, XC_EX_SetTiming_Info *pTimingInfo, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_SetOutTimingMode(XC_DEVICE_ID *pDeviceId, XC_EX_PNL_OUT_TIMING_MODE enPnl_Out_Timing_Mode);





DLL_PUBLIC void MApi_XC_EX_SetFreeRunTiming(XC_DEVICE_ID *pDeviceId);
# 3334 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_CustomerSyncInfo(XC_DEVICE_ID *pDeviceId, MS_U16 u16FrontPorch, MS_U16 u16SyncWidth, MS_U16 u16OutputVfreq);





DLL_PUBLIC MS_BOOL MApi_XC_EX_WaitFPLLDone(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC MS_U16 MApi_XC_EX_GetOutputVFreqX100(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC MS_BOOL MApi_XC_EX_FrameLockCheck(XC_DEVICE_ID *pDeviceId);
# 3371 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_CustomizeFRCTable(XC_DEVICE_ID *pDeviceId, XC_EX_FRC_SETTING* stFRCTable);
# 3380 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_OutputFrameCtrl(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_OUTPUTFRAME_Info * stOutFrameInfo,XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_SC_EX_Enable_FPLL_FSM(XC_DEVICE_ID *pDeviceId, MS_BOOL bTrue);
# 3397 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_SC_EX_ForceFreerun(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC MS_BOOL MApi_SC_EX_IsForceFreerun(XC_DEVICE_ID *pDeviceId);
# 3412 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_SC_EX_SetFreerunVFreq(XC_DEVICE_ID *pDeviceId, XC_EX_VFREQ_SEL VFreq);
# 3422 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_SetExPanelInfo(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_PANEL_INFO_EX *pPanelInfoEx);





DLL_PUBLIC void MApi_XC_EX_Enable_FPLL_Thresh_Mode(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_EnableIPAutoNoSignal(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow );






DLL_PUBLIC MS_BOOL MApi_XC_EX_GetIPAutoNoSignal(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow );





DLL_PUBLIC void MApi_XC_EX_EnableIPAutoCoast(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC void MApi_XC_EX_EnableIPCoastDebounce(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC void MApi_XC_EX_ClearIPCoastStatus(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC void MApi_XC_EX_EnableFpllManualSetting(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);






DLL_PUBLIC void MApi_XC_EX_FpllBoundaryTest(XC_DEVICE_ID *pDeviceId, MS_U32 u32FpllSetOffset, MS_U16 u16TestCnt);
# 3484 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetOffLineDetection ( XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE u8InputSourceType );





DLL_PUBLIC MS_U8 MApi_XC_EX_GetOffLineDetection( XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE u8InputSourceType);





DLL_PUBLIC MS_BOOL MApi_XC_EX_SetOffLineSogThreshold(XC_DEVICE_ID *pDeviceId, MS_U8 u8Threshold);





DLL_PUBLIC MS_BOOL MApi_XC_EX_SetOffLineSogBW(XC_DEVICE_ID *pDeviceId, MS_U8 u8BW);





DLL_PUBLIC MS_BOOL MApi_XC_EX_OffLineInit(XC_DEVICE_ID *pDeviceId);
# 3517 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_Set_Extra_fetch_adv_line(XC_DEVICE_ID *pDeviceId, MS_U8 u8val);





DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetVGASogEn(XC_DEVICE_ID *pDeviceId, MS_BOOL bVGASogEn);






DLL_PUBLIC void MApi_XC_EX_EnableWindow(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Is_SubWindowEanble(XC_DEVICE_ID *pDeviceId);
# 3545 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetBorderFormat( XC_DEVICE_ID *pDeviceId, MS_U8 u8Left, MS_U8 u8Right, MS_U8 u8Up, MS_U8 u8Down, MS_U8 u8color, XC_EX_SCALER_WIN eWindow );






DLL_PUBLIC void MApi_XC_EX_EnableBorder(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_ZorderMainWindowFirst(XC_DEVICE_ID *pDeviceId, MS_BOOL bMainFirst);
# 3568 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_PQ_LoadFunction(XC_DEVICE_ID *pDeviceId, PQ_EX_Function_Info* function_Info , MS_U32 u32InitDataLen);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Check_HNonLinearScaling(XC_DEVICE_ID *pDeviceId);
# 3588 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_EnableEuroHdtvSupport(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);
# 3597 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_EnableEuroHdtvDetection(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);
# 3608 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_U8 MApi_XC_EX_ReadByte(MS_U32 u32Reg);






DLL_PUBLIC void MApi_XC_EX_WriteByte(MS_U32 u32Reg, MS_U8 u8Val);







DLL_PUBLIC void MApi_XC_EX_WriteByteMask(MS_U32 u32Reg, MS_U8 u8Val, MS_U8 u8Msk);







DLL_PUBLIC void MApi_XC_EX_Write2ByteMask(MS_U32 u32Reg, MS_U16 u16val, MS_U16 u16Mask);
# 3642 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_W2BYTE(XC_DEVICE_ID *pDeviceId, MS_U32 u32Reg, MS_U16 u16Val);






DLL_PUBLIC MS_U16 MApi_XC_EX_R2BYTE(XC_DEVICE_ID *pDeviceId, MS_U32 u32Reg);






DLL_PUBLIC void MApi_XC_EX_W4BYTE(XC_DEVICE_ID *pDeviceId, MS_U32 u32Reg, MS_U32 u32Val);






DLL_PUBLIC MS_U32 MApi_XC_EX_R4BYTE(XC_DEVICE_ID *pDeviceId, MS_U32 u32Reg);







DLL_PUBLIC MS_U16 MApi_XC_EX_R2BYTEMSK(XC_DEVICE_ID *pDeviceId, MS_U32 u32Reg, MS_U16 u16Mask);







DLL_PUBLIC void MApi_XC_EX_W2BYTEMSK(XC_DEVICE_ID *pDeviceId, MS_U32 u32Reg, MS_U16 u16Val, MS_U16 u16Mask);
# 3689 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_MLoad_Init(XC_DEVICE_ID *pDeviceId, MS_PHY PhyAddr, MS_U32 u32BufByteLen);





DLL_PUBLIC void MApi_XC_EX_MLoad_Enable(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);




DLL_PUBLIC XC_EX_MLOAD_TYPE MApi_XC_EX_MLoad_GetStatus(XC_DEVICE_ID *pDeviceId);







DLL_PUBLIC MS_BOOL MApi_XC_EX_MLoad_WriteCmd_And_Fire(XC_DEVICE_ID *pDeviceId, MS_U32 u32Addr, MS_U16 u16Data, MS_U16 u16Mask);
# 3717 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_MLoad_WriteCmds_And_Fire(XC_DEVICE_ID *pDeviceId, MS_U32 *pu32Addr, MS_U16 *pu16Data, MS_U16 *pu16Mask, MS_U16 u16CmdCnt);
# 3727 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_MLG_Init(XC_DEVICE_ID *pDeviceId, MS_PHY PhyAddr, MS_U32 u32BufByteLen);




DLL_PUBLIC void MApi_XC_EX_MLG_Enable(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC MS_BOOL MApi_XC_EX_MLG_GetCaps(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC XC_EX_MLG_TYPE MApi_XC_EX_MLG_GetStatus(XC_DEVICE_ID *pDeviceId);
# 3753 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetOSD2VEMode(XC_DEVICE_ID *pDeviceId, XC_EX_VOP_SEL_OSD_XC2VE_MUX eVOPSelOSD_MUX);





DLL_PUBLIC void MApi_XC_EX_IP2_PreFilter_Enable(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);
# 3770 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_GET_PixelRGB_ReturnValue MApi_XC_EX_Get_Pixel_RGB(XC_DEVICE_ID *pDeviceId, XC_EX_Get_Pixel_RGB *pData, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_KeepPixelPointerAppear(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);






DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_MemFmtEx(XC_DEVICE_ID *pDeviceId, XC_EX_MEM_FMT eMemFmt, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_IsRequestFrameBufferLessMode(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SkipSWReset(XC_DEVICE_ID *pDeviceId, MS_BOOL bFlag);

DLL_PUBLIC void MApi_XC_EX_EnableRepWindowForFrameColor(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);
# 3808 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetOSDLayer(XC_DEVICE_ID *pDeviceId, XC_EX_VOP_OSD_LAYER_SEL eVOPOSDLayer, XC_EX_SCALER_WIN eWindow);




DLL_PUBLIC XC_EX_VOP_OSD_LAYER_SEL MApi_XC_EX_GetOSDLayer(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);
# 3823 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetVideoAlpha(XC_DEVICE_ID *pDeviceId, MS_U8 u8Val, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_GetVideoAlpha(XC_DEVICE_ID *pDeviceId, MS_U8 *pu8Val, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SkipWaitVsync( XC_DEVICE_ID *pDeviceId, MS_BOOL eWindow, MS_BOOL bIsSkipWaitVsyn);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_OP2VOPDESel(XC_DEVICE_ID *pDeviceId, XC_EX_OP2VOP_DE_SEL eVopDESel);







DLL_PUBLIC void MApi_XC_EX_FRC_SetWindow(XC_DEVICE_ID *pDeviceId, XC_EX_3D_INPUT_MODE e3dInputMode, XC_EX_3D_OUTPUT_MODE e3dOutputMode, XC_EX_3D_PANEL_TYPE e3dPanelType);






DLL_PUBLIC MS_BOOL MApi_XC_EX_Enable_TwoInitFactor(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_IsFieldPackingModeSupported(void);
# 3874 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_PreInit( XC_DEVICE_ID *pDeviceId, XC_EX_PREINIT eType ,void* para, MS_U32 u32Length);
# 3883 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_Get_BufferData(XC_DEVICE_ID *pDeviceId, XC_EX_OUTPUTDATA_TYPE eBufType, XC_EX_WINDOW_TYPE *pRect, void *pRectBuf, XC_EX_SCALER_WIN eWindow);
# 3893 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_Set_BufferData(XC_DEVICE_ID *pDeviceId, XC_EX_INPUTDATA_TYPE eBufType, XC_EX_WINDOW_TYPE *pDstRect, void *pSrcBuf, XC_EX_WINDOW_TYPE *pSrcRect, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC void MApi_XC_EX_EnableMainWindow(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC void MApi_XC_EX_EnableSubWindow(XC_DEVICE_ID *pDeviceId, XC_EX_WINDOW_TYPE *pstDispWin);





DLL_PUBLIC void MApi_XC_EX_DisableSubWindow(XC_DEVICE_ID *pDeviceId);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetPixelShift(XC_DEVICE_ID *pDeviceId, MS_S8 s8H, MS_S8 s8V);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetVideoOnOSD(XC_DEVICE_ID *pDeviceId, XC_EX_VIDEO_ON_OSD_LAYER enlayer, XC_EX_SCALER_WIN eWindow);
# 3937 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetOSDBlendingFormula(XC_DEVICE_ID *pDeviceId, E_XC_EX_OSD_INDEX enOsdIndex, XC_EX_OSD_BlENDING_TYPE enType, XC_EX_SCALER_WIN eWindow);
# 3956 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_ReportPixelInfo(XC_DEVICE_ID *pDeviceId, XC_EX_REPORT_PIXELINFO *pstRepPixInfo);
# 3965 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC void MApi_XC_EX_SetScaling( XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALING_TYPE eScaling_type, XC_EX_VECTOR_TYPE eVector_type, XC_EX_SCALER_WIN eWindow );







DLL_PUBLIC void MApi_XC_EX_SetMCDIBufferAddress(XC_DEVICE_ID *pDeviceId, MS_PHY u32FBAddress, MS_PHY u32FBSize, XC_EX_MCDI_TYPE eType);






DLL_PUBLIC void MApi_XC_EX_EnableMCDI(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_MCDI_TYPE eType);
# 3990 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_SendCmdToFRC( XC_DEVICE_ID *pDeviceId, MS_U8 u8Cmd, MS_U8 count, XC_EX_FRC_R2_CMD_PARAMETER pFRC_R2_Para );
# 3999 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_GetMsgFromFRC(XC_DEVICE_ID *pDeviceId, MS_U8* pu8Cmd, MS_U8* pu8ParaCount, MS_U8* pu8Para);






DLL_PUBLIC void MApi_XC_EX_EnableRWBankAuto(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_SetWRBankMappingNum(XC_DEVICE_ID *pDeviceId, MS_U8 u8Val, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U8 MApi_XC_EX_GetWRBankMappingNum(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_U8 MApi_XC_EX_GetWRBankMappingNumForZap(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC MS_BOOL MApi_XC_EX_SetBOBMode(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC void MApi_XC_EX_SetForceReadBank(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, MS_U8 u8Bank, XC_EX_SCALER_WIN eWindow);
# 4052 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_LD_Init(XC_DEVICE_ID *pDeviceId, XC_EX_LD_PANEL_TYPE eLDPanelType );
# 4064 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_EX_LD_SetMemoryAddress(XC_DEVICE_ID *pDeviceId, MS_U8 u8MIU ,MS_U32 u32LDFBase0,MS_U32 u32LDFBase1,MS_U32 u32LDBBase0,MS_U32 u32LDBBase1,MS_U32 u32EDGE2DBase,MS_U32 u32LEDoffset);





DLL_PUBLIC MS_BOOL MApi_XC_EX_LD_SetLevel(XC_DEVICE_ID *pDeviceId, XC_EX_LD_MODE eMode);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_TurnoffLDBL(XC_DEVICE_ID *pDeviceId, MS_BOOL bturnoffbl);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_notUpdateSPIDataFlags(XC_DEVICE_ID *pDeviceId, MS_BOOL brefreshSpidata);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_UsermodeLDFlags(XC_DEVICE_ID *pDeviceId, MS_BOOL buserLDFlags);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Set_BLLevel(XC_DEVICE_ID *pDeviceId, MS_U8 u8BLLevel);






DLL_PUBLIC void MApi_XC_EX_Set_BWS_Mode(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC void MApi_XC_EX_FRC_ColorPathCtrl(XC_DEVICE_ID *pDeviceId, MS_U16 u16Path_sel, MS_BOOL bEnable);







DLL_PUBLIC void MApi_XC_EX_FRC_OP2_SetRGBGain(XC_DEVICE_ID *pDeviceId, MS_U16 u16RedGain, MS_U16 u16GreenGain, MS_U16 u16BlueGain);







DLL_PUBLIC void MApi_XC_EX_FRC_OP2_SetRGBOffset(XC_DEVICE_ID *pDeviceId, MS_U16 u16RedOffset, MS_U16 u16GreenOffset, MS_U16 u16BlueOffset);





DLL_PUBLIC void MApi_XC_EX_FRC_OP2_SetDither(XC_DEVICE_ID *pDeviceId, MS_U16 u16dither);






DLL_PUBLIC MS_BOOL MApi_XC_EX_FRC_BypassMFC(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_ForceReadFrame(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, MS_U16 u16FrameIndex);





DLL_PUBLIC void MApi_XC_EX_SetCsc( XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_SCALER_WIN eWindow );





DLL_PUBLIC void MApi_XC_EX_RegisterPQSetFPLLThreshMode(XC_DEVICE_ID *pDeviceId, void (*fpPQCB)(MS_U8 u8PQWin));





DLL_PUBLIC MS_BOOL MApi_XC_EX_GetFreeRunStatus(XC_DEVICE_ID *pDeviceId);





DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Get_DSForceIndexSupported(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Set_DSForceIndex(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, MS_U8 u8Index, XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Set_DSIndexSourceSelect(XC_DEVICE_ID *pDeviceId, XC_EX_DS_INDEX_SOURCE eDSIdxSrc, XC_EX_SCALER_WIN eWindow);
# 4194 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_OSDC_InitSetting(XC_DEVICE_ID *pDeviceId,
                                             XC_EX_OSDC_TGEN_Type E_XC_OSDC_TGEN_Type,
                                             XC_EX_OSDC_TGEN_INFO *pstOC_Tgen_Cus,
                                             XC_EX_OSDC_CTRL_INFO *pstOC_Ctrl);





DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_OSDC_Control(XC_DEVICE_ID *pDeviceId, MS_U32 eCtrl_type);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_OSDC_GetDstInfo(XC_DEVICE_ID *pDeviceId, XC_EX_OSDC_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);





DLL_PUBLIC void MApi_XC_EX_OSDC_SetOutVfreqx10(XC_DEVICE_ID *pDeviceId, MS_U16 u16Vfreq);






DLL_PUBLIC void MApi_XC_EX_BYPASS_SetOSDVsyncPos(XC_DEVICE_ID *pDeviceId, MS_U16 u16VsyncStart, MS_U16 u16VsyncEnd);






DLL_PUBLIC void MApi_XC_EX_BYPASS_SetInputSrc(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_BYPASS_InputSource input);





DLL_PUBLIC void MApi_XC_EX_BYPASS_SetCSC(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);
# 4246 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_SetSeamlessZapping(XC_DEVICE_ID *pDeviceId, XC_EX_SCALER_WIN eWindow, MS_BOOL bEnable);






DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Vtrack_SetPayloadData(XC_DEVICE_ID *pDeviceId, MS_U16 u16Timecode, MS_U8 u8OperatorID);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Vtrack_SetUserDefindedSetting(XC_DEVICE_ID *pDeviceId, MS_BOOL bUserDefinded, MS_U8 *pu8Setting);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Vtrack_Enable(XC_DEVICE_ID *pDeviceId, MS_U8 u8FrameRate, MS_BOOL bEnable);






DLL_PUBLIC void MApi_XC_EX_PreSetPQInfo(XC_DEVICE_ID *pDeviceId, XC_EX_SETWIN_INFO *pstXC_SetWin_Info, XC_EX_SCALER_WIN eWindow);





DLL_PUBLIC MS_BOOL MApi_XC_EX_Is_OP1_TestPattern_Enabled(XC_DEVICE_ID *pDeviceId);







DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Set_OP1_TestPattern(XC_DEVICE_ID *pDeviceId, XC_EX_OP1_PATTERN ePattern, XC_EX_OP1_PATGEN_MODE eMode);
# 4301 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC XC_EX_RETURN_VALUE MApi_XC_EX_Set_WhiteBalance_Pattern(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, MS_U16 u16R_CR_Data, MS_U16 u16G_Y_Data ,MS_U16 u16B_CB_Data);
# 4310 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_EX.h"
DLL_PUBLIC MS_BOOL SYMBOL_WEAK MApi_XC_EX_Get3DFormat(XC_DEVICE_ID *pDeviceId, XC_EX_3D_ATTRIBUTE_TYPE e3DAttrType, void* para, void* p3DFormat);


#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio_v2.h"
#ifndef _DMX_TSIO_V2_H_
#define _DMX_TSIO_V2_H_ 

#include "MsDevice.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 121 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio_v2.h"
typedef struct DLL_PACKED _DMX_TSIO_Service_SetDMAoutVC_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    TSIO_DMAOUT_SET* eSet;
}DMX_TSIO_Service_SetDMAoutVC_PARAM,*PDMX_TSIO_Service_SetDMAoutVC_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_DMAout_WriteGet_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    MS_PHY* pphyWrite;
}DMX_TSIO_Service_DMAout_WriteGet_PARAM, *PDMX_TSIO_Service_DMAout_WriteGet_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_SetDestination_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    TSIO_SERVICEDEST eDest;
}DMX_TSIO_Service_SetDestination_PARAM,*PDMX_TSIO_Service_SetDestination_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_DMAin_PidOpen_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    MS_U16 u16Pid;
    MS_U16* pu16FltId;
}DMX_TSIO_Service_DMAin_PidOpen_PARAM,*PDMX_TSIO_Service_DMAin_PidOpen_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_DMAin_PidClose_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    MS_U16 u16FltId;
}DMX_TSIO_Service_DMAin_PidClose_PARAM,*PDMX_TSIO_Service_DMAin_PidClose_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_SetDMAinVC_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    TSIO_DMAIN_SET* eSet;
}DMX_TSIO_Service_SetDMAinVC_PARAM,*PDMX_TSIO_Service_SetDMAinVC_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_DMAinVC_Start_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    MS_U32 u32Pacing;
}DMX_TSIO_Service_DMAinVC_Start_PARAM,*PDMX_TSIO_Service_DMAinVC_Start_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_SetLocdecKey_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    TSIO_LOCKEY_SET* eSet;
}DMX_TSIO_Service_SetLocdecKey_PARAM,*PDMX_TSIO_Service_SetLocdecKey_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_LocdecKeyEnable_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    MS_BOOL bEnable;
}DMX_TSIO_Service_LocdecKeyEnable_PARAM,*PDMX_TSIO_Service_LocdecKeyEnable_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_PidOpen_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    DMX_TSIF eTSOInSrc;
    MS_U16 u16Pid;
    MS_U16* pu16DmxId;
}DMX_TSIO_Service_PidOpen_PARAM,*PDMX_TSIO_Service_PidOpen_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_PidClose_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
    MS_U16 u16DmxId;
}DMX_TSIO_Service_PidClose_PARAM,*PDMX_TSIO_Service_PidClose_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_Alloc_PARAM
{
    MS_U32 u32Res;
    MS_U8 u8Sid;
    MS_U16* u16Handle;
}DMX_TSIO_Service_Alloc_PARAM,*PDMX_TSIO_Service_Alloc_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Service_Free_PARAM
{
    MS_U32 u32Res;
    MS_U16 u16Handle;
}DMX_TSIO_Service_Free_PARAM,*PDMX_TSIO_Service_Free_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_RegisterIntCb_PARAM
{
    MS_U32 u32Res;
    TSIOIntTypeCB efn;
}DMX_TSIO_RegisterIntCb_PARAM,*PDMX_TSIO_RegisterIntCb_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Init_PARAM
{
    MS_U32 u32Res;
    TSIO_Init_Set* eParm;
}DMX_TSIO_Init_PARAM,*PDMX_TSIO_Init_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Open_PARAM
{
    MS_U32 u32Res;
    TSIO_CLK eClk;
}DMX_TSIO_Open_PARAM, *PDMX_TSIO_Open_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_Cmd_PARAM
{
    MS_U32 u32Res;
    TSIO_CMD eCmd;
    MS_U32 u32Value;
}DMX_TSIO_Cmd_PARAM,*PDMX_TSIO_Cmd_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_CC_PARAM
{
    MS_U32 u32Res;
    TSIO_CC_Set* Parm;
    TSIO_CC_RESULT* pResult;
}DMX_TSIO_CC_PARAM,*PDMX_TSIO_CC_PARAM;

typedef struct DLL_PACKED _DMX_TSIO_GetInfo_PARAM
{
    MS_U32 u32Res;
    TSIO_INFO eInfo;
    MS_U32 u32Arg;
    MS_U32* u32Retinfo;
}DMX_TSIO_GetInfo_PARAM,*PDMX_TSIO_GetInfo_PARAM;

#ifdef __cplusplus
}
#endif


#endif
# 103 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNDSRASP.h"
#ifndef _DRVRASP_H_
#define _DRVRASP_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "UFO.h"



#define RASP_PIDFLT_START_NUM 0
#define RASP_PIDFLT_END_NUM 24

#define RASP_PIDFLT_NUM_ALL 24

#define RASP_ECMFLT_START_NUM 0
#define RASP_ECMFLT_END_NUM 6

#define RASP_ECMFLT_NUM_ALL 6

#ifdef HW_PVR_ENABLE
    #define PVR_PIDFLT_START_NUM 0
    #define PVR_PIDFLT_END_NUM 16

    #define PVR_PIDFLT_NUM_ALL 16
#endif

#define CALLBACK_SIZE_MIN 16

#define DRVRASP_PID_NULL 0x1FFF
#define MSIF_RASP_LIB_CODE {'R','A','S','P'}
#define MSIF_RASP_LIBVER {'0','2'}
#define MSIF_RASP_BUILDNUM {'0','0'}
#define MSIF_RASP_CHANGELIST {'0','0','5','1','1','4','7','0'}

#define RASP_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_RASP_LIB_CODE, \
    MSIF_RASP_LIBVER, \
    MSIF_RASP_BUILDNUM, \
    MSIF_RASP_CHANGELIST, \
    MSIF_OS
# 166 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNDSRASP.h"
typedef enum
{
    DRVRASP_FAIL = 0,
    DRVRASP_OK,
    DRVRASP_INVALID_PARAM,
    DRVRASP_FUNC_ERROR,
} RASP_RESULT;

typedef enum
{
    E_NDS_OK,
    E_NDS_FAIL,

} NDS_Result;

typedef struct _NDS_RASP_Param
{
    MS_PHYADDR ecm_addr;
    MS_U8 *pu8ecm_buf;
    MS_U32 ecm_size;

    MS_PHYADDR payload_addr;
    MS_U8 *pu8playload_buf;
    MS_U32 payload_size;

} NDS_RASP_Param;

#define DrvRASP_Event MS_U32
#define E_DRVRASP_EVENT_DATA_INIT 0x00000000

#define E_DRVRASP_EVENT_CALLBACK_SIZE_MET 0x00000040



#define E_DRVRASP_BYPASS_AFE 0x00000001
#define E_DRVRASP_BYPASS_TPD 0x00000002
#define E_DRVRASP_BYPASS_SP 0x00000004
#define E_DRVRASP_BYPASS_OPCR 0x00000008
#define E_DRVRASP_BYPASS_PCR 0x00000010
#define E_DRVRASP_BYPASS_ESPI 0x00000020
#define E_DRVRASP_BYPASS_RAI 0x00000040
#define E_DRVRASP_BYPASS_DI 0x00000080
#define E_DRVRASP_BYPASS_ESNS 0x00000100
#define E_DRVRASP_BYPASS_ESES 0x00000200
#define E_DRVRASP_BYPASS_ESOS 0x00000400
#define E_DRVRASP_BYPASS_PUSI 0x00000800
#define E_DRVRASP_BYPASS_FPR 0x00001000
#define E_DRVRASP_BYPASS_RASP_Tick 0x80000000

typedef enum
{
    E_NDSRASP_CAP_FILTER_NUM = 0,
    E_NDSRASP_CAP_FILTER_PVR_NUM,
    E_NDSRASP_CAP_PVR_ALIGN,
    E_NDSRASP_CAP_RESOURCE_SIZE,
    E_NDSRASP_CAP_RASP_NUM,
    E_NDSRASP_CAP_ECMFLT_NUM,
    E_NDSRASP_CAP_EVENT_FIFO_DEPTH,
    E_NDSRASP_CAP_EVENT_NUM,
    E_NDSRASP_CAP_NULL,
} NDSRASP_Cap;


typedef enum
{
    E_DRVRASP_FLT_STATE_FREE = 0x00000000,
    E_DRVRASP_FLT_STATE_ALLOC = 0x00000001,
    E_DRVRASP_FLT_STATE_ENABLE = 0x00000002,
    E_DRVRASP_FLT_STATE_OVERFLOW = 0x00010000,
    E_DRVRASP_FLT_STATE_NA = 0xFFFFFFFF,
} DrvRASP_FltState;


typedef enum
{

    E_DRVRASP_REC_MODE_PID = 0x00000000,

    E_DRVRASP_REC_MODE_ALL = 0x00000001,
} DrvRASP_RecMode;


typedef enum
{
    E_DRVRASP_MODE_PAYLOAD = 0x00000000,

    E_DRVRASP_MODE_ECM = 0x00000001,
} DrvRASP_CtrlMode;



typedef enum
{
    E_DRVRASP_IF_PLAYBACK = 0x0,
    E_DRVRASP_IF_PVR0 = 0x1,
} DrvRASP_If;

typedef struct
{
# 277 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNDSRASP.h"
    MS_U8 u8PVREngNum;
} DrvRASP_Msg;

typedef enum
{
    STR2MIU = 0x0,
    PAYLOAD2MIU = 0x1,
    ECM2MIU = 0x2,
} NDSRASP_RecType;

typedef enum
{
    RASP_OUT_188 = 0,
    RASP_OUT_192
} RASP_OUTSIZE_e;

typedef enum
{
    RASP_IN_188,
    RASP_IN_192
} RASP_INPUTSIZE_e;

typedef enum{
    EVENT_WATERMARK,
    TIMER_WATERMARK,
}WATERMARK_TYPE;

typedef enum
{
    WATERMARK_50MS = 0,
    WATERMARK_200MS = 1,
    WATERMARK_500MS = 2,
}TIME_WATERMARK_e;


typedef enum
{
    NDSRASP_CB_STR2RAM = 0,
    NDSRASP_CB_PAYLOAD2RAM,
    NDSRASP_CB_ECM2RAM,
    NDSRASP_CB_ECMREADY,
    NDSRASP_CB_EVENTMARK,
    NDSRASP_CB_TIMEMARK,
    NDSRASP_CB_EVENTWRITE_OVF,
    NDSRASP_CB_EVENTREAD_OVF,
}NDSRASP_Event_e;

typedef enum
{
    CMDQ_WR_LEVEL_EMPTY=0,
 CMDQ_WR_LEVEL_25_FULL,
 CMDQ_WR_LEVEL_50_FULL,
 CMDQ_WR_LEVEL_75_FULL,
}FILEIN_CMDQ_LEVEL;


typedef struct
{
    NDSRASP_Event_e eEvent;
    MS_U16 length;
    MS_U16 index;
    MS_U32 write_ptr;
    MS_U8 *pRetBuf;
} NDSRaspCallBack_t;

typedef struct
{
    MS_U32 Event_Descriptor;
    MS_U32 Pid;
    MS_U32 PacketNum;
    MS_U32 Timer;
    MS_U32 PCR;

}NDS_RASP_EVENT;

#if defined(UFO_PUBLIC_HEADER_500_3)
typedef enum
{
    RASP_FLOW_INPUT_TS0,
    RASP_FLOW_INPUT_TS1,
    RASP_FLOW_INPUT_TS2,
    RASP_FLOW_INPUT_TS3,
    RASP_FLOW_INPUT_TS4,
    RASP_FLOW_INPUT_TS5,
    RASP_FLOW_INPUT_TS6,
    RASP_FLOW_INPUT_DEMOD0,
    RASP_FLOW_INPUT_DEMOD1,
    RASP_FLOW_INPUT_MEM,
} RASP_FLOW_INPUT;
#else
typedef enum
{
    RASP_FLOW_INPUT_DEMOD,
    RASP_FLOW_INPUT_TS0,
    RASP_FLOW_INPUT_TS1,
    RASP_FLOW_INPUT_MEM,
} RASP_FLOW_INPUT;
#endif

typedef enum
{
    RASP_FLOW_OUTPUT_PVR,
    RASP_FLOW_OUTPUT_PLAYBACK,
} RASP_FLOW_OUTPUT;


typedef void (*P_DrvRASP_EvtCallback)(DrvRASP_Event eEvent, DrvRASP_Msg *pMsg);
typedef void (*P_DrvRASP_EventCB)(MS_U32 RaspID, NDS_RASP_EVENT* event_ptr , MS_U16 event_size, MS_U16 event_index);

typedef void (*P_NDSRASP_Callback)(MS_U8 RaspID, NDSRaspCallBack_t *pMsg);






MS_U32 NDS_RASP_InitLibResource(void* pResMemAddr);
MS_U32 NDS_RASP_Init(void);
MS_U32 NDS_RASP_Exit(void);
MS_U32 NDS_RASP_Reset(void);

MS_U32 NDS_RASP_GetTSIFStatus(MS_U32 u32RASPEng, MS_BOOL* pbExtSyc, MS_BOOL* pbParl, MS_BOOL *pbDataSWP);
MS_U32 NDS_RASP_FileinEnable(MS_U32 u32RASPEng, MS_BOOL bEn);
MS_U32 NDS_RASP_GetFileinEnable(MS_U32 u32RASPEng, MS_BOOL* bEn);


MS_U32 NDS_RASP_GetCap(NDSRASP_Cap eCap, void* pOutput);
MS_U32 NDS_RASP_GetLibVer(const MSIF_Version **ppVersion);
MS_U32 NDS_RASP_GetTimerAndPacketNum(const MSIF_Version **ppVersion);
MS_U32 NDS_RASP_GetTsPayload(const MSIF_Version **ppVersion);
MS_U32 NDS_RASP_GetEventMask(const MSIF_Version **ppVersion);


#if 0
MS_U32 NDS_RASP_SetBuffer(MS_U32 u32RASPEng, MS_PHYADDR u32BufStart0, MS_PHYADDR u32BufStart1, MS_U32 u32BufSize0, MS_U32 u32BufSize1);
#endif
MS_U32 NDS_RASP_CtrlConfig(MS_U32 u32RASPEng,DrvRASP_CtrlMode eCtrlMode,MS_BOOL bEnable);
MS_U32 NDS_RASP_PvrEngStart(MS_U32 u32RASPEng,DrvRASP_RecMode eRecMode,MS_BOOL bEnable);
MS_U32 NDS_RASP_Pause(MS_U32 u32RASPEng, MS_BOOL bPause);
MS_U32 NDS_RASP_GetWriteAddr(MS_U32 u32RASPEng, MS_PHYADDR *pu32WriteAddr);
MS_U32 NDS_RASP_SetNotify(MS_U32 u32RASPEng, DrvRASP_Event eEvents, P_DrvRASP_EvtCallback pfCallback);
MS_U32 NDS_RASP_SetPacketMode(MS_U32 u32RASPEng, NDSRASP_RecType eRecType, RASP_OUTSIZE_e eOutSize);
MS_U32 NDS_RASP_SetRecordTimeStamp(MS_U32 u32RASPEng, MS_U32 u32Stamp);
MS_U32 NDS_RASP_GetRecordTimeStamp(MS_U32 u32RASPEng, MS_U32* u32Stamp);
MS_U32 NDS_RASP_GetCurrentPktStatus(MS_U32 u32RASPEng, MS_U32* u32PktStamp, MS_U32* u32PktNumber);
MS_U32 NDS_RASP_TimeStampSelRecordStampSrc(MS_U32 u32RASPEng, MS_BOOL bLocal);
MS_U32 NDS_RASP_AllocFlt(MS_U32 u32RASPEng, MS_U32 *pu16PidFltId);
MS_U32 NDS_RASP_FreeFlt(MS_U32 u32RASPEng, MS_U32 u32PidFltId);
MS_U32 NDS_RASP_AllocECMFlt(MS_U32 u32RASPEng,MS_U16 * pu16ECMFltId);
MS_U32 NDS_RASP_FreeECMFlt(MS_U32 u32RASPEng,MS_U16 u16ECMFltId);
MS_U32 NDS_RASP_SetPid(MS_U32 u32RASPEng, MS_U16 u16Fltid, MS_U16 u16Pid);
MS_U32 NDS_RASP_GetPid(MS_U32 u32RASPEng, MS_U16 u16Fltid, MS_U16 *pu16Pid);
MS_U32 NDS_RASP_AttachInterrupt(InterruptCb pIntCb);
MS_U32 NDS_RASP_EnableInterrupt(void);
MS_U32 NDS_RASP_CallbackSize(MS_U32 u32RASPEng, MS_U32* pu32CallbackSize, MS_BOOL bSet);





MS_U32 NDS_RASP_SetEventMask(MS_U32 u32RASPEng, MS_U16 u16Flt, MS_U32 u32Event);
MS_U32 NDS_RASP_SetWatermark(MS_U32 u32RASPEng, WATERMARK_TYPE WType, MS_BOOL bEnable);
MS_U32 NDS_RASP_AdvEnable(MS_U32 u32RASPEng, DrvRASP_RecMode eRecMode, MS_BOOL bEn);
MS_U32 NDS_RASP_Rec_PID(MS_U32 u32RASPEng, MS_BOOL bEnRecordPid);

MS_U32 NDS_RASP_SetPayloadMask(MS_U32 u32RASPEng, MS_U16 u16Flt, MS_U32 u32Payload);
MS_U32 NDS_RASP_SetDataSwap(MS_U32 u32RASPEng, MS_BOOL bEn);

MS_U32 NDS_PROC_RASP_PVR_SizeMet(MS_U32 u32RASPEng);
MS_U32 NDS_RASP_CallbackIntCheck(MS_U32 u32RASPEng, MS_BOOL* bInterrupted);
MS_U32 NDS_RASP_CallbackIntClr(MS_U32 u32RASPEng);

NDS_Result NDS_RASP_Init2(NDS_RASP_Param *Param);
NDS_Result NDS_RASP_Exit2(void);

MS_U32 NDS_RASP_SetFileIn_Config(MS_U32 RaspEng, MS_U32 StartAddr, MS_U32 FileInSize);
MS_U32 NDS_RASP_FileIn_Start(MS_U32 RaspEng);
MS_U32 NDS_RASP_192FileIn_Start(MS_U32 RaspEng);
MS_U32 NDS_RASP_SetFileIn_Timer(MS_U32 RaspEng, MS_U16 u16Timer);
MS_U32 NDS_RASP_SetFileIn_PktSize(MS_U32 RaspEng, MS_U16 PktSize);
MS_BOOL NDS_RASP_IsFileIn_Done(MS_U32 RaspEng);
MS_U32 NDS_RASP_FileIn_Flush(MS_U32 RaspEng);
MS_U32 NDS_RASP_SetBufInfo(MS_U32 u32RASPEng, NDSRASP_RecType eRecType, MS_PHYADDR u32BufStart0, MS_PHYADDR u32BufStart1, MS_U32 u32BufSize0, MS_U32 u32BufSize1);
MS_U32 NDS_RASP_FileinInit(MS_U32 u32RASPEng);

MS_U32 NDS_RASP_FileIn_BypassTimeStamp(MS_U32 u32RASPEng,MS_BOOL bypass);
MS_U32 NDS_RASP_FileIn_SetPlaybackTimeStamp(MS_U32 u32RASPEng,MS_U32 u32Stamp);
MS_U32 NDS_RASP_FileIn_GetPlaybackTimeStamp(MS_U32 u32RASPEng);
MS_BOOL NDS_RASP_FileIn_IsCMDQ_Full(MS_U32 RaspEng);
MS_BOOL NDS_RASP_FileIn_IsCMDQ_Empty(MS_U32 RaspEng);
MS_BOOL NDS_RASP_FileIn_GetCmdQueueLevel(MS_U32 RaspEng,FILEIN_CMDQ_LEVEL * peCMDQLvl);
MS_BOOL NDS_RASP_FileIn_GetEmptyNum(MS_U32 RaspEng,MS_U8 * peCMDQCnt);
MS_U32 NDS_RASP_FileIn_Timer(MS_U32 RaspEng,MS_BOOL bEnFileInTimer,MS_U16 u16Timer);
#ifdef UFO_PUBLIC_HEADER_500_3
MS_BOOL NDS_RASP_FileIn_Init_TimeStamp(MS_U32 RaspEng,MS_U32 u32SetPacketTimeStamp);
#else
MS_BOOL NDS_RASP_FileIn_Init_TimeStamp(MS_U32 RaspEng,MS_BOOL u32SetPacketTimeStamp);
#endif
MS_BOOL NDS_RASP_Reset_EventPktCounter(MS_U32 RaspEng);
MS_BOOL NDS_RASP_Reset_EventPktTimer(MS_U32 RaspEng);
MS_BOOL NDS_RASP_GetEventDescriptor(MS_U32 RaspEng,NDS_RASP_EVENT * pEventDesc,MS_U32 u32ArraySize);
MS_U16 NDS_RASP_GetEventNumber(MS_U32 RaspEng);

MS_BOOL NDS_RASP_FlowSet(MS_U32 rasp_eng, RASP_FLOW_INPUT eSource, RASP_FLOW_OUTPUT eDest, MS_BOOL bPara, MS_BOOL bExtSync, MS_BOOL bDataSWP, RASP_INPUTSIZE_e eMode );
MS_U32 NDS_RASP_RaspEngStart(MS_U32 u32RASPEng, DrvRASP_CtrlMode eCtrlMode, MS_BOOL bEnable);
MS_BOOL NDS_RASP_Livein_Config(MS_U32 rasp_eng);

void NDS_RASP_SetDbgLevel(MS_U32 level);
MS_U32 NDS_RASP_SetPayloadTimeStamp(MS_U32 u32RASPEng , MS_U32 u32TimeStamp);
MS_U32 NDS_RASP_GetPayloadTimeStamp(MS_U32 u32RASPEng , MS_U32 *pu32TimeStamp);
MS_U32 NDS_RASP_GetPayloadWriteAddr(MS_U32 u32RASPEng, MS_PHYADDR *pu32WriteAddr);

MS_U32 NDS_RASP_SetECMPid(MS_U32 u32RASPEng, MS_U16 u16Fltid, MS_U16 u16Pid);
MS_U32 NDS_RASP_SetCallBack(MS_U32 u32RASPEng, P_NDSRASP_Callback pfCallback);
MS_U32 NDS_RASP_Set_EventNotify(MS_U32 u32RASPEng,P_DrvRASP_EventCB CallBackFun);
MS_BOOL NDS_RASP_SetEvent_Threshold(MS_U32 u32RASPEng,MS_U8 u8Threshold );
MS_BOOL NDS_RASP_SetTime_Timeout(MS_U32 u32RASPEng,TIME_WATERMARK_e timeout);

MS_U32 NDS_RASP_SetECMTimeStamp(MS_U32 u32RASPEng,MS_U32 u32Stamp);
MS_U32 NDS_RASP_GetECMTimeStamp(MS_U32 u32RASPEng,MS_U32 * u32Stamp);

MS_BOOL NDS_RASP_SetEventCounter(MS_U32 RaspEng,MS_U32 ValueInitial);
MS_BOOL NDS_RASP_SetEventTimer(MS_U32 RaspEng,MS_U32 ValueInitial);

#ifdef __cplusplus
}
#endif
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvURDMA.h"
#ifndef __MDRV_URDMA_H__
#define __MDRV_URDMA_H__ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
# 122 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvURDMA.h"
#define URDMA_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'U','D','M','A'}, \
    {'0','1'}, \
    {'0','1'}, \
    {'0','0','0','0','0','0','0','0'}, \
    MSIF_OS


typedef MS_U32 DRVURDMA_RESULT;





#define DRVURDMA_PASS 0x00000000
#define DRVURDMA_TX_BUSY 0x00000001
#define DRVURDMA_RX_BUSY 0x00000002
#define DRVURDMA_INVALID_PARAM 0x00000003
#define DRVURDMA_MIU_ADDR_ERROR 0x00000004
#define DRVURDMA_FATAL_ERROR 0x00000005





typedef enum _URDMA_DbgLv
{
     E_URDMA_DBGLV_NONE
    ,E_URDMA_DBGLV_ERR_ONLY
    ,E_URDMA_DBGLV_INFO
    ,E_URDMA_DBGLV_ALL
}URDMA_DbgLv;

typedef enum
{
    E_URDMA_UART = 0,
    E_URDMA_DMA,
} URDMA_Mode;

typedef enum
{
    E_URDMA_CIRCULAR = 0,
    E_URDMA_LINE,
} URDMA_OPmode;




DRVURDMA_RESULT MDrv_UrDMA_GetLibVer(const MSIF_Version **ppVersion);
void MDrv_UrDMA_SetDbgLevel(MS_U8 level);
DRVURDMA_RESULT MDrv_UrDMA_TxInit(MS_PHYADDR *tx_buf, MS_U16 tx_size);
DRVURDMA_RESULT MDrv_UrDMA_RxInit(MS_PHYADDR *rx_buf, MS_U16 rx_size);
DRVURDMA_RESULT MDrv_UrDMA_Polling_Tx_Done(void);
void MDrv_UrDMA_ISR(void);
void MDrv_UrDMA_SelMode(URDMA_Mode eMode);
void MDrv_UrDMA_Engine(MS_BOOL bEnable);
void MDrv_UrDMA_Init(void *dma_rx_cb, void *dma_tx_cb, URDMA_OPmode eOp_mode);
#ifdef MS_DEBUG
void MDrv_UrDMA_DumpREG(void);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT.h"
#ifndef _DRV_DVBT_H_
#define _DRV_DVBT_H_ 

#include "MsCommon.h"
#include "drvDMD_common.h"
#include "MsOS.h"
#include "UFO.h"
#ifdef __cplusplus
extern "C"
{
#endif
# 123 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT.h"
#define MSIF_DMD_DVBT_INTERN_LIB_CODE {'D','V', 'B','T'}
#define MSIF_DMD_DVBT_INTERN_LIBVER {'0','1'}
#define MSIF_DMD_DVBT_INTERN_BUILDNUM {'2','1' }
#define MSIF_DMD_DVBT_INTERN_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_DVBT_INTERN_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_DVBT_INTERN_LIB_CODE, \
    MSIF_DMD_DVBT_INTERN_LIBVER, \
    MSIF_DMD_DVBT_INTERN_BUILDNUM, \
    MSIF_DMD_DVBT_INTERN_CHANGELIST, \
    MSIF_OS

#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))




typedef enum
{
  T_DVBT2_NOCHAN_Flag = 0xF1,
  T_DVBT_NOCHAN_Flag = 0xF2,
  T_DETECT_DONE_FLAG = 0xF3,
} DVT_FLAG;

typedef enum
{
    DMD_DBGLV_NONE,
    DMD_DBGLV_INFO,
    DMD_DBGLV_NOTICE,
    DMD_DBGLV_WARNING,
    DMD_DBGLV_ERR,
    DMD_DBGLV_CRIT,
    DMD_DBGLV_ALERT,
    DMD_DBGLV_EMERG,
    DMD_DBGLV_DEBUG,
} DMD_DbgLv;

typedef enum
{
    E_DMD_LOCK,
    E_DMD_CHECKING,
    E_DMD_CHECKEND,
    E_DMD_UNLOCK,
    E_DMD_NULL,
} DMD_LOCK_STATUS;

typedef enum
{
    E_DMD_DMD_DVBT_GETLOCK,
    E_DMD_COFDM_FEC_LOCK,
    E_DMD_COFDM_PSYNC_LOCK,
    E_DMD_COFDM_TPS_LOCK,
    E_DMD_COFDM_DCR_LOCK,
    E_DMD_COFDM_AGC_LOCK,
    E_DMD_COFDM_MODE_DET,
    E_DMD_COFDM_TPS_EVER_LOCK,
    E_DMD_COFDM_NO_CHANNEL,
    E_DMD_COFDM_NO_CHANNEL_IFAGC,
    E_DMD_COFDM_ATV_DETECT,
    E_DMD_COFDM_BER_LOCK,
    E_DMD_COFDM_SNR_LOCK,
    E_DMD_COFDM_TR_LOCK,
} DMD_DVBT_GETLOCK_TYPE;

typedef enum
{
    E_DMD_RF_CH_BAND_6MHz = 0x01,
    E_DMD_RF_CH_BAND_7MHz = 0x02,
    E_DMD_RF_CH_BAND_8MHz = 0x03,
    E_DMD_RF_CH_BAND_INVALID
} DMD_RF_CHANNEL_BANDWIDTH;

typedef enum
{
    E_DMD_DVBT_N_PARAM_VERSION = 0x00,
    E_DMD_DVBT_N_OP_RFAGC_EN,
    E_DMD_DVBT_N_OP_HUMDET_EN,
    E_DMD_DVBT_N_OP_DCR_EN,
    E_DMD_DVBT_N_OP_IIS_EN,
    E_DMD_DVBT_N_OP_CCI_EN,
    E_DMD_DVBT_N_OP_ACI_EN,
    E_DMD_DVBT_N_OP_IQB_EN,
    E_DMD_DVBT_N_OP_AUTO_IQ_SWAP_EN,
    E_DMD_DVBT_N_OP_AUTO_RF_MAX_EN,
    E_DMD_DVBT_N_OP_FORCE_ACI_EN,
    E_DMD_DVBT_N_OP_FIX_MODE_CP_EN,
    E_DMD_DVBT_N_OP_FIX_TPS_EN,
    E_DMD_DVBT_N_OP_AUTO_SCAN_MODE_EN,
    E_DMD_DVBT_N_CFG_RSSI,
    E_DMD_DVBT_N_CFG_ZIF,

    E_DMD_DVBT_N_CFG_NIF,
    E_DMD_DVBT_N_CFG_LIF,
    E_DMD_DVBT_N_CFG_SAWLESS,
    E_DMD_DVBT_N_CFG_FS_L,
    E_DMD_DVBT_N_CFG_FS_H,
    E_DMD_DVBT_N_CFG_FIF_L,
    E_DMD_DVBT_N_CFG_FIF_H,
    E_DMD_DVBT_N_CFG_FC_L,
    E_DMD_DVBT_N_CFG_FC_H,
    E_DMD_DVBT_N_CFG_BW,
    E_DMD_DVBT_N_CFG_MODE,
    E_DMD_DVBT_N_CFG_CP,
    E_DMD_DVBT_N_CFG_LP_SEL,
    E_DMD_DVBT_N_CFG_CSTL,
    E_DMD_DVBT_N_CFG_HIER,
    E_DMD_DVBT_N_CFG_HPCR,

    E_DMD_DVBT_N_CFG_LPCR,
    E_DMD_DVBT_N_CFG_IQ_SWAP,
    E_DMD_DVBT_N_CFG_RFMAX,
    E_DMD_DVBT_N_CFG_CCI,
    E_DMD_DVBT_N_CFG_ICFO_RANGE,
    E_DMD_DVBT_N_CFG_RFAGC_REF,
    E_DMD_DVBT_N_CFG_IFAGC_REF_2K,
    E_DMD_DVBT_N_CFG_IFAGC_REF_8K,
    E_DMD_DVBT_N_CFG_IFAGC_REF_ACI,
    E_DMD_DVBT_N_CFG_IFAGC_REF_IIS,
    E_DMD_DVBT_N_CFG_IFAGC_REF_2K_H,
    E_DMD_DVBT_N_CFG_IFAGC_REF_8K_H,
    E_DMD_DVBT_N_CFG_IFAGC_REF_ACI_H,
    E_DMD_DVBT_N_CFG_IFAGC_REF_IIS_H,
    E_DMD_DVBT_N_CFG_TS_SERIAL,
    E_DMD_DVBT_N_CFG_TS_CLK_INV,

    E_DMD_DVBT_N_CFG_TS_DATA_SWAP,
    E_DMD_DVBT_N_CFG_8M_DACI_DET_TH_L,
    E_DMD_DVBT_N_CFG_8M_DACI_DET_TH_H,
    E_DMD_DVBT_N_CFG_8M_ANM1_DET_TH_L,
    E_DMD_DVBT_N_CFG_8M_ANM1_DET_TH_H,
    E_DMD_DVBT_N_CFG_8M_ANP1_DET_TH_L,
    E_DMD_DVBT_N_CFG_8M_ANP1_DET_TH_H,
    E_DMD_DVBT_N_CFG_7M_DACI_DET_TH_L,
    E_DMD_DVBT_N_CFG_7M_DACI_DET_TH_H,
    E_DMD_DVBT_N_CFG_7M_ANM1_DET_TH_L,
    E_DMD_DVBT_N_CFG_7M_ANM1_DET_TH_H,
    E_DMD_DVBT_N_CFG_7M_ANP1_DET_TH_L,
    E_DMD_DVBT_N_CFG_7M_ANP1_DET_TH_H,

    E_DMD_DVBT_N_CFO10K_L,
    E_DMD_DVBT_N_CFO10K_H,
    E_DMD_DVBT_N_SNR100_L,
    E_DMD_DVBT_N_SNR100_H,

    E_DMD_DVBT_N_AGC_LOCK_TH,
    E_DMD_DVBT_N_AGC_LOCK_NUM,
    E_DMD_DVBT_N_ADC_PGA_GAIN_I,
    E_DMD_DVBT_N_ADC_PGA_GAIN_Q,
    E_DMD_DVBT_N_PWDN_ADCI,
    E_DMD_DVBT_N_PWDN_ADCQ,
    E_DMD_DVBT_N_MPLL_ADC_DIV_SEL,
    E_DMD_DVBT_N_DCR_LOCK,
    E_DMD_DVBT_N_MIXER_IQ_SWAP_MODE,
    E_DMD_DVBT_N_CCI_BYPASS,
    E_DMD_DVBT_N_CCI_LOCK_DET,
    E_DMD_DVBT_N_CCI_FSWEEP_L,
    E_DMD_DVBT_N_CCI_FSWEEP_H,
    E_DMD_DVBT_N_CCI_KPKI,
    E_DMD_DVBT_N_INTP_RATEM1_0,

    E_DMD_DVBT_N_INTP_RATEM1_1,
    E_DMD_DVBT_N_INTP_RATEM1_2,
    E_DMD_DVBT_N_INTP_RATEM1_3,
    E_DMD_DVBT_N_8K_MC_MODE,
    E_DMD_DVBT_N_8K_MC_CP,
    E_DMD_DVBT_N_8K_MC_CPOBS_NUM,
    E_DMD_DVBT_N_8K_MODECP_DET,
    E_DMD_DVBT_N_2K_MC_MODE,
    E_DMD_DVBT_N_2K_MC_CP,
    E_DMD_DVBT_N_2K_MC_CPOBS_NUM,
    E_DMD_DVBT_N_2K_MODECP_DET,
    E_DMD_DVBT_N_ICFO_SCAN_WINDOW_L,
    E_DMD_DVBT_N_ICFO_SCAN_WINDOW_H,
    E_DMD_DVBT_N_ICFO_MAX_OFFSET_L,
    E_DMD_DVBT_N_ICFO_MAX_OFFSET_H,
    E_DMD_DVBT_N_ICFO_DONE,

    E_DMD_DVBT_N_TPS_SYNC_LOCK,
    E_DMD_DVBT_N_CONSTELLATION,
    E_DMD_DVBT_N_HIERARCHY,
    E_DMD_DVBT_N_HP_CODE_RATE,
    E_DMD_DVBT_N_LP_CODE_RATE,
    E_DMD_DVBT_N_GUARD_INTERVAL,
    E_DMD_DVBT_N_TRANSMISSION_MODE,
    E_DMD_DVBT_N_OFDM_SYMBOL_NUMBER,
    E_DMD_DVBT_N_LENGTH_INDICATOR,
    E_DMD_DVBT_N_FRAME_NUMBER,
    E_DMD_DVBT_N_CELL_IDENTIFIER,
    E_DMD_DVBT_N_DVBH_SIGNALLING,
    E_DMD_DVBT_N_SNR_2K_ALPHA,
    E_DMD_DVBT_N_SNR_8K_ALPHA,
    E_DMD_DVBT_N_TS_EN,
    E_DMD_DVBT_N_2K_DAGC1_REF,

    E_DMD_DVBT_N_8K_DAGC1_REF,
    E_DMD_DVBT_N_2K_8K_DAGC2_REF,
    E_DMD_DVBT_N_IF_INV_PWM_OUT_EN,
    E_DMD_DVBT_N_RESERVE_0,
    E_DMD_DVBT_N_RESERVE_1,
    E_DMD_DVBT_N_RESERVE_2,
    E_DMD_DVBT_N_RESERVE_3,
    E_DMD_DVBT_N_RESERVE_4,
    E_DMD_DVBT_N_RESERVE_5,
    E_DMD_DVBT_N_RESERVE_6,
    E_DMD_DVBT_N_RESERVE_7,
    E_DMD_DVBT_N_RESERVE_8,
    E_DMD_DVBT_N_RESERVE_9,
    E_DMD_DVBT_N_RESERVE_10,
    E_DMD_DVBT_N_RESERVE_11,
}DVBT_N_Param;

typedef enum
{

E_DMD_DVBT_PARAM_VERSION = 0x00,

E_DMD_DVBT_OP_AUTO_SCAN_MODE_EN,
E_DMD_DVBT_CFG_FREQ,
E_DMD_DVBT_CFG_BW,
E_DMD_DVBT_CFG_MODE,
E_DMD_DVBT_CFG_CP,
E_DMD_DVBT_CFG_LP_SEL,
E_DMD_DVBT_CFG_CSTL,
E_DMD_DVBT_CFG_HIER,
E_DMD_DVBT_CFG_HPCR,
E_DMD_DVBT_CFG_LPCR,


E_DMD_DVBT_OP_RFAGC_EN,
E_DMD_DVBT_OP_HUMDET_EN,
E_DMD_DVBT_OP_AUTO_RF_MAX_EN,
E_DMD_DVBT_CFG_RFMAX,
E_DMD_DVBT_CFG_ZIF,
E_DMD_DVBT_CFG_RSSI,
E_DMD_DVBT_CFG_RFAGC_REF,
E_DMD_DVBT_AGC_K,
E_DMD_DVBT_CFG_IFAGC_REF_2K,
E_DMD_DVBT_CFG_IFAGC_REF_8K,
E_DMD_DVBT_CFG_IFAGC_REF_ACI,
E_DMD_DVBT_CFG_IFAGC_REF_IIS,
E_DMD_DVBT_AGC_REF,
E_DMD_DVBT_AGC_LOCK_TH,
E_DMD_DVBT_AGC_LOCK_NUM,
E_DMD_DVBT_AGC_GAIN_LOCK,


E_DMD_DVBT_PWDN_ADCI,
E_DMD_DVBT_PWDN_ADCQ,
E_DMD_DVBT_MPLL_ADC_DIV_SEL,


E_DMD_DVBT_OP_DCR_EN,
E_DMD_DVBT_DCR_LOCK,
E_DMD_DVBT_DCR_LEAKY_I_FF_0,
E_DMD_DVBT_DCR_LEAKY_I_FF_1,
E_DMD_DVBT_DCR_LEAKY_I_FF_2,
E_DMD_DVBT_DCR_LEAKY_Q_FF_0,
E_DMD_DVBT_DCR_LEAKY_Q_FF_1,
E_DMD_DVBT_DCR_LEAKY_Q_FF_2,


E_DMD_DVBT_OP_IIS_EN,


E_DMD_DVBT_CFG_FC_L,
E_DMD_DVBT_CFG_FC_H,
E_DMD_DVBT_CFG_FS_L,
E_DMD_DVBT_CFG_FS_H,
E_DMD_DVBT_MIXER_IQ_SWAP_MODE,
E_DMD_DVBT_MIXER_IQ_SWAP_OUT_0,
E_DMD_DVBT_MIXER_IQ_SWAP_OUT_1,
E_DMD_DVBT_MIXER_IQ_SWAP_OUT_2,
E_DMD_DVBT_MIXER_IQ_SWAP_OUT_3,
E_DMD_DVBT_MIXER_IQ_DBG_SEL,


E_DMD_DVBT_OP_IQB_EN,
E_DMD_DVBT_OP_AUTO_IQ_SWAP_EN,
E_DMD_DVBT_CFG_IQ_SWAP,
E_DMD_DVBT_IQB_PHASE_COARSE_0,
E_DMD_DVBT_IQB_PHASE_COARSE_1,
E_DMD_DVBT_IQB_GAIN_COARSE_0,
E_DMD_DVBT_IQB_GAIN_COARSE_1,


E_DMD_DVBT_OP_ACI_EN,
E_DMD_DVBT_OP_AUTO_ACI_EN,
E_DMD_DVBT_CFG_ACI_DET_TH_L,
E_DMD_DVBT_CFG_ACI_DET_TH_H,


E_DMD_DVBT_OP_CCI_EN,
E_DMD_DVBT_CFG_CCI,
E_DMD_DVBT_CCI_BYPASS,
E_DMD_DVBT_CCI_TRACK_SW_RST,
E_DMD_DVBT_CCI_LOCK_DET,
E_DMD_DVBT_CCI_FREQN_OUT_0,
E_DMD_DVBT_CCI_FREQN_OUT_1,


E_DMD_DVBT_CFG_2K_SFO_DELAY_TIME_H,
E_DMD_DVBT_CFG_2K_SFO_DELAY_TIME_L,
E_DMD_DVBT_CFG_8K_SFO_DELAY_TIME_H,
E_DMD_DVBT_CFG_8K_SFO_DELAY_TIME_L,
E_DMD_DVBT_INTP_RATEM1_0,
E_DMD_DVBT_INTP_RATEM1_1,
E_DMD_DVBT_INTP_RATEM1_2,
E_DMD_DVBT_INTP_RATEM1_3,


E_DMD_DVBT_OP_FIX_MODE_CP_EN,
E_DMD_DVBT_8K_MC_MODE,
E_DMD_DVBT_8K_MC_CP,
E_DMD_DVBT_8K_MC_CPOBS_NUM,
E_DMD_DVBT_8K_MODECP_DET,
E_DMD_DVBT_2K_MC_MODE,
E_DMD_DVBT_2K_MC_CP,
E_DMD_DVBT_2K_MC_CPOBS_NUM,
E_DMD_DVBT_2K_MODECP_DET,


E_DMD_DVBT_CFG_ICFO_RANGE,

E_DMD_DVBT_ICFO_SCAN_WINDOW_0,
E_DMD_DVBT_ICFO_SCAN_WINDOW_1,
E_DMD_DVBT_ICFO_MAX_OFFSET_0,
E_DMD_DVBT_ICFO_MAX_OFFSET_1,
E_DMD_DVBT_ICFO_DONE,


E_DMD_DVBT_OP_FIX_TPS_EN,
E_DMD_DVBT_TPS_SYNC_LOCK,
E_DMD_DVBT_CONSTELLATION,
E_DMD_DVBT_HIERARCHY,
E_DMD_DVBT_HP_CODE_RATE,
E_DMD_DVBT_LP_CODE_RATE,
E_DMD_DVBT_GUARD_INTERVAL,
E_DMD_DVBT_TRANSMISSION_MODE,
E_DMD_DVBT_OFDM_SYMBOL_NUMBER,
E_DMD_DVBT_LENGTH_INDICATOR,
E_DMD_DVBT_FRAME_NUMBER,
E_DMD_DVBT_CELL_IDENTIFIER,
E_DMD_DVBT_DVBH_SIGNALLING,


E_DMD_DVBT_SNR_ACCU_0,
E_DMD_DVBT_SNR_ACCU_1,
E_DMD_DVBT_SNR_ACCU_2,
E_DMD_DVBT_SNR_ACCU_3,
E_DMD_DVBT_BIT_ERR_NUM_7_0,
E_DMD_DVBT_BIT_ERR_NUM_15_8,
E_DMD_DVBT_BIT_ERR_NUM_23_16,
E_DMD_DVBT_BIT_ERR_NUM_31_24,
E_DMD_DVBT_UNCRT_PKT_NUM_7_0,
E_DMD_DVBT_UNCRT_PKT_NUM_15_8,


E_DMD_DVBT_CFG_TS_SERIAL,
E_DMD_DVBT_CFG_TS_CLK_RATE,
E_DMD_DVBT_CFG_TS_CLK_INV,
E_DMD_DVBT_CFG_TS_DATA_SWAP,
E_DMD_DVBT_TS_EN,
E_DMD_DVBT_TS_SOURCE_SEL,
E_DMD_DVBT_DVBTM_TS_CLK_POL,
E_DMD_DVBT_DVBTM_TS_CLK_DIVNUM,
E_DMD_DVBT_EN_TS_PAD,
E_DMD_DVBT_IF_INV_PWM_OUT_EN,


E_DMD_DVBT_RESERVE_1,
E_DMD_DVBT_RESERVE_2,
E_DMD_DVBT_RESERVE_3,
E_DMD_DVBT_RESERVE_4,


E_DMD_DVBT_CHECKSUM,
} DVBT_Param;


typedef void (*fpIntCallBack)(MS_U8 u8arg);
typedef struct
{

    MS_U8 u8SarChannel;
    DMD_RFAGC_SSI *pTuner_RfagcSsi;
    MS_U16 u16Tuner_RfagcSsi_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_LoRef;
    MS_U16 u16Tuner_IfagcSsi_LoRef_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_HiRef;
    MS_U16 u16Tuner_IfagcSsi_HiRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_LoRef;
    MS_U16 u16Tuner_IfagcErr_LoRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_HiRef;
    MS_U16 u16Tuner_IfagcErr_HiRef_Size;
    DMD_SQI_CN_NORDIGP1 *pSqiCnNordigP1;
    MS_U16 u16SqiCnNordigP1_Size;


    MS_U8 *u8DMD_DVBT_DSPRegInitExt;
    MS_U8 u8DMD_DVBT_DSPRegInitSize;
    MS_U8 *u8DMD_DVBT_InitExt;
} DMD_DVBT_InitData;

typedef enum
{
    E_DMD_DVBT_FAIL=0,
    E_DMD_DVBT_OK=1
} DMD_DVBT_Result;


typedef enum
{
    E_DMD_DVBT_MODULATION_INFO,
    E_DMD_DVBT_DEMOD_INFO,
    E_DMD_DVBT_LOCK_INFO,
    E_DMD_DVBT_PRESFO_INFO,
    E_DMD_DVBT_LOCK_TIME_INFO,
    E_DMD_DVBT_BER_INFO,
    E_DMD_DVBT_AGC_INFO,
} DMD_DVBT_INFO_TYPE;

typedef struct
{
    MS_U16 u16Version;
    MS_U8 u16DemodState;
 float SfoValue;
 float TotalCfo;
    MS_U16 u16ChannelLength;
 MS_U8 u8Fft;
 MS_U8 u8Constel;
 MS_U8 u8Gi;
 MS_U8 u8HpCr;
 MS_U8 u8LpCr;
 MS_U8 u8Hiearchy;
 MS_U8 u8Fd;
 MS_U8 u8ChLen;
 MS_U8 u8SnrSel;
 MS_U8 u8PertoneNum;
 MS_U8 u8DigAci;
 MS_U8 u8FlagCi;
 MS_U8 u8TdCoef;
} DMD_DVBT_Info;
# 581 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT.h"
extern MS_BOOL MDrv_DMD_DVBT_Init(DMD_DVBT_InitData *pDMD_DVBT_InitData, MS_U32 u32InitDataLen);



extern MS_BOOL MDrv_DMD_DVBT_Exit(void);







extern MS_U32 SYMBOL_WEAK MDrv_DMD_DVBT_GetConfig(DMD_DVBT_InitData *pDMD_DVBT_InitData);
# 610 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT.h"
extern MS_BOOL MDrv_DMD_DVBT_SetDbgLevel(DMD_DbgLv u8DbgLevel);




extern DMD_DVBT_Info* MDrv_DMD_DVBT_GetInfo(DMD_DVBT_INFO_TYPE eInfoType);




extern MS_BOOL MDrv_DMD_DVBT_GetLibVer(const MSIF_Version **ppVersion);





extern MS_BOOL MDrv_DMD_DVBT_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern MS_BOOL MDrv_DMD_DVBTGetFWVer(MS_U16 *ver);




extern MS_BOOL MDrv_DMD_DVBT_SetReg(MS_U16 u16Addr, MS_U8 u8Data);



extern MS_BOOL MDrv_DMD_DVBT_SetSerialControl(MS_BOOL bEnable);



extern MS_BOOL MDrv_DMD_DVBT_SetConfig(DMD_RF_CHANNEL_BANDWIDTH BW, MS_BOOL bSerialTS, MS_BOOL bPalBG);



extern MS_BOOL MDrv_DMD_DVBT_SetConfigHPLP(DMD_RF_CHANNEL_BANDWIDTH BW, MS_BOOL bSerialTS, MS_BOOL bPalBG, MS_BOOL bLPSel);



extern MS_BOOL MDrv_DMD_DVBT_SetConfigHPLPSetIF(DMD_RF_CHANNEL_BANDWIDTH BW, MS_BOOL bSerialTS, MS_BOOL bPalBG, MS_BOOL bLPSel, MS_U32 u32IFFreq, MS_U32 u32FSFreq, MS_U8 u8IQSwap);



extern MS_BOOL MDrv_DMD_DVBT_SetActive(MS_BOOL bEnable);



extern MS_BOOL MDrv_DMD_DVBT_GetLock(DMD_DVBT_GETLOCK_TYPE eType, DMD_LOCK_STATUS *eLockStatus);



extern MS_BOOL MDrv_DMD_DVBT_GetSignalStrength(MS_U16 *u16Strength);



extern MS_BOOL MDrv_DMD_DVBT_GetSignalStrengthWithRFPower(MS_U16 *u16Strength, float fRFPowerDbm);



extern MS_BOOL MDrv_DMD_DVBT_GetSignalQuality(MS_U16 *u16Quality);



extern MS_BOOL MDrv_DMD_DVBT_GetSignalQualityWithRFPower(MS_U16 *u16Quality, float fRFPowerDbm);



extern MS_BOOL MDrv_DMD_DVBT_GetSNR(float *fSNR);



extern MS_BOOL MDrv_DMD_DVBT_GetPostViterbiBer(float *ber);



extern MS_BOOL MDrv_DMD_DVBT_GetPreViterbiBer(float *ber);



extern MS_BOOL MDrv_DMD_DVBT_GetPacketErr(MS_U16 *pktErr);



extern MS_BOOL MDrv_DMD_DVBT_GetTPSInfo(MS_U16 *u16Info);



extern MS_BOOL MDrv_DMD_DVBT_GetCellID(MS_U16 *u16CellID);



extern MS_BOOL MDrv_DMD_DVBT_GetFreqOffset(float *pFreqOff);



extern MS_BOOL MDrv_DMD_DVBT_NORDIG_SSI_Table_Write(DMD_CONSTEL constel, DMD_CODERATE code_rate, float write_value);



extern MS_BOOL MDrv_DMD_DVBT_NORDIG_SSI_Table_Read(DMD_CONSTEL constel, DMD_CODERATE code_rate, float *read_value);

extern MS_U32 MDrv_DMD_DVBT_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef UFO_DEMOD_DVBT_SUPPORT_DMD_INT
MS_BOOL MDrv_DMD_DVBT_Reg_INT_CB(fpIntCallBack fpCBReg);
#endif

#ifdef __cplusplus
}
#endif


#endif
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx.h"
#ifndef _API_HDMITX_H_
#define _API_HDMITX_H_ 

#include "MsDevice.h"
#include "MsTypes.h"
#include "MsCommon.h"






#ifdef __cplusplus
extern "C"
{
#endif
# 161 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx.h"
#define MSIF_HDMITX_LIB_CODE {'H','D','M','I'}
#define MSIF_HDMITX_LIBVER {'0','0'}
#define MSIF_HDMITX_BUILDNUM {'2','0'}
#define MSIF_HDMITX_CHANGELIST {'0','0','6','7','7','7','7','2'}
#define HDMITX_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_HDMITX_LIB_CODE, \
    MSIF_HDMITX_LIBVER, \
    MSIF_HDMITX_BUILDNUM, \
    MSIF_HDMITX_CHANGELIST, \
    MSIF_OS

typedef enum
{
    HDMITX_DVI = 0,
    HDMITX_DVI_HDCP = 1,
    HDMITX_HDMI = 2,
    HDMITX_HDMI_HDCP = 3,
} HDMITX_OUTPUT_MODE;

typedef enum
{
    HDMITX_SEND_PACKET = 0x00,
    HDMITX_CYCLIC_PACKET = 0x04,
    HDMITX_STOP_PACKET = 0x80,
} HDMITX_PACKET_PROCESS;

typedef enum
{
    HDMITX_NULL_PACKET = 0x00,
    HDMITX_ACR_PACKET = 0x01,
    HDMITX_AS_PACKET = 0x02,
    HDMITX_GC_PACKET = 0x03,
    HDMITX_ACP_PACKET = 0x04,
    HDMITX_ISRC1_PACKET = 0x05,
    HDMITX_ISRC2_PACKET = 0x06,
    HDMITX_DSD_PACKET = 0x07,
    HDMITX_HBR_PACKET = 0x09,
    HDMITX_GM_PACKET = 0x0A,

    HDMITX_VS_INFOFRAME = 0x81,
    HDMITX_AVI_INFOFRAME = 0x82,
    HDMITX_SPD_INFOFRAME = 0x83,
    HDMITX_AUDIO_INFOFRAME = 0x84,
    HDMITX_MPEG_INFOFRAME = 0x85,
    HDMITX_HDR_INFOFRMAE = 0x87,
} HDMITX_PACKET_TYPE;

typedef enum
{
    HDMITX_VIDEO_CD_NoID = 0,
    HDMITX_VIDEO_CD_24Bits = 4,
    HDMITX_VIDEO_CD_30Bits = 5,
    HDMITX_VIDEO_CD_36Bits = 6,
    HDMITX_VIDEO_CD_48Bits = 7,
} HDMITX_VIDEO_COLORDEPTH_VAL;

typedef enum
{
    HDMITX_VIDEO_COLOR_RGB444 = 0,
    HDMITX_VIDEO_COLOR_YUV422 = 1,
    HDMITX_VIDEO_COLOR_YUV444 = 2,
    HDMITX_VIDEO_COLOR_YUV420 = 3,
} HDMITX_VIDEO_COLOR_FORMAT;

typedef enum
{
    HDMITX_RES_640x480p =0,
    HDMITX_RES_720x480i = 1,
    HDMITX_RES_720x576i = 2,
    HDMITX_RES_720x480p = 3,
    HDMITX_RES_720x576p = 4,
    HDMITX_RES_1280x720p_50Hz = 5,
    HDMITX_RES_1280x720p_60Hz = 6,
    HDMITX_RES_1920x1080i_50Hz = 7,
    HDMITX_RES_1920x1080i_60Hz = 8,
    HDMITX_RES_1920x1080p_24Hz = 9,
    HDMITX_RES_1920x1080p_25Hz = 10,
    HDMITX_RES_1920x1080p_30Hz = 11,
    HDMITX_RES_1920x1080p_50Hz = 12,
    HDMITX_RES_1920x1080p_60Hz = 13,
    HDMITX_RES_1920x2205p_24Hz = 14,
    HDMITX_RES_1280X1470p_50Hz = 15,
    HDMITX_RES_1280X1470p_60Hz = 16,
    HDMITX_RES_3840x2160p_24Hz = 17,
    HDMITX_RES_3840x2160p_25Hz = 18,
    HDMITX_RES_3840x2160p_30Hz = 19,
    HDMITX_RES_3840x2160p_50Hz = 20,
    HDMITX_RES_3840x2160p_60Hz = 21,
    HDMITX_RES_4096x2160p_24Hz = 22,
    HDMITX_RES_4096x2160p_25Hz = 23,
    HDMITX_RES_4096x2160p_30Hz = 24,
    HDMITX_RES_4096x2160p_50Hz = 25,
    HDMITX_RES_4096x2160p_60Hz = 26,
    HDMITX_RES_1600x1200p_60Hz = 27,
    HDMITX_RES_1440x900p_60Hz = 28,
    HDMITX_RES_1280x1024p_60Hz = 29,
    HDMITX_RES_1024x768p_60Hz = 30,
    HDMITX_RES_MAX,
} HDMITX_VIDEO_TIMING;

typedef enum
{
    HDMITX_VIC_NOT_AVAILABLE = 0,
    HDMITX_VIC_640x480p_60_4_3 = 1,
    HDMITX_VIC_720x480p_60_4_3 = 2,
    HDMITX_VIC_720x480p_60_16_9 = 3,
    HDMITX_VIC_1280x720p_60_16_9 = 4,
    HDMITX_VIC_1920x1080i_60_16_9 = 5,
    HDMITX_VIC_720x480i_60_4_3 = 6,
    HDMITX_VIC_720x480i_60_16_9 = 7,
    HDMITX_VIC_720x240p_60_4_3 = 8,
    HDMITX_VIC_720x240p_60_16_9 = 9,
    HDMITX_VIC_2880x480i_60_4_3 = 10,
    HDMITX_VIC_2880x480i_60_16_9 = 11,
    HDMITX_VIC_2880x240p_60_4_3 = 12,
    HDMITX_VIC_2880x240p_60_16_9 = 13,
    HDMITX_VIC_1440x480p_60_4_3 = 14,
    HDMITX_VIC_1440x480p_60_16_9 = 15,
    HDMITX_VIC_1920x1080p_60_16_9 = 16,
    HDMITX_VIC_720x576p_50_4_3 = 17,
    HDMITX_VIC_720x576p_50_16_9 = 18,
    HDMITX_VIC_1280x720p_50_16_9 = 19,
    HDMITX_VIC_1920x1080i_50_16_9 = 20,
    HDMITX_VIC_720x576i_50_4_3 = 21,
    HDMITX_VIC_720x576i_50_16_9 = 22,
    HDMITX_VIC_720x288p_50_4_3 = 23,
    HDMITX_VIC_720x288p_50_16_9 = 24,
    HDMITX_VIC_2880x576i_50_4_3 = 25,
    HDMITX_VIC_2880x576i_50_16_9 = 26,
    HDMITX_VIC_2880x288p_50_4_3 = 27,
    HDMITX_VIC_2880x288p_50_16_9 = 28,
    HDMITX_VIC_1440x576p_50_4_3 = 29,
    HDMITX_VIC_1440x576p_50_16_9 = 30,
    HDMITX_VIC_1920x1080p_50_16_9 = 31,
    HDMITX_VIC_1920x1080p_24_16_9 = 32,
    HDMITX_VIC_1920x1080p_25_16_9 = 33,
    HDMITX_VIC_1920x1080p_30_16_9 = 34,
    HDMITX_VIC_2880x480p_60_4_3 = 35,
    HDMITX_VIC_2880x480p_60_16_9 = 36,
    HDMITX_VIC_2880x576p_50_4_3 = 37,
    HDMITX_VIC_2880x576p_50_16_9 = 38,
    HDMITX_VIC_1920x1080i_50_16_9_1250_total = 39,
    HDMITX_VIC_1920x1080i_100_16_9 = 40,
    HDMITX_VIC_1280x720p_100_16_9 = 41,
    HDMITX_VIC_720x576p_100_4_3 = 42,
    HDMITX_VIC_720x576p_100_16_9 = 43,
    HDMITX_VIC_720x576i_100_4_3 = 44,
    HDMITX_VIC_720x576i_100_16_9 = 45,
    HDMITX_VIC_1920x1080i_120_16_9 = 46,
    HDMITX_VIC_1280x720p_120_16_9 = 47,
    HDMITX_VIC_720x480p_120_4_3 = 48,
    HDMITX_VIC_720x480p_120_16_9 = 49,
    HDMITX_VIC_720x480i_120_4_3 = 50,
    HDMITX_VIC_720x480i_120_16_9 = 51,
    HDMITX_VIC_720x576p_200_4_3 = 52,
    HDMITX_VIC_720x576p_200_16_9 = 53,
    HDMITX_VIC_720x576i_200_4_3 = 54,
    HDMITX_VIC_720x576i_200_16_9 = 55,
    HDMITX_VIC_720x480p_240_4_3 = 56,
    HDMITX_VIC_720x480p_240_16_9 = 57,
    HDMITX_VIC_720x480i_240_4_3 = 58,
    HDMITX_VIC_720x480i_240_16_9 = 59,
    HDMITX_VIC_1280x720p_24_16_9 = 60,
    HDMITX_VIC_1280x720p_25_16_9 = 61,
    HDMITX_VIC_1280x720p_30_16_9 = 62,
    HDMITX_VIC_1920x1080p_120_16_9 = 63,
    HDMITX_VIC_1920x1080p_100_16_9 = 64,

    HDMITX_VIC_1280x720p_24_21_9 = 65,
    HDMITX_VIC_1280x720p_25_21_9 = 66,
    HDMITX_VIC_1280x720p_30_21_9 = 67,
    HDMITX_VIC_1280x720p_50_21_9 = 68,
    HDMITX_VIC_1280x720p_60_21_9 = 69,
    HDMITX_VIC_1280x720p_100_21_9 = 70,
    HDMITX_VIC_1280x720p_120_21_9 = 71,
    HDMITX_VIC_1920x1080p_24_21_9 = 72,
    HDMITX_VIC_1920x1080p_25_21_9 = 73,
    HDMITX_VIC_1920x1080p_30_21_9 = 74,
    HDMITX_VIC_1920x1080p_50_21_9 = 75,
    HDMITX_VIC_1920x1080p_60_21_9 = 76,
    HDMITX_VIC_1920x1080p_100_21_9 = 77,
    HDMITX_VIC_1920x1080p_120_21_9 = 78,
    HDMITX_VIC_1680x720p_24_21_9 = 79,
    HDMITX_VIC_1680x720p_25_21_9 = 80,
    HDMITX_VIC_1680x720p_30_21_9 = 81,
    HDMITX_VIC_1680x720p_50_21_9 = 82,
    HDMITX_VIC_1680x720p_60_21_9 = 83,
    HDMITX_VIC_1680x720p_100_21_9 = 84,
    HDMITX_VIC_1680x720p_120_21_9 = 85,
    HDMITX_VIC_2560x1080p_24_21_9 = 86,
    HDMITX_VIC_2560x1080p_25_21_9 = 87,
    HDMITX_VIC_2560x1080p_30_21_9 = 88,
    HDMITX_VIC_2560x1080p_50_21_9 = 89,
    HDMITX_VIC_2560x1080p_60_21_9 = 90,
    HDMITX_VIC_2560x1080p_100_21_9 = 91,
    HDMITX_VIC_2560x1080p_120_21_9 = 92,

    HDMITX_VIC_3840x2160p_24_16_9 = 93,
    HDMITX_VIC_3840x2160p_25_16_9 = 94,
    HDMITX_VIC_3840x2160p_30_16_9 = 95,
    HDMITX_VIC_3840x2160p_50_16_9 = 96,
    HDMITX_VIC_3840x2160p_60_16_9 = 97,
    HDMITX_VIC_4096x2160p_24_256_135 = 98,
    HDMITX_VIC_4096x2160p_25_256_135 = 99,
    HDMITX_VIC_4096x2160p_30_256_135 = 100,
    HDMITX_VIC_4096x2160p_50_256_135 = 101,
    HDMITX_VIC_4096x2160p_60_256_135 = 102,

    HDMITX_VIC_3840x2160p_24_64_27 = 103,
    HDMITX_VIC_3840x2160p_25_64_27 = 104,
    HDMITX_VIC_3840x2160p_30_64_27 = 105,
    HDMITX_VIC_3840x2160p_50_64_27 = 106,
    HDMITX_VIC_3840x2160p_60_64_27 = 107,

} HDMITX_AVI_VIC;

typedef enum
{
    HDMITX_VIDEO_AR_Reserved = 0,
    HDMITX_VIDEO_AR_4_3 = 1,
    HDMITX_VIDEO_AR_16_9 = 2,
    HDMITX_VIDEO_AR_21_9 = 3,
} HDMITX_VIDEO_ASPECT_RATIO;

typedef enum
{
    HDMITX_VIDEO_SI_NoData = 0,
    HDMITX_VIDEO_SI_Overscanned = 1,
    HDMITX_VIDEO_SI_Underscanned = 2,
    HDMITX_VIDEO_SI_Reserved = 3,
} HDMITX_VIDEO_SCAN_INFO;

typedef enum
{
    HDMITX_VIDEO_AFD_SameAsPictureAR = 8,
    HDMITX_VIDEO_AFD_4_3_Center = 9,
    HDMITX_VIDEO_AFD_16_9_Center = 10,
    HDMITX_VIDEO_AFD_14_9_Center = 11,
    HDMITx_VIDEO_AFD_Others = 15,
} HDMITX_VIDEO_AFD_RATIO;


typedef enum
{
    HDMITX_VIDEO_VS_No_Addition = 0,
    HDMITX_VIDEO_VS_4k_2k = 1,
    HDMITX_VIDEO_VS_3D = 2,
    HDMITx_VIDEO_VS_Reserved = 7,
} HDMITX_VIDEO_VS_FORMAT;


typedef enum
{
    HDMITX_VIDEO_3D_FramePacking = 0,
    HDMITX_VIDEO_3D_FieldAlternative = 1,
    HDMITX_VIDEO_3D_LineAlternative = 2,
    HDMITX_VIDEO_3D_SidebySide_FULL = 3,
    HDMITX_VIDEO_3D_L_Dep = 4,
    HDMITX_VIDEO_3D_L_Dep_Graphic_Dep= 5,
    HDMITX_VIDEO_3D_TopandBottom = 6,
    HDMITX_VIDEO_3D_SidebySide_Half = 8,
    HDMITx_VIDEO_3D_Not_in_Use = 15,
} HDMITX_VIDEO_3D_STRUCTURE;

typedef enum
{
    HDMITX_EDID_3D_FramePacking = 1,
    HDMITX_EDID_3D_FieldAlternative = 2,
    HDMITX_EDID_3D_LineAlternative = 4,
    HDMITX_EDID_3D_SidebySide_FULL = 8,
    HDMITX_EDID_3D_L_Dep = 16,
    HDMITX_EDID_3D_L_Dep_Graphic_Dep = 32,
    HDMITX_EDID_3D_TopandBottom = 64,
    HDMITX_EDID_3D_SidebySide_Half_horizontal = 256,
    HDMITX_EDID_3D_SidebySide_Half_quincunx = 32768,
} HDMITX_EDID_3D_STRUCTURE_ALL;

typedef enum
{
    HDMITX_EDID_Color_RGB_444 = 1,
    HDMITX_EDID_Color_YCbCr_444 = 2,
    HDMITX_EDID_Color_YCbCr_422 = 4,
    HDMITX_EDID_Color_YCbCr_420 = 8,
} HDMITX_EDID_COLOR_FORMAT;

typedef enum
{
    HDMITx_VIDEO_4k2k_Reserved = 0,
    HDMITX_VIDEO_4k2k_30Hz = 1,
    HDMITX_VIDEO_4k2k_25Hz = 2,
    HDMITX_VIDEO_4k2k_24Hz = 3,
    HDMITx_VIDEO_4k2k_24Hz_SMPTE = 4,
} HDMITX_VIDEO_4k2k_VIC;


typedef enum
{
    HDMITX_AUDIO_FREQ_NO_SIG = 0,
    HDMITX_AUDIO_32K = 1,
    HDMITX_AUDIO_44K = 2,
    HDMITX_AUDIO_48K = 3,
    HDMITX_AUDIO_88K = 4,
    HDMITX_AUDIO_96K = 5,
    HDMITX_AUDIO_176K = 6,
    HDMITX_AUDIO_192K = 7,
    HDMITX_AUDIO_FREQ_MAX_NUM = 8,
} HDMITX_AUDIO_FREQUENCY;

typedef enum
{
    HDMITX_AUDIO_FORMAT_PCM = 0,
    HDMITX_AUDIO_FORMAT_DSD = 1,
    HDMITX_AUDIO_FORMAT_HBR = 2,
    HDMITX_AUDIO_FORMAT_NA = 3,
} HDMITX_AUDIO_SOURCE_FORMAT;

typedef enum
{
    HDMITX_AUDIO_CH_2 = 2,
    HDMITX_AUDIO_CH_8 = 8,
} HDMITX_AUDIO_CHANNEL_COUNT;

typedef enum
{
    HDMITX_AUDIO_PCM = 0,
    HDMITX_AUDIO_NONPCM = 1,
} HDMITX_AUDIO_CODING_TYPE;

typedef enum
{
    HDMITX_COLORIMETRY_NO_DATA = 0,
    HDMITX_COLORIMETRY_SMPTE170M,
    HDMITX_COLORIMETRY_ITUR709,
    HDMITX_COLORIMETRY_EXTEND,
    HDMITX_COLORIMETRY_MAX
} HDMITX_AVI_COLORIMETRY;

typedef enum
{
    HDMITX_EXT_COLORIMETRY_XVYCC601 = 0,
    HDMITX_EXT_COLORIMETRY_XVYCC709 = 1,
    HDMITX_EXT_COLORIMETRY_SYCC601 = 2,
    HDMITX_EXT_COLORIMETRY_ADOBEYCC601 = 3,
    HDMITX_EXT_COLORIMETRY_ADOBERGB = 4,
    HDMITX_EXT_COLORIMETRY_BT2020CYCC = 5,
    HDMITX_EXT_COLORIMETRY_BT2020YCC = 6,
    HDMITX_EXT_COLORIMETRY_BT2020RGB = 7
} HDMITX_AVI_EXTENDED_COLORIMETRY;

typedef enum
{
    HDMITX_YCC_QUANT_LIMIT = 0x00,
    HDMITX_YCC_QUANT_FULL = 0x01,
    HDMITX_YCC_QUANT_RESERVED = 0x10
} HDMITX_AVI_YCC_QUANT_RANGE;


typedef enum
{
    E_HDMITX_CAP_SUPPORT_DVI =0,
}EN_HDMITX_CAPS;

typedef struct DLL_PACKED
{
    MS_U8 Reserved;
}HDMI_TX_INFO;

typedef struct DLL_PACKED
{
    MS_BOOL bIsInitialized;
    MS_BOOL bIsRunning;
}HDMI_TX_Status;

typedef struct DLL_PACKED
{

    MS_U8 tm_txcurrent;
    MS_U8 tm_pren2;
    MS_U8 tm_precon;
    MS_U8 tm_pren;
    MS_U8 tm_tenpre;
    MS_U8 tm_ten;
} HDMITX_ANALOG_TUNING;

typedef enum
{
    E_HDCP_DISABLE = 0,
    E_HDCP_FAIL = 1,
    E_HDCP_PASS = 2,
} HDMITX_HDCP_STATUS;

typedef enum
{
    CHECK_NOT_READY = 0,
    CHECK_REVOKED = 1,
    CHECK_NOT_REVOKED = 2,
}HDMITX_REVOCATION_STATE;

typedef enum
{
    HDMITX_INT_HDCP_DISABLE = 0,
    HDMITX_INT_HDCP_FAIL = 1,
    HDMITX_INT_HDCP_PASS = 2,
    HDMITX_INT_HDCP_PROCESS = 3,
} HDMITX_INT_HDCP_STATUS;

typedef enum
{
    E_UNHDCPRX_NORMAL_OUTPUT = 0,
    E_UNHDCPRX_HDCP_ENCRYPTION = 1,
    E_UNHDCPRX_BLUE_SCREEN = 2,
} HDMITX_UNHDCPRX_CONTROL;

typedef enum
{
    E_HDCPRXFail_NORMAL_OUTPUT = 0,
    E_HDCPRXFail_HDCP_ENCRYPTION = 1,
    E_HDCPRXFail_BLUE_SCREEN = 2,
} HDMITX_HDCPRXFail_CONTROL;

typedef enum
{
    HDMITX_INPUT_LESS_60MHZ =0,
    HDMITX_INPUT_60_to_160MHZ =1,
    HDMITX_INPUT_OVER_160MHZ =2,
} HDMITX_INPUT_FREQ;

typedef enum
{
    HDMITX_HDCP_RESET = 0x01,
    HDMITX_HDCP_WAITING_ACTIVE_RX = 0x02,
    HDMITX_HDCP_CHECK_REPEATER_READY = 0x03,
    HDMITX_HDCP_CHECK_R0 = 0x04,
    HDMITX_HDCP_AUTH_DONE = 0x05,
    HDMITX_HDCP_AUTH_FAIL = 0x06,


    HDMITX_HDCP_RX_IS_NOT_VALID = 0x00,
    HDMITX_HDCP_RX_IS_VALID = 0x10,
    HDMITX_HDCP_RX_KEY_FAIL = 0x20,
    HDMITX_HDCP_TX_KEY_FAIL = 0x30,
    HDMITX_HDCP_RX_KEY_REVOKED = 0x0F,


    HDMITX_HDCP_REPEATER_TIMEOUT = 0x40,
    HDMITX_HDCP_REPEATER_READY = 0x50,
    HDMITX_HDCP_REPEATER_NOT_READY = 0x60,
    HDMITX_HDCP_REPEATER_VALID = 0x70,


    HDMITX_HDCP_REPEATER_SHA1_FAIL = 0x80,
    HDMITX_HDCP_REPEATER_SHA1_PASS = 0x90,


    HDMITX_HDCP_SYNC_RI_FAIL = 0xC0,
    HDMITX_HDCP_SYNC_RI_PASS = 0xD0
}HDMITX_HDCP_AUTH_STATUS;

typedef enum
{
    HDMITX_CMD_NONE = 0,
    E_HDMITX_COLOR_AND_RANGE_TRANSFORM,
    HDMITX_CMD_COLOR_AND_RANGE_TRANSFORM,
    HDMITX_CMD_SSC_ENABLE,
    E_HDMITX_NDS_SET_ENC_EN,
    HDMITX_CMD_NDS_SET_ENC_EN,
    E_HDMITX_NDS_GET_HDCP_STATUS,
    HDMITX_CMD_NDS_GET_HDCP_STATUS,
    HDMITX_CMD_SET_COLORIMETRY,
    HDMITX_CMD_GET_FULL_RX_STATUS,
    HDMITX_CMD_TIMING_CAPABILITY_CHECK,
    HDMITX_CMD_HDCP1XTX_CHK_RI,
    HDMITX_CMD_GET_PANELSIZE_FROM_EDID,
    HDMITX_CMD_GET_TMDS_STATUS,
    HDMITX_CMD_SET_TIMING_INFO_BY_CUSTOMER,
    HDMITX_CMD_NUMBER,
} HDMITX_CTRL_ID;

#define EN_HDMITX_CTRL_ID HDMITX_CTRL_ID

typedef enum
{
    HDMITX_QUANT_LIMIT = 0x00,
    HDMITX_QUANT_FULL = 0x01,
    HDMITX_QUANT_RESERVED = 0x10,
} HDMITX_QUANT_RANGE;

#define EN_HDMITX_QUANT_RANGE HDMITX_QUANT_RANGE

typedef struct DLL_PACKED
{
    HDMITX_VIDEO_COLOR_FORMAT input_color;
    HDMITX_VIDEO_COLOR_FORMAT output_color;
    HDMITX_QUANT_RANGE input_range;
    HDMITX_QUANT_RANGE output_range;
    MS_BOOL result;
} HDMITX_COLOR_AND_RANGE_TRANSFORM_PARAMETERS;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    MS_U8 u8SSCEn;
    MS_BOOL result;
} HDMITX_SSCENABLE;

typedef enum
{
    HDMITX_SSCENABLE_STRUCTVER_NONE= 0,
    HDMITX_SSCENABLE_STRUCTVER_1= 1,
    HDMITX_SSCENABLE_STRUCTVER_NUM
}HDMITX_SSCENABLE_STRUCTVER;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    HDMITX_AVI_COLORIMETRY colorimetry;
    MS_U8 u8Return;
} HDMITX_SET_COLORIMETRY;

typedef enum
{
    HDMITX_SET_COLORIMETRY_STRUCTVER_NONE= 0,
    HDMITX_SET_COLORIMETRY_STRUCTVER_1= 1,
    HDMITX_SET_COLORIMETRY_STRUCTVER_NUM
}HDMITX_SET_COLORIMETRY_STRUCTVER;

typedef enum
{
    HDMITX_DVIClock_L_HPD_L = 0,
    HDMITX_DVIClock_L_HPD_H = 1,
    HDMITX_DVIClock_H_HPD_L = 2,
    HDMITX_DVIClock_H_HPD_H = 3,
} HDMITX_RX_STATUS;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    MS_U32 u32RxStatus;
} HDMITX_GET_FULL_RX_STATUS;

typedef struct DLL_PACKED
{
    MS_U8 i_p_mode;
    MS_U8 h_polarity;
    MS_U8 v_polarity;
    MS_U16 vs_width;
    MS_U16 vs_bporch;
    MS_U16 vde_width;
    MS_U16 vs_delayline;
    MS_U16 vs_delaypixel;
    MS_U16 hs_width;
    MS_U16 hs_bporch;
    MS_U16 hde_width;
    MS_U16 hs_delay;
    MS_U16 vtotal;
    MS_U16 htotal;


} HDMITX_TIMING_INFO_BY_CUSTOMER;

typedef enum
{
    HDMITX_GET_FULL_RX_STATUS_STRUCTVER_NONE= 0,
    HDMITX_GET_FULL_RX_STATUS_STRUCTVER_1= 1,
    HDMITX_GET_FULL_RX_STATUS_STRUCTVER_NUM
}HDMITX_GET_FULL_RX_STATUS_STRUCTVER;

typedef enum
{
    HDMITX_TIMING_ERR_NONE = 0x00000000,
    HDMITX_TIMING_ERR_CFG_ERR = 0x00000001,
    HDMITX_TIMING_ERR_EDID_ERR = 0x00000002,
    HDMITX_TIMING_ERR_COLOR_FMT = 0x00000004,
    HDMITX_TIMING_ERR_COLOR_DEPTH = 0x00000008,
    HDMITX_TIMING_ERR_TIMING = 0x00000010,
    HDMITX_TIMING_ERR_HW_LIMIT = 0x00000020,
    HDMITX_TIMING_ERR_SW_LIMIT = 0x00000040,
    HDMITX_TIMING_ERR_SINK_LIMIT = 0x00000080,
    HDMITX_TIMING_ERR_MAX = 0xFFFFFFFF
}HDMITX_TIMING_ERROR;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    HDMITX_OUTPUT_MODE eOutputMode;
    HDMITX_VIDEO_TIMING eTiming;
    HDMITX_VIDEO_COLOR_FORMAT eInColor;
    HDMITX_VIDEO_COLOR_FORMAT eOutColor;
    HDMITX_VIDEO_COLORDEPTH_VAL eColorDepth;
    HDMITX_TIMING_ERROR ubRet;
} HDMITX_CHECK_LEGAL_TIMING;

typedef enum
{
    HDMITX_CHECK_LEGAL_TIMING_STRUCTVER_NONE= 0,
    HDMITX_CHECK_LEGAL_TIMING_STRUCTVER_1= 1,
    HDMITX_CHECK_LEGAL_TIMING_STRUCTVER_NUM
}HDMITX_CHECK_LEGAL_TIMING_STRUCTVER;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    MS_U32 u32PanelWidth;
    MS_U32 u32PanelHeight;
    MS_U32 u32Ret;
} HDMITX_GET_PANELSIZE_FROM_EDID;

typedef enum
{
    HDMITX_GET_PANELSIZE_FROM_EDID_STRUCTVER_NONE= 0,
    HDMITX_GET_PANELSIZE_FROM_EDID_STRUCTVER_1= 1,
    HDMITX_GET_PANELSIZE_FROM_EDID_STRUCTVER_NUM
}HDMITX_GET_PANELSIZE_FROM_EDID_STRUCTVER;


typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    MS_U32 u32TMDSStatus;
    MS_U32 u32Ret;
} HDMITX_GET_TMDS_STATUS;

typedef struct DLL_PACKED
{
    MS_U32 u32StructVersion;
    HDMITX_VIDEO_TIMING u8Timing;
    HDMITX_TIMING_INFO_BY_CUSTOMER stTimingInfo;
} HDMITX_SET_TIMING_INFO_BY_CUSTOMER;

typedef enum
{
    HDMITX_GET_TMDS_STATUS_STRUCTVER_NONE= 0,
    HDMITX_GET_TMDS_STATUS_STRUCTVER_1= 1,
    HDMITX_GET_TMDS_STATUS_STRUCTVER_NUM
}HDMITX_GET_TMDS_STATUS_STRUCTVER;

typedef enum
{
    E_CEA_EXT_TAG_VCDB = 0,
    E_CEA_EXT_TAG_VSVDB = 1,
    E_CEA_EXT_TAG_VDDDB = 2,
    E_CEA_EXT_TAG_VVTBE = 3,
    E_CEA_EXT_TAG_CDB = 5,
    E_CEA_EXT_TAG_HSMDB = 6,
    E_CEA_EXT_TAG_420VDB = 14,
    E_CEA_EXT_TAG_420CMDB = 15,
    E_CEA_EXT_TAG_VSADB = 17,
    E_CEA_EXT_TAG_IFDB = 32
} HDMITX_CEA_EXT_TAG_CODE;

typedef enum
{
    E_CEA_TAG_CODE_AUDIO = 1,
    E_CEA_TAG_CODE_VIDEO = 2,
    E_CEA_TAG_CODE_VSDB = 3,
    E_CEA_TAG_CODE_SPEAKER_ALLOCAT = 4,
    E_CEA_TAG_CODE_VDTC = 5,
    E_CEA_TAG_CODE_EXT_TAG = 7,
    E_CEA_TAG_CODE_HFVSDB = 8
} HDMITX_CEA_DB_TAG_CODE;



enum HDMITX_HDCP1_X74OffSET_ADDR
{
    E_HDCP1_OFFSETADDR_Bksv = (MS_U8)0x00,
    E_HDCP1_OFFSETADDR_RiPrime = (MS_U8)0x08,
    E_HDCP1_OFFSETADDR_PjPrime = (MS_U8)0x0A,
    E_HDCP1_OFFSETADDR_Aksv = (MS_U8)0x10,
    E_HDCP1_OFFSETADDR_Ainfo = (MS_U8)0x15,
    E_HDCP1_OFFSETADDR_An = (MS_U8)0x18,
    E_HDCP1_OFFSETADDR_VPrime = (MS_U8)0x20,
    E_HDCP1_OFFSETADDR_VPrimeH1 = (MS_U8)0x24,
    E_HDCP1_OFFSETADDR_VPrimeH2 = (MS_U8)0x28,
    E_HDCP1_OFFSETADDR_VPrimeH3 = (MS_U8)0x2C,
    E_HDCP1_OFFSETADDR_VPrimeH4 = (MS_U8)0x30,
    E_HDCP1_OFFSETADDR_BCaps = (MS_U8)0x40,
    E_HDCP1_OFFSETADDR_BStatus = (MS_U8)0x41,
    E_HDCP1_OFFSETADDR_KsvFifo = (MS_U8)0x43,
    E_HDCP1_OFFSETADDR_DBG = (MS_U8)0xC0
};






enum HDMITX_HDCP2_X74OffSET_ADDR
{
    E_HDCP2_OFFSETADDR_HDCP2Version = (MS_U8)0x50,
    E_HDCP2_OFFSETADDR_WriteMessage = (MS_U8)0x60,
    E_HDCP2_OFFSETADDR_RxStatus = (MS_U8)0x70,
    E_HDCP2_OFFSETADDR_ReadMessage = (MS_U8)0x80,
    E_HDCP2_OFFSETADDR_DBG = (MS_U8)0xC0,
};

enum HDMITX_HDCP2_OPCODE
{
    E_HDCP2_OPCODE_WRITE = (MS_U8)0x00,
    E_HDCP2_OPCODE_READ = (MS_U8)0x01,
};
# 879 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx.h"
MS_BOOL SYMBOL_WEAK MApi_HDMITx_Init(void);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_Exit(void);
# 900 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx.h"
void SYMBOL_WEAK MApi_HDMITx_TurnOnOff(MS_BOOL state);


void SYMBOL_WEAK MApi_HDMITx_EnablePacketGen(MS_BOOL bflag);


void SYMBOL_WEAK MApi_HDMITx_SetHDMITxMode(HDMITX_OUTPUT_MODE mode);


void SYMBOL_WEAK MApi_HDMITx_SetHDMITxMode_CD(HDMITX_OUTPUT_MODE mode, HDMITX_VIDEO_COLORDEPTH_VAL val);


void SYMBOL_WEAK MApi_HDMITx_SetTMDSOnOff(MS_BOOL state);


void SYMBOL_WEAK MApi_HDMITx_DisableTMDSCtrl(MS_BOOL bFlag);


void SYMBOL_WEAK MApi_HDMITx_SetRBChannelSwap(MS_BOOL state);


void SYMBOL_WEAK MApi_HDMITx_Exhibit(void);


void SYMBOL_WEAK MApi_HDMITx_ForceHDMIOutputMode(MS_BOOL bflag, HDMITX_OUTPUT_MODE output_mode);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_ForceHDMIOutputColorFormat(MS_BOOL bflag, HDMITX_VIDEO_COLOR_FORMAT output_color);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetRxStatus(void);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetRxDCInfoFromEDID(HDMITX_VIDEO_COLORDEPTH_VAL *val);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetRxVideoFormatFromEDID(MS_U8 *pu8Buffer, MS_U8 u8BufSize);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetVICListFromEDID(MS_U8 *pu8Buffer, MS_U8 u8BufSize);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetDataBlockLengthFromEDID(MS_U8 *pu8Length, MS_U8 u8TagCode);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetRxAudioFormatFromEDID(MS_U8 *pu8Buffer, MS_U8 u8BufSize);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_EDID_HDMISupport(MS_BOOL *HDMI_Support);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetRxIDManufacturerName(MS_U8 *pu8Buffer);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetBksv(MS_U8 *pdata);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetAksv(MS_U8 *pdata);



MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetEDIDData(MS_U8 *pu8Buffer, MS_BOOL BlockIdx);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetRx3DStructureFromEDID(HDMITX_VIDEO_TIMING timing, HDMITX_EDID_3D_STRUCTURE_ALL *p3DStructure);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetColorFormatFromEDID(HDMITX_VIDEO_TIMING timing, HDMITX_EDID_COLOR_FORMAT *pColorFmt);


void SYMBOL_WEAK MApi_HDMITx_PKT_User_Define_Clear(void);


void SYMBOL_WEAK MApi_HDMITx_PKT_User_Define(HDMITX_PACKET_TYPE packet_type, MS_BOOL def_flag,
HDMITX_PACKET_PROCESS def_process, MS_U8 def_fcnt);


MS_BOOL SYMBOL_WEAK MApi_HDMITx_PKT_Content_Define(HDMITX_PACKET_TYPE packet_type, MS_U8 *data, MS_U8 length);







void SYMBOL_WEAK MApi_HDMITx_SetVideoOnOff(MS_BOOL state);

void SYMBOL_WEAK MApi_HDMITx_SetColorFormat(HDMITX_VIDEO_COLOR_FORMAT in_color, HDMITX_VIDEO_COLOR_FORMAT out_color);

void SYMBOL_WEAK MApi_HDMITx_SetVideoOutputTiming(HDMITX_VIDEO_TIMING mode);

void SYMBOL_WEAK MApi_HDMITx_SetVideoOutputTimingByCustomer(HDMITX_VIDEO_TIMING mode, HDMITX_TIMING_INFO_BY_CUSTOMER timinginfo);


void SYMBOL_WEAK MApi_HDMITx_SetVideoOutputAsepctRatio(HDMITX_VIDEO_ASPECT_RATIO out_ar);

void SYMBOL_WEAK MApi_HDMITx_SetVideoOutputOverscan_AFD(MS_BOOL bflag, HDMITX_VIDEO_SCAN_INFO out_scaninfo, MS_U8 out_afd);
void SYMBOL_WEAK MApi_HDMITx_SetVideoOutputOverscan_AFD_II(MS_BOOL bflag, HDMITX_VIDEO_SCAN_INFO out_scaninfo, MS_U8 out_afd, MS_U8 A0 );
void SYMBOL_WEAK MApi_HDMITx_Set_VS_InfoFrame(HDMITX_VIDEO_VS_FORMAT vs_format, HDMITX_VIDEO_3D_STRUCTURE vs_3d, HDMITX_VIDEO_4k2k_VIC vs_vic);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_SetAVIInfoExtColorimetry(HDMITX_AVI_EXTENDED_COLORIMETRY enExtColorimetry, HDMITX_AVI_YCC_QUANT_RANGE enYccQuantRange);







void SYMBOL_WEAK MApi_HDMITx_SetAudioOnOff(MS_BOOL state);


void SYMBOL_WEAK MApi_HDMITx_SetAudioFrequency(HDMITX_AUDIO_FREQUENCY freq);


void SYMBOL_WEAK MApi_HDMITx_SetAudioConfiguration(HDMITX_AUDIO_FREQUENCY freq, HDMITX_AUDIO_CHANNEL_COUNT ch, HDMITX_AUDIO_CODING_TYPE type);

MS_U32 SYMBOL_WEAK MApi_HDMITx_GetAudioCTS(void);

void SYMBOL_WEAK MApi_HDMITx_MuteAudioFIFO(MS_BOOL bflag);

void SYMBOL_WEAK MApi_HDMITx_SetAudioSourceFormat(HDMITX_AUDIO_SOURCE_FORMAT fmt);
# 1028 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx.h"
void SYMBOL_WEAK MApi_HDMITx_GetHdcpKey(MS_BOOL useinternalkey, MS_U8 *data);

void SYMBOL_WEAK MApi_HDMITx_SetHDCPOnOff(MS_BOOL state);

void SYMBOL_WEAK MApi_HDMITx_SetAVMUTE(MS_BOOL bflag);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetAVMUTEStatus(void);

HDMITX_HDCP_STATUS SYMBOL_WEAK MApi_HDMITx_GetHDCPStatus(void);

void SYMBOL_WEAK MApi_HDMITx_HDCP_StartAuth(MS_BOOL bFlag);

HDMITX_INT_HDCP_STATUS SYMBOL_WEAK MApi_HDMITx_GetINTHDCPStatus(void);

HDMITX_INT_HDCP_STATUS SYMBOL_WEAK MApi_HDMITx_GetHDCP_PreStatus(void);

void SYMBOL_WEAK MApi_HDMITx_UnHDCPRxControl(HDMITX_UNHDCPRX_CONTROL state);

void SYMBOL_WEAK MApi_HDMITx_HDCPRxFailControl(HDMITX_HDCPRXFail_CONTROL state);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_SetAksv2R0Interval(MS_U32 u32Interval);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_IsHDCPRxValid(void);

HDMITX_REVOCATION_STATE SYMBOL_WEAK MApi_HDMITx_HDCP_RevocationKey_Check(void);

void SYMBOL_WEAK MApi_HDMITx_HDCP_RevocationKey_List(MS_U8 *data, MS_U16 size);



MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetLibVer(const MSIF_Version **ppVersion);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetInfo(HDMI_TX_INFO *pInfo);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetStatus(HDMI_TX_Status *pStatus);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_HDCP_IsSRMSignatureValid(MS_U8 *data, MS_U32 size);






MS_BOOL SYMBOL_WEAK MApi_HDMITx_SetDbgLevel(MS_U16 u16DbgSwitch);

void SYMBOL_WEAK MApi_HDMITx_SetHPDGpioPin(MS_U8 u8pin);


void SYMBOL_WEAK MApi_HDMITx_AnalogTuning(HDMITX_ANALOG_TUNING *pInfo);

void SYMBOL_WEAK MApi_HDMITx_DisableRegWrite(MS_BOOL bFlag);






void SYMBOL_WEAK MApi_HDMITx_GetEDIDPhyAdr(MS_U8 *pdata);

void SYMBOL_WEAK MApi_HDMITx_SetCECOnOff(MS_BOOL bflag);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetCECStatus(void);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_EdidChecking(void);




MS_BOOL SYMBOL_WEAK MApi_HDMITx_RxBypass_Mode(HDMITX_INPUT_FREQ freq, MS_BOOL bflag);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_Disable_RxBypass(void);





MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetChipCaps(EN_HDMITX_CAPS eCapType, MS_U32* pRet, MS_U32 ret_size);

MS_U32 SYMBOL_WEAK MApi_HDMITx_SetPowerState(EN_POWER_MODE u16PowerState);



MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetEdidDataBlocks(HDMITX_CEA_DB_TAG_CODE enTagCode, HDMITX_CEA_EXT_TAG_CODE enExtTagCode, MS_U8* pu8Data, MS_U32 u32DataLen, MS_U32* pu32RealLen);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_GetKSVList(MS_U8 *pu8Bstatus, MS_U8* pu8KSVList, MS_U16 u16BufLen, MS_U16 *pu16KSVLength);

MS_BOOL SYMBOL_WEAK MApi_HDMITx_GeneralCtrl(MS_U32 u32Cmd, void* pu8Buf, MS_U32 u32BufSize);





MS_BOOL SYMBOL_WEAK MApi_HDMITx_HDCP2AccessX74(MS_U8 u8PortIdx, MS_U8 u8OffsetAddr, MS_U8 u8OpCode, MS_U8 *pu8RdBuf, MS_U16 u16RdLen, MS_U8 *pu8WRBuff, MS_U16 u16WrLen);
void SYMBOL_WEAK MApi_HDMITx_HDCP2TxInit(MS_U8 u8PortIdx, MS_BOOL bEnable);
void SYMBOL_WEAK MApi_HDMITx_HDCP2TxEnableEncrypt(MS_U8 u8PortIdx, MS_BOOL bEnable);
void SYMBOL_WEAK MApi_HDMITx_HDCP2TxFillCipherKey(MS_U8 u8PortIdx, MS_U8 *pu8Riv, MS_U8 *pu8KsXORLC128);

#ifdef __cplusplus
}
#endif


#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto_v2.h"
#ifndef _XC_AUTO_H_
#define _XC_AUTO_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

typedef struct DLL_PACKED
{
    XC_Auto_TuneType enAutoTuneType;
    XC_Auto_Signal_Info *ActiveInfo;
    XC_Auto_Signal_Info *StandardInfo;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_AUTO_GEOMETRY, *pstXC_AUTO_GEOMETRY;

typedef struct DLL_PACKED
{
    XC_Auto_TuneType enAutoTuneType;
    XC_Auto_Signal_Info_Ex *ActiveInfo;
    XC_Auto_Signal_Info_Ex *StandardInfo;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_AUTO_GEOMETRY_EX, *pstXC_AUTO_GEOMETRY_EX;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_AUTO_STOPAUTOGEOMETRY, *pstXC_AUTO_STOPAUTOGEOMETRY;

typedef struct DLL_PACKED
{
    XC_Auto_CalibrationType type;
    XC_Auto_TuneType enAutoTuneType;
    APIXC_AdcGainOffsetSetting *pstADCSetting;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_AUTO_GAINOFFSET, *pstXC_AUTO_GAINOFFSET;

typedef struct DLL_PACKED
{
    XC_Auto_TuneType enAutoTuneType;
    APIXC_AdcGainOffsetSetting *pstADCSetting;
    MS_BOOL bReturnValue;
} stXC_AUTO_GETHWFIXEDGAINOFFSET, *pstXC_AUTO_GETHWFIXEDGAINOFFSET;

typedef struct
{
    MS_U8 Value;
    MS_BOOL bReturnValue;
} stXC_AUTO_SETVALIDDATA, *pstXC_AUTO_SETVALIDDATA;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPrFlag;
} stXC_AUTO_AUTOOFFSET, *pstXC_AUTO_AUTOOFFSET;

typedef struct DLL_PACKED
{
    XC_Auto_Signal_Info_Ex *pSignalInfo;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_AUTO_DETECTWIDTH, *pstXC_AUTO_DETECTWIDTH;

typedef struct
{
    XC_Auto_CalibrationMode eMode;
    MS_BOOL bReturnValue;
} stXC_AUTO_SETCALIBRATIONMODE, *pstXC_AUTO_SETCALIBRATIONMODE;

typedef struct DLL_PACKED
{
    XC_Auto_CalibrationMode* eMode;
} stXC_AUTO_GETCALIBRATIONMODE, *pstXC_AUTO_GETCALIBRATIONMODE;

typedef struct DLL_PACKED
{
    XC_AUTO_SYNC_INFO* pSyncInfo;
} stXC_AUTO_GETSYNCINFO, *pstXC_AUTO_GETSYNCINFO;

#ifdef __cplusplus
}
#endif

#endif
# 150 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAVD.h"
#ifndef _DRV_AVD_H_
#define _DRV_AVD_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 169 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAVD.h"
#define MSIF_AVD_LIB_CODE {'A','V','D','_'}
#define MSIF_AVD_LIBVER {'1','1'}
#define MSIF_AVD_BUILDNUM {'0','0' }
#define MSIF_AVD_CHANGELIST {'0','0','6','1','6','9','9','1'}

#define AVD_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_AVD_LIB_CODE, \
    MSIF_AVD_LIBVER, \
    MSIF_AVD_BUILDNUM, \
    MSIF_AVD_CHANGELIST, \
    MSIF_OS


#define VD_SYNC_LOCKED ((BIT_(15)))
#define VD_HSYNC_LOCKED ((BIT_(14)))
#define VD_INTERLACED ((BIT_(13)))
#define VD_VSYNC_50HZ ((BIT_(12)))
#define VD_RESET_ON ((BIT_(11)))
#define VD_COLOR_LOCKED ((BIT_(10)))
#define VD_PAL_SWITCH ((BIT_(9)))
#define VD_FSC_TYPE ((BIT_(7))|(BIT_(6))|(BIT_(5)))
#define VD_FSC_3579 ((BIT_(6)))
#define VD_FSC_3575 ((BIT_(7)))
#define VD_FSC_3582 ((BIT_(7))|(BIT_(6)))
#define VD_FSC_4433 (0)
#define VD_FSC_4285 (BIT_(5))
#define VD_VCR_MODE (BIT_(4))
#define VD_VCR_PAUSE (BIT_(3))
#define VD_MACROVISION (BIT_(2))
#define VD_BURST_ON (BIT_(1))
#define VD_STATUS_RDY (BIT_(0))
#define VD_MODE_DETECT_MASK (VD_SYNC_LOCKED|VD_HSYNC_LOCKED|VD_VSYNC_50HZ|VD_FSC_TYPE|VD_RESET_ON)


#define VD_USE_FIX_GAIN 0
#define VD_USE_AUTO_GAIN 1





#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))
#define VD_MODE_STANDARD_MASK (VD_VSYNC_50HZ | VD_PAL_SWITCH | VD_FSC_TYPE | VD_STATUS_RDY)

#define FSC_AUTO_DET_ENABLE 0x00
#define FSC_AUTO_DET_DISABLE 0x01

#define VD_USE_FB 0


#define VD_CHK_HSYNC_WAIT 1
#define VD_CHK_HSYNC_CONT 60
#define VD_CHK_HSYNC_OK_THR 2
#define VD_CHK_DEBOUNCE_WAIT 20
#define VD_CHK_DEBOUNCE_CONT 40
#define VD_CHK_NSPL_WAIT 1
#define VD_CHK_NSPL_CONT 500
#define VD_CHK_NSPL_OK_THR 20
#define VD_CHK_VideoSys_CONT 250

#define DSP_VER_OFFSET 255





typedef enum
{
    AVD_LOAD_CODE_BDMA_FROM_SPI,
    AVD_LOAD_CODE_BDMA_FROM_DRAM,
    AVD_LOAD_CODE_BYTE_WRITE,
} AVD_LoadCodeType;

typedef enum
{
    DEMODE_NORMAL = 0,
    DEMODE_MSTAR_VIF = 1,
    DEMODE_MSTAR_VIF_MSB1210 = 2,
} AVD_DemodType;

typedef enum
{
    E_VIDEO_SYSTEM_ATSC,
    E_VIDEO_SYSTEM_DVB
} AVD_VideoSystem;

typedef enum
{
    E_VIDEO_FQ_NOSIGNAL = 0,
    E_VIDEO_FQ_50Hz = 50,
    E_VIDEO_FQ_60Hz = 60
} AVD_VideoFreq;

typedef enum
{
    E_FREERUN_FQ_AUTO = 0x00,
    E_FREERUN_FQ_50Hz = 0x01,
    E_FREERUN_FQ_60Hz = 0x02,
    E_FREERUN_FQ_MAX
} AVD_FreeRunFreq;

typedef enum
{
    E_VIDEOSTANDARD_PAL_BGHI = 0x00,
    E_VIDEOSTANDARD_NTSC_M = 0x01,
    E_VIDEOSTANDARD_SECAM = 0x02,
    E_VIDEOSTANDARD_NTSC_44 = 0x03,
    E_VIDEOSTANDARD_PAL_M = 0x04,
    E_VIDEOSTANDARD_PAL_N = 0x05,
    E_VIDEOSTANDARD_PAL_60 = 0x06,
    E_VIDEOSTANDARD_NOTSTANDARD = 0x07,
    E_VIDEOSTANDARD_AUTO = 0x08,
    E_VIDEOSTANDARD_MAX
} AVD_VideoStandardType;

typedef enum
{
    E_INPUT_SOURCE_INVALID = 0x00,
    E_INPUT_SOURCE_ATV = 0x01,
    E_INPUT_SOURCE_CVBS1 = 0x02,
    E_INPUT_SOURCE_CVBS2 = 0x03,
    E_INPUT_SOURCE_CVBS3 = 0x04,
    E_INPUT_SOURCE_SVIDEO1 = 0x05,
    E_INPUT_SOURCE_SVIDEO2 = 0x06,
    E_INPUT_SOURCE_SCART1 = 0x07,
    E_INPUT_SOURCE_SCART2 = 0x08,
    E_INPUT_SOURCE_YPbPr = 0x09,
    E_INPUT_SOURCE_THROUGH_3DCOMB = 0x50,
    E_INPUT_SOURCE_THROUGH_3DCOMB_ATV = (E_INPUT_SOURCE_THROUGH_3DCOMB | E_INPUT_SOURCE_ATV),
    E_INPUT_SOURCE_THROUGH_3DCOMB_CVBS1 = (E_INPUT_SOURCE_THROUGH_3DCOMB | E_INPUT_SOURCE_CVBS1),
    E_INPUT_SOURCE_THROUGH_3DCOMB_CVBS2 = (E_INPUT_SOURCE_THROUGH_3DCOMB | E_INPUT_SOURCE_CVBS2),
    E_INPUT_SOURCE_THROUGH_3DCOMB_SCART1 = (E_INPUT_SOURCE_THROUGH_3DCOMB | E_INPUT_SOURCE_SCART1),
    E_INPUT_SOURCE_THROUGH_3DCOMB_SCART2 = (E_INPUT_SOURCE_THROUGH_3DCOMB | E_INPUT_SOURCE_SCART2),
    E_INPUT_SOURCE_MAX = 0x60
} AVD_InputSourceType;


typedef enum
{
    E_AUTOAV_SOURCE_1 = E_INPUT_SOURCE_SCART1,
    E_AUTOAV_SOURCE_2 = E_INPUT_SOURCE_SCART2,
    E_AUTOAV_SOURCE_ALL = 0xFF
} AVD_AutoAVSourceType;

typedef enum
{
    SCART_FB_NONE = 0x00,
    SCART_FB0,
    SCART_FB1,
    SCART_FB2,
} AVD_INPUT_SCART_FB;

typedef enum
{
    E_ATV_CLK_ORIGIN_43P2MHZ = 0x00,
    E_ATV_CLK_TYPE1_42MHZ = 0x01,
    E_ATV_CLK_TYPE2_44P4MHZ = 0x02,
}AVD_ATV_CLK_TYPE;

typedef struct
{
    MS_U8 u8DetectWinBeforeLock;
    MS_U8 u8DetectWinAfterLock;
    MS_U8 u8CNTRFailBeforeLock;
    MS_U8 u8CNTRSyncBeforeLock;
    MS_U8 u8CNTRSyncAfterLock;
} VD_HSYNC_SENSITIVITY;

typedef enum
{
    AVD_DBGLV_NONE,
    AVD_DBGLV_INFO,
    AVD_DBGLV_NOTICE,
    AVD_DBGLV_WARNING,
    AVD_DBGLV_ERR,
    AVD_DBGLV_CRIT,
    AVD_DBGLV_ALERT,
    AVD_DBGLV_EMERG,
    AVD_DBGLV_DEBUG,
} AVD_DbgLv;

#define AVD_PATCH_NONE 0
#define AVD_PATCH_NTSC_50 BIT_(0)
#define AVD_PATCH_FINE_TUNE_FH_DOT BIT_(1)
#define AVD_PATCH_FINE_TUNE_COMB_F2 BIT_(2)
#define AVD_PATCH_FINE_TUNE_3D_COMB BIT_(3)
#define AVD_PATCH_FINE_TUNE_FSC_SHIFT BIT_(4)
#define AVD_PATCH_NON_STANDARD_VTOTAL BIT_(5)
#define AVD_PATCH_FINE_TUNE_STILL_IMAGE BIT_(6)

#define AVD_PATCH_HTOTAL_1135_MUL_15 0
#define AVD_PATCH_HTOTAL_1135 BIT_(8)
#define AVD_PATCH_HTOTAL_DYNAMIC BIT_(9)
#define AVD_PATCH_HTOTAL_USER (BIT_(9)|BIT_(8))
#define AVD_PATCH_HTOTAL_MASK (BIT_(9)|BIT_(8))
#define AVD_PATCH_SCART_SVIDEO (BIT_(10))
#define AVD_PATCH_CVBS_NEGATIVESIG (BIT_(11))

#define AVD_PATCH_DISABLE_PWS BIT_(24)
#define AVD_PATCH_DSPCODE_0x24_ATSC BIT_(25)
#define AVD_PATCH_DSPCODE_0x25 BIT_(26)
#define AVD_PATCH_DSPCODE_0x21_ATSC BIT_(27)
#define AVD_PATCH_DSPCODE_0x21 BIT_(28)


typedef struct __attribute__((__packed__))
{

    MS_U8 *u8VdDecInitializeExt;
    #if !defined (__aarch64__)
    MS_U32 u32AlignDummy;
    #endif

    MS_U32 u32XTAL_Clock;
    AVD_LoadCodeType eLoadCodeType;
    MS_U32 u32VD_DSP_Code_Address;
    MS_U8 *pu8VD_DSP_Code_Address;
    #if !defined (__aarch64__)
    MS_U32 u32AlignDummy1;
    #endif

    MS_U32 u32VD_DSP_Code_Len;

    AVD_DemodType eDemodType;


    MS_U16 u16VDDSPBinID;
    MS_U8 bRFGainSel;
    MS_U8 bAVGainSel;
    MS_U8 u8RFGain;
    MS_U8 u8AVGain;
    MS_U32 u32VDPatchFlag;
    MS_U8 u8ColorKillHighBound;
    MS_U8 u8ColorKillLowBound;
    MS_U8 u8SwingThreshold;
    VD_HSYNC_SENSITIVITY eVDHsyncSensitivityNormal;
    VD_HSYNC_SENSITIVITY eVDHsyncSensitivityTuning;


    MS_PHY u32COMB_3D_ADR;
    MS_U32 u32COMB_3D_LEN;

} VD_INITDATA;

typedef enum
{
    E_AVD_FAIL=0,
    E_AVD_OK=1
} AVD_Result;


typedef struct
{
    AVD_InputSourceType eVDInputSource;
    AVD_VideoStandardType eVideoSystem;
    AVD_VideoStandardType eLastStandard;
    MS_U8 u8AutoDetMode;
    MS_U16 u16CurVDStatus;
    MS_U8 u8AutoTuningIsProgress;
} AVD_Info;

typedef struct
{
    MS_U8 u8Threshold1;
    MS_U8 u8Threshold2;
    MS_U8 u8Threshold3;
    MS_U8 u8Threshold4;

    MS_U8 u8Str1_COMB37;
    MS_U8 u8Str1_COMB38;
    MS_U8 u8Str1_COMB7C;
    MS_U8 u8Str1_COMBED;

    MS_U8 u8Str2_COMB37;
    MS_U8 u8Str2_COMB38;
    MS_U8 u8Str2_COMB7C;
    MS_U8 u8Str2_COMBED;

    MS_U8 u8Str3_COMB37;
    MS_U8 u8Str3_COMB38;
    MS_U8 u8Str3_COMB7C;
    MS_U8 u8Str3_COMBED;

    MS_BOOL bMessageOn;
} AVD_Still_Image_Param;

typedef enum
{
    E_FACTORY_PARA_AFEC_D4,
    E_FACTORY_PARA_AFEC_D8,
    E_FACTORY_PARA_AFEC_D5_BIT2,
    E_FACTORY_PARA_AFEC_D9_BIT0,
    E_FACTORY_PARA_AFEC_A0,
    E_FACTORY_PARA_AFEC_A1,
    E_FACTORY_PARA_AFEC_66_BIT67,
    E_FACTORY_PARA_AFEC_6E_BIT7654,
    E_FACTORY_PARA_AFEC_6E_BIT3210,
    E_FACTORY_PARA_AFEC_43,
    E_FACTORY_PARA_AFEC_44,
    E_FACTORY_PARA_AFEC_CB,
    E_FACTORY_PARA_AFEC_CF_BIT2,
    E_FACTORY_PARA_AFEC_D5_BIT3,
    E_FACTORY_PARA_AFEC_D7_HIGH,
    E_FACTORY_PARA_AFEC_D7_LOW,
    E_FACTORY_PARA_AFEC_MAX
}AVD_Factory_Para;
# 494 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAVD.h"
extern void MDrv_AVD_MCUFreeze(MS_BOOL bEnable);






extern void MDrv_AVD_Exit(void);
# 537 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAVD.h"
extern AVD_Result MDrv_AVD_Init(VD_INITDATA *pVD_InitData, MS_U32 u32InitDataLen);







extern MS_BOOL MDrv_AVD_McuReset(void);
# 572 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAVD.h"
extern MS_U16 MDrv_AVD_GetStatus(void);





extern AVD_Result MDrv_AVD_GetLibVer(const MSIF_Version **ppVersion);







extern MS_BOOL MDrv_AVD_SetDbgLevel(AVD_DbgLv u8DbgLevel);






extern const AVD_Info* MDrv_AVD_GetInfo(void);







extern MS_BOOL MDrv_AVD_IsSyncLocked(void);
#if 0
extern MS_BOOL MDrv_VD_IsSyncDetected(void);
#endif







extern MS_U16 MDrv_AVD_Scan_HsyncCheck(MS_U8 u8HtotalTolerance);






extern MS_BOOL MDrv_AVD_IsSignalInterlaced(void);






extern MS_BOOL MDrv_AVD_IsColorOn(void);
#if 0
MS_BOOL MDrv_VD_IsStandardValid(void);
#endif





extern AVD_VideoFreq MDrv_AVD_GetVerticalFreq(void);






extern MS_U16 MDrv_AVD_GetVTotal(void);






extern MS_U8 MDrv_AVD_GetNoiseMag(void);
# 659 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAVD.h"
extern MS_BOOL MDrv_AVD_SetInput(AVD_InputSourceType eSource, MS_U8 u8ScartFB);
# 669 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAVD.h"
extern MS_BOOL MDrv_AVD_SetVideoStandard(AVD_VideoStandardType eStandard, MS_BOOL bIsInAutoTuning);






extern void MDrv_AVD_StartAutoStandardDetection(void);
#if 0
extern void MDrv_VD_StopAutoStandardDetection(void);
#endif







extern MS_BOOL MDrv_AVD_ForceVideoStandard(AVD_VideoStandardType eVideoStandardType);
#if 0
extern void MDrv_VD_DisableForceMode(void);
#endif
#if 0
extern AVD_VIDEOSTANDARD_TYPE MDrv_VD_GetResultOfAutoStandardDetection(void);
#endif






extern AVD_VideoStandardType MDrv_AVD_GetStandardDetection(MS_U16 *u16LatchStatus);
#if 0
extern AVD_VIDEOSTANDARD_TYPE MDrv_VD_DetectStandardAutomatically(void);
#endif





extern AVD_VideoStandardType MDrv_AVD_GetLastDetectedStandard(void);
#if 0
extern void MDrv_VD_EnableAutoGainControl(MS_BOOL bEnable);
#endif





extern void MDrv_AVD_Set3dComb(MS_BOOL bEnable);





extern void MDrv_AVD_3DCombSpeedup(void);






extern void MDrv_AVD_SetFreerunPLL(AVD_VideoFreq eVideoFreq);






extern void MDrv_AVD_SetFreerunFreq(AVD_FreeRunFreq eFreerunfreq);





extern void MDrv_AVD_SetRegFromDSP(void);






extern void MDrv_AVD_SetFlag(MS_U32 u32VDPatchFlag);






extern MS_U32 MDrv_AVD_GetFlag(void);






extern void MDrv_AVD_Set_Htt_UserMD(MS_U16 u16Htt);





extern void MDrv_AVD_SetChannelChange(void);






extern void MDrv_AVD_SetHsyncDetectionForTuning(MS_BOOL bEnable);







extern void MDrv_AVD_SetRegValue(MS_U16 u16Addr,MS_U8 u8Value);







extern MS_U8 MDrv_AVD_GetRegValue(MS_U16 u16Addr);





extern void MDrv_AVD_LoadDSP(MS_U8 *pu8VD_DSP, MS_U32 len);





extern void MDrv_AVD_SetPQFineTune(void);







extern void MDrv_AVD_Set3dCombSpeed(MS_U8 u8COMB57, MS_U8 u8COMB58);





extern void MDrv_AVD_GetCaptureWindow(void *stCapWin, AVD_VideoStandardType eVideoStandardType);





extern MS_U8 MDrv_AVD_MBX_ReadByteByVDMbox(MS_U8 u8Addr);






extern MS_U8 MDrv_AVD_GetHsyncEdge(void);






extern void MDrv_AVD_SetStillImageParam(AVD_Still_Image_Param param);





extern void MDrv_AVD_SetAFECD4Factory(MS_U8 u8Value);





extern void MDrv_AVD_Set2D3DPatchOnOff(MS_BOOL bEnable);





extern void MDrv_AVD_BackPorchWindowPositon(MS_BOOL bEnable , MS_U8 u8Value);







extern void MDrv_AVD_SetFactoryPara(AVD_Factory_Para FactoryPara,MS_U8 u8Value);





extern MS_U8 MDrv_AVD_SetAutoFineGainToFixed(void);






extern MS_U8 MDrv_AVD_GetDSPFineGain(void);






extern MS_U16 MDrv_AVD_GetDSPVersion(void);





extern void MDrv_AVD_ShiftClk(AVD_ATV_CLK_TYPE eShiftMode);







extern void MDrv_AVD_SetShiftClk(MS_BOOL bEnable,AVD_ATV_CLK_TYPE eShiftMode);





extern void MDrv_AVD_ShifClk_Monitor(void);





extern void MDrv_AVD_SCART_Monitor(void);







extern MS_U32 MDrv_AVD_SetPowerState(EN_POWER_MODE u16PowerState);






extern MS_BOOL MDrv_AVD_GetMacroVisionDetect(void);






extern MS_BOOL MDrv_AVD_GetCGMSDetect(void);





extern void SYMBOL_WEAK MDrv_AVD_SetBurstWinStart(MS_U8 u8BusrtStartPosition);







extern MS_BOOL SYMBOL_WEAK MDrv_AVD_IsLockAudioCarrier(void);

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB_v2.h"
#ifndef _DRV_DTMB_V2_H_
#define _DRV_DTMB_V2_H_ 

#include "drvDMD_DTMB.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 121 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_DTMB_v2.h"
#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif





typedef enum {
    DMD_DTMB_DRV_CMD_SetDbgLevel,
    DMD_DTMB_DRV_CMD_GetInfo,
    DMD_DTMB_DRV_CMD_GetLibVer,
    DMD_DTMB_DRV_CMD_Init,
    DMD_DTMB_DRV_CMD_Exit,
    DMD_DTMB_DRV_CMD_GetConfig,
    DMD_DTMB_DRV_CMD_SetConfig,
    DMD_DTMB_DRV_CMD_SetReset,
    DMD_DTMB_DRV_CMD_Set_QAM_SR,
    DMD_DTMB_DRV_CMD_SetActive,
    DMD_DTMB_DRV_CMD_SetPowerState,
    DMD_DTMB_DRV_CMD_GetLock,
    DMD_DTMB_DRV_CMD_GetModulationMode,
    DMD_DTMB_DRV_CMD_GetSignalStrength,
    DMD_DTMB_DRV_CMD_ReadFrequencyOffset,
    DMD_DTMB_DRV_CMD_GetSignalQuality,
    DMD_DTMB_DRV_CMD_GetPreLdpcBer,
    DMD_DTMB_DRV_CMD_GetPreViterbiBer,
    DMD_DTMB_DRV_CMD_GetPostViterbiBer,
    DMD_DTMB_DRV_CMD_GetSNR,
    DMD_DTMB_DRV_CMD_SetSerialControl,
    DMD_DTMB_DRV_CMD_IIC_BYPASS_MODE,
    DMD_DTMB_DRV_CMD_SWITCH_SSPI_GPIO,
    DMD_DTMB_DRV_CMD_GPIO_GET_LEVEL,
    DMD_DTMB_DRV_CMD_GPIO_SET_LEVEL,
    DMD_DTMB_DRV_CMD_GPIO_OUT_ENABLE,
    DMD_DTMB_DRV_CMD_DoIQSwap,
    DMD_DTMB_DRV_CMD_GetReg,
    DMD_DTMB_DRV_CMD_SetReg,
    DMD_DTMB_DRV_CMD_MD_Init,
    DMD_DTMB_DRV_CMD_MD_Exit,
    DMD_DTMB_DRV_CMD_MD_GetConfig,
    DMD_DTMB_DRV_CMD_MD_SetConfig,
    DMD_DTMB_DRV_CMD_MD_SetReset,
    DMD_DTMB_DRV_CMD_MD_Set_QAM_SR,
    DMD_DTMB_DRV_CMD_MD_SetActive,
    DMD_DTMB_DRV_CMD_MD_SetPowerState,
    DMD_DTMB_DRV_CMD_MD_GetLock,
    DMD_DTMB_DRV_CMD_MD_GetModulationMode,
    DMD_DTMB_DRV_CMD_MD_GetSignalStrength,
    DMD_DTMB_DRV_CMD_MD_ReadFrequencyOffset,
    DMD_DTMB_DRV_CMD_MD_GetSignalQuality,
    DMD_DTMB_DRV_CMD_MD_GetPreLdpcBer,
    DMD_DTMB_DRV_CMD_MD_GetPreViterbiBer,
    DMD_DTMB_DRV_CMD_MD_GetPostViterbiBer,
    DMD_DTMB_DRV_CMD_MD_GetSNR,
    DMD_DTMB_DRV_CMD_MD_SetSerialControl,
    DMD_DTMB_DRV_CMD_MD_IIC_BYPASS_MODE,
    DMD_DTMB_DRV_CMD_MD_SWITCH_SSPI_GPIO,
    DMD_DTMB_DRV_CMD_MD_GPIO_GET_LEVEL,
    DMD_DTMB_DRV_CMD_MD_GPIO_SET_LEVEL,
    DMD_DTMB_DRV_CMD_MD_GPIO_OUT_ENABLE,
    DMD_DTMB_DRV_CMD_MD_DoIQSwap,
    DMD_DTMB_DRV_CMD_MD_GetReg,
    DMD_DTMB_DRV_CMD_MD_SetReg
} DMD_DTMB_DRV_COMMAND;

typedef struct DLL_PACKED _DTMB_DBG_LEVEL_PARAM
{
    DMD_DTMB_DbgLv u8DbgLevel;
} DTMB_DBG_LEVEL_PARAM, *PDTMB_DBG_LEVEL_PARAM;

typedef struct DLL_PACKED _DTMB_GET_INFO_PARAM
{
    DMD_DTMB_Info* pInfo;
} DTMB_GET_INFO_PARAM, *PDTMB_GET_INFO_PARAM;

typedef struct DLL_PACKED _DTMB_GET_LIB_VER_PARAM
{
    const MSIF_Version **ppVersion;
} DTMB_GET_LIB_VER_PARAM, *PDTMB_GET_LIB_VER_PARAM;

typedef struct DLL_PACKED _DTMB_INIT_PARAM
{
    MS_U8 id;
    DMD_DTMB_InitData *pDMD_DTMB_InitData;
    MS_U32 u32InitDataLen;
} DTMB_INIT_PARAM, *PDTMB_INIT_PARAM;

typedef struct DLL_PACKED _DTMB_ID_PARAM
{
    MS_U8 id;
} DTMB_ID_PARAM, *PDTMB_ID_PARAM;

typedef struct DLL_PACKED _DTMB_SET_CONFIG_PARAM
{
    MS_U8 id;
    DMD_DTMB_DEMOD_TYPE eType;
    MS_BOOL bEnable;
} DTMB_SET_CONFIG_PARAM, *PDTMB_SET_CONFIG_PARAM;

typedef struct DLL_PACKED _DTMB_SET_QAM_SR_PARAM
{
    MS_U8 id;
    DMD_DTMB_DEMOD_TYPE eType;
    MS_U16 symbol_rate;
} DTMB_SET_QAM_SR_PARAM, *PDTMB_SET_QAM_SR_PARAM;

typedef struct DLL_PACKED _DTMB_SET_ACTIVE_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} DTMB_SET_ACTIVE_PARAM, *PDTMB_SET_ACTIVE_PARAM;

typedef struct DLL_PACKED _DTMB_SET_POWER_STATE_PARAM
{
    MS_U8 id;
    EN_POWER_MODE u16PowerState;
} DTMB_SET_POWER_STATE_PARAM, *PDTMB_SET_POWER_STATE_PARAM;

typedef struct DLL_PACKED _DTMB_GET_LOCK_PARAM
{
    MS_U8 id;
    DMD_DTMB_GETLOCK_TYPE eType;
    DMD_DTMB_LOCK_STATUS status;
} DTMB_GET_LOCK_PARAM, *PDTMB_GET_LOCK_PARAM;

typedef struct DLL_PACKED _DTMB_GET_MODULATION_MODE_PARAM
{
    MS_U8 id;
    DMD_DTMB_MODULATION_INFO info;
} DTMB_GET_MODULATION_MODE_PARAM, *PDTMB_GET_MODULATION_MODE_PARAM;

typedef struct DLL_PACKED _DTMB_GET_SIGNAL_STRENGTH_PARAM
{
    MS_U8 id;
    MS_U16 u16Strength;
} DTMB_GET_SIGNAL_STRENGTH_PARAM, *PDTMB_GET_SIGNAL_STRENGTH_PARAM;

typedef struct DLL_PACKED _DTMB_READ_FREQ_OFFSET_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_DTMB_CFO_DATA cfo;
    #else
    MS_S16 cfo;
    #endif
} DTMB_READ_FREQ_OFFSET_PARAM, *PDTMB_READ_FREQ_OFFSET_PARAM;

typedef struct DLL_PACKED _DTMB_GET_SIGNAL_QUALITY_PARAM
{
    MS_U8 id;
    MS_U8 u8Percentage;
} DTMB_GET_SIGNAL_QUALITY_PARAM, *PDTMB_GET_SIGNAL_QUALITY_PARAM;

typedef struct DLL_PACKED _DTMB_GET_BER_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_DTMB_BER_DATA ber;
    #else
    float ber;
    #endif
} DTMB_GET_BER_PARAM, *PDTMB_GET_BER_PARAM;

typedef struct DLL_PACKED _DTMB_GET_SNR_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_DTMB_SNR_DATA snr;
    #else
    float snr;
    #endif
} DTMB_GET_SNR_PARAM, *PDTMB_GET_SNR_PARAM;

typedef struct DLL_PACKED _DTMB_SET_SERIAL_CONTROL_PARAM
{
    MS_U8 id;
    MS_U8 u8TsConfigData;
} DTMB_SET_SERIAL_CONTROL_PARAM, *PDTMB_SET_SERIAL_CONTROL_PARAM;

typedef struct DLL_PACKED _DTMB_IIC_BYPASS_MODE_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} DTMB_IIC_BYPASS_MODE_PARAM, *PDTMB_IIC_BYPASS_MODE_PARAM;

typedef struct DLL_PACKED _DTMB_SWITCH_SSPI_GPIO_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} DTMB_SWITCH_SSPI_GPIO_PARAM, *PDTMB_SWITCH_SSPI_GPIO_PARAM;

typedef struct DLL_PACKED _DTMB_GPIO_LEVEL_PARAM
{
    MS_U8 id;
    MS_U8 u8Pin;
    MS_BOOL bLevel;
} DTMB_GPIO_LEVEL_PARAM, *PDTMB_GPIO_LEVEL_PARAM;

typedef struct DLL_PACKED _DTMB_DO_IQ_SWAP_PARAM
{
    MS_U8 id;
    MS_BOOL bIsQPad;
} DTMB_DO_IQ_SWAP_PARAM, *PDTMB_DO_IQ_SWAP_PARAM;

typedef struct DLL_PACKED _DTMB_GPIO_OUT_ENABLE_PARAM
{
    MS_U8 id;
    MS_U8 u8Pin;
    MS_BOOL bEnableOut;
} DTMB_GPIO_OUT_ENABLE_PARAM, *PDTMB_GPIO_OUT_ENABLE_PARAM;

typedef struct DLL_PACKED _DTMB_DO_IQSWAP_PARAM
{
    MS_U8 id;
    MS_BOOL bIsQPad;
} DTMB_DO_IQSWAP_PARAM, *PDTMB_DO_IQSWAP_PARAM;

typedef struct DLL_PACKED _DTMB_REG_PARAM
{
    MS_U8 id;
    MS_U16 u16Addr;
    MS_U8 u8Data;
} DTMB_REG_PARAM, *PDTMB_REG_PARAM;





DLL_PUBLIC extern void DTMBRegisterToUtopia(FUtopiaOpen ModuleType);
DLL_PUBLIC extern MS_U32 DTMBOpen(void** ppInstance, MS_U32 u32ModuleVersion, void* pAttribute);
DLL_PUBLIC extern MS_U32 DTMBClose(void* pInstance);
DLL_PUBLIC extern MS_U32 DTMBIoctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);

#ifdef __cplusplus
}
#endif

#endif
# 100 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAUDIO.h"
#ifndef _DRVAUDIO_H_
#define _DRVAUDIO_H_ 




#include "MsTypes.h"
#include "drvAUDIO_if.h"

#ifdef __cplusplus
extern "C"
{
#endif





#define MSIF_AUDIO_LIB_CODE {'A','U','D','-'}
#define MSIF_AUDIO_LIBVER {'0','0'}
#define MSIF_AUDIO_BUILDNUM {'5','B'}
#define MSIF_AUDIO_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define AUD_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_AUDIO_LIB_CODE, \
    MSIF_AUDIO_LIBVER, \
    MSIF_AUDIO_BUILDNUM, \
    MSIF_AUDIO_CHANGELIST, \
    MSIF_OS

#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)

#define AU_memcpy(pDstAddr,pSrcAddr,u32Size) \
    do { \
        register unsigned long u32I=0; \
        register unsigned long u32Dst = (unsigned long)pDstAddr; \
        void * pSrc = (void *)pSrcAddr; \
        if( (u32Dst % 4) || ((unsigned long)pSrc % 4) ) \
        { \
            for( u32I=0; u32I< (unsigned long)(u32Size); u32I++) \
            { \
                ((volatile unsigned char *)u32Dst)[u32I] = ((volatile unsigned char *)pSrc)[u32I]; \
            } \
        } \
        else \
        { \
            for( u32I=0; u32I < ((unsigned long)(u32Size)/4); u32I++) \
            { \
                ((volatile unsigned long *)u32Dst)[u32I] = ((volatile unsigned long *)pSrc)[u32I]; \
            } \
            u32Dst += u32I*4; \
            pSrc = (void *)((unsigned long)pSrc + u32I*4); \
            if((u32Size)%4) \
            { \
                for( u32I=0; u32I<((unsigned long)(u32Size)%4); u32I++) \
                { \
                    ((volatile unsigned char *)u32Dst)[u32I] = ((volatile unsigned char *)pSrc)[u32I]; \
                } \
            } \
        } \
    }while(0)

#else

#define AU_memcpy(pDstAddr,pSrcAddr,u32Size) \
    do { \
        register MS_U32 u32I=0; \
        register MS_VIRT virtDst = (MS_VIRT)pDstAddr; \
        void * pSrc = (void *)pSrcAddr; \
        if( (virtDst % 4) || ((MS_VIRT)pSrc % 4) ) \
        { \
            for( u32I=0; u32I< (MS_U32)(u32Size); u32I++) \
            { \
                ((volatile MS_U8 *)virtDst)[u32I] = ((volatile MS_U8 *)pSrc)[u32I]; \
            } \
        } \
        else \
        { \
            for( u32I=0; u32I < ((MS_U32)(u32Size)/4); u32I++) \
            { \
                ((volatile MS_U32 *)virtDst)[u32I] = ((volatile MS_U32 *)pSrc)[u32I]; \
            } \
            virtDst += u32I*4; \
            pSrc = (void *)((MS_VIRT)pSrc + u32I*4); \
            if((u32Size)%4) \
            { \
                for( u32I=0; u32I<((MS_U32)(u32Size)%4); u32I++) \
                { \
                    ((volatile MS_U8 *)virtDst)[u32I] = ((volatile MS_U8 *)pSrc)[u32I]; \
                } \
            } \
        } \
    }while(0)

#endif

#define AU_Memset(pDstAddr,u8value,u32Size) \
    do { \
        MS_U32 i = 0; \
        volatile MS_U8 *dst = (volatile MS_U8 *)(pDstAddr); \
        for (i = 0; i < (u32Size); i++) \
        { \
            dst[i] = (u8value); \
        } \
    } while (0)

#define HDMI_NonPCM_Mask 0x01
#define HDMI_Input_Path_Mask 0x10

typedef enum
{
  Hdmi_Input_Main = 0x00,
  Hdmi_Input_Sub = 0x10,

} Hdmi_Input_Path;




 extern MS_BOOL MDrv_AUD_GetLibVer(const MSIF_Version **ppVersion);




 MS_U16 MDrv_AUDIO_ReadReg(MS_U32 u32RegAddr);
 void MDrv_AUDIO_WriteReg(MS_U32 u32RegAddr, MS_U16 u16Val);
 void MDrv_AUDIO_WriteMaskReg(MS_U32 u32RegAddr, MS_U16 u16Mask, MS_U16 u16Val);

 MS_U8 MDrv_AUDIO_ReadByte(MS_U32 addr);
 MS_U8 MDrv_AUDIO_DecReadByte(MS_U32 addr);
 MS_U8 MDrv_AUDIO_SeReadByte(MS_U32 addr);

 void MDrv_AUDIO_WriteByte(MS_U32 addr, MS_U8 value);
 void MDrv_AUDIO_DecWriteByte(MS_U32 addr, MS_U8 value);
 void MDrv_AUDIO_SeWriteByte(MS_U32 addr, MS_U8 value);

 void MDrv_AUDIO_WriteMaskByte(MS_U32 u32RegAddr, MS_U8 u8Mask, MS_U8 u8Val);
 void MDrv_AUDIO_DecWriteMaskByte(MS_U32 u32RegAddr, MS_U8 u8Mask, MS_U8 u8Val);
 void MDrv_AUDIO_SeWriteMaskByte(MS_U32 u32RegAddr, MS_U8 u8Mask, MS_U8 u8Val);

 MS_U16 MDrv_AUDIO_ReadDecMailBox(MS_U8 paramNum);
 void MDrv_AUDIO_WriteDecMailBox(MS_U8 paramNum, MS_U16 data1);
 MS_U16 MDrv_AUDIO_ReadSeMailBox(MS_U8 paramNum);
 void MDrv_AUDIO_WriteSeMailBox(MS_U8 paramNum, MS_U16 data1);




void MDrv_AUDIO_InitMMIO(void);
MS_BOOL MDrv_AUDIO_AttachInterrupt(MS_BOOL bEnable);
MS_BOOL MDrv_AUDIO_Mutex_Init(void);
MS_BOOL MDrv_AUDIO_SHM_Init(void);
MS_BOOL MDrv_AUDIO_Init(void);
MS_BOOL MDrv_AUDIO_Close(void);
MS_BOOL MDrv_AUDIO_Open(void);
void MDrv_AUDIO_WriteInitTable(void);
void MDrv_AUDIO_WritePreInitTable(void);
void MDrv_AUDIO_EnaEarphone_LowPower_Stage(void);
void MDrv_AUDIO_EnaEarphone_HighDriving_Stage(void);
void MDrv_AUDIO_SwResetMAD(void);
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
void MDrv_AUDIO_SetDspBaseAddr(MS_U8 u8Index, MS_U32 u32Bin_Base_Address, MS_U32 u32Mad_Base_Buffer_Adr);
#else
void MDrv_AUDIO_SetDspBaseAddr(MS_U8 u8Index, MS_PHY phyBin_Base_Address, MS_PHY phyMad_Base_Buffer_Adr);
#endif
MS_PHY MDrv_AUDIO_GetDspBinBaseAddr(MS_U8 u8Iindex);
MS_PHY MDrv_AUDIO_GetDspMadBaseAddr(MS_U8 u8Index) ;
void MDrv_AUDIO_DspBootOnDDR(MS_BOOL bEnable);
MS_BOOL MDrv_AUDIO_DecoderLoadCode(void);
MS_BOOL MDrv_AUDIO_SeSystemLoadCode(void);
void MDrv_AUDIO_DspReboot(MS_U8 param);
void MDrv_AUDIO_RebootDecDSP(void);
void MDrv_AUDIO_TriggerSifPLL(void);
void MDrv_AUDIO_SetPlayFileFlag(MS_BOOL bDspType, MS_BOOL bSet);
MS_BOOL MDrv_AUDIO_GetPlayFileFlag(MS_BOOL bDspType);
MS_BOOL MDrv_AUDIO_InitialVars(void);
void MDrv_AUDIO_SET_INIT_FLAG(MS_BOOL bSet);
MS_BOOL MDrv_AUDIO_GET_INIT_FLAG(void);
void MDrv_AUDIO_ResetDspCodeType(void);




AUDIO_PATH_GROUP_TYPE MDrv_AUDIO_GetPathGroup(void);
void MDrv_AUDIO_SetNormalPath(AUDIO_PATH_TYPE u8Path, AUDIO_INPUT_TYPE u8Input, AUDIO_OUTPUT_TYPE output);
void MDrv_AUDIO_SetInputPath( AUDIO_INPUT_TYPE u8Input, AUDIO_PATH_TYPE u8Path);
void MDrv_AUDIO_SetOutputPath( AUDIO_PATH_TYPE u8Path, AUDIO_OUTPUT_TYPE u8Output);
void MDrv_AUDIO_SetInternalPath(AUDIO_INTERNAL_PATH_TYPE u8Path, AUDIO_OUTPUT_TYPE u8Output);

MS_U8 MDrv_AUDIO_ReadDspCodeType(void);

void MDrv_AUDIO_BT_SetUploadRate(MS_BOOL bEnable, MS_U8 u8Samprate);
void MDrv_AUDIO_BT_SetBufferCounter(MS_U32 u32Counter);

MS_U8 MDrv_AUDIO_ReadDspCounter(AUDIO_DSP_COUNTER_TYPE CounterType);
void MDrv_AUDIO_SetPowerDownWait(MS_BOOL bEnable);
MS_BOOL MDrv_AUDIO_IsDTV(void);
void MDrv_AUDIO_SetFading(MS_U32 u32VolFading);




void MDrv_AUDIO_SPDIF_SetMute(MS_U8 mute_en);
void MDrv_AUDIO_SPDIF_SetMode(MS_U8 spdif_mode, MS_U8 input_src);
void MDrv_AUDIO_SPDIF_ByPassChannel(MS_BOOL u8Enable);
void MDrv_AUDIO_SPDIF_SetChannelStatus(SPDIF_CS_MODE_TYPE eType, SPDIF_CS_MODE_VALUE eValue);
void MDrv_AUDIO_SPDIF_Monitor_SamplingRate(void);



void MDrv_AUDIO_HDMI_Tx_GetStatus(MS_BOOL *onOff, AUDIO_FS_TYPE *hdmi_SmpFreq, HDMI_TX_OUTPUT_TYPE *outType );
MS_U8 MDrv_AUDIO_HDMI_DolbyMonitor(void);
void MDrv_AUDIO_HDMI_AC3_PathCFG(MS_U8 u8Ctrl);
void MDrv_AUDIO_HDMI_TX_SetMode(HDMI_TX_OUTPUT_TYPE outType, AUDIO_SOURCE_INFO_TYPE eSource);



void MDrv_AUDIO_AdcInit(void);
MS_U8 MDrv_AUDIO_GetDecoderStatus(void);

MS_U16 MDrv_AUDIO_GetUniDecodeDoneTag(void);

void MDrv_AUDIO_update_DspUsage(AUDIO_SOURCE_INFO_TYPE eSourceType);



MS_BOOL MDrv_AUDIO_ALSA_Enable(MS_BOOL bEnable);

void MDrv_AUDIO_DumpDspInfo(void);

MS_U32 MDrv_AUDIO_GetCaps(AUDIO_DEC_ID DecId, MS_U32 *pCaps);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSTBDC.h"
#ifndef _DRV_STBDC_H_
#define _DRV_STBDC_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
# 119 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSTBDC.h"
#define MSIF_STBDC_LIB_CODE {'S','T','B','_'}
#define MSIF_STBDC_LIBVER {'0','1'}
#define MSIF_STBDC_BUILDNUM {'0','1'}
#define MSIF_STBDC_CHANGELIST {'0','0','1','3','4','8','7','2'}

#define STBDC_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_STBDC_LIB_CODE, \
    MSIF_STBDC_LIBVER, \
    MSIF_STBDC_BUILDNUM, \
    MSIF_STBDC_CHANGELIST, \
    MSIF_OS


#define _SUPPORT_IMG_OFFSET_ 




typedef enum
{
    E_STBDC_OK = 0,
    E_STBDC_FAIL = 1,
    E_STBDC_INVALID_PARAM = 2
} STBDC_Result;


typedef enum
{
    E_STBDC_TILE_8x32 = 0,
    E_STBDC_TILE_16x32 = 1,
    E_STBDC_TILE_NONE = 2
} STBDC_TileFormat;




typedef struct
{
    MS_PHYADDR u32LumaAddr;
    MS_PHYADDR u32ChromaAddr;
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_U16 u16Pitch;
    MS_BOOL bYUV422;
    MS_BOOL bProgressive;
    MS_BOOL bBottomField;
    MS_U16 u16CropX;
    MS_U16 u16CropY;
    MS_U16 u16CropWidth;
    MS_U16 u16CropHeight;
} STBDC_InputCfg;




typedef enum
{
    STBDC_PATTERN_NORMAL = 0,
    STBDC_PATTERN_COLORBAR = 1,
    STBDC_PATTERN_FRAMECOLOR = 2,
    STBDC_PATTERN_YCBCR = 3,
    STBDC_PATTERN_Y = 4,
    STBDC_PATTERN_CB = 5,
    STBDC_PATTERN_CR = 6,
    STBDC_PATTERN_DEFAULT = 7
} STBDC_Pattern;

typedef enum
{
    E_STBDC_INPUT_DRAM = 0,
    E_STBDC_INPUT_HVD = 1,
    E_STBDC_INPUT_MVD = 2,
    E_STBDC_INPUT_JPD = 3,
    E_STBDC_INPUT_UNKNOWN = -1
} STBDC_InputSel;


typedef struct
{
    MS_U16 u16HorSize;
    MS_U16 u16VerSize;
    MS_U16 u16FrameRate;
    MS_U8 u8AspectRate;
    MS_U8 u8Interlace;
    MS_U16 u16HorOffset;
    MS_U16 u16VerOffset;
} STBDC_VidStat;



typedef struct _STBDC_DrvStatus
{
    MS_BOOL bIsInit;
    MS_BOOL bIsEnable;
    MS_BOOL bIsUVShift;
    MS_BOOL bIsBlackBG;
    MS_BOOL bIsMonoMode;
    MS_BOOL bIsSetTiming;
} STBDC_DrvStatus;
# 233 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSTBDC.h"
#ifdef __cplusplus
}
#endif

#endif
# 101 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
#ifndef _DRV_MPIF_H_
#define _DRV_MPIF_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 119 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
#define MSIF_MPIF_TAG {'M','S','I','F'}
#define MSIF_MPIF_CLASS {'1','0'}
#define MSIF_MPIF_CUS 0x6666
#define MSIF_MPIF_MOD 0x0000
#define MSIF_MPIF_CHIP 0x000F
#define MSIF_MPIF_CPU '1'
#define MSIF_MPIF_LIB_CODE {'M','P','I','F'}
#define MSIF_MPIF_LIBVER {'0','2'}
#define MSIF_MPIF_BUILDNUM {'0','3'}
#define MSIF_MPIF_CHANGELIST {'0','0','5','6','7','4','8','0'}
#define MSIF_MPIF_OS '0'

#define MPIF_DRV_VERSION \
            MSIF_MPIF_TAG, \
            MSIF_MPIF_CLASS, \
            MSIF_MPIF_CUS, \
            MSIF_MPIF_MOD, \
            MSIF_MPIF_CHIP, \
            MSIF_MPIF_CPU, \
            MSIF_MPIF_LIB_CODE, \
            MSIF_MPIF_LIBVER, \
            MSIF_MPIF_BUILDNUM, \
            MSIF_MPIF_CHANGELIST, \
            MSIF_MPIF_OS

#define MPIF_TR_CYCLE_0T 0
#define MPIF_TR_CYCLE_1T 1
#define MPIF_TR_CYCLE_2T 2
#define MPIF_TR_CYCLE_3T 3
#define MPIF_TR_CYCLE_4T 4
#define MPIF_TR_CYCLE_5T 5
#define MPIF_TR_CYCLE_6T 6
#define MPIF_TR_CYCLE_7T 7
#define MPIF_TR_CYCLE_1A2X_SEL MPIF_TR_CYCLE_1T
#define MPIF_TR_CYCLE_3X4A_SEL MPIF_TR_CYCLE_1T


#define MPIF_WAIT_CYCLE_0T 0
#define MPIF_WAIT_CYCLE_1T 1
#define MPIF_WAIT_CYCLE_2T 2
#define MPIF_WAIT_CYCLE_3T 3
#define MPIF_WAIT_CYCLE_SEL MPIF_WAIT_CYCLE_1T

#define MPIF_SLAVE_DATAWIDTH_1bit 0
#define MPIF_SLAVE_DATAWIDTH_2bit 1
#define MPIF_SLAVE_DATAWIDTH_4bit 2
#define MPIF_SLAVE_DATAWIDTH_8bit 3
#define MPIF_SLAVE_DATAWIDTH_SEL MPIF_SLAVE_DATAWIDTH_1bit

#define MPIF_CMD_DATAWIDTH_1bit 0
#define MPIF_CMD_DATAWIDTH_2bit 1
#define MPIF_CMD_DATAWIDTH_4bit 2
#define MPIF_CMD_DATAWIDTH_8bit 3
#define MPIF_CMD_DATAWIDTH_SEL MPIF_CMD_DATAWIDTH_1bit

#define MPIF_LC1A_INDEX_0 0x00
#define MPIF_LC1A_INDEX_1 0x01
#define MPIF_LC1A_INDEX_2 0x02
#define MPIF_LC1A_INDEX_3 0x03
#define MPIF_LC1A_INDEX_4 0x04
#define MPIF_LC1A_INDEX_5 0x05
#define MPIF_LC1A_INDEX_6 0x06
#define MPIF_LC1A_INDEX_7 0x07

#define MPIF_2X_DEST_SPIF 0
#define MPIF_2X_DEST_XIU 1

#define MPIF_MAX_RTX_0 0x00
#define MPIF_MAX_RTX_1 0x01
#define MPIF_MAX_RTX_2 0x02
#define MPIF_MAX_RTX_3 0x03
#define MPIF_MAX_RTX_SEL MPIF_MAX_RTX_0




typedef struct _MPIF_CONFIG
{
 MS_U8 u8trc_1A2X;
 MS_U8 u8trc_3X4A;
 MS_U8 u8wc;
 MS_U8 u8Slave0Dw;
 MS_U8 u8Slave1Dw;
 MS_U8 u8Slave2Dw;
 MS_U8 u8Slave3Dw;
 MS_U8 u8CmdDw;
}MPIF_CONFIG;

typedef struct _MPIF_3XCTL
{
 MS_BOOL bChkSum;
 MS_U8 u8rtx;
 MS_BOOL bFastMode;
 MS_U8 u8wcnt;
}MPIF_3XCTL;

typedef struct _MPIF_DrvStatus
{
    MS_BOOL bIsBusy;
}MPIF_DrvStatus;

#ifdef MPIF_SPI_SUPPORT

typedef struct _MPIF_SPI_CONFIG
{
 MS_U8 u8SerialMode;
 MS_U8 u8LeadingCyc;
 MS_U8 u8TrailingCyc;
 MS_U8 u8CMDLen;
 MS_BOOL bSrcMIU;
 MS_U8 u8MIUSel;
} MPIF_SPI_CONFIG;

#endif
# 243 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_GetLibVer(const MSIF_Version **ppVersion);





const MPIF_CONFIG* MDrv_MPIF_GetInfo(void);





void MDrv_MPIF_GetStatus(MPIF_DrvStatus *pStatus);







MS_BOOL MDrv_MPIF_SetDbgLevel(MS_U8 u8DbgLevel);
# 273 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
void MDrv_MPIF_Init(MPIF_CONFIG* pcfg);

void MDrv_MPIF_Uninit(void);
# 284 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC1A_RW(MS_U8 bWrite, MS_U8 u8slaveid, MS_U8 u8index, MS_U8 *pu8data);
# 293 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_Set_LC2XPath(MS_U8 u8slaveid, MS_U8 u8path);
# 305 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC2A_RW(MS_U8 bWrite, MS_U8 u8slaveid, MS_BOOL bchecksum, MS_U8 u8rtx, MS_U16 u16addr, MS_U16* pu16data);
# 317 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC2B_RW(MS_U8 bWrite, MS_U8 u8slaveid, MS_BOOL bchecksum, MS_U8 u8rtx, MS_U16 u16addr, MS_U16* pu16data);
# 328 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC3A_RIURW(MS_BOOL bWrite, MS_U8 u8slaveid, MS_U8 u8datalen, MS_U8 *pu8data, MPIF_3XCTL *p3xctl);
# 339 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC3B_RIURW(MS_BOOL bWrite, MS_U8 u8slaveid, MS_U8 u8datalen, MS_U8 *pu8data, MPIF_3XCTL *p3xctl);
# 352 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC3A_MIURW(MS_BOOL bWrite, MS_U8 u8slaveid, MS_U32 u32datalen, MS_PHYADDR u32miu_addr, MS_PHYADDR u32spif_mdr, MPIF_3XCTL *p3xcfg);
# 365 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC3B_MIURW(MS_BOOL bWrite, MS_U8 u8slaveid, MS_U32 u32datalen, MS_PHYADDR u32miu_addr, MS_PHYADDR u32spif_mdr, MPIF_3XCTL *p3xcfg);
# 376 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_LC4A_MIURW(MS_BOOL bWrite, MS_U8 u8slaveid, MS_U16 u16datalen, MS_PHYADDR u32miu_addr, MS_PHYADDR u32spif_mdr);






MS_BOOL MDrv_MPIF_Print_SPIFCfgInfo(MS_U8 u8slaveid);
# 392 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_SetCmdDataMode(MS_U8 u8slaveid, MS_U8 u8cmdwidth, MS_U8 u8datawidth);
# 401 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_Set_Clock(MS_U8 u8slaveid, MS_U8 u8clk, MS_U8 u8slaveClkInvDlyNum);






MS_BOOL MDrv_MPIF_Clock_Disable(MS_BOOL bDisabled);







MS_BOOL MDrv_MPIF_SetSlave_ClkInv_Delay(MS_U8 u8slaveid, MS_U8 u8DlyBufNum);
# 425 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_SetSlave_Trc_Wt(MS_U8 u8slaveid, MS_U8 u8trc, MS_U8 u8wt);







MS_BOOL MDrv_MPIF_SetSlave_Clk_Delay(MS_U8 u8slaveid, MS_U8 u8DlyBufNum);

#ifdef MPIF_SPI_SUPPORT







MS_BOOL MDrv_MPIF_SPI_Configure(MS_U8 u8slaveid, MPIF_SPI_CONFIG* pcfg);
# 454 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_SPI_RIU_RWData(MS_BOOL bWrite, MS_U32 *pu32cmd, MS_U8 u8cmdlen, MS_U8 *pudata, MS_U16 u16datalen);
# 466 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMPIF.h"
MS_BOOL MDrv_MPIF_SPI_MIU_RWData(MS_BOOL bWrite, MS_U32 *pu32cmd, MS_U8 u8cmdlen, MS_PHYADDR u32MiuAddr, MS_U16 u16datalen);


#endif

#ifdef __cplusplus
}
#endif

#endif
# 153 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
#ifndef _API_VDEC_EX_H_
#define _API_VDEC_EX_H_ 


#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif

#if (!defined(MSOS_TYPE_NUTTX) && !defined(MSOS_TYPE_OPTEE)) || defined(SUPPORT_X_MODEL_FEATURE)




#define MSIF_VDEC_EX_LIB_CODE {'V','E','X','_'}
#define MSIF_VDEC_EX_LIBVER {'0','5'}
#define MSIF_VDEC_EX_BUILDNUM {'0','3'}
#define MSIF_VDEC_EX_CHANGELIST {'0','0','6','9','3','0','7','7'}


#define VDEC_EX_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_VDEC_EX_LIB_CODE, \
    MSIF_VDEC_EX_LIBVER, \
    MSIF_VDEC_EX_BUILDNUM, \
    MSIF_VDEC_EX_CHANGELIST, \
    MSIF_OS

#define VDEC_EX_DEFAULT_DBG_MSG_LEVEL E_VDEC_EX_DBG_LEVEL_DBG
#define VDEC_EX_RVD_BROKEN_BY_US 0x80000000
#define VDEC_EX_MVD_PIC_START_FLAG 0x40000000
#if defined(UFO_PUBLIC_HEADER_300)
#define VDEC_EX_BIT(_bit_) (1 << (_bit_))
#define VDEC_CAP_REPORT_SCAN_TYPE 
#define VDEC_CAP_MULTI_DECODE 
#define VDEC_CAP_HEVC_HDR 
#define VDEC_CAP_HEVC_HDR_V2 
#define VDEC_CAP_HEVC_HDR_V3 
#define VDEC_CAP_FRAME_INFO_EXT_V4 
#define VDEC_CAP_FRAME_INFO_EXT_V5 
#elif defined(UFO_PUBLIC_HEADER_212)
#define VDEC_EX_BIT(_bit_) (1 << (_bit_))
#define VDEC_CAP_REPORT_SCAN_TYPE 
#define VDEC_CAP_DYNAMIC_CMA 
#define VDEC_CAP_GET_CODEC_INFO 
#define VDEC_CAP_HEVC_DV 
#define VDEC_CAP_DISABLE_HEVC_10BITS 
#define VDEC_CAP_MULTI_DECODE 
#define VDEC_CAP_TVOS20_DTV_MODE 
#elif defined(UFO_PUBLIC_HEADER_500_3)
#define VDEC_EX_BIT(_bit_) (1 << (_bit_))
#define VDEC_CAP_REPORT_QOS_INFO 
#define VDEC_CAP_REPORT_SCAN_TYPE 
#define VDEC_CAP_DYNAMIC_CMA 
#define VDEC_CAP_HEVC_HDR 
#define VDEC_CAP_HEVC_HDR_V2 
#define VDEC_CAP_HEVC_HDR_V3 
#define VDEC_CAP_FRAME_INFO_EXT_V4 
#define VDEC_CAP_FRAME_INFO_EXT_V5 
#define VDEC_CAP_FRAME_INFO_EXT_V6 
#define VDEC_CAP_FRAME_INFO_EXT_V7 
#define VDEC_CAP_GET_CODEC_INFO 
#define VDEC_CAP_HEVC_DV_XC_SHM_ADDR 
#define VDEC_CAP_DISABLE_HEVC_10BITS 
#define VDEC_CAP_MULTI_DECODE 
#define VDEC_CAP_TVOS20_DTV_MODE 
#define VDEC_CAP_SUPPORT_REAL_FRAMERATE 
#define VDEC_CAP_SUPPORT_ADJUST_DECODER_FREQUENCY 
#else
#define VDEC_EX_BIT(_bit_) (1 << (_bit_))
#define VDEC_CAP_REPORT_QOS_INFO 
#define VDEC_CAP_REPORT_SCAN_TYPE 
#define VDEC_CAP_DYNAMIC_CMA 
#define VDEC_CAP_GET_CODEC_INFO 
#define VDEC_CAP_HEVC_DV 
#if defined(UFO_PUBLIC_HEADER_700)
#define VDEC_CAP_AVC_DV 
#endif
#define VDEC_CAP_DISABLE_HEVC_10BITS 
#define VDEC_CAP_HEVC_HDR 
#define VDEC_CAP_HEVC_HDR_V2 
#define VDEC_CAP_HEVC_HDR_V3 
#define VDEC_CAP_FRAME_INFO_EXT_V4 
#if defined(UFO_PUBLIC_HEADER_700)
#define VDEC_CAP_FRAME_INFO_EXT_V5 
#define VDEC_CAP_FRAME_INFO_EXT_V6 
#define VDEC_CAP_FRAME_INFO_EXT_V7 
#endif
#define VDEC_CAP_HEVC_DV_XC_SHM_ADDR 
#define VDEC_CAP_BUFFER_INFO 
#define VDEC_CAP_HDR10_PERFRAME 
#define VDEC_CAP_MULTI_DECODE 
#define VDEC_CAP_DV_OTT_API 
#if defined(UFO_PUBLIC_HEADER_700)||defined(UFO_PUBLIC_HEADER_500)
#define VDEC_CAP_SYSTEM_PREGET_API 
#define VDEC_CAP_DV_OTT_API_V2 
#endif
#if defined(UFO_PUBLIC_HEADER_500)
#define VDEC_CAP_VP9_HDR 
#endif
#endif
#ifndef VDEC_CAP_SYSTEM_PREGET_FB_MEM_USAGE_SIZE
#define VDEC_CAP_SYSTEM_PREGET_FB_MEM_USAGE_SIZE 
#endif
#define VDEC_CAP_GET_SEQ_INFO 
#define VDEC_CAP_REPORT_STR 




#define VDEC_EX_FPA_TYPE_CHECKERBOARD_INTERLEAVING 0
#define VDEC_EX_FPA_TYPE_COLUMN_INTERLEAVEING 1
#define VDEC_EX_FPA_TYPE_ROW_INTERLEAVEING 2
#define VDEC_EX_FPA_TYPE_SIDE_BY_SIDE_PACKING 3
#define VDEC_EX_FPA_TYPE_TOP_BOTTOM_PACKING 4
#define VDEC_EX_FPA_TYPE_TEMPORAL_INTERLEAVING_FRM 5

#define VDEC_MAX_DEC_NUM 2

#define VDEC_MAX_PROFILE_CAP_INFO_NUM 10

typedef enum
{
    E_VDEC_EX_MAIN_STREAM = 0,
    E_VDEC_EX_SUB_STREAM,
    E_VDEC_EX_N_STREAM,
} VDEC_EX_Stream;

typedef enum
{
    E_VDEC_EX_INPUT_TSP_0 = 0,
    E_VDEC_EX_INPUT_TSP_1,
    E_VDEC_EX_INPUT_TSP_2,
    E_VDEC_EX_INPUT_TSP_3,

    E_VDEC_EX_INPUT_TSP_NONE = 0xFF,
} VDEC_EX_INPUT_TSP;

typedef enum
{
    E_VDEC_EX_DISPLAY_PATH_MVOP_MAIN = 0,
    E_VDEC_EX_DISPLAY_PATH_MVOP_SUB,

    E_VDEC_EX_DISPLAY_PATH_NONE = 0xFF,
} VDEC_EX_DISPLAY_PATH;

typedef struct
{
    MS_BOOL bConnect;
    VDEC_EX_DISPLAY_PATH eMvopPath;
} VDEC_EX_DynmcDispPath;

typedef enum
{
    E_VDEC_EX_DISPLAY_MODE_MCU,
    E_VDEC_EX_DISPLAY_MODE_HARDWIRE,
} VDEC_EX_DISPLAY_MODE;

typedef enum
{
    E_VDEC_EX_SPEC_DEFAULT,
    E_VDEC_EX_SPEC_HEVC_HD_LEVEL41 = 0x100,
    E_VDEC_EX_SPEC_HEVC_FHD_LEVEL41 = 0x120,
    E_VDEC_EX_SPEC_HEVC_FHD_LEVEL51,
    E_VDEC_EX_SPEC_HEVC_UHD_LEVEL51 = 0x140,
    E_VDEC_EX_SPEC_H264_HD_LEVEL40 = 0x200,
    E_VDEC_EX_SPEC_H264_FHD_LEVEL40 = 0x220,
    E_VDEC_EX_SPEC_H264_UHD_LEVEL50 = 0x240
} VDEC_EX_TASK_SPEC;


typedef enum
{

    E_VDEC_EX_EVENT_OFF = 0x00,

    E_VDEC_EX_EVENT_DISP_ONE = VDEC_EX_BIT(0),

    E_VDEC_EX_EVENT_DISP_REPEAT = VDEC_EX_BIT(1),

    E_VDEC_EX_EVENT_DISP_WITH_CC = VDEC_EX_BIT(2),

    E_VDEC_EX_EVENT_DEC_ONE = VDEC_EX_BIT(3),

    E_VDEC_EX_EVENT_DEC_I = VDEC_EX_BIT(4),

    E_VDEC_EX_EVENT_DEC_ERR = VDEC_EX_BIT(5),

    E_VDEC_EX_EVENT_DISP_INFO_CHG = VDEC_EX_BIT(6),

    E_VDEC_EX_EVENT_USER_DATA_FOUND = VDEC_EX_BIT(7),

    E_VDEC_EX_EVENT_DISP_INFO_RDY = VDEC_EX_BIT(8),

    E_VDEC_EX_EVENT_FIRST_FRAME = VDEC_EX_BIT(9),

    E_VDEC_EX_EVENT_PIC_FOUND = VDEC_EX_BIT(10),

    E_VDEC_EX_EVENT_VIDEO_UNMUTE = VDEC_EX_BIT(11),

    E_VDEC_EX_EVENT_SEQ_HDR_FOUND = VDEC_EX_BIT(12),

    E_VDEC_EX_EVENT_AFD_FOUND = VDEC_EX_BIT(13),

    E_VDEC_EX_EVENT_ES_DATA_ERR = VDEC_EX_BIT(14),

    E_VDEC_EX_EVENT_XC_LOW_DEALY = VDEC_EX_BIT(16),

    E_VDEC_EX_EVENT_DEC_CMA_ACTION = VDEC_EX_BIT(17),

    E_VDEC_EX_EVENT_PTS_DISCONTINUE = VDEC_EX_BIT(18),

    E_VDEC_EX_EVENT_DISP_FINISH = VDEC_EX_BIT(19),
} VDEC_EX_EventFlag;


typedef enum
{
    E_VDEC_EX_CB_MAIN = 0,
    E_VDEC_EX_CB_SUB,
} VDEC_EX_CB_TYPE;


typedef enum
{

    E_VDEC_EX_CODEC_TYPE_NONE = 0,

    E_VDEC_EX_CODEC_TYPE_MPEG2,

    E_VDEC_EX_CODEC_TYPE_H263,

    E_VDEC_EX_CODEC_TYPE_MPEG4,

    E_VDEC_EX_CODEC_TYPE_DIVX311,

    E_VDEC_EX_CODEC_TYPE_DIVX412,

    E_VDEC_EX_CODEC_TYPE_FLV,

    E_VDEC_EX_CODEC_TYPE_VC1_ADV,

    E_VDEC_EX_CODEC_TYPE_VC1_MAIN,

    E_VDEC_EX_CODEC_TYPE_RV8,

    E_VDEC_EX_CODEC_TYPE_RV9,

    E_VDEC_EX_CODEC_TYPE_H264,

    E_VDEC_EX_CODEC_TYPE_AVS,

    E_VDEC_EX_CODEC_TYPE_MJPEG,

    E_VDEC_EX_CODEC_TYPE_MVC,

    E_VDEC_EX_CODEC_TYPE_VP8,

    E_VDEC_EX_CODEC_TYPE_HEVC,

    E_VDEC_EX_CODEC_TYPE_VP9,

    E_VDEC_EX_CODEC_TYPE_HEVC_DV,

    E_VDEC_EX_CODEC_TYPE_H264_DV,

    E_VDEC_EX_CODEC_TYPE_NUM
} VDEC_EX_CodecType;


typedef enum
{

    E_VDEC_EX_SRC_MODE_DTV = 0,

    E_VDEC_EX_SRC_MODE_TS_FILE,

    E_VDEC_EX_SRC_MODE_FILE,

    E_VDEC_EX_SRC_MODE_TS_FILE_DUAL_ES,

    E_VDEC_EX_SRC_MODE_FILE_DUAL_ES,
} VDEC_EX_SrcMode;


typedef enum
{

    E_VDEC_EX_FAIL = 0,

    E_VDEC_EX_OK,

    E_VDEC_EX_RET_INVALID_PARAM,

    E_VDEC_EX_RET_ILLEGAL_ACCESS,

    E_VDEC_EX_RET_HARDWARE_BREAKDOWN,

    E_VDEC_EX_RET_UNSUPPORTED,

    E_VDEC_EX_RET_TIMEOUT,

    E_VDEC_EX_RET_NOT_READY,

    E_VDEC_EX_RET_NOT_INIT,

    E_VDEC_EX_RET_NOT_EXIT,

    E_VDEC_EX_RET_NOT_RUNNING,

    E_VDEC_EX_RET_NUM,
} VDEC_EX_Result;


typedef enum
{

    E_VDEC_EX_DISP_ACTION_DISPLAY = 1,

    E_VDEC_EX_DISP_ACTION_RELEASE,
} VDEC_EX_DispCmdAction;


typedef enum
{

    E_VDEC_EX_FREEZE_AT_CUR_PIC = 1,

    E_VDEC_EX_FREEZE_AT_LAST_PIC,

    E_VDEC_EX_FREEZE_AT_CUR_PIC_AND_CLEAR_DECODE_INFO,
} VDEC_EX_FreezePicSelect;


typedef enum
{
    E_VDEC_EX_ERR_CODE_BASE = 0x01000000,
    E_VDEC_EX_ERR_CODE_NOT_SUPPORT,
    E_VDEC_EX_ERR_CODE_ILLEGAL_ACCESS,
    E_VDEC_EX_ERR_CODE_FRMRATE_NOT_SUPPORT,
    E_VDEC_EX_ERR_CODE_DIVX_PLUS_UNSUPPORTED,
    E_VDEC_EX_ERR_CODE_EXCEED_HW_CAP,
    E_VDEC_EX_ERR_CODE_CODEC_COMPARE_CASE1,
    E_VDEC_EX_ERR_CODE_CODEC_COMPARE_CASE2,
    E_VDEC_EX_ERR_CODE_STR_RESUME_WAIT_RESET,


    E_VDEC_EX_MVD_ERR_CODE_BASE = 0x02000000,
        E_VDEC_EX_MVD_ERR_CODE_SHAPE,
        E_VDEC_EX_MVD_ERR_CODE_USED_SPRITE,
        E_VDEC_EX_MVD_ERR_CODE_NOT_8_BIT,
        E_VDEC_EX_MVD_ERR_CODE_NERPRED_ENABLE,
        E_VDEC_EX_MVD_ERR_CODE_REDUCED_RES_ENABLE,
        E_VDEC_EX_MVD_ERR_CODE_SCALABILITY,
        E_VDEC_EX_MVD_ERR_CODE_OTHER,
        E_VDEC_EX_MVD_ERR_CODE_H263_ERROR,
        E_VDEC_EX_MVD_ERR_CODE_RES_NOT_SUPPORT,
        E_VDEC_EX_MVD_ERR_CODE_MPEG4_NOT_SUPPORT,
        E_VDEC_EX_MVD_ERR_CODE_PROFILE_NOT_SUPPORT ,
        E_VDEC_EX_MVD_ERR_CODE_RCV_ERROR_OCCUR,
        E_VDEC_EX_MVD_ERR_CODE_VC1_NOT_SUPPORT,
        E_VDEC_EX_MVD_ERR_CODE_UNKNOW_CODEC_NOT_SUPPORT ,
        E_VDEC_EX_MVD_ERR_CODE_SLQ_TBL_NOT_SUPPORT ,
        E_VDEC_EX_MVD_ERR_CODE_FRAME_BUF_NOT_ENOUGH ,

    E_VDEC_EX_HVD_ERR_CODE_BASE = 0x03000000,
        E_VDEC_EX_HVD_ERR_CODE_GENERAL_BASE = (0x0000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_HVD_ERR_CODE_OUT_OF_SPEC ,
        E_VDEC_EX_HVD_ERR_CODE_UNKNOW_ERR,
        E_VDEC_EX_HVD_ERR_CODE_HW_BREAK_DOWN,
        E_VDEC_EX_HVD_ERR_CODE_HW_DEC_TIMEOUT,
        E_VDEC_EX_HVD_ERR_CODE_OUT_OF_MEMORY,
        E_VDEC_EX_HVD_ERR_CODE_UNKNOWN_CODEC,
        E_VDEC_EX_HVD_ERR_CODE_RES_NOT_SUPPORT,

        E_VDEC_EX_HVD_ERR_CODE_AVC_BASE = (0x1000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_HVD_ERR_CODE_AVC_SPS_BROKEN,
        E_VDEC_EX_HVD_ERR_CODE_AVC_SPS_NOT_IN_SPEC,
        E_VDEC_EX_HVD_ERR_CODE_AVC_SPS_NOT_ENOUGH_FRM,
        E_VDEC_EX_HVD_ERR_CODE_AVC_PPS_BROKEN,
        E_VDEC_EX_HVD_ERR_CODE_AVC_REF_LIST,
        E_VDEC_EX_HVD_ERR_CODE_AVC_NO_REF,
        E_VDEC_EX_HVD_ERR_CODE_AVC_RES,

        E_VDEC_EX_HVD_ERR_CODE_AVS_BASE = (0x2000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_HVD_ERR_CODE_AVS_RES,

        E_VDEC_EX_HVD_ERR_CODE_RM_BASE = (0x3000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_HVD_ERR_CODE_RM_PACKET_HEADER,
        E_VDEC_EX_HVD_ERR_CODE_RM_FRAME_HEADER,
        E_VDEC_EX_HVD_ERR_CODE_RM_SLICE_HEADER,
        E_VDEC_EX_HVD_ERR_CODE_RM_BYTE_CNT,
        E_VDEC_EX_HVD_ERR_CODE_RM_DISP_TIMEOUT,
        E_VDEC_EX_HVD_ERR_CODE_RM_NO_REF,
        E_VDEC_EX_HVD_ERR_CODE_RM_RES,
        E_VDEC_EX_HVD_ERR_CODE_RM_VLC,
        E_VDEC_EX_HVD_ERR_CODE_RM_SIZE_OUT_FB_LAYOUT,

    E_VDEC_EX_RVD_ERR_CODE_BASE = 0x04000000,
        E_VDEC_EX_RVD_ERR_CODE_PACKET_HEADER,
        E_VDEC_EX_RVD_ERR_CODE_FRAME_HEADER,
        E_VDEC_EX_RVD_ERR_CODE_SLICE_HEADER,
        E_VDEC_EX_RVD_ERR_CODE_DECODE_TIMEOUT,
        E_VDEC_EX_RVD_ERR_CODE_OUT_OF_MEMORY,
        E_VDEC_EX_RVD_ERR_CODE_BYTE_POS,
        E_VDEC_EX_RVD_ERR_CODE_DISPLAY_TIMEOUT,

    E_VDEC_EX_MJPEG_ERR_CODE_BASE = 0x05000000,
        E_VDEC_EX_HVD_ERR_CODE_MJPEG_RES,
} VDEC_EX_ErrCode;


typedef enum
{

    E_VDEC_EX_FRC_NORMAL = 0,

    E_VDEC_EX_FRC_DISP_TWICE,

    E_VDEC_EX_FRC_3_2_PULLDOWN,

    E_VDEC_EX_FRC_PAL_TO_NTSC,

    E_VDEC_EX_FRC_NTSC_TO_PAL,

    E_VDEC_EX_FRC_MODE_50P_60P,

    E_VDEC_EX_FRC_MODE_60P_50P,
} VDEC_EX_FrcMode;


typedef enum
{

    E_VDEC_EX_TRICK_DEC_ALL = 0,

    E_VDEC_EX_TRICK_DEC_IP,

    E_VDEC_EX_TRICK_DEC_I,
    E_VDEC_EX_TRICK_DEC_NUM
} VDEC_EX_TrickDec;


typedef enum
{

    E_VDEC_EX_SPEED_DEFAULT = 0,

    E_VDEC_EX_SPEED_FAST,

    E_VDEC_EX_SPEED_SLOW,
} VDEC_EX_SpeedType;


typedef enum
{

    E_VDEC_EX_DISP_SPEED_1X = 1,

    E_VDEC_EX_DISP_SPEED_2X = 2,

    E_VDEC_EX_DISP_SPEED_4X = 4,

    E_VDEC_EX_DISP_SPEED_8X = 8,

    E_VDEC_EX_DISP_SPEED_16X = 16,

    E_VDEC_EX_DISP_SPEED_32X = 32,
} VDEC_EX_DispSpeed;


typedef enum
{

    E_VDEC_EX_MJPEG_SCALE_1to1 = 0,

    E_VDEC_EX_MJPEG_SCALE_2to1,

    E_VDEC_EX_MJPEG_SCALE_4to1,

    E_VDEC_EX_MJPEG_SCALE_8to1,
} VDEC_EX_MJpegScaleFactor;


typedef enum
{

    E_VDEC_EX_TIME_STAMP_NONE = 0,

    E_VDEC_EX_TIME_STAMP_PTS,

    E_VDEC_EX_TIME_STAMP_DTS,

    E_VDEC_EX_TIME_STAMP_STS,

    E_VDEC_EX_TIME_STAMP_PTS_MPEG_DIRECTV_SD,

    E_VDEC_EX_TIME_STAMP_DTS_MPEG_DIRECTV_SD,
} VDEC_EX_TimeStampType;


typedef enum
{

    E_VDEC_EX_DBG_LEVEL_NONE = 0,

    E_VDEC_EX_DBG_LEVEL_ERR,

    E_VDEC_EX_DBG_LEVEL_INFO,

    E_VDEC_EX_DBG_LEVEL_DBG,

    E_VDEC_EX_DBG_LEVEL_TRACE,

    E_VDEC_EX_DBG_LEVEL_FW,
} VDEC_EX_DbgLevel;


typedef enum
{
    E_VDEC_EX_FW_SOURCE_NONE,
    E_VDEC_EX_FW_SOURCE_DRAM,
    E_VDEC_EX_FW_SOURCE_FLASH,
}VDEC_EX_FWSourceType;


typedef enum
{
    E_VDEC_EX_CC_NONE = 0x00,
    E_VDEC_EX_CC_608 = 0x01,
    E_VDEC_EX_CC_708 = 0x02,
    E_VDEC_EX_CC_UNPACKED = 0x03,
} VDEC_EX_CCFormat;


typedef enum
{
    E_VDEC_EX_CC_TYPE_NONE = 0,
    E_VDEC_EX_CC_TYPE_NTSC_FIELD1 = 1,
    E_VDEC_EX_CC_TYPE_NTSC_FIELD2 = 2,
    E_VDEC_EX_CC_TYPE_DTVCC = 3,
    E_VDEC_EX_CC_TYPE_NTSC_TWOFIELD = 4,
} VDEC_EX_CCType;

typedef enum
{
    E_VDEC_EX_CC_GET_BUFF_START = 0x1,
    E_VDEC_EX_CC_GET_BUFF_SIZE,
    E_VDEC_EX_CC_GET_708_ENABLE
} VDEC_EX_CCInfoCmd;

typedef enum
{
    E_VDEC_EX_STAGE_STOP = 0,
    E_VDEC_EX_STAGE_INIT,
    E_VDEC_EX_STAGE_PLAY,
    E_VDEC_EX_STAGE_PAUSE,
} VDEC_EX_Stage;


typedef enum
{

    E_VDEC_EX_PATTERN_FLUSH = 0,

    E_VDEC_EX_PATTERN_FILEEND,
}VDEC_EX_PatternType;

typedef enum
{
    E_VDEC_EX_FW_STATUS_FLAG_NONE = 0,
    E_VDEC_EX_FW_STATUS_FLAG_SEEK_TO_I = VDEC_EX_BIT(0),
}VDEC_EX_FW_STATUS_FLAG;

typedef struct DLL_PACKED
{
    MS_BOOL bInit;
    MS_BOOL bIdle;
    VDEC_EX_Stage eStage;
} VDEC_EX_Status;

typedef struct DLL_PACKED
{
    MS_U32 u32Tmp;
} VDEC_EX_Info;


typedef struct DLL_PACKED
{
    MS_BOOL bSetTotalBuf;
    MS_PHY phyTotalBufAddr;
    MS_SIZE szTotalBufSize;

} VDEC_EX_TotalBufRange;


typedef enum
{
    E_VDEC_EX_BUFFERTYPE_FB_BASE = 0x0000,
    E_VDEC_EX_BUFFERTYPE_FB_MAIN,
    E_VDEC_EX_BUFFERTYPE_FB_SUB,
    E_VDEC_EX_BUFFERTYPE_FB_BW,
    E_VDEC_EX_BUFFERTYPE_FB_NUM,

    E_VDEC_EX_BUFFERTYPE_BS_BASE = 0x0100,
    E_VDEC_EX_BUFFERTYPE_BS_MAIN,
    E_VDEC_EX_BUFFERTYPE_BS_SUB,
    E_VDEC_EX_BUFFERTYPE_BS_NUM,

    E_VDEC_EX_BUFFERTYPE_HDRSHM_BASE = 0x0200,
    E_VDEC_EX_BUFFERTYPE_HDRSHM_MAIN,
    E_VDEC_EX_BUFFERTYPE_HDRSHM_SUB,
    E_VDEC_EX_BUFFERTYPE_HDRSHM_NUM,

    E_VDEC_EX_BUFFERTYPE_NONE = 0xFFFF,
} VDEC_EX_BufferType;


typedef enum
{
    E_VDEC_EX_GET_BUFFERTYPE_ALLOC_BASE = 0x0000,
    E_VDEC_EX_GET_BUFFERTYPE_ALLOC_BS,
    E_VDEC_EX_GET_BUFFERTYPE_ALLOC_DRVPROC,
    E_VDEC_EX_GET_BUFFERTYPE_ALLOC_NUM,

    E_VDEC_EX_GET_BUFFERTYPE_NONE = 0xFFFF,
} VDEC_EX_GetBufferType;


typedef struct DLL_PACKED
{
    VDEC_EX_BufferType eType;
    MS_PHY phyAddr;
    MS_SIZE szSize;
    MS_U32 u32Config;
} VDEC_EX_BufferInfo;

typedef enum
{
    E_VDEC_EX_FRM_TYPE_I = 0,
    E_VDEC_EX_FRM_TYPE_P,
    E_VDEC_EX_FRM_TYPE_B,
    E_VDEC_EX_FRM_TYPE_OTHER,
    E_VDEC_EX_FRM_TYPE_NUM
} VDEC_EX_FrameType;

typedef enum
{

    E_VDEC_EX_TILEMODE_NONE = 0,

    E_VDEC_EX_TILEMODE_16x16,

    E_VDEC_EX_TILEMODE_16x32,

    E_VDEC_EX_TILEMODE_32x16,

    E_VDEC_EX_TILEMODE_32x32,

    E_VDEC_EX_TILEMODE_NUM
} VDEC_EX_TileMode;

typedef enum
{

    E_VDEC_EX_FIELDTYPE_NONE,

    E_VDEC_EX_FIELDTYPE_TOP,

    E_VDEC_EX_FIELDTYPE_BOTTOM,

    E_VDEC_EX_FIELDTYPE_BOTH,
    E_VDEC_EX_FIELDTYPE_NUM
} VDEC_EX_FieldType;

typedef enum
{
    E_VDEC_EX_PATTERN_BEFORE_FRM = 0,
    E_VDEC_EX_PATTERN_AFTER_FRM,
    E_VDEC_EX_PATTERN_SKIP_DATA,
} VDEC_EX_PatchPattern;

typedef enum
{
    E_VDEC_EX_PIC_STRUCTURE_RSV = 0,
    E_VDEC_EX_PIC_STRUCTURE_TOP,
    E_VDEC_EX_PIC_STRUCTURE_BOT,
    E_VDEC_EX_PIC_STRCUTURE_FRM,
} VDEC_EX_PicStructure;


typedef enum
{
    VDEC_EX_FB_REDUCTION_NONE = 0,
    VDEC_EX_FB_REDUCTION_1_2,
    VDEC_EX_FB_REDUCTION_1_4
} VDEC_EX_FBReductionType;


typedef enum
{

    VDEC_EX_XC_LOW_DELAY_NONE = 0x00,

    VDEC_EX_XC_DISABLE_BLACK_SCREEN = VDEC_EX_BIT(0),

    VDEC_EX_XC_RELEASE_FORCE_READ_BANK = VDEC_EX_BIT(1),

    VDEC_EX_XC_RELEASE_BOB_MODE = VDEC_EX_BIT(2),
} VDEC_EX_XcLowDelayType;




typedef enum
{

    VDEC_EX_SEQ_CHANGE_FIRST_TIME = VDEC_EX_BIT(0),

    VDEC_EX_SEQ_CHANGE_RESOLUTION = VDEC_EX_BIT(1),

    VDEC_EX_SEQ_CHANGE_PICTURE_TYPE = VDEC_EX_BIT(2),

    VDEC_EX_SEQ_CHANGE_ASPECT_RATIO = VDEC_EX_BIT(3),

    VDEC_EX_SEQ_CHANGE_FRAME_RATE = VDEC_EX_BIT(4),

    VDEC_EX_SEQ_CHANGE_HDR_INFO = VDEC_EX_BIT(5),
} VDEC_EX_SeqChangeInfo;







typedef enum
{
    E_VDEC_EX_DBG_MODE_BYPASS_INSERT_START_CODE = 0,
    E_VDEC_EX_DBG_MODE_BYPASS_DIVX_MC_PATCH,
    E_VDEC_EX_DBG_MODE_NUM
} VDEC_EX_DbgMode;


typedef enum
{
    E_VDEC_EX_CLOCK_SPEED_NONE = 0,
    E_VDEC_EX_CLOCK_SPEED_HIGHEST,
    E_VDEC_EX_CLOCK_SPEED_HIGH,
    E_VDEC_EX_CLOCK_SPEED_MEDIUM,
    E_VDEC_EX_CLOCK_SPEED_LOW,
    E_VDEC_EX_CLOCK_SPEED_LOWEST,
    E_VDEC_EX_CLOCK_SPEED_DEFAULT,
} VDEC_EX_ClockSpeed;



typedef enum
{
    E_VDEC_EX_SECURE_MODE_NONE = 0,
    E_VDEC_EX_SECURE_MODE_TRUSTZONE
} VDEC_EX_SecureMode;


typedef enum
{
    E_VDEC_EX_SMOOTH_REWIND_DISABLE = 0,
    E_VDEC_EX_SMOOTH_REWIND_SUPPORT,
    E_VDEC_EX_SMOOTH_REWIND_ENABLE,
}VDEC_EX_Smooth_rewind_mode;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_U8 u8Tolerance;
}VDEC_EX_Err_Tolerance;


typedef enum
{

    E_VDEC_EX_TRICKPLAY2X_COUNTVSYNC = 0,

    E_VDEC_EX_TRICKPLAY2X_AVSYNC
}VDEC_EX_TrickPlay2xMode;

typedef struct
{

    MS_U32 u32Version;

    MS_U8 u8MatrixCoefficients;

    MS_U8 u8BitsPerChannel;

    MS_U8 u8ChromaSubsamplingHorz;

    MS_U8 u8ChromaSubsamplingVert;

    MS_U8 u8CbSubsamplingHorz;

    MS_U8 u8CbSubsamplingVert;

    MS_U8 u8ChromaSitingHorz;

    MS_U8 u8ChromaSitingVert;

    MS_U8 u8ColorRange;

    MS_U8 u8TransferCharacteristics;

    MS_U8 u8ColourPrimaries;

    MS_U16 u16MaxCLL;

    MS_U16 u16MaxFALL;

    MS_U16 u16Primaries[3][2];

    MS_U16 u16WhitePoint[2];

    MS_U32 u32MaxLuminance;

    MS_U32 u32MinLuminance;
} VDEC_EX_Config_VP9HDR10;

typedef enum
{

    E_VDEC_EX_CONFIG_TYPE_NONE = 0,

    E_VDEC_EX_CONFIG_TYPE_VP9HDR10,
} VDEC_EX_ConfigType;


typedef struct
{

    VDEC_EX_ConfigType config_type;

    MS_VIRT config_addr;

    MS_U32 config_size;
} VDEC_EX_Codec_Config;


typedef enum
{
    E_VDEC_EX_MFCODEC_DEFAULT = 0,
    E_VDEC_EX_MFCODEC_FORCE_ENABLE,
    E_VDEC_EX_MFCODEC_FORCE_DISABLE,
} VDEC_EX_MFCodec_mode;

typedef enum
{
    E_VDEC_EX_FEATURE_DEFAULT = 0,
    E_VDEC_EX_FEATURE_FORCE_MAIN_PROFILE = VDEC_EX_BIT(0),
    E_VDEC_EX_FEATURE_DISABLE_TEMPORAL_SCALABILITY = VDEC_EX_BIT(1),
} VDEC_EX_Feature;

typedef enum
{

    E_VDEC_EX_CUSTOMER_DEFAULT = 0,

    E_VDEC_EX_CUSTOMER_ENABLE_NDS = VDEC_EX_BIT(0),
} VDEC_EX_Customer_Mode;

typedef struct
{
    MS_U8 u8RepeatPeriod;
    MS_U8 u8DropPeriod;
}VDEC_EX_Slow_Sync;

typedef enum
{

    VDEC_EX_DECODER_FREQUENCY_DOWN = 0,

    VDEC_EX_DECODER_FREQUENCY_UP,

    VDEC_EX_DECODER_FREQUENCY_MIN,

    VDEC_EX_DECODER_FREQUENCY_MAX,
} VDEC_EX_Decoder_Frequency;


typedef enum
{

    E_VDEC_EX_USER_CMD_SET_CONTROL_BASE = 0x0000,
    E_VDEC_EX_USER_CMD_REPEAT_LAST_FIELD,
    E_VDEC_EX_USER_CMD_AVSYNC_REPEAT_TH,
    E_VDEC_EX_USER_CMD_DISP_ONE_FIELD,
    E_VDEC_EX_USER_CMD_FD_MASK_DELAY_COUNT,
    E_VDEC_EX_USER_CMD_FRC_OUTPUT,
    E_VDEC_EX_USER_CMD_FRC_DROP_TYPE,
    E_VDEC_EX_USER_CMD_FAST_DISPLAY,
    E_VDEC_EX_USER_CMD_IGNORE_ERR_REF,
    E_VDEC_EX_USER_CMD_FORCE_FOLLOW_DTV_SPEC,
    E_VDEC_EX_USER_CMD_AVC_MIN_FRM_GAP,
    E_VDEC_EX_USER_CMD_DISABLE_SEQ_CHG,
    E_VDEC_EX_USER_CMD_SET_DISP_OUTSIDE_CTRL_MODE,
    E_VDEC_EX_USER_CMD_SET_DTV_USER_DATA_MODE,
    E_VDEC_EX_USER_CMD_SET_SINGLE_TASK_MODE,
    E_VDEC_EX_USER_CMD_AVC_DISABLE_ANTI_VDEAD,
    E_VDEC_EX_USER_CMD_DTV_RESET_MVD_PARSER,
    E_VDEC_EX_USER_CMD_PVR_FLUSH_FRAME_BUFFER,
    E_VDEC_EX_USER_CMD_FORCE_INTERLACE_MODE,
    E_VDEC_EX_USER_CMD_RELEASE_FD_MASK,
    E_VDEC_EX_USER_CMD_SET_DECODE_MODE,
    E_VDEC_EX_USER_CMD_SUPPORT_AVC_TO_MVC,
    E_VDEC_EX_USER_CMD_3DLR_VIEW_EXCHANGE,
    E_VDEC_EX_USER_CMD_SET_VSIZE_ALIGN,
    E_VDEC_EX_USER_CMD_SHOW_DECODE_ORDER,
    E_VDEC_EX_USER_CMD_AVC_DISP_IGNORE_CROP,
    E_VDEC_EX_USER_CMD_SET_DISP_FINISH_MODE,
    E_VDEC_EX_USER_CMD_SET_AVSYNC_MODE,
    E_VDEC_EX_USER_CMD_SUSPEND_DYNAMIC_SCALE,
    E_VDEC_EX_USER_CMD_FORCE_AUTO_MUTE,
    E_VDEC_EX_USER_CMD_AVC_NEW_SLOW_MOTION,
    E_VDEC_EX_USER_CMD_PUSH_DISPQ_WITH_REF_NUM,
    E_VDEC_EX_USER_CMD_DS_RESV_N_BUFFER,
    E_VDEC_EX_USER_CMD_RM_ENABLE_PTS_TBL,
    E_VDEC_EX_USER_CMD_FLUSH_PTS_BUF,
    E_VDEC_EX_USER_CMD_SET_IDCT_MODE,
    E_VDEC_EX_USER_CMD_DROP_ERR_FRAME,
    E_VDEC_EX_USER_CMD_SET_CC608_INFO_ENHANCE_MODE,
    E_VDEC_EX_USER_CMD_IGNORE_PIC_OVERRUN,
    E_VDEC_EX_USER_CMD_SET_SELF_SEQCHANGE,
    E_VDEC_EX_USER_CMD_AUTO_EXHAUST_ES_MODE,
    E_VDEC_EX_USER_CMD_CTL_SPEED_IN_DISP_ONLY,
    E_VDEC_EX_USER_CMD_AVC_SUPPORT_REF_NUM_OVER_MAX_DPB_SIZE,
    E_VDEC_EX_USER_CMD_RETURN_INVALID_AFD,
    E_VDEC_EX_USER_CMD_FIELD_POLARITY_DISPLAY_ONE_FIELD,
    E_VDEC_EX_USER_CMD_AVC_FORCE_BROKEN_BY_US,
    E_VDEC_EX_USER_CMD_SHOW_FIRST_FRAME_DIRECT,
    E_VDEC_EX_USER_CMD_AVC_RESIZE_DOS_DISP_PEND_BUF,
    E_VDEC_EX_USER_CMD_SET_XC_LOW_DELAY_PARA,
    E_VDEC_EX_USER_CMD_SET_SECURE_MODE,
    E_VDEC_EX_USER_CMD_RVU_SETTING_MODE,
    E_VDEC_EX_USER_CMD_FRAMERATE_HANDLING,
    E_VDEC_EX_USER_CMD_DUAL_NON_BLOCK_MODE,
    E_VDEC_EX_USER_CMD_IGNORE_PIC_STRUCT_DISPLAY,
    E_VDEC_EX_USER_CMD_INPUT_PTS_FREERUN_MODE,
    E_VDEC_EX_USER_CMD_ERR_CONCEAL_SLICE_1ST_MB,
    E_VDEC_EX_USER_CMD_SET_EXTERNAL_DS_BUFFER,
    E_VDEC_EX_USER_CMD_SET_MIN_TSP_DATA_SIZE,
    E_VDEC_EX_USER_CMD_SET_DMX_FRAMERATE,
    E_VDEC_EX_USER_CMD_SET_DMX_FRAMERATEBASE,
    E_VDEC_EX_USER_CMD_ENABLE_CC_608_EXTERNAL_BUFFER,
    E_VDEC_EX_USER_CMD_ENABLE_CC_708_EXTERNAL_BUFFER,
    E_VDEC_EX_USER_CMD_SET_TIME_INC_PREDICT_PARA,
    E_VDEC_EX_USER_CMD_ENABLE_DECODE_ENGINE_TIMEOUT,
    E_VDEC_EX_USER_CMD_AUTO_FREE_ES,
    E_VDEC_EX_USER_CMD_FRAMEBUFFER_AUTO_MODE,
    E_VDEC_EX_USER_CMD_SET_SMOOTH_REWIND,
    E_VDEC_EX_USER_CMD_SET_ERROR_TOLERANCE,
    E_VDEC_EX_USER_CMD_AUTO_DROP_DISPLAY_QUEUE,
    E_VDEC_EX_USER_CMD_USE_CPB_REMOVAL_DEALY,
    E_VDEC_EX_USER_CMD_SKIP_N_FRAME,
    E_VDEC_EX_USER_CMD_SET_PTS_US_MODE,
    E_VDEC_EX_USER_CMD_AUTO_INSERT_DUMMY_DATA,
    E_VDEC_EX_USER_CMD_DROP_ONE_PTS,
    E_VDEC_EX_USER_CMD_PVR_TIMESHIFT_SEAMLESS_MODE,
    E_VDEC_EX_USER_CMD_AUTO_REDUCE_ES_DATA,
    E_VDEC_EX_USER_CMD_RM_FORCE_MCU_MODE_ES,
    E_VDEC_EX_USER_CMD_FORCE_PROGRESSIVE_MODE,
    E_VDEC_EX_USER_CMD_SET_FRAMEBUFF2,

#if defined(UFO_PUBLIC_HEADER_700)
    E_VDEC_EX_USER_CMD_ENABLE_PTS_DECTECTOR,
    E_VDEC_EX_USER_CMD_SET_DV_XC_SHM_ADDR,
    E_VDEC_EX_USER_CMD_SET_ENABLE_HDR,
    E_VDEC_EX_USER_CMD_DISABLE_PBFRAME_MODE,
    E_VDEC_EX_USER_CMD_SET_DV_INFO,
    E_VDEC_EX_USER_CMD_SET_TRICKPLAY_2X_MODE,
    E_VDEC_EX_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    E_VDEC_EX_USER_CMD_DIRECT_STC_MODE,
    E_VDEC_EX_USER_CMD_DISABLE_ES_FULL_STOP,
    E_VDEC_EX_USER_CMD_SET_SLOW_SYNC,
    E_VDEC_EX_USER_CMD_SET_DYNAMIC_DISP_PATH,
    E_VDEC_EX_USER_CMD_SET_AVSYNC_DISP_AUTO_DROP,
#endif
#if defined(UFO_PUBLIC_HEADER_500)
    E_VDEC_EX_USER_CMD_ENABLE_PTS_DECTECTOR,
    E_VDEC_EX_USER_CMD_SET_DV_XC_SHM_ADDR,
    E_VDEC_EX_USER_CMD_SET_ENABLE_HDR,
    E_VDEC_EX_USER_CMD_DISABLE_PBFRAME_MODE,
    E_VDEC_EX_USER_CMD_SET_SLOW_SYNC,
    E_VDEC_EX_USER_CMD_SET_DV_INFO,
    E_VDEC_EX_USER_CMD_SET_TRICKPLAY_2X_MODE,
    E_VDEC_EX_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    E_VDEC_EX_USER_CMD_DIRECT_STC_MODE,
    E_VDEC_EX_USER_CMD_DISABLE_ES_FULL_STOP,
    E_VDEC_EX_USER_CMD_SET_AVSYNC_DISP_AUTO_DROP,
    E_VDEC_EX_USER_CMD_SET_DYNAMIC_DISP_PATH,
#endif
#if defined(UFO_PUBLIC_HEADER_500_3)
    E_VDEC_EX_USER_CMD_SET_TRICKPLAY_2X_MODE,
    E_VDEC_EX_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    E_VDEC_EX_USER_CMD_DIRECT_STC_MODE,
    E_VDEC_EX_USER_CMD_ENABLE_PTS_DECTECTOR,
    E_VDEC_EX_USER_CMD_DISABLE_ES_FULL_STOP,
    E_VDEC_EX_USER_CMD_SET_DV_XC_SHM_ADDR,
    E_VDEC_EX_USER_CMD_SET_SLOW_SYNC,
    E_VDEC_EX_USER_CMD_SET_ENABLE_HDR,
    E_VDEC_EX_USER_CMD_DISABLE_PBFRAME_MODE,
    E_VDEC_EX_USER_CMD_SET_DV_INFO,
    E_VDEC_EX_USER_CMD_SET_AVSYNC_DISP_AUTO_DROP,
    E_VDEC_EX_USER_CMD_SET_DYNAMIC_DISP_PATH,
#endif
#if defined(UFO_PUBLIC_HEADER_300)
    E_VDEC_EX_USER_CMD_ENABLE_PTS_DECTECTOR,
    E_VDEC_EX_USER_CMD_SET_AVSYNC_DISP_AUTO_DROP,
    E_VDEC_EX_USER_CMD_SET_DYNAMIC_DISP_PATH,
    E_VDEC_EX_USER_CMD_SET_DV_XC_SHM_ADDR,
    E_VDEC_EX_USER_CMD_SET_TRICKPLAY_2X_MODE,
    E_VDEC_EX_USER_CMD_SET_ENABLE_HDR,
    E_VDEC_EX_USER_CMD_DISABLE_PBFRAME_MODE,
    E_VDEC_EX_USER_CMD_SET_DV_INFO,
    E_VDEC_EX_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    E_VDEC_EX_USER_CMD_DIRECT_STC_MODE,
    E_VDEC_EX_USER_CMD_DISABLE_ES_FULL_STOP,
    E_VDEC_EX_USER_CMD_SET_SLOW_SYNC,
#endif

#if defined(UFO_PUBLIC_HEADER_212)
    E_VDEC_EX_USER_CMD_SET_TRICKPLAY_2X_MODE,
    E_VDEC_EX_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    E_VDEC_EX_USER_CMD_DISABLE_ES_FULL_STOP,
    E_VDEC_EX_USER_CMD_DIRECT_STC_MODE,
    E_VDEC_EX_USER_CMD_ENABLE_PTS_DECTECTOR,
    E_VDEC_EX_USER_CMD_SET_SLOW_SYNC,
    E_VDEC_EX_USER_CMD_SET_ENABLE_HDR,
    E_VDEC_EX_USER_CMD_DISABLE_PBFRAME_MODE,
    E_VDEC_EX_USER_CMD_SET_DV_XC_SHM_ADDR,
    E_VDEC_EX_USER_CMD_SET_DV_INFO,
    E_VDEC_EX_USER_CMD_SET_AVSYNC_DISP_AUTO_DROP,
    E_VDEC_EX_USER_CMD_SET_DYNAMIC_DISP_PATH,
#endif
    E_VDEC_EX_USER_CMD_SET_CODEC_CONFIG,
    E_VDEC_EX_USER_CMD_ENABLE_QOS_INFO,
    E_VDEC_EX_USER_CMD_ADJUST_DECODER_FREQUENCY,
    E_VDEC_EX_USER_CMD_PUSI_CONTROL,

    E_VDEC_EX_USER_CMD_MVC_SET_CMD_BASE = 0x0800,
    E_VDEC_EX_USER_CMD_MVC_BBU2_PUSH_PACKET,
    E_VDEC_EX_USER_CMD_MVC_BBU2_FIRE_DECCMD,

    E_VDEC_EX_USER_CMD_UT_SET_CMD_BASE = 0x0900,
    E_VDEC_EX_USER_CMD_UT_SET_DBG_MODE,
    E_VDEC_EX_USER_CMD_UT_CLR_DBG_MODE,


    E_VDEC_EX_USER_CMD_GET_CONTROL_BASE = 0x1000,
    E_VDEC_EX_USER_CMD_GET_CHROMA_TYPE,
    E_VDEC_EX_USER_CMD_GET_REAL_FRAMERATE,
    E_VDEC_EX_USER_CMD_GET_COLOR_MATRIX,
    E_VDEC_EX_USER_CMD_GET_MAIN_STREAM_ID,
    E_VDEC_EX_USER_CMD_GET_SUB_STREAM_ID,
    E_VDEC_EX_USER_CMD_GET_DYNSCALE_ENABLED,
    E_VDEC_EX_USER_CMD_GET_FPA_SEI,
    E_VDEC_EX_USER_CMD_GET_U64PTS,
    E_VDEC_EX_USER_CMD_GET_ORI_INTERLACE_MODE,
    E_VDEC_EX_USER_CMD_GET_MBS_ONLY_FLAG,
    E_VDEC_EX_USER_CMD_GET_CRC_VALUE,
    E_VDEC_EX_USER_CMD_GET_BBU_Q_NUM,
    E_VDEC_EX_USER_CMD_GET_DISP_FRAME_NUM,
    E_VDEC_EX_USER_CMD_GET_FPA_SEI_EX,
    E_VDEC_EX_USER_CMD_GET_ES_BUFFER_STATUS,
    E_VDEC_EX_USER_CMD_GET_CODEC_TYPE,
    E_VDEC_EX_USER_CMD_GET_SHAREMEMORY_BASE,
    E_VDEC_EX_USER_CMD_GET_IS_LEAST_DISPQ_SIZE_FLAG,
    E_VDEC_EX_USER_CMD_GET_FIELD_PIC_FLAG,
    E_VDEC_EX_USER_CMD_GET_SUPPORT_2ND_MVOP_INTERFACE,
    E_VDEC_EX_USER_CMD_GET_FB_USAGE_MEM,
    E_VDEC_EX_USER_CMD_GET_XC_LOW_DELAY_INT_STATE,
    E_VDEC_EX_USER_CMD_GET_VSYNC_BRIDGE_ADDR,
    E_VDEC_EX_USER_CMD_GET_FRAME_INFO_EX,
    E_VDEC_EX_USER_CMD_GET_FLUSH_PATTEN_ENTRY_NUM,
    E_VDEC_EX_USER_CMD_GET_DS_BUF_MIU_SEL,
    E_VDEC_EX_USER_CMD_GET_FW_STATUS_FLAG,
    E_VDEC_EX_USER_CMD_GET_HW_MAX_PIXEL,
#if defined(UFO_PUBLIC_HEADER_700)
    E_VDEC_EX_USER_CMD_GET_FLOW_CONTROL_U64PTS_DIFF,
    E_VDEC_EX_USER_CMD_GET_NEXT_DISP_FRAME_INFO_EXT,
    E_VDEC_EX_USER_CMD_GET_VSYNC_BRIDGE_EXT_ADDR,
    E_VDEC_EX_USER_CMD_GET_DCV_SEI,
    E_VDEC_EX_USER_CMD_GET_VUI_DISP_INFO,
    E_VDEC_EX_USER_CMD_GET_CODEC_CAP,
    E_VDEC_EX_USER_CMD_GET_PRE_PAS_U64PTS,
    E_VDEC_EX_USER_CMD_GET_CLLI_SEI,
    E_VDEC_EX_USER_CMD_GET_PVRSEAMLESS_INFO,
    E_VDEC_EX_USER_CMD_GET_SEQ_CHANGE_INFO,
    E_VDEC_EX_USER_CMD_GET_DISP_QUEUE_EMPTY,
    E_VDEC_EX_USER_CMD_GET_NOT_SUPPORT_INFO,
    E_VDEC_EX_USER_CMD_GET_BUFFER_INFO,
    E_VDEC_EX_USER_CMD_GET_MIN_TSP_DATA_SIZE,
#endif
#if defined(UFO_PUBLIC_HEADER_500)
    E_VDEC_EX_USER_CMD_GET_FLOW_CONTROL_U64PTS_DIFF,
    E_VDEC_EX_USER_CMD_GET_NEXT_DISP_FRAME_INFO_EXT,
    E_VDEC_EX_USER_CMD_GET_VSYNC_BRIDGE_EXT_ADDR,
    E_VDEC_EX_USER_CMD_GET_DCV_SEI,
    E_VDEC_EX_USER_CMD_GET_VUI_DISP_INFO,
    E_VDEC_EX_USER_CMD_GET_CODEC_CAP,
    E_VDEC_EX_USER_CMD_GET_PRE_PAS_U64PTS,
    E_VDEC_EX_USER_CMD_GET_CLLI_SEI,
    E_VDEC_EX_USER_CMD_GET_SEQ_CHANGE_INFO,
    E_VDEC_EX_USER_CMD_GET_PVRSEAMLESS_INFO,
    E_VDEC_EX_USER_CMD_GET_DISP_QUEUE_EMPTY,
    E_VDEC_EX_USER_CMD_GET_NOT_SUPPORT_INFO,
    E_VDEC_EX_USER_CMD_GET_BUFFER_INFO,
    E_VDEC_EX_USER_CMD_GET_MIN_TSP_DATA_SIZE,
#endif
#if defined(UFO_PUBLIC_HEADER_500_3)
    E_VDEC_EX_USER_CMD_GET_FLOW_CONTROL_U64PTS_DIFF,
    E_VDEC_EX_USER_CMD_GET_NEXT_DISP_FRAME_INFO_EXT,
    E_VDEC_EX_USER_CMD_GET_VSYNC_BRIDGE_EXT_ADDR,
    E_VDEC_EX_USER_CMD_GET_DCV_SEI,
    E_VDEC_EX_USER_CMD_GET_VUI_DISP_INFO,
    E_VDEC_EX_USER_CMD_GET_CODEC_CAP,
    E_VDEC_EX_USER_CMD_GET_PRE_PAS_U64PTS,
    E_VDEC_EX_USER_CMD_GET_PVRSEAMLESS_INFO,
    E_VDEC_EX_USER_CMD_GET_CLLI_SEI,
    E_VDEC_EX_USER_CMD_GET_SEQ_CHANGE_INFO,
    E_VDEC_EX_USER_CMD_GET_DISP_QUEUE_EMPTY,
    E_VDEC_EX_USER_CMD_GET_NOT_SUPPORT_INFO,
    E_VDEC_EX_USER_CMD_GET_MIN_TSP_DATA_SIZE,
    E_VDEC_EX_USER_CMD_GET_BUFFER_INFO,
#endif
#if defined(UFO_PUBLIC_HEADER_300)
    E_VDEC_EX_USER_CMD_GET_VSYNC_BRIDGE_EXT_ADDR,
    E_VDEC_EX_USER_CMD_GET_FLOW_CONTROL_U64PTS_DIFF,
    E_VDEC_EX_USER_CMD_GET_PRE_PAS_U64PTS,
    E_VDEC_EX_USER_CMD_GET_SEQ_CHANGE_INFO,
    E_VDEC_EX_USER_CMD_GET_NEXT_DISP_FRAME_INFO_EXT,
    E_VDEC_EX_USER_CMD_GET_CODEC_CAP,
    E_VDEC_EX_USER_CMD_GET_DCV_SEI,
    E_VDEC_EX_USER_CMD_GET_VUI_DISP_INFO,
    E_VDEC_EX_USER_CMD_GET_CLLI_SEI,
    E_VDEC_EX_USER_CMD_GET_PVRSEAMLESS_INFO,
    E_VDEC_EX_USER_CMD_GET_DISP_QUEUE_EMPTY,
    E_VDEC_EX_USER_CMD_GET_NOT_SUPPORT_INFO,
    E_VDEC_EX_USER_CMD_GET_BUFFER_INFO,
    E_VDEC_EX_USER_CMD_GET_MIN_TSP_DATA_SIZE,
#endif
#if defined(UFO_PUBLIC_HEADER_212)
    E_VDEC_EX_USER_CMD_GET_PVRSEAMLESS_INFO,
    E_VDEC_EX_USER_CMD_GET_FLOW_CONTROL_U64PTS_DIFF,
    E_VDEC_EX_USER_CMD_GET_PRE_PAS_U64PTS,
    E_VDEC_EX_USER_CMD_GET_NEXT_DISP_FRAME_INFO_EXT,
    E_VDEC_EX_USER_CMD_GET_VSYNC_BRIDGE_EXT_ADDR,
    E_VDEC_EX_USER_CMD_GET_DCV_SEI,
    E_VDEC_EX_USER_CMD_GET_VUI_DISP_INFO,
    E_VDEC_EX_USER_CMD_GET_CODEC_CAP,
    E_VDEC_EX_USER_CMD_GET_SEQ_CHANGE_INFO,
    E_VDEC_EX_USER_CMD_GET_NOT_SUPPORT_INFO,
    E_VDEC_EX_USER_CMD_GET_MIN_TSP_DATA_SIZE,
    E_VDEC_EX_USER_CMD_GET_CLLI_SEI,
    E_VDEC_EX_USER_CMD_GET_DISP_QUEUE_EMPTY,
    E_VDEC_EX_USER_CMD_GET_BUFFER_INFO,
#endif
    E_VDEC_EX_USER_CMD_GET_NEXT_DISP_FRAME_QOS_INFO,
    E_VDEC_EX_USER_CMD_GET_SEQ_INFO,
    E_VDEC_EX_USER_CMD_GET_EXTEND_DISP_INFO,
    E_VDEC_EX_USER_CMD_GET_CODEC_PROFILE_CAP,


    E_VDEC_EX_USER_CMD_MVC_GET_CMD_BASE = 0x1800,
    E_VDEC_EX_USER_CMD_GET_MVC_SUB_FRAME_DISP_INFO,
    E_VDEC_EX_USER_CMD_GET_MVC_BBU2_DECQ_VACANCY,
    E_VDEC_EX_USER_CMD_GET_MVC_ES2_READ_PTR,
    E_VDEC_EX_USER_CMD_GET_MVC_ES2_WRITE_PTR,
    E_VDEC_EX_USER_CMD_GET_ES_QUANTITY,
    E_VDEC_EX_USER_CMD_GET_ES2_QUANTITY,




    E_VDEC_EX_USER_CMD_SYSTEM_PRESET_CONTROL_BASE = 0x2000,
    E_VDEC_EX_USER_CMD_SYSTEM_PRESET_VPU_CLOCK,


    E_VDEC_EX_USER_CMD_SYSTEM_PRESET_HVD_BASE = 0x2100,
    E_VDEC_EX_USER_CMD_SYSTEM_PRESET_HVD_CLOCK,


    E_VDEC_EX_USER_CMD_SYSTEM_PRESET_MVD_BASE = 0x2200,
    E_VDEC_EX_USER_CMD_SYSTEM_PRESET_MVD_CLOCK,
    E_VDEC_EX_USER_CMD_VPU_SECURITY_MODE,


    E_VDEC_EX_USER_CMD_PRESET_CONTROL_BASE = 0x2300,
    E_VDEC_EX_USER_CMD_HVD_ONE_PENDING_BUFFER_MODE,
    E_VDEC_EX_USER_CMD_MVD_HWBUFFER_REMAPPING_MODE,
    E_VDEC_EX_USER_CMD_SET_SHAREMEMORY_BASE,
    E_VDEC_EX_USER_CMD_HVD_COL_BBU_MODE,
    E_VDEC_EX_USER_CMD_HVD_IAPGN_BUF_SHARE_BW_MODE,
         E_VDEC_EX_USER_CMD_DTV_DEBUG_MODE,
    E_VDEC_EX_USER_CMD_HVD_TS_IN_BBU_MODE,
    E_VDEC_EX_USER_CMD_AUTO_ARRANGE_FRAMEBUFFER_USAGE,
    E_VDEC_EX_USER_CMD_THUMBNAIL_MODE,
    E_VDEC_EX_USER_CMD_FORCE_8BIT_DEC_MODE,
#if defined(UFO_PUBLIC_HEADER_700)
    E_VDEC_EX_USER_CMD_MFCODEC_MODE,
    E_VDEC_EX_USER_CMD_VDEC_FEATURE,
    E_VDEC_EX_USER_CMD_DYNAMIC_CMA_MODE,
    E_VDEC_EX_USER_CMD_CONNECT_INPUT_TSP,
    E_VDEC_EX_USER_CMD_CONNECT_DISPLAY_PATH,
    E_VDEC_EX_USER_CMD_SET_DISPLAY_MODE,
    E_VDEC_EX_USER_CMD_BITSTREAMBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_FRAMEBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_SPECIFY_TASK_SPEC,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_BITSTREAMBUFFER,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER1,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER2,
    E_VDEC_EX_USER_CMD_PRESET_STC,
    E_VDEC_EX_USER_CMD_CAL_FRAMERATE,
#endif
#if (defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_500_3))
    E_VDEC_EX_USER_CMD_MFCODEC_MODE,
    E_VDEC_EX_USER_CMD_VDEC_FEATURE,
    E_VDEC_EX_USER_CMD_DYNAMIC_CMA_MODE,
    E_VDEC_EX_USER_CMD_CONNECT_INPUT_TSP,
    E_VDEC_EX_USER_CMD_CONNECT_DISPLAY_PATH,
    E_VDEC_EX_USER_CMD_SET_DISPLAY_MODE,
    E_VDEC_EX_USER_CMD_BITSTREAMBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_FRAMEBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_SPECIFY_TASK_SPEC,
    E_VDEC_EX_USER_CMD_PRESET_STC,
    E_VDEC_EX_USER_CMD_CAL_FRAMERATE,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_BITSTREAMBUFFER,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER1,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER2,
#endif
#if defined(UFO_PUBLIC_HEADER_300)
    E_VDEC_EX_USER_CMD_CONNECT_DISPLAY_PATH,
    E_VDEC_EX_USER_CMD_CONNECT_INPUT_TSP,
    E_VDEC_EX_USER_CMD_SET_DISPLAY_MODE,
    E_VDEC_EX_USER_CMD_BITSTREAMBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_FRAMEBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_SPECIFY_TASK_SPEC,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_BITSTREAMBUFFER,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER1,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER2,
    E_VDEC_EX_USER_CMD_CAL_FRAMERATE,
    E_VDEC_EX_USER_CMD_VDEC_FEATURE,
    E_VDEC_EX_USER_CMD_DYNAMIC_CMA_MODE,
    E_VDEC_EX_USER_CMD_MFCODEC_MODE,
    E_VDEC_EX_USER_CMD_PRESET_STC,
#endif
#if defined(UFO_PUBLIC_HEADER_212)
    E_VDEC_EX_USER_CMD_MFCODEC_MODE,
    E_VDEC_EX_USER_CMD_VDEC_FEATURE,
    E_VDEC_EX_USER_CMD_DYNAMIC_CMA_MODE,
    E_VDEC_EX_USER_CMD_CONNECT_DISPLAY_PATH,
    E_VDEC_EX_USER_CMD_CONNECT_INPUT_TSP,
    E_VDEC_EX_USER_CMD_SET_DISPLAY_MODE,
    E_VDEC_EX_USER_CMD_BITSTREAMBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_FRAMEBUFFER_MONOPOLY,
    E_VDEC_EX_USER_CMD_SPECIFY_TASK_SPEC,
    E_VDEC_EX_USER_CMD_PRESET_STC,
    E_VDEC_EX_USER_CMD_CAL_FRAMERATE,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_BITSTREAMBUFFER,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER1,
    E_VDEC_EX_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER2,
#endif
    E_VDEC_EX_USER_CMD_SET_BUFFER_INFO,
    E_VDEC_EX_USER_CMD_HDR10_UPDATE_PERFRAME,
    E_VDEC_EX_USER_CMD_SET_VP94K2KCHECK,
    E_VDEC_EX_USER_CMD_SET_CUSTOMER_MODE,
    E_VDEC_EX_USER_CMD_SETPOWERSTATE,


    E_VDEC_EX_USER_CMD_SYSTEM_POSTSET_CONTROL_BASE = 0x3000,
    E_VDEC_EX_USER_CMD_SYSTEM_POSTSET_CLEAR_PROCESS_RELATED,



    E_VDEC_EX_USER_CMD_SYSTEM_PREGET_CONTROL_BASE = 0x4000,
    E_VDEC_EX_USER_CMD_SYSTEM_PREGET_FB_MEMORY_USAGE_SIZE,


    E_VDEC_EX_USER_CMD_SYSTEM_PREGET_DV_SUPPORT_PROFILE,
    E_VDEC_EX_USER_CMD_SYSTEM_PREGET_DV_SUPPORT_LEVEL,


} VDEC_EX_User_Cmd;


typedef enum
{
    E_VDEC_EX_FW_TYPE_MVD = 0,
    E_VDEC_EX_FW_TYPE_HVD,
} VDEC_EX_FwType;


typedef enum
{
    E_VDEC_EX_DEC_MODE_DUAL_INDIE = 0,
    E_VDEC_EX_DEC_MODE_DUAL_3D,
    E_VDEC_EX_DEC_MODE_SINGLE,
    E_VDEC_EX_DEC_MODE_MVC = E_VDEC_EX_DEC_MODE_SINGLE,
} VDEC_EX_DEC_MODE;


typedef enum
{
    E_VDEC_EX_CODEC_PROFILE_NONE,

    E_VDEC_EX_CODEC_PROFILE_MP2_MAIN,

    E_VDEC_EX_CODEC_PROFILE_MP4_ASP,

    E_VDEC_EX_CODEC_PROFILE_H263_BASELINE,

    E_VDEC_EX_CODEC_PROFILE_VC1_AP,

    E_VDEC_EX_CODEC_PROFILE_RCV_MAIN,

    E_VDEC_EX_CODEC_PROFILE_VP9_0,
    E_VDEC_EX_CODEC_PROFILE_VP9_2,

    E_VDEC_EX_CODEC_PROFILE_H264_CBP,
    E_VDEC_EX_CODEC_PROFILE_H264_BP,
    E_VDEC_EX_CODEC_PROFILE_H264_XP,
    E_VDEC_EX_CODEC_PROFILE_H264_MP,
    E_VDEC_EX_CODEC_PROFILE_H264_HIP,
    E_VDEC_EX_CODEC_PROFILE_H264_PHIP,
    E_VDEC_EX_CODEC_PROFILE_H264_CHIP,
    E_VDEC_EX_CODEC_PROFILE_H264_HI10P,
    E_VDEC_EX_CODEC_PROFILE_H264_HI422P,
    E_VDEC_EX_CODEC_PROFILE_H264_HI444PP,

    E_VDEC_EX_CODEC_PROFILE_H265_MAIN,
    E_VDEC_EX_CODEC_PROFILE_H265_MAIN_10,
    E_VDEC_EX_CODEC_PROFILE_H265_MAIN_12,
    E_VDEC_EX_CODEC_PROFILE_H265_MAIN_422_10,
    E_VDEC_EX_CODEC_PROFILE_H265_MAIN_422_12,
    E_VDEC_EX_CODEC_PROFILE_H265_MAIN_444,
    E_VDEC_EX_CODEC_PROFILE_H265_MAIN_444_10,
    E_VDEC_EX_CODEC_PROFILE_H265_MAIN_444_12,

    E_VDEC_EX_CODEC_PROFILE_AVS_BROADCASTING,

    E_VDEC_EX_CODEC_PROFILE_DVAV_PER,
    E_VDEC_EX_CODEC_PROFILE_DVAV_PEN,
    E_VDEC_EX_CODEC_PROFILE_DVHE_DER,
    E_VDEC_EX_CODEC_PROFILE_DVHE_DEN,
    E_VDEC_EX_CODEC_PROFILE_DVHE_DTR,
    E_VDEC_EX_CODEC_PROFILE_DVHE_STN,
    E_VDEC_EX_CODEC_PROFILE_DVHE_DTH,

    E_VDEC_EX_CODEC_PROFILE_INVALID = 0xFFFFFFFF,
} VDEC_EX_CODEC_CAP_PROFILE_INFO;

typedef enum
{
    E_VDEC_EX_CODEC_LEVEL_NONE,

    E_VDEC_EX_CODEC_LEVEL_MP2_HIGH,

    E_VDEC_EX_CODEC_LEVEL_MP4_L5,

    E_VDEC_EX_CODEC_LEVEL_VC1_L3,

    E_VDEC_EX_CODEC_LEVEL_RCV_HIGH,


    E_VDEC_EX_CODEC_LEVEL_H264_1,
    E_VDEC_EX_CODEC_LEVEL_H264_1B,
    E_VDEC_EX_CODEC_LEVEL_H264_1_1,
    E_VDEC_EX_CODEC_LEVEL_H264_1_2,
    E_VDEC_EX_CODEC_LEVEL_H264_1_3,
    E_VDEC_EX_CODEC_LEVEL_H264_2,
    E_VDEC_EX_CODEC_LEVEL_H264_2_1,
    E_VDEC_EX_CODEC_LEVEL_H264_2_2,
    E_VDEC_EX_CODEC_LEVEL_H264_3,
    E_VDEC_EX_CODEC_LEVEL_H264_3_1,
    E_VDEC_EX_CODEC_LEVEL_H264_3_2,
    E_VDEC_EX_CODEC_LEVEL_H264_4,
    E_VDEC_EX_CODEC_LEVEL_H264_4_1,
    E_VDEC_EX_CODEC_LEVEL_H264_4_2,
    E_VDEC_EX_CODEC_LEVEL_H264_5,
    E_VDEC_EX_CODEC_LEVEL_H264_5_1,
    E_VDEC_EX_CODEC_LEVEL_H264_5_2,

    E_VDEC_EX_CODEC_LEVEL_H265_1,
    E_VDEC_EX_CODEC_LEVEL_H265_2,
    E_VDEC_EX_CODEC_LEVEL_H265_2_1,
    E_VDEC_EX_CODEC_LEVEL_H265_3,
    E_VDEC_EX_CODEC_LEVEL_H265_3_1,
    E_VDEC_EX_CODEC_LEVEL_H265_4_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_4_HT,
    E_VDEC_EX_CODEC_LEVEL_H265_4_1_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_4_1_HT,
    E_VDEC_EX_CODEC_LEVEL_H265_5_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_5_HT,
    E_VDEC_EX_CODEC_LEVEL_H265_5_1_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_5_1_HT,
    E_VDEC_EX_CODEC_LEVEL_H265_5_2_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_5_2_HT,
    E_VDEC_EX_CODEC_LEVEL_H265_6_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_6_HT,
    E_VDEC_EX_CODEC_LEVEL_H265_6_1_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_6_1_HT,
    E_VDEC_EX_CODEC_LEVEL_H265_6_2_MT,
    E_VDEC_EX_CODEC_LEVEL_H265_6_2_HT,

    E_VDEC_EX_CODEC_LEVEL_AVS_6010860,

    E_VDEC_EX_CODEC_LEVEL_DV_1,
    E_VDEC_EX_CODEC_LEVEL_DV_2,
    E_VDEC_EX_CODEC_LEVEL_DV_3,
    E_VDEC_EX_CODEC_LEVEL_DV_4,
    E_VDEC_EX_CODEC_LEVEL_DV_5,
    E_VDEC_EX_CODEC_LEVEL_DV_6,
    E_VDEC_EX_CODEC_LEVEL_DV_7,
    E_VDEC_EX_CODEC_LEVEL_DV_8,
    E_VDEC_EX_CODEC_LEVEL_DV_9,
} VDEC_EX_CODEC_CAP_LEVEL_INFO;


typedef enum
{
    E_VDEC_EX_CODEC_VERSION_NONE,

    E_VDEC_EX_CODEC_VERSION_DIVX_311,
    E_VDEC_EX_CODEC_VERSION_DIVX_4,
    E_VDEC_EX_CODEC_VERSION_DIVX_5,
    E_VDEC_EX_CODEC_VERSION_DIVX_6,

    E_VDEC_EX_CODEC_VERSION_FLV_1,

    E_VDEC_EX_CODEC_VERSION_H263_1,

} VDEC_EX_CODEC_CAP_VERSION_INFO;


#ifdef VDEC_CAP_DV_OTT_API
typedef enum
{
    E_VDEC_EX_DV_META_REORDER_DEFAULT,
    E_VDEC_EX_DV_META_REORDER_FOLLOW_BL,
    E_VDEC_EX_DV_META_REORDER_FOLLOW_EL,
} VDEC_EX_DV_METADATA_REORDER;

typedef enum
{
    E_VDEC_EX_GET_DV_SUPPORT_PROFILE = 0,
    E_VDEC_EX_GET_DV_SUPPORT_LEVEL,
    E_VDEC_EX_SET_DV_INFO,
} VDEC_EX_DV_CMD_TYPE;

typedef enum
{
    E_VDEC_EX_DV_STREAM_PROFILE_ID_UNSUPPORTED = 0x0,
    E_VDEC_EX_DV_STREAM_PROFILE_ID_DVAV_PER = 0x1,
    E_VDEC_EX_DV_STREAM_PROFILE_ID_DVAV_PEN = 0x2,
    E_VDEC_EX_DV_STREAM_PROFILE_ID_DVHE_DER = 0x4,
    E_VDEC_EX_DV_STREAM_PROFILE_ID_DVHE_DEN = 0x8,
    E_VDEC_EX_DV_STREAM_PROFILE_ID_DVHE_DTR = 0x10,
    E_VDEC_EX_DV_STREAM_PROFILE_ID_DVHE_STN = 0x20,
    E_VDEC_EX_DV_STREAM_PROFILE_ID_DVHE_DTH = 0x40,
} VDEC_EX_DV_Stream_Profile;

typedef enum
{
    E_VDEC_EX_DV_STREAM_LEVEL_ID_UNSUPPORTED = 0,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_HD24,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_HD30,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_FHD24,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_FHD30,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_FHD60,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_UHD24,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_UHD30,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_UHD48,
    E_VDEC_EX_DV_STREAM_LEVEL_ID_UHD60,
} VDEC_EX_DV_Stream_Highest_Level;
#endif


typedef enum
{
    E_VDEC_EX_NOT_SUPPORT_PROFILE = VDEC_EX_BIT(0),
    E_VDEC_EX_NOT_SUPPORT_SPS_ID = VDEC_EX_BIT(1),
    E_VDEC_EX_NOT_SUPPORT_CHROMA_FORMAT = VDEC_EX_BIT(2),
    E_VDEC_EX_NOT_SUPPORT_MAX_FRAME_NUM = VDEC_EX_BIT(3),
} VDEC_EX_NotSupportInfo;

typedef struct DLL_PACKED
{
    VDEC_EX_Stream eStream;
    VDEC_EX_CodecType eCodecType;
} VDEC_EX_CodecInfo;


typedef struct DLL_PACKED
{
    VDEC_EX_DEC_MODE eDecMod;
    VDEC_EX_CodecInfo pstCodecInfo[VDEC_MAX_DEC_NUM];
    MS_U8 u8CodecCnt;
    MS_U8 u8ArgSize;
    MS_U32 u32Arg;
} VDEC_EX_DecModCfg;


typedef enum
{
    E_VDEC_EX_STC0=0,
    E_VDEC_EX_STC1,
    E_VDEC_EX_STC2,
    E_VDEC_EX_STC3,
}VDEC_EX_STCMode;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_U8 u8DisplayTop;
}VDEC_EX_Field_Polarity;


typedef enum
{

    E_VDEC_EX_DEC_KR3D_MODE_BASE = 0x0000,
    E_VDEC_EX_DEC_KR3D_INTERLACE_MODE = E_VDEC_EX_DEC_KR3D_MODE_BASE,
    E_VDEC_EX_DEC_KR3D_FORCE_P_MODE,
    E_VDEC_EX_DEC_KR3D_INTERLACE_TWO_PITCH,
    E_VDEC_EX_DEC_KR3D_FORCE_P_TWO_PITCH,


    E_VDEC_EX_DEC_PIP_MODE_BASE = 0x1000,
    E_VDEC_EX_DEC_PIP_SYNC_INDIE = E_VDEC_EX_DEC_PIP_MODE_BASE,
    E_VDEC_EX_DEC_PIP_SYNC_MAIN_STC,
    E_VDEC_EX_DEC_PIP_SYNC_SWITCH
} VDEC_EX_DEC_MODE_ARG;

typedef enum
{
    E_VDEC_EX_DIU_DRAM = 0,
    E_VDEC_EX_DIU_HVD = 1,
    E_VDEC_EX_DIU_MVD = 2,
    E_VDEC_EX_DIU_HVD_3DLR = 3,
    E_VDEC_EX_DIU_MVD_3DLR = 4,
    E_VDEC_EX_DIU_UNKNOWN = -1
} VDEC_EX_DIU;

typedef struct DLL_PACKED
{
    MS_U32 u32version;
    MS_U32 u32size;
} VDEC_EX_VerCtl;


typedef struct DLL_PACKED
{
    VDEC_EX_CCFormat eFormat;
    VDEC_EX_CCType eType;
    MS_VIRT u32BufStAdd;
    MS_U32 u32BufSize;
} VDEC_EX_CCCfg;


typedef struct DLL_PACKED
{
    MS_U64 u64PTS;
    MS_U32 u32POC;
    MS_U8 u8FrameType;
} VDEC_EX_PVR_Seamless_Info;



typedef struct DLL_PACKED
{

    MS_U16 u16HorSize;

    MS_U16 u16VerSize;

    MS_U32 u32FrameRate;

    MS_U8 u8Interlace;

    MS_U8 u8AFD;

    MS_U16 u16SarWidth;

    MS_U16 u16SarHeight;

    MS_U16 u16CropRight;

    MS_U16 u16CropLeft;

    MS_U16 u16CropBottom;

    MS_U16 u16CropTop;

    MS_U16 u16Pitch;

    MS_U16 u16PTSInterval;

    MS_U8 u8MPEG1;

    MS_U8 u8PlayMode;

    MS_U8 u8FrcMode;

    MS_U8 u8AspectRate;

    MS_BOOL bWithChroma;



    MS_BOOL bColorInXVYCC;

    MS_VIRT u32DynScalingAddr;

    MS_U32 u32DynScalingSize;

    MS_U8 u8DynScalingDepth;

    MS_BOOL bEnableMIUSel;

    MS_U32 u32AspectWidth;

    MS_U32 u32AspectHeight;
} VDEC_EX_DispInfo;


typedef struct DLL_PACKED
{
    MS_U16 u16VideoResolutionWidth;
    MS_U16 u16VideoResolutionHeight;
    MS_U16 u16DisplayResolutionWidth;
    MS_U16 u16DisplayResolutionHeight;
    MS_U32 u32FrameRateFixed;
    MS_U32 u32FrameRateVariable;
    MS_U32 u32FrameRateExplicit;
    MS_U16 u16DisplayAspectRatioWidth;
    MS_U16 u16DisplayAspectRatioHeight;
    MS_U16 u16StorageAspectRatioWidth;
    MS_U16 u16StorageAspectRatioHeight;
    MS_U16 u16PixelAspectratioWidth;
    MS_U16 u16PixelAspectratioHeight;
    MS_U8 u8ScanType;
    MS_BOOL bOverScan;
    MS_U8 u8FramePack;
    MS_U32 u32EncodedFormatProfile;
    MS_U32 u32EncodedFormatProfileLevel;
    MS_U8 u8BitsPerComponent;
} VDEC_EX_ExtendDispInfo;


typedef struct DLL_PACKED
{

    MS_PHY u32FWBinaryAddr;

    MS_SIZE u32FWBinarySize;

    MS_PHY u32CodeBufAddr;

    MS_SIZE u32CodeBufSize;

    MS_PHY u32FrameBufAddr;

    MS_SIZE u32FrameBufSize;

    MS_PHY u32BitstreamBufAddr;

    MS_SIZE u32BitstreamBufSize;

    MS_PHY u32DrvProcBufAddr;

    MS_SIZE u32DrvProcBufSize;

    MS_PHY u32VlcBinarySrcAddr;

    MS_SIZE u32VlcTabBinarySize;

    VDEC_EX_DbgLevel eDbgMsgLevel;

    VDEC_EX_FWSourceType eFWSourceType;
} VDEC_EX_SysCfg;


typedef struct DLL_PACKED
{

    VDEC_EX_SrcMode eSrcMode;

    VDEC_EX_TimeStampType eTimeStampType;

    VDEC_EX_MJpegScaleFactor eMJpegScaleFactor;

    MS_BOOL bWithoutNalStCode;


    MS_U32 u32FrameRate;
    MS_U32 u32FrameRateBase;

    MS_U16 u16Width[8];

    MS_U16 u16Height[8];

    MS_U16 u16NumSizes;
} VDEC_EX_VideoInfo;


typedef struct DLL_PACKED
{

    MS_PHY u32LumaAddr;

    MS_PHY u32ChromaAddr;

    MS_U32 u32TimeStamp;

    MS_U32 u32ID_L;

    MS_U32 u32ID_H;

    MS_U16 u16Pitch;

    MS_U16 u16Width;

    MS_U16 u16Height;

    VDEC_EX_FrameType eFrameType;

    VDEC_EX_FieldType eFieldType;
} VDEC_EX_FrameInfo;

typedef struct DLL_PACKED
{

    VDEC_EX_FrameInfo sFrameInfo;

    MS_PHY u32LumaAddr_2bit;

    MS_PHY u32ChromaAddr_2bit;

    MS_U8 u8LumaBitdepth;

    MS_U8 u8ChromaBitdepth;

    MS_U16 u16Pitch_2bit;

    MS_U8 u8Reserved[64];
} VDEC_EX_FrameInfoEX;

typedef struct DLL_PACKED
{

    VDEC_EX_VerCtl stVerCtl;

    MS_S16 s16MinQp;

    MS_S16 s16AvgQp;

    MS_S16 s16MaxQp;

    MS_S16 s16MinMV;

    MS_S16 s16AvgMV;

    MS_S16 s16MaxMV;

    MS_U32 u32SkipMV;

    MS_U32 u32NonSkipMV;
} VDEC_EX_FrameQoSInfo;

typedef struct
{
    MS_BOOL bUsed;
    MS_BOOL bContentLightLevelEnabled;
    MS_U16 u16MaxContentLightLevel;
    MS_U16 u16MaxPicAverageLightLevel;
} VDEC_EX_ContentLightLevelInfo_SEI;


#ifdef VDEC_CAP_DV_OTT_API
typedef struct
{
    MS_U32 u32DVSupportProfiles;
    VDEC_EX_DV_Stream_Profile eDVProfile;
    VDEC_EX_DV_Stream_Highest_Level eDVLevel;
#ifdef VDEC_CAP_DV_OTT_API_V2
    VDEC_EX_DV_METADATA_REORDER eDVMetaReorder;
#else
    VDEC_EX_DV_CMD_TYPE eDVCmdType;
#endif
}VDEC_EX_DV_Info;
#endif



typedef struct DLL_PACKED
{

    VDEC_EX_VerCtl stVerCtl;

    VDEC_EX_FrameInfo sFrameInfo;

    MS_PHY u32LumaAddr_2bit;

    MS_PHY u32ChromaAddr_2bit;

    MS_PHY u32LumaAddrI;

    MS_PHY u32LumaAddrI_2bit;

    MS_PHY u32ChromaAddrI;

    MS_PHY u32ChromaAddrI_2bit;

    MS_U32 u32MFCodecInfo;

    MS_U32 u32LumaMFCbitlen;

    MS_U32 u32ChromaMFCbitlen;

    MS_U16 u16Pitch_2bit;

    MS_U8 u8LumaBitdepth;

    MS_U8 u8ChromaBitdepth;
#ifdef VDEC_CAP_HEVC_HDR

    MS_U32 maxLuminance;
    MS_U32 minLuminance;
    MS_U16 primaries[3][2];
    MS_U16 whitePoint[2];

    MS_U8 Frm_Info_Ext_avail;

    MS_U8 colour_primaries;
    MS_U8 transfer_characteristics;
    MS_U8 matrix_coefficients;

#endif
} VDEC_EX_FrameInfoExt;
#if !(defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_500_3))
typedef struct DLL_PACKED
{
    VDEC_EX_VerCtl stVerCtl;
    VDEC_EX_FrameInfo sFrameInfo;
    MS_PHY u32LumaAddr_2bit;
    MS_PHY u32ChromaAddr_2bit;
    MS_PHY u32LumaAddrI;
    MS_PHY u32LumaAddrI_2bit;
    MS_PHY u32ChromaAddrI;
    MS_PHY u32ChromaAddrI_2bit;
    MS_U32 u32MFCodecInfo;
    MS_U32 u32LumaMFCbitlen;
    MS_U32 u32ChromaMFCbitlen;
    MS_U16 u16Pitch_2bit;
    MS_U8 u8LumaBitdepth;
    MS_U8 u8ChromaBitdepth;
} VDEC_EX_FrameInfoExt_version0;
#endif

typedef struct DLL_PACKED
{
    MS_BOOL bUsed;
    MS_BOOL bColourVolumeSEIEnabled;
    MS_U32 u32MaxLuminance;
    MS_U32 u32MinLuminance;
    MS_U16 u16Primaries[3][2];
    MS_U16 u16WhitePoint[2];
}VDEC_EX_DisplayColourVolume_SEI;

#ifdef VDEC_CAP_HEVC_HDR_V2
typedef struct DLL_PACKED
{
    VDEC_EX_FrameInfoExt sFrameInfoExt;

    VDEC_EX_DisplayColourVolume_SEI sDisplay_colour_volume;
    MS_U8 u8Frm_Info_Ext_avail;

    MS_U8 u8Colour_primaries;
    MS_U8 u8Transfer_characteristics;
    MS_U8 u8Matrix_coefficients;
} VDEC_EX_FrameInfoExt_v2;
#endif

#ifdef VDEC_CAP_HEVC_HDR_V3
typedef struct DLL_PACKED
{
    VDEC_EX_FrameInfoExt sFrameInfoExt;

    VDEC_EX_DisplayColourVolume_SEI sDisplay_colour_volume;
    MS_U8 u8Frm_Info_Ext_avail;

    MS_U8 u8Colour_primaries;
    MS_U8 u8Transfer_characteristics;
    MS_U8 u8Matrix_coefficients;

    MS_U8 u8DVMode;
    MS_PHY u32DVMetaDataAddr;
    MS_U32 u32DVMetaDataSize;
} VDEC_EX_FrameInfoExt_v3;
#endif

#ifdef VDEC_CAP_FRAME_INFO_EXT_V4
typedef struct DLL_PACKED
{
    VDEC_EX_FrameInfoExt_v3 sFrameInfoExt_v3;

    MS_U8 u8CurrentIndex;
    MS_PHY u32HDRRegAddr;
    MS_U32 u32HDRRegSize;
    MS_PHY u32HDRLutAddr;
    MS_U32 u32HDRLutSize;
    MS_BOOL bDMEnable;
    MS_BOOL bCompEnable;

    MS_U8 u8ComplexityLevel;
} VDEC_EX_FrameInfoExt_v4;
#endif


#ifdef VDEC_CAP_FRAME_INFO_EXT_V5
typedef struct DLL_PACKED
{
    VDEC_EX_FrameInfoExt_v4 sFrameInfoExt_v4;

    MS_U32 u32ParWidth;
    MS_U32 u32ParHeight;
    MS_U16 u16CropRight;
    MS_U16 u16CropLeft;
    MS_U16 u16CropBottom;
    MS_U16 u16CropTop;
} VDEC_EX_FrameInfoExt_v5;
#endif

#ifdef VDEC_CAP_FRAME_INFO_EXT_V6

typedef struct DLL_PACKED
{

    VDEC_EX_FrameInfoExt_v5 sFrameInfoExt_v5;


    VDEC_EX_TileMode eTileMode;

    MS_U16 u16MIUBandwidth;

    MS_U16 u16Bitrate;



    MS_U8 u8HTLBTableId;

    MS_U8 u8HTLBEntriesSize;

    MS_PHY u32HTLBEntriesAddr;
} VDEC_EX_FrameInfoExt_v6;
#endif

#ifdef VDEC_CAP_FRAME_INFO_EXT_V7

typedef struct DLL_PACKED
{

    VDEC_EX_FrameInfoExt_v6 sFrameInfoExt_v6;



    MS_PHY u32LumaAddr_subsample;

    MS_PHY u32ChromaAddr_subsample;

    MS_U16 u16Pitch_subsample;

    MS_U8 u8TileMode_subsample;


    MS_PHY u32HTLBTableAddr;


    MS_U8 u8HTLBPageSizes;

    MS_U8 u8HTLBChromaEntriesSize;

    MS_PHY u32HTLBChromaEntriesAddr;


    MS_U16 u16MaxContentLightLevel;

    MS_U16 u16MaxPicAverageLightLevel;
} VDEC_EX_FrameInfoExt_v7;
#endif


typedef struct DLL_PACKED
{

    MS_U16 u16VSize;

    MS_U16 u16HSize;

    MS_S16 s16VOffset;

    MS_S16 s16HOffset;
} VDEC_EX_ExtDispInfo;


typedef struct DLL_PACKED
{

    VDEC_EX_FrameInfo stFrmInfo;

    MS_U32 u32PriData;

    MS_U32 u32Idx;
} VDEC_EX_DispFrame;


typedef struct DLL_PACKED
{

    MS_U8 u8TimeCodeHr;

    MS_U8 u8TimeCodeMin;

    MS_U8 u8TimeCodeSec;

    MS_U8 u8TimeCodePic;

    MS_U8 u8DropFrmFlag;

    MS_U8 u8Reserved[3];
} VDEC_EX_TimeCode;


typedef struct DLL_PACKED
{
    VDEC_EX_FBReductionType eLumaFBReduction;
    VDEC_EX_FBReductionType eChromaFBReduction;
    MS_BOOL bEnableAutoMode;
} VDEC_EX_FBReduction;


typedef struct DLL_PACKED
{

    MS_U32 u32Version;

    VDEC_EX_CodecType eCodecType;

    VDEC_EX_SysCfg SysConfig;

    VDEC_EX_VideoInfo VideoInfo;

    MS_BOOL EnableDynaScale;

    MS_BOOL bDisableDropErrFrame;

    MS_BOOL bDisableErrConceal;

    MS_BOOL bRepeatLastField;

    MS_U8 u8ErrThreshold;

    MS_U32 u32DSVirtualBoxWidth;

    MS_U32 u32DSVirtualBoxHeight;

    VDEC_EX_FBReduction stFBReduction;
} VDEC_EX_InitParam;


typedef struct DLL_PACKED
{

    MS_U32 u32ID_H;

    MS_U32 u32ID_L;

    MS_VIRT u32StAddr;

    MS_U32 u32Size;

    MS_U32 u32Timestamp;
} VDEC_EX_DecCmd;


typedef struct DLL_PACKED
{

    MS_U32 u32ID_H;

    MS_U32 u32ID_L;

    VDEC_EX_DispCmdAction eAction;
} VDEC_EX_DispCmd;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;

    VDEC_EX_PicStructure u8PicStructure;
    MS_U8 u8TopFieldFirst;
    MS_U16 u16TempRef;
    MS_U32 u32Pts;

    MS_U32 u32UserDataBuf;

    MS_U32 u32UserDataSize;

    VDEC_EX_FrameType eFrameType;
} VDEC_EX_CC_Info;


typedef struct DLL_PACKED
{
    MS_U32 u32Ver;
    MS_VIRT u32Val;
} VDEC_EX_CC_InputPara;

typedef struct DLL_PACKED
{
    MS_U32 u32OutputFrameRate;
    MS_U8 u8Interlace;
} VDEC_EX_FRC_OutputParam;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Id;
} VDEC_StreamId;

typedef void (*VDEC_EX_EventCb)(MS_U32 eFlag, void *param);

typedef struct DLL_PACKED
{
    MS_U8 u8Frm_packing_arr_cnl_flag;
    MS_U8 u8Frm_packing_arr_type;
    MS_U8 u8content_interpretation_type;
    MS_U8 u1Quincunx_sampling_flag;

    MS_U8 u1Spatial_flipping_flag;
    MS_U8 u1Frame0_flipping_flag;
    MS_U8 u1Field_views_flag;
    MS_U8 u1Current_frame_is_frame0_flag;

    MS_U8 u1Frame0_self_contained_flag;
    MS_U8 u1Frame1_self_contained_flag;
    MS_U8 u4Frame0_grid_position_x;
    MS_U8 u4Frame0_grid_position_y;

    MS_U8 u4Frame1_grid_position_x;
    MS_U8 u4Frame1_grid_position_y;
    MS_U8 u8Reserved01;
    MS_U8 u8Reserved02;
}VDEC_EX_Frame_packing_SEI;

typedef struct DLL_PACKED
{
    VDEC_EX_VerCtl stVerCtl;

    MS_BOOL bIsCropInfo;
    MS_BOOL bValid;
    MS_BOOL bUsed;
    MS_U8 u8Frm_packing_arr_cnl_flag;
    MS_U8 u8Frm_packing_arr_type;
    MS_U8 u8content_interpretation_type;
    MS_U8 u1Quincunx_sampling_flag;
    MS_U8 u1Spatial_flipping_flag;
    MS_U8 u1Frame0_flipping_flag;
    MS_U8 u1Field_views_flag;
    MS_U8 u1Current_frame_is_frame0_flag;
    MS_U8 u1Frame0_self_contained_flag;
    MS_U8 u1Frame1_self_contained_flag;
    MS_U8 u4Frame0_grid_position_x;
    MS_U8 u4Frame0_grid_position_y;
    MS_U8 u4Frame1_grid_position_x;
    MS_U8 u4Frame1_grid_position_y;
    MS_U32 u32DataBuff;
    MS_U32 u32DataSize;
    MS_U32 left;
    MS_U32 right;
    MS_U32 top;
    MS_U32 bottom;
} VDEC_EX_Frame_packing_SEI_EX;

typedef struct DLL_PACKED
{

    MS_BOOL bAspect_ratio_info_present_flag;

    MS_U8 u8Aspect_ratio_idc;

    MS_U16 u16Sar_width;

    MS_U16 u16Sar_height;

    MS_BOOL bOverscan_info_present_flag;

    MS_BOOL bOverscan_appropriate_flag;

    MS_BOOL bVideo_signal_type_present_flag;

    MS_U8 u8Video_format;

    MS_BOOL bVideo_full_range_flag;

    MS_BOOL bColour_description_present_flag;
    MS_U8 u8Colour_primaries;
    MS_U8 u8Transfer_characteristics;
    MS_U8 u8Matrix_coefficients;

    MS_BOOL bChroma_location_info_present_flag;
    MS_U8 u8Chroma_sample_loc_type_top_field;
    MS_U8 u8Chroma_sample_loc_type_bottom_field;

    MS_BOOL bTiming_info_present_flag;
    MS_BOOL bFixed_frame_rate_flag;

    MS_U32 u32Num_units_in_tick;
    MS_U32 u32Time_scale;
} VDEC_EX_AVC_VUI_DISP_INFO;


typedef struct DLL_PACKED
{
    MS_U32 u32HorSize;
    MS_U32 u32VerSize;
    MS_U32 u32Strip;
    MS_VIRT u32LumaStartAddr;
    MS_VIRT u32ChromaStartAddr;
}VDEC_EX_CrcIn;

typedef struct DLL_PACKED
{
    MS_U32 u32LumaCRC;
    MS_U32 u32ChromaCRC;
}VDEC_EX_CrcOut;

typedef struct DLL_PACKED
{
    VDEC_EX_CrcIn stCrcIn;
    VDEC_EX_CrcOut stCrcOut;
}VDEC_EX_CrcValue;

typedef struct DLL_PACKED
{
    MS_VIRT u32DSBufAddr;
    MS_U32 u32DSBufSize;
}VDEC_EX_EXTERNAL_DS_BUFFER;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_U32 u32Timeout;
}VDEC_EX_Decode_Timeout_Param;



typedef struct DLL_PACKED
{
  MS_BOOL bEnable;
  MS_PHY u32IapGnBufAddr;
  MS_U32 u32IapGnBufSize;
} VDEC_EX_IapGnBufShareBWMode;

typedef struct DLL_PACKED
{
  MS_BOOL bEnableFramebufferCtrl;
  MS_PHY u32FramebufferAddress;
  MS_U32 u32FramebufferTotalsize;
} VDEC_Framebuffer_Ctrl;



#define API_HWCAP_VERSION 1

typedef struct DLL_PACKED
{
    MS_U32 u32ApiHW_Version;
    MS_U16 u16ApiHW_Length;

    MS_U8 u8Cap_Support_Decoder_Num;

    MS_BOOL bCap_Support_MPEG2;
    MS_BOOL bCap_Support_H263;
    MS_BOOL bCap_Support_MPEG4;
    MS_BOOL bCap_Support_DIVX311;
    MS_BOOL bCap_Support_DIVX412;
    MS_BOOL bCap_Support_FLV;
    MS_BOOL bCap_Support_VC1ADV;
    MS_BOOL bCap_Support_VC1MAIN;

    MS_BOOL bCap_Support_RV8;
    MS_BOOL bCap_Support_RV9;
    MS_BOOL bCap_Support_H264;
    MS_BOOL bCap_Support_AVS;
    MS_BOOL bCap_Support_AVS_PLUS;
    MS_BOOL bCap_Support_MJPEG;
    MS_BOOL bCap_Support_MVC;
    MS_BOOL bCap_Support_VP8;
    MS_BOOL bCap_Support_VP9;
    MS_BOOL bCap_Support_HEVC;


}VDEC_HwCap;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Addr;
    MS_U32 u32Size;
    MS_U8 reserved[32];
} VDEC_FRAMEBuff;

typedef struct DLL_PACKED
{
    MS_U16 u16CodecCapWidth;
    MS_U16 u16CodecCapHeight;
    MS_U8 u8CodecCapFrameRate;
    VDEC_EX_CODEC_CAP_PROFILE_INFO u8CodecCapProfile;
    VDEC_EX_CODEC_CAP_VERSION_INFO u8CodecCapVersion;
    VDEC_EX_CODEC_CAP_LEVEL_INFO u8CodecCapLevel;
    MS_U32 u32CodecType;
    MS_U32 u32Reserved1;
}VDEC_EX_CODEC_CAP_INFO;

typedef struct DLL_PACKED
{
    VDEC_EX_CODEC_CAP_PROFILE_INFO u8CodecCapProfile;
    VDEC_EX_CODEC_CAP_LEVEL_INFO u8CodecCapLevel;
    MS_U16 u16CodecCapWidth;
    MS_U16 u16CodecCapHeight;
    MS_U8 u8CodecCapFrameRate;
    VDEC_EX_CODEC_CAP_VERSION_INFO u8CodecCapVersion;
    MS_U32 u32BitRate;
} VDEC_EX_PROFILE_CAP_INFO;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32CodecType;
    MS_U32 u32CodecCapProfileTableSize;
    VDEC_EX_PROFILE_CAP_INFO *pCodecCapProfileTable;
} VDEC_EX_CODEC_PROFILE_CAP_INFO;

typedef struct DLL_PACKED
{
    VDEC_EX_CodecType eCodecType;
    MS_PHY u32DataAddr;
    MS_U32 u32MemUsageSize;
    MS_U16 u16DataSize;
} VDEC_EX_FbMemUsage_Param;
# 2528 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_GetLibVer(const MSIF_Version **ppVersion);






VDEC_EX_Result MApi_VDEC_EX_GetInfo(const VDEC_EX_Info **ppInfo);







MS_BOOL MApi_VDEC_EX_GetStatus(VDEC_StreamId *pStreamId, VDEC_EX_Status *pStatus);






VDEC_EX_Result MApi_VDEC_EX_EnableTurboMode(MS_BOOL bEnable);






MS_BOOL MApi_VDEC_EX_CheckCaps(VDEC_StreamId *pStreamId, VDEC_EX_CodecType eCodecType);
# 2566 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetSingleDecode(MS_BOOL bEnable);
# 2581 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_GetFreeStream(void *pInfo, MS_U32 u32Size, VDEC_EX_Stream eStreamType, VDEC_EX_CodecType eCodecType);
# 2591 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_GetConfig(VDEC_EX_Stream eStreamType);
# 2603 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_Init(VDEC_StreamId *eStreamId, VDEC_EX_InitParam *pInitParam);






VDEC_EX_Result MApi_VDEC_EX_Rst(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_Exit(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_CheckDispInfoRdy(VDEC_StreamId *pStreamId);







VDEC_EX_Result MApi_VDEC_EX_SetFrcMode(VDEC_StreamId *pStreamId, VDEC_EX_FrcMode eFrcMode);
# 2641 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetDynScalingParams(VDEC_StreamId *pStreamId, MS_PHY u32Addr, MS_U32 u32Size);
# 2652 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetDbgLevel(VDEC_StreamId *pStreamId, VDEC_EX_DbgLevel eDbgLevel);







VDEC_EX_Result MApi_VDEC_EX_Play(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_Pause(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_Resume(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_StepDisp(VDEC_StreamId *pStreamId);
# 2692 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_IsStepDispDone(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_StepDecode(VDEC_StreamId *pStreamId);
# 2710 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_IsStepDecodeDone(VDEC_StreamId *pStreamId);







VDEC_EX_Result MApi_VDEC_EX_SetTrickMode(VDEC_StreamId *pStreamId, VDEC_EX_TrickDec eTrickDec);







VDEC_EX_Result MApi_VDEC_EX_PushDecQ(VDEC_StreamId *pStreamId, VDEC_EX_DecCmd *pCmd);






VDEC_EX_Result MApi_VDEC_EX_Flush(VDEC_StreamId *pStreamId, VDEC_EX_FreezePicSelect eFreezePic);







VDEC_EX_Result MApi_VDEC_EX_EnableLastFrameShow(VDEC_StreamId *pStreamId, MS_BOOL bEnable);
# 2750 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetSpeed(VDEC_StreamId *pStreamId, VDEC_EX_SpeedType eSpeedType, VDEC_EX_DispSpeed eSpeed);







VDEC_EX_Result MApi_VDEC_EX_SetFreezeDisp(VDEC_StreamId *pStreamId, MS_BOOL bEnable);







VDEC_EX_Result MApi_VDEC_EX_SetBlueScreen(VDEC_StreamId *pStreamId, MS_BOOL bOn);







VDEC_EX_Result MApi_VDEC_EX_ResetPTS(VDEC_StreamId *pStreamId, MS_U32 u32PtsBase);
# 2784 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_AVSyncOn(VDEC_StreamId *pStreamId, MS_BOOL bOn, MS_U32 u32SyncDelay, MS_U16 u16SyncTolerance);







VDEC_EX_Result MApi_VDEC_EX_SetAVSyncFreerunThreshold(VDEC_StreamId *pStreamId, MS_U32 u32Threshold );
# 2801 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_GetDispInfo(VDEC_StreamId *pStreamId, VDEC_EX_DispInfo *pDispinfo);





VDEC_EX_Result MApi_VDEC_EX_IsAVSyncOn(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsWithValidStream(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsDispFinish(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsFrameRdy(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsIFrameFound(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsSeqChg(VDEC_StreamId *pStreamId);






VDEC_EX_SrcMode MApi_VDEC_EX_GetActiveSrcMode(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsReachSync(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsStartSync(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsFreerun(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsWithLowDelay(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsAllBufferEmpty(VDEC_StreamId *pStreamId);







VDEC_EX_Result MApi_VDEC_EX_GetExtDispInfo(VDEC_StreamId *pStreamId, VDEC_EX_ExtDispInfo *pExtDispinfo);







VDEC_EX_Result MApi_VDEC_EX_GetDecFrameInfo(VDEC_StreamId *pStreamId, VDEC_EX_FrameInfo *pFrmInfo);







VDEC_EX_Result MApi_VDEC_EX_GetDispFrameInfo(VDEC_StreamId *pStreamId, VDEC_EX_FrameInfo *pFrmInfo);







VDEC_EX_Result MApi_VDEC_EX_GetDecTimeCode(VDEC_StreamId *pStreamId, VDEC_EX_TimeCode* pTimeCode);







VDEC_EX_Result MApi_VDEC_EX_GetDispTimeCode(VDEC_StreamId *pStreamId, VDEC_EX_TimeCode* pTimeCode);
# 2935 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetEvent(VDEC_StreamId *pStreamId, MS_U32 u32EventFlag, VDEC_EX_EventCb pfn, void* param);





VDEC_EX_Result MApi_VDEC_EX_UnsetEvent(VDEC_StreamId *pStreamId, MS_U32 u32EventFlag);
# 2951 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetEvent_MultiCallback(VDEC_StreamId *pStreamId, VDEC_EX_CB_TYPE cb_type, MS_U32 u32EventFlag, VDEC_EX_EventCb pfn, void *param);





VDEC_EX_Result MApi_VDEC_EX_UnsetEvent_MultiCallback(VDEC_StreamId *pStreamId, VDEC_EX_CB_TYPE cb_type, MS_U32 u32EventFlag);







VDEC_EX_Result MApi_VDEC_EX_GetEventInfo(VDEC_StreamId *pStreamId, MS_U32* u32EventFlag);






VDEC_EX_Result MApi_VDEC_EX_FireDecCmd(VDEC_StreamId *pStreamId);







VDEC_EX_Result MApi_VDEC_EX_SeekToPTS(VDEC_StreamId *pStreamId, MS_U32 u32PTS);







VDEC_EX_Result MApi_VDEC_EX_SkipToPTS(VDEC_StreamId *pStreamId, MS_U32 u32PTS);
# 2998 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_DisableDeblocking(VDEC_StreamId *pStreamId, MS_BOOL bDisable);
# 3008 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_DisableQuarterPixel(VDEC_StreamId *pStreamId, MS_BOOL bDisable);
# 3018 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetAutoRmLstZeroByte(VDEC_StreamId *pStreamId, MS_BOOL bOn);
# 3029 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetBalanceBW(VDEC_StreamId *pStreamId,
                                        MS_U8 u8QuarPixelTH, MS_U8 u8DeBlockingTH, MS_U8 u8UpperBound, MS_U8 u8SafeCoef);






MS_U8 MApi_VDEC_EX_GetActiveFormat(VDEC_StreamId *pStreamId);






MS_U8 MApi_VDEC_EX_GetColourPrimaries(VDEC_StreamId *pStreamId);







MS_U32 MApi_VDEC_EX_GetFwVersion(VDEC_StreamId *pStreamId, VDEC_EX_FwType eFwType);






MS_U8 MApi_VDEC_EX_GetGOPCnt(VDEC_StreamId *pStreamId);







MS_U32 MApi_VDEC_EX_GetESWritePtr(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetESReadPtr(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetPTS(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetNextPTS(VDEC_StreamId *pStreamId);






MS_S64 MApi_VDEC_EX_GetVideoPtsStcDelta(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetErrCode(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetErrCnt(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetBitsRate(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetFrameCnt(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetSkipCnt(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetDropCnt(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetDispCnt(VDEC_StreamId *pStreamId);






MS_U32 MApi_VDEC_EX_GetDecQVacancy(VDEC_StreamId *pStreamId);






MS_BOOL MApi_VDEC_EX_Is32PullDown(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_IsAlive(VDEC_StreamId *pStreamId);







MS_BOOL MApi_VDEC_EX_IsCCAvailable(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_GetCCInfo(VDEC_StreamId *pStreamId, void *pInfo, MS_U32 u32Size);






VDEC_EX_TrickDec MApi_VDEC_EX_GetTrickMode(VDEC_StreamId *pStreamId);






VDEC_EX_CodecType MApi_VDEC_EX_GetActiveCodecType(VDEC_StreamId *pStreamId);
# 3206 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_GenPattern(VDEC_StreamId *pStreamId,
                                    VDEC_EX_PatternType ePatternType,
                                    MS_PHY u32Addr,
                                    MS_U32* u32Size);







MS_U32 MApi_VDEC_EX_GetPatternLeastLength(VDEC_StreamId *pStreamId, VDEC_EX_PatternType ePatternType);
# 3228 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_MHEG_DecodeIFrame(VDEC_StreamId *pStreamId,
                                            MS_PHY u32FrameBufAddr,
                                            MS_PHY u32SrcSt,
                                            MS_PHY u32SrcEnd);
# 3243 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_MHEG_IsIFrameDecoding(VDEC_StreamId *pStreamId);






VDEC_EX_Result MApi_VDEC_EX_MHEG_RstIFrameDec(VDEC_StreamId *pStreamId);
# 3260 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_StartParsing(VDEC_StreamId *pStreamId, VDEC_EX_CCCfg *pCCParam);






VDEC_EX_Result MApi_VDEC_EX_CC_StopParsing(VDEC_StreamId *pStreamId);







VDEC_EX_Result MApi_VDEC_EX_CC_GetWritePtr(VDEC_StreamId *pStreamId, MS_U32 *pu32Write);







VDEC_EX_Result MApi_VDEC_EX_CC_GetReadPtr(VDEC_StreamId *pStreamId, MS_U32 *pu32Read);







VDEC_EX_Result MApi_VDEC_EX_CC_UpdateReadPtr(VDEC_StreamId *pStreamId, MS_U32 u32EachPacketSize);







VDEC_EX_Result MApi_VDEC_EX_CC_GetIsOverflow(VDEC_StreamId *pStreamId, MS_BOOL *pbOverflow);
# 3310 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_DbgCmd(VDEC_StreamId *pStreamId, MS_U32 u8Cmd, MS_U32 u32CmdArg);
# 3321 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_DbgSetData(VDEC_StreamId *pStreamId, MS_VIRT u32Addr, MS_U32 u32Data);
# 3332 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_DbgGetData(VDEC_StreamId *pStreamId, MS_VIRT u32Addr, MS_U32 *u32Data);
# 3341 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetControl(VDEC_StreamId *pStreamId, VDEC_EX_User_Cmd cmd_id, MS_VIRT param);
# 3350 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_GetControl(VDEC_StreamId *pStreamId, VDEC_EX_User_Cmd cmd_id, MS_U32 *param);




VDEC_EX_Result MApi_VDEC_EX_EnableDispOneField(VDEC_StreamId *pStreamId, MS_BOOL bEnable);







VDEC_EX_Result MApi_VDEC_EX_GetHWKey(VDEC_StreamId *pStreamId, MS_U8 *pu8Key);
# 3372 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
void MApi_VDEC_EX_DbgDumpStatus(VDEC_StreamId *pStreamId);







MS_U32 MApi_VDEC_EX_DbgGetProgCnt(void);
# 3389 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_SetBlockDisplay(VDEC_StreamId *pStreamId, MS_BOOL bEnable);
# 3398 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_EnableESBuffMalloc(VDEC_StreamId *pStreamId, MS_BOOL bEnable);







MS_U32 MApi_VDEC_EX_GetESBuffVacancy(VDEC_StreamId *pStreamId, void *pData);
# 3416 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_GetESBuff(VDEC_StreamId *pStreamId, MS_U32 u32ReqSize, MS_U32 *u32AvailSize, MS_PHY *u32Addr);







VDEC_EX_Result MApi_VDEC_EX_GetNextDispFrame(VDEC_StreamId *pStreamId, VDEC_EX_DispFrame **ppDispFrm);







VDEC_EX_Result MApi_VDEC_EX_DisplayFrame(VDEC_StreamId *pStreamId, VDEC_EX_DispFrame *pDispFrm);







VDEC_EX_Result MApi_VDEC_EX_ReleaseFrame(VDEC_StreamId *pStreamId, VDEC_EX_DispFrame *pDispFrm);
# 3449 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CaptureFrame(VDEC_StreamId *pStreamId, MS_U32 u32FrmPriData, MS_BOOL bEnable);
# 3460 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_Init(VDEC_StreamId *pStreamId, MS_U32 *pIn);
# 3471 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_SetCfg(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt, VDEC_EX_CCType eType, MS_U32 *pIn);
# 3481 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_SetBuffStartAdd(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt, MS_U32 *pIn);
# 3491 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_UpdateWriteAdd(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt, MS_U32 *pIn);
# 3501 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_UpdateReadAdd(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt, MS_U32 *pIn);
# 3511 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_DisableParsing(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt);
# 3521 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_GetInfo(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt, VDEC_EX_CCInfoCmd eCmd, MS_U32 *pOut);
# 3531 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_GetIsRstDone(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt);
# 3541 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
VDEC_EX_Result MApi_VDEC_EX_CC_GetIsBuffOverflow(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt);
# 3551 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_PHY MApi_VDEC_EX_CC_GetWriteAdd(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt);
# 3561 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_PHY MApi_VDEC_EX_CC_GetReadAdd(VDEC_StreamId *pStreamId, VDEC_EX_CCFormat eFmt);


VDEC_EX_Result MApi_VDEC_EX_SystemPreSetControl(VDEC_EX_User_Cmd cmd_id, void *pParam);
#ifdef VDEC_CAP_SYSTEM_PREGET_API
VDEC_EX_Result MApi_VDEC_EX_SystemPreGetControl(VDEC_EX_User_Cmd cmd_id, void* pParam);
#endif
VDEC_EX_Result MApi_VDEC_EX_SystemPostSetControl(VDEC_EX_User_Cmd cmd_id, void *pParam);
VDEC_EX_Result MApi_VDEC_EX_PreSetControl(VDEC_StreamId *pStreamId, VDEC_EX_User_Cmd cmd_id, MS_U32 param);
#ifdef AUTO_ASSIGN_FRAMEBUFFER
void MApi_VDEC_EX_SetFrameBuffer(MS_U32 u32FrmBufAddr,MS_U32 u32FrmBufSize);
void MApi_VDEC_EX_GetFrmInfoByTask(MS_U8 u8TaskId,MS_BOOL bUHD,MS_BOOL bFileMode,MS_U32* u32FrmBufAddr,MS_U32* u32FrmBufSize);
#endif

#else

#define PROTECTBUFFER_MAX_NUM 3
typedef struct
{
    MS_PHY u32Addr;
    MS_U32 u32Size;

} VDEC_EX_TEE_ProtectBufferInfo;


typedef struct
{
    MS_PHY u32VPUStartAddr;
    MS_U32 u32VPUCodeSize;
    MS_PHY u32FrameBuffertartAddrMain;
    MS_U32 u32FrameBufferSizeMain;
    MS_PHY u32BitstreamStartAddrMain;
    MS_U32 u32BitstreamSizeMain;
    MS_PHY u32FrameBuffertartAddrSub;
    MS_U32 u32FrameBufferSizeSub;
    MS_PHY u32BitstreamStartAddrSub;
    MS_U32 u32BitstreamSizeSub;

    MS_PHY u32VPUSHMAddr;
    MS_U32 u32VPUSHMSize;
    MS_PHY u32MIU1StartAddr;

    MS_U32 u32ProtectNum;
    VDEC_EX_TEE_ProtectBufferInfo ProtectInfo[PROTECTBUFFER_MAX_NUM];
} VDEC_EX_TEE_VPU_Param;

typedef struct
{
   MS_U32 ID[4];
}VDEC_EX_RESOURCE;

typedef enum
{

    E_VDEC_EX_SET_VPU_SETTING,

    E_VDEC_EX_GET_VPU_PROTECT_START_ADDR,

    E_VDEC_EX_SET_VPU_LOADCODE,

    E_VDEC_EX_SET_SECURE_BUFFER,

    E_VDEC_EX_SET_SECURE_FB2,
} VDEC_EX_TEE_USER_CMD;

typedef enum
{
    E_VDEC_VPU,

    E_VDEC_BS,

    E_VDEC_FB,

    E_VDEC_FB2,
} VDEC_EX_OPTEE_Buffer;
# 3645 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_BOOL MApi_VDEC_EX_TEE_GetControl(VDEC_EX_TEE_USER_CMD cmd,void* param);
# 3655 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_BOOL MApi_VDEC_EX_TEE_SetControl(VDEC_EX_TEE_USER_CMD cmd,void* param);
# 3665 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_U32 MApi_VDEC_EX_TEE_AllocateESBufHandle(MS_U64 u64PipeID, MS_U32 u32ReqSize, MS_U32 *pu32EsHandle);
# 3676 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_U32 MApi_VDEC_EX_TEE_GetESBufByHandle(MS_U64 u64PipeID, MS_U32 u32EsHandle, MS_PHY *pPhyAddr);






MS_BOOL MApi_VDEC_EX_Create_Tee_System(void);
#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500)
# 3693 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_U32 MDrv_VDEC_GetResourceByPipeNNum(MS_U64 u64PipeID, VDEC_EX_OPTEE_Buffer ResEnum, VDEC_EX_RESOURCE* pResouce);
# 3702 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_U32 MDrv_VDEC_GetResourceByPipeID(MS_U64 u64PipeID, MS_U32* U32MaxNRetResNum, VDEC_EX_RESOURCE* pResouce);
# 3711 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_U32 MDrv_VDEC_ConfigPipe(MS_U64 u64PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);
# 3720 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX.h"
MS_U32 MDrv_VDEC_CheckPipe(MS_U64 u64PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);
#endif



#endif

#ifdef __cplusplus
}
#endif


#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX_v2.h"
#ifndef _VDEC_EX_V2_H_
#define _VDEC_EX_V2_H_ 

#if (!defined(MSOS_TYPE_NUTTX) && !defined(MSOS_TYPE_OPTEE)) || defined(SUPPORT_X_MODEL_FEATURE)
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"






#define MSIF_VDEC_EX_V2_LIB_CODE {'V','E','X','2'}
#define MSIF_VDEC_EX_V2_LIBVER {'0','5'}
#define MSIF_VDEC_EX_V2_BUILDNUM {'0','3'}
#define MSIF_VDEC_EX_V2_CHANGELIST {'0','0','6','9','3','0','7','7'}


#define VDEC_EX_V2_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_VDEC_EX_V2_LIB_CODE, \
    MSIF_VDEC_EX_V2_LIBVER, \
    MSIF_VDEC_EX_V2_BUILDNUM, \
    MSIF_VDEC_EX_V2_CHANGELIST, \
    MSIF_OS

#define VDEC_EX_V2_DEFAULT_DBG_MSG_LEVEL E_VDEC_EX_DBG_LEVEL_DBG
#define VDEC_EX_V2_RVD_BROKEN_BY_US 0x80000000
#define VDEC_EX_V2_MVD_PIC_START_FLAG 0x40000000

#define VDEC_EX_V2_BIT(_bit_) (1 << (_bit_))

#define VDEC_EX_V2_FPA_TYPE_CHECKERBOARD_INTERLEAVING 0
#define VDEC_EX_V2_FPA_TYPE_COLUMN_INTERLEAVEING 1
#define VDEC_EX_V2_FPA_TYPE_ROW_INTERLEAVEING 2
#define VDEC_EX_V2_FPA_TYPE_SIDE_BY_SIDE_PACKING 3
#define VDEC_EX_V2_FPA_TYPE_TOP_BOTTOM_PACKING 4
#define VDEC_EX_V2_FPA_TYPE_TEMPORAL_INTERLEAVING_FRM 5
#define VDEC_EX_V2_MAX_DEC_NUM 2

#define VDEC_CAP_DYNAMIC_CMA 
#define VDEC_CAP_DISABLE_HEVC_10BITS 

#ifndef VDEC_CAP_SYSTEM_PREGET_FB_MEM_USAGE_SIZE
#define VDEC_CAP_SYSTEM_PREGET_FB_MEM_USAGE_SIZE 
#endif







typedef enum
{
    E_VDEC_EX_V2_MAIN_STREAM = 0,
    E_VDEC_EX_V2_SUB_STREAM,
} VDEC_EX_V2_Stream;


typedef enum
{

    E_VDEC_E_V2_EVENT_OFF = 0x00,

    E_VDEC_EX_V2_EVENT_DISP_ONE = VDEC_EX_V2_BIT(0),

    E_VDEC_EX_V2_EVENT_DISP_REPEAT = VDEC_EX_V2_BIT(1),

    E_VDEC_EX_V2_EVENT_DISP_WITH_CC = VDEC_EX_V2_BIT(2),

    E_VDEC_EX_V2_EVENT_DEC_ONE = VDEC_EX_V2_BIT(3),

    E_VDEC_EX_V2_EVENT_DEC_I = VDEC_EX_V2_BIT(4),

    E_VDEC_EX_V2_EVENT_DEC_ERR = VDEC_EX_V2_BIT(5),

    E_VDEC_EX_V2_EVENT_DISP_INFO_CHG = VDEC_EX_V2_BIT(6),

    E_VDEC_EX_V2_EVENT_USER_DATA_FOUND = VDEC_EX_V2_BIT(7),

    E_VDEC_EX_V2_EVENT_DISP_INFO_RDY = VDEC_EX_V2_BIT(8),

    E_VDEC_EX_V2_EVENT_FIRST_FRAME = VDEC_EX_V2_BIT(9),

    E_VDEC_EX_V2_EVENT_PIC_FOUND = VDEC_EX_V2_BIT(10),

    E_VDEC_EX_V2_EVENT_VIDEO_UNMUTE = VDEC_EX_V2_BIT(11),

    E_VDEC_EX_V2_EVENT_SEQ_HDR_FOUND = VDEC_EX_V2_BIT(12),

    E_VDEC_EX_V2_EVENT_AFD_FOUND = VDEC_EX_V2_BIT(13),

    E_VDEC_EX_V2_EVENT_ES_DATA_ERR = VDEC_EX_V2_BIT(14),

} VDEC_EX_V2_EventFlag;


typedef enum
{
    E_VDEC_EX_V2_CB_MAIN = 0,
    E_VDEC_EX_V2_CB_SUB,
} VDEC_EX_V2_CB_TYPE;


typedef enum
{

    E_VDEC_EX_V2_CODEC_TYPE_NONE = 0,

    E_VDEC_EX_V2_CODEC_TYPE_MPEG2,

    E_VDEC_EX_V2_CODEC_TYPE_H263,

    E_VDEC_EX_V2_CODEC_TYPE_MPEG4,

    E_VDEC_EX_V2_CODEC_TYPE_DIVX311,

    E_VDEC_EX_V2_CODEC_TYPE_DIVX412,

    E_VDEC_EX_V2_CODEC_TYPE_FLV,

    E_VDEC_EX_V2_CODEC_TYPE_VC1_ADV,

    E_VDEC_EX_V2_CODEC_TYPE_VC1_MAIN,

    E_VDEC_EX_V2_CODEC_TYPE_RV8,

    E_VDEC_EX_V2_CODEC_TYPE_RV9,

    E_VDEC_EX_V2_CODEC_TYPE_H264,

    E_VDEC_EX_V2_CODEC_TYPE_AVS,

    E_VDEC_EX_V2_CODEC_TYPE_MJPEG,

    E_VDEC_EX_V2_CODEC_TYPE_MVC,

    E_VDEC_EX_V2_CODEC_TYPE_VP8,
    E_VDEC_EX_V2_CODEC_TYPE_NUM
} VDEC_EX_V2_CodecType;


typedef enum
{

    E_VDEC_EX_V2_SRC_MODE_DTV = 0,

    E_VDEC_EX_V2_SRC_MODE_TS_FILE,

    E_VDEC_EX_V2_SRC_MODE_FILE,

    E_VDEC_EX_V2_SRC_MODE_TS_FILE_DUAL_ES,

    E_VDEC_EX_V2_SRC_MODE_FILE_DUAL_ES,
} VDEC_EX_V2_SrcMode;


typedef enum
{

    E_VDEC_EX_V2_FAIL = 0,

    E_VDEC_EX_V2_OK,

    E_VDEC_EX_V2_RET_INVALID_PARAM,

    E_VDEC_EX_V2_RET_ILLEGAL_ACCESS,

    E_VDEC_EX_V2_RET_HARDWARE_BREAKDOWN,

    E_VDEC_EX_V2_RET_UNSUPPORTED,

    E_VDEC_EX_V2_RET_TIMEOUT,

    E_VDEC_EX_V2_RET_NOT_READY,

    E_VDEC_EX_V2_RET_NOT_INIT,

    E_VDEC_EX_V2_RET_NOT_EXIT,

    E_VDEC_EX_V2_RET_NOT_RUNNING,

    E_VDEC_EX_V2_RET_CMA_ERROR,

    E_VDEC_EX_V2_RET_NUM,
} VDEC_EX_V2_Result;


typedef enum
{

    E_VDEC_EX_V2_DISP_ACTION_DISPLAY = 1,

    E_VDEC_EX_V2_DISP_ACTION_RELEASE,
} VDEC_EX_V2_DispCmdAction;


typedef enum
{

    E_VDEC_EX_V2_FREEZE_AT_CUR_PIC = 1,

    E_VDEC_EX_V2_FREEZE_AT_LAST_PIC,
} VDEC_EX_V2_FreezePicSelect;


typedef enum
{
    E_VDEC_EX_V2_ERR_CODE_BASE = 0x01000000,
    E_VDEC_EX_V2_ERR_CODE_NOT_SUPPORT,
    E_VDEC_EX_V2_ERR_CODE_ILLEGAL_ACCESS,
    E_VDEC_EX_V2_ERR_CODE_FRMRATE_NOT_SUPPORT,
    E_VDEC_EX_V2_ERR_CODE_DIVX_PLUS_UNSUPPORTED,
    E_VDEC_EX_V2_ERR_CODE_EXCEED_HW_CAP,

    E_VDEC_EX_V2_MVD_ERR_CODE_BASE = 0x02000000,
        E_VDEC_EX_V2_MVD_ERR_CODE_SHAPE,
        E_VDEC_EX_V2_MVD_ERR_CODE_USED_SPRITE,
        E_VDEC_EX_V2_MVD_ERR_CODE_NOT_8_BIT,
        E_VDEC_EX_V2_MVD_ERR_CODE_NERPRED_ENABLE,
        E_VDEC_EX_V2_MVD_ERR_CODE_REDUCED_RES_ENABLE,
        E_VDEC_EX_V2_MVD_ERR_CODE_SCALABILITY,
        E_VDEC_EX_V2_MVD_ERR_CODE_OTHER,
        E_VDEC_EX_V2_MVD_ERR_CODE_H263_ERROR,
        E_VDEC_EX_V2_MVD_ERR_CODE_RES_NOT_SUPPORT,
        E_VDEC_EX_V2_MVD_ERR_CODE_MPEG4_NOT_SUPPORT,
        E_VDEC_EX_V2_MVD_ERR_CODE_VC1_NOT_SUPPORT,
        E_VDEC_EX_V2_MVD_ERR_CODE_RCV_ERROR_OCCUR,

    E_VDEC_EX_V2_HVD_ERR_CODE_BASE = 0x03000000,
        E_VDEC_EX_V2_HVD_ERR_CODE_GENERAL_BASE = (0x0000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_V2_HVD_ERR_CODE_OUT_OF_SPEC ,
        E_VDEC_EX_V2_HVD_ERR_CODE_UNKNOW_ERR,
        E_VDEC_EX_V2_HVD_ERR_CODE_HW_BREAK_DOWN,
        E_VDEC_EX_V2_HVD_ERR_CODE_HW_DEC_TIMEOUT,
        E_VDEC_EX_V2_HVD_ERR_CODE_OUT_OF_MEMORY,
        E_VDEC_EX_V2_HVD_ERR_CODE_UNKNOWN_CODEC,

        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_BASE = (0x1000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_SPS_BROKEN,
        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_SPS_NOT_IN_SPEC,
        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_SPS_NOT_ENOUGH_FRM,
        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_PPS_BROKEN,
        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_REF_LIST,
        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_NO_REF,
        E_VDEC_EX_V2_HVD_ERR_CODE_AVC_RES,

        E_VDEC_EX_V2_HVD_ERR_CODE_AVS_BASE = (0x2000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_V2_HVD_ERR_CODE_AVS_RES,

        E_VDEC_EX_V2_HVD_ERR_CODE_RM_BASE = (0x3000|E_VDEC_EX_HVD_ERR_CODE_BASE),
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_PACKET_HEADER,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_FRAME_HEADER,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_SLICE_HEADER,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_BYTE_CNT,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_DISP_TIMEOUT,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_NO_REF,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_RES,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_VLC,
        E_VDEC_EX_V2_HVD_ERR_CODE_RM_SIZE_OUT_FB_LAYOUT,

    E_VDEC_EX_V2_RVD_ERR_CODE_BASE = 0x04000000,
        E_VDEC_EX_V2_RVD_ERR_CODE_PACKET_HEADER,
        E_VDEC_EX_V2_RVD_ERR_CODE_FRAME_HEADER,
        E_VDEC_EX_V2_RVD_ERR_CODE_SLICE_HEADER,
        E_VDEC_EX_V2_RVD_ERR_CODE_DECODE_TIMEOUT,
        E_VDEC_EX_V2_RVD_ERR_CODE_OUT_OF_MEMORY,
        E_VDEC_EX_V2_RVD_ERR_CODE_BYTE_POS,
        E_VDEC_EX_V2_RVD_ERR_CODE_DISPLAY_TIMEOUT,

    E_VDEC_EX_V2_MJPEG_ERR_CODE_BASE = 0x05000000,
        E_VDEC_EX_V2_HVD_ERR_CODE_MJPEG_RES,
} VDEC_EX_V2_ErrCode;


typedef enum
{

    E_VDEC_EX_V2_FRC_NORMAL = 0,

    E_VDEC_EX_V2_FRC_DISP_TWICE,

    E_VDEC_EX_V2_FRC_3_2_PULLDOWN,

    E_VDEC_EX_V2_FRC_PAL_TO_NTSC,

    E_VDEC_EX_V2_FRC_NTSC_TO_PAL,

    E_VDEC_EX_V2_FRC_MODE_50P_60P,

    E_VDEC_EX_V2_FRC_MODE_60P_50P,
} VDEC_EX_V2_FrcMode;


typedef enum
{

    E_VDEC_EX_V2_TRICK_DEC_ALL = 0,

    E_VDEC_EX_V2_TRICK_DEC_IP,

    E_VDEC_EX_V2_TRICK_DEC_I,
    E_VDEC_EX_V2_TRICK_DEC_NUM
} VDEC_EX_V2_TrickDec;


typedef enum
{

    E_VDEC_EX_V2_SPEED_DEFAULT = 0,

    E_VDEC_EX_V2_SPEED_FAST,

    E_VDEC_EX_V2_SPEED_SLOW,
} VDEC_EX_V2_SpeedType;


typedef enum
{

    E_VDEC_EX_V2_DISP_SPEED_1X = 1,

    E_VDEC_EX_V2_DISP_SPEED_2X = 2,

    E_VDEC_EX_V2_DISP_SPEED_4X = 4,

    E_VDEC_EX_V2_DISP_SPEED_8X = 8,

    E_VDEC_EX_V2_DISP_SPEED_16X = 16,

    E_VDEC_EX_V2_DISP_SPEED_32X = 32,
} VDEC_EX_V2_DispSpeed;


typedef enum
{

    E_VDEC_EX_V2_MJPEG_SCALE_1to1 = 0,

    E_VDEC_EX_V2_MJPEG_SCALE_2to1,

    E_VDEC_EX_V2_MJPEG_SCALE_4to1,

    E_VDEC_EX_V2_MJPEG_SCALE_8to1,
} VDEC_EX_V2_MJpegScaleFactor;


typedef enum
{

    E_VDEC_EX_V2_TIME_STAMP_NONE = 0,

    E_VDEC_EX_V2_TIME_STAMP_PTS,

    E_VDEC_EX_V2_TIME_STAMP_DTS,

    E_VDEC_EX_V2_TIME_STAMP_STS,
} VDEC_EX_V2_TimeStampType;


typedef enum
{

    E_VDEC_EX_V2_DBG_LEVEL_NONE = 0,

    E_VDEC_EX_V2_DBG_LEVEL_ERR,

    E_VDEC_EX_V2_DBG_LEVEL_INFO,

    E_VDEC_EX_V2_DBG_LEVEL_DBG,

    E_VDEC_EX_V2_DBG_LEVEL_TRACE,

    E_VDEC_EX_V2_DBG_LEVEL_FW,
} VDEC_EX_V2_DbgLevel;


typedef enum
{
    E_VDEC_EX_V2_FW_SOURCE_NONE,
    E_VDEC_EX_V2_FW_SOURCE_DRAM,
    E_VDEC_EX_V2_FW_SOURCE_FLASH,
}VDEC_EX_V2_FWSourceType;


typedef enum
{
    E_VDEC_EX_V2_CC_NONE = 0x00,
    E_VDEC_EX_V2_CC_608 = 0x01,
    E_VDEC_EX_V2_CC_708 = 0x02,
    E_VDEC_EX_V2_CC_UNPACKED = 0x03,
} VDEC_EX_V2_CCFormat;


typedef enum
{
    E_VDEC_EX_V2_CC_TYPE_NONE = 0,
    E_VDEC_EX_V2_CC_TYPE_NTSC_FIELD1 = 1,
    E_VDEC_EX_V2_CC_TYPE_NTSC_FIELD2 = 2,
    E_VDEC_EX_V2_CC_TYPE_DTVCC = 3,
    E_VDEC_EX_V2_CC_TYPE_NTSC_TWOFIELD = 4,
} VDEC_EX_V2_CCType;

typedef enum
{
    E_VDEC_EX_V2_CC_GET_BUFF_START = 0x1,
    E_VDEC_EX_V2_CC_GET_BUFF_SIZE,
    E_VDEC_EX_V2_CC_GET_708_ENABLE
} VDEC_EX_V2_CCInfoCmd;

typedef enum
{
    E_VDEC_EX_V2_STAGE_STOP = 0,
    E_VDEC_EX_V2_STAGE_INIT,
    E_VDEC_EX_V2_STAGE_PLAY,
    E_VDEC_EX_V2_STAGE_PAUSE,
} VDEC_EX_V2_Stage;

typedef enum
{

    E_VDEC_EX_V2_PATTERN_FLUSH = 0,

    E_VDEC_EX_V2_PATTERN_FILEEND,
}VDEC_EX_V2_PatternType;

typedef struct
{
    MS_BOOL bInit;
    MS_BOOL bIdle;
    VDEC_EX_V2_Stage eStage;
} VDEC_EX_V2_Status;

typedef struct
{
    MS_U32 u32Tmp;
} VDEC_EX_V2_Info;

typedef enum
{
    E_VDEC_EX_V2_FRM_TYPE_I = 0,
    E_VDEC_EX_V2_FRM_TYPE_P,
    E_VDEC_EX_V2_FRM_TYPE_B,
    E_VDEC_EX_V2_FRM_TYPE_OTHER,
    E_VDEC_EX_V2_FRM_TYPE_NUM
} VDEC_EX_V2_FrameType;

typedef enum
{

    E_VDEC_EX_V2_FIELDTYPE_NONE,

    E_VDEC_EX_V2_FIELDTYPE_TOP,

    E_VDEC_EX_V2_FIELDTYPE_BOTTOM,

    E_VDEC_EX_V2_FIELDTYPE_BOTH,
    E_VDEC_EX_V2_FIELDTYPE_NUM
} VDEC_EX_V2_FieldType;

typedef enum
{
    E_VDEC_EX_V2_PATTERN_BEFORE_FRM = 0,
    E_VDEC_EX_V2_PATTERN_AFTER_FRM,
    E_VDEC_EX_V2_PATTERN_SKIP_DATA,
} VDEC_EX_V2_PatchPattern;

typedef enum
{
    E_VDEC_EX_V2_PIC_STRUCTURE_RSV = 0,
    E_VDEC_EX_V2_PIC_STRUCTURE_TOP,
    E_VDEC_EX_V2_PIC_STRUCTURE_BOT,
    E_VDEC_EX_V2_PIC_STRCUTURE_FRM,
} VDEC_EX_V2_PicStructure;


typedef enum
{
    VDEC_EX_V2_FB_REDUCTION_NONE = 0,
    VDEC_EX_V2_FB_REDUCTION_1_2,
    VDEC_EX_V2_FB_REDUCTION_1_4
} VDEC_EX_V2_FBReductionType;


typedef enum
{
    E_VDEC_EX_V2_DBG_MODE_BYPASS_INSERT_START_CODE = 0,
    E_VDEC_EX_V2_DBG_MODE_BYPASS_DIVX_MC_PATCH,
    E_VDEC_EX_V2_DBG_MODE_NUM
} VDEC_EX_V2_DbgMode;


typedef enum
{
    E_VDEC_EX_V2_CLOCK_SPEED_NONE = 0,
    E_VDEC_EX_V2_CLOCK_SPEED_HIGHEST,
    E_VDEC_EX_V2_CLOCK_SPEED_HIGH,
    E_VDEC_EX_V2_CLOCK_SPEED_MEDIUM,
    E_VDEC_EX_V2_CLOCK_SPEED_LOW,
    E_VDEC_EX_V2_CLOCK_SPEED_LOWEST,
    E_VDEC_EX_V2_CLOCK_SPEED_DEFAULT,
} VDEC_EX_V2_ClockSpeed;


typedef enum
{
    E_VDEC_EX_V2_FW_TYPE_MVD = 0,
    E_VDEC_EX_V2_FW_TYPE_HVD,
} VDEC_EX_V2_FwType;


typedef enum
{
    E_VDEC_EX_V2_DEC_MODE_DUAL_INDIE = 0,
    E_VDEC_EX_V2_DEC_MODE_DUAL_3D,
    E_VDEC_EX_V2_DEC_MODE_SINGLE,
    E_VDEC_EX_V2_DEC_MODE_MVC = E_VDEC_EX_DEC_MODE_SINGLE,
} VDEC_EX_V2_DEC_MODE;



typedef enum
{

    E_VDEC_EX_V2_DEC_KR3D_MODE_BASE = 0x0000,
    E_VDEC_EX_V2_DEC_KR3D_INTERLACE_MODE = E_VDEC_EX_DEC_KR3D_MODE_BASE,
    E_VDEC_EX_V2_DEC_KR3D_FORCE_P_MODE,
    E_VDEC_EX_V2_DEC_KR3D_INTERLACE_TWO_PITCH,
    E_VDEC_EX_V2_DEC_KR3D_FORCE_P_TWO_PITCH,


    E_VDEC_EX_V2_DEC_PIP_MODE_BASE = 0x1000,
    E_VDEC_EX_V2_DEC_PIP_SYNC_INDIE = E_VDEC_EX_DEC_PIP_MODE_BASE,
    E_VDEC_EX_V2_DEC_PIP_SYNC_MAIN_STC,
    E_VDEC_EX_V2_DEC_PIP_SYNC_SWITCH
} VDEC_EX_V2_DEC_MODE_ARG;

typedef enum
{
    E_VDEC_EX_V2_DIU_DRAM = 0,
    E_VDEC_EX_V2_DIU_HVD = 1,
    E_VDEC_EX_V2_DIU_MVD = 2,
    E_VDEC_EX_V2_DIU_HVD_3DLR = 3,
    E_VDEC_EX_V2_DIU_MVD_3DLR = 4,
    E_VDEC_EX_V2_DIU_UNKNOWN = -1
} VDEC_EX_V2_DIU;

typedef enum
{
    E_VDEC_EX_V2_CMD_GET_FREE_STREAM_ID,
    E_VDEC_EX_V2_CMD_INIT,
    E_VDEC_EX_V2_CMD_SET_CONTROL,
    E_VDEC_EX_V2_CMD_GET_CONTROL,
    E_VDEC_EX_V2_CMD_PRE_SET_CONTROL,
    E_VDEC_EX_V2_CMD_POST_SET_CONTROL,
    E_VDEC_EX_V2_CMD_NUM,
    E_VDEC_EX_V2_CMD_MAX = E_VDEC_EX_V2_CMD_NUM,
} E_VDEC_EX_V2_IOCTL_CMD;


typedef enum
{

    E_VDEC_EX_V2_USER_CMD_SET_CONTROL_BASE = 0x0000,
    E_VDEC_EX_V2_USER_CMD_REPEAT_LAST_FIELD,
    E_VDEC_EX_V2_USER_CMD_AVSYNC_REPEAT_TH,
    E_VDEC_EX_V2_USER_CMD_DISP_ONE_FIELD,
    E_VDEC_EX_V2_USER_CMD_FD_MASK_DELAY_COUNT,
    E_VDEC_EX_V2_USER_CMD_FRC_OUTPUT,
    E_VDEC_EX_V2_USER_CMD_FRC_DROP_TYPE,
    E_VDEC_EX_V2_USER_CMD_FAST_DISPLAY,
    E_VDEC_EX_V2_USER_CMD_IGNORE_ERR_REF,
    E_VDEC_EX_V2_USER_CMD_FORCE_FOLLOW_DTV_SPEC,
    E_VDEC_EX_V2_USER_CMD_AVC_MIN_FRM_GAP,
    E_VDEC_EX_V2_USER_CMD_DISABLE_SEQ_CHG,
    E_VDEC_EX_V2_USER_CMD_SET_DISP_OUTSIDE_CTRL_MODE,
    E_VDEC_EX_V2_USER_CMD_SET_DTV_USER_DATA_MODE,
    E_VDEC_EX_V2_USER_CMD_SET_SINGLE_TASK_MODE,
    E_VDEC_EX_V2_USER_CMD_AVC_DISABLE_ANTI_VDEAD,
    E_VDEC_EX_V2_USER_CMD_DTV_RESET_MVD_PARSER,
    E_VDEC_EX_V2_USER_CMD_PVR_FLUSH_FRAME_BUFFER,
    E_VDEC_EX_V2_USER_CMD_FORCE_INTERLACE_MODE,
    E_VDEC_EX_V2_USER_CMD_RELEASE_FD_MASK,
    E_VDEC_EX_V2_USER_CMD_NULL,
    E_VDEC_EX_V2_USER_CMD_SUPPORT_AVC_TO_MVC,
    E_VDEC_EX_V2_USER_CMD_3DLR_VIEW_EXCHANGE,
    E_VDEC_EX_V2_USER_CMD_SET_VSIZE_ALIGN,
    E_VDEC_EX_V2_USER_CMD_SHOW_DECODE_ORDER,
    E_VDEC_EX_V2_USER_CMD_AVC_DISP_IGNORE_CROP,
    E_VDEC_EX_V2_USER_CMD_SET_DISP_FINISH_MODE,
    E_VDEC_EX_V2_USER_CMD_SET_AVSYNC_MODE,
    E_VDEC_EX_V2_USER_CMD_SUSPEND_DYNAMIC_SCALE,
    E_VDEC_EX_V2_USER_CMD_FORCE_AUTO_MUTE,
    E_VDEC_EX_V2_USER_CMD_AVC_NEW_SLOW_MOTION,
    E_VDEC_EX_V2_USER_CMD_PUSH_DISPQ_WITH_REF_NUM,
    E_VDEC_EX_V2_USER_CMD_DS_RESV_N_BUFFER,
    E_VDEC_EX_V2_USER_CMD_RM_ENABLE_PTS_TBL,
    E_VDEC_EX_V2_USER_CMD_FLUSH_PTS_BUF,
    E_VDEC_EX_V2_USER_CMD_SET_IDCT_MODE,
    E_VDEC_EX_V2_USER_CMD_DROP_ERR_FRAME,
    E_VDEC_EX_V2_USER_CMD_SET_CC608_INFO_ENHANCE_MODE,
    E_VDEC_EX_V2_USER_CMD_IGNORE_PIC_OVERRUN,
    E_VDEC_EX_V2_USER_CMD_SET_SELF_SEQCHANGE,
    E_VDEC_EX_V2_USER_CMD_AUTO_EXHAUST_ES_MODE,
    E_VDEC_EX_V2_USER_CMD_CTL_SPEED_IN_DISP_ONLY,
    E_VDEC_EX_V2_USER_CMD_AVC_SUPPORT_REF_NUM_OVER_MAX_DPB_SIZE,
    E_VDEC_EX_V2_USER_CMD_RETURN_INVALID_AFD,
    E_VDEC_EX_V2_USER_CMD_FIELD_POLARITY_DISPLAY_ONE_FIELD,
    E_VDEC_EX_V2_USER_CMD_AVC_FORCE_BROKEN_BY_US,
    E_VDEC_EX_V2_USER_CMD_SHOW_FIRST_FRAME_DIRECT,
    E_VDEC_EX_V2_USER_CMD_AVC_RESIZE_DOS_DISP_PEND_BUF,
    E_VDEC_EX_V2_USER_CMD_SET_XC_LOW_DELAY_PARA,
    E_VDEC_EX_V2_USER_CMD_SET_SECURE_MODE,
    E_VDEC_EX_V2_USER_CMD_RVU_SETTING_MODE,
    E_VDEC_EX_V2_USER_CMD_FRAMERATE_HANDLING,
    E_VDEC_EX_V2_USER_CMD_DUAL_NON_BLOCK_MODE,
    E_VDEC_EX_V2_USER_CMD_IGNORE_PIC_STRUCT_DISPLAY,
    E_VDEC_EX_V2_USER_CMD_INPUT_PTS_FREERUN_MODE,
    E_VDEC_EX_V2_USER_CMD_ERR_CONCEAL_SLICE_1ST_MB,
    E_VDEC_EX_V2_USER_CMD_SET_EXTERNAL_DS_BUFFER,
    E_VDEC_EX_V2_USER_CMD_SET_MIN_TSP_DATA_SIZE,
    E_VDEC_EX_V2_USER_CMD_SET_DMX_FRAMERATE,
    E_VDEC_EX_V2_USER_CMD_SET_DMX_FRAMERATEBASE,
    E_VDEC_EX_V2_USER_CMD_ENABLE_CC_608_EXTERNAL_BUFFER,
    E_VDEC_EX_V2_USER_CMD_ENABLE_CC_708_EXTERNAL_BUFFER,
    E_VDEC_EX_V2_USER_CMD_SET_TIME_INC_PREDICT_PARA,
    E_VDEC_EX_V2_USER_CMD_ENABLE_DECODE_ENGINE_TIMEOUT,
    E_VDEC_EX_V2_USER_CMD_AUTO_FREE_ES,
    E_VDEC_EX_V2_USER_CMD_FRAMEBUFFER_AUTO_MODE,
    E_VDEC_EX_V2_USER_CMD_SET_SMOOTH_REWIND,
    E_VDEC_EX_V2_USER_CMD_SET_ERROR_TOLERANCE,
    E_VDEC_EX_V2_USER_CMD_AUTO_DROP_DISPLAY_QUEUE,
    E_VDEC_EX_V2_USER_CMD_USE_CPB_REMOVAL_DEALY,
    E_VDEC_EX_V2_USER_CMD_SKIP_N_FRAME,
    E_VDEC_EX_V2_USER_CMD_SET_PTS_US_MODE,
    E_VDEC_EX_V2_USER_CMD_AUTO_INSERT_DUMMY_DATA,
    E_VDEC_EX_V2_USER_CMD_DROP_ONE_PTS,
    E_VDEC_EX_V2_USER_CMD_PVR_TIMESHIFT_SEAMLESS_MODE,
    E_VDEC_EX_V2_USER_CMD_AUTO_REDUCE_ES_DATA,
    E_VDEC_EX_V2_USER_CMD_RM_FORCE_MCU_MODE_ES,
    E_VDEC_EX_V2_USER_CMD_FORCE_PROGRESSIVE_MODE,
    E_VDEC_EX_V2_USER_CMD_SET_FRAMEBUFF2,
    E_VDEC_EX_V2_USER_CMD_SET_TRICKPLAY_2X_MODE,
    E_VDEC_EX_V2_USER_CMD_FRC_ONLY_SHOW_TOP_FIELD,
    E_VDEC_EX_V2_USER_CMD_DIRECT_STC_MODE,
    E_VDEC_EX_V2_USER_CMD_ENABLE_PTS_DECTECTOR,
    E_VDEC_EX_V2_USER_CMD_DISABLE_ES_FULL_STOP,
    E_VDEC_EX_V2_USER_CMD_SET_DV_XC_SHM_ADDR,
    E_VDEC_EX_V2_USER_CMD_SET_ENABLE_HDR,
#ifdef VDEC_CAP_DV_OTT_API
    E_VDEC_EX_V2_USER_CMD_SET_DV_INFO,
#endif
    E_VDEC_EX_V2_USER_CMD_DISABLE_PBFRAME_MODE,



    E_VDEC_EX_V2_USER_CMD_EXIT,
    E_VDEC_EX_V2_USER_CMD_RST,
    E_VDEC_EX_V2_USER_CMD_CHECK_DISPINFO_READY,
    E_VDEC_EX_V2_USER_CMD_SET_FRC_MODE,
    E_VDEC_EX_V2_USER_CMD_SET_DYNSCALING_PARAMS,
    E_VDEC_EX_V2_USER_CMD_SET_DBG_LEVEL,
    E_VDEC_EX_V2_USER_CMD_PLAY,
    E_VDEC_EX_V2_USER_CMD_PAUSE,
    E_VDEC_EX_V2_USER_CMD_RESUME,
    E_VDEC_EX_V2_USER_CMD_STEP_DISP,
    E_VDEC_EX_V2_USER_CMD_STEP_DECODE,
    E_VDEC_EX_V2_USER_CMD_SET_TRICK_MODE,
    E_VDEC_EX_V2_USER_CMD_PUSH_DECQ,
    E_VDEC_EX_V2_USER_CMD_FLUSH,
    E_VDEC_EX_V2_USER_CMD_ENABLE_LAST_FRAME_SHOW,
    E_VDEC_EX_V2_USER_CMD_SET_SPEED,
    E_VDEC_EX_V2_USER_CMD_SET_FREEZE_DISP,
    E_VDEC_EX_V2_USER_CMD_SET_BLUE_SCREEN,
    E_VDEC_EX_V2_USER_CMD_RESET_PTS,
    E_VDEC_EX_V2_USER_CMD_AVSYNC_ON,
    E_VDEC_EX_V2_USER_CMD_AVSYNC_FREERUN_THRESHOLD,
    E_VDEC_EX_V2_USER_CMD_SET_EVENT_MULTICALLBACK,
    E_VDEC_EX_V2_USER_CMD_UNSET_EVENT_MULTICALLBACK,
    E_VDEC_EX_V2_USER_CMD_FIRE_DEC,
    E_VDEC_EX_V2_USER_CMD_SEEK_TO_PTS,
    E_VDEC_EX_V2_USER_CMD_SKIP_TO_PTS,
    E_VDEC_EX_V2_USER_CMD_DISABLE_DEBLOCKING,
    E_VDEC_EX_V2_USER_CMD_DISABLE_QUARTER_PIXEL,
    E_VDEC_EX_V2_USER_CMD_SET_AUTO_RM_LST_ZERO_BYTE,
    E_VDEC_EX_V2_USER_CMD_SET_BALANCE_BW,
    E_VDEC_EX_V2_USER_CMD_GEN_PATTERN,
    E_VDEC_EX_V2_USER_CMD_MHEG_DECODE_IFRAME,
    E_VDEC_EX_V2_USER_CMD_MHEG_RST_IFRAME_DEC,
    E_VDEC_EX_V2_USER_CMD_CC_START_PARSING,
    E_VDEC_EX_V2_USER_CMD_CC_STOP_PARSING,
    E_VDEC_EX_V2_USER_CMD_CC_UPDATE_READ_PTR,
    E_VDEC_EX_V2_USER_CMD_SET_BLOCK_DISPLAY,
    E_VDEC_EX_V2_USER_CMD_ENABLE_ES_BUFF_MALLOC,
    E_VDEC_EX_V2_USER_CMD_DISPLAY_FRAME,
    E_VDEC_EX_V2_USER_CMD_RELEASE_FRAME,
    E_VDEC_EX_V2_USER_CMD_CAPTURE_FRAME,
    E_VDEC_EX_V2_USER_CMD_CC_INIT,
    E_VDEC_EX_V2_USER_CMD_CC_SET_CFG,
    E_VDEC_EX_V2_USER_CMD_CC_SET_BUFF_START_ADDR,
    E_VDEC_EX_V2_USER_CMD_CC_UPDATE_WRITE_ADDR,
    E_VDEC_EX_V2_USER_CMD_CC_UPDATE_READ_ADDR,
    E_VDEC_EX_V2_USER_CMD_CC_DISABLE_PARSING,
    E_VDEC_EX_V2_USER_CMD_SET_SLOW_SYNC,
    E_VDEC_EX_V2_USER_CMD_SET_DYNAMIC_DISP_PATH,
    E_VDEC_EX_V2_USER_CMD_SET_AVSYNC_DISP_AUTO_DROP,
    E_VDEC_EX_V2_USER_CMD_ENABLE_QOS_INFO,
    E_VDEC_EX_V2_USER_CMD_SET_CODEC_CONFIG,
    E_VDEC_EX_V2_USER_CMD_SET_VP94K2KCHECK,
    E_VDEC_EX_V2_USER_CMD_ADJUST_DECODER_FREQUENCY,
    E_VDEC_EX_V2_USER_CMD_PUSI_CONTROL,

    E_VDEC_EX_V2_USER_CMD_MVC_SET_CMD_BASE = 0x0800,
    E_VDEC_EX_V2_USER_CMD_MVC_BBU2_PUSH_PACKET,
    E_VDEC_EX_V2_USER_CMD_MVC_BBU2_FIRE_DECCMD,

    E_VDEC_EX_V2_USER_CMD_UT_SET_CMD_BASE = 0x0900,
    E_VDEC_EX_V2_USER_CMD_UT_SET_DBG_MODE,
    E_VDEC_EX_V2_USER_CMD_UT_CLR_DBG_MODE,

    E_VDEC_EX_V2_USER_CMD_SET_MBX_PARAM,

    E_VDEC_EX_V2_USER_CMD_GET_CONTROL_BASE = 0x1000,
    E_VDEC_EX_V2_USER_CMD_GET_CHROMA_TYPE,
    E_VDEC_EX_V2_USER_CMD_GET_REAL_FRAMERATE,
    E_VDEC_EX_V2_USER_CMD_GET_COLOR_MATRIX,
    E_VDEC_EX_V2_USER_CMD_GET_MAIN_STREAM_ID,
    E_VDEC_EX_V2_USER_CMD_GET_SUB_STREAM_ID,
    E_VDEC_EX_V2_USER_CMD_GET_DYNSCALE_ENABLED,
    E_VDEC_EX_V2_USER_CMD_GET_FPA_SEI,
    E_VDEC_EX_V2_USER_CMD_GET_U64PTS,
    E_VDEC_EX_V2_USER_CMD_GET_ORI_INTERLACE_MODE,
    E_VDEC_EX_V2_USER_CMD_GET_MBS_ONLY_FLAG,
    E_VDEC_EX_V2_USER_CMD_GET_CRC_VALUE,
    E_VDEC_EX_V2_USER_CMD_GET_BBU_Q_NUM,
    E_VDEC_EX_V2_USER_CMD_GET_DISP_FRAME_NUM,
    E_VDEC_EX_V2_USER_CMD_GET_FPA_SEI_EX,
    E_VDEC_EX_V2_USER_CMD_GET_ES_BUFFER_STATUS,
    E_VDEC_EX_V2_USER_CMD_GET_CODEC_TYPE,
    E_VDEC_EX_V2_USER_CMD_GET_SHAREMEMORY_BASE,
    E_VDEC_EX_V2_USER_CMD_GET_IS_LEAST_DISPQ_SIZE_FLAG,
    E_VDEC_EX_V2_USER_CMD_GET_FIELD_PIC_FLAG,
    E_VDEC_EX_V2_USER_CMD_GET_SUPPORT_2ND_MVOP_INTERFACE,
    E_VDEC_EX_V2_USER_CMD_GET_FB_USAGE_MEM,
    E_VDEC_EX_V2_USER_CMD_GET_XC_LOW_DELAY_INT_STATE,
    E_VDEC_EX_V2_USER_CMD_GET_VSYNC_BRIDGE_ADDR,
    E_VDEC_EX_V2_USER_CMD_GET_FRAME_INFO_EX,
    E_VDEC_EX_V2_USER_CMD_GET_FLUSH_PATTEN_ENTRY_NUM,
    E_VDEC_EX_V2_USER_CMD_GET_DS_BUF_MIU_SEL,
    E_VDEC_EX_V2_USER_CMD_GET_FW_STATUS_FLAG,
    E_VDEC_EX_V2_USER_CMD_GET_HW_MAX_PIXEL,
    E_VDEC_EX_V2_USER_CMD_GET_FLOW_CONTROL_U64PTS_DIFF,
    E_VDEC_EX_V2_USER_CMD_GET_NEXT_DISP_FRAME_INFO_EXT,
    E_VDEC_EX_V2_USER_CMD_GET_VSYNC_BRIDGE_EXT_ADDR,
    E_VDEC_EX_V2_USER_CMD_GET_EVENT_FLAG,
    E_VDEC_EX_V2_USER_CMD_GET_STATUS,
    E_VDEC_EX_V2_USER_CMD_CHECK_DISPINFORDY,
    E_VDEC_EX_V2_USER_CMD_IS_STEP_DISP_DONE,
    E_VDEC_EX_V2_USER_CMD_IS_STEP_DECODE_DONE,
    E_VDEC_EX_V2_USER_CMD_GET_DISP_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_SRC_MODE,
    E_VDEC_EX_V2_USER_CMD_IS_AVSYNC_ON,
    E_VDEC_EX_V2_USER_CMD_IS_WITH_VALID_STREAM,
    E_VDEC_EX_V2_USER_CMD_IS_DISP_FINISH,
    E_VDEC_EX_V2_USER_CMD_IS_IFRAME_FOUND,
    E_VDEC_EX_V2_USER_CMD_IS_SEQ_CHG,
    E_VDEC_EX_V2_USER_CMD_IS_REACH_SYNC,
    E_VDEC_EX_V2_USER_CMD_IS_START_SYNC,
    E_VDEC_EX_V2_USER_CMD_IS_FREERUN,
    E_VDEC_EX_V2_USER_CMD_IS_WITH_LOW_DELAY,
    E_VDEC_EX_V2_USER_CMD_IS_ALL_BUFFER_EMPTY,
    E_VDEC_EX_V2_USER_CMD_GET_EXT_DISP_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_DEC_FRAME_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_DISP_FRAME_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_DEC_TIMECODE,
    E_VDEC_EX_V2_USER_CMD_GET_DISP_TIMECODE,
    E_VDEC_EX_V2_USER_CMD_GET_EVENT_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_ACTIVE_FORMAT,
    E_VDEC_EX_V2_USER_CMD_GET_COLOUR_PRIMARIES,
    E_VDEC_EX_V2_USER_CMD_GET_FW_VERSION,
    E_VDEC_EX_V2_USER_CMD_GET_GOP_CNT,
    E_VDEC_EX_V2_USER_CMD_GET_ES_WRITE_PTR,
    E_VDEC_EX_V2_USER_CMD_GET_ES_READ_PTR,
    E_VDEC_EX_V2_USER_CMD_GET_PTS,
    E_VDEC_EX_V2_USER_CMD_GET_NEXT_PTS,
    E_VDEC_EX_V2_USER_CMD_GET_VIDEO_PTS_STC_DELTA,
    E_VDEC_EX_V2_USER_CMD_GET_ERR_CODE,
    E_VDEC_EX_V2_USER_CMD_GET_ERR_CNT,
    E_VDEC_EX_V2_USER_CMD_GET_BITRATE,
    E_VDEC_EX_V2_USER_CMD_GET_FRAME_CNT,
    E_VDEC_EX_V2_USER_CMD_GET_SKIP_CNT,
    E_VDEC_EX_V2_USER_CMD_GET_DROP_CNT,
    E_VDEC_EX_V2_USER_CMD_GET_DISP_CNT,
    E_VDEC_EX_V2_USER_CMD_GET_DECQ_VACANCY,
    E_VDEC_EX_V2_USER_CMD_IS_32_PULLDOWN,
    E_VDEC_EX_V2_USER_CMD_IS_ALIVE,
    E_VDEC_EX_V2_USER_CMD_IS_CC_AVAILABLE,
    E_VDEC_EX_V2_USER_CMD_GET_CC_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_TRICK_MODE,
    E_VDEC_EX_V2_USER_CMD_GET_ACTIVE_CODEC_TYPE,
    E_VDEC_EX_V2_USER_CMD_GET_PATTERN_LEAST_LENGTH,
    E_VDEC_EX_V2_USER_CMD_MHEG_IS_IFRAME_DECODING,
    E_VDEC_EX_V2_USER_CMD_CC_GET_WRITE_PTR,
    E_VDEC_EX_V2_USER_CMD_CC_GET_READ_PTR,
    E_VDEC_EX_V2_USER_CMD_CC_GET_IS_OVERFLOW,
    E_VDEC_EX_V2_USER_CMD_GET_HW_KEY,
    E_VDEC_EX_V2_USER_CMD_GET_ES_BUFF_VACANCY,
    E_VDEC_EX_V2_USER_CMD_GET_ES_BUFF,
    E_VDEC_EX_V2_USER_CMD_GET_NEXT_DISP_FRAME,
    E_VDEC_EX_V2_USER_CMD_CC_GET_INFO,
    E_VDEC_EX_V2_USER_CMD_CC_GET_IS_RST_DONE,
    E_VDEC_EX_V2_USER_CMD_CC_GET_IS_BUFF_OVERFLOW,
    E_VDEC_EX_V2_USER_CMD_CC_GET_WRITE_ADDR,
    E_VDEC_EX_V2_USER_CMD_CC_GET_READ_ADDR,
    E_VDEC_EX_V2_USER_CMD_GETLIBVER,
    E_VDEC_EX_V2_USER_CMD_GETINFO,
    E_VDEC_EX_V2_USER_CMD_CHECKCAPS,
    E_VDEC_EX_V2_USER_CMD_IS_FRAME_RDY,
    E_VDEC_EX_V2_USER_CMD_GET_DCV_SEI,
    E_VDEC_EX_V2_USER_CMD_GET_VUI_DISP_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_CODEC_CAP,
    E_VDEC_EX_V2_USER_CMD_GET_PRE_PAS_U64PTS,
    E_VDEC_EX_V2_USER_CMD_GET_PVRSEAMLESS_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_CLLI_SEI,
    E_VDEC_EX_V2_USER_CMD_GET_SEQ_CHANGE_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_DISP_QUEUE_EMPTY,
    E_VDEC_EX_V2_USER_CMD_GET_NOT_SUPPORT_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_BUFFER_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_MIN_TSP_DATA_SIZE,
    E_VDEC_EX_V2_USER_CMD_GET_NEXT_DISP_FRAME_QOS_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_SEQ_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_EXTEND_DISP_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_CODEC_PROFILE_CAP,

    E_VDEC_EX_V2_USER_CMD_MVC_GET_CMD_BASE = 0x1800,
    E_VDEC_EX_V2_USER_CMD_GET_MVC_SUB_FRAME_DISP_INFO,
    E_VDEC_EX_V2_USER_CMD_GET_MVC_BBU2_DECQ_VACANCY,
    E_VDEC_EX_V2_USER_CMD_GET_MVC_ES2_READ_PTR,
    E_VDEC_EX_V2_USER_CMD_GET_MVC_ES2_WRITE_PTR,
    E_VDEC_EX_V2_USER_CMD_GET_ES_QUANTITY,
    E_VDEC_EX_V2_USER_CMD_GET_ES2_QUANTITY,

    E_VDEC_EX_V2_USER_CMD_GET_SECURE_MODE,


    E_VDEC_EX_V2_USER_CMD_SYSTEM_PRESET_CONTROL_BASE = 0x2000,
    E_VDEC_EX_V2_USER_CMD_SYSTEM_PRESET_VPU_CLOCK,


    E_VDEC_EX_V2_USER_CMD_SYSTEM_PRESET_HVD_BASE = 0x2100,
    E_VDEC_EX_V2_USER_CMD_SYSTEM_PRESET_HVD_CLOCK,


    E_VDEC_EX_V2_USER_CMD_SYSTEM_PRESET_MVD_BASE = 0x2200,
    E_VDEC_EX_V2_USER_CMD_SYSTEM_PRESET_MVD_CLOCK,
    E_VDEC_EX_V2_USER_CMD_VPU_SECURITY_MODE,
    E_VDEC_EX_V2_USER_CMD_PRESET_DECODE_MODE,
    E_VDEC_EX_V2_USER_CMD_PRESET_ENABLETURBOMODE,
    E_VDEC_EX_V2_USER_CMD_PRESETSINGLEDECODE,
    E_VDEC_EX_V2_USER_CMD_PREGETSTATUS,
    E_VDEC_EX_V2_USER_CMD_SETPOWERSTATE,



    E_VDEC_EX_V2_USER_CMD_PRESET_CONTROL_BASE = 0x2300,
    E_VDEC_EX_V2_USER_CMD_HVD_ONE_PENDING_BUFFER_MODE,
    E_VDEC_EX_V2_USER_CMD_MVD_HWBUFFER_REMAPPING_MODE,
    E_VDEC_EX_V2_USER_CMD_SET_SHAREMEMORY_BASE,
    E_VDEC_EX_V2_USER_CMD_HVD_COL_BBU_MODE,
    E_VDEC_EX_V2_USER_CMD_HVD_IAPGN_BUF_SHARE_BW_MODE,
         E_VDEC_EX_V2_USER_CMD_DTV_DEBUG_MODE,
    E_VDEC_EX_V2_USER_CMD_HVD_TS_IN_BBU_MODE,
    E_VDEC_EX_V2_USER_CMD_AUTO_ARRANGE_FRAMEBUFFER_USAGE,
    E_VDEC_EX_V2_USER_CMD_THUMBNAIL_MODE,
    E_VDEC_EX_V2_USER_CMD_FORCE_8BIT_DEC_MODE,
    E_VDEC_EX_V2_USER_CMD_DV_SINGLE_LAYER_MODE,
    E_VDEC_EX_V2_USER_CMD_MFCODEC_MODE,
    E_VDEC_EX_V2_USER_CMD_VDEC_FEATURE,
    E_VDEC_EX_V2_USER_CMD_DYNAMIC_CMA_MODE,
    E_VDEC_EX_V2_USER_CMD_CONNECT_INPUT_TSP,
    E_VDEC_EX_V2_USER_CMD_CONNECT_DISPLAY_PATH,
    E_VDEC_EX_V2_USER_CMD_SET_DISPLAY_MODE,
    E_VDEC_EX_V2_USER_CMD_BITSTREAMBUFFER_MONOPOLY,
    E_VDEC_EX_V2_USER_CMD_FRAMEBUFFER_MONOPOLY,
    E_VDEC_EX_V2_USER_CMD_SPECIFY_TASK_SPEC,
    E_VDEC_EX_V2_USER_CMD_SET_TOTALRANGE_BITSTREAMBUFFER,
    E_VDEC_EX_V2_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER1,
    E_VDEC_EX_V2_USER_CMD_SET_TOTALRANGE_FRAMEBUFFER2,
    E_VDEC_EX_V2_USER_CMD_PRESET_STC,
    E_VDEC_EX_V2_USER_CMD_CAL_FRAMERATE,
    E_VDEC_EX_V2_USER_CMD_SET_BUFFER_INFO,
    E_VDEC_EX_V2_USER_CMD_HDR10_UPDATE_PERFRAME,
    E_VDEC_EX_V2_USER_CMD_SET_CUSTOMER_MODE,


    E_VDEC_EX_V2_USER_CMD_SYSTEM_POSTSET_CONTROL_BASE = 0x3000,
    E_VDEC_EX_V2_USER_CMD_SYSTEM_POSTSET_CLEAR_PROCESS_RELATED,



    E_VDEC_EX_V2_USER_CMD_SYSTEM_PREGET_CONTROL_BASE = 0x4000,
    E_VDEC_EX_V2_USER_CMD_SYSTEM_PREGET_FB_MEMORY_USAGE_SIZE,
#ifdef VDEC_CAP_SYSTEM_PREGET_API
#ifdef VDEC_CAP_DV_OTT_API
    E_VDEC_EX_V2_USER_CMD_SYSTEM_PREGET_DV_SUPPORT_PROFILE,
    E_VDEC_EX_V2_USER_CMD_SYSTEM_PREGET_DV_SUPPORT_LEVEL,
#endif
#endif

} VDEC_EX_V2_User_Cmd;



typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Id;
} VDEC_EX_V2_StreamId;

typedef struct DLL_PACKED
{
    VDEC_EX_V2_User_Cmd eUserCmd;
    VDEC_EX_V2_StreamId* StreamID;
    void* pRet;
    void* param[8];
}VDEC_EX_V2_IO_Param;

typedef struct
{
    VDEC_EX_V2_Stream eStream;
    VDEC_EX_V2_CodecType eCodecType;
} VDEC_EX_V2_CodecInfo;


typedef struct
{
    VDEC_EX_V2_DEC_MODE eDecMod;
    VDEC_EX_V2_CodecInfo pstCodecInfo[VDEC_EX_V2_MAX_DEC_NUM];
    MS_U8 u8CodecCnt;
    MS_U8 u8ArgSize;
    MS_U32 u32Arg;
} VDEC_EX_V2_DecModCfg;

typedef struct
{
    MS_BOOL bEnable;
    MS_U8 u8DisplayTop;
}VDEC_EX_V2_Field_Polarity;

typedef struct
{
    MS_U32 u32version;
    MS_U32 u32size;
} VDEC_EX_V2_VerCtl;


typedef struct
{
    VDEC_EX_V2_CCFormat eFormat;
    VDEC_EX_V2_CCType eType;
    MS_VIRT u32BufStAdd;
    MS_U32 u32BufSize;
} VDEC_EX_V2_CCCfg;


typedef struct
{

    MS_U16 u16HorSize;

    MS_U16 u16VerSize;

    MS_U32 u32FrameRate;

    MS_U8 u8Interlace;

    MS_U8 u8AFD;

    MS_U16 u16SarWidth;

    MS_U16 u16SarHeight;

    MS_U16 u16CropRight;

    MS_U16 u16CropLeft;

    MS_U16 u16CropBottom;

    MS_U16 u16CropTop;

    MS_U16 u16Pitch;

    MS_U16 u16PTSInterval;

    MS_U8 u8MPEG1;

    MS_U8 u8PlayMode;

    MS_U8 u8FrcMode;

    MS_U8 u8AspectRate;

    MS_BOOL bWithChroma;



    MS_BOOL bColorInXVYCC;

    MS_VIRT u32DynScalingAddr;

    MS_U32 u32DynScalingSize;

    MS_U8 u8DynScalingDepth;

    MS_BOOL bEnableMIUSel;

    MS_U32 u32AspectWidth;

    MS_U32 u32AspectHeight;
} VDEC_EX_V2_DispInfo;


typedef struct
{

    MS_PHY u32FWBinaryAddr;

    MS_U32 u32FWBinarySize;

    MS_PHY u32CodeBufAddr;

    MS_U32 u32CodeBufSize;

    MS_PHY u32FrameBufAddr;

    MS_U32 u32FrameBufSize;

    MS_PHY u32BitstreamBufAddr;

    MS_U32 u32BitstreamBufSize;

    MS_PHY u32DrvProcBufAddr;

    MS_U32 u32DrvProcBufSize;

    MS_PHY u32VlcBinarySrcAddr;

    MS_U32 u32VlcTabBinarySize;

    VDEC_EX_V2_DbgLevel eDbgMsgLevel;

    VDEC_EX_V2_FWSourceType eFWSourceType;
} VDEC_EX_V2_SysCfg;


typedef struct
{

    VDEC_EX_V2_SrcMode eSrcMode;

    VDEC_EX_V2_TimeStampType eTimeStampType;

    VDEC_EX_V2_MJpegScaleFactor eMJpegScaleFactor;

    MS_BOOL bWithoutNalStCode;


    MS_U32 u32FrameRate;
    MS_U32 u32FrameRateBase;

    MS_U16 u16Width[8];

    MS_U16 u16Height[8];

    MS_U16 u16NumSizes;
} VDEC_EX_V2_VideoInfo;


typedef struct
{

    MS_PHY u32LumaAddr;

    MS_PHY u32ChromaAddr;

    MS_U32 u32TimeStamp;

    MS_U32 u32ID_L;

    MS_U32 u32ID_H;

    MS_U16 u16Pitch;

    MS_U16 u16Width;

    MS_U16 u16Height;

    VDEC_EX_V2_FrameType eFrameType;

    VDEC_EX_V2_FieldType eFieldType;
} VDEC_EX_V2_FrameInfo;

typedef struct
{
    VDEC_EX_V2_FrameInfo sFrameInfo;

    MS_PHY u32LumaAddr_2bit;
    MS_PHY u32ChromaAddr_2bit;
    MS_U8 u8LumaBitdepth;
    MS_U8 u8ChromaBitdepth;
    MS_U16 u16Pitch_2bit;

    MS_U8 u8Reserved[64];
} VDEC_EX_V2_FrameInfoEX;


typedef struct
{
    VDEC_EX_V2_VerCtl stVerCtl;
    VDEC_EX_V2_FrameInfo sFrameInfo;
    MS_PHY u32LumaAddr_2bit;
    MS_PHY u32ChromaAddr_2bit;
    MS_PHY u32LumaAddrI;
    MS_PHY u32LumaAddrI_2bit;
    MS_PHY u32ChromaAddrI;
    MS_PHY u32ChromaAddrI_2bit;
    MS_U32 u32MFCodecInfo;
    MS_U32 u32LumaMFCbitlen;
    MS_U32 u32ChromaMFCbitlen;
    MS_U16 u16Pitch_2bit;
    MS_U8 u8LumaBitdepth;
    MS_U8 u8ChromaBitdepth;

    MS_U32 maxLuminance;
    MS_U32 minLuminance;
    MS_U16 primaries[3][2];
    MS_U16 whitePoint[2];
    MS_U8 Frm_Info_Ext_avail;

    MS_U8 colour_primaries;
    MS_U8 transfer_characteristics;
    MS_U8 matrix_coefficients;
} VDEC_EX_V2_FrameInfoExt;

typedef struct
{
    MS_BOOL bUsed;
    MS_BOOL bColourVolumeSEIEnabled;
    MS_U32 u32MaxLuminance;
    MS_U32 u32MinLuminance;
    MS_U16 u16Primaries[3][2];
    MS_U16 u16WhitePoint[2];
}VDEC_EX_V2_DisplayColourVolume_SEI;

typedef struct
{
    VDEC_EX_V2_FrameInfoExt sFrameInfoExt;

    VDEC_EX_V2_DisplayColourVolume_SEI sDisplay_colour_volume;
    MS_U8 u8Frm_Info_Ext_avail;

    MS_U8 u8Colour_primaries;
    MS_U8 u8Transfer_characteristics;
    MS_U8 u8Matrix_coefficients;
} VDEC_EX_V2_FrameInfoExt_v2;


typedef struct
{

    MS_U16 u16VSize;

    MS_U16 u16HSize;

    MS_S16 s16VOffset;

    MS_S16 s16HOffset;
} VDEC_EX_V2_ExtDispInfo;


typedef struct
{

    VDEC_EX_V2_FrameInfo stFrmInfo;

    MS_U32 u32PriData;

    MS_U32 u32Idx;
} VDEC_EX_V2_DispFrame;


typedef struct
{

    MS_U8 u8TimeCodeHr;

    MS_U8 u8TimeCodeMin;

    MS_U8 u8TimeCodeSec;

    MS_U8 u8TimeCodePic;

    MS_U8 u8DropFrmFlag;

    MS_U8 u8Reserved[3];
} VDEC_EX_V2_TimeCode;


typedef struct
{
    VDEC_EX_V2_FBReductionType eLumaFBReduction;
    VDEC_EX_V2_FBReductionType eChromaFBReduction;
    MS_BOOL bEnableAutoMode;
} VDEC_EX_V2_FBReduction;


typedef struct
{

    MS_U32 u32Version;

    VDEC_EX_V2_CodecType eCodecType;

    VDEC_EX_V2_SysCfg SysConfig;

    VDEC_EX_V2_VideoInfo VideoInfo;

    MS_BOOL EnableDynaScale;

    MS_BOOL bDisableDropErrFrame;

    MS_BOOL bDisableErrConceal;

    MS_BOOL bRepeatLastField;

    MS_U8 u8ErrThreshold;

    MS_U32 u32DSVirtualBoxWidth;

    MS_U32 u32DSVirtualBoxHeight;

    VDEC_EX_V2_FBReduction stFBReduction;
} VDEC_EX_V2_InitParam;


typedef struct
{

    MS_U32 u32ID_H;

    MS_U32 u32ID_L;

    MS_VIRT u32StAddr;

    MS_U32 u32Size;

    MS_U32 u32Timestamp;
} VDEC_EX_V2_DecCmd;


typedef struct
{

    MS_U32 u32ID_H;

    MS_U32 u32ID_L;

    VDEC_EX_V2_DispCmdAction eAction;
} VDEC_EX_V2_DispCmd;

typedef struct
{
    MS_U32 u32Version;

    VDEC_EX_V2_PicStructure u8PicStructure;
    MS_U8 u8TopFieldFirst;
    MS_U16 u16TempRef;
    MS_U32 u32Pts;

    MS_U32 u32UserDataBuf;

    MS_U32 u32UserDataSize;

    VDEC_EX_V2_FrameType eFrameType;
} VDEC_EX_V2_CC_Info;


typedef struct
{
    MS_U32 u32Ver;
    MS_U32 u32Val;
} VDEC_EX_V2_CC_InputPara;

typedef struct
{
    MS_U32 u32OutputFrameRate;
    MS_U8 u8Interlace;
} VDEC_EX_V2_FRC_OutputParam;


typedef void (*VDEC_EX_V2_EventCb)(MS_U32 eFlag, void *param);

typedef struct
{
    MS_U8 u8Frm_packing_arr_cnl_flag;
    MS_U8 u8Frm_packing_arr_type;
    MS_U8 u8content_interpretation_type;
    MS_U8 u1Quincunx_sampling_flag;

    MS_U8 u1Spatial_flipping_flag;
    MS_U8 u1Frame0_flipping_flag;
    MS_U8 u1Field_views_flag;
    MS_U8 u1Current_frame_is_frame0_flag;

    MS_U8 u1Frame0_self_contained_flag;
    MS_U8 u1Frame1_self_contained_flag;
    MS_U8 u4Frame0_grid_position_x;
    MS_U8 u4Frame0_grid_position_y;

    MS_U8 u4Frame1_grid_position_x;
    MS_U8 u4Frame1_grid_position_y;
    MS_U8 u8Reserved01;
    MS_U8 u8Reserved02;
}VDEC_EX_V2_Frame_packing_SEI;

typedef struct
{
    VDEC_EX_V2_VerCtl stVerCtl;

    MS_BOOL bIsCropInfo;
    MS_BOOL bValid;
    MS_BOOL bUsed;
    MS_U8 u8Frm_packing_arr_cnl_flag;
    MS_U8 u8Frm_packing_arr_type;
    MS_U8 u8content_interpretation_type;
    MS_U8 u1Quincunx_sampling_flag;
    MS_U8 u1Spatial_flipping_flag;
    MS_U8 u1Frame0_flipping_flag;
    MS_U8 u1Field_views_flag;
    MS_U8 u1Current_frame_is_frame0_flag;
    MS_U8 u1Frame0_self_contained_flag;
    MS_U8 u1Frame1_self_contained_flag;
    MS_U8 u4Frame0_grid_position_x;
    MS_U8 u4Frame0_grid_position_y;
    MS_U8 u4Frame1_grid_position_x;
    MS_U8 u4Frame1_grid_position_y;
    MS_U32 u32DataBuff;
    MS_U32 u32DataSize;
    MS_U32 left;
    MS_U32 right;
    MS_U32 top;
    MS_U32 bottom;
} VDEC_EX_V2_Frame_packing_SEI_EX;

typedef struct
{
    MS_BOOL bAspect_ratio_info_present_flag;
    MS_U8 u8Aspect_ratio_idc;
    MS_U16 u16Sar_width;
    MS_U16 u16Sar_height;
    MS_BOOL bOverscan_info_present_flag;
    MS_BOOL bOverscan_appropriate_flag;
    MS_BOOL bVideo_signal_type_present_flag;
    MS_U8 u8Video_format;
    MS_BOOL bVideo_full_range_flag;
    MS_BOOL bColour_description_present_flag;
    MS_U8 u8Colour_primaries;
    MS_U8 u8Transfer_characteristics;
    MS_U8 u8Matrix_coefficients;
    MS_BOOL bChroma_location_info_present_flag;
    MS_U8 u8Chroma_sample_loc_type_top_field;
    MS_U8 u8Chroma_sample_loc_type_bottom_field;
    MS_BOOL bTiming_info_present_flag;
    MS_BOOL bFixed_frame_rate_flag;
    MS_U32 u32Num_units_in_tick;
    MS_U32 u32Time_scale;
} VDEC_EX_V2_AVC_VUI_DISP_INFO;


typedef struct
{
    MS_U32 u32HorSize;
    MS_U32 u32VerSize;
    MS_U32 u32Strip;
    MS_VIRT u32LumaStartAddr;
    MS_VIRT u32ChromaStartAddr;
}VDEC_EX_V2_CrcIn;

typedef struct
{
    MS_U32 u32LumaCRC;
    MS_U32 u32ChromaCRC;
}VDEC_EX_V2_CrcOut;

typedef struct
{
    VDEC_EX_V2_CrcIn stCrcIn;
    VDEC_EX_V2_CrcOut stCrcOut;
}VDEC_EX_V2_CrcValue;

typedef struct
{
    VDEC_EX_V2_CodecType eCodecType;
    MS_PHY u32DataAddr;
    MS_U32 u32MemUsageSize;
    MS_U16 u16DataSize;
} VDEC_EX_V2_FbMemUsage_Param;
# 1504 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiVDEC_EX_v2.h"
void VDEC_EX_V2_RegisterToUtopia(FUtopiaOpen ModuleType);
MS_U32 VDEC_EX_V2_Open(void** ppInstance, const void* const pAttribute);
MS_U32 VDEC_EX_V2_Close(void* pInstance);
MS_U32 VDEC_EX_V2_IOctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);
MS_U32 VDEC_EXStr(MS_U32 u32PowerState, void* pModule);


#ifdef __cplusplus
}
#endif

#endif
#undef _VDEC_EX_V2_H_
#endif
# 144 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor.h"
#ifndef _API_XC_PC_MONITOR_H_
#define _API_XC_PC_MONITOR_H_ 
#ifdef __cplusplus
extern "C"
{
#endif
# 159 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor.h"
#define ENABLE_IP_AUTO_COAST (0)






typedef enum
{
    E_XC_PCMONITOR_STABLE_NOSYNC = 0,
    E_XC_PCMONITOR_STABLE_SYNC ,
    E_XC_PCMONITOR_UNSTABLE,
} XC_PCMONITOR_STATUS;
# 183 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor.h"
MS_BOOL MApi_XC_PCMonitor_Init(MS_U8 u8MaxWindowNum);





void MApi_XC_PCMonitor_Restart(SCALER_WIN eWindow);







void MApi_XC_PCMonitor_SetTimingCount(MS_U16 u16TimingStableCounter, MS_U16 u16TimingNosyncCounter);
# 206 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor.h"
XC_PCMONITOR_STATUS MApi_XC_PCMonitor(INPUT_SOURCE_TYPE_t src, SCALER_WIN eWindow);







XC_PCMONITOR_STATUS MApi_XC_PCMonitor_GetCurrentState(SCALER_WIN eWindow);







MS_U8 MApi_XC_PCMonitor_GetSyncStatus(SCALER_WIN eWindow);







MS_U16 MApi_XC_PCMonitor_Get_HFreqx10(SCALER_WIN eWindow);







MS_U32 MApi_XC_PCMonitor_Get_HFreqx1K(SCALER_WIN eWindow);







MS_U16 MApi_XC_PCMonitor_Get_VFreqx10(SCALER_WIN eWindow);







MS_U32 MApi_XC_PCMonitor_Get_VFreqx1K(SCALER_WIN eWindow);







MS_U16 MApi_XC_PCMonitor_Get_Vtotal(SCALER_WIN eWindow);







void MApi_XC_PCMonitor_Get_Dvi_Hdmi_De_Info(SCALER_WIN eWindow,MS_WINDOW_TYPE* msWin);







MS_BOOL MApi_XC_PCMonitor_SyncLoss(SCALER_WIN eWindow);
# 287 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor.h"
MS_BOOL MApi_XC_PCMonitor_InvalidTimingDetect(MS_BOOL bPollingOnly, SCALER_WIN eWindow);
# 296 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_PCMonitor.h"
E_APIXC_ReturnValue MApi_XC_PCMonitor_SetTimingCountEx( INPUT_SOURCE_TYPE_t eCurrentSrc, MS_U16 u16TimingStableCounter, MS_U16 u16TimingNosyncCounter);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDDC2BI.h"
#ifndef _DRVDDC2BI_H_
#define _DRVDDC2BI_H_ 

#include "MsTypes.h"





#define MSIF_DDC_LIB_CODE {'D','D','C','_'}
#define MSIF_DDC_LIBVER {'0','1'}
#define MSIF_DDC_BUILDNUM {'0','2'}
#define MSIF_DDC_CHANGELIST {'0','0','3','1','6','8','6','6'}
#define DDC2BI_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DDC_LIB_CODE, \
    MSIF_DDC_LIBVER, \
    MSIF_DDC_BUILDNUM, \
    MSIF_DDC_CHANGELIST, \
    MSIF_OS




typedef enum
{
    E_DDC2BI_RET_FAIL = 0,
    E_DDC2BI_RET_OK,
} E_DDC2BI_ReturnValue;



#define DDC2B_CLEAR 0
#define DDC2B_SRCADDRESS 1
#define DDC2B_COMMAND 2
#define DDC2B_RECBODY 3
#define DDC2B_WAITFORCK 4
#define DDC2B_COMPLETED 5
#define DDC2B_MSGON 6
#define DDC2B_OVER 7


#define LENGTH 0
#define COMMAND 1
#define DATA1 2
#define DATA2 3
#define CHKSUM 4


#define DDC2B_DEST_ADDRESS 0x6e
#define DDC2B_SRC_ADDRESS 0x51
#define DDC2Bi_CONTROL_STATUS_FLAG 0x80


#define INITRxCK DDC2B_SRC_ADDRESS ^ DDC2B_DEST_ADDRESS
#define INITTxCK 0x50^DDC2B_DEST_ADDRESS
#define INITNMVTxCK 0x50^DDC2B_SRC_ADDRESS


#define TXBI 0x10
#define RCBI 0x08



#define DDC2B_SRC_ADDRESS_CUSTOMER 0x50
#define MAX_TXWAIT_DELAY 100
#define MaxBufLen 128
# 188 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDDC2BI.h"
#define DDC_WAITING_LOOPSCOUNT 3

typedef MS_U8(*CALLBACK_AlignControl)(MS_U8 *pDDCBuffData);
# 204 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDDC2BI.h"
typedef struct
{
    MS_U8 Reserved;
}MS_DDC2BI_INFO;




typedef struct
{
    MS_BOOL bIsInitialized;
    MS_BOOL bIsRunning;
}MS_DDC2BI_Status;

E_DDC2BI_ReturnValue MDrv_DDC2BI_GetLibVer(const MSIF_Version **ppVersion);
E_DDC2BI_ReturnValue MDrv_DDC2BI_GetInfo(MS_DDC2BI_INFO *pInfo);
E_DDC2BI_ReturnValue MDrv_DDC2BI_GetStatus(MS_DDC2BI_Status *pStatus);
E_DDC2BI_ReturnValue MDrv_DDC2BI_SetDbgLevel(MS_U16 u16DbgSwitch);

void MDrv_DDC2BI_Init(void);
MS_BOOL MDrv_DDC2BI_Exit(void);
void MDrv_DDC2BI_Set_StandardCallBack(CALLBACK_AlignControl align_control);
void MDrv_DDC2BI_Set_CustomerCallBack(CALLBACK_AlignControl align_control);

#endif
# 2 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMBX_St.h"
#include "drvMBX.h"
# 153 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
#ifndef _API_AUDIO_H_
#define _API_AUDIO_H_ 

#include "MsCommon.h"
#include "drvAUDIO_if.h"
#include "UFO.h"


#ifdef __cplusplus
extern "C"
{
#endif




#define MSAPI_AUD_SPDIF_PCM 0
#define MSAPI_AUD_SPDIF_OFF 1
#define MSAPI_AUD_SPDIF_NONPCM 2

#define MSAPI_AUD_DTV_IN 0
#define MSAPI_AUD_ATV_IN 1
#define MSAPI_AUD_HDMI_IN 2
#define MSAPI_AUD_ADC_IN 3
#define MSAPI_AUD_CardRD_IN 4
#define MSAPI_AUD_MM_IN 5

#define MSAPI_AUD_AVsync 0
#define MSAPI_AUD_FreeRun 1


#define _STATUS_MOD_MONO_EXIST 0x01
#define _STATUS_MOD_STEREO_EXIST 0x02
#define _STATUS_MOD_DUAL_EXIST 0x04
#define _STATUS_MOD_A2_PILOT_EXIST 0x08
#define _STATUS_MOD_A2_PRIMARY_EXIST 0x10
#define _STATUS_MOD_A2_SECONDARY_EXIST 0x20
#define _STATUS_MOD_A2_DK2_EXIST 0x40
#define _STATUS_MOD_A2_DK3_EXIST 0x80


#define _MASK_NICAM_STATUS_INFO 0x0F
#define _NICAM_SOUND_MODE_LOCK_STATE 0x05
#define _MASK_NICAM_SOUND_MODE_INFO 0xF0
#define _NICAM_SOUND_MOD_MONO_NOT_EXIST 0x00
#define _NICAM_SOUND_MOD_NICAM_MONO 0x10
#define _NICAM_SOUND_MOD_NICAM_STEREO 0x20
#define _NICAM_SOUND_MOD_NICAM_DUAL 0x30
#define _NICAM_SOUND_MOD_MONO_EXIST 0x80
#define _NICAM_SOUND_MOD_MONO_n_NICAM_MONO 0x90
#define _NICAM_SOUND_MOD_MONO_n_NICAM_STEREO 0xA0
#define _NICAM_SOUND_MOD_MONO_n_NICAM_DUAL 0xB0




#define _STD_SEL_INVALID 0x00
#define _STD_SEL_M_BTSC 0x01
#define _STD_SEL_M_EIAJ 0x02
#define _STD_SEL_M_A2 0x03
#define _STD_SEL_BG_A2 0x04
#define _STD_SEL_DK1_A2 0x05
#define _STD_SEL_DK2_A2 0x06
#define _STD_SEL_DK3_A2 0x07
#define _STD_SEL_BG_NICAM 0x08
#define _STD_SEL_DK_NICAM 0x09
#define _STD_SEL_I_NICAM 0x0A
#define _STD_SEL_L_NICAM 0x0B
#define _STD_SEL_AUTO 0xE0





typedef enum
{
    MSAPI_AUD_DVB_DECCMD_STOP = 0x0,
    MSAPI_AUD_DVB_DECCMD_PLAY,
    MSAPI_AUD_DVB_DECCMD_RESYNC,
    MSAPI_AUD_DVB_DECCMD_FREE_RUN,
    MSAPI_AUD_DVB_DECCMD_AVSYNC,
    MSAPI_AUD_DVB_DECCMD_PLAYFILE,
    MSAPI_AUD_DVB_DECCMD_PAUSE,
    MSAPI_AUD_DVB_DECCMD_PLAYFILETSP,
    MSAPI_AUD_DVB_DECCMD_STARTBROWSE,
    MSAPI_AUD_DVB_DECCMD_PLAYFRAME,
    MSAPI_AUD_DVB_DECCMD_PLAYFRAME_STAGE,
    MSAPI_AUD_DVB_DECCMD_PLAYFRAME_GS,
    MSAPI_AUD_DVB_DECCMD_PLAYMM_FILE2,
    MSAPI_AUD_DVB_DECCMD_PLAY_AD,
    MSAPI_AUD_DVB_DECCMD_STOP_AD,
    MSAPI_AUD_DVB_DECCMD_SKIP,

    MSAPI_AUD_DVB2_DECCMD_STOP=0x10,
    MSAPI_AUD_DVB2_DECCMD_PLAY,
    MSAPI_AUD_DVB2_DECCMD_RESYNC,
    MSAPI_AUD_DVB2_DECCMD_FREE_RUN,
    MSAPI_AUD_DVB2_DECCMD_AVSYNC,
    MSAPI_AUD_DVB2_DECCMD_PLAYFILE,
    MSAPI_AUD_DVB2_DECCMD_PAUSE,
    MSAPI_AUD_DVB2_DECCMD_PLAYFILETSP,

} En_DVB_decCmdType;


typedef enum
{
    MSAPI_AUD_DVB_ENCCMD_STOP = 0x0,
    MSAPI_AUD_DVB_ENCCMD_START
}En_DVB_EncCmdType;


typedef enum
{
    MSAPI_AUD_SIF_CMD_SET_STOP = 0x00,
    MSAPI_AUD_SIF_CMD_SET_PLAY = 0x01,
    MSAPI_AUD_SIF_CMD_ENABLE_HIDEV = 0x02,
    MSAPI_AUD_SIF_CMD_SET_HIDEV_FILTER_BW_LEVEL = 0x03,
    MSAPI_AUD_SIF_CMD_RESET_FC_TRACKING = 0x04,
    MSAPI_AUD_SIF_CMD_ENABLE_FC_TRACKING = 0x05,
    MSAPI_AUD_SIF_CMD_SET_ADC_FROM_VIF_PATH = 0x06,
    MSAPI_AUD_SIF_CMD_ENABLE_AUTO_MUTE = 0x07,
    MSAPI_AUD_SIF_CMD_ENABLE_BEEPER_FUNCTION = 0x08,
    MSAPI_AUD_SIF_CMD_SET_BEEPER_TONE = 0x09,
    MSAPI_AUD_SIF_CMD_ENABLE_AGC = 0x0A,
    MSAPI_AUD_SIF_CMD_RESET_AGC = 0x0B,
    MSAPI_AUD_SIF_STANDARD_RESET = 0x0C,
    MSAPI_AUD_SIF_CMD_DETECT_MAIN_STD_ONLY = 0x0D,
    MSAPI_AUD_SIF_CMD_ENABLE_AUTO_SOUNDMODE = 0x0E,
    MSAPI_AUD_SIF_CMD_FMTX_SET_PREEMP = 0x0F,
    MSAPI_AUD_SIF_CMD_SET_ENC_CMD = 0x10,
    MSAPI_AUD_SIF_CMD_SET_ENC_Input_attenuation= 0x11,
    MSAPI_AUD_SIF_CMD_SET_ENC_Output_scaling= 0x12,
    MSAPI_AUD_SIF_CMD_SET_BTSC_Enc_M_Gain=0x13,
    MSAPI_AUD_SIF_CMD_SET_BTSC_Enc_D_Gain= 0x14,
    MSAPI_AUD_SIF_CMD_SET_BTSC_Enc_SAP_Gain= 0x15,
    MSAPI_AUD_SIF_CMD_SET_FM_CH2_FILTER_BW_LEVEL=0x16,
    MSAPI_AUD_SIF_CMD2_ADC_VIA_VIF_PIN = 0x01
} En_AUD_SIF_CmdType;

typedef enum
{
   MSAPI_AUD_SIF_42M,
   MSAPI_AUD_SIF_43M,
   MSAPI_AUD_SIF_44M,
} En_AUD_VIF_Type;

enum
{
    MSAPI_AUD_SIF_HIDEV_FILTER_BW_DEFAULT = 0x00,
    MSAPI_AUD_SIF_HIDEV_FILTER_BW_L1 = 0x10,
    MSAPI_AUD_SIF_HIDEV_FILTER_BW_L2 = 0x20,
    MSAPI_AUD_SIF_HIDEV_FILTER_BW_L3 = 0x30
};


typedef enum
{
   DVB_Audio_Decoder1,
   DVB_Audio_Decoder2
} En_DVB_AudioDecoder;

#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)


typedef char* En_DVB_advsndType;
#define MSAPI_AUD_ADVSND_NONE ((En_DVB_advsndType)"ADVSND_NONE")
#define MSAPI_AUD_ADVSND_PL2 ((En_DVB_advsndType)"ADVSND_PL2")
#define MSAPI_AUD_ADVSND_BBE ((En_DVB_advsndType)"ADVSND_BBE")
#define MSAPI_AUD_ADVSND_SRS ((En_DVB_advsndType)"ADVSND_SRS")
#define MSAPI_AUD_ADVSND_VDS ((En_DVB_advsndType)"ADVSND_VDS")
#define MSAPI_AUD_ADVSND_VSPK ((En_DVB_advsndType)"ADVSND_VSPK")
#define MSAPI_AUD_ADVSND_SUPV ((En_DVB_advsndType)"ADVSND_SUPV")
#define MSAPI_AUD_ADVSND_TSHD ((En_DVB_advsndType)"ADVSND_TSHD")
#define MSAPI_AUD_ADVSND_DTS_ULTRATV ((En_DVB_advsndType)"ADVSND_DTS_ULTRATV")
#define MSAPI_AUD_ADVSND_TSHDVIQ ((En_DVB_advsndType)"ADVSND_TSHDVIQ")
#define MSAPI_AUD_ADVSND_AUDYSSEY ((En_DVB_advsndType)"ADVSND_AUDYSSEY")
#define MSAPI_AUD_ADVSND_DBX ((En_DVB_advsndType)"ADVSND_DBX")
#define MSAPI_AUD_ADVSND_SSHD_TSHD ((En_DVB_advsndType)"ADVSND_SSHD_TSHD")
#define MSAPI_AUD_ADVSND_PURESND ((En_DVB_advsndType)"ADVSND_PURESND")
#define MSAPI_AUD_ADVSND_BONGIOVI_DPS ((En_DVB_advsndType)"ADVSND_BONGIOVI_DPS")
#define MSAPI_AUD_ADVSND_DOLBY_DAP ((En_DVB_advsndType)"ADVSND_DOLBY_DAP")

#else


typedef enum
{
    MSAPI_AUD_ADVSND_PL2,
    MSAPI_AUD_ADVSND_BBE,
    MSAPI_AUD_ADVSND_SRS,
    MSAPI_AUD_ADVSND_VDS,
    MSAPI_AUD_ADVSND_VSPK,
    MSAPI_AUD_ADVSND_SUPV,
    MSAPI_AUD_ADVSND_TSHD,
    MSAPI_AUD_ADVSND_DTS_ULTRATV,
    MSAPI_AUD_ADVSND_TSHDVIQ,
    MSAPI_AUD_ADVSND_AUDYSSEY,
    MSAPI_AUD_ADVSND_DBX,
    MSAPI_AUD_ADVSND_SSHD_TSHD,
    MSAPI_AUD_ADVSND_PURESND,
    MSAPI_AUD_ADVSND_BONGIOVI_DPS,
    MSAPI_AUD_ADVSND_CV3,
} En_DVB_advsndType;

#endif


typedef enum
{
    MSAPI_AUD_DVB_SOUNDMODE_STEREO,
    MSAPI_AUD_DVB_SOUNDMODE_LEFT,
    MSAPI_AUD_DVB_SOUNDMODE_RIGHT,
    MSAPI_AUD_DVB_SOUNDMODE_NONE,
} En_DVB_soundModeType;


typedef enum
{
    MSAPI_AUD_MELODY_START,
    MSAPI_AUD_MELODY_STOP,
    MSAPI_AUD_MELODY_RESUME,
    MSAPI_AUD_MELODY_CHK_STATUS
}En_DVB_melodyPlayCmdType;

typedef struct
{
    MS_U32 u32BufStartAddr;
    MS_U32 u32BufEndAddr;
    MS_U32 u32BufWrPtr;
    MS_U32 u32BufTotalSize;
    MS_U32 u32BufferedPCMSize;
}audioBufMonitor;

typedef struct
{
    audioBufMonitor _stBufInfo;
    MS_U32 u32ReqAddr;
    MS_U32 u32ReqSize;
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    MS_U32 u32RetAddr1;
#else
    MS_PHY phyRetAddr1;
#endif
    MS_U32 u32RetSize1;
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    MS_U32 u32RetAddr2;
#else
    MS_PHY phyRetAddr2;
#endif
    MS_U32 u32RetSize2;
    MS_U8 u8RingStatus;
}audioRingTask;



typedef enum
{
    MSAPI_AUD_MELODY_NEED_MORE_DATA,
    MSAPI_AUD_MELODY_PLAY_INIT,
    MSAPI_AUD_MELODY_PLAY_ING,
    MSAPI_AUD_MELODY_PLAY_DONE,
    MSAPI_AUD_MELODY_PLAY_STOP
}En_DVB_melodyPlayStatus;


enum
{
    AD_OUT_SPEAKER,
    AD_OUT_HP,
    AD_OUT_BOTH,
    AD_OUT_NONE
};


typedef enum
{
    E_AUDIO_SYSTEM_BTSC,
    E_AUDIO_SYSTEM_A2,
    E_AUDIO_SYSTEM_EIAJ
}AUDIO_SYSTEM_TYPE;


typedef enum
{
    E_AUDIOSTANDARD_BG = 0x00,
    E_AUDIOSTANDARD_BG_A2 = 0x01,
    E_AUDIOSTANDARD_BG_NICAM = 0x02,
    E_AUDIOSTANDARD_I = 0x03,
    E_AUDIOSTANDARD_DK = 0x04,
    E_AUDIOSTANDARD_DK1_A2 = 0x05,
    E_AUDIOSTANDARD_DK2_A2 = 0x06,
    E_AUDIOSTANDARD_DK3_A2 = 0x07,
    E_AUDIOSTANDARD_DK_NICAM = 0x08,
    E_AUDIOSTANDARD_L = 0x09,
    E_AUDIOSTANDARD_M = 0x0A,
    E_AUDIOSTANDARD_M_BTSC = 0x0B,
    E_AUDIOSTANDARD_M_A2 = 0x0C,
    E_AUDIOSTANDARD_M_EIA_J = 0x0D,
    E_AUDIOSTANDARD_NOTSTANDARD = 0x0F
} AUDIOSTANDARD_TYPE;


typedef enum
{
    E_AUDIOSTREAM_INVALID = 0x00,
    E_AUDIOSTREAM_MPEG = 0x01,
    E_AUDIOSTREAM_AC3 = 0x02,
    E_AUDIOSTREAM_MPEG_AD = 0x03,
    E_AUDIOSTREAM_MPEG4 = 0x04,
    E_AUDIOSTREAM_AAC = 0x05,
    E_AUDIOSTREAM_AC3P = 0x06,
    E_AUDIOSTREAM_AC3_AD = 0x07,
    E_AUDIOSTREAM_AC3P_AD = 0x08,
    E_AUDIOSTREAM_AACP_AD = 0x09,
    E_AUDIOSTREAM_DRA = 0x0A
} AUDIOSTREAM_TYPE;


typedef enum
{
    E_AUDIOMODE_INVALID = 0x00,
    E_AUDIOMODE_MONO = 0x01,
    E_AUDIOMODE_FORCED_MONO = 0x02,
    E_AUDIOMODE_G_STEREO = 0x03,
    E_AUDIOMODE_K_STEREO = 0x04,
    E_AUDIOMODE_MONO_SAP = 0x05,
    E_AUDIOMODE_STEREO_SAP = 0x06,
    E_AUDIOMODE_DUAL_A = 0x07,
    E_AUDIOMODE_DUAL_B = 0x08,
    E_AUDIOMODE_DUAL_AB = 0x09,
    E_AUDIOMODE_NICAM_MONO = 0x0A,
    E_AUDIOMODE_NICAM_STEREO = 0x0B,
    E_AUDIOMODE_NICAM_DUAL_A = 0x0C,
    E_AUDIOMODE_NICAM_DUAL_B = 0x0D,
    E_AUDIOMODE_NICAM_DUAL_AB = 0x0E,
    E_AUDIOMODE_HIDEV_MONO = 0x0F,
    E_AUDIOMODE_LEFT_LEFT = 0x10,
    E_AUDIOMODE_RIGHT_RIGHT = 0x11,
    E_AUDIOMODE_LEFT_RIGHT = 0x12
} AUDIOMODE_TYPE;


typedef enum
{
    E_STATE_AUDIO_NO_CARRIER = 0x00,
    E_STATE_AUDIO_PRIMARY_CARRIER = 0x01,
    E_STATE_AUDIO_SECONDARY_CARRIER = 0x02,
    E_STATE_AUDIO_NICAM = 0x04,
    E_STATE_AUDIO_STEREO = 0x08,
    E_STATE_AUDIO_BILINGUAL = 0x10,
    E_STATE_AUDIO_PILOT = 0x20,
    E_STATE_AUDIO_DK2 = 0x40,
    E_STATE_AUDIO_DK3 = 0x80
} AUDIOSTATUS;


typedef enum
{
    E_EQUALIZER_BAND_1 = 0x00,
    E_EQUALIZER_BAND_2 = 0x01,
    E_EQUALIZER_BAND_3 = 0x02,
    E_EQUALIZER_BAND_4 = 0x03,
    E_EQUALIZER_BAND_5 = 0x04,
    E_EQUALIZER_BAND_6 = 0x05,
    E_EQUALIZER_BAND_7 = 0x06
} EQUALIZER_BAND;


typedef enum
{
    E_AUDIO_COM_PLAY,
    E_AUDIO_COM_STOP,
    E_AUDIO_COM_RESYNC,
    E_AUDIO_COM_FREE_RUN,
    E_AUDIO_COM_LOCK_AVSYNC,
    E_AUDIO_COM_FILE_PLAY,
    E_AUDIO_COM_FILE_PAUSE,
    E_AUDIO_DVB2_COM_PLAY,
    E_AUDIO_DVB2_COM_STOP,
    E_AUDIO_DVB2_COM_RESYNC,
    E_AUDIO_DVB2_COM_FREE_RUN,
    E_AUDIO_DVB2_COM_LOCK_AVSYNC,
    E_AUDIO_DVB2_COM_FILE_PLAY,
    E_AUDIO_DVB2_COM_FILE_PAUSE
} DTV_AUDIO_COMMAND;

enum
{
    MSAPI_AUD_MODE_STEREO,
    MSAPI_AUD_MODE_LL,
    MSAPI_AUD_MODE_RR,
    MSAPI_AUD_MODE_MUTE
};


enum
{
    MSAPI_TSXT_OFF = 0,
    MSAPI_TSXT_STEREO,
    MSAPI_TSXT_3D_MONO,
    MSAPI_TSXT_MAX,
    MSAPI_TSXT_INVALID = -1
};

typedef enum
{
    E_TSXT_MOD_STEREO,
    E_TSXT_MOD_3D_MONO,
    E_TSXT_MOD_MAX
} TSXT_MODETYPE;


typedef enum
{
    E_TSXT_PARA_TS_GAIN,
    E_TSXT_PARA_DC_GAIN,
    E_TSXT_PARA_TB_GAIN,
    E_TSXT_PARA_SPK,
    E_TSXT_PARA_INPUT_MOD,
    E_TSXT_PARA_OUTPUT_GAIN
} TSXT_PARATYPE;


typedef enum
{
    E_AUDIO_DSP_MPEG,
    E_AUDIO_DSP_AC3,
    E_AUDIO_DSP_AC3_AD,
    E_AUDIO_DSP_SIF,
    E_AUDIO_DSP_AACP,
    E_AUDIO_DSP_MPEG_AD,
    E_AUDIO_DSP_AC3P,
    E_AUDIO_DSP_AC3P_AD,
    E_AUDIO_DSP_AACP_AD,
    E_AUDIO_DSP_DTS,
    E_AUDIO_DSP_MS10_DDT,
    E_AUDIO_DSP_MS10_DDC,
    E_AUDIO_DSP_FLAC,
    E_AUDIO_DSP_FM_RADIO,
    E_AUDIO_DSP_KTV,
    E_AUDIO_DSP_RESERVE3,
    E_AUDIO_DSP_RESERVE2,
    E_AUDIO_DSP_RESERVE1,
    E_AUDIO_DSP_MAX,
    E_AUDIO_DSP_INVALID=0xFF
} AUDIO_DSP_SYSTEM;


typedef enum
{
    E_AUDIO_GROUP_MAIN,
    E_AUDIO_GROUP_SCART,
    E_AUDIO_GROUP_SPDIF,
    E_AUDIO_GROUP_SUB,
    E_AUDIO_GROUP_INVALID
} AUDIO_SWITCH_GROUP;

#define TBL_INDEX MS_U8
#define TBL_LENGTH MS_U8

#define FM_RADIO_TBL_LENGTH 6
#define BTSC_TBL_LENGTH 10
#define A2_M_TBL_LENGTH 10
#define A2_BG_TBL_LENGTH 10
#define A2_DK_TBL_LENGTH 10
#define FM_I_TBL_LENGTH 4
#define AM_TBL_LENGTH 2
#define NICAM_BG_TBL_LENGTH 2
#define NICAM_I_TBL_LENGTH 2
#define HIDEV_M_TBL_LENGTH 4
#define HIDEV_BG_TBL_LENGTH 4
#define HIDEV_DK_TBL_LENGTH 4
#define HIDEV_I_TBL_LENGTH 4

#define FM_RADIO_TBL_INDEX 0
#define BTSC_TBL_INDEX 0
#define A2_M_TBL_INDEX 0
#define A2_BG_TBL_INDEX A2_M_TBL_INDEX + A2_M_TBL_LENGTH
#define A2_DK_TBL_INDEX A2_BG_TBL_INDEX + A2_BG_TBL_LENGTH
#define FM_I_TBL_INDEX A2_DK_TBL_INDEX + A2_DK_TBL_LENGTH
#define AM_TBL_INDEX FM_I_TBL_INDEX + FM_I_TBL_LENGTH
#define NICAM_BG_TBL_INDEX AM_TBL_INDEX + AM_TBL_LENGTH
#define NICAM_I_TBL_INDEX NICAM_BG_TBL_INDEX + NICAM_BG_TBL_LENGTH
#define HIDEV_M_TBL_INDEX NICAM_I_TBL_INDEX + NICAM_I_TBL_LENGTH
#define HIDEV_BG_TBL_INDEX HIDEV_M_TBL_INDEX + HIDEV_M_TBL_LENGTH
#define HIDEV_DK_TBL_INDEX HIDEV_BG_TBL_INDEX + HIDEV_BG_TBL_LENGTH
#define HIDEV_I_TBL_INDEX HIDEV_DK_TBL_INDEX + HIDEV_DK_TBL_LENGTH
# 657 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetPowerOn(MS_BOOL bFlag);






 void MApi_AUDIO_Initialize(void);
# 674 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetSystemInfo(AUDIO_INIT_INFO *pau_info);







 void MApi_Audio_Monitor(void);
# 691 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetOutConnectivity(void);
# 700 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetPathInfo(AUDIO_PATH_INFO *path_info);
# 709 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_GetPathInfo(AUDIO_PATH_INFO *path_info);
# 718 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetOutputInfo(AUDIO_OUT_INFO *pout_info);
# 733 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetSourceInfo(AUDIO_SOURCE_INFO_TYPE eSourceType);
# 742 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_InputSwitch(AUDIO_INPUT_TYPE enSource, AUDIO_SWITCH_GROUP enGroup);
# 754 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SetDataCaptureSource(AUDIO_DEVICE_TYPE eID, AUDIO_CAPTURE_SOURCE_TYPE eSource);
# 763 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetOutputSourceInfo(OUTPUT_SOURCE_INFO *pSourceInfo);
# 772 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_GetOutputSourceInfo(OUTPUT_SOURCE_INFO *pSourceInfo);
# 782 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U16 MApi_AUDIO_ReadMailBox(MS_BOOL bDspType, MS_U8 u8ParamNum);
# 792 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_WriteMailBox(MS_BOOL bDspType, MS_U8 u8ParamNum, MS_U16 u16Data);







  void MApi_AUDIO_FwTriggerDSP(MS_U16 u16Cmd);
# 810 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_SetFwStatus(MS_BOOL en);







 void MApi_AUDIO_ExitAudioSystem(void);







  void MApi_AUDIO_RebootDsp(MS_BOOL bDspType);
# 835 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_SendIntrupt(MS_BOOL bDspType,MS_U8 u8Cmd);
# 857 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_I2S_SetMode(AUDIO_I2S_MODE_TYPE u8Mode, AUDIO_I2S_MODE_VALUE u8Val);






 void MApi_AUDIO_WritePreInitTable(void);






  void MApi_AUDIO_EnaEarphone_LowPower_Stage(void);






 void MApi_AUDIO_EnaEarphone_HighDriving_Stage(void);
# 887 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetDspBaseAddr(MS_U8 u8Index, MS_U32 u32Bin_Base_Address, MS_U32 u32Mad_Base_Buffer_Adr);







 MS_U32 MApi_AUDIO_GetDspMadBaseAddr(MS_U8 u8Index);
# 906 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_SND_ProcessEnable(Sound_ENABLE_Type Type, MS_BOOL enable);







 MS_BOOL MApi_SND_SetParam1( Sound_SET_PARAM_Type Type, MS_U16 param1, MS_U16 param2);







 MS_U16 MApi_SND_GetParam1( Sound_GET_PARAM_Type Type, MS_U16 param1);







  MS_BOOL MApi_AUDIO_SOUND_SetParam( Sound_SET_Type Type, MS_U32 *p_param );
# 942 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetAbsoluteVolume( MS_U8 u8Path, MS_U8 u8Vol1, MS_U8 u8Vol2 );
# 954 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetPreScale ( MS_U8 u8Path, MS_U8 u8PreScale );
# 964 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetMute( MS_U8 u8Path, MS_BOOL EnMute);
# 974 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SourceConnect(AUDIO_OUTPORT_SOURCE_TYPE eConnectSourceType, MS_BOOL bIsConnect );
# 985 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetBalance ( MS_U8 u8Balance );
# 994 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_EnableEQ ( MS_BOOL EnEQ );
# 1003 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_EnableTone ( MS_BOOL EnTone );
# 1012 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_EnableAutoVolume ( MS_BOOL EnAVL );
# 1021 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_EnableSurround ( MS_BOOL EnSurround );







 void MApi_AUDIO_EnableBalance( MS_U8 EnBalance );







 void MApi_AUDIO_SetDynamicBass( MS_U8 u8DynamicBass );
# 1048 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetBass( MS_U8 u8Bass );
# 1059 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_AbsoluteBass( MS_U8 u8Bass );
# 1069 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetTreble( MS_U8 u8Treble );
# 1080 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_AbsoluteTreble( MS_U8 u8Treble );
# 1094 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetEq(MS_U8 u8band, MS_U8 u8level);
# 1108 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetEq_7band(MS_U8 u8band, MS_U8 u8level);
# 1120 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetAvcThreshold(MS_U8 Level);
# 1137 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetAvcMode( MS_U8 AvcMode );
# 1149 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetAvcAT( MS_U8 AvcAT );
# 1161 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetAvcRT( MS_U8 AvcRT );







 void MApi_AUDIO_SetBufferProcess(MS_U8 DelayTime);
# 1184 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetSurroundXA( MS_U8 mode );
# 1199 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetSurroundXB( MS_U8 mode );
# 1218 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetSurroundXK( MS_U8 mode );
# 1234 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetSurroundLPFGain( MS_U8 mode );
# 1244 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U8 MApi_AUDIO_ConvertVolumeUnit(MS_U8 UiVolume);
# 1257 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetPEQCoef(AUDIO_PEQ_COEF *peq_coef);
# 1268 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_EnablePEQ(MS_BOOL Enpeq);
# 1279 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_BOOL MApi_AUDIO_EnableDcRemove(MS_BOOL EnDcRemove);
# 1292 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_ReleaseDecodeSystem(AUDIO_DEC_ID DecId);
# 1302 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SetDecodeSystem(AUDIO_DEC_ID DecId, AudioDecStatus_t * p_AudioDecStatus);
# 1312 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_GetDecodeSystem(AUDIO_DEC_ID DecId, AudioDecStatus_t * p_AudioDecStatus);
# 1322 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SetDecodeCmd(AUDIO_DEC_ID DecId, En_DVB_decCmdType enDecComamnd);
# 1331 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 AUDIO_DEC_ID MApi_AUDIO_OpenDecodeSystem(AudioDecStatus_t * p_AudioDecStatus);
# 1347 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SetSystem(En_DVB_decSystemType enDecSystem);
# 1356 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_GetDecSysSupportStatus(En_DVB_decSystemType enDecSystem);
# 1366 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_SetH264StreamID_Mod(MS_U8 stream_id_mod);







 MS_BOOL MApi_AUDIO_IsMadLock(void);







 En_DVB_decCmdType MApi_AUDIO_GetDecStatus ( void );
# 1395 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 AU_DVB_DECCMD MApi_AUDIO_GetCommand(En_DVB_AudioDecoder AdoDecoderNo);







 void MApi_AUDIO_SetCommand(En_DVB_decCmdType enDecComamnd);







 MS_BOOL MApi_AUDIO_GetMAD_LOCK(void);
# 1422 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetADOutputMode (MS_U8 out_mode);
# 1431 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetADAbsoluteVolume (MS_U8 AbsVolume);
# 1440 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_ADSetMute(MS_BOOL EnMute);
# 1457 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetEncInit(AU_DVB_ENCBR BitRate, MS_U8 u8EncFrameNum);
# 1467 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_SetEncCommand(AU_DVB_ENCCMD enEncComamnd);







  void MApi_AUDIO_GetEncodeFrameInfo(AU_DVB_ENC_FRAME_INFO *EncFrameInfo);
# 1484 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_GetEncodeDoneFlag(void);
# 1496 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SIF_SetStandard(AUDIOSTANDARD_TYPE standard_type);
# 1508 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U8 MApi_AUDIO_SIF_GetSoundMode(void);
# 1523 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SIF_SetSoundMode(MS_U8 u8SifSoundMode);
# 1533 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SIF_GetAudioStatus(AUDIOSTATUS * eAudioStatus);






 void MApi_AUDIO_SIF_StartAutoStandardDetection(void);







 AUDIOSTANDARD_TYPE MApi_AUDIO_SIF_GetResultOfAutoStandardDetection(void);
# 1563 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 AUDIOSTANDARD_TYPE MApi_AUDIO_SIF_ConvertToBasicAudioStandard(AUDIOSTANDARD_TYPE eStandard);







#if defined(UFO_PUBLIC_HEADER_212)
 void MApi_AUDIO_SIF_SetThreshold(THR_TBL_TYPE code *ThrTbl);
#else
 void MApi_AUDIO_SIF_SetThreshold(THR_TBL_TYPE *ThrTbl);
#endif





#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
 void MApi_AUDIO_SIF_SetPrescale(MS_U8, int);
#else
 void MApi_AUDIO_SIF_SetPrescale(MS_U8, MS_S32);
#endif







 MS_BOOL MApi_AUDIO_SIF_IsPALType(AUDIO_SIF_PAL_TYPE pal_type);






 void MApi_AUDIO_SIF_SetPALType(AUDIO_SIF_PAL_TYPE pal_type);







 void MApi_AUDIO_SIF_SendCmd(En_AUD_SIF_CmdType enAudSifCommand, MS_U8 comm_arg1, MS_U8 comm_arg2);







 void MApi_AUDIO_SIF_Shift(En_AUD_VIF_Type type);





 void MApi_AUDIO_TriggerSifPLL(void);
# 1635 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_U8 MApi_AUDIO_FM_RADIO_GetSoundMode(void);
# 1644 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_FM_RADIO_SetSoundMode(MS_U8 u8FMRadioSoundMode);
# 1653 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_FM_RADIO_DeEmphassisOption(MS_BOOL Is_Europe);
# 1662 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S8 MApi_AUDIO_FM_RADIO_GET_DC_AMP(void);
# 1671 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_U8 MApi_AUDIO_FM_RADIO_GET_NSR(void);
# 1680 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_FM_RADIO_RESET(void);
# 1693 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SPDIF_HWEN(MS_BOOL spdif_hwen);
# 1702 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SPDIF_SetMute(MS_BOOL mute_en);
# 1713 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SPDIF_SetMode(MS_U8 spdif_mode);
# 1724 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_U8 MApi_AUDIO_SPDIF_GetMode(void);
# 1733 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SPDIF_SetSCMS(MS_U8 C_bit_en, MS_U8 L_bit_en);







 MS_U8 MApi_AUDIO_SPDIF_GetSCMS(void);
 void MApi_AUDIO_SPDIF_SetOutputType(AUDIO_SPDIF_OUTPUT_TYPE eType);







void MApi_Audio_SPDIF_Monitor(void);
 void MApi_Audio_Monitor_SPDIF_NONPCM_SmpRate(void);







 MS_BOOL MApi_AUDIO_SPDIF_ChannelStatus_CTRL(AUDIO_SPDIF_CS_TYPE cs_mode, AUDIO_SPDIF_CS_TYPE_STATUS status);
# 1769 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_DigitalOut_SetChannelStatus(DIGITAL_OUTPUT_TYPE ePath, Digital_Out_Channel_Status_t *stChannelStatus);
# 1781 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
MS_BOOL MApi_AUDIO_DigitalOut_SetDeviceCapability(DIGITAL_OUTPUT_TYPE eoutType, AUDIO_FORMAT_CODE ecodecType, Digital_Out_Device_Capability_t *p_codecCapability);
# 1794 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_HDMI_Tx_SetMute(MS_BOOL mute_en);
# 1804 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_HDMI_Tx_GetStatus(MS_BOOL *onOff, AUDIO_FS_TYPE *hdmi_SmpFreq, HDMI_TX_OUTPUT_TYPE *outType );
# 1814 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_U8 MApi_AUDIO_HDMI_Monitor(void);
# 1824 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_HDMI_GetNonpcmFlag(void);







 void MApi_AUDIO_HDMI_SetNonpcm(MS_U8 nonPCM_en);
# 1841 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 AUDIO_HDMI_RX_TYPE MApi_AUDIO_HDMI_RX_SetNonpcm(MS_U8 nonPCM_en);
# 1850 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 AUDIO_HDMI_RX_TYPE MApi_AUDIO_HDMI_RX_GetNonPCM(void);
# 1859 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_DTV_HDMI_CFG(MS_U8 ctrl);







 MS_U16 MApi_AUDIO_HDMI_GetSynthFreq(void);
# 1877 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_HDMI_SetDownSample(MS_U8 ratio);






 void MApi_AUDIO_HDMI_TX_SetMode(HDMI_TX_OUTPUT_TYPE outType);







 MS_BOOL MApi_AUDIO_HDMI_RX_GetHdmiInAudioStatus( ST_HDMI_AUDIO_STATUS *p_hdmiAudioSts);
# 1907 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_ADVSOUND_ProcessEnable(ADVSND_TYPE type);
# 1918 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_ADVSOUND_SubProcessEnable(ADVFUNC proc, MS_BOOL enable);
# 1929 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_ADVSOUND_SetParam(ADVSND_PARAM param, MS_U16 u16value1, MS_U16 u16value2);
# 1945 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_ADVSND_SetParam(ADVSND_PARAM param, MS_U32 u32value1, MS_U16 u16value2);







 MS_U32 MApi_AUDIO_ADVSOUND_GetInfo( AdvSound_GET_Type Type);
# 1964 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
void MApi_DBXTV_SetMode(EN_DBXTV_TotSonMode totsonmode, EN_DBXTV_TotVolMode totvolmode, EN_DBXTV_TotSurMode totsurmode,MS_U32 enable);






  void MApi_AUDIO_SeInit(void);







#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
 void MApi_AUDIO_SetAdvSndSys(En_DVB_advsndType u8AdvSurrMod);
#else
 void MApi_AUDIO_SetAdvSndSys(MS_U8 u8AdvSurrMod);
#endif







  void MApi_AUDIO_SetVDS(MS_U8 u8enVDS);







  void MApi_AUDIO_SetVSPK(MS_U8 u8enVSPK);







 void MApi_AUDIO_SetSRS(MS_U8 u8enSRS);
# 2016 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_SetBBE(MS_U8 u8enBBE,MS_U8 u8BBEMode);







 void MApi_AUDIO_VSPK_WMod(MS_U8 u8VSPK_WMode);







  void MApi_AUDIO_VSPK_SMod(MS_U8 u8VSPK_SMode);







  void MApi_AUDIO_SRS_DC(MS_U8 u8SRSenDC);







  void MApi_AUDIO_SRS_TruBass(MS_U8 u8SRSenTruBass);
# 2057 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SRS_SetTsxtPara(MS_U8 u8mode, MS_U8 u8value);







 void MApi_AUDIO_SetSRSTSHD(MS_U8 u8enTSHD);







  void Mapi_SOUND_TSHD_TruBass(MS_U8 u8TSHDenTruBass);







 void MApi_AUDIO_TSHD_Definition(MS_U8 u8TSHDenDefinition);







  void Mapi_SOUND_TSHD_Definition(MS_U8 u8TSHDenDefinition);
# 2098 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_SRS_SetTshdPara(MS_U8 u8mode, MS_U8 u8value);







 void MApi_AUDIO_COPY_Parameter(ADVSND_PARAM type, void* Parameter_ptr,MS_U32 size);
# 2121 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SetKTVInfo (AUDIO_KTV_MODEL modelType, AUDIO_KTV_PARAMTYPE paramType, MS_U32 param1, MS_U32 param2);
# 2131 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_GetKTVInfo (AUDIO_KTV_MODEL modelType, AUDIO_KTV_INFOTYPE infoType);
# 2144 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetMixModeVolume(AUDIO_SOURCE_INFO_TYPE eSourceType, AUDIO_MIX_VOL_TYPE VolType, MS_U8 u8Vol1, MS_U8 u8Vol2);
# 2155 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetMixModeMute(AUDIO_SOURCE_INFO_TYPE eSourceType, AUDIO_MIX_VOL_TYPE VolType, MS_BOOL EnMute);






 void MApi_AUDIO_PlayMenuSound(void);
# 2178 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_BOOL MApi_AUDIO_SetCertMode( Audio_CertMode CertType,Audio_CertEnable enable);
# 2192 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SetCommAudioInfo( Audio_COMM_infoType infoType, MS_VIRT param1, MS_VIRT param2 );






 MS_BOOL MApi_AUDIO_SetMpegInfo( Audio_MPEG_infoType infoType, MS_VIRT param1, MS_VIRT param2 );






MS_BOOL MApi_AUDIO_SetAC3Info( Audio_AC3_infoType infoType, MS_VIRT param1, MS_VIRT param2 );







 MS_BOOL MApi_AUDIO_SetAC3PInfo( Audio_AC3P_infoType infoType, MS_VIRT param1, MS_VIRT param2 );






MS_BOOL MApi_AUDIO_SetAACInfo( Audio_AAC_infoType infoType, MS_VIRT param1, MS_VIRT param2 );






MS_BOOL MApi_AUDIO_SetWmaInfo( Audio_WMA_infoType infoType, MS_VIRT param1, MS_VIRT param2 );






 MS_BOOL MApi_AUDIO_SetDTSCommonCtrl( Audio_DTS_infoType infoType, Audio_DTS_CtrlType ctrl_type );







#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
 long long MApi_AUDIO_GetCommAudioInfo( Audio_COMM_infoType infoType );
#else
 MS_U64 MApi_AUDIO_GetCommAudioInfo( Audio_COMM_infoType infoType );
#endif







 MS_U32 MApi_AUDIO_GetMpegInfo( Audio_MPEG_infoType infoType );







 MS_U32 MApi_AUDIO_GetAC3Info( Audio_AC3_infoType infoType );







 MS_U32 MApi_AUDIO_GetAC3PInfo( Audio_AC3P_infoType infoType );







 MS_U32 MApi_AUDIO_GetAACInfo( Audio_AAC_infoType infoType );







 MS_U32 MApi_AUDIO_GetWmaInfo( Audio_WMA_infoType infoType );







  MS_U32 MApi_AUDIO_GetDTSInfo( Audio_DTS_infoType infoType );
# 2314 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3)
MS_U8 MApi_AUDIO_XPCM_Param(XPCM_TYPE audioType, MS_U8 channels, MS_U32 sampleRate,
                                MS_U8 bitsPerSample, MS_U16 blockSize, MS_U16 samplePerBlock);
#else
 MS_U8 MApi_AUDIO_XPCM_Param(XPCM_TYPE audioType, MS_U8 channels, MS_U16 sampleRate,
                                MS_U8 bitsPerSample, MS_U16 blockSize, MS_U16 samplePerBlock);
#endif
# 2339 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3)
 void MApi_AUDIO_XPCM2_Param(XPCM_TYPE audioType, MS_U8 channels, MS_U32 sampleRate,
                                MS_U8 bitsPerSample, MS_U16 blockSize, MS_U16 samplePerBlock);

#else
void MApi_AUDIO_XPCM2_Param(XPCM_TYPE audioType, MS_U8 channels, MS_U16 sampleRate,
                                MS_U8 bitsPerSample, MS_U16 blockSize, MS_U16 samplePerBlock);
#endif
# 2356 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_U16 MApi_AUDIO_XPCM2_CheckIntStatus(void);
# 2376 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U8 MApi_AUDIO_RA8_Param(MS_U16 mNumCodecs, MS_U16 mSamples, MS_U16 mSampleRate,
                                MS_U16* Channels, MS_U16* Regions, MS_U16* cplStart, MS_U16* cplQbits,
                                MS_U16* FrameSize);

  En_DVB_melodyPlayStatus MApi_AUDIO_PlayMelody(En_DVB_melodyPlayCmdType eMelodyCmd, MS_VIRT* u32FileAddr,MS_U32 u32FileSize, MS_U32 u32DspReqAddr);
# 2389 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_Init(En_DVB_decSystemType enDecSystem);
# 2399 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_StartDecode(void);
# 2409 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_StartBrowse(void);
# 2419 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_StopDecode(void);
# 2429 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_PauseDecode(void);
# 2439 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U8 MApi_AUDIO_CheckPlayDone(void);
# 2449 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U16 MApi_AUDIO_GetResidualBufferSize(void);
# 2459 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U16 MApi_AUDIO_GetPCMBufferSize(MS_U16 u16BitRate);
# 2470 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U16 MApi_AUDIO_GetPCMBufferSize2(MS_U16 u16BitRate,MS_U16 u16SampleRate);
# 2480 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_GetCurrentFrameNumber(void);
# 2490 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U16 MApi_AUDIO_GetSampleRate(void);
# 2500 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_GetBitRate(void);
# 2510 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 Audio_MP3_LAYER MApi_AUDIO_GetLayer(void);
# 2520 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
 MS_U8 MApi_AUDIO_CheckInputRequest(MS_U32 *pU32WrtAddr, MS_U32 *pU32WrtBytes);
#else
 MS_U8 MApi_AUDIO_CheckInputRequest(MS_PHY *pPHYWrtAddr, MS_U32 *pU32WrtBytes);
#endif
# 2534 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetInput(void);
# 2544 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetSampleRateIndex(MS_U16 u16Index);
# 2558 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
#if defined(UFO_PUBLIC_HEADER_212)
void MApi_AUDIO_SetXPCMParam(XPCM_TYPE audioType, MS_U8 channels, MS_U32 sampleRate, MS_U8 bitsPerSample, MS_U16 blockSize, MS_U16 samplePerBlock);
 #else
void MApi_AUDIO_SetXPCMParam(XPCM_TYPE audioType, MS_U8 channels, MS_U16 sampleRate, MS_U8 bitsPerSample, MS_U16 blockSize, MS_U16 samplePerBlock);
#endif
# 2572 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_FileEndNotification(void);
# 2582 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_FileEndDataHandle(MS_U32 u32DataLeft);
# 2592 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_GetPlayTick(void);
# 2602 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U16 MApi_AUDIO_GetEsMEMCnt(void);
# 2613 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_SetASFParm(WMA_ASF_PARMTYPE parm_type, MS_U32 value);
# 2624 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_MM_SetInput (En_DVB_AudioDecoder AUDDecoderNo, MS_U8 u8IntTag);
# 2634 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_MM_CheckPlayDone (En_DVB_AudioDecoder AUDDecoderNo);
# 2645 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
 MS_U8 MApi_AUDIO_MM_CheckInputRequest(En_DVB_AudioDecoder AUDDecoderNo, MS_U32 *pU32WrtAddr, MS_U32 *pU32WrtBytes);
#else
 MS_U8 MApi_AUDIO_MM_CheckInputRequest(En_DVB_AudioDecoder AUDDecoderNo, MS_PHY *pPHYWrtAddr, MS_U32 *pU32WrtBytes);
#endif
# 2659 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_DmaReader_Init(SAMPLE_RATE sampleRate);
# 2670 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_DmaReader_AllInput_Init(void);
# 2680 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_DmaReader_WritePCM(void* buffer, MS_U32 bytes);
# 2690 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_DmaWriter_Init(void);
# 2701 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_USBPCM_Enable(MS_BOOL bEnable);
# 2713 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_USBPCM_SetFlag(MS_BOOL bEnable);
# 2725 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_USBPCM_GetFlag(void);
# 2737 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_USBPCM_GetMemInfo(AUDIO_UPLOAD_INFO *uploadInfo);
# 2749 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_PCMCapture_Init(const AUDIO_DEVICE_TYPE eID, const AUDIO_CAPTURE_SOURCE_TYPE eSource);
# 2760 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_PCMCapture_Start(const AUDIO_DEVICE_TYPE eID);
# 2771 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_PCMCapture_Stop(const AUDIO_DEVICE_TYPE eID);
# 2784 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_PCMCapture_Read(const AUDIO_DEVICE_TYPE eID, void* buffer, const MS_U32 bytes);
# 2797 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_VoIP_Config(AUDIO_VoIP_CONFIG_TYPE configType, MS_U32 param1, MS_U32 param2);
# 2808 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_BOOL MApi_AUDIO_ALSA_Check(void);
# 2819 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_BOOL MApi_AUDIO_ALSA_Enable(MS_BOOL bEnable);
# 2830 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
 MS_BOOL MApi_AUDIO_UNI_CheckDecodeDone(MS_U32 *pU32WrtAddr, MS_U32 *pU32WrtBytes);
#else
 MS_BOOL MApi_AUDIO_UNI_CheckDecodeDone(MS_PHY *pPHYWrtAddr, MS_U32 *pU32WrtBytes);
#endif
# 2844 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 void MApi_AUDIO_UNI_SetOutput (MS_U32 PCMOutCnt);
# 2854 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_UNI_Set_PCMInputWriteAddr (MS_U32 PCMIn_Wptr);
# 2863 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  MS_U32 MApi_AUDIO_UNI_Get_OutPCMLevel (void);
# 2872 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_RingTask(audioRingTask* auRingTask) ;
# 2881 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
  void MApi_AUDIO_Ring_DataTransfer(audioRingTask* auRingTask, audioRingTask* auRingTask_1);
# 2891 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_MM2_initAesInfo( AUDIO_DEC_ID dec_id );
# 2902 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_MM2_checkAesInfo( AUDIO_DEC_ID dec_id, AES_INFO *aes_info );
# 2915 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_MM2_inputAesFinished( AUDIO_DEC_ID dec_id, MS_U32 es_size, MS_BOOL ptsExist, MS_U64 pts );
# 2924 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_BOOL MApi_AUDIO_SetAudioParam2( AUDIO_DEC_ID DecId, Audio_ParamType paramType, MS_VIRT Param );




 MS_BOOL MApi_AUDIO_GetAudioInfo2( AUDIO_DEC_ID DecId, Audio_InfoType infoType, void * pInfo );
# 2942 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
MS_PHY MApi_AUDIO_GetDDRInfo(AUDIO_DEC_ID DecId, EN_AUDIO_DDRINFO DDRInfo);

MS_U32 MApi_AUDIO_GetCaps(AUDIO_DEC_ID DecId, MS_U32 *pCaps);
# 2954 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_PCM_Open(void *pData);
# 2964 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_PCM_Close(MS_S32 s32DeviceId);
# 2974 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_PCM_Start(MS_S32 s32DeviceId);
# 2984 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_PCM_Stop(MS_S32 s32DeviceId);
# 2996 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_PCM_Set(MS_S32 s32DeviceId, MS_U32 u32Cmd, const void *pData);
# 3008 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_PCM_Get(MS_S32 s32DeviceId, MS_U32 u32Cmd, void *pData);
# 3020 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_PCM_Read(MS_S32 s32DeviceId, void *pBuf, MS_U32 u32Size);
# 3032 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_PCM_Write(MS_S32 s32DeviceId, const void *pBuf, MS_U32 u32Size);
# 3042 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_PCM_Flush(MS_S32 s32DeviceId);

#if defined(UFO_PUBLIC_HEADER_700)
# 3057 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_ENCODER_Open(const char *pName);
# 3067 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_ENCODER_Close(MS_S32 s32DeviceId);
# 3077 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_ENCODER_Start(MS_S32 s32DeviceId);
# 3087 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_ENCODER_Stop(MS_S32 s32DeviceId);
# 3105 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_ENCODER_Ioctl(MS_S32 s32DeviceId, const char *pCmd, void *pData);
# 3117 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_U32 MApi_AUDIO_ENCODER_Read(MS_S32 s32DeviceId, void *pBuf, MS_U32 u32Size);
# 3127 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiAUDIO.h"
 MS_S32 MApi_AUDIO_ENCODER_Flush(MS_S32 s32DeviceId);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvXC_HDMI_if_EX.h"
#ifndef DRVXC_HDMI_IF_EX_H
#define DRVXC_HDMI_IF_EX_H 

#include "MsCommon.h"


#include "drvXC_IOPort_EX.h"


#include "apiXC_EX.h"

#ifdef __cplusplus
extern "C"
{
#endif





#ifdef MDRV_HDMI_EX_C
#define INTERFACE 
#else
#define INTERFACE extern
#endif




#define _HDMI_EX_BYTE_0 0x00
#define _HDMI_EX_BYTE_1 0x01
#define _HDMI_EX_BYTE_2 0x02
#define _HDMI_EX_BYTE_3 0x03
#define _HDMI_EX_BYTE_4 0x04
#define _HDMI_EX_BYTE_5 0x05
#define _HDMI_EX_BYTE_6 0x06
#define _HDMI_EX_BYTE_7 0x07
#define _HDMI_EX_BYTE_8 0x08
#define _HDMI_EX_BYTE_9 0x09
#define _HDMI_EX_BYTE_10 0x0A
#define _HDMI_EX_BYTE_11 0x0B
#define _HDMI_EX_BYTE_12 0x0C
#define _HDMI_EX_BYTE_13 0x0D

#define MSIF_HDMI_EX_LIB_CODE {'H','D','M','I'}
#define MSIF_HDMI_EX_LIBVER {'0','1'}
#define MSIF_HDMI_EX_BUILDNUM {'0','7'}
#define MSIF_HDMI_EX_CHANGELIST {'0','0','3','5','1','6','6','3'}
#define HDMI_EX_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_HDMI_EX_LIB_CODE , \
    MSIF_HDMI_EX_LIBVER , \
    MSIF_HDMI_EX_BUILDNUM , \
    MSIF_HDMI_EX_CHANGELIST, \
    MSIF_OS






typedef enum
{
    E_HDMI_EX_REST_AVMUTE = _XC_EX_BIT(8),
    E_HDMI_EX_REST_Y_COLOR = _XC_EX_BIT(9),
    E_HDMI_EX_REST_PIXEL_REPETITION = _XC_EX_BIT(10),
    E_HDMI_EX_REST_FRAME_REPETITION = _XC_EX_BIT(11),
    E_HDMI_EX_REST_GCP_PKT = _XC_EX_BIT(12),
    E_HDMI_EX_REST_DEEP_COLOR_FIFO = _XC_EX_BIT(13),
    E_HDMI_EX_REST_RESERVE = _XC_EX_BIT(14),
    E_HDMI_EX_REST_HDMI_STATUS = _XC_EX_BIT(15),
} HDMI_EX_REST;




typedef enum
{


    E_HDMI_EX_AF_AR_Reserve_0 = 0x00,
    E_HDMI_EX_AF_AR_Reserve_1 = 0x01,
    E_HDMI_EX_AF_AR_16x9_Top = 0x02,
    E_HDMI_EX_AF_AR_14x9_Top = 0x03,
    E_HDMI_EX_AF_AR_GT_16x9 = 0x04,
    E_HDMI_EX_AF_AR_Reserve_5 = 0x05,
    E_HDMI_EX_AF_AR_Reserve_6 = 0x06,
    E_HDMI_EX_AF_AR_Reserve_7 = 0x07,
    E_HDMI_EX_AF_AR_SAME = 0x08,
    E_HDMI_EX_AF_AR_4x3_C = 0x09,
    E_HDMI_EX_AF_AR_16x9_C = 0x0A,
    E_HDMI_EX_AF_AR_14x9_C = 0x0B,
    E_HDMI_EX_AF_AR_Reserve_12 = 0x0C,
    E_HDMI_EX_AF_AR_4x3_with_14x9_C = 0x0D,
    E_HDMI_EX_AF_AR_16x9_with_14x9_C = 0x0E,
    E_HDMI_EX_AF_AR_16x9_with_4x3_C = 0x0F,


    E_HDMI_EX_Pic_AR_NODATA = 0x00,
    E_HDMI_EX_Pic_AR_4x3 = 0x10,
    E_HDMI_EX_Pic_AR_16x9 = 0x20,
    E_HDMI_EX_Pic_AR_RSV = 0x30,
} HDMI_EX_AR_TYPE;




typedef enum
{
    E_HDMI_EX_AVI_INFOFRAME_VERSION_NON,
    E_HDMI_EX_AVI_INFOFRAME_VERSION1,
    E_HDMI_EX_AVI_INFOFRAME_VERSION2
} HDMI_EX_AVI_INFOFRAME_VERSION;

#define HDMI_EX_AR_INIT_VALUE (E_HDMI_EX_Pic_AR_RSV)
#define HDMI_EX_AR_REG_MASK (0x3F)
#define HDMI_EX_AFAR_MASK (0x0F)
#define HDMI_EX_AR_MASK (0x30)


typedef enum
{
    E_HDMI_EX_GCTRL_AVMUTE = 0,
    E_HDMI_EX_GCTRL_DEFAULT_PHASE,
    E_HDMI_EX_GCTRL_LAST_PP,
    E_HDMI_EX_GCTRL_PRE_LPP,
    E_HDMI_EX_GCTRL_CD_VAL,
    E_HDMI_EX_GCTRL_PP_VAL,
    E_HDMI_EX_GCTRL_ALL
} HDMI_EX_GControl_INFO;


typedef enum
{
    E_HDMI_EX_PLL_CTRL_L=0,
    E_HDMI_EX_PLL_CTRL_MANUAL_DIV,
    E_HDMI_EX_PLL_CTRL_PORST,
    E_HDMI_EX_PLL_CTRL_RESET_TP,
    E_HDMI_EX_PLL_CTRL_RESET_TF,
    E_HDMI_EX_PLL_CTRL_RESET_TI,
    E_HDMI_EX_PLL_CTRL_VCO_OFFSET,
    E_HDMI_EX_PLL_CTRL_RESET,
    E_HDMI_EX_PLL_CTRL_PWRDOWN,

    E_HDMI_EX_PLL_CTRL_H,
    E_HDMI_EX_PLL_CTRL_KN,
    E_HDMI_EX_PLL_CTRL_RCTRL,
    E_HDMI_EX_PLL_CTRL_ICTRL,
} HDMI_EX_PLL_CTRL;


typedef enum
{
    E_HDMI_EX_PLL_CTRL2_L,
    E_HDMI_EX_PLL_CTRL2_KP,
    E_HDMI_EX_PLL_CTRL2_KM,

    E_HDMI_EX_PLL_CTRL2_H,
    E_HDMI_EX_PLL_CTRL2_DDIV,
    E_HDMI_EX_PLL_CTRL2_FBDIV,
} HDMI_EX_PLL_CTRL2;

#ifndef DRVXC_HDMI_IF_H

typedef struct
{
    MS_BOOL bIsHDMIMode;
    MS_BOOL bMuteHDMIVideo;

    MS_BOOL bMuteHDMIAudio;
    MS_BOOL bEnableNonPCM;
    MS_U8 u8AudioStbCnt;


    MS_U8 u8AudioForceEnableCnt;

    MS_U8 u8ColorFormat;
    MS_U8 u8LostHDMICounter;
    MS_BOOL bColorFMTChange;
    MS_U8 u8PreClolrFormat;
    MS_U8 u8AspectRatio;
} HDMI_POLLING_STATUS_t;
#endif

typedef enum
{
    E_HDMI_EX_DVI_CHANNEL_R,
    E_HDMI_EX_DVI_CHANNEL_G,
    E_HDMI_EX_DVI_CHANNEL_B,
} HDMI_EX_DVI_CHANNEL_TYPE;


typedef enum
{
    E_HDMI_EX_COLOR_RGB,
    E_HDMI_EX_COLOR_YUV_422,
    E_HDMI_EX_COLOR_YUV_444,
    E_HDMI_EX_COLOR_RESERVED,
    E_HDMI_EX_COLOR_DEFAULT = E_HDMI_EX_COLOR_RGB,
    E_HDMI_EX_COLOR_UNKNOWN = 7,
} HDMI_EX_COLOR_FORMAT;


typedef enum
{
    E_HDMI_EX_COLOR_RANGE_DEFAULT,
    E_HDMI_EX_COLOR_RANGE_LIMIT,
    E_HDMI_EX_COLOR_RANGE_FULL,
    E_HDMI_EX_COLOR_RANGE_RESERVED
} HDMI_EX_COLOR_RANGE;


typedef enum
{
    E_HDMI_EX_CONTENT_NoData = 0,
    E_HDMI_EX_CONTENT_Graphics,
    E_HDMI_EX_CONTENT_Photo,
    E_HDMI_EX_CONTENT_Cinema,
    E_HDMI_EX_CONTENT_Game,
} HDMI_EX_CONTENT_TYPE;


typedef enum
{
    E_HDMI_EX_EXT_COLOR_XVYCC601,
    E_HDMI_EX_EXT_COLOR_XVYCC709,
    E_HDMI_EX_EXT_COLOR_SYCC601,
    E_HDMI_EX_EXT_COLOR_ADOBEYCC601,
    E_HDMI_EX_EXT_COLOR_ADOBERGB,
    E_HDMI_EX_EXT_COLOR_DEFAULT = E_HDMI_EX_EXT_COLOR_XVYCC601,
    E_HDMI_EX_EXT_COLOR_UNKNOWN = 7,
} HDMI_EX_EXT_COLORIMETRY_FORMAT;


typedef enum
{
    E_HDMI_EX_EQ_2M,
    E_HDMI_EX_EQ_10M,
    E_HDMI_EX_EQ_15M,
    E_HDMI_EX_EQ_MAX,
    E_HDMI_EX_EQ_USER_DEFINE,
} HDMI_EX_EQ;


typedef enum
{
    E_HDMI_EX_PKT_MPEG = _XC_EX_BIT(0),
    E_HDMI_EX_PKT_AUI = _XC_EX_BIT(1),
    E_HDMI_EX_PKT_SPD = _XC_EX_BIT(2),
    E_HDMI_EX_PKT_AVI = _XC_EX_BIT(3),
    E_HDMI_EX_PKT_GC = _XC_EX_BIT(4),
    E_HDMI_EX_PKT_ASAMPLE = _XC_EX_BIT(5),
    E_HDMI_EX_PKT_ACR = _XC_EX_BIT(6),
    E_HDMI_EX_PKT_VS = _XC_EX_BIT(7),
    E_HDMI_EX_PKT_NULL = _XC_EX_BIT(8),
    E_HDMI_EX_PKT_ISRC2 = _XC_EX_BIT(9),
    E_HDMI_EX_PKT_ISRC1 = _XC_EX_BIT(10),
    E_HDMI_EX_PKT_ACP = _XC_EX_BIT(11),
    E_HDMI_EX_PKT_ONEBIT_AUD = _XC_EX_BIT(12),
} HDMI_EX_PACKET_STATE;

typedef enum
{
    E_HDMI_EX_CAPS_DVI_ADJ_70M = _XC_EX_BIT(0),
    E_HDMI_EX_CAPS_VSYNC_END_EN = _XC_EX_BIT(1),
} HDMI_EX_FUNC_CAPS;


typedef struct
{
    MS_U16 PKT_MPEG_VALUE;
    MS_U16 PKT_AUI_VALUE;
    MS_U16 PKT_SPD_VALUE;
    MS_U16 PKT_AVI_VALUE;
    MS_U16 PKT_GC_VALUE;
    MS_U16 PKT_ASAMPLE_VALUE;
    MS_U16 PKT_ACR_VALUE;
    MS_U16 PKT_VS_VALUE;
    MS_U16 PKT_NULL_VALUE;
    MS_U16 PKT_ISRC2_VALUE;
    MS_U16 PKT_ISRC1_VALUE;
    MS_U16 PKT_ACP_VALUE;
    MS_U16 PKT_ONEBIT_AUD_VALUE;
} HDMI_EX_PACKET_VALUE;

typedef struct
{
    MS_U8 AVMuteStatus;
    MS_U8 AudioNotPCM;
    MS_U8 PreAudiostatus;
    MS_U8 ChecksumErrOrBCHParityErr;
    MS_U8 PacketColorFormat;
    MS_U8 AspectRatio;
    MS_U8 AudioPacketErr;
    MS_U8 ACPType;
} HDMI_EX_PACKET_STATUS;


typedef struct
{
    HDMI_EX_PACKET_VALUE enPKT_Value;
    HDMI_EX_PACKET_STATUS enPKT_Status;
} HDMI_EX_PACKET_INFO, *P_HDMI_EX_PACKET_INFO;


typedef struct
{
    MS_BOOL b_St_HDMI_Mode;
    MS_BOOL b_St_Reserve_1;
    MS_BOOL b_St_HDCP_Ver;
    MS_BOOL b_St_AVMute;
    MS_BOOL b_St_ENC_En;
    MS_BOOL b_St_AKsv_Rcv;
    MS_BOOL b_St_ENC_Dis;
    MS_BOOL b_St_Reserve_7;
} HDCP_EX_STATUS_INFO;


typedef enum
{
    E_HDMI_EX_BLACK_LEVEL_LOW = 0,
    E_HDMI_EX_BLACK_LEVEL_HIGH,
} HDMI_EX_BLACK_LEVEL;


typedef enum
{
    E_XC_EX_PROG_DVI0_EDID = 0x00,
    E_XC_EX_PROG_DVI1_EDID = 0x01,
    E_XC_EX_PROG_DVI2_EDID = 0x02,
    E_XC_EX_PROG_DVI3_EDID = 0x03,
    E_XC_EX_PROG_VGA_EDID = 0x10,
} XC_EX_DDCRAM_PROG_TYPE;

typedef struct
{
    MS_U8 *EDID;
    MS_U16 u16EDIDSize;
    XC_EX_DDCRAM_PROG_TYPE eDDCProgType;

    MS_U16 u16CECPhyAddr;
    MS_U8 u8CECPhyAddrIdxL;
    MS_U8 u8CECPhyAddrIdxH;
} XC_EX_DDCRAM_PROG_INFO;



#ifndef DRVXC_HDMI_IF_H

typedef struct
{
    MS_BOOL bHPD_OK;
    MS_U16 u16HPD_Counter;
    MS_U16 u16HDCP_KeyCounter;
    MS_U16 u16HDCP_KeyChkSum;
    MS_BOOL bIsPullHighHPD;
    MS_U8 u8BKSV[5];

} HDCP_POLLING_STATUS_t;
#endif




typedef enum
{

    E_HDMI_EX_RET_FAIL = 0,

    E_HDMI_EX_RET_OK,
} HDMI_EX_RET_VALUE;



typedef enum
{
    E_HDMI_EX_NO_ADDITIONAL_FORMAT,
    E_HDMI_EX_4Kx2K_FORMAT,
    E_HDMI_EX_3D_FORMAT,
    E_HDMI_EX_RESERVED,
    E_HDMI_EX_NA
} HDMI_EX_ADDITIONAL_VIDEO_FORMAT;

typedef enum
{
    E_HDMI_EX_VIC_4Kx2K_30Hz = 0x01,
    E_HDMI_EX_VIC_4Kx2K_25Hz = 0x02,
    E_HDMI_EX_VIC_4Kx2K_24Hz = 0x03,
    E_HDMI_EX_VIC_4Kx2K_24Hz_SMPTE = 0x04,
    E_HDMI_EX_VIC_RESERVED,
    E_HDMI_EX_VIC_NA
} HDMI_EX_VIC_4Kx2K_CODE;

typedef enum
{
    E_HDMI_EX_3D_EXT_DATA_HOR_SUB_SAMPL_0,
    E_HDMI_EX_3D_EXT_DATA_HOR_SUB_SAMPL_1,
    E_HDMI_EX_3D_EXT_DATA_HOR_SUB_SAMPL_2,
    E_HDMI_EX_3D_EXT_DATA_HOR_SUB_SAMPL_3,
    E_HDMI_EX_3D_EXT_DATA_QUINCUNX_MATRIX_0,
    E_HDMI_EX_3D_EXT_DATA_QUINCUNX_MATRIX_1,
    E_HDMI_EX_3D_EXT_DATA_QUINCUNX_MATRIX_2,
    E_HDMI_EX_3D_EXT_DATA_QUINCUNX_MATRIX_3,
    E_HDMI_EX_3D_EXT_DATA_RESERVE,
    E_HDMI_EX_3D_EXT_DATA_MODE_MAX,
} HDMI_EX_3D_EXT_DATA;

typedef enum
{
    E_HDMI_EX_3D_META_DATA_PARALLAX_ISO23002_3,
    E_HDMI_EX_3D_META_DATA_RESERVE,
    E_HDMI_EX_3D_META_DATA_MAX,
} HDMI_EX_3D_META_DATA_TYPE;

typedef struct
{
    MS_BOOL b3D_Meta_Present;
    HDMI_EX_3D_META_DATA_TYPE t3D_Metadata_Type;
    MS_U8 u83D_Metadata_Length;
    MS_U8 u83D_Metadata[23];
} HDMI_EX_3D_META_FIELD;





typedef struct
{
    MS_U8 u8SupportPorts;
} HDMI_EX_INFO;




typedef struct
{
    MS_BOOL bIsInitialized;
    MS_BOOL bIsRunning;
} HDMI_EX_Status;







DLL_PUBLIC extern HDMI_POLLING_STATUS_t g_HdmiPollingStatus;


DLL_PUBLIC extern HDCP_POLLING_STATUS_t g_HdcpPollingStatus;

DLL_PUBLIC extern MS_U16 g_AVMUTEMissingCounter;
DLL_PUBLIC extern MS_U16 g_AVIMissingCounter;
DLL_PUBLIC extern MS_U16 g_ACPMissingCounter;

#ifdef DVI_NEW_Patch

DLL_PUBLIC extern MS_U16 g_DVI70MhzPollingCounter;
DLL_PUBLIC extern MS_U8 g_DVI70MhzUnstableCounter;
DLL_PUBLIC extern MS_BOOL g_bDVILess70MHz;

#endif



DLL_PUBLIC INTERFACE HDMI_EX_RET_VALUE MDrv_HDMI_EX_GetLibVer(const MSIF_Version **ppVersion);
DLL_PUBLIC INTERFACE HDMI_EX_RET_VALUE MDrv_HDMI_EX_GetInfo(HDMI_EX_INFO *pInfo);
DLL_PUBLIC INTERFACE HDMI_EX_RET_VALUE MDrv_HDMI_EX_GetStatus(HDMI_EX_Status *pStatus);
DLL_PUBLIC INTERFACE MS_BOOL MDrv_HDMI_EX_Get_AVIInfoActiveInfoPresent(void);

DLL_PUBLIC INTERFACE MS_U16 MDrv_HDMI_EX_Func_Caps(void);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_init( XC_DEVICE_ID *pDeviceId );
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_Exit( XC_DEVICE_ID *pDeviceId );
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_pkt_reset( XC_DEVICE_ID *pDeviceId, HDMI_EX_REST breset );
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_pullhpd( MS_BOOL bHighLow, E_MUX_INPUTPORT enInputPortType, MS_BOOL bInverse);
DLL_PUBLIC INTERFACE MS_U16 MDrv_HDMI_EX_GC_Info(HDMI_EX_GControl_INFO gcontrol);
DLL_PUBLIC INTERFACE HDMI_EX_PACKET_VALUE MDrv_HDMI_EX_Packet_Received(MS_BOOL bEnable);
DLL_PUBLIC INTERFACE HDMI_EX_COLOR_FORMAT MDrv_HDMI_EX_Get_ColorFormat(void);
DLL_PUBLIC INTERFACE HDMI_EX_COLOR_RANGE MDrv_HDMI_EX_Get_ColorRange(void);
DLL_PUBLIC INTERFACE HDMI_EX_CONTENT_TYPE MDrv_HDMI_EX_Get_Content_Type(void);
DLL_PUBLIC INTERFACE HDMI_EX_EXT_COLORIMETRY_FORMAT MDrv_HDMI_EX_Get_ExtColorimetry(void);


DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_Set_EQ(XC_DEVICE_ID *pDeviceId, HDMI_EX_EQ enEq, MS_U8 u8EQValue);
DLL_PUBLIC INTERFACE MS_BOOL MDrv_HDMI_EX_Set_EQ_To_Port(XC_DEVICE_ID *pDeviceId, HDMI_EX_EQ enEq, MS_U8 u8EQValue, E_MUX_INPUTPORT enInputPortType);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_Audio_MUTE_Enable(MS_U16 u16MuteEvent, MS_U16 u16MuteMask);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_Audio_Status_Clear(void);

DLL_PUBLIC INTERFACE HDMI_EX_AR_TYPE MDrv_HDMI_EX_Get_AspectRatio(MS_BOOL bEn_PAR, MS_BOOL bEn_AFAR);
DLL_PUBLIC INTERFACE HDMI_EX_AR_TYPE MDrv_HDMI_EX_Get_ActiveFormat_AspectRatio(MS_BOOL bEn_AFAR);
DLL_PUBLIC INTERFACE HDMI_EX_AVI_INFOFRAME_VERSION MDrv_HDMI_EX_Get_AVIInfoFrameVer(void);

DLL_PUBLIC INTERFACE MS_U8 MDrv_HDMI_EX_err_status_update(MS_U8 u8value, MS_BOOL bread);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_Get_PollingStatus(HDMI_POLLING_STATUS_t **pStatus);
DLL_PUBLIC INTERFACE MS_BOOL MDrv_HDMI_EX_IsHDMI_Mode(void);

DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_Get_MID_info(MS_U8 * pu8ManufactorData);
DLL_PUBLIC INTERFACE MS_BOOL MDrv_HDMI_EX_get_packet_value(HDMI_EX_PACKET_STATE u8state, MS_U8 u8byte_idx, MS_U8 *pValue);


DLL_PUBLIC INTERFACE MS_U16 MDrv_DVI_EX_ChannelPhaseStatus( HDMI_EX_DVI_CHANNEL_TYPE u8Channel);
DLL_PUBLIC INTERFACE void MDrv_DVI_EX_SoftwareReset( MS_U16 u16Reset );
DLL_PUBLIC INTERFACE void mdrv_dvi_ex_reset(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC INTERFACE void MDrv_DVI_EX_ClkPullLow(MS_BOOL bPullLow, E_MUX_INPUTPORT enInputPortType);
DLL_PUBLIC INTERFACE void MDrv_DVI_EX_SwitchSrc(E_MUX_INPUTPORT enInputPortType);
DLL_PUBLIC INTERFACE MS_BOOL MDrv_HDMI_EX_SetForClockLessThan70Mhz( E_MUX_INPUTPORT InputSourceType );
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_dvi_adjust( MS_BOOL bClockLessThan70MHz);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_SetUpdatePhaseLineCount(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE enInputSourceType);



DLL_PUBLIC INTERFACE void MDrv_HDCP_EX_Enable(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);
DLL_PUBLIC INTERFACE MS_BOOL MDrv_HDMI_EX_SetHdcpEnable(E_MUX_INPUTPORT enInputPortType,MS_BOOL bEnable);
DLL_PUBLIC INTERFACE void MDrv_HDCP_EX_ClearStatus( XC_DEVICE_ID *pDeviceId );
DLL_PUBLIC INTERFACE void MDrv_HDCP_EX_initproductionkey( MS_U8 * pu8HdcpKeyData );
DLL_PUBLIC INTERFACE HDCP_EX_STATUS_INFO* MDrv_HDCP_EX_GetStatus(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC INTERFACE void MDrv_HDCP_EX_Vsync_end_en(MS_BOOL bStable);


DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_audio_output( MS_BOOL bEnable );
DLL_PUBLIC INTERFACE MS_U8 MDrv_HDMI_EX_audio_cp_hdr_info(void);
DLL_PUBLIC INTERFACE MS_U8 MDrv_HDMI_EX_audio_channel_status(MS_U8 u8byte);


DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_READ_DDCRAM(XC_EX_DDCRAM_PROG_INFO *pstDDCRam_Info, MS_U32 u32SizeOfInfo);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_PROG_DDCRAM(XC_EX_DDCRAM_PROG_INFO *pstDDCRam_Info, MS_U32 u32SizeOfInfo);
DLL_PUBLIC INTERFACE MS_U8 MDrv_HDMI_EX_Get_Pixel_Repetition(void);


DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_3D_4Kx2K_Process(void);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_AVG_ScaleringDown(MS_BOOL btrue);
DLL_PUBLIC INTERFACE MS_BOOL MDrv_HDMI_EX_Check4K2K(void);
DLL_PUBLIC INTERFACE HDMI_EX_ADDITIONAL_VIDEO_FORMAT MDrv_HDMI_EX_Check_Additional_Format(void);
DLL_PUBLIC INTERFACE XC_EX_3D_INPUT_MODE MDrv_HDMI_EX_Get_3D_Structure(void);
DLL_PUBLIC INTERFACE HDMI_EX_3D_EXT_DATA MDrv_HDMI_EX_Get_3D_Ext_Data(void);
DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_Get_3D_Meta_Field(HDMI_EX_3D_META_FIELD *pdata);
DLL_PUBLIC INTERFACE MS_U8 MDrv_HDMI_EX_Get_VIC_Code(void);
DLL_PUBLIC INTERFACE HDMI_EX_VIC_4Kx2K_CODE MDrv_HDMI_EX_Get_4Kx2K_VIC_Code(void);

DLL_PUBLIC INTERFACE void MDrv_HDMI_EX_ARC_PINControl(E_MUX_INPUTPORT enInputPortType, MS_BOOL bEnable, MS_BOOL bDrivingHigh);



#if 0
INTERFACE MS_U8 u8PSDVIStableCount[4];
void MDrv_HDMI_ImmeswitchPS_Handler(void);
void MDrv_DVI_ForceAllPortsEnterPS(void);
#endif
#undef INTERFACE


#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse_v2.h"
#ifndef _XC_MODE_PARSE_H_
#define _XC_MODE_PARSE_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_MODEPARSE_INIT, *pstXC_MODEPARSE_INIT;

typedef struct DLL_PACKED
{
    MS_PCADC_MODETABLE_TYPE* ModeDB;
    MS_U8 u8NumberOfItems;
    XC_MODEPARSE_INPUT_INFO *psInputInfo;
    XC_MODEPARSE_RESULT eReturnValue;
} stXC_MODEPARSE_MATCHMODE, *pstXC_MODEPARSE_MATCHMODE;

typedef struct DLL_PACKED
{
    MS_PCADC_MODETABLE_TYPE_EX* ModeDB;
    MS_U8 u8NumberOfItems;
    XC_MODEPARSE_INPUT_INFO *psInputInfo;
    XC_MODEPARSE_RESULT eReturnValue;
} stXC_MODEPARSE_MATCHMODEEX, *pstXC_MODEPARSE_MATCHMODEEX;

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIPAPool.h"
#ifndef _DRVCMAPOOL_H_
#define _DRVCMAPOOL_H_ 

#if defined (MSOS_TYPE_LINUX)
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"

#define IPAPOOL_HEAP_NAME_MAX_LEN_Param 32
#define IPAPOOL_NAME_MAX_LONG_Param 128


enum IPA_SPACE_TYPE
{
    IPA_SPACE_TYPE_PA = 0,
    IPA_SPACE_TYPE_CMA = 1,
    IPA_IPA_SPACE_TYPE_INVALID = 0xFFFFFFFF
};

struct IPA_Pool_InstallIpcHandle_Param
{
    MS_U32 ipc_handle_id;
    MS_U32 pool_handle_id;
    MS_S32 error_code;
};

struct IPA_Pool_GetIpcHandle_Param
{
    MS_U32 pool_handle_id;
    MS_U32 ipc_handle_id;
    MS_S32 error_code;
};

struct IPA_Pool_Heap_Attr_Param
{
    MS_U32 heap_id;

    char name[IPAPOOL_HEAP_NAME_MAX_LEN_Param];
    MS_U64 heap_miu_start_offset;
    MS_U64 heap_length;
    MS_U32 miu;
    enum IPA_SPACE_TYPE heap_type;
    MS_S32 error_code;
};
enum IPA_DCACHE_FLUSH_TYPE_Param
{
    IPA_DCACHE_FLUSH_Param,
    IPA_DCACHE_INVALID_Param,
    IPA_DCACHE_FLUSH_INVALID_Param
};

struct IPA_Pool_DCacheFlush_Param
{
    MS_U64 virt_addr;
    MS_U64 length;
    enum IPA_DCACHE_FLUSH_TYPE_Param flush_type;
};

struct IPA_Pool_Unmap_Param
{
    MS_U64 virt_addr;
    MS_U64 length;
};


enum IPA_MAP_VA_TYPE_Param
{
    IPA_MAP_VA_NO_NEEDED_Param = 0,
    IPA_VA_CACHE_WRITE_BACK_Param = 1,
    IPA_VA_CACHE_WRITE_THROUGH_Param = 2,
    IPA_VA_CACHE_NONE_CACHE_Param = 3,
    IPA_VA_TYPE_MAX_Param = 0xFFFFFFFF
};

struct IPA_Pool_Map_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_U64 length;
    enum IPA_MAP_VA_TYPE_Param cache_type;

    MS_U64 virt_addr;
    MS_S32 error_code;
};

struct IPA_Pool_PutMem_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_U64 length;
};

struct IPA_Pool_GetMem_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_U64 length;
    MS_S32 error_code;
};

struct IPA_Pool_Init_Param
{
    MS_U32 space_id;
    char *pool_name;

    MS_U64 offset_in_heap;
    MS_U64 len;

    MS_U32 pool_handle_id;
    MS_U32 miu;
    enum IPA_SPACE_TYPE space_type;
    MS_S32 error_code;

    MS_U64 space_length;
    MS_U64 space_miu_start_offset;
};


enum IPA_event_Param
{
  IPA_EVENT_FREE_Param = 0,
  IPA_EVENT_NO_WAIT_Param,
  IPA_EVNET_NUM_Param
};

struct IPA_Pool_Event_Param
{
    enum IPA_event_Param event;
    MS_U32 pool_handle_id;
};

struct IPA_Pool_Polling_Param
{
    MS_U32 pool_handle_id;
    void (*polling_callback)(MS_U32 pool_handle_id,MS_U64 start,MS_U64 length);
};



enum PA_In_IPA_Pool_State_Param
{
    PA_NOT_IN_MIU_Param = (1<<0),
    PA_NOT_IN_HEAP_Param =(1<<1),
    PA_NOT_IN_POOL_Param =(1<<2),
    PA_ALLOCATED_Param =(1<<3),
    PA_CASE_NUM_Param
};
# 261 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIPAPool.h"
struct PA_In_IPA_Pool_Param
{
    MS_U64 PA;
    MS_S32 miu;

    MS_BOOL in_heap;
    MS_S32 space_id;
    enum IPA_SPACE_TYPE space_type;
    MS_U64 space_miu_start_offset;
    MS_U64 space_length;
    MS_U64 pa_offset_in_heap;

    MS_BOOL allocated;

    char pool_name[IPAPOOL_NAME_MAX_LONG_Param];
    MS_U64 pool_len;
    MS_U64 pool_offset_in_heap;
    MS_U64 pa_offset_in_pool;

    enum PA_In_IPA_Pool_State_Param pa_state;
    MS_S32 error_code;
};
# 296 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIPAPool.h"
struct Pool_To_PA_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;

    MS_U64 PA;
    MS_S32 error_code;


    MS_S32 miu;
    MS_U32 heap_id;
};





MS_BOOL __attribute__((weak)) MApi_IPA_Pool_Init(struct IPA_Pool_Init_Param * Init_Param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_Release(MS_U32 pool_handle_id);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_GetMem(struct IPA_Pool_GetMem_Param * get_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_PutMem(struct IPA_Pool_PutMem_Param * put_param);

MS_BOOL __attribute__((weak)) MApi_IPA_Pool_MapVA(struct IPA_Pool_Map_Param * map_param);
void __attribute__((weak)) MApi_IPA_Pool_UnmapVA(struct IPA_Pool_Unmap_Param * unmap_param);



MS_BOOL __attribute__((weak)) MApi_IPA_Pool_DCacheFlush(struct IPA_Pool_DCacheFlush_Param* dcache_flush_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_HEAP_ATTR(struct IPA_Pool_Heap_Attr_Param* heap_attr_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_GETIPCHANDLE(struct IPA_Pool_GetIpcHandle_Param* getipchandle_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_InstallIpcHandle(struct IPA_Pool_InstallIpcHandle_Param* installipchandle_param);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_GetMem_Timeout(struct IPA_Pool_GetMem_Param* get_param,MS_U32 timeout);
MS_BOOL __attribute__((weak)) MApi_IPA_Pool_Notify(struct IPA_Pool_Polling_Param *polling_param);
MS_BOOL __attribute__((weak)) PA_in_IPA_POOL_info(struct PA_In_IPA_Pool_Param * in_ipa_pool_info);
MS_BOOL __attribute__((weak)) IN_IPA_POOL_To_PA(struct Pool_To_PA_Param * in_ipa_pool_info);

    #ifdef __cplusplus
}
#endif
#endif
#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvWBLE.h"
#ifndef DRV_WBLE_H
#define DRV_WBLE_H 

#ifdef __cplusplus
extern "C"
{
#endif






#define MSIF_WBLE_LIB_CODE {'W','B','L','E'}
#define MSIF_WBLE_LIBVER {'0','0'}
#define MSIF_WBLE_BUILDNUM {'0','2'}
#define MSIF_WBLE_CHANGELIST {'0','0','2','7','5','5','7','8'}
#define WBLE_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_WBLE_LIB_CODE , \
    MSIF_WBLE_LIBVER , \
    MSIF_WBLE_BUILDNUM , \
    MSIF_WBLE_CHANGELIST, \
    MSIF_OS

#define WBLE_INITDATA_VERSION 1



typedef enum
{
    E_DRVWBLE_RET_FAIL = 0,
    E_DRVWBLE_RET_OK,
} E_DRVWBLE_ReturnValue;



void MDrv_WBLE_Init(void);
void MDrv_WBLE_EnableBLE(MS_BOOL bEnable);
void MDrv_WBLE_EnableWLE(MS_BOOL bEnable);
void MDrv_WBLE_SetBLE(MS_U8 u8Start, MS_U8 u8Slop);
void MDrv_WBLE_SetWLE(MS_U8 u8Start, MS_U8 u8Slop);
void MDrv_WBLE_Handler_BLEAvgLuma(MS_U8 u8AvgY, MS_U16 u16YTotalSum);
void MDrv_WBLE_Set_SlopeValue(MS_U8 u8Slope);

#ifdef __cplusplus
}
#endif



#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
#ifndef _API_MFE_V2_H_
#define _API_MFE_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "drv_mfe_st.h"

#include "MsTypes.h"
# 172 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef enum {
    MApi_CMD_MFE_Init = 0x0,
    MApi_CMD_MFE_Encode,
    MApi_CMD_MFE_GetVOL,
    MApi_CMD_MFE_CompressOnePicture,
    MApi_CMD_MFE_DeInit,
    MApi_CMD_MFE_PowerOff,
    MApi_CMD_MFE_GetOutBuffer,
    MApi_CMD_MFE_SetBitrateFramerate,
    MApi_CMD_MFE_SetColorFormat,
    MApi_CMD_MFE_ResetSPSPPS,
    MApi_CMD_MFE_SetFrameType,
    MApi_CMD_MFE_SetISR,
    MApi_CMD_MFE_GetHWCap,
    MApi_CMD_MFE_GetOutputInfo,
    MApi_CMD_MFE_SetVUI,
    MApi_CMD_MFE_GetConfig,
} E_MFE_V2_IOCTL_CMD;






typedef struct _MFE_INIT_PARAM
{
    PVR_Info* mfe_Info;
    MS_BOOL retVal;
}MFE_INIT_PARAM, *PMFE_INIT_PARAM;
# 209 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef struct _MFE_SET_PARAM
{
    PVR_Info* mfe_Info;
    MS_S32 frametype;
    MS_BOOL retVal;
}MFE_SET_PARAM, *PMFE_SET_PARAM;
# 223 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef struct _MFE_GETVOL_PARAM
{
    PVR_Info* mfe_Info;
    void *header_info;
    MS_BOOL retVal;
}MFE_GETVOL_PARAM, *PMFE_GETVOL_PARAM;
# 238 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef struct _MFE_COMPRESSONEPICTURE_PARAM
{
    PVR_Info* mfe_Info;
    MEMMAP_CUR_t YUVPlane;
    MS_BOOL bForceIframe;
    MS_BOOL retVal;
}MFE_COMPRESSONEPICTURE_PARAM, *PMFE_COMPRESSONEPICTURE_PARAM;
# 253 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef struct _MFE_GET_OBUF_PARAM
{
    PVR_Info* mfe_Info;
    MEMMAP_t* outbuf;
    MS_BOOL retVal;
}MFE_GET_OBUF_PARAM, *PMFE_GET_OBUF_PARAM;
# 268 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef struct _MFE_GET_HWCAP_PARAM
{
    PVR_Info* mfe_Info;
    MFE_HwCapV0 *pDrv;
    MS_U32 *HwCap_len;
    MS_BOOL retVal;
}MFE_GET_HWCAP_PARAM, *PMFE_GET_HWCAP_PARAM;
# 284 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef struct _MFE_GETOUTPUT_PARAM
{
    PVR_Info* mfe_Info;
    MS_S32 frametype;
    MS_S32 size;
    MS_BOOL retVal;
}MFE_GETOUTPUT_PARAM, *PMFE_GETOUTPUT_PARAM;
# 303 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
typedef struct _MFE_SETVUI_PARAM
{
    PVR_Info* mfe_Info;
    MS_U32 setLevel;
    MS_BOOL setVUI_aspect_ratio_info_present_flag;
    MS_U32 setVUI_aspect_ratio_idc;
    MS_U32 setVUI_sar_width;
    MS_U32 setVUI_sar_height;
    MS_BOOL retVal;
}MFE_SETVUI_PARAM, *PMFE_SETVUI_PARAM;







typedef struct _MFE_GET_CONFIG_PARAM
{
    PVR_Info* mfe_Info;
    MS_BOOL retVal;
}MFE_GET_CONFIG_PARAM, *PMFE_GET_CONFIG_PARAM;






void MFERegisterToUtopia(FUtopiaOpen ModuleType);
# 342 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
MS_U32 MFE_Open(void** ppInstance, MS_U32 u32ModuleVersion, void* pAttribute);
# 351 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
MS_U32 MFE_Close(void* pInstance);
# 362 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMFE_v2.h"
MS_U32 MFE_Ioctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);


#ifdef __cplusplus
}
#endif

#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCA_v2.h"
#ifndef __DRV_CA_V2_H__
#define __DRV_CA_V2_H__ 

#include "drvCA.h"

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum {
    E_MDRV_CMD_CA_Init,
    E_MDRV_CMD_CA_OTP_EnableSecureBoot,
    E_MDRV_CMD_CA_OTP_IsSecureBootEnabled,
    E_MDRV_CMD_CA_OTP_SetBlockLock,
    E_MDRV_CMD_CA_OTP_GetBlockLock,
    E_MDRV_CMD_CA_OTP_IsBlank,
    E_MDRV_CMD_CA_OTP_Read,
    E_MDRV_CMD_CA_OTP_Write,
    E_MDRV_CMD_CA_Locked,
    E_MDRV_CMD_CA_OTP_Lock,
    E_MDRV_CMD_CA_OTP_SetRSAextID,
    E_MDRV_CMD_CA_OTP_GetRSAextID,
    E_MDRV_CMD_CA_OTP_SetHASH1_REF_VER,
    E_MDRV_CMD_CA_OTP_GetHASH1_REF_VER,
    E_MDRV_CMD_CA_OTP_SetHASH_REF_VER,
    E_MDRV_CMD_CA_OTP_GetHASH_REF_VER,
    E_MDRV_CMD_CA_OTP_SetDebugPortMode,
    E_MDRV_CMD_CA_OTP_GetDebugPortMode,
    E_MDRV_CMD_CA_OTP_SetDeviceId,
    E_MDRV_CMD_CA_OTP_GetDeviceId,
    E_MDRV_CMD_CA_MaxDeviceIdSize,
    E_MDRV_CMD_CA_OTP_EnableSecureCWMode,
    E_MDRV_CMD_CA_OTP_IsSecureCWMode,
    E_MDRV_CMD_CA_Random,
    E_MDRV_CMD_CA_OTP_ReadCAVendor,

} eCAIoctlOpt;


typedef struct _CA_OTP_SETBLOCKLOCK
{
    MS_U32 u32Start;
    MS_U32 u32End;
    CA_LOCK_TYPE eLockType;
} CA_OTP_SETBLOCKLOCK;

typedef struct _CA_OTP_GETBLOCKLOCK
{
    MS_U32 *pu32Start;
    MS_U32 *pu32End;
    CA_LOCK_TYPE *peLockType;
} CA_OTP_GETBLOCKLOCK;

typedef struct _CA_OTP_ISBLANK
{
    MS_U32 u32addr;
} CA_OTP_ISBLANK;

typedef struct _CA_OTP_READ
{
    MS_U32 u32Addr;
    MS_U32 u32OTPValue;
} CA_OTP_READ;

typedef struct _CA_OTP_WRITE
{
    MS_U32 u32Addr;
    MS_U32 u32value;
} CA_OTP_WRITE;

typedef struct _CA_OTP_LOCK20
{
    CA_OTP_LOCK eLock;
} CA_OTP_LOCK20;

typedef struct _CA_OTP_SETRSAEXTID
{
    MS_U32 u32value;
} CA_OTP_SETRSAEXTID;

typedef struct _CA_OTP_GETRSAEXTID
{
    MS_U32 u32value;
} CA_OTP_GETRSAEXTID;

typedef struct _CA_OTP_SETHASH1REFVER
{
    MS_U32 u32HASH1_REF_VER;
} CA_OTP_SETHASH1REFVER;

typedef struct _CA_OTP_GETHASH1REFVER
{
    MS_U32 *pu32HASH1_REF_VER;
} CA_OTP_GETHASH1REFVER;

typedef struct _CA_OTP_SETHASHREFVER
{
    MS_U32 u32HASH0_REF_VER;
    MS_U32 u32HASH2_REF_VER;
} CA_OTP_SETHASHREFVER;

typedef struct _CA_OTP_GETHASHREFVER
{
    MS_U32 *pu32HASH0_REF_VER;
    MS_U32 *pu32HASH2_REF_VER;
} CA_OTP_GETHASHREFVER;

typedef struct _CA_OTP_SETDEBUGPORTMODE
{
    CA_DEBUG_PORT eDebugPort;
    CA_DEBUG_PORT_MODE eMode;
} CA_OTP_SETDEBUGPORTMODE;

typedef struct _CA_OTP_GETDEBUGPORTMODE
{
    CA_DEBUG_PORT eDebugPort;
    CA_DEBUG_PORT_MODE *eMode;
} CA_OTP_GETDEBUGPORTMODE;

typedef struct _CA_OTP_SETDEVICEID
{
    const MS_U8 *pu8Did;
    MS_U32 u32Size;
} CA_OTP_SETDEVICEID;

typedef struct _CA_OTP_GETDEVICEID
{
    MS_U8 *pu8Did;
    MS_U32 u32Size;
} CA_OTP_GETDEVICEID;

typedef struct _CA_MAXDEVICEIDSIZE
{
    MS_U32 u32MaxDeviceIdSize;
} CA_MAXDEVICEIDSIZE;

typedef struct _CA_RANDOM
{
    MS_U32 u32Random;
} CA_RANDOM;

typedef struct _CA_OTP_READCAVENDOR
{
    MS_U32 u32CAVendor;
} CA_OTP_READCAVENDOR;

MS_U32 CAOpen(void** pInstantTmp, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 CAClose(void* pInstantTmp);
MS_U32 CAIoctl(void* pInstantTmp, MS_U32 u32Cmd, void* pu32Args);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ATSC.h"
#ifndef _DRV_ATSC_H_
#define _DRV_ATSC_H_ 




#if !defined UTPA2
#define DMD_ATSC_UTOPIA_EN 1
#define DMD_ATSC_UTOPIA2_EN 0
#else
#define DMD_ATSC_UTOPIA_EN 0
#define DMD_ATSC_UTOPIA2_EN 1
#endif

#define DMD_ATSC_STR_EN 1
#define DMD_ATSC_MULTI_THREAD_SAFE 0
#define DMD_ATSC_MULTI_DMD_EN 1





#include "MsTypes.h"
#if DMD_ATSC_UTOPIA_EN || DMD_ATSC_UTOPIA2_EN
#ifndef MSIF_TAG
#include "MsVersion.h"
#endif
#include "MsCommon.h"
#endif
#if DMD_ATSC_UTOPIA2_EN || DMD_ATSC_STR_EN
#include "utopia.h"
#endif
# 144 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ATSC.h"
#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif

#if DMD_ATSC_MULTI_DMD_EN
#define DMD_ATSC_MAX_DEMOD_NUM 2
#else
#define DMD_ATSC_MAX_DEMOD_NUM 1
#endif

#if DMD_ATSC_UTOPIA_EN || DMD_ATSC_UTOPIA2_EN
#define MSIF_DMD_ATSC_LIB_CODE {'D','M','D','_','A','T', 'S','C','_'}
#define MSIF_DMD_ATSC_LIBVER {'0','0'}
#define MSIF_DMD_ATSC_BUILDNUM {'0','0' }
#define MSIF_DMD_ATSC_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_ATSC_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_ATSC_LIB_CODE, \
    MSIF_DMD_ATSC_LIBVER, \
    MSIF_DMD_ATSC_BUILDNUM, \
    MSIF_DMD_ATSC_CHANGELIST, \
    MSIF_OS
#endif

#ifndef BIT_
#define BIT_(n) (1 << (n))
#endif

#define DMD_ATSC_LOCK_VSB_PRE_LOCK BIT_(0)
#define DMD_ATSC_LOCK_VSB_FSYNC_LOCK BIT_(1)
#define DMD_ATSC_LOCK_VSB_CE_LOCK BIT_(2)
#define DMD_ATSC_LOCK_VSB_FEC_LOCK BIT_(3)

#define DMD_ATSC_LOCK_QAM_AGC_LOCK BIT_(8)
#define DMD_ATSC_LOCK_QAM_PRE_LOCK BIT_(9)
#define DMD_ATSC_LOCK_QAM_MAIN_LOCK BIT_(10)





typedef enum
{
    DMD_ATSC_HAL_CMD_Exit = 0,
    DMD_ATSC_HAL_CMD_InitClk,
    DMD_ATSC_HAL_CMD_Download,
    DMD_ATSC_HAL_CMD_FWVERSION,
    DMD_ATSC_HAL_CMD_SoftReset,
    DMD_ATSC_HAL_CMD_SetVsbMode,
    DMD_ATSC_HAL_CMD_Set64QamMode,
    DMD_ATSC_HAL_CMD_Set256QamMode,
    DMD_ATSC_HAL_CMD_SetModeClean,
    DMD_ATSC_HAL_CMD_Set_QAM_SR,
    DMD_ATSC_HAL_CMD_Active,
    DMD_ATSC_HAL_CMD_Check8VSB64_256QAM,
    DMD_ATSC_HAL_CMD_AGCLock,
    DMD_ATSC_HAL_CMD_Vsb_PreLock,
    DMD_ATSC_HAL_CMD_Vsb_FSync_Lock,
    DMD_ATSC_HAL_CMD_Vsb_CE_Lock,
    DMD_ATSC_HAL_CMD_Vsb_FEC_Lock,
    DMD_ATSC_HAL_CMD_QAM_PreLock,
    DMD_ATSC_HAL_CMD_QAM_Main_Lock,
    DMD_ATSC_HAL_CMD_ReadIFAGC,
    DMD_ATSC_HAL_CMD_CheckSignalCondition,
    DMD_ATSC_HAL_CMD_ReadSNRPercentage,
    DMD_ATSC_HAL_CMD_GET_QAM_SNR,
    DMD_ATSC_HAL_CMD_ReadPKTERR,
    DMD_ATSC_HAL_CMD_GetPreViterbiBer,
    DMD_ATSC_HAL_CMD_GetPostViterbiBer,
    DMD_ATSC_HAL_CMD_ReadFrequencyOffset,
    DMD_ATSC_HAL_CMD_TS_INTERFACE_CONFIG,
    DMD_ATSC_HAL_CMD_IIC_Bypass_Mode,
    DMD_ATSC_HAL_CMD_SSPI_TO_GPIO,
    DMD_ATSC_HAL_CMD_GPIO_GET_LEVEL,
    DMD_ATSC_HAL_CMD_GPIO_SET_LEVEL,
    DMD_ATSC_HAL_CMD_GPIO_OUT_ENABLE,
    DMD_ATSC_HAL_CMD_DoIQSwap,
    DMD_ATSC_HAL_CMD_GET_REG,
    DMD_ATSC_HAL_CMD_SET_REG,
    CMD_ATSC_HAL_CMD_GET_QAM_SNR
} DMD_ATSC_HAL_COMMAND;

#ifdef UTPA2
typedef struct DLL_PACKED
{
    MS_U8 Mode;
    MS_S16 FF;
    MS_S16 Rate;
} DMD_ATSC_CFO_DATA;

typedef struct DLL_PACKED
{
    MS_U32 BitErr;
    MS_U16 Error_window;
    MS_U32 Win_unit;
} DMD_ATSC_BER_DATA;

typedef struct DLL_PACKED
{
    MS_U16 noisepower;
    MS_U32 sym_num;
} DMD_ATSC_SNR_DATA;
#endif

typedef struct DLL_PACKED
{
    MS_U8 u8Pin;
    union
    {
        MS_BOOL bLevel;
        MS_BOOL bIsOut;
    };
} DMD_ATSC_GPIO_PIN_DATA;

typedef struct DLL_PACKED
{
    MS_U16 u16Addr;
    MS_U8 u8Data;
} DMD_ATSC_REG_DATA;

typedef enum
{
    DMD_ATSC_DBGLV_NONE,
    DMD_ATSC_DBGLV_INFO,
    DMD_ATSC_DBGLV_NOTICE,
    DMD_ATSC_DBGLV_WARNING,
    DMD_ATSC_DBGLV_ERR,
    DMD_ATSC_DBGLV_CRIT,
    DMD_ATSC_DBGLV_ALERT,
    DMD_ATSC_DBGLV_EMERG,
    DMD_ATSC_DBGLV_DEBUG
} DMD_ATSC_DbgLv;

typedef enum
{
    DMD_ATSC_DEMOD_ATSC_VSB,
    DMD_ATSC_DEMOD_ATSC_64QAM,
    DMD_ATSC_DEMOD_ATSC_256QAM,
    DMD_ATSC_DEMOD_ATSC_16QAM,
    DMD_ATSC_DEMOD_ATSC_32QAM,
    DMD_ATSC_DEMOD_ATSC_128QAM,
    DMD_ATSC_DEMOD_MAX,
    DMD_ATSC_DEMOD_NULL = DMD_ATSC_DEMOD_MAX
} DMD_ATSC_DEMOD_TYPE;

typedef enum
{
    DMD_ATSC_SIGNAL_NO = 0,
    DMD_ATSC_SIGNAL_WEAK = 1,
    DMD_ATSC_SIGNAL_MODERATE = 2,
    DMD_ATSC_SIGNAL_STRONG = 4,
    DMD_ATSC_SIGNAL_VERY_STRONG = 8
} DMD_ATSC_SIGNAL_CONDITION;

typedef enum
{
    DMD_ATSC_GETLOCK,
    DMD_ATSC_GETLOCK_VSB_AGCLOCK,
    DMD_ATSC_GETLOCK_VSB_PRELOCK,
    DMD_ATSC_GETLOCK_VSB_FSYNCLOCK,
    DMD_ATSC_GETLOCK_VSB_CELOCK,
    DMD_ATSC_GETLOCK_VSB_FECLOCK,
    DMD_ATSC_GETLOCK_QAM_AGCLOCK,
    DMD_ATSC_GETLOCK_QAM_PRELOCK,
    DMD_ATSC_GETLOCK_QAM_MAINLOCK
} DMD_ATSC_GETLOCK_TYPE;

typedef enum
{
    DMD_ATSC_LOCK,
    DMD_ATSC_CHECKING,
    DMD_ATSC_CHECKEND,
    DMD_ATSC_UNLOCK,
    DMD_ATSC_NULL
} DMD_ATSC_LOCK_STATUS;

typedef enum
{
    I_PAD,
    Q_PAD,
} DMD_ATSC_SEL_IQPAD;

typedef enum
{
    QAM_64,
    QAM_256,
} DMD_ATSC_QAM_TYPE;

typedef struct DLL_PACKED
{
    MS_U8 QAM_type;
    MS_U16 symbol_rate;
}DMD_J83B_Info;

typedef enum _eDMD_SEL
{
    DMD0 = 0,
    DMD1,
    HK,
}eDMD_SEL;


typedef struct DLL_PACKED
{

    MS_U16 u16VSBAGCLockCheckTime;
    MS_U16 u16VSBPreLockCheckTime;
    MS_U16 u16VSBFSyncLockCheckTime;
    MS_U16 u16VSBFECLockCheckTime;

    MS_U16 u16QAMAGCLockCheckTime;
    MS_U16 u16QAMPreLockCheckTime;
    MS_U16 u16QAMMainLockCheckTime;


    MS_U8 *u8DMD_ATSC_DSPRegInitExt;
    MS_U8 u8DMD_ATSC_DSPRegInitSize;
    MS_U8 *u8DMD_ATSC_InitExt;


    MS_U16 u16IF_KHZ;
    MS_BOOL bIQSwap;
    MS_U16 u16AGC_REFERENCE;
    MS_BOOL bTunerGainInvert;
    MS_BOOL bIsQPad;


    MS_U8 u8IS_DUAL;
    MS_BOOL bIsExtDemod;


    MS_U8 u1TsConfigByte_SerialMode : 1;
    MS_U8 u1TsConfigByte_DataSwap : 1;
    MS_U8 u1TsConfigByte_ClockInv : 1;
    MS_U8 u5TsConfigByte_DivNum : 5;


    MS_U8 u8I2CSlaveAddr;
    MS_U8 u8I2CSlaveBus;
    MS_BOOL (*I2C_WriteBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8addrcount, MS_U8* pu8addr, MS_U16 u16size, MS_U8* pu8data);
    MS_BOOL (*I2C_ReadBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8AddrNum, MS_U8* paddr, MS_U16 u16size, MS_U8* pu8data);


    MS_BOOL bIsUseSspiLoadCode;
    MS_BOOL bIsSspiUseTsPin;

    #if !DMD_ATSC_UTOPIA_EN && !DMD_ATSC_UTOPIA2_EN
    MS_U32 (*GetSystemTimeMS)(void);
    void (*DelayMS)(MS_U32 ms);
    MS_BOOL (*CreateMutex)(MS_BOOL enable);
    void (*LockDMD)(MS_BOOL enable);
    #endif
} DMD_ATSC_InitData;

typedef struct DLL_PACKED
{
    MS_VIRT virtDMDBaseAddr;

    MS_BOOL bInit;
    MS_BOOL bDownloaded;

    #if DMD_ATSC_STR_EN
    MS_BOOL bIsDTV;
    EN_POWER_MODE eLastState;
    #endif
    DMD_ATSC_DEMOD_TYPE eLastType;
    MS_U16 u16SymRate;

    MS_BOOL bIsQPad;

    MS_BOOL (*HAL_DMD_ATSC_IOCTL_CMD)(DMD_ATSC_HAL_COMMAND eCmd, void *pPara);
} DMD_ATSC_PriData;

typedef struct DLL_PACKED
{
    MS_U8 u8Version;
    MS_U32 u32ATSCScanTimeStart;
    MS_U32 u32ATSCFECLockTime;
    MS_U32 u32ATSCLockStatus;
} DMD_ATSC_Info;

typedef struct DLL_PACKED
{
    DMD_ATSC_InitData sDMD_ATSC_InitData;
    DMD_ATSC_PriData sDMD_ATSC_PriData;
    DMD_ATSC_Info sDMD_ATSC_Info;
} DMD_ATSC_ResData;





#ifdef __cplusplus
extern "C"
{
#endif

#ifndef MSOS_TYPE_LINUX_KERNEL
# 464 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ATSC.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SetDbgLevel(DMD_ATSC_DbgLv u8DbgLevel);




DLL_PUBLIC extern DMD_ATSC_Info* MDrv_DMD_ATSC_GetInfo(void);




DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GetLibVer(const MSIF_Version **ppVersion);




DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_Initial_Hal_Interface(void);
# 488 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ATSC.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_Init(DMD_ATSC_InitData *pDMD_ATSC_InitData, MS_U32 u32InitDataLen);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_Exit(void);



DLL_PUBLIC extern MS_U32 MDrv_DMD_ATSC_GetConfig(DMD_ATSC_InitData *psDMD_ATSC_InitData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SetConfig(DMD_ATSC_DEMOD_TYPE eType, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SetReset(void);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_Set_QAM_SR(DMD_ATSC_DEMOD_TYPE eType, MS_U16 symbol_rate);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SetActive(MS_BOOL bEnable);



#if DMD_ATSC_STR_EN
DLL_PUBLIC extern MS_U32 MDrv_DMD_ATSC_SetPowerState(EN_POWER_MODE u16PowerState);
#endif



DLL_PUBLIC extern DMD_ATSC_LOCK_STATUS MDrv_DMD_ATSC_GetLock(DMD_ATSC_GETLOCK_TYPE eType);



DLL_PUBLIC extern DMD_ATSC_DEMOD_TYPE MDrv_DMD_ATSC_GetModulationMode(void);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GetSignalStrength(MS_U16 *u16Strength);



DLL_PUBLIC extern DMD_ATSC_SIGNAL_CONDITION MDrv_DMD_ATSC_GetSignalQuality(void);



DLL_PUBLIC extern MS_U8 MDrv_DMD_ATSC_GetSNRPercentage(void);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GET_QAM_SNR(float *f_snr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_Read_uCPKT_ERR(MS_U16 *u16PacketErr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GetPreViterbiBer(float *ber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GetPostViterbiBer(float *ber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_ReadFrequencyOffset(MS_S16 *cfo);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SetSerialControl(MS_U8 u8TsConfigData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_IIC_BYPASS_MODE(MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SWITCH_SSPI_GPIO(MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GPIO_GET_LEVEL(MS_U8 u8Pin, MS_BOOL *bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GPIO_SET_LEVEL(MS_U8 u8Pin, MS_BOOL bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GPIO_OUT_ENABLE(MS_U8 u8Pin, MS_BOOL bEnableOut);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_DoIQSwap(MS_BOOL bIsQPad);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SetReg(MS_U16 u16Addr, MS_U8 u8Data);





#ifndef UTPA2



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SEL_DMD(eDMD_SEL eDMD_NUM);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_LoadFW(eDMD_SEL DMD_NUM);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_SetVsbMode(void);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_Set256QamMode(void);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_Set64QamMode(void);
#endif
# 635 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ATSC.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_Init(MS_U8 id, DMD_ATSC_InitData *pDMD_ATSC_InitData, MS_U32 u32InitDataLen);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_Exit(MS_U8 id);



DLL_PUBLIC extern MS_U32 MDrv_DMD_ATSC_MD_GetConfig(MS_U8 id, DMD_ATSC_InitData *psDMD_ATSC_InitData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_SetConfig(MS_U8 id, DMD_ATSC_DEMOD_TYPE eType, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_SetReset(MS_U8 id);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_Set_QAM_SR(MS_U8 id, DMD_ATSC_DEMOD_TYPE eType, MS_U16 symbol_rate);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_SetActive(MS_U8 id, MS_BOOL bEnable);



#if DMD_ATSC_STR_EN
DLL_PUBLIC extern MS_U32 MDrv_DMD_ATSC_MD_SetPowerState(MS_U8 id, EN_POWER_MODE u16PowerState);
#endif



DLL_PUBLIC extern DMD_ATSC_LOCK_STATUS MDrv_DMD_ATSC_MD_GetLock(MS_U8 id, DMD_ATSC_GETLOCK_TYPE eType);



DLL_PUBLIC extern DMD_ATSC_DEMOD_TYPE MDrv_DMD_ATSC_MD_GetModulationMode(MS_U8 id);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GetSignalStrength(MS_U8 id, MS_U16 *u16Strength);



DLL_PUBLIC extern DMD_ATSC_SIGNAL_CONDITION MDrv_DMD_ATSC_MD_GetSignalQuality(MS_U8 id);



DLL_PUBLIC extern MS_U8 MDrv_DMD_ATSC_MD_GetSNRPercentage(MS_U8 id);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GET_QAM_SNR(MS_U8 id, float *f_snr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_Read_uCPKT_ERR(MS_U8 id, MS_U16 *u16PacketErr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GetPreViterbiBer(MS_U8 id, float *ber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GetPostViterbiBer(MS_U8 id, float *ber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_ReadFrequencyOffset(MS_U8 id, MS_S16 *cfo);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_SetSerialControl(MS_U8 id, MS_U8 u8TsConfigData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_IIC_BYPASS_MODE(MS_U8 id, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_SWITCH_SSPI_GPIO(MS_U8 id, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GPIO_GET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL *bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GPIO_SET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GPIO_OUT_ENABLE(MS_U8 id, MS_U8 u8Pin, MS_BOOL bEnableOut);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_DoIQSwap(MS_U8 id, MS_BOOL bIsQPad);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_GetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 *pu8Data);





DLL_PUBLIC extern MS_BOOL MDrv_DMD_ATSC_MD_SetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 u8Data);

#endif

#ifdef UTPA2
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_SetDbgLevel(DMD_ATSC_DbgLv u8DbgLevel);
DLL_PUBLIC extern DMD_ATSC_Info* _MDrv_DMD_ATSC_GetInfo(void);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_GetLibVer(const MSIF_Version **ppVersion);

DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_Init(MS_U8 id, DMD_ATSC_InitData *pDMD_ATSC_InitData, MS_U32 u32InitDataLen);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_Exit(MS_U8 id);
DLL_PUBLIC extern MS_U32 _MDrv_DMD_ATSC_MD_GetConfig(MS_U8 id, DMD_ATSC_InitData *psDMD_ATSC_InitData);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_SetConfig(MS_U8 id, DMD_ATSC_DEMOD_TYPE eType, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_SetReset(MS_U8 id);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_Set_QAM_SR(MS_U8 id, DMD_ATSC_DEMOD_TYPE eType, MS_U16 symbol_rate);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_SetActive(MS_U8 id, MS_BOOL bEnable);
#if DMD_ATSC_STR_EN
DLL_PUBLIC extern MS_U32 _MDrv_DMD_ATSC_MD_SetPowerState(MS_U8 id, EN_POWER_MODE u16PowerState);
#endif
DLL_PUBLIC extern DMD_ATSC_LOCK_STATUS _MDrv_DMD_ATSC_MD_GetLock(MS_U8 id, DMD_ATSC_GETLOCK_TYPE eType);
DLL_PUBLIC extern DMD_ATSC_DEMOD_TYPE _MDrv_DMD_ATSC_MD_GetModulationMode(MS_U8 id);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GetSignalStrength(MS_U8 id, MS_U16 *u16Strength);
DLL_PUBLIC extern DMD_ATSC_SIGNAL_CONDITION _MDrv_DMD_ATSC_MD_GetSignalQuality(MS_U8 id);
DLL_PUBLIC extern MS_U8 _MDrv_DMD_ATSC_MD_GetSNRPercentage(MS_U8 id);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GET_QAM_SNR(MS_U8 id, DMD_ATSC_SNR_DATA *f_snr);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_Read_uCPKT_ERR(MS_U8 id, MS_U16 *u16PacketErr);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GetPreViterbiBer(MS_U8 id, DMD_ATSC_BER_DATA *ber);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GetPostViterbiBer(MS_U8 id, DMD_ATSC_BER_DATA *ber);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_ReadFrequencyOffset(MS_U8 id, DMD_ATSC_CFO_DATA *cfo);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_SetSerialControl(MS_U8 id, MS_U8 u8TsConfigData);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_IIC_BYPASS_MODE(MS_U8 id, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_SWITCH_SSPI_GPIO(MS_U8 id, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GPIO_GET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL *bLevel);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GPIO_SET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL bLevel);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GPIO_OUT_ENABLE(MS_U8 id, MS_U8 u8Pin, MS_BOOL bEnableOut);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_DoIQSwap(MS_U8 id, MS_BOOL bIsQPad);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_GetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 *pu8Data);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ATSC_MD_SetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 u8Data);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 141 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
#ifndef _API_XC_DLC_H_
#define _API_XC_DLC_H_ 
#include "MsCommon.h"
#include "MsDevice.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 160 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
#define MSIF_DLC_LIB_CODE {'D','L','C','_'}
#define MSIF_DLC_LIBVER {'0','0'}
#define MSIF_DLC_BUILDNUM {'3','0'}
#define MSIF_DLC_CHANGELIST {'0','0','6','1','8','0','7','0'}
#define XC_DLC_API_VERSION \
    MSIF_TAG , \
    MSIF_CLASS , \
    MSIF_CUS , \
    MSIF_MOD , \
    MSIF_CHIP , \
    MSIF_CPU , \
    MSIF_DLC_LIB_CODE , \
    MSIF_DLC_LIBVER , \
    MSIF_DLC_BUILDNUM , \
    MSIF_DLC_CHANGELIST, \
    MSIF_OS
#if defined(UFO_PUBLIC_HEADER_500)
#define XC_DLC_HDR_VERSION 1
#else
#define XC_DLC_HDR_VERSION 4
#endif

#define ENABLE_10_BIT_DLC 0





#if defined(UFO_PUBLIC_HEADER_500)
#define DLC_TMO_INFO_VERSION 3
#else
#define DLC_TMO_INFO_VERSION 4
#endif

#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
#define DLC_MFINIT_EX_VERSION 1
#else
#define DLC_MFINIT_EX_VERSION 2
#endif

#define DLC_HISTOGRAM_LIMIT_CURVE_ARRARY_NUM 17

#ifndef UNUSED
#define UNUSED(x) (void)(x)
#endif




typedef enum
{

    E_XC_DLC_PURE_IMAGE_DLC_CURVE = 0,

    E_XC_DLC_PURE_IMAGE_LINEAR_CURVE ,

    E_XC_DLC_PURE_IMAGE_DO_NOTHING ,
} E_XC_DLC_PURE_IMAGE_CURVE ;




typedef enum
{

    E_XC_DLC_CURVE_MODE_BY_YAVG = 0,

    E_XC_DLC_CURVE_MODE_BY_HISTOGRAM ,

    E_XC_DLC_CURVE_MODE_BY_MIX ,
} E_XC_DLC_CURVE_MODE ;




typedef enum
{

    E_XC_DLC_ALGORITHM_OLD = 0,

    E_XC_DLC_ALGORITHM_NEW ,
} E_XC_DLC_ALGORITHM_MODE ;



typedef enum
{

    E_XC_DLC_FAIL = 0,

    E_XC_DLC_OK = 1,

    E_XC_DLC_GET_BASEADDR_FAIL,

    E_XC_DLC_OBTAIN_MUTEX_FAIL,
} E_XC_DLC_RESULT;


typedef enum
{
    E_XC_DLC_HISTOGRAM_32,
    E_XC_DLC_HISTOGRAM_8,
}E_XC_DLC_HISTOGRAM_TYPE;
# 273 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
typedef struct
{

    MS_U8 ucLumaCurve[16];

    MS_U8 ucLumaCurve2_a[16];

    MS_U8 ucLumaCurve2_b[16];

    MS_U8 ucLumaCurve2[16];


    MS_U8 u8_L_L_U;

    MS_U8 u8_L_L_D;

    MS_U8 u8_L_H_U;

    MS_U8 u8_L_H_D;

    MS_U8 u8_S_L_U;

    MS_U8 u8_S_L_D;

    MS_U8 u8_S_H_U;

    MS_U8 u8_S_H_D;

    MS_U8 ucCGCCGain_offset;

    MS_U8 ucCGCChroma_GainLimitH;

    MS_U8 ucCGCChroma_GainLimitL;

    MS_U8 ucCGCYCslope;

    MS_U8 ucCGCYth;

    MS_U8 ucDlcPureImageMode;

    MS_U8 ucDlcLevelLimit;

    MS_U8 ucDlcAvgDelta;

    MS_U8 ucDlcAvgDeltaStill;

    MS_U8 ucDlcFastAlphaBlending;

    MS_U8 ucDlcSlowEvent;

    MS_U8 ucDlcTimeOut;

    MS_U8 ucDlcFlickAlphaStart;

    MS_U8 ucDlcYAvgThresholdH;

    MS_U8 ucDlcYAvgThresholdL;

    MS_U8 ucDlcBLEPoint;

    MS_U8 ucDlcWLEPoint;

    MS_U8 bCGCCGainCtrl : 1;

    MS_U8 bEnableBLE : 1;

    MS_U8 bEnableWLE : 1;
} XC_DLC_MFinit;


typedef struct
{
    MS_U32 u32DLC_MFinit_Ex_Version;

    MS_U8 ucLumaCurve[16];

    MS_U8 ucLumaCurve2_a[16];

    MS_U8 ucLumaCurve2_b[16];

    MS_U8 ucLumaCurve2[16];


    MS_U8 u8_L_L_U;

    MS_U8 u8_L_L_D;

    MS_U8 u8_L_H_U;

    MS_U8 u8_L_H_D;

    MS_U8 u8_S_L_U;

    MS_U8 u8_S_L_D;

    MS_U8 u8_S_H_U;

    MS_U8 u8_S_H_D;

    MS_U8 ucCGCCGain_offset;

    MS_U8 ucCGCChroma_GainLimitH;

    MS_U8 ucCGCChroma_GainLimitL;

    MS_U8 ucCGCYCslope;

    MS_U8 ucCGCYth;

    MS_U8 ucDlcPureImageMode;

    MS_U8 ucDlcLevelLimit;

    MS_U8 ucDlcAvgDelta;

    MS_U8 ucDlcAvgDeltaStill;

    MS_U8 ucDlcFastAlphaBlending;

    MS_U8 ucDlcSlowEvent;

    MS_U8 ucDlcTimeOut;

    MS_U8 ucDlcFlickAlphaStart;

    MS_U8 ucDlcYAvgThresholdH;

    MS_U8 ucDlcYAvgThresholdL;

    MS_U8 ucDlcBLEPoint;

    MS_U8 ucDlcWLEPoint;

    MS_U8 bCGCCGainCtrl : 1;

    MS_U8 bEnableBLE : 1;

    MS_U8 bEnableWLE : 1;

    MS_U8 ucDlcYAvgThresholdM;

    MS_U8 ucDlcCurveMode;

    MS_U8 ucDlcCurveModeMixAlpha;

    MS_U8 ucDlcAlgorithmMode;

    MS_U8 ucDlcHistogramLimitCurve[DLC_HISTOGRAM_LIMIT_CURVE_ARRARY_NUM];

    MS_U8 ucDlcSepPointH;

    MS_U8 ucDlcSepPointL;

    MS_U16 uwDlcBleStartPointTH;

    MS_U16 uwDlcBleEndPointTH;

    MS_U8 ucDlcCurveDiff_L_TH;

    MS_U8 ucDlcCurveDiff_H_TH;

    MS_U16 uwDlcBLESlopPoint_1;

    MS_U16 uwDlcBLESlopPoint_2;

    MS_U16 uwDlcBLESlopPoint_3;

    MS_U16 uwDlcBLESlopPoint_4;

    MS_U16 uwDlcBLESlopPoint_5;

    MS_U16 uwDlcDark_BLE_Slop_Min;

    MS_U8 ucDlcCurveDiffCoringTH;

    MS_U8 ucDlcAlphaBlendingMin;

    MS_U8 ucDlcAlphaBlendingMax;

    MS_U8 ucDlcFlicker_alpha;

    MS_U8 ucDlcYAVG_L_TH;

    MS_U8 ucDlcYAVG_H_TH;

    MS_U8 ucDlcDiffBase_L;

    MS_U8 ucDlcDiffBase_M;

    MS_U8 ucDlcDiffBase_H;
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    MS_U8 u8LMaxThreshold;
    MS_U8 u8LMinThreshold;
    MS_U8 u8LMaxCorrection;
    MS_U8 u8LMinCorrection;
    MS_U8 u8RMaxThreshold;
    MS_U8 u8RMinThreshold;
    MS_U8 u8RMaxCorrection;
    MS_U8 u8RMinCorrection;
    MS_U8 u8AllowLoseContrast;
#endif
} XC_DLC_MFinit_Ex;




typedef struct
{

    MS_U8 ucMaxPWM;

    MS_U8 ucMinPWM;

    MS_U8 ucMax_Video;

    MS_U8 ucMid_Video;

    MS_U8 ucMin_Video;

    MS_U8 ucCurrentPWM;

    MS_U8 ucAlpha;

    MS_U8 ucBackLight_Thres;

    MS_U8 ucAvgDelta;

    MS_U8 ucFlickAlpha;

    MS_U8 ucFastAlphaBlending;

    MS_U8 ucLoop_Dly;

    MS_U8 ucLoop_Dly_H_Init;

    MS_U8 ucLoop_Dly_MH_Init;

    MS_U8 ucLoop_Dly_ML_Init;

    MS_U8 ucLoop_Dly_L_Init;

    MS_U8 ucY_Gain_H;

    MS_U8 ucC_Gain_H;

    MS_U8 ucY_Gain_M;

    MS_U8 ucC_Gain_M;

    MS_U8 ucY_Gain_L;

    MS_U8 ucC_Gain_L;

    MS_U8 bYGainCtrl : 1;

    MS_U8 bCGainCtrl : 1;
}XC_DLC_DBC_MFinit;

typedef struct __attribute__((packed))
{
    MS_U8 u8ColorPrimaries;
    MS_U8 u8TransferCharacteristics;
    MS_U8 u8MatrixCoefficients;
} XC_DLC_HDRMetadataMpegVUI;


typedef struct __attribute__((packed))
{
    MS_U16 display_primaries_x[3];
    MS_U16 display_primaries_y[3];
    MS_U16 white_point_x;
    MS_U16 white_point_y;
    MS_U32 max_display_mastering_luminance;
    MS_U32 min_display_mastering_luminance;
} XC_DLC_HDRMetadataMpegSEIMasteringColorVolume;


typedef struct __attribute__((packed))
{
    MS_U16 u16Smin;
    MS_U16 u16Smed;
    MS_U16 u16Smax;
    MS_U16 u16Tmin;
    MS_U16 u16Tmed;
    MS_U16 u16Tmax;
    MS_U16 u16MidSourceOffset;
    MS_U16 u16MidTargetOffset;
    MS_U16 u16MidSourceRatio;
    MS_U16 u16MidTargetRatio;
} XC_DLC_HDRToneMappingData;

typedef struct __attribute__((packed))
{
    MS_U16 u16tRx;
    MS_U16 u16tRy;
    MS_U16 u16tGx;
    MS_U16 u16tGy;
    MS_U16 u16tBx;
    MS_U16 u16tBy;
    MS_U16 u16tWx;
    MS_U16 u16tWy;
} XC_DLC_HDRGamutMappingData;

typedef struct __attribute__((packed))
{
    MS_U8 u8EOTF;
    MS_U16 u16Rx;
    MS_U16 u16Ry;
    MS_U16 u16Gx;
    MS_U16 u16Gy;
    MS_U16 u16Bx;
    MS_U16 u16By;
    MS_U16 u16Wx;
    MS_U16 u16Wy;
    MS_U16 u16Lmax;
    MS_U16 u16Lmin;
    MS_U16 u16MaxCLL;
    MS_U16 u16MaxFALL;
} XC_DLC_HDRMetadataHdmiTxInfoFrame;


typedef struct __attribute__((packed))
{
    MS_BOOL bFixHdrCurve;
    MS_U16 u16DlcCurveSize;
    MS_U8 *pucDlcCurve;
#if !defined (__aarch64__)
    void *pDummy;
#endif
} XC_DLC_HDRCustomerDlcCurve;


typedef struct __attribute__((packed))
{
    MS_BOOL bCustomerEnable;
    MS_U16 u16sWx;
    MS_U16 u16sWy;
} XC_DLC_HDRCustomerColorPrimaries;

typedef struct __attribute__((packed))
{
    MS_U8 PixelFormat;
    MS_U8 Colorimetry;
    MS_U8 ExtendedColorimetry;
    MS_U8 RgbQuantizationRange;
    MS_U8 YccQuantizationRange;
    MS_U8 StaticMetadataDescriptorID;
} XC_DLC_HDRHdmiTxAviInfoFrame;

typedef struct __attribute__((packed))
{
    MS_BOOL bUsed;
    MS_BOOL bContentLightLevelEnabled;
    MS_U16 u16MaxContentLightLevel;
    MS_U16 u16MaxPicAverageLightLevel;
} XC_DLC_HDRMetadataSeiContentLightLevel;


typedef struct __attribute__((packed))
{

    MS_U16 u16SrcMinRatio;
    MS_U16 u16SrcMedRatio;
    MS_U16 u16SrcMaxRatio;

    MS_U8 u8TgtMinFlag;
    MS_U16 u16TgtMin;
    MS_U8 u8TgtMaxFlag;
    MS_U16 u16TgtMax;

    MS_U16 u16FrontSlopeMin;
    MS_U16 u16FrontSlopeMax;
    MS_U16 u16BackSlopeMin;
    MS_U16 u16BackSlopeMax;

    MS_U16 u16SceneChangeThrd;
    MS_U16 u16SceneChangeRatioMax;

    MS_U8 u8IIRRatio;
    MS_U8 u8TMO_TargetMode;

} XC_DLC_HDRNewToneMapping;




typedef struct __attribute__((packed))
{

    MS_U16 u16HDRVerInfo;

    MS_U16 u16HDRInitLength;

    MS_BOOL bHDREnable;

    MS_U16 u16HDRFunctionSelect;

    XC_DLC_HDRMetadataMpegVUI DLC_HDRMetadataMpegVUI;

    XC_DLC_HDRToneMappingData DLC_HDRToneMappingData;

    XC_DLC_HDRGamutMappingData DLC_HDRGamutMappingData;

    XC_DLC_HDRMetadataHdmiTxInfoFrame DLC_HDRMetadataHdmiTxInfoFrame;

    XC_DLC_HDRCustomerDlcCurve DLC_HDRCustomerDlcCurve;

    XC_DLC_HDRCustomerColorPrimaries DLC_HDRCustomerColorPrimaries;

    XC_DLC_HDRHdmiTxAviInfoFrame DLC_HDRHdmiTxAviInfoFrame;
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700)

    XC_DLC_HDRMetadataMpegSEIMasteringColorVolume DLC_HDRMetadataMpegSEIMasteringColorVolume;
#endif


    XC_DLC_HDRNewToneMapping DLC_HDRNewToneMapping;

} XC_DLC_HDRinit;




typedef struct
{

    XC_DLC_MFinit DLC_MFinit;

    XC_DLC_MFinit_Ex DLC_MFinit_Ex;

    MS_U16 u16CurveHStart;

    MS_U16 u16CurveHEnd;

    MS_U16 u16CurveVStart;

    MS_U16 u16CurveVEnd;

    XC_DLC_DBC_MFinit DLC_DBC_MFinit;
#if (ENABLE_10_BIT_DLC)

    MS_BOOL b10BitsEn;
#endif

#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700)
#if defined(UFO_XC_HDR_VERSION) && (UFO_XC_HDR_VERSION == 2)
    MS_U8 u8DlcMode;
    MS_U8 u8TmoMode;
#endif
#endif
} XC_DLC_init;




typedef struct
{

    MS_U16 g_wLumaHistogram32H[32];

    MS_U16 g_wLumiTotalCount;

    MS_U16 g_wLumiAverageTemp;

    MS_U8 g_ucTable[16];

    MS_U8 g_ucHistogramMax;

    MS_U8 g_ucHistogramMin;
} XC_DLC_lumadata;




typedef struct
{

} XC_DLC_ApiInfo;





typedef struct DLL_PACKED
{

    XC_DLC_init DLCinit;

    XC_DLC_lumadata DLCluma;

    MS_U8 u8DLC_LibVer;

    MS_U16 u16DLC_MFVer;

    MS_U16 u16DLC_CGC_MFVer;

    XC_DLC_DBC_MFinit DLC_DBCinit;

    MS_U16 u16DLC_DBC_MFVer;
} XC_DLC_ApiStatus;



typedef struct DLL_PACKED
{
    MS_U16 wHStart;
    MS_U16 wHEnd;
    MS_U16 wVStart;
    MS_U16 wVEnd;
}XC_DLC_CAPTURE_Range;

#ifdef UFO_XC_HDR
#if (UFO_XC_HDR_VERSION == 2)

#if defined(UFO_PUBLIC_HEADER_700)
typedef struct DLL_PACKED
{
    MS_U32 u32OutputNits[512];
    MS_U16 u16InputPoint[512];
    MS_U16 u16ControlPoints;
    MS_S16 s16LastLess1IndexOutputnits;
    MS_S16 s16LastIndexM10000Outputs;
    MS_S16 s16LastIndexM100Outputs;
}ST_XC_DLC_TMO_1DLUT;
#endif

typedef struct DLL_PACKED
{
    MS_U32 u32TMOInfo_Version;
    MS_U16 u16TMOInfo_Length;

    MS_U16 u16SrcMinRatio;
    MS_U16 u16SrcMedRatio;
    MS_U16 u16SrcMaxRatio;

    MS_U16 u16TgtMin;
    MS_U16 u16TgtMed;
    MS_U16 u16TgtMax;

    MS_U16 u16FrontSlopeMin;
    MS_U16 u16FrontSlopeMax;
    MS_U16 u16BackSlopeMin;
    MS_U16 u16BackSlopeMax;

    MS_U16 u16SceneChangeThrd;
    MS_U16 u16SceneChangeRatioMax;

    MS_U8 u8IIRRatio;
    MS_U8 u8TMOTargetMode;
    MS_U16 u16SDRPanelGain;

    MS_U16 u16Smin;
    MS_U16 u16Smed;
    MS_U16 u16Smax;
    MS_U16 u16Tmin;
    MS_U16 u16Tmed;
    MS_U16 u16Tmax;

    MS_BOOL bRefMode;

#if defined(UFO_PUBLIC_HEADER_700)
    MS_U8 u8TMOUseIniControls;
    ST_XC_DLC_TMO_1DLUT stTMO1DLUT;
#endif
} ST_XC_DLC_TMO_INFO;
#endif
#endif
# 855 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
MS_BOOL MApi_XC_DLC_Init_Ex(XC_DLC_init *pstXC_DLC_InitData, MS_U32 u32InitDataLen);






void MApi_XC_DLC_SetSetting_Ex(XC_DLC_MFinit_Ex *DLC_MFinit_Ex );
# 872 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
void MApi_XC_DLC_SetCurve(MS_U8 *pNormal, MS_U8 *pLight, MS_U8 *pDark);






void MApi_XC_DLC_SetBleSlopPoint(MS_U16 *pBLESlopPoint);





MS_BOOL SYMBOL_WEAK MApi_XC_DLC_SetHDRInit(XC_DLC_HDRinit *pstDLC_HDRInitData);






MS_U32 SYMBOL_WEAK MApi_XC_DLC_GetEOTFInfo(void);






MS_BOOL MApi_XC_DLC_Exit(void);
# 910 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
void MApi_XC_DLC_SetOnOff(MS_BOOL bSwitch, MS_BOOL bWindow);
# 920 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
MS_BOOL MApi_XC_DLC_SetDlcHandlerOnOff(MS_BOOL bDlcEnable );
# 930 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
MS_BOOL MApi_XC_DLC_SetBleOnOff( MS_BOOL bSwitch );
# 939 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
void MApi_XC_DLC_EnableMainSubCurveSynchronization (MS_BOOL bEnable);







void MApi_XC_DLC_Handler(MS_BOOL bWindow);
# 956 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
MS_BOOL MApi_XC_DLC_GetHistogramHandler(MS_BOOL bWindow);






MS_U8 MApi_XC_DLC_GetAverageValue(void);






MS_U16 MApi_XC_DLC_GetAverageValue_Ex(void);
# 980 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
void MApi_XC_DLC_InitCurve (MS_U16 u16HStart, MS_U16 u16HEnd, MS_U16 u16VStart, MS_U16 u16VEnd);






void MApi_XC_DLC_SpeedupTrigger (MS_U8 u8Loop);






MS_BOOL MApi_XC_DLC_GetLumaCurveStatus( void );





void MApi_XC_DLC_CGC_ResetCGain(void);





void MApi_XC_DLC_CGC_CheckCGainInPQCom(void);





void MApi_XC_DLC_CGC_ResetYGain(void);





void MApi_XC_DLC_CGC_CheckYGainInPQCom(void);





void MApi_XC_DLC_CGC_Reset(void);





void MApi_XC_DLC_CGC_Init(void);





void MApi_XC_DLC_CGC_ReInit(void);





void MApi_XC_DLC_CGC_Handler(void);







E_XC_DLC_RESULT MApi_XC_DLC_GetLibVer(const MSIF_Version **ppVersion) ;






const XC_DLC_ApiInfo * MApi_XC_DLC_GetInfo(void);
# 1066 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
MS_BOOL MApi_XC_DLC_GetStatus_Ex(XC_DLC_ApiStatus *pDrvStatus, MS_BOOL bWindow);







MS_BOOL MApi_XC_DLC_SetDbgLevel(MS_U16 u16DbgSwitch);







MS_BOOL MApi_XC_DLC_WriteCurve(MS_U8 *pu8Table);







MS_BOOL MApi_XC_DLC_WriteCurve_Sub(MS_U8 *pu8Table);
# 1099 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
MS_BOOL MApi_XC_DLC_GetHistogram(MS_U16 *pu16Histogram, E_XC_DLC_HISTOGRAM_TYPE enHistogramType);




typedef void (*MApi_XC_DLC_Print_Callback)(MS_U8 );

typedef struct DLL_PACKED {
    MS_U8 *pCmdBuff;
    MS_U16 u16PNL_Width;
    MS_U16 u16PNL_Height;
    MApi_XC_DLC_Print_Callback fnDLC_Putchar;
}tDLC_CONTROL_PARAMS;






void MApi_XC_DLC_DecodeExtCmd(tDLC_CONTROL_PARAMS *params);






void MApi_XC_DLC_SetCaptureRange(XC_DLC_CAPTURE_Range *pu16_Range);







MS_U32 MApi_XC_DLC_SetPowerState(EN_POWER_MODE enPowerState);
# 1151 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc.h"
void MApi_XC_DLC_SetSetting(XC_DLC_MFinit DLC_MFinit );



MS_BOOL MApi_XC_DLC_Init(XC_DLC_init *pstXC_DLC_InitData, MS_U32 u32InitDataLen);




MS_BOOL MApi_XC_DLC_GetStatus(XC_DLC_ApiStatus *pDrvStatus, MS_BOOL bWindow);


#ifdef UFO_XC_HDR
#if (UFO_XC_HDR_VERSION == 2)
MS_BOOL SYMBOL_WEAK MApi_XC_DLC_SetTMOInfo(ST_XC_DLC_TMO_INFO *pstDLCTmoInfo);
#endif
#endif
#ifdef __cplusplus
}
#endif

#endif
# 137 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
#ifndef _API_XC_ACE_H_
#define _API_XC_ACE_H_ 

#include "MsDevice.h"
#include "MsCommon.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 156 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
#define MSIF_ACE_LIB_CODE {'A','C','E','_'}
#define MSIF_ACE_LIBVER {'0','0'}
#define MSIF_ACE_BUILDNUM {'5','9'}
#define MSIF_ACE_CHANGELIST {'0','0','6','2','1','0','5','3'}
#define XC_ACE_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_ACE_LIB_CODE, \
    MSIF_ACE_LIBVER, \
    MSIF_ACE_BUILDNUM, \
    MSIF_ACE_CHANGELIST, \
    MSIF_OS

#if defined(UFO_PUBLIC_HEADER_500_3)
#define XC_ACE_HDR_VERSION 1
#else
#define XC_ACE_HDR_VERSION 3
#endif




typedef enum
{

    E_XC_ACE_INFO_TYPE_VERSION,

    E_XC_ACE_INFO_TYPE_CONTRAST,

    E_XC_ACE_INFO_TYPE_R_GAIN,

    E_XC_ACE_INFO_TYPE_G_GAIN,

    E_XC_ACE_INFO_TYPE_B_GAIN,

    E_XC_ACE_INFO_TYPE_SATURATION,

    E_XC_ACE_INFO_TYPE_HUE,

    E_XC_ACE_INFO_TYPE_COLOR_CORRECTION_XY_R,

    E_XC_ACE_INFO_TYPE_COLOR_CORRECTION_XY_G,

    E_XC_ACE_INFO_TYPE_COLOR_CORRECTION_XY_B,

    E_XC_ACE_INFO_TYPE_COLOR_CORRECTION_OFFSET_R,

    E_XC_ACE_INFO_TYPE_COLOR_CORRECTION_OFFSET_G,

    E_XC_ACE_INFO_TYPE_COLOR_CORRECTION_OFFSET_B,

    E_XC_ACE_INFO_TYPE_BRIGHTNESS_R,

    E_XC_ACE_INFO_TYPE_BRIGHTNESS_G,

    E_XC_ACE_INFO_TYPE_BRIGHTNESS_B,


    E_XC_ACE_INFO_TYPE_COMPILER_VERSION,

    E_XC_ACE_INFO_TYPE_YUV_TO_RGB_MATRIX_SEL,




    E_XC_ACE_INFO_TYPE_IHC_COLOR_R,
    E_XC_ACE_INFO_TYPE_IHC_COLOR_G,
    E_XC_ACE_INFO_TYPE_IHC_COLOR_B,
    E_XC_ACE_INFO_TYPE_IHC_COLOR_C,
    E_XC_ACE_INFO_TYPE_IHC_COLOR_M,
    E_XC_ACE_INFO_TYPE_IHC_COLOR_Y,
    E_XC_ACE_INFO_TYPE_IHC_COLOR_F,

    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR1 = E_XC_ACE_INFO_TYPE_IHC_COLOR_R,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR2 = E_XC_ACE_INFO_TYPE_IHC_COLOR_G,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR3 = E_XC_ACE_INFO_TYPE_IHC_COLOR_B,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR4 = E_XC_ACE_INFO_TYPE_IHC_COLOR_C,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR5 = E_XC_ACE_INFO_TYPE_IHC_COLOR_M,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR6 = E_XC_ACE_INFO_TYPE_IHC_COLOR_Y,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR7 = E_XC_ACE_INFO_TYPE_IHC_COLOR_F,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR8,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR9,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR10,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR11,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR12,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR13,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR14,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR15,
    E_XC_ACE_INFO_TYPE_IHC_USER_COLOR0,




    E_XC_ACE_INFO_TYPE_ICC_COLOR_R,
    E_XC_ACE_INFO_TYPE_ICC_COLOR_G,
    E_XC_ACE_INFO_TYPE_ICC_COLOR_B,
    E_XC_ACE_INFO_TYPE_ICC_COLOR_C,
    E_XC_ACE_INFO_TYPE_ICC_COLOR_M,
    E_XC_ACE_INFO_TYPE_ICC_COLOR_Y,
    E_XC_ACE_INFO_TYPE_ICC_COLOR_F,

    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR1 = E_XC_ACE_INFO_TYPE_ICC_COLOR_R,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR2 = E_XC_ACE_INFO_TYPE_ICC_COLOR_G,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR3 = E_XC_ACE_INFO_TYPE_ICC_COLOR_B,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR4 = E_XC_ACE_INFO_TYPE_ICC_COLOR_C,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR5 = E_XC_ACE_INFO_TYPE_ICC_COLOR_M,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR6 = E_XC_ACE_INFO_TYPE_ICC_COLOR_Y,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR7 = E_XC_ACE_INFO_TYPE_ICC_COLOR_F,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR8,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR9,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR10,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR11,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR12,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR13,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR14,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR15,
    E_XC_ACE_INFO_TYPE_ICC_USER_COLOR0,




    E_XC_ACE_INFO_TYPE_IBC_COLOR_R,
    E_XC_ACE_INFO_TYPE_IBC_COLOR_G,
    E_XC_ACE_INFO_TYPE_IBC_COLOR_B,
    E_XC_ACE_INFO_TYPE_IBC_COLOR_C,
    E_XC_ACE_INFO_TYPE_IBC_COLOR_M,
    E_XC_ACE_INFO_TYPE_IBC_COLOR_Y,
    E_XC_ACE_INFO_TYPE_IBC_COLOR_F,

    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR1 = E_XC_ACE_INFO_TYPE_IBC_COLOR_R,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR2 = E_XC_ACE_INFO_TYPE_IBC_COLOR_G,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR3 = E_XC_ACE_INFO_TYPE_IBC_COLOR_B,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR4 = E_XC_ACE_INFO_TYPE_IBC_COLOR_C,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR5 = E_XC_ACE_INFO_TYPE_IBC_COLOR_M,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR6 = E_XC_ACE_INFO_TYPE_IBC_COLOR_Y,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR7 = E_XC_ACE_INFO_TYPE_IBC_COLOR_F,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR8,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR9,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR10,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR11,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR12,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR13,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR14,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR15,
    E_XC_ACE_INFO_TYPE_IBC_USER_COLOR0,

    E_XC_ACE_INFO_TYPE_CONTRAST_MIN_VALUE,
    E_XC_ACE_INFO_TYPE_CONTRAST_MAX_VALUE,

    E_XC_ACE_INFO_TYPE_DUMMY
} E_XC_ACE_INFOTYPE;




typedef enum
{

    E_XC_ACE_YUV_TO_RGB_MATRIX_SDTV,

    E_XC_ACE_YUV_TO_RGB_MATRIX_HDTV,

    E_XC_ACE_YUV_TO_RGB_MATRIX_USER,
} E_XC_ACE_YUVTORGBTYPE;




typedef enum
{

    E_XC_ACE_MWE_MODE_OFF,

    E_XC_ACE_MWE_MODE_H_SPLIT,

    E_XC_ACE_MWE_MODE_MOVE,

    E_XC_ACE_MWE_MODE_ZOOM,

    E_XC_ACE_MWE_MODE_H_SCAN,

    E_XC_ACE_MWE_MODE_H_SPLIT_LEFT,

    E_XC_ACE_MWE_MODE_NUMS,
} E_XC_ACE_MWE_FUNC;




typedef enum
{

    E_XC_ACE_FAIL = 0,

    E_XC_ACE_OK = 1,

    E_XC_ACE_GET_BASEADDR_FAIL,

    E_XC_ACE_OBTAIN_RESOURCE_FAIL,
} E_XC_ACE_RESULT;


typedef enum
{
    E_XC_ACE_MWE_MIRROR_NORMAL,
    E_XC_ACE_MWE_MIRROR_H_ONLY,
    E_XC_ACE_MWE_MIRROR_V_ONLY,
    E_XC_ACE_MWE_MIRROR_HV,
    E_XC_ACE_MWE_MIRROR_MAX,
}E_XC_ACE_MWE_MIRROR_TYPE;




typedef struct DLL_PACKED
{

    MS_U8 cRedOffset;

    MS_U8 cGreenOffset;

    MS_U8 cBlueOffset;


    MS_U8 cRedColor;

    MS_U8 cGreenColor;

    MS_U8 cBlueColor;


    MS_U8 cRedScaleValue;

    MS_U8 cGreenScaleValue;

    MS_U8 cBlueScaleValue;
} XC_ACE_color_temp;




typedef struct DLL_PACKED
{

    MS_U16 cRedOffset;

    MS_U16 cGreenOffset;

    MS_U16 cBlueOffset;


    MS_U8 cRedColor;

    MS_U8 cGreenColor;

    MS_U8 cBlueColor;


    MS_U8 cRedScaleValue;

    MS_U8 cGreenScaleValue;

    MS_U8 cBlueScaleValue;
} XC_ACE_color_temp_ex;




typedef struct DLL_PACKED
{

    MS_U16 cRedOffset;

    MS_U16 cGreenOffset;

    MS_U16 cBlueOffset;


    MS_U16 cRedColor;

    MS_U16 cGreenColor;

    MS_U16 cBlueColor;


    MS_U16 cRedScaleValue;

    MS_U16 cGreenScaleValue;

    MS_U16 cBlueScaleValue;
} XC_ACE_color_temp_ex2;







typedef struct __attribute__((packed))
{
    MS_BOOL eWindow;

    MS_S16* S16ColorCorrectionMatrix;
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
#if !defined (__aarch64__)
    MS_U32 u32AlignmentDummy0;
#endif
#endif
    MS_S16* S16RGB;
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
#if !defined (__aarch64__)
    MS_U32 u32AlignmentDummy1;
#endif
#endif
    MS_U16 u16MWEHstart;


    MS_U16 u16MWEVstart;

    MS_U16 u16MWEWidth;

    MS_U16 u16MWEHeight;

    MS_U16 u16MWE_Disp_Hstart;

    MS_U16 u16MWE_Disp_Vstart;

    MS_U16 u16MWE_Disp_Width;

    MS_U16 u16MWE_Disp_Height;

    MS_BOOL bMWE_Enable;
} XC_ACE_InitData;




typedef struct
{

} XC_ACE_ApiInfo;




typedef struct DLL_PACKED
{

    XC_ACE_InitData ACEinit;
} XC_ACE_ApiStatus;





typedef enum
{

    E_ACE_DNR_NR_ONOFF,

    E_ACE_DNR_SNR,

    E_ACE_DNR_SPIKE_NR_0,

    E_ACE_DNR_SPIKE_NR_1,

    E_ACE_DNR_GRAY_GROUND_GAIN,

    E_ACE_DNR_GRAY_GROUND_EN,

    E_ACE_DNR_PEAKING_BANK_CORING,

    E_ACE_DNR_GUASSIN_SNR_THRESHOLD,

    E_ACE_DNR_MOTION,

    E_ACE_DNR_PEAKING_CORING_THRESHOLD,

    E_ACE_DNR_SHARPNESS_ADJUST,

    E_ACE_DNR_NM_V,

    E_ACE_DNR_GNR_0,

    E_ACE_DNR_GNR_1,

    E_ACE_DNR_CP,

    E_ACE_DNR_DP,

    E_ACE_DNR_NM_H_0,

    E_ACE_DNR_NM_H_1,

    E_ACE_DNR_SC_CORING,

    E_ACE_DNR_SNR_NM,
}XC_ACE_DNR_Param;

typedef enum
{



    E_ACE_IHC_COLOR_R,
    E_ACE_IHC_COLOR_G,
    E_ACE_IHC_COLOR_B,
    E_ACE_IHC_COLOR_C,
    E_ACE_IHC_COLOR_M,
    E_ACE_IHC_COLOR_Y,
    E_ACE_IHC_COLOR_F,

    E_ACE_IHC_USER_COLOR1 = E_ACE_IHC_COLOR_R,
    E_ACE_IHC_USER_COLOR2 = E_ACE_IHC_COLOR_G,
    E_ACE_IHC_USER_COLOR3 = E_ACE_IHC_COLOR_B,
    E_ACE_IHC_USER_COLOR4 = E_ACE_IHC_COLOR_C,
    E_ACE_IHC_USER_COLOR5 = E_ACE_IHC_COLOR_M,
    E_ACE_IHC_USER_COLOR6 = E_ACE_IHC_COLOR_Y,
    E_ACE_IHC_USER_COLOR7 = E_ACE_IHC_COLOR_F,
    E_ACE_IHC_USER_COLOR8,
    E_ACE_IHC_USER_COLOR9,
    E_ACE_IHC_USER_COLOR10,
    E_ACE_IHC_USER_COLOR11,
    E_ACE_IHC_USER_COLOR12,
    E_ACE_IHC_USER_COLOR13,
    E_ACE_IHC_USER_COLOR14,
    E_ACE_IHC_USER_COLOR15,
    E_ACE_IHC_USER_COLOR0,
    E_ACE_IHC_COLOR_MAX,
}XC_ACE_IHC_COLOR_TYPE;

typedef enum
{



    E_ACE_ICC_COLOR_R,
    E_ACE_ICC_COLOR_G,
    E_ACE_ICC_COLOR_B,
    E_ACE_ICC_COLOR_C,
    E_ACE_ICC_COLOR_M,
    E_ACE_ICC_COLOR_Y,
    E_ACE_ICC_COLOR_F,

    E_ACE_ICC_USER_COLOR1 = E_ACE_ICC_COLOR_R,
    E_ACE_ICC_USER_COLOR2 = E_ACE_ICC_COLOR_G,
    E_ACE_ICC_USER_COLOR3 = E_ACE_ICC_COLOR_B,
    E_ACE_ICC_USER_COLOR4 = E_ACE_ICC_COLOR_C,
    E_ACE_ICC_USER_COLOR5 = E_ACE_ICC_COLOR_M,
    E_ACE_ICC_USER_COLOR6 = E_ACE_ICC_COLOR_Y,
    E_ACE_ICC_USER_COLOR7 = E_ACE_ICC_COLOR_F,
    E_ACE_ICC_USER_COLOR8,
    E_ACE_ICC_USER_COLOR9,
    E_ACE_ICC_USER_COLOR10,
    E_ACE_ICC_USER_COLOR11,
    E_ACE_ICC_USER_COLOR12,
    E_ACE_ICC_USER_COLOR13,
    E_ACE_ICC_USER_COLOR14,
    E_ACE_ICC_USER_COLOR15,
    E_ACE_ICC_USER_COLOR0,
    E_ACE_ICC_COLOR_MAX,
}XC_ACE_ICC_COLOR_TYPE;

typedef enum
{



    E_ACE_IBC_COLOR_R,
    E_ACE_IBC_COLOR_G,
    E_ACE_IBC_COLOR_B,
    E_ACE_IBC_COLOR_C,
    E_ACE_IBC_COLOR_M,
    E_ACE_IBC_COLOR_Y,
    E_ACE_IBC_COLOR_F,

    E_ACE_IBC_USER_COLOR1 = E_ACE_IBC_COLOR_R,
    E_ACE_IBC_USER_COLOR2 = E_ACE_IBC_COLOR_G,
    E_ACE_IBC_USER_COLOR3 = E_ACE_IBC_COLOR_B,
    E_ACE_IBC_USER_COLOR4 = E_ACE_IBC_COLOR_C,
    E_ACE_IBC_USER_COLOR5 = E_ACE_IBC_COLOR_M,
    E_ACE_IBC_USER_COLOR6 = E_ACE_IBC_COLOR_Y,
    E_ACE_IBC_USER_COLOR7 = E_ACE_IBC_COLOR_F,
    E_ACE_IBC_USER_COLOR8,
    E_ACE_IBC_USER_COLOR9,
    E_ACE_IBC_USER_COLOR10,
    E_ACE_IBC_USER_COLOR11,
    E_ACE_IBC_USER_COLOR12,
    E_ACE_IBC_USER_COLOR13,
    E_ACE_IBC_USER_COLOR14,
    E_ACE_IBC_USER_COLOR15,
    E_ACE_IBC_USER_COLOR0,
    E_ACE_IBC_COLOR_MAX,
}XC_ACE_IBC_COLOR_TYPE;

#define ACE_INFOEX_MODE_POST_RGB_GAIN 0x1
#define ACE_INFOEX_MODE_POST_RGB_OFFSET 0x2
typedef struct DLL_PACKED
{
    MS_U32 u32Mode;
    MS_U32 u32Reserved;
}XC_ACE_InfoEx;




#define ACE_TABINFO_VERSION 0

#define ACE_TABINFO_REG_ADDR_SIZE (2)
#define ACE_TABINFO_REG_MASK_SIZE (1)
#define ACE_TABINFO_REG_DATA_SIZE (2)

typedef struct DLL_PACKED
{
    MS_U8 *pTable;
    MS_U8 u8TabCols;
    MS_U8 u8TabRows;
    MS_U8 u8TabIdx;
    MS_U32 u32ACE_TabInfo_version;
}XC_ACE_TAB_Info;





typedef enum
{
    E_ACE_WEAVETYPE_NONE = 0x00,
    E_ACE_WEAVETYPE_H = 0x01,
    E_ACE_WEAVETYPE_V = 0x02,
    E_ACE_WEAVETYPE_DUALVIEW = 0x04,
    E_ACE_WEAVETYPE_NUM,
}XC_ACE_WEAVETYPE;

typedef struct __attribute__((packed))
{
    MS_U8 u8ColorPrimaries;
    MS_U8 u8TransferCharacteristics;
    MS_U8 u8MatrixCoefficients;
} XC_ACE_HDRMetadataMpegVUI;


typedef struct __attribute__((packed))
{
    MS_U16 u16Smin;
    MS_U16 u16Smed;
    MS_U16 u16Smax;
    MS_U16 u16Tmin;
    MS_U16 u16Tmed;
    MS_U16 u16Tmax;
    MS_U16 u16MidSourceOffset;
    MS_U16 u16MidTargetOffset;
    MS_U16 u16MidSourceRatio;
    MS_U16 u16MidTargetRatio;
} XC_ACE_HDRToneMappingData;

typedef struct __attribute__((packed))
{
    MS_U16 u16tRx;
    MS_U16 u16tRy;
    MS_U16 u16tGx;
    MS_U16 u16tGy;
    MS_U16 u16tBx;
    MS_U16 u16tBy;
    MS_U16 u16tWx;
    MS_U16 u16tWy;
} XC_ACE_HDRGamutMappingData;

typedef struct __attribute__((packed))
{
    MS_U8 u8EOTF;
    MS_U16 u16Rx;
    MS_U16 u16Ry;
    MS_U16 u16Gx;
    MS_U16 u16Gy;
    MS_U16 u16Bx;
    MS_U16 u16By;
    MS_U16 u16Wx;
    MS_U16 u16Wy;
    MS_U16 u16Lmax;
    MS_U16 u16Lmin;
    MS_U16 u16MaxCLL;
    MS_U16 u16MaxFALL;
} XC_ACE_HDRMetadataHdmiTxInfoFrame;

typedef struct __attribute__((packed))
{
    MS_U8 PixelFormat;
    MS_U8 Colorimetry;
    MS_U8 ExtendedColorimetry;
    MS_U8 RgbQuantizationRange;
    MS_U8 YccQuantizationRange;
    MS_U8 StaticMetadataDescriptorID;
} XC_ACE_HDRHdmiTxAviInfoFrame;




typedef struct __attribute__((packed))
{

    MS_U16 u16HDRVerInfo;

    MS_U16 u16HDRInitLength;

    MS_BOOL bHDREnable;

    MS_U16 u16HDRFunctionSelect;

    XC_ACE_HDRMetadataMpegVUI ACE_HDRMetadataMpegVUI;

    XC_ACE_HDRToneMappingData ACE_HDRToneMappingData;

    XC_ACE_HDRGamutMappingData ACE_HDRGamutMappingData;

    XC_ACE_HDRMetadataHdmiTxInfoFrame ACE_HDRMetadataHdmiTxInfoFrame;
#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)

    XC_ACE_HDRHdmiTxAviInfoFrame ACE_HDRHdmiTxAviInfoFrame;
#endif
} XC_ACE_HDRinit;





#define XC_ACE_BYPASS_COLOR_GAIN 128
# 800 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_BOOL MApi_XC_ACE_Init(XC_ACE_InitData *pstXC_ACE_InitData, MS_U32 u32InitDataLen);







MS_BOOL MApi_XC_ACE_Exit(void);







void MApi_XC_ACE_DMS(MS_BOOL eWindow, MS_BOOL bisATV);







void MApi_XC_ACE_SetPCYUV2RGB(MS_BOOL eWindow, MS_BOOL bEnable);
# 834 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_SelectYUVtoRGBMatrix(MS_BOOL eWindow, MS_U8 ucMatrix, MS_S16* psUserYUVtoRGBMatrix);







void MApi_XC_ACE_SetColorCorrectionTable( MS_BOOL bScalerWin);







void MApi_XC_ACE_SetPCsRGBTable( MS_BOOL bScalerWin);







void MApi_XC_ACE_GetColorMatrix(MS_BOOL eWindow, MS_U16* pu16Matrix);







void MApi_XC_ACE_SetColorMatrix( MS_BOOL eWindow, MS_U16* pu16Matrix);







E_XC_ACE_RESULT MApi_XC_ACE_SetBypassColorMatrix(MS_BOOL bEnable );
# 884 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_BOOL MApi_XC_ACE_SetIHC(MS_BOOL bScalerWin, XC_ACE_IHC_COLOR_TYPE eIHC, MS_U8 u8Val);
# 894 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_BOOL SYMBOL_WEAK MApi_XC_ACE_SetICC(MS_BOOL bScalerWin, XC_ACE_ICC_COLOR_TYPE eICC, MS_U8 u8Val);
# 904 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_BOOL SYMBOL_WEAK MApi_XC_ACE_SetIBC(MS_BOOL bScalerWin, XC_ACE_IBC_COLOR_TYPE eIBC, MS_U8 u8Val);






void MApi_XC_ACE_PatchDTGColorChecker( MS_U8 u8Mode);
# 921 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_U16 MApi_XC_ACE_GetACEInfo( MS_BOOL bWindow, E_XC_ACE_INFOTYPE eXCACEInfoType );
# 930 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_GetACEInfoEx( MS_BOOL bWindow, XC_ACE_InfoEx *pInfoEx);
# 942 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetContrast( MS_BOOL eWindow, MS_BOOL bUseYUVSpace, MS_U8 u8Contrast);
# 951 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetBrightness( MS_BOOL eWindow, MS_U8 u8Brightness_R, MS_U8 u8Brightness_G, MS_U8 u8Brightness_B);
# 960 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetBrightnessPrecise(MS_BOOL eWindow, MS_U16 u16Brightness_R, MS_U16 u16Brightness_G, MS_U16 u16Brightness_B);
# 969 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
E_XC_ACE_RESULT MApi_XC_ACE_PicSetPreYOffset(MS_BOOL eWindow, MS_U8 u8PreYOffset);







MS_U8 MApi_XC_ACE_PicGetPreYOffset(MS_BOOL eWindow);
# 986 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetHue( MS_BOOL eWindow, MS_BOOL bUseYUVSpace, MS_U8 u8Hue );
# 995 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
E_XC_ACE_RESULT MApi_XC_ACE_SkipWaitVsync( MS_BOOL eWindow,MS_BOOL bIsSkipWaitVsyn);
# 1004 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetSaturation(MS_BOOL eWindow, MS_BOOL bUseYUVSpace, MS_U8 u8Saturation );







void MApi_XC_ACE_PicSetSharpness( MS_BOOL eWindow, MS_U8 u8Sharpness );
# 1021 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetColorTemp( MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_color_temp* pstColorTemp);
# 1030 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetColorTempEx( MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_color_temp_ex* pstColorTemp);
# 1039 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetPostColorTemp_V02(MS_BOOL eWindow, XC_ACE_color_temp_ex2* pstColorTemp);

#ifndef _API_XC_ACE_C_

#ifndef ENABLE_NEW_COLORTEMP_METHOD
  #define ENABLE_NEW_COLORTEMP_METHOD 0
#endif

#ifndef ENABLE_PRECISE_RGBBRIGHTNESS
  #define ENABLE_PRECISE_RGBBRIGHTNESS 0
#endif

#if ENABLE_NEW_COLORTEMP_METHOD
    #if ENABLE_PRECISE_RGBBRIGHTNESS
        #define MApi_XC_ACE_PicSetColorTemp(x, y, z) MApi_XC_ACE_PicSetPostColorTemp2Ex(x, y, z)
    #else
        #define MApi_XC_ACE_PicSetColorTemp(x, y, z) MApi_XC_ACE_PicSetPostColorTemp2(x, y, z)
    #endif
#else
    #if ENABLE_PRECISE_RGBBRIGHTNESS
        #define MApi_XC_ACE_PicSetColorTemp(x, y, z) MApi_XC_ACE_PicSetColorTempEx(x, y, z)
    #endif
#endif

#define MApi_XC_ACE_PicSetBrightnessInVsync(bWin,x,y,z) {MApi_XC_WaitOutputVSync(2, 100, bWin); MApi_XC_ACE_PicSetBrightness(bWin, x, y, z);}
#define MApi_XC_ACE_PicSetBrightnessPreciseInVsync(bWin,x,y,z) {MApi_XC_WaitOutputVSync(2, 100, bWin); MApi_XC_ACE_PicSetBrightnessPrecise(bWin, x, y, z);}

#endif
# 1075 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_SetFleshTone(MS_BOOL eWindow, MS_BOOL bEn, MS_U8 u8FleshTone);







void MApi_XC_ACE_SetBlackAdjust(MS_BOOL eWindow, MS_U8 u8BlackAdjust);
# 1092 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_BOOL MApi_XC_ACE_Set_IHC_SRAM(MS_U16 *pBuf, MS_U16 u16ByteSize);
# 1101 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_BOOL MApi_XC_ACE_Set_ICC_SRAM(MS_U16 *pBuf, MS_U16 u16ByteSize);
# 1112 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_EnableMWE(MS_BOOL bEnable);





void MApi_XC_ACE_MWECloneVisualEffect(void);







MS_BOOL MApi_XC_ACE_MWESetRegTable(XC_ACE_TAB_Info *pMWETable);







MS_BOOL MApi_XC_ACE_SetMWELoadFromPQ(MS_BOOL bEnable);






MS_BOOL MApi_XC_ACE_MWEStatus(void);





void MApi_XC_ACE_MWEHandle( void );







void MApi_XC_ACE_MWEFuncSel( MS_BOOL eWindow, E_XC_ACE_MWE_FUNC mwe_func);
# 1165 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_MWESetDispWin(MS_U16 u16MWE_Disp_Hstart, MS_U16 u16MWE_Disp_Vstart, MS_U16 u16MWE_Disp_Width, MS_U16 u16MWE_Disp_Height);






void MApi_XC_ACE_3DClonePQMap(XC_ACE_WEAVETYPE enWeaveType);
# 1188 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_DNR_Blending_NRTbl(MS_U8 *pu8NewNR, MS_U8 u8Weight, MS_U8 u8Step, MS_U16 *pu16PreY0, MS_U16 *pu16PreY1, MS_U8 *pu8NRTBL);
# 1199 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_U16 MApi_XC_ACE_DNR_Blending_MISC(MS_U8 u8NewItem, MS_U16 u16PreItem, MS_U8 u8Weight, MS_U8 u8Step);
# 1209 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_U8 MApi_XC_ACE_DNR_Blending(MS_U8 u8NewItem, MS_U16 u16PreItem, MS_U8 u8Weight);






MS_U16 MApi_XC_ACE_DNR_Get_PrecisionShift(void);
# 1229 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_U8 MApi_XC_ACE_DNR_GetMotion_Weight(MS_U8 u8CurMotion, MS_U8 u8PreMotion, MS_U8 u8CurMotionLvl, MS_U8 u8PreMotionLvl, MS_U8 u8DeFlick_Thre, MS_U8 u8DeFilick_Step);
# 1242 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_U8 MApi_XC_ACE_DNR_GetLuma_Weight(MS_U8 u8CurAvgLuma, MS_U8 u8PreAvgLuam, MS_U8 u8CurLumaLvl, MS_U8 u8PreLumaLvl, MS_U8 u8DeFlick_Th, MS_U8 u8DeFlick_Step);
# 1256 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_U8 MApi_XC_ACE_DNR_GetNoise_Weight(MS_U8 u8CurNoise, MS_U8 u8PreNoise, MS_U8 u8Range, MS_U8 u8DeFlick_Th, MS_U8 u8DeFlick_Step);






MS_U8 MApi_XC_ACE_DNR_GetMotion(void);





void MApi_XC_ACE_DNR_Init_Motion(void);





void MApi_XC_ACE_DNR_Init_Luma(void);





void MApi_XC_ACE_DNR_Init_Noise(void);
# 1290 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_DNR_SetParam(MS_BOOL eWindow, XC_ACE_DNR_Param eParam, MS_U16 u16val);






MS_BOOL SYMBOL_WEAK MApi_XC_ACE_SetHDRInit(XC_ACE_HDRinit *pstACE_HDRInitData);







void SYMBOL_WEAK MApi_XC_ACE_SetContrastByGammaTable(MS_BOOL bScalerWin, MS_BOOL bEnable, MS_U8 u8Contrast, MS_U8 u8BaseValue);
# 1314 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_U8 MApi_XC_ACE_DNR_GetParam(MS_BOOL eWindow, XC_ACE_DNR_Param eParam);






void MApi_XC_ACE_DNR_SetNRTbl(MS_U8 *pu8Tbl);
# 1330 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
E_XC_ACE_RESULT MApi_XC_ACE_GetLibVer(const MSIF_Version **ppVersion);






const XC_ACE_ApiInfo * MApi_XC_ACE_GetInfo(void);
# 1347 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
MS_BOOL MApi_XC_ACE_GetStatus(XC_ACE_ApiStatus *pDrvStatus, MS_BOOL bWindow);







MS_BOOL MApi_XC_ACE_SetDbgLevel(MS_U16 u16DbgSwitch);






void MApi_XC_ACE_ColorCorrectionTable( MS_BOOL bScalerWin, MS_S16 *psColorCorrectionTable );






void MApi_XC_ACE_SetColorMatrixControl( MS_BOOL bScalerWin, MS_BOOL bEnable );






void MApi_XC_ACE_SetRBChannelRange( MS_BOOL bScalerWin, MS_BOOL bRange );







MS_U32 MApi_XC_ACE_SetPowerState(EN_POWER_MODE enPowerState);
# 1394 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace.h"
void MApi_XC_ACE_PicSetPostColorTemp(MS_BOOL eWindow, XC_ACE_color_temp* pstColorTemp);





void MApi_XC_ACE_PicSetPostColorTempEx(MS_BOOL eWindow, XC_ACE_color_temp_ex* pstColorTemp);





void MApi_XC_ACE_PicSetPostColorTemp2(MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_color_temp* pstColorTemp);





void MApi_XC_ACE_PicSetPostColorTemp2Ex(MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_color_temp_ex* pstColorTemp);



#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUSB_eCos.h"
#ifndef _DRVUSB_H
#define _DRVUSB_H 

#include "drvUsbcommon.h"




#define USBC_IP_SUPPORT 1

#define USB_IF_EHSET_SUPPORT 1

#define USB_CDC_SUPPORT 0

#define USB_MASS_STORAGE_SUPPORT 1

#define USB_HID_SUPPORT 0





#define USB_SYSTEM_STR_SUPPORT 






#define USBC_OVER_CURRENT 1
#define USBC_NON_OVER_CURRENT 2

#define USB_PLUG_IN 1
#define USB_PLUG_OUT 2

#define USB_EVENT_DEV_TYPE_UNKNOW 0
#define USB_EVENT_DEV_TYPE_STOR 1
#define USB_EVENT_DEV_TYPE_HID 2
#define USB_EVENT_DEV_TYPE_CDC 3
#define USB_EVENT_DEV_NO_RESPONSE 4
#define USB_EVENT_DEV_TYPE_VENDOR 5

#define USB_NOT_RESPONSE 0xff
#define USB_INTERFACE_CLASS_NONE 0
#define USB_INTERFACE_CLASS_MSD 0x08
#define USB_INTERFACE_CLASS_HUB 0x09
#define USB_INTERFACE_CLASS_HID 0x03

typedef void ( *USBCallback ) (MS_U8 u8Event, MS_U32 u32Para, char *s);
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUSB_eCos.h"
extern USBCallback _DrvUSB_CBFun;

void MDrv_OverCurrentDetect_RegisterCallBack (USBCallback pCallbackFn, MS_U8 port_mask);
void MDrv_USB_RegisterCallBack (USBCallback pCallbackFn);

void MDrv_Usb_Init(
    mem_Alloc pfn_Cachedmem_Alloc,
    mem_Free pfn_Cachedmem_Free,
    mem_Alloc pfn_NonCachedmem_Alloc,
    mem_Free pfn_NonCachedmem_Free,
    mem_VA2PA pfn_mem_VA2PA,
    mem_PA2VA pfn_mem_PA2VA,
    mem_Cached2Noncached pfn_mem_Cached2Noncached,
    mem_NonCached2Cached pfn_mem_NonCached2Cached
);
MS_BOOL MDrv_USB_Port_Init(MS_U8 u8Hostid);
void MDrv_UsbClose(void);
int MDrv_UsbDeviceConnectBitEx(MS_U8 u8Hostid);
MS_BOOL MDrv_USB_Port_Close(MS_U8 u8Hostid);
#ifdef USB_SYSTEM_STR_SUPPORT
void MDrv_Usb_STR_Off(MS_U8 u8Hostid);
void MDrv_Usb_STR_On(MS_U8 u8Hostid);
#endif


MS_BOOL MDrv_UsbBlockReadToMIU(MS_U8 lun, MS_U32 u32BlockAddr, MS_U32 u32BlockNum, MS_U32 u32MIUAddr);
MS_BOOL MDrv_UsbBlockWriteFromMIU(MS_U8 lun, MS_U32 u32BlockAddr, MS_U32 u32BlockNum, MS_U32 u32MIUAddr);
MS_BOOL MDrv_UsbBlockReadToMIUEx(MS_U8 uPort,MS_U8 lun, MS_U32 u32BlockAddr, MS_U32 u32BlockNum, MS_U32 u32MIUAddr);
MS_BOOL MDrv_UsbBlockWriteFromMIUEx(MS_U8 uPort,MS_U8 lun, MS_U32 u32BlockAddr, MS_U32 u32BlockNum, MS_U32 u32MIUAddr);
MS_U32 MDrv_GetUsbBlockSize(MS_U8 lun);
MS_U32 MDrv_GetUsbBlockSizeEx(MS_U8 uPort, MS_U8 lun);
MS_U32 MDrv_GetUsbBlockNumEx(MS_U8 uPort, MS_U8 lun);
MS_U32 MDrv_GetUsbBlockNum(MS_U8 lun);
MS_U8 MDrv_UsbGetMaxLUNCount(void);
MS_U8 MDrv_UsbGetMaxLUNCountEx(MS_U8 uPort);
MS_BOOL MDrv_UsbIsLunConnected(MS_U8 uPort, MS_U8 lun);

MS_BOOL ChkUsbReady(void);
MS_BOOL ChkUsbReadyEx(MS_U8 uPort);


MS_U8 MDrv_USB_MscLookupHostID(char *str);
char *MDrv_USB_MscLookupManufacturerString(char *str);
char *MDrv_USB_MscLookupProductString(char *str);
char *MDrv_USB_MscLookupSerialNumberString(char *str);
MS_U32 MDrv_USB_MscLookupVidPid(char *str);
int MDrv_USB_Quirk_Add_3G(U32 vid_pid);


enum usb_ioctl_cmd {
    USB_IOCTL_CTRL,
    USB_IOCTL_BULK
};

enum usb_ioctl_bulk_dir {
    USB_IOCTL_BULK_IN,
    USB_IOCTL_BULK_OUT
};

struct usb_ioctl_ctrl_xfer{
    U8 bRequestType;
    U8 bRequest;
    U16 wValue;
    U16 wIndex;
    U16 wLength;
    U32 timeout;
    void *pDataBuf;
};

struct usb_ioctl_bulk_xfer {
    enum usb_ioctl_bulk_dir dir;
    U32 len;
    void *pDataBuf;
};

int MDrv_USB_IOCTL_Cmd(char *strDevPath, enum usb_ioctl_cmd cmd_type, void *pdata);
#endif
# 129 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
#ifndef _DRV_SAR_H_
#define _DRV_SAR_H_ 


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"
#include "UFO.h"
# 150 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
#define MSIF_SAR_LIB_CODE {'S','A','R','_'}
#define MSIF_SAR_LIBVER {'0','3'}
#define MSIF_SAR_BUILDNUM {'0','9'}
#define MSIF_SAR_CHANGELIST {'0','0','4','3','3','2','5','1'}

#define SAR_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_SAR_LIB_CODE, \
    MSIF_SAR_LIBVER, \
    MSIF_SAR_BUILDNUM, \
    MSIF_SAR_CHANGELIST, \
    MSIF_OS


#define SAR_VERSION_STRING_MAX 33
#define SAR_DUMMY_KEY 0xFF
#define SAR_DUMMY_STATUS 0x00
#define SAR_VERSION 0x00000001
# 184 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
typedef struct
{
    MS_U8 u8TrigMode : 1;
    MS_U8 u8OprMode : 1;
    MS_U8 u8CfgdChs : 3;
    MS_U8 u8Reserved : 3;
}SAR_DrvInfo;


typedef struct
{
    MS_U8 u8UpBnd;
    MS_U8 u8LoBnd;
} SAR_BndCfg;


typedef struct
{
    MS_U8 u8SARChID;
    MS_U8 u8UpBnd;
    MS_U8 u8LoBnd;
    MS_U8 u8KeyLevelNum;
    MS_U8 u8KeyThreshold[8];
    MS_U8 u8KeyCode[8];
} SAR_RegCfg;


typedef enum
{

    E_SAR_FAIL =0,

    E_SAR_OK = 1,

} SAR_Result;


typedef enum
{

    E_SAR_20V =0,

    E_SAR_33V = 1,

} SAR_LEVEL;



typedef enum
{

    E_SAR_INIT_OK = (1<<0),

    E_SAR_INST_CLBK = (1<<1),

    E_SAR_KEY_CODE = (1<<2),

    E_SAR_ENABLE = (1<<3),

    E_SAR_MAX_STATUS = 255
} SAR_Status;





typedef enum
{

    E_SAR_CPUTo51_CMD_INIT=0x00,

    E_SAR_CPUTo51_CMD_CONFIG,

    E_SAR_CPUTo51_CMD_KEYCODE,

    E_SAR_CPUTo51_CMD_SETCLBK,

    E_SAR_CPUTo51_CMD_LIBVER,

    E_SAR_CPUTo51_CMD_STATUS,

    E_SAR_CPUTo51_CMD_ENABLE,

    E_SAR_CPUTo51_CMD_INFO,
} SAR_CPUTo51CmdIdx;


typedef enum
{


    E_SAR_51ToCPU_CMD_ACK_INIT=0x00,

    E_SAR_51ToCPU_CMD_ACK_CONFIG,

    E_SAR_51ToCPU_CMD_ACK_KEYCODE,

    E_SAR_51ToCPU_CMD_ACK_SETCLBK,

    E_SAR_51ToCPU_CMD_ACK_LIBVER,

    E_SAR_51ToCPU_CMD_ACK_STATUS,

    E_SAR_51ToCPU_CMD_ACK_ENABLE,

    E_SAR_51ToCPU_CMD_ACK_INFO,



    E_SAR_51ToCPU_CMD_KEYCODE,

} SAR_51ToCPUCmdIdx;


typedef enum
{

    E_SAR_ACKFLG_NULL = 0,

    E_SAR_ACKFLG_WAIT_INIT = (1<<0),

    E_SAR_ACKFLG_WAIT_CONFIG = (1<<1),

    E_SAR_ACKFLG_WAIT_KEYCODE = (1<<2),

    E_SAR_ACKFLG_WAIT_SETCLBK = (1<<3),

    E_SAR_ACKFLG_WAIT_LIBVER = (1<<4),

    E_SAR_ACKFLG_WAIT_STATUS = (1<<5),

    E_SAR_ACKFLG_WAIT_ENABLE = (1<<6),

    E_SAR_ACKFLG_WAIT_INFO = (1<<7),
} SAR_AckFlags;


typedef void ( *SAR_Callback ) (MS_U8 u8Key, MS_U8 u8RepeatFlag);


typedef enum _SAR_DbgLvl
{
    E_SAR_DBGLVL_NONE = 0,
    E_SAR_DBGLVL_WARNING,
    E_SAR_DBGLVL_ERROR,
    E_SAR_DBGLVL_INFO,
    E_SAR_DBGLVL_ALL,
}SAR_DbgLvl;
# 342 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
typedef enum
{

    E_SAR_KPD_FAIL =0,

    E_SAR_KPD_OK = 1,

} SAR_KpdResult;


typedef struct
{
    MS_U8 u8UpBnd;
    MS_U8 u8LoBnd;
} SAR_KpdBndCfg;


typedef struct
{
    MS_U8 u8SARChID;
    SAR_KpdBndCfg tSARChBnd;
    MS_U8 u8KeyLevelNum;
    MS_U8 u8KeyThreshold[8];
    MS_U8 u8KeyCode[8];
} SAR_KpdRegCfg;


typedef struct
{
    MS_U8 u8TrigMode : 1;
    MS_U8 u8SingleChEn : 1;
    MS_U8 u8DigitOprMode : 1;
    MS_U8 u8AtopFreerun : 1;
    MS_U8 u8DigitPwrDn : 1;
    MS_U8 u8AtopPwrDn : 1;
    MS_U8 u8HighChEn : 1;
    MS_U8 u8InterruptEn : 1;

    MS_U8 u8ConfigUsedChs : 3;
    MS_U8 u8MaxKpdSuppChs : 3;
    MS_U8 u8Reserved: 2;
    MS_U8 u8MaxKpdAvlbChs : 3;
    MS_U8 u8MaxKpdAvlbLvls: 5;
} SAR_KpdDrvInfo;


typedef enum
{
    E_SAR_KPD_INVALID=0,

    E_SAR_KPD_INIT_OK = (1<<0),

    E_SAR_KPD_NOT_SUP = (1<<1),

    E_SAR_KPD_MAX_STATUS = 255
} SAR_KpdStatus;



typedef enum
{
    E_SAR_KPD_DBGLVL_NONE = 0,
    E_SAR_KPD_DBGLVL_WARNING,
    E_SAR_KPD_DBGLVL_ERROR,
    E_SAR_KPD_DBGLVL_INFO,
    E_SAR_KPD_DBGLVL_ALL,
}SAR_KpdDbgLvl;







typedef enum
{

    E_SAR_ADC_FAIL =0,

    E_SAR_ADC_OK = 1,

} SAR_AdcResult;


typedef enum
{
    E_SAR_ADC_DBGLVL_NONE = 0,
    E_SAR_ADC_DBGLVL_WARNING,
    E_SAR_ADC_DBGLVL_ERROR,
    E_SAR_ADC_DBGLVL_INFO,
    E_SAR_ADC_DBGLVL_ALL,
}SAR_AdcDbgLvl;


typedef enum
{
    E_SAR_ADC_HSYNC_CH0 = 0,
    E_SAR_ADC_HSYNC_CH1,
    E_SAR_ADC_HSYNC_CH2,
    E_SAR_ADC_HSYNC_CH3,
    E_SAR_ADC_HSYNC_CHMAX,
}SAR_AdcHSyncCh;







typedef enum
{

    E_SAR_GPIO_FAIL =0,

    E_SAR_GPIO_OK = 1,

} SAR_GpioResult;


typedef enum
{
    E_SAR_GPIO_DBGLVL_NONE = 0,
    E_SAR_GPIO_DBGLVL_WARNING,
    E_SAR_GPIO_DBGLVL_ERROR,
    E_SAR_GPIO_DBGLVL_INFO,
    E_SAR_GPIO_DBGLVL_ALL,
}SAR_GpioDbgLvl;


typedef struct _SAR_KeyValue_Data_Member
{
    MS_U8 u8Channel;
    MS_U8 u8Key;
    MS_U8 u8Repeat;
}SAR_KeyValue_Data_Member;

typedef union
{
    SAR_KeyValue_Data_Member sData[16];
} SAR_KeyValue_Data;

typedef struct _SAR_KeyValue
{
    MS_U32 u32Version;
    SAR_KeyValue_Data unSarKeyData;
    MS_U32 u32Num;
}SAR_KeyValue;







typedef enum{
    E_SAR_SMC_FAIL =0,
    E_SAR_SMC_OK = 1,
}SAR_SmcResult;


typedef enum{
    E_SAR_SMC_INT_LOW_ACT =0,
    E_SAR_SMC_INT_HIGH_ACT = 1
}SAR_SmcIntLevel;


typedef enum
{
    E_SAR_SMC_DBGLVL_NONE = 0,
    E_SAR_SMC_DBGLVL_WARNING,
    E_SAR_SMC_DBGLVL_ERROR,
    E_SAR_SMC_DBGLVL_INFO,
    E_SAR_SMC_DBGLVL_ALL,
}SAR_SmcDbgLvl;
# 533 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_Init(void);
# 543 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_Config(SAR_RegCfg *pSARRegCfg);
# 554 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_GetKeyCode(MS_U8 *pu8Key, MS_U8 *pu8Repeat);
# 566 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_SetCallback(SAR_Callback pCallback);







SAR_Callback MDrv_SAR_GetCallback(void);
# 584 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_GetLibVer(const MSIF_Version **ppVersion);
# 594 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_GetStatus(MS_U8 *pu8SARStatus);
# 604 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_Enable(MS_BOOL bEnable);







const SAR_DrvInfo* MDrv_SAR_GetInfo(void);
# 621 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_Result MDrv_SAR_SetDbgLevel(SAR_DbgLvl eLevel);
# 638 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_Init(void);
# 647 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_SetChInfo(SAR_KpdRegCfg *sarChInfo);
# 657 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_GetKeyCode(MS_U8 *pu8Key, MS_U8 *pu8Repeat);
# 667 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_GetMultiKeyCode(SAR_KeyValue *sSarKey, MS_U32 u32Size);
# 676 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdStatus MDrv_SAR_Kpd_GetStatus(void);






const SAR_KpdDrvInfo* MDrv_SAR_Kpd_GetInfo(void);
# 692 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_SetDbgLevel(SAR_KpdDbgLvl eLevel);
# 702 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_AdcResult MDrv_SAR_Adc_Config(MS_U8 u8Channel,MS_BOOL bEnable);







MS_U8 MDrv_SAR_Adc_GetValue(MS_U8 u8Channel);
# 719 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_AdcResult MDrv_SAR_Adc_SetHSyncChEn(MS_BOOL bEnable);
# 728 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_AdcResult MDrv_SAR_Adc_SetHSyncCh(SAR_AdcHSyncCh eHSyncCh);
# 737 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_AdcResult MDrv_SAR_Adc_SetDbgLevel(SAR_AdcDbgLvl eLevel);
# 747 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_GpioResult MDrv_SAR_Gpio_CfgDir(MS_U8 u8Channel,MS_BOOL u8InOut);
# 757 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_GpioResult MDrv_SAR_Gpio_SetOutput(MS_U8 u8Channel,MS_BOOL bHighLow);
# 767 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_GpioResult MDrv_SAR_Gpio_GetInput(MS_U8 u8Channel, MS_BOOL* pbResult);
# 776 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_GpioResult MDrv_SAR_Gpio_SetDbgLevel(SAR_GpioDbgLvl eLevel);
# 786 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_GpioResult MDrv_SAR_CfgInterrupt(MS_U8 u8Channel, MS_BOOL bEnable);
# 795 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_GpioResult MDrv_SAR_CfgPMWakeup(MS_BOOL bEnable);
# 804 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
void MDrv_SAR_ClearInterrupt(MS_U8 u8Channel);
# 813 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_GpioResult MDrv_SAR_GetInterruptStatus(MS_U8 u8Channel);
# 823 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_MMIO_Init(void);
# 833 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_KpdResult MDrv_SAR_Kpd_CfgChannelBound(MS_U8 u8Channel, MS_U16 u16Upper, MS_U16 u16Lower);

SAR_KpdResult MDrv_SAR_Kpd_SetADCSamplingDuration(MS_U8 u8Duration);
# 844 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
void MDrv_SAR_SetLevel(SAR_LEVEL eSarLevel);


MS_U32 MDrv_SAR_SetPowerState(EN_POWER_MODE u16PowerState);
# 857 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSAR.h"
SAR_SmcResult MDrv_SAR_Smc_PwrDetCfg(MS_U8 u8SarSmcIntChID, SAR_SmcIntLevel eSmcIntLevel, MS_U32 u32BndVal);







SAR_SmcResult MDrv_SAR_Smc_SetDbgLevel(SAR_SmcDbgLvl eLevel);






typedef enum {
    MDrv_CMD_Kpd_GetKeyCode,
} eSARIoctlOpt;







typedef struct _SAR_Kpd_GetKeyCode_PARAM
{
   MS_U8 *pu8Key;
   MS_U8 *pu8Repeat;
} SAR_Kpd_GetKeyCode_PARAM;




typedef SAR_KpdResult (*IOCTL_SAR_Kpd_GetKeyCode)(MS_U8 *pu8Key, MS_U8 *pu8Repeat);


typedef struct _SAR_INSTANT_PRIVATE
{

 IOCTL_SAR_Kpd_GetKeyCode fpSARKpdGetKeyCode;

}SAR_INSTANT_PRIVATE;



typedef struct _SAR_RESOURCE_PRIVATE
{
    MS_U32 Dummy;
}SAR_RESOURCE_PRIVATE;


typedef void (*TSENSOR_CB_FUNC)(void);

MS_BOOL MDrv_TSensor_GetTemperatureRange(MS_S16 *s16UpBound_C, MS_S16 *s16LowBound_C);
MS_S16 MDrv_TSensor_GetTemperature(void);
MS_BOOL MDrv_TSensor_Init(void);
MS_BOOL MDrv_TSensor_SetTemperatureMointerRange (MS_S16 s16UpBound_C, MS_S16 s16LowBound_C, TSENSOR_CB_FUNC pTSensor);
MS_BOOL MDrv_TSensorIRQClear(void);
#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVD.h"
#ifndef _DRV_MVD_H_
#define _DRV_MVD_H_ 
# 112 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMVD.h"
#ifdef __cplusplus
extern "C"
{
#endif

#include "drvmvd_cc.h"




#define MVD_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'M','V','D','_'}, \
    {'0','A'}, \
    {'0','1'}, \
    {'0','0','6','4','1','6','6','7'}, \
    MSIF_OS

#define MIU1_BASE_DEFAULT 0x8000000
#define MIU_SEL_0 0
#define MIU_SEL_1 1


#ifdef REDLION_LINUX_KERNEL_ENVI
 #define MVD_ENABLE_MSOS_MIU1_BASE 0
#else
 #define MVD_ENABLE_MSOS_MIU1_BASE 1
#endif






typedef struct _MVD_Caps
{
    MS_BOOL bMPEG2;
    MS_BOOL bMPEG4;
    MS_BOOL bVC1;
} MVD_Caps;


typedef struct _MVD_DrvInfo
{
    MS_U32 u32Resource;
    MS_U32 u32DeviceNum;
    MS_U32 u32FWVersion;
    MVD_Caps stCaps;
} MVD_DrvInfo;


typedef enum _MVD_DecStat
{
    E_MVD_STAT_IDLE = 0x00,
    E_MVD_STAT_FIND_STARTCODE = 0x01,
    E_MVD_STAT_FIND_SPECIALCODE = 0x11,

    E_MVD_STAT_FIND_FRAMEBUFFER = 0x02,


    E_MVD_STAT_WAIT_DECODEDONE = 0x03,
    E_MVD_STAT_DECODE_DONE = 0x04,
    E_MVD_STAT_WAIT_VDFIFO = 0x05,
    E_MVD_STAT_INIT_SUCCESS = 0x06,
    E_MVD_STAT_UNKNOWN = 0xff,
} MVD_DecStat;


typedef struct _MVD_DrvStatus
{
    MS_U32 u32FWVer;
    MVD_DecStat eDecStat;
    MS_BOOL bIsBusy;
    MS_U8 u8LastFWCmd;
} MVD_DrvStatus;


typedef enum _MVD_CodecType
{
    E_MVD_CODEC_MPEG2 = 0x10,
    E_MVD_CODEC_MPEG4 = 0x00,
    E_MVD_CODEC_MPEG4_SHORT_VIDEO_HEADER = 0x01,
    E_MVD_CODEC_DIVX311 = 0x02,
    E_MVD_CODEC_FLV = 0x03,
    E_MVD_CODEC_VC1_ADV = 0x04,
    E_MVD_CODEC_VC1_MAIN = 0x05,
    E_MVD_CODEC_UNKNOWN = 0xff
} MVD_CodecType;


typedef enum _MVD_SrcMode
{
    E_MVD_FILE_MODE = 0x00,
    E_MVD_SLQ_MODE = 0x01,
    E_MVD_TS_MODE = 0x02,
    E_MVD_SLQ_TBL_MODE = 0x03,
    E_MVD_TS_FILE_MODE = 0x04,
    E_MVD_SRC_UNKNOWN = 0x05
} MVD_SrcMode;


typedef enum
{
    E_MVD_TIMESTAMP_FREERUN = 0,
    E_MVD_TIMESTAMP_PTS = 1,
    E_MVD_TIMESTAMP_DTS = 2,
    E_MVD_TIMESTAMP_STS = 3,
    E_MVD_TIMESTAMP_PTS_RVU = 4,
    E_MVD_TIMESTAMP_DTS_RVU = 5,

} MVD_TIMESTAMP_TYPE;


typedef enum _MVD_ErrCode
{
    E_MVD_ERR_UNKNOWN = 0,
    E_MVD_ERR_SHAPE = 1,
    E_MVD_ERR_USED_SPRITE = 2,
    E_MVD_ERR_NOT_8_BIT = 3,
    E_MVD_ERR_NERPRED_ENABLE = 4,
    E_MVD_ERR_REDUCED_RES_ENABLE = 5,
    E_MVD_ERR_SCALABILITY = 6,
    E_MVD_ERR_OTHER = 7,
    E_MVD_ERR_H263_ERROR = 8,
    E_MVD_ERR_RES_NOT_SUPPORT = 9,
    E_MVD_ERR_MPEG4_NOT_SUPPORT = 10,
    E_MVD_ERR_PROFILE_NOT_SUPPORT= 11,
    E_MVD_ERR_RCV_ERROR_OCCUR = 12,
    E_MVD_ERR_VC1_NOT_SUPPORT = 13,
    E_MVD_ERR_UNKNOW_CODEC_NOT_SUPPORT= 14,
    E_MVD_ERR_SLQ_TBL_NOT_SUPPORT= 15
} MVD_ErrCode;


typedef enum _MVD_ErrStatus
{

    E_MVD_ERR_SHAPE_RECTANGULAR = 0x10,
    E_MVD_ERR_SHAPE_BINARY = 0x11,
    E_MVD_ERR_SHAPE_BINARY_ONLY = 0x12,
    E_MVD_ERR_SHAPE_GRAYSCALE = 0x13,


    E_MVD_ERR_USED_SPRITE_UNUSED = 0x20,
    E_MVD_ERR_USED_SPRITE_STATIC = 0x21,
    E_MVD_ERR_USED_SPRITE_GMC = 0x22,
    E_MVD_ERR_USED_SPRITE_RESERVED = 0x23,

    E_MVD_ERR_STATUS_NONE = 0x77,
    E_MVD_ERR_STATUS_UNKOWN = 0x00,
} MVD_ErrStatus;


typedef enum _MVD_PicType
{
    E_MVD_PIC_I = 0,
    E_MVD_PIC_P = 1,
    E_MVD_PIC_B = 2,
    E_MVD_PIC_UNKNOWN = 0xf,
} MVD_PicType;


typedef enum _MVD_FrcMode {
    E_MVD_FRC_NORMAL = 0,
    E_MVD_FRC_DISP_TWICE = 1,
    E_MVD_FRC_3_2_PULLDOWN = 2,
    E_MVD_FRC_PAL_TO_NTSC = 3,
    E_MVD_FRC_NTSC_TO_PAL = 4,
    E_MVD_FRC_DISP_ONEFIELD = 5,
} MVD_FrcMode;


typedef enum
{
    E_MVD_PLAY = 0x00,
    E_MVD_STEPDISP = 0x01,
    E_MVD_PAUSE = 0x02,
    E_MVD_FASTFORWARD = 0x03,
    E_MVD_BACKFORWARD = 0x04,
    E_MVD_UNKNOWMODE = 0xff
} MVD_PlayMode;


typedef struct
{
    MS_VIRT u32StAddr;
    MS_U32 u32Length;
    MS_U32 u32TimeStamp;
    MS_U32 u32ID_L;
    MS_U32 u32ID_H;
} MVD_PacketInfo;


typedef struct
{
    MS_U16 u16HorSize;
    MS_U16 u16VerSize;
    MS_U32 u32FrameRate;
    MS_U8 u8AspectRate;
    MS_U8 u8Interlace;
    MS_U8 u8AFD;
    MS_U16 u16par_width;
    MS_U16 u16par_height;
    MS_U16 u16SarWidth;
    MS_U16 u16SarHeight;
    MS_U16 u16CropRight;
    MS_U16 u16CropLeft;
    MS_U16 u16CropBottom;
    MS_U16 u16CropTop;
    MS_U16 u16Pitch;
    MS_U16 u16PTSInterval;
    MS_U8 u8MPEG1;
    MS_U8 u8PlayMode;
    MS_U8 u8FrcMode;
    MS_U32 u32DynScalingAddr;
    MS_U8 u8DynScalingDepth;
    MS_U32 u32DynScalingBufSize;
    MS_BOOL bEnableMIUSel;
} MVD_FrameInfo;


typedef struct
{
    MS_BOOL bEnable;
    MS_U32 u32Delay;
    MS_U16 u16Tolerance;
} MVD_AVSyncCfg;


typedef struct
{
    MS_U8 Arg0;
    MS_U8 Arg1;
    MS_U8 Arg2;
    MS_U8 Arg3;
    MS_U8 Arg4;
    MS_U8 Arg5;
} MVD_CmdArg;


typedef enum
{
    MVD_HANDSHAKE_PAUSE,
    MVD_HANDSHAKE_SLQ_RST,
    MVD_HANDSHAKE_STOP,
    MVD_HANDSHAKE_SKIP_DATA,
    MVD_HANDSHAKE_SKIP_TO_PTS,
    MVD_HANDSHAKE_SINGLE_STEP,
    MVD_HANDSHAKE_SCALER_INFO,
    MVD_HANDSHAKE_GET_NXTDISPFRM,
    MVD_HANDSHAKE_PARSER_RST,
    MVD_HANDSHAKE_RST_CC608,
    MVD_HANDSHAKE_RST_CC708
} MVD_HANDSHAKE_CMD;



typedef enum
{
    E_MVD_FB_REDUCTION_NONE = 0,
    E_MVD_FB_REDUCTION_1_2 = 1,
    E_MVD_FB_REDUCTION_1_4 = 2,
}MVD_FB_Reduction_Type;

typedef struct
{
    MVD_FB_Reduction_Type LumaFBReductionMode;
    MVD_FB_Reduction_Type ChromaFBReductionMode;
    MS_U8 u8EnableAutoMode;
} MVD_FB_Reduction;



typedef struct
{
    MS_U32 u32FWVerNum;
    MS_U32 u32FWSrc;
    MS_U8 u8FBMode;
    MVD_CodecType eCodecType;
    MS_BOOL bNotReload;
    MVD_FB_Reduction stFBReduction;
    MS_U16 u16FBReduceValue;
} MVD_FWCfg;


typedef enum
{
    E_MVD_FW_SOURCE_NONE,
    E_MVD_FW_SOURCE_DRAM,
    E_MVD_FW_SOURCE_FLASH,
} MVD_FWSrcType;


typedef struct
{
    MVD_FWSrcType eFWSrcType;
    MS_U32 u32FWSrcVAddr;
    MS_PHY u32FWBinAddr;
    MS_U32 u32FWBinSize;
    MS_PHY u32FWCodeAddr;
    MS_U32 u32FWCodeSize;
    MS_PHY u32FBAddr;
    MS_U32 u32FBSize;
    MS_PHY u32BSAddr;
    MS_U32 u32BSSize;
    MS_PHY u32DrvBufAddr;
    MS_U32 u32DrvBufSize;
    MS_PHY u32DynSacalingBufAddr;
    MS_U32 u32DynSacalingBufSize;
    MS_PHY u32Miu1BaseAddr;
    MS_BOOL bFWMiuSel;
    MS_BOOL bHWMiuSel;
    MS_BOOL bEnableDynScale;
    MS_BOOL bSupportSDModeOnly;
} MVD_MEMCfg;


typedef struct
{
    MVD_CodecType u8CodecType;
    MVD_SrcMode u8BSProviderMode;
    MS_U8 bDisablePESParsing;
} MVD_InfoCfg;


typedef enum
{
    E_MVD_RET_OK = 1,
    E_MVD_RET_FAIL = 0,
    E_MVD_RET_INVALID_PARAM = 2,
    E_MVD_RET_QUEUE_FULL = 3,
    E_MVD_RET_TIME_OUT = 4
} E_MVD_Result;


typedef enum
{
    E_MVD_TRICK_DEC_ALL = 0,
    E_MVD_TRICK_DEC_IP,
    E_MVD_TRICK_DEC_I,
    E_MVD_TRICK_DEC_UNKNOWN
} MVD_TrickDec;


typedef enum
{
    E_MVD_SPEED_DEFAULT = 0,
    E_MVD_SPEED_FAST,
    E_MVD_SPEED_SLOW,
    E_MVD_SPEED_TYPE_UNKNOWN
} MVD_SpeedType;


typedef enum
{
    E_MVD_PATTERN_FLUSH = 0,
    E_MVD_PATTERN_FILEEND,
} MVD_PatternType;


typedef struct
{
    MS_PHY u32LumaAddr;
    MS_PHY u32ChromaAddr;
    MS_U32 u32TimeStamp;
    MS_U32 u32ID_L;
    MS_U32 u32ID_H;
    MS_U16 u16Pitch;
    MS_U16 u16Width;
    MS_U16 u16Height;
    MS_U16 u16FrmIdx;
    MVD_PicType eFrmType;
} MVD_FrmInfo;


typedef struct
{
    MS_U16 u16VSize;
    MS_U16 u16HSize;
    MS_U16 u16VOffset;
    MS_U16 u16HOffset;
} MVD_ExtDispInfo;


typedef enum
{
    E_MVD_FRMINFO_DISPLAY=0,
    E_MVD_FRMINFO_DECODE =1,
    E_MVD_FRMINFO_NEXT_DISPLAY =2,
} MVD_FrmInfoType;

typedef enum {
    E_MVD_FRAME_FLIP = 0,
    E_MVD_FRAME_RELEASE = 1,
} MVD_FrmOpt;


typedef struct
{
    MS_U8 u8TimeCodeHr;
    MS_U8 u8TimeCodeMin;
    MS_U8 u8TimeCodeSec;
    MS_U8 u8TimeCodePic;

    MS_U8 u8DropFrmFlag;
    MS_U8 u8Reserved[3];
} MVD_TimeCode;


typedef enum _MVD_CCFormat
{
    E_MVD_CC_NONE = 0x00,
    E_MVD_CC_608 = 0x01,
    E_MVD_CC_708 = 0x02,
    E_MVD_CC_UNPACKED = 0x03,
} MVD_CCFormat;


typedef enum _MVD_CCType
{
    E_MVD_CC_TYPE_NONE = 0,
    E_MVD_CC_TYPE_NTSC_FIELD1 = 1,
    E_MVD_CC_TYPE_NTSC_FIELD2 = 2,
    E_MVD_CC_TYPE_DTVCC = 3,
    E_MVD_CC_TYPE_NTSC_TWOFIELD = 4,
} MVD_CCType;


typedef struct
{
    MVD_CCFormat eFormat;
    MVD_CCType eType;
    MS_U32 u32BufStAdd;
    MS_U32 u32BufSize;
} MVD_CCCfg;


typedef struct
{
    MS_U32 u32Pts;
    MS_U8 u8PicStruct;
    MS_U8 u8PicType;
    MS_U8 u8TopFieldFirst;
    MS_U8 u8RptFirstField;

    MS_U16 u16TmpRef;
    MS_U8 u8ByteCnt;
    MS_U8 u8Reserve;

    MS_U32 u32DataBuf;
} MVD_UsrDataInfo;


typedef enum
{
    E_MVD_EVENT_DISABLE_ALL = 0,
    E_MVD_EVENT_USER_DATA = BIT(0),
    E_MVD_EVENT_DISP_VSYNC = BIT(1),
    E_MVD_EVENT_PIC_FOUND = BIT(2),
    E_MVD_EVENT_FIRST_FRAME = BIT(3),
    E_MVD_EVENT_DISP_RDY = BIT(4),
    E_MVD_EVENT_SEQ_FOUND = BIT(5),



    E_MVD_EVENT_UNMUTE = BIT(8),
    E_MVD_EVENT_USER_DATA_DISP= BIT(9),
    E_MVD_EVENT_DEC_I = BIT(17),
} MVD_Event;


typedef enum
{
    E_MVD_CLOCK_SPEED_NONE = 0,
    E_MVD_CLOCK_SPEED_HIGHEST,
    E_MVD_CLOCK_SPEED_HIGH,
    E_MVD_CLOCK_SPEED_MEDIUM,
    E_MVD_CLOCK_SPEED_LOW,
    E_MVD_CLOCK_SPEED_LOWEST,
    E_MVD_CLOCK_SPEED_DEFAULT,
} MVD_ClockSpeed;


typedef void (*MVD_InterruptCb)(void);

typedef struct
{
    MS_PHY u32UserDataBuf;
} MVD_InternalMemCfg;




E_MVD_Result MDrv_MVD_SetCfg(MVD_FWCfg* fwCfg, MVD_MEMCfg* memCfg, MVD_InfoCfg* InfoCfg);
MS_U32 MDrv_MVD_GetFWVer(void);
void MDrv_MVD_SetDbgLevel(MS_U8 level);
const MVD_DrvInfo* MDrv_MVD_GetInfo(void);
E_MVD_Result MDrv_MVD_GetLibVer(const MSIF_Version **ppVersion);
void MDrv_MVD_GetStatus(MVD_DrvStatus* pDrvStatus);
MVD_InternalMemCfg *MDrv_MVD_GetInternalMemCfg(void);


void MDrv_MVD_SetCodecInfo(MVD_CodecType u8CodecType, MVD_SrcMode u8BSProviderMode, MS_U8 bDisablePESParsing);
void MDrv_MVD_SetDivXCfg(MS_U8 u8MvAdjust, MS_U8 u8IdctSel);

MS_BOOL MDrv_MVD_SetBitStreamAddr(MS_U32 u32start, MS_U32 u32end);
void MDrv_MVD_SetFrameBuffAddr(MS_U32 u32addr);
void MDrv_MVD_GetFrameInfo(MVD_FrameInfo *pinfo );
void MDrv_MVD_SetOverflowTH (MS_U32 u32Threshold);
void MDrv_MVD_SetUnderflowTH (MS_U32 u32Threshold);

void MDrv_MVD_RstIFrameDec( void );
MS_BOOL MDrv_MVD_GetIsIFrameDecoding( void );

MS_U8 MDrv_MVD_GetSyncStatus( void );
MS_BOOL MDrv_MVD_GetIsFreerun(void);
MS_U8 MDrv_MVD_GetIsIPicFound( void );


MS_U32 MDrv_MVD_GetResidualStreamSize( void );

MS_BOOL MDrv_MVD_DecodeIFrame(MS_PHY u32FrameBufAddr, MS_PHY u32StreamBufAddr, MS_PHY u32StreamBufEndAddr );
MS_BOOL MDrv_MVD_GetValidStreamFlag( void );
MS_U32 MDrv_MVD_GetChromaFormat(void);

void MDrv_MVD_SetFrameInfo(MVD_FrameInfo *pinfo );
void MDrv_MVD_SetSLQStartEnd( MS_U32 u32start, MS_U32 u32end);
void MDrv_MVD_GetErrInfo(MVD_ErrCode *errCode, MVD_ErrStatus *errStatus);
MS_U32 MDrv_MVD_GetSkipPicCounter( void );

MS_U8 MDrv_MVD_GetSLQAvailableLevel(void);
void MDrv_MVD_SetSLQWritePtr(MS_BOOL bCheckData);
MS_VIRT MDrv_MVD_GetSLQReadPtr( void );
void MDrv_MVD_SetSLQTblBufStartEnd( MS_U32 u32start, MS_U32 u32end );

MVD_PicType MDrv_MVD_GetPicType( void );
MS_U32 MDrv_MVD_GetBitsRate( void );
MS_U8 MDrv_MVD_GetVideoRange(void);
MS_BOOL MDrv_MVD_GetLowDelayFlag( void );
MS_BOOL MDrv_MVD_GetIs32PullDown(void);
MS_BOOL MDrv_MVD_GetIsDynScalingEnabled(void);
MS_S32 MDrv_MVD_GetPtsStcDiff(void);

void MDrv_MVD_Pause(void);
void MDrv_MVD_Resume(void);
MS_BOOL MDrv_MVD_StepDisp(void);
MS_BOOL MDrv_MVD_IsStepDispDone(void);
MS_BOOL MDrv_MVD_StepDecode(void);
MS_BOOL MDrv_MVD_IsStepDecodeDone(void);
MS_BOOL MDrv_MVD_SeekToPTS(MS_U32 u32Pts);
MS_BOOL MDrv_MVD_IsStep2PtsDone(void);
MS_BOOL MDrv_MVD_SkipToPTS(MS_U32 u32Pts);
MS_BOOL MDrv_MVD_TrickPlay(MVD_TrickDec trickDec, MS_U8 u8DispDuration);
void MDrv_MVD_EnableForcePlay(void);

void MDrv_MVD_RegSetBase(MS_U32 u32RegBaseAddr);
MS_BOOL MDrv_MVD_Init(void);
MS_BOOL MDrv_MVD_Exit(void);
E_MVD_Result MDrv_MVD_Rst( void );

void MDrv_MVD_Play( void );
void MDrv_MVD_SetAVSync(MS_BOOL bEnable, MS_U32 u32Delay);
void MDrv_MVD_SetAVSyncThreshold(MS_U32 u32Th);
void MDrv_MVD_SetAVSyncFreerunThreshold(MS_U32 u32Th);
MS_U32 MDrv_MVD_GetAVSyncDelay(void);
MS_BOOL MDrv_MVD_GetIsAVSyncOn(void);
MS_BOOL MDrv_MVD_GetIsSyncRep(void);
MS_BOOL MDrv_MVD_GetIsSyncSkip(void);
MS_BOOL MDrv_MVD_ChangeAVsync(MS_BOOL bEnable, MS_U16 u16PTS);
MS_BOOL MDrv_MVD_DispCtrl(MS_BOOL bDecOrder, MS_BOOL bDropErr, MS_BOOL bDropDisp, MVD_FrcMode eFrcMode);
MS_BOOL MDrv_MVD_DispRepeatField(MS_BOOL bEnable);
MS_BOOL MDrv_MVD_GetTop1stField(void);
MS_BOOL MDrv_MVD_GetRepeat1stField(void);
MS_BOOL MDrv_MVD_GetTmpRefField(void);
MS_U8 MDrv_MVD_GetColorFormat(void);
MS_U8 MDrv_MVD_GetMatrixCoef(void);
MS_U8 MDrv_MVD_GetActiveFormat( void );
MS_U8 MDrv_MVD_GetDispRdy( void );
MS_BOOL MDrv_MVD_Is1stFrmRdy(void);
MS_U32 MDrv_MVD_GetGOPCount( void );
MS_U32 MDrv_MVD_GetPicCounter(void);
MS_U32 MDrv_MVD_GetParserByteCnt(void);
MVD_DecStat MDrv_MVD_GetDecodeStatus(void);
MS_U8 MDrv_MVD_GetLastCmd(void);
MS_U32 MDrv_MVD_GetVldErrCount( void );
MS_BOOL MDrv_MVD_DropErrorFrame(MS_BOOL bDrop);
MS_BOOL MDrv_MVD_MVDCommand ( MS_U8 u8cmd, MVD_CmdArg *pstCmdArg );
MS_BOOL MDrv_MVD_SkipData(void);
MS_BOOL MDrv_MVD_SkipToIFrame(void);
MS_BOOL MDrv_MVD_GetCaps(MVD_Caps* pCaps);

E_MVD_Result MDrv_MVD_DisableErrConceal(MS_BOOL bDisable);
E_MVD_Result MDrv_MVD_PushQueue(MVD_PacketInfo* pInfo);
E_MVD_Result MDrv_MVD_FlushQueue(void);
MS_BOOL MDrv_MVD_FlushDisplayBuf(void);
MS_U32 MDrv_MVD_GetQueueVacancy(MS_BOOL bCached);
MS_U32 MDrv_MVD_GetESReadPtr(void);
MS_VIRT MDrv_MVD_GetESWritePtr(void);
E_MVD_Result MDrv_MVD_EnableLastFrameShow(MS_BOOL bEnable);
E_MVD_Result MDrv_MVD_IsDispFinish(void);
E_MVD_Result MDrv_MVD_SetSpeed(MVD_SpeedType eSpeedType, MS_U8 u8Multiple);
E_MVD_Result MDrv_MVD_ResetPTS(MS_U32 u32PtsBase);
MS_U32 MDrv_MVD_GetPTS(void);
MS_U32 MDrv_MVD_GetNextPTS(void);
MVD_TrickDec MDrv_MVD_GetTrickMode(void);
MS_BOOL MDrv_MVD_IsPlaying(void);
MS_BOOL MDrv_MVD_IsIdle(void);
MS_BOOL MDrv_MVD_IsSeqChg(void);
E_MVD_Result MDrv_MVD_DbgSetData(MS_U32 u32Addr, MS_U32 u32Data);
E_MVD_Result MDrv_MVD_DbgGetData(MS_U32 u32Addr, MS_U32* u32Data);
MS_U8 MDrv_MVD_GetDecodedFrameIdx ( void );
MS_BOOL MDrv_MVD_SetFileModeAVSync(MVD_TIMESTAMP_TYPE eSyncMode);
MS_BOOL MDrv_MVD_IsAllBufferEmpty(void);
MS_BOOL MDrv_MVD_GenPattern(MVD_PatternType ePattern, MS_PHY u32PAddr, MS_U32* pu32Size);
MS_U32 MDrv_MVD_GetPatternInfo(void);
E_MVD_Result MDrv_MVD_SetDynScalingParam(MS_PHY u32StAddr, MS_SIZE u32Size);
MS_BOOL MDrv_MVD_SetDynamicScaleAddr(MS_U32 u32addr);
MS_BOOL MDrv_MVD_SetVirtualBox(MS_U16 u16Width, MS_U16 u16Height);
MS_BOOL MDrv_MVD_SetBlueScreen(MS_BOOL bEn);
MS_BOOL MDrv_MVD_EnableInt(MS_U32 bEn);
E_MVD_Result MDrv_MVD_EnableDispOneField(MS_BOOL bEn);
E_MVD_Result MDrv_MVD_GetExtDispInfo(MVD_ExtDispInfo* pInfo);
E_MVD_Result MDrv_MVD_GetFrmInfo(MVD_FrmInfoType eType, MVD_FrmInfo* pInfo);
E_MVD_Result MDrv_MVD_GetTimeCode(MVD_FrmInfoType eType, MVD_TimeCode* pInfo);
MS_BOOL MDrv_MVD_GetUsrDataIsAvailable(void);
MS_BOOL MDrv_MVD_GetUsrDataInfo(MVD_UsrDataInfo* pUsrInfo);
E_MVD_Result MDrv_MVD_SetFreezeDisp(MS_BOOL bEn);
MS_U32 MDrv_MVD_GetDispCount(void);
E_MVD_Result MDrv_MVD_SetFdMaskDelayCount(MS_U16 u16Cnt);
E_MVD_Result MDrv_MVD_SetOutputFRCMode(MS_U8 u8FrameRate, MS_U8 u8Interlace);
E_MVD_Result MDrv_MVD_SetFRCDropType(MS_U8 u8DropType);
E_MVD_Result MDrv_MVD_SetDisableSeqChange(MS_BOOL bEnable);

MS_BOOL MDrv_MVD_SetMStreamerMode(MS_U8 u8Mode);
MS_BOOL MDrv_MVD_FrameFlip(MS_U8 u8FrmIdx);
MS_BOOL MDrv_MVD_FrameRelease(MS_U8 u8FrmIdx);
MS_BOOL MDrv_MVD_FrameCapture(MS_U8 u8FrmIdx, MS_BOOL bEnable);

E_MVD_Result MDrv_MVD_PVRFlushDispQueue(MS_BOOL bEnable);

E_MVD_Result MDrv_MVD_CCRst(MVD_CCCfg* pCCParam);
E_MVD_Result MDrv_MVD_CCStartParsing(MVD_CCCfg* pCCParam);
E_MVD_Result MDrv_MVD_CCStopParsing(MVD_CCFormat eCCFormat);
E_MVD_Result MDrv_MVD_CCGetWritePtr(MVD_CCFormat eCCFormat, MS_U32* pWrite);
E_MVD_Result MDrv_MVD_CCGetReadPtr(MVD_CCFormat eCCFormat, MS_U32* pRead);
E_MVD_Result MDrv_MVD_CCUpdateReadPtr(MVD_CCFormat eCCFormat, MS_U32 u32EachPacketSize);
E_MVD_Result MDrv_MVD_CCGetIsOverflow(MVD_CCFormat eCCFormat, MS_BOOL* pbOverflow);
MS_BOOL MDrv_MVD_SetSkipRepeatMode(MS_U8 u8Mode);
MS_BOOL MDrv_MVD_FlushPTSBuf(void);
MS_BOOL MDrv_MVD_ParserRstDone(MS_BOOL bEnable);
void MDrv_MVD_DbgDump(void);
MS_BOOL MDrv_MVD_IsCmdFinished(MVD_HANDSHAKE_CMD eCmd);
MS_BOOL MDrv_MVD_GetFrmRateIsSupported(void);
E_MVD_Result MDrv_MVD_SetAutoMute(MS_BOOL bEnable);
E_MVD_Result MDrv_MVD_SetVSizeAlign(MS_BOOL bEnable);
E_MVD_Result MDrv_MVD_SetDispFinishMode(MS_U8 u8Mode);
E_MVD_Result MDrv_MVD_SetAVSyncMode(MS_U8 u8Mode);
E_MVD_Result MDrv_MVD_SetIdctMode(MS_U8 u8Mode);
MS_U32 MDrv_MVD_GetDivxVer(void);

#ifndef REDLION_LINUX_KERNEL_ENVI
#define MVD_ENABLE_ISR 
#endif

#ifdef MVD_ENABLE_ISR
E_MVD_Result MDrv_MVD_SetIsrEvent(MS_U32 eEvent, MVD_InterruptCb fnHandler);
MS_U32 MDrv_MVD_GetIsrEvent(void);
#else
#define MDrv_MVD_SetIsrEvent(x,y) (E_MVD_RET_OK)
#define MDrv_MVD_GetIsrEvent() (MS_U32)0
#endif

E_MVD_Result MDrv_MVD_SetMVDClockSpeed(MVD_ClockSpeed eClockSpeed);

E_MVD_Result MDrv_MVD_ShowFirstFrameDirect(MS_BOOL bEnable);

#ifdef __cplusplus
}
#endif

#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX_v2.h"
#include "UFO.h"

typedef enum {
    MAPI_CMD_GFX_INIT =0,
    MAPI_CMD_GFX_GET_INFO ,
    MAPI_CMD_GFX_LINEDRAW ,
    MAPI_CMD_GFX_RECTFILL ,
    MAPI_CMD_GFX_BITBLT ,
    MAPI_CMD_GFX_SET_ABL ,
    MAPI_CMD_GFX_SET_CONFIG ,
    MAPI_CMD_GFX_GET_CONFIG ,
    MAPI_CMD_GFX_BITMAP ,
    MAPI_CMD_GFX_FONT ,
    MAPI_CMD_GFX_POWERSTATE ,
    MAPI_CMD_GFX_CB ,
    MAPI_CMD_GFX_MISC ,
    MAPI_CMD_GFX_TWOSRCBITBLT ,
    MAPI_CMD_GFX_TLB ,
    MAPI_CMD_GFX_GET_CAPS ,
    MAPI_CMD_GFX_DRAW_OVAL ,
#if defined(UFO_PUBLIC_HEADER_212)
    MAPI_CMD_GFX_SRC ,
    MAPI_CMD_GFX_DST ,
#endif
    MAPI_CMD_GFX_TRIFILL ,
    MAPI_CMD_GFX_SPANFILL ,
    MAPI_CMD_GFX_BATCHRECTFILL ,
} eGFXIoctlOpt;

typedef enum
{
    E_GFX_GET_BUFFERINFO =0,
    E_GFX_GET_TAGID ,
    E_GFX_GET_NEXTTAGID ,
    E_GFX_GET_CLIP ,
    E_GFX_GET_INTENSITY ,
    E_GFX_GET_DBGINFO ,
    E_GFX_GET_INIT ,
}EN_GFX_GET_CONFIG;

typedef enum
{
    E_GFX_SET_POWERON =0,
    E_GFX_SET_FLUSHQUEUE ,
    E_GFX_SET_TAGID ,
    E_GFX_SET_NEXTTAGID ,
    E_GFX_SET_WAITFORTAGID ,
    E_GFX_SET_ONEPIXELMODE ,
    E_GFX_SET_DITHER ,
    E_GFX_SET_VQ ,
    E_GFX_SET_MIRROR ,
    E_GFX_SET_DST_MIRROR ,
    E_GFX_SET_ROTATE ,
    E_GFX_SET_ITALIC ,
    E_GFX_SET_NEARESTMODE ,
    E_GFX_SET_PALETTEOPT ,
    E_GFX_SET_CLIP ,
    E_GFX_SET_WRITEPROTECT ,
    E_GFX_SET_ALPHA_COMPARE ,
    E_GFX_SET_CSC ,
    E_GFX_SET_BURSTMIULEN ,
}EN_GFX_SET_CONFIG;

typedef enum
{
    E_GFX_SET_ABL =0,
    E_GFX_SET_COLORKEY ,
    E_GFX_SET_ROP ,
    E_GFX_SET_DFB ,
    E_GFX_SET_INTENSITY ,
}EN_GFX_SET_ABL;

typedef enum
{
    E_SRC_COLORKEY =0x1,
    E_DST_COLORKEY =0x2,
}GFX_ColorKeyType;

typedef enum
{
    E_LOADTEXTOUT =0x1,
    E_CHARACTEROUT =0x2,
}GFX_TEXTTYPE;

typedef enum
{
    E_CB_GETFONT =0x1,
    E_CB_GETBMP =0x2,
}EN_GFX_CB_MODE;

typedef enum
{
    E_MISC_EXIT =1,
    E_MISC_CLEAR_FRAME_BY_WORLD ,
    E_MISC_CLEAR_FRAME ,
    E_MISC_LINE_PATTERN_RESET ,
    E_MISC_LINE_PATTERN ,
    E_MISC_BEGINE_DRAW ,
    E_MISC_END_DRAW ,
    E_MISC_DEBUG_LEVEL ,
    E_MISC_SET_HK ,
    E_MISC_GET_HK ,
    E_MISC_PATCH_MODE ,
    E_MISC_STR_BLT_SCK_TYPE ,
    E_MISC_SET_ALB_1555 ,
    E_MISC_GET_ALB_1555 ,
}EN_GFX_MISC_MODE;

typedef enum
{
    E_SET_PARA_0 =0x1,
    E_SET_PARA_1 =0x2,
    E_SET_PARA_2 =0x4,
    E_SET_PARA_3 =0x8,
    E_SET_PARA_4 =0x10,
}E_GFX_SET_PARA;

typedef enum
{
    GFX_SRC_INFO = 0x1,
    GFX_DST_INFO = 0x2,
    GFX_DFB_INFO = 0x4,
    GFX_ABL_INFO = 0x8,
    GFX_SRC_CLRKEY_INFO = 0x10,
    GFX_DST_CLRKEY_INFO = 0x20,
    GFX_ALPHA_CMP_INFO = 0x40,
    GFX_CLIP_INFO = 0x80,
    GFX_SRC_MIRROR_INFO = 0x100,
    GFX_DST_MIRROR_INFO = 0x200,
    GFX_ROTATE_INFO = 0x400,
    GFX_CSC_INFO = 0x800,
    GFX_STR_BLT_SCK_INFO = 0x1000,
    GFX_NEAREST_INFO = 0x2000,
    GFX_DITHER_INFO = 0x4000,
} GFX_FireInfo_Enum;

typedef struct DLL_PACKED
{
    GFX_BufferInfo* pBufInfo;
    MS_U32 u32OffsetByte;
}GFX_Src_BufferInfo, GFX_Dst_BufferInfo;

typedef struct DLL_PACKED _GFX_GET_BUFFERINFO
{
    GFX_Src_BufferInfo* pSrcbufInfo;
    GFX_Dst_BufferInfo* pDstbufInfo;
}GFX_Get_BufferInfo;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    GFX_ColorKeyMode eOpMode;
    GFX_Buffer_Format eFmt;
    void* pS_color;
    void* pE_color;
}GFX_Set_Src_ColorKey, GFX_Set_Dst_ColorKey;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    GFX_ColorKeyMode eOpMode;
    GFX_Buffer_Format eFmt;
    MS_U32 S_color;
    MS_U32 E_color;
}GFX_Set_Src_ColorKey_Ex, GFX_Set_Dst_ColorKey_Ex;

typedef struct DLL_PACKED DLL_PACKED
{
    GFX_StretchCKType type;
    GFX_RgbColor color;
}GFX_SetStrBltSckType;




typedef struct DLL_PACKED
{
    MS_U32 u32VCmdQSize;
    MS_PHY u32VCmdQAddr;
    MS_BOOL bIsHK;
    MS_BOOL bIsCompt;
}GFX_Init_Config;




typedef struct DLL_PACKED
{
    MS_U32 u32Id;
    MS_U32* pColor;
}GFX_Get_Intensity;

typedef struct DLL_PACKED
{
    EN_GFX_CAPS eCapType;
    MS_U32* pRet;
    MS_U32 Ret_Size;
}GFX_Get_CAPS;

typedef struct DLL_PACKED
{
    MS_BOOL bStepTagBefore;
    MS_U16* pTagID;
}GFX_Get_NextTagID;






typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    GFX_BlendCoef eABLCoef;
    GFX_AlphaSrcFrom eDb_abl;
    MS_U8 u8Alpha_Const;
}GFX_Set_ABL;

typedef struct _GFX_SET_COLORKEY
{
    MS_U32 ColorKey_Type;
    GFX_Set_Src_ColorKey* pSrcbufInfo;
    GFX_Set_Dst_ColorKey* pDstbufInfo;
}GFX_Set_Colorkey;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    GFX_ROP2_Op eRopMode;
}GFX_Set_ROP;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    GFX_DFBBldOP eSrcBldOP;
    GFX_DFBBldOP eDstBldOP;
    GFX_RgbColor sRGBColor;
    MS_U16 u16DFBBldFlags;
}GFX_Set_DFB;

typedef struct DLL_PACKED
{
    MS_U32 u32Id;
    GFX_Buffer_Format eFmt;
    MS_U32* pColor;
}GFX_Set_Intensity;
# 256 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGFX_v2.h"
typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_PHY u32Addr;
    GFX_VcmqBufSize enBufSize;
    MS_U8 u8R_Threshold;
    MS_U8 u8W_Threshold;
}GFX_Set_VQ;

typedef struct DLL_PACKED
{
    MS_BOOL bMirrorX;
    MS_BOOL bMirrorY;
}GFX_Set_Mirror;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_U8 u8Ini_line;
    MS_U8 u8Ini_dis;
    MS_U8 u8Delta;
}GFX_Set_Italic;

typedef struct DLL_PACKED
{
    MS_U8 u8Miu;
    MS_PHY u32Addr_Low;
    MS_PHY u32Addr_High;
    GFX_WPType eWPType;
}GFX_Set_WriteProtect;

typedef struct DLL_PACKED
{
    MS_BOOL enable;
    GFX_ACmpOp eMode;
}GFX_Set_AlphaCompare;

typedef struct
{
    GFX_PaletteEntry* pPalArray;
    MS_U16 u32PalStart;
    MS_U16 u32PalEnd;
}GFX_Set_PaletteOpt;

typedef struct DLL_PACKED
{
    GFX_PaletteEntry PalArray[256];
    MS_U16 u32PalStart;
    MS_U16 u32PalEnd;
}GFX_Set_PaletteOpt_ARRY;

typedef struct DLL_PACKED
{
    GFX_YUV_Rgb2Yuv mode;
    GFX_YUV_OutRange yuv_out_range;
    GFX_YUV_InRange uv_in_range;
    GFX_YUV_422 srcfmt;
    GFX_YUV_422 dstfmt;
}GFX_Set_CSC;

typedef struct DLL_PACKED
{
   GFX_Point* pV0;
   GFX_Point* pV1;
}GFX_Set_Clip_Property, GFX_Get_Clip_Property;

typedef struct DLL_PACKED
{
   GFX_Point V0;
   GFX_Point V1;
}GFX_Set_Clip_Property_Ex, GFX_Get_Clip_Property_Ex;

typedef struct DLL_PACKED
{
    GFX_FireInfo_Enum eFireInfo;
    GFX_BufferInfo SrcbufInfo;
    MS_U32 u32SrcOffsetofByte;
    GFX_BufferInfo DstbufInfo;
    MS_U32 u32DstOffsetofByte;
    GFX_Set_DFB GFXSetDFB;
    GFX_Set_ABL GFXSetABL;
    GFX_Set_Src_ColorKey_Ex GFXSetSrcColorKey;
    GFX_Set_Dst_ColorKey_Ex GFXSetDstColorKey;
    GFX_Set_AlphaCompare GFXSetAlphaCmp;
    GFX_Set_Clip_Property_Ex GFXSetClip;
    GFX_Set_Mirror GFXSetMirror;
    GFX_Set_Mirror GFXSetDstMirror;
    GFX_RotateAngle GFXSetAngle;
    GFX_Set_CSC GFXSetCSC;
    GFX_SetStrBltSckType sttype;
    MS_BOOL bNearest;
    MS_BOOL bDither;
}GFX_FireInfo;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    GFX_RectFillInfo* pRectFillInfo;
}GFX_Set_RectFillInfo;

typedef struct
{
    GFX_Dst_BufferInfo* pDstbufInfo;
    GFX_BatchRectFillInfo* pBatchRectFillInfo;
}GFX_Set_BatchRectFillInfo;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    GFX_TriFillInfo* pTriFillInfo;
}GFX_Set_TriFillInfo;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    GFX_SpanFillInfo* pSpanFillInfo;
}GFX_Set_SpanFillInfo;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Src_BufferInfo* pSrcbufInfo;
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    GFX_DrawRect* pDrawRect;
    GFX_ScaleInfo* pScaleInfo;
    MS_U32 u32DrawFlag;
    void* pIntensity;
}GFX_BitBltInfo;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Src_BufferInfo* pSrcbufInfo_0;
    GFX_Src_BufferInfo* pSrcbufInfo_1;
#else
    GFX_FireInfo* pFireInfo;
#endif
    GFX_Dst_BufferInfo* pDstbufInfo;
    GFX_DrawTwoSourceRect* pDrawTwoSrcRect;
    MS_U32 u32DrawFlag;
}GFX_TwoSrc_BitBltInfo;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Src_BufferInfo* pSrcbufInfo;
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    MS_S32 handle;
    GFX_DrawBmpInfo* pBmpInfo;
}GFX_Bitmap;

typedef struct
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Src_BufferInfo* pSrcbufInfo;
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    MS_S32 fHandle;
    MS_U32* pIndex;
    MS_U32 u32StrWidth;
    GFX_TextOutInfo* pTextInfo;
}GFX_TextOut;

typedef struct
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Src_BufferInfo* pSrcbufInfo;
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    GFX_CharInfo* pChar;
    GFX_TextOutInfo* pTextInfo;
}GFX_CharacterOut;

typedef struct DLL_PACKED
{
    MS_PHY StrAddr;
    MS_U32 length;
    MS_U32 ClearValue;
}GFX_ClearFrameBuffer;

typedef struct DLL_PACKED
{
    MS_BOOL enable;
    MS_U8 linePattern;
    MS_U8 repeatFactor;
}GFX_SetLinePattern;

typedef struct
{
    MS_PHY tlb_src_addr;
    MS_PHY tlb_dst_addr;
}GFX_SetTLB_Addr;




typedef enum
{
    E_GFX_INIT_VER0 =0,
}EN_GFX_INIT_VER;

typedef enum
{
    E_GFX_GET_INFO_VER0 =0,
}EN_GFX_GET_INFO_VER;

typedef enum
{
    E_GFX_GET_CAPS_VER0 =0,
}EN_GFX_GET_CAPS_VER;

typedef enum
{
    E_GFX_LINEDRAW_VER0 =0,
}EN_GFX_LINEDRAW_VER;

typedef enum
{
    E_GFX_RECTFILL_VER0 =0,
}EN_GFX_RECTFILL_VER;

typedef enum
{
    E_GFX_TRIFILL_VER0 =0,
}EN_GFX_TRIFILL_VER;

typedef enum
{
    E_GFX_SPANFILL_VER0 =0,
}EN_GFX_SPANFILL_VER;

typedef enum
{
    E_GFX_BITBLT_VER0 =0,
}EN_GFX_BITBLT_VER;

typedef enum
{
    E_GFX_ABL_VER0 =0,
}EN_GFX_ABL_VER;

typedef enum
{
    E_GFX_SET_CONFIG_VER0 =0,
}EN_GFX_SET_CONFIG_VER;

typedef enum
{
    E_GFX_GET_CONFIG_VER0 =0,
}EN_GFX_GET_CONFIG_VER;

typedef enum
{
    E_GFX_BITMAP_VER0 =0,
}EN_GFX_BITMAP_VER;

typedef enum
{
    E_GFX_TEXT_VER0 =0,
}EN_GFX_TEXTOUT_VER;

typedef enum
{
    E_GFX_POWERSTATE_VER0 =0,
}EN_GFX_POWERSTATE_VER;

typedef enum
{
    E_GFX_CB_VER0 =0,
}EN_GFX_CB_VER;

typedef enum
{
    E_GFX_MISC_VER0 =0,
}EN_GFX_MISC_VER;

typedef enum
{
    E_GFX_TLB_VER0 =0,
}EN_GFX_TLB_VER;

typedef enum
{
    E_GFX_DRAW_OVAL_VER0 =0,
}EN_GFX_DRAW_OVAL_VER;

typedef struct DLL_PACKED
{
    EN_GFX_INIT_VER eVerType;
    GFX_Init_Config* pGFX_Init;
    MS_U32 u32Size;
}GFX_INIT_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_GET_INFO_VER eVerType;
    EN_GFX_GET_CONFIG eGFX_GetConfig;
    void* pGFX_GetInfo;
    MS_U32 u32Size;
}GFX_GETINFO_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_GET_CAPS_VER eVerType;
    EN_GFX_CAPS eCaps;
    void* pGFX_GetCaps;
    MS_U32 u32Size;
}GFX_GETCAPS_ARGS;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_212)
    GFX_Dst_BufferInfo* pDstbufInfo;
#else
    GFX_FireInfo* pFireInfo;
#endif
    GFX_DrawLineInfo* pDrawLineInfo;
}GFX_Set_DrawLineInfo;


typedef struct DLL_PACKED
{
    EN_GFX_LINEDRAW_VER eVerType;
    GFX_Set_DrawLineInfo* pLineInfo;
    MS_U32 u32Size;
}GFX_LINEDRAW_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_RECTFILL_VER eVerType;
    GFX_Set_RectFillInfo* pFillBlock;
    MS_U32 u32Size;
}GFX_RECTFILL_ARGS;

typedef struct
{
    EN_GFX_RECTFILL_VER eVerType;
    GFX_Set_BatchRectFillInfo* pBatchFillBlock;
    MS_U32 u32Size;
}GFX_BATCHRECTFILL_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_TRIFILL_VER eVerType;
    GFX_Set_TriFillInfo* pFillBlock;
    MS_U32 u32Size;
}GFX_TRIFILL_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_SPANFILL_VER eVerType;
    GFX_Set_SpanFillInfo* pFillBlock;
    MS_U32 u32Size;
}GFX_SPANFILL_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_BITBLT_VER eVerType;
    GFX_BitBltInfo* pGFX_BitBlt;
    MS_U32 u32Size;
}GFX_BITBLT_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_BITBLT_VER eVerType;
    GFX_TwoSrc_BitBltInfo* pGFX_TwoSrc_BitBlt;
    MS_U32 u32Size;
}GFX_TWOSRC_BITBLT_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_ABL_VER eVerType;
    EN_GFX_SET_ABL eGFX_SetABL;
    void* pGFX_ABL;
    MS_U32 u32Size;
}GFX_ABL_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_SET_CONFIG_VER eVerType;
    EN_GFX_SET_CONFIG eGFX_SetConfig;
    void* pGFX_ConfigInfo;
    MS_U32 u32Size;
}GFX_SETCONFIG_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_GET_CONFIG_VER eVerType;
    EN_GFX_GET_CONFIG eGFX_GetConfig;
    void* pGFX_ConfigInfo;
    MS_U32 u32Size;
}GFX_GETCONFIG_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_BITMAP_VER eVerType;
    GFX_Bitmap* pGFX_Bitmap;
    MS_U32 u32Size;
}GFX_BITMAP_ARGS;

typedef struct
{
    EN_GFX_TEXTOUT_VER eVerType;
    GFX_TEXTTYPE eGFX_TextType;
    void* pGFX_TextOut;
    MS_U32 u32Size;
}GFX_TEXTOUT_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_POWERSTATE_VER eVerType;
    EN_POWER_MODE eGFX_PowerStateType;
    void* pGFX_PowerState;
    MS_U32 u32Size;
}GFX_POWERSTATE_ARGS;

typedef struct
{
    EN_GFX_CB_VER eVerType;
    EN_GFX_CB_MODE eGFX_CBType;
    void* pGFX_CBInfo;
    MS_U32 u32Size;
}GFX_CB_ARGS;

typedef struct DLL_PACKED
{
    EN_GFX_MISC_VER eVerType;
    EN_GFX_MISC_MODE eGFX_MISCType;
    void* pGFX_Info;
    MS_U32 u32Size;
}GFX_MISC_ARGS;

typedef enum
{
    E_GFX_TLB_SET_MODE,
    E_GFX_TLB_SET_ADDR,
    E_GFX_TLB_FLUSH_TABLE,
    E_GFX_TLB_TAG,
}EN_GFX_TLB_CMD;

typedef struct _GFX_TLB_ARGS
{
    EN_GFX_TLB_CMD en_cmd;
    EN_GFX_TLB_VER eVerType;
    EN_GFX_TLB_Mode TLB_mode;
    void* psetting;
    MS_U32 u32Size;
}GFX_TLB_ARGS, *PGFX_TLB_ARGS;

typedef struct
{
    EN_GFX_DRAW_OVAL_VER eVerType;
    void* psetting;
    MS_U32 u32Size;
}GFX_DRAW_OVAL_ARGS;
# 95 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIPAUTH.h"
#ifndef _DRVIPAUTH_H_
#define _DRVIPAUTH_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
#include "MsTypes.h"
#include "MsCommon.h"

#ifndef DLL_PUBLIC
#define DLL_PUBLIC __attribute__ ((visibility ("default")))
#endif

#ifndef DLL_LOCAL
#define DLL_LOCAL __attribute__ ((visibility ("hidden")))
#endif

#define MSIF_IPAUTH_LIB_CODE {'I','P','A','_'}
#define MSIF_IPAUTH_LIBVER {'0','0'}
#define MSIF_IPAUTH_BUILDNUM {'0','0' }
#define MSIF_IPAUTH_CHANGELIST {'0','0','1','1','5','7','5','8'}

#define IPAUTH_CONTROL_VIDEO_H264 27
#define IPAUTH_CONTROL_XC_DVBC 39

#define IPAUTH_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_IPAUTH_LIB_CODE, \
    MSIF_IPAUTH_LIBVER, \
    MSIF_IPAUTH_BUILDNUM, \
    MSIF_IPAUTH_CHANGELIST, \
    MSIF_OS

#define IPAUTH_SHM_NAME "Linux IPAUTH driver"
typedef struct
{
    MS_U32 g_ShmID;
    MS_U32 g_u32ClientCounter;
    MS_U8 g_IpControl[32];
}ST_IPAUTH_SHARED_VARS;

typedef struct
{
    MS_U32 erk[64];
    MS_U32 drk[64];
    MS_S32 nr;
}
ST_AES_CONTEXT;

extern MS_BOOL MApp_IPAUTH_GetLibVer(const MSIF_Version **ppVersion);
DLL_PUBLIC void MApi_AUTH_Process(MS_U8 *string, MS_U8 *hash);
DLL_PUBLIC MS_U8 MApi_AUTH_State(void);
DLL_PUBLIC MS_U8 MDrv_AUTH_IPCheck(MS_U8 u8Bit);
DLL_PUBLIC MS_BOOL MDrv_AUTH_InitialVars(void);
DLL_PUBLIC ST_IPAUTH_SHARED_VARS * MDrv_AUTH_AllocateVars(void);
DLL_PUBLIC MS_BOOL MDrv_AUTH_ResetDefaultVars(ST_IPAUTH_SHARED_VARS * pIPAUTHShared);
DLL_PUBLIC void MDrv_AUTH_GetHashInfo (MS_U8 *hashinfo);


DLL_LOCAL MS_S32 MDrv_AUTH_AES_Set_Key( ST_AES_CONTEXT *ctx, MS_U8 *key, MS_S32 nbits );
DLL_LOCAL void MDrv_AUTH_AES_Encrypt( ST_AES_CONTEXT *ctx, MS_U8 input[16], MS_U8 output[16] );
DLL_LOCAL void MDrv_AUTH_AES_Decrypt( ST_AES_CONTEXT *ctx, MS_U8 input[16], MS_U8 output[16] );


#ifdef __cplusplus

}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC.h"
#ifndef _DRV_DVBC_H_
#define _DRV_DVBC_H_ 

#include "MsTypes.h"

#include "MsCommon.h"
#include "drvDMD_common.h"
#include "UFO.h"
#ifdef __cplusplus
extern "C"
{
#endif
# 124 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC.h"
#define MSIF_DMD_DVBC_INTERN_LIB_CODE {'D','V', 'B','C'}
#define MSIF_DMD_DVBC_INTERN_LIBVER {'0','1'}
#define MSIF_DMD_DVBC_INTERN_BUILDNUM {'2','2' }
#define MSIF_DMD_DVBC_INTERN_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define INDEX_C_TS_PHASE_EN 23
#define INDEX_C_TS_PHASE_NUM 24

#define DMD_DVBC_INTERN_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_DVBC_INTERN_LIB_CODE, \
    MSIF_DMD_DVBC_INTERN_LIBVER, \
    MSIF_DMD_DVBC_INTERN_BUILDNUM, \
    MSIF_DMD_DVBC_INTERN_CHANGELIST, \
    MSIF_OS

#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))




typedef enum
{
    DMD_DVBC_DBGLV_NONE,
    DMD_DVBC_DBGLV_INFO,
    DMD_DVBC_DBGLV_NOTICE,
    DMD_DVBC_DBGLV_WARNING,
    DMD_DVBC_DBGLV_ERR,
    DMD_DVBC_DBGLV_CRIT,
    DMD_DVBC_DBGLV_ALERT,
    DMD_DVBC_DBGLV_EMERG,
    DMD_DVBC_DBGLV_DEBUG,
} DMD_DVBC_DbgLv;

typedef enum
{
    DMD_DVBC_LOCK,
    DMD_DVBC_CHECKING,
    DMD_DVBC_CHECKEND,
    DMD_DVBC_UNLOCK,
    DMD_DVBC_NULL,
} DMD_DVBC_LOCK_STATUS;

typedef enum
{
    DMD_DVBC_GETLOCK,
    DMD_DVBC_GETLOCK_FEC_LOCK,
    DMD_DVBC_GETLOCK_PSYNC_LOCK,
    DMD_DVBC_GETLOCK_TPS_LOCK,
    DMD_DVBC_GETLOCK_DCR_LOCK,
    DMD_DVBC_GETLOCK_AGC_LOCK,
    DMD_DVBC_GETLOCK_MODE_DET,
    DMD_DVBC_GETLOCK_NO_CHANNEL,
    DMD_DVBC_GETLOCK_ATV_DETECT,
    DMD_DVBC_GETLOCK_TR_LOCK,
    DMD_DVBC_GETLOCK_TR_EVER_LOCK,

} DMD_DVBC_GETLOCK_TYPE;

typedef enum
{
    DMD_DVBC_QAM16 = 0,
    DMD_DVBC_QAM32 = 1,
    DMD_DVBC_QAM64 = 2,
    DMD_DVBC_QAM128 = 3,
    DMD_DVBC_QAM256 = 4,
    DMD_DVBC_QAMAUTO = 128,
} DMD_DVBC_MODULATION_TYPE;

typedef enum
{
    DMD_DVBC_RF_CH_BAND_6MHz = 0x01,
    DMD_DVBC_RF_CH_BAND_7MHz = 0x02,
    DMD_DVBC_RF_CH_BAND_8MHz = 0x03,
    DMD_DVBC_RF_CH_BAND_INVALID
} DMD_DVBC_RF_CHANNEL_BANDWIDTH;

typedef enum
{
    E_DMD_DVBC_PARAM_VERSION,
    E_DMD_DVBC_OP_RFAGC_EN,
    E_DMD_DVBC_OP_HUMDET_EN,
    E_DMD_DVBC_OP_DCR_EN,
    E_DMD_DVBC_OP_IQB_EN,
    E_DMD_DVBC_OP_AUTO_IQ,
    E_DMD_DVBC_OP_AUTO_RFMAX,
    E_DMD_DVBC_OP_AUTO_ACI,
    E_DMD_DVBC_OP_AUTO_SCAN,
    E_DMD_DVBC_OP_AUTO_SCAN_SYM_RATE,
    E_DMD_DVBC_OP_AUTO_SCAN_QAM,
    E_DMD_DVBC_OP_ATV_DETECTOR_EN,
    E_DMD_DVBC_OP_ZIF_EN,
    E_DMD_DVBC_OP_NORMALIF_EN,
    E_DMD_DVBC_OP_LIF_EN,
    E_DMD_DVBC_OP_SAWLESS_EN,
    E_DMD_DVBC_IF_INV_PWM_OUT_EN,
    E_DMD_DVBC_CFG_RSSI,
    E_DMD_DVBC_CFG_ZIF,
    E_DMD_DVBC_CFG_FS_L,
    E_DMD_DVBC_CFG_FS_H,
    E_DMD_DVBC_CFG_FIF_L,
    E_DMD_DVBC_CFG_FIF_H,
    E_DMD_DVBC_CFG_FC_L,
    E_DMD_DVBC_CFG_FC_H,
    E_DMD_DVBC_CFG_BW0_L,
    E_DMD_DVBC_CFG_BW0_H,
    E_DMD_DVBC_CFG_BW1_L,
    E_DMD_DVBC_CFG_BW1_H,
    E_DMD_DVBC_CFG_BW2_L,
    E_DMD_DVBC_CFG_BW2_H,
    E_DMD_DVBC_CFG_BW3_L,
    E_DMD_DVBC_CFG_BW3_H,
    E_DMD_DVBC_CFG_BW4_L,
    E_DMD_DVBC_CFG_BW4_H,
    E_DMD_DVBC_CFG_BW5_L,
    E_DMD_DVBC_CFG_BW5_H,
    E_DMD_DVBC_CFG_BW6_L,
    E_DMD_DVBC_CFG_BW6_H,
    E_DMD_DVBC_CFG_BW7_L,
    E_DMD_DVBC_CFG_BW7_H,
    E_DMD_DVBC_CFG_BW8_L,
    E_DMD_DVBC_CFG_BW8_H,
    E_DMD_DVBC_CFG_BW9_L,
    E_DMD_DVBC_CFG_BW9_H,
    E_DMD_DVBC_CFG_BW10_L,
    E_DMD_DVBC_CFG_BW10_H,
    E_DMD_DVBC_CFG_BW11_L,
    E_DMD_DVBC_CFG_BW11_H,
    E_DMD_DVBC_CFG_RFMAX,
    E_DMD_DVBC_CFG_QAM,
    E_DMD_DVBC_CFG_IQ_SWAP,
    E_DMD_DVBC_CFG_CCI,
    E_DMD_DVBC_CFG_TS_SERIAL,
    E_DMD_DVBC_CFG_TS_CLK_RATE,
    E_DMD_DVBC_CFG_TS_CLK_INV,
    E_DMD_DVBC_CFG_TS_DATA_SWAP,
    E_DMD_DVBC_CFG_TS_EN,
    E_DMD_DVBC_AGC_REF_L,
    E_DMD_DVBC_AGC_REF_H,
    E_DMD_DVBC_AGC_K,
    E_DMD_DVBC_AGC_LOCK_TH,
    E_DMD_DVBC_AGC_LOCK_NUM,
    E_DMD_DVBC_ADC_PGA_GAIN_I,
    E_DMD_DVBC_ADC_PGA_GAIN_Q,
    E_DMD_DVBC_ADC_PWDN_I,
    E_DMD_DVBC_ADC_PWDN_Q,
    E_DMD_DVBC_ADC_MPLL_DIV_SEL,
    E_DMD_DVBC_CCI_BYPASS,
    E_DMD_DVBC_CCI_LOCK_DET,
    E_DMD_DVBC_CCI_FREQN_OUT_0,
    E_DMD_DVBC_CCI_FREQN_OUT_1,
    E_DMD_DVBC_RF_GAIN_MIN,
    E_DMD_DVBC_RF_GAIN_MAX,
    E_DMD_DVBC_IF_GAIN_MIN,
    E_DMD_DVBC_IF_GAIN_MAX,
    E_DMD_DVBC_NO_SIGNAL_NUM_TH,
    E_DMD_DVBC_NO_SIGNAL_GAIN_TH_L,
    E_DMD_DVBC_NO_SIGNAL_GAIN_TH_H,
    E_DMD_DVBC_NO_SIGNAL_ERR_TH_L,
    E_DMD_DVBC_NO_SIGNAL_ERR_TH_H,
    E_DMD_DVBC_TUNER_NUM,
    E_DMD_DVBC_UNCRT_PKT_NUM_7_0,
    E_DMD_DVBC_UNCRT_PKT_NUM_8_15,
    E_DMD_DVBC_STATE,
    E_DMD_DVBC_ILL_LOCK,
    E_DMD_DVBC_DAGC1_REF,
    E_DMD_DVBC_DAGC2_REF,
    E_DMD_DVBC_EQ_KP3_16QAM,
    E_DMD_DVBC_EQ_KP3_32QAM,
    E_DMD_DVBC_EQ_KP3_64QAM,
    E_DMD_DVBC_EQ_KP3_128QAM,
    E_DMD_DVBC_EQ_KP3_256QAM,
    E_DMD_DVBC_EQ_KP4_16QAM,
    E_DMD_DVBC_EQ_KP4_32QAM,
    E_DMD_DVBC_EQ_KP4_64QAM,
    E_DMD_DVBC_EQ_KP4_128QAM,
    E_DMD_DVBC_EQ_KP4_256QAM,
    E_DMD_DVBC_SNR100_L,
    E_DMD_DVBC_SNR100_H,
    E_DMD_DVBC_CFO10_L,
    E_DMD_DVBC_CFO10_H,
    E_DMD_DVBC_TR_LOCK,
    E_DMD_DVBC_CR_LOCK,
    E_DMD_DVBC_EQ_DMA1_LOCK,
    E_DMD_DVBC_EQ_DMA_LOCK,
    E_DMD_DVBC_EQ_DD1_LOCK,
    E_DMD_DVBC_EQ_DD_LOCK,
    E_DMD_DVBC_FEC_LOCK,
    E_DMD_DVBC_CHIP_VERSION,
} DVBC_Param_2;

typedef enum
{

    e_opmode_rfagc_en,
    e_opmode_humdet_en,
    e_opmode_dcr_en,
    e_opmode_iqb_en,
    e_opmode_auto_iq,
    e_opmode_auto_rfmax,
    e_opmode_auto_aci,
    e_opmode_auto_scan,
    e_opmode_auto_scan_sym_rate,
    e_opmode_auto_scan_qam,
    e_opmode_atv_detector_en,
    e_opmode_no_sig_if_gain_th_l,
    e_opmode_no_sig_if_gain_th_h,
    e_opmode_no_sig_if_err_th_l,
    e_opmode_no_sig_if_err_th_h,
    e_opmode_rsv_0x0F,

    e_config_rssi,
    e_config_zif,
    e_config_freq,
    e_config_fc_l,
    e_config_fc_h,
    e_config_fs_l,
    e_config_fs_h,
    e_config_bw_l,
    e_config_bw_h,
    e_config_bw1_l,
    e_config_bw1_h,
    e_config_bw2_l,
    e_config_bw2_h,
    e_config_bw3_l,
    e_config_bw3_h,
    e_config_rsv_0x1F,
    e_config_rfmax,
    e_config_qam,
    e_config_iq_swap,
    e_config_cci,
    e_config_ts_serial,
    e_config_ts_clk_rate,
    e_config_ts_out_inv,
    e_config_ts_data_swap,
    e_config_lif,
    e_config_fif_l,
    e_config_fif_h,
    e_config_tuner_sawless,
    DVBC_PARAM_LEN,
} DVBC_Param;

#ifdef UFO_DEMOD_DVBC_SUPPORT_DMD_INT

typedef enum
{
    E_DMD_DVBC_INT_UNKNOWN=0,
    E_DMD_DVBC_INT_LOCK,
    E_DMD_DVBC_INT_UNLOCK
} DMD_DVBC_INT_TYPE;

typedef void (*fpIntCallBack)(MS_U8 u8arg);
#endif

typedef struct
{

    MS_U8 u8SarChannel;
    DMD_RFAGC_SSI *pTuner_RfagcSsi;
    MS_U16 u16Tuner_RfagcSsi_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_LoRef;
    MS_U16 u16Tuner_IfagcSsi_LoRef_Size;
    DMD_IFAGC_SSI *pTuner_IfagcSsi_HiRef;
    MS_U16 u16Tuner_IfagcSsi_HiRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_LoRef;
    MS_U16 u16Tuner_IfagcErr_LoRef_Size;
    DMD_IFAGC_ERR *pTuner_IfagcErr_HiRef;
    MS_U16 u16Tuner_IfagcErr_HiRef_Size;
    DMD_SQI_CN_NORDIGP1 *pSqiCnNordigP1;
    MS_U16 u16SqiCnNordigP1_Size;


    MS_U8 *u8DMD_DVBC_DSPRegInitExt;
    MS_U8 u8DMD_DVBC_DSPRegInitSize;
    MS_U8 *u8DMD_DVBC_InitExt;



} DMD_DVBC_InitData;

typedef enum
{
    E_DMD_DVBC_FAIL=0,
    E_DMD_DVBC_OK=1
} DMD_DVBC_Result;


typedef struct
{
    MS_U16 u16Version;
    MS_U16 u16SymbolRate;
    DMD_DVBC_MODULATION_TYPE eQamMode;
    MS_U32 u32IFFreq;
    MS_BOOL bSpecInv;
    MS_BOOL bSerialTS;
    MS_U8 u8SarValue;
    MS_U32 u32ChkScanTimeStart;
    DMD_DVBC_LOCK_STATUS eLockStatus;
    MS_U16 u16Strength;
    MS_U16 u16Quality;
    MS_U32 u32Intp;
    MS_U32 u32FcFs;
    MS_U8 u8Qam;
    MS_U16 u16SymbolRateHal;
} DMD_DVBC_Info;
# 444 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_Init(DMD_DVBC_InitData *pDMD_DVBC_InitData, MS_U32 u32InitDataLen);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_Exit(void);







extern DLL_PUBLIC MS_U32 SYMBOL_WEAK MDrv_DMD_DVBC_GetConfig(DMD_DVBC_InitData *pDMD_DVBC_InitData);
# 473 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_SetDbgLevel(DMD_DVBC_DbgLv u8DbgLevel);




extern DLL_PUBLIC const DMD_DVBC_Info* MDrv_DMD_DVBC_GetInfo(void);
# 488 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBC.h"
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetDSPReg(MS_U16 u16Addr, MS_U8 *pu8Data);
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_SetDSPReg(MS_U16 u16Addr, MS_U8 pu8Data);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetLibVer(const MSIF_Version **ppVersion);





extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetFWVer(MS_U16 *ver);




extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_SetReg(MS_U16 u16Addr, MS_U8 u8Data);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_SetSerialControl(MS_BOOL bEnable);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_SetConfig(MS_U16 u16SymbolRate, DMD_DVBC_MODULATION_TYPE eQamMode, MS_U32 u32IFFreq, MS_BOOL bSpecInv, MS_BOOL bSerialTS);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_SetConfig_symbol_rate_list(MS_U16 u16SymbolRate, DMD_DVBC_MODULATION_TYPE eQamMode, MS_U32 u32IFFreq, MS_BOOL bSpecInv, MS_BOOL bSerialTS, MS_U16 *pu16_symbol_rate_list,MS_U8 u8_symbol_rate_list_num);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_SetActive(MS_BOOL bEnable);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetLock(DMD_DVBC_GETLOCK_TYPE eType, DMD_DVBC_LOCK_STATUS *eLockStatus);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetLockWithRFPower(DMD_DVBC_GETLOCK_TYPE eType, DMD_DVBC_LOCK_STATUS *eLockStatus, float fCurrRFPowerDbm, float fNoChannelRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetSignalStrength(MS_U16 *u16Strength);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetSignalStrengthWithRFPower(MS_U16 *u16Strength, float fRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetSignalQuality(MS_U16 *u16Quality);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetSignalQualityWithRFPower(MS_U16 *u16Quality, float fRFPowerDbm);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetSNR(float *fSNR);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetPostViterbiBer(float *ber);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetPacketErr(MS_U16 *pktErr);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetCellID(MS_U16 *u16CellID);



extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_GetStatus(DMD_DVBC_MODULATION_TYPE *pQAMMode, MS_U16 *u16SymbolRate, float *pFreqOff);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_ActiveDmdSwitch(MS_U8 demod_no);

extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_Dual_Individual_Init(DMD_DVBC_InitData *pDMD_DVBC_InitData, MS_U32 u32InitDataLen);
extern DLL_PUBLIC MS_BOOL MDrv_DMD_DVBC_Dual_Public_Init(MS_U8 u8AGC_Tristate_Ctrl,MS_U8 u8Sar_Channel);

extern DLL_PUBLIC MS_U32 MDrv_DMD_DVBC_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef UFO_DEMOD_DVBC_SUPPORT_DMD_INT
MS_BOOL MDrv_DMD_DVBC_Reg_INT_CB(fpIntCallBack fpCBReg);
#endif

#ifdef UFO_DEMOD_DVBC_GET_AGC_INFO
MS_BOOL MDrv_DMD_DVBC_GetAGCInfo(MS_U8 u8dbg_mode, MS_U16 *pu16Data);
#endif



#ifdef __cplusplus
}
#endif


#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsDlc.h"
#ifndef __MSDLC_H
#define __MSDLC_H 

#ifdef _MSDLC_C_
  #define _MSDLCDEC_
#else
  #define _MSDLCDEC_ extern
#endif
#include "UFO.h"
#if ENABLE_DLC





void msDlcInit(WORD wWidth, WORD wHeight);
void msDlcInitWithCurve( WORD wHStart, WORD wHEnd, WORD wVStart, WORD wVEnd );







void msDlcHandler(BOOL bWindow);
BOOL msGetHistogramHandler(BOOL bWindow);


void msDlcEnableSetDLCCurveBoth(BOOL bEnable);






void msDlcOnOff(BOOL bSwitch, BOOL bWindow);
void msDlcSpeedupTrigger(BYTE ucLoop);
void msDlcSetBleOnOff(BOOL bSwitch);




void msDlc_CGC_Init(void);
void msDlc_CGC_ReInit(void);
#if defined(UFO_PUBLIC_HEADER_500)
#define MDrv_msDlc_CGC_SetGain msDlc_CGC_SetGain
#endif
void msDlc_CGC_SetGain(BYTE u8CGain);
void msDlc_CGC_Handler(void);




#if defined(UFO_PUBLIC_HEADER_500)
#define MDrv_msDLC_ParametersTool msDLC_ParametersTool
#endif
void msDLC_ParametersTool(BYTE *pCmdBuff);



WORD msDlcLibVersionCheck(void);
WORD msDlcCGCLibVersionCheck(void);



typedef struct
{

    BYTE ucLumaCurve[16];
    BYTE ucLumaCurve2_a[16];
    BYTE ucLumaCurve2_b[16];
    BYTE ucLumaCurve2[16];

    BYTE u8_L_L_U;
    BYTE u8_L_L_D;
    BYTE u8_L_H_U;
    BYTE u8_L_H_D;
    BYTE u8_S_L_U;
    BYTE u8_S_L_D;
    BYTE u8_S_H_U;
    BYTE u8_S_H_D;
    BYTE ucCGCCGain_offset;
    BYTE ucCGCChroma_GainLimitH;
    BYTE ucCGCChroma_GainLimitL;
    BYTE ucCGCYCslope;
    BYTE ucCGCYth;
    BYTE ucDlcPureImageMode;
    BYTE ucDlcLevelLimit;
    BYTE ucDlcAvgDelta;
    BYTE ucDlcAvgDeltaStill;
    BYTE ucDlcFastAlphaBlending;
    BYTE ucDlcSlowEvent;
    BYTE ucDlcTimeOut;
    BYTE ucDlcFlickAlphaStart;
    BYTE ucDlcYAvgThresholdH;
    BYTE ucDlcYAvgThresholdL;
    BYTE ucDlcBLEPoint;
    BYTE ucDlcWLEPoint;
    BYTE bCGCCGainCtrl : 1;
    BYTE bEnableBLE : 1;
    BYTE bEnableWLE : 1;
    BYTE ucDlcYAvgThresholdM;
    BYTE ucDlcCurveMode;
    BYTE ucDlcCurveModeMixAlpha;
    BYTE ucDlcAlgorithmMode;
    BYTE ucDlcHistogramLimitCurve[17];
    BYTE ucDlcSepPointH;
    BYTE ucDlcSepPointL;
    WORD uwDlcBleStartPointTH;
    WORD uwDlcBleEndPointTH;
    BYTE ucDlcCurveDiff_L_TH;
    BYTE ucDlcCurveDiff_H_TH;
    WORD uwDlcBLESlopPoint_1;
    WORD uwDlcBLESlopPoint_2;
    WORD uwDlcBLESlopPoint_3;
    WORD uwDlcBLESlopPoint_4;
    WORD uwDlcBLESlopPoint_5;
    WORD uwDlcDark_BLE_Slop_Min;
    BYTE ucDlcCurveDiffCoringTH;
    BYTE ucDlcAlphaBlendingMin;
    BYTE ucDlcAlphaBlendingMax;
    BYTE ucDlcFlicker_alpha;
    BYTE ucDlcYAVG_L_TH;
    BYTE ucDlcYAVG_H_TH;
    BYTE ucDlcDiffBase_L;
    BYTE ucDlcDiffBase_M;
    BYTE ucDlcDiffBase_H;
    BYTE ucLMaxThreshold;
    BYTE ucLMinThreshold;
    BYTE ucLMaxCorrection;
    BYTE ucLMinCorrection;
    BYTE ucRMaxThreshold;
    BYTE ucRMinThreshold;
    BYTE ucRMaxCorrection;
    BYTE ucRMinCorrection;
    BYTE ucAllowLoseContrast;
    MS_U8 u8Dlc_Mode;
    MS_U8 u8Tmo_Mode;
}StuDlc_FinetuneParamaters;


extern XDATA StuDlc_FinetuneParamaters g_DlcParameters;

#define DLC_PURE_IMAGE_DLC_CURVE 0L
#define DLC_PURE_IMAGE_LINEAR_CURVE 1L
#define DLC_PURE_IMAGE_DO_NOTHING 2L

extern XDATA WORD g_wLumaHistogram32H[32];

extern XDATA BYTE g_ucHistogramMax, g_ucHistogramMin;
extern XDATA WORD g_wLumiAverageTemp;
extern XDATA BYTE g_ucTable[16];
extern XDATA char* g_pInitLumaCurve;
extern XDATA WORD g_wLumiTotalCount;

#define DLC_EVENT_SLOW_ENABLE 40

#if (ENABLE_DLC == DLC_8SEG_HIS_MODE)
extern XDATA WORD g_wLumaHistogram8H[8];
#endif

void msDlc_SetCaptureRange(MS_U16 wHStart,MS_U16 wHEnd, MS_U16 wVStart, MS_U16 wVEnd);



#endif
#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Dlc_v2.h"
#ifndef _DLC_V2_H_
#define _DLC_V2_H_ 

#ifdef _DLC_C_
#define INTERFACE 
#else
#define INTERFACE extern
#endif

#ifdef __cplusplus
extern "C"
{
#endif

#include "UFO.h"
#include "MsTypes.h"

INTERFACE enum
{
    E_DLC_POOL_ID_INTERNAL = 0,
} E_DLC_POOL_ID;


typedef enum
{
    E_DLC_CMD_INIT_EX,
    E_DLC_CMD_SET_SETTING_EX,
    E_DLC_CMD_SET_CURVE,
    E_DLC_CMD_SET_BLE_SLOP_POINT,
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_DLC_CMD_SET_HDR_INFO,
#endif
    E_DLC_CMD_EXIT,
    E_DLC_CMD_SET_ON_OFF,
    E_DLC_CMD_SET_HANDLER_ON_OFF,
    E_DLC_CMD_SET_BLE_ON_OFF,
    E_DLC_CMD_ENABLE_MAIN_SUB_CURVE_SYNCHRONIZATION,
    E_DLC_CMD_HANDLER,
    E_DLC_CMD_GET_HISTOGRAM_HANDLER,
    E_DLC_CMD_GET_AVERAGE_VALUE,
    E_DLC_CMD_GET_AVERAGE_VALUE_EX,
    E_DLC_CMD_INIT_CURVE,
    E_DLC_CMD_SPEEDUP_TRIGGER,
    E_DLC_CMD_GET_LUMA_CURVE_STATUS,
    E_DLC_CMD_CGC_RESET_C_GAIN,
    E_DLC_CMD_CGC_CHECK_C_GAIN_IN_PQ_COM,
    E_DLC_CMD_CGC_RESET_Y_GAIN,
    E_DLC_CMD_CGC_CHECK_Y_GAIN_IN_PQ_COM,
    E_DLC_CMD_CGC_RESET,
    E_DLC_CMD_CGC_INIT,
    E_DLC_CMD_CGC_REINIT,
    E_DLC_CMD_CGC_HANDLER,
    E_DLC_CMD_GET_LIB_VER,
    E_DLC_CMD_GET_INFO,
    E_DLC_CMD_GET_STATUS_EX,
    E_DLC_CMD_SET_DBG_LEVEL,
    E_DLC_CMD_WRITE_CURVE,
    E_DLC_CMD_WRITE_CURVE_SUB,
    E_DLC_CMD_GET_HISTOGRAM,
    E_DLC_CMD_DECODE_EXT_CMD,
    E_DLC_CMD_SET_CAPTURE_RANGE,
    E_DLC_CMD_SET_SETTING,
    E_DLC_CMD_INIT,
    E_DLC_CMD_GET_STATUS,
    E_DLC_CMD_SET_POWERSTATE,
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_DLC_CMD_SET_TMOINFO,
#endif
    E_DBC_CMD_DLC_INIT,
    E_DBC_CMD_INIT,
    E_DBC_CMD_SET_STATUS,
    E_DBC_CMD_GET_STATUS,
    E_DBC_CMD_SET_READY,
    E_DBC_CMD_SET_DEBUG_MODE,
    E_DBC_CMD_GET_DEBUG_MODE,
    E_DBC_CMD_UPDATE_PWM,
    E_DBC_CMD_HANDLER,
    E_DBC_CMD_ADJUST_YC_GAIN,
    E_DBC_CMD_YC_GAIN_INIT,
    E_DBC_CMD_RESET,
    E_DBC_CMD_DECODE_EXT_CMD,
    E_DLC_CMD_GET_EOTF_INFO,
    E_DBC_CMD_NUM,
    E_DLC_CMD_MAX = E_DBC_CMD_NUM,
} E_DLC_IOCTL_CMDS;


typedef struct DLL_PACKED _stDLC_SetHDRInitData
{
    XC_DLC_HDRinit *pstDLC_HDRInitData;
    MS_BOOL bReturn;
} stDLC_SetHDRInitData, *pstDLC_HDRInitData;

#if defined(UFO_XC_HDR_VERSION) && (UFO_XC_HDR_VERSION == 2)
typedef struct DLL_PACKED _stDLC_SetTMOInfo
{
    ST_XC_DLC_TMO_INFO *pstDLC_TMOInfo;
    MS_BOOL bReturn;
} stDLC_SetTMOInfo, *pstDLC_SetTMOInfo;
#endif

typedef struct _stDLC_Init_Ex
{
    XC_DLC_init *pstXC_DLC_InitData;
    MS_U32 u32InitDataLen;
    MS_BOOL bReturn;
} stDLC_Init_Ex, *pstDLC_Init_Ex;

typedef struct _stDLC_SetSetting_Ex
{
    XC_DLC_MFinit_Ex *DLC_MFinit_Ex;
} stDLC_SetSetting_Ex, *pstDLC_SetSetting_Ex;


typedef struct _stDLC_SetCurve
{
    MS_U8 *pNormal;
    MS_U8 *pLight;
    MS_U8 *pDark;
} stDLC_SetCurve, *pstDLC_SetCurve;


typedef struct _stDLC_SetBleSlopPoint
{
    MS_U16 *pBLESlopPoint;
} stDLC_SetBleSlopPoint, *pstDLC_SetBleSlopPoint;


typedef struct _stDLC_Exit
{
    MS_BOOL bReturn;
} stDLC_Exit, *pstDLC_Exit;


typedef struct _stDLC_SetOnOff
{
    MS_BOOL bSwitch;
    MS_BOOL bWindow;
} stDLC_SetOnOff, *pstDLC_SetOnOff;


typedef struct _stDLC_SetDlcHandlerOnOff
{
    MS_BOOL bDlcEnable;
    MS_BOOL bReturn;
} stDLC_SetDlcHandlerOnOff, *pstDLC_SetDlcHandlerOnOff;


typedef struct _stDLC_SetBleOnOff
{
    MS_BOOL bSwitch;
    MS_BOOL bReturn;
} stDLC_SetBleOnOff, *pstDLC_SetBleOnOff;


typedef struct _stDLC_EnableMainSubCurveSynchronization
{
    MS_BOOL bEnable;
} stDLC_EnableMainSubCurveSynchronization, *pstDLC_EnableMainSubCurveSynchronization;


typedef struct _stDLC_Handler
{
    MS_BOOL bWindow;
} stDLC_Handler, *pstDLC_Handler;


typedef struct _stDLC_GetHistogramHandler
{
    MS_BOOL bWindow;
    MS_BOOL bReturn;
} stDLC_GetHistogramHandler, *pstDLC_GetHistogramHandler;


typedef struct _stDLC_GetAverageValue
{
    MS_U8 u8Return;
} stDLC_GetAverageValue, *pstDLC_GetAverageValue;


typedef struct _stDLC_GetAverageValue_Ex
{
    MS_U16 u16Return;
} stDLC_GetAverageValue_Ex, *pstDLC_GetAverageValue_Ex;


typedef struct _stDLC_InitCurve
{
    MS_U16 u16HStart;
    MS_U16 u16HEnd;
    MS_U16 u16VStart;
    MS_U16 u16VEnd;
} stDLC_InitCurve, *pstDLC_InitCurve;


typedef struct _stDLC_SpeedupTrigger
{
    MS_U8 u8Loop;
} stDLC_SpeedupTrigger, *pstDLC_SpeedupTrigger;


typedef struct _stDLC_GetLumaCurveStatus
{
    MS_BOOL bReturn;
} stDLC_GetLumaCurveStatus, *pstDLC_GetLumaCurveStatus;


typedef struct _stDLC_CGC_ResetCGain
{

} stDLC_CGC_ResetCGain, *pstDLC_CGC_ResetCGain;


typedef struct _stDLC_CGC_CheckCGainInPQCom
{

} stDLC_CGC_CheckCGainInPQCom, *pstDLC_CGC_CheckCGainInPQCom;


typedef struct _stDLC_CGC_ResetYGain
{

} stDLC_CGC_ResetYGain, *pstDLC_CGC_ResetYGain;


typedef struct _stDLC_CGC_CheckYGainInPQCom
{

} stDLC_CGC_CheckYGainInPQCom, *pstDLC_CGC_CheckYGainInPQCom;


typedef struct _stDLC_CGC_Reset
{

} stDLC_CGC_Reset, *pstDLC_CGC_Reset;


typedef struct _stDLC_CGC_Init
{

} stDLC_CGC_Init, *pstDLC_CGC_Init;


typedef struct _stDLC_CGC_ReInit
{

} stDLC_CGC_ReInit, *pstDLC_CGC_ReInit;


typedef struct _stDLC_CGC_Handler
{

} stDLC_CGC_Handler, *pstDLC_CGC_Handler;


typedef struct DLL_PACKED _stDLC_GetLibVer
{
    const MSIF_Version **ppVersion;
    E_XC_DLC_RESULT eResult;
} stDLC_GetLibVer, *pstDLC_GetLibVer;


typedef struct _stDLC_GetInfo
{
    const XC_DLC_ApiInfo * eResult;
} stDLC_GetInfo, *pstDLC_GetInfo;


typedef struct DLL_PACKED _stDLC_GetStatus_Ex
{
    XC_DLC_ApiStatus *pDrvStatus;
    MS_BOOL bWindow;
    MS_BOOL bReturn;
} stDLC_GetStatus_Ex, *pstDLC_GetStatus_Ex;


typedef struct _stDLC_SetDbgLevel
{
    MS_U16 u16DbgSwitch;
    MS_BOOL bReturn;
} stDLC_SetDbgLevel, *pstDLC_SetDbgLevel;


typedef struct DLL_PACKED _stDLC_WriteCurve
{
    MS_U8 *pu8Table;
    MS_BOOL bReturn;
} stDLC_WriteCurve, *pstDLC_WriteCurve;


typedef struct DLL_PACKED _stDLC_WriteCurve_Sub
{
    MS_U8 *pu8Table;
    MS_BOOL bReturn;
} stDLC_WriteCurve_Sub, *pstDLC_WriteCurve_Sub;


typedef struct DLL_PACKED _stDLC_GetHistogram
{
    MS_U16 *pu16Histogram;
    E_XC_DLC_HISTOGRAM_TYPE enHistogramType;
    MS_BOOL bReturn;
} stDLC_GetHistogram, *pstDLC_GetHistogram;


typedef struct DLL_PACKED _stDLC_DecodeExtCmd
{
    tDLC_CONTROL_PARAMS *params;
} stDLC_DecodeExtCmd, *pstDLC_DecodeExtCmd;


typedef struct DLL_PACKED _stDLC_SetCaptureRange
{
    XC_DLC_CAPTURE_Range *pu16_Range;
} stDLC_SetCaptureRange, *pstDLC_SetCaptureRange;


typedef struct _stDLC_SetSetting
{
    XC_DLC_MFinit DLC_MFinit;
} stDLC_SetSetting, *pstDLC_SetSetting;


typedef struct _stDLC_Init
{
    XC_DLC_init *pstXC_DLC_InitData;
    MS_U32 u32InitDataLen;
    MS_BOOL bReturn;
} stDLC_Init, *pstDLC_Init;


typedef struct _stDLC_GetStatus
{
    XC_DLC_ApiStatus *pDrvStatus;
    MS_BOOL bWindow;
    MS_BOOL bReturn;
} stDLC_GetStatus, *pstDLC_GetStatus;

typedef struct _stDLC_SetPowerState
{
    EN_POWER_MODE enPowerState;
    MS_U32 u32Return;
} stDLC_SetPowerState, *pstDLC_SetPowerState;


typedef struct _stDBC_DLC_Init
{
    XC_DLC_DBC_MFinit DLC_DBC_MFinit;
} stDBC_DLC_Init, *pstDBC_DLC_Init;


typedef struct _stDBC_Init
{

} stDBC_Init, *pstDBC_Init;


typedef struct _stDBC_Setstatus
{
    MS_BOOL bDBCEnable;
} stDBC_Setstatus, *pstDBC_Setstatus;


typedef struct _stDBC_Getstatus
{
    MS_BOOL bReturn;
} stDBC_Getstatus, *pstDBC_Getstatus;


typedef struct _stDBC_SetReady
{
    MS_BOOL bDBCReady;
} stDBC_SetReady, *pstDBC_SetReady;


typedef struct _stDBC_SetDebugMode
{
    MS_U8 ucDBC_DebugMode;
} stDBC_SetDebugMode, *pstDBC_SetDebugMode;


typedef struct _stDBC_GetDebugMode
{
    MS_U8 u8Return;
} stDBC_GetDebugMode, *pstDBC_GetDebugMode;


typedef struct _stDBC_UpdatePWM
{
    MS_U8 u8PWMvalue;
} stDBC_UpdatePWM, *pstDBC_UpdatePWM;


typedef struct _stDBC_Handler
{
    MS_U16 u16Return;
} stDBC_Handler, *pstDBC_Handler;


typedef struct _stDBC_AdjustYCGain
{

} stDBC_AdjustYCGain, *pstDBC_AdjustYCGain;


typedef struct _stDBC_YCGainInit
{
    MS_U8 u8YGain_M;
    MS_U8 u8YGain_L;
    MS_U8 u8CGain_M;
    MS_U8 u8CGain_L;
} stDBC_YCGainInit, *pstDBC_YCGainInit;


typedef struct _stDBC_Reset
{

} stDBC_Reset, *pstDBC_Reset;


typedef struct DLL_PACKED _stDBC_DecodeExtCmd
{
    tDBC_CONTROL_PARAMS *params;
} stDBC_DecodeExtCmd, *pstDBC_DecodeExtCmd;

typedef struct _stDLC_GetEOTFInfo
{
    MS_U32 u32SupportType;
} stDLC_GetEOTFInfo, *pstDLC_GetEOTFInfo;

#undef INTERFACE

#ifdef __cplusplus
}
#endif

#undef _DLC_V2_H_
#endif
# 142 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc.h"
#ifndef _API_XC_ADC_H_
#define _API_XC_ADC_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
# 159 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc.h"
typedef struct DLL_PACKED
{
    MS_U16 u16RedGain;
    MS_U16 u16GreenGain;
    MS_U16 u16BlueGain;
    MS_U16 u16RedOffset;
    MS_U16 u16GreenOffset;
    MS_U16 u16BlueOffset;
} APIXC_AdcGainOffsetSetting;


typedef enum
{
    E_ADC_Internal_0V,
    E_ADC_Internal_0_1V,
    E_ADC_Internal_0_6V,
    E_ADC_Internal_None,
}ADC_Internal_Voltage;


typedef enum
{
    E_ADC_Gen_480P_Clk,
    E_ADC_Gen_720P_Clk,
    E_ADC_Gen_1080P_Clk,
}ADC_Gen_Clock_Type;


typedef enum
{
    E_ADC_VClamp_0_85V,
    E_ADC_VClamp_0_9V,
    E_ADC_VClamp_0_95V,
    E_ADC_VClamp_1_0V,
    E_ADC_VClamp_1_05V,
    E_ADC_VClamp_1_2V,
    E_ADC_VClamp_1_5V,
}ADC_VClamp_Level_Type;


typedef enum
{
    ADC_CHR = 0,
    ADC_CHG,
    ADC_CHB,
    ADC_ALL,
}ADC_CHANNEL_t;


typedef enum
{
    REST_ATOP = _BIT(7),
    REST_HDMI = _BIT(6),
    REST_HDCP = _BIT(5),
    REST_DVI = _BIT(4),
    REST_PLL_DIG_B = _BIT(3),
    REST_ADC_DIG_B = _BIT(2),
    REST_PLL_DIG_A = _BIT(1),
    REST_ADC_DIG_A = _BIT(0),
    REST_PLL = ( REST_PLL_DIG_B | REST_PLL_DIG_A ),
    REST_ADC = ( REST_ADC_DIG_B | REST_ADC_DIG_A ),
} ADC_RESET;

typedef enum
{
    E_ADC_IDAC_FULL_MODE,
    E_ADC_IDAC_HALF_MODE,
    E_ADC_IDAC_QUART_MODE,
    E_ADC_IDAC_MODE_MAX,
} ADC_DacCurrentMode_t;
# 241 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc.h"
void MApi_XC_ADC_SetCVBSOut(MS_BOOL bEnable, E_DEST_TYPE enOutputType , INPUT_SOURCE_TYPE_t enInputPortType, MS_BOOL isDigitalSource);






MS_BOOL MApi_XC_ADC_IsCVBSOutEnabled(E_DEST_TYPE enOutputType);






void MApi_XC_ADC_SetPcClock(MS_U16 u16Clock);






void MApi_XC_ADC_SetPhase(MS_U8 u8Value);






void MApi_XC_ADC_SetPhaseEx(MS_U16 u16Value);






MS_U16 MApi_XC_ADC_GetPhaseRange( void );






MS_U8 MApi_XC_ADC_GetPhase( void );






MS_U16 MApi_XC_ADC_GetPhaseEx( void );






MS_BOOL MApi_XC_ADC_IsScartRGB(void);






MS_U16 MApi_XC_ADC_GetPcClock(void );
# 313 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc.h"
void MApi_XC_ADC_GetSoGLevelRange(MS_U32 *u32min, MS_U32 *u32max, MS_U32 *u32Recommend_value);






void MApi_XC_ADC_SetSoGLevel(MS_U32 u32Value);






void MApi_XC_ADC_PowerOff(void);
# 336 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc.h"
void MApi_XC_ADC_GetDefaultGainOffset(INPUT_SOURCE_TYPE_t eSource , APIXC_AdcGainOffsetSetting* pstADCSetting);







MS_U16 MApi_XC_ADC_GetMaximalOffsetValue(void);







MS_U16 MApi_XC_ADC_GetMaximalGainValue(void);







MS_U16 MApi_XC_ADC_GetCenterGain(void);







MS_U16 MApi_XC_ADC_GetCenterOffset(void);
# 378 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc.h"
void MApi_XC_ADC_SetGain(MS_U8 u8Color, MS_U16 u16Value);







void MApi_XC_ADC_SetOffset(MS_U8 u8Color, MS_U16 u16Value);






void MApi_XC_ADC_AdjustGainOffset(APIXC_AdcGainOffsetSetting* pstADCSetting);






void MApi_XC_ADC_Source_Calibrate(INPUT_SOURCE_TYPE_t enInputSourceType);






void MApi_XC_ADC_SetSoGCal(void);






void MApi_XC_ADC_SetRGB_PIPE_Delay(MS_U8 u8Value);







void MApi_XC_ADC_ScartRGB_SOG_ClampDelay(MS_U16 u16Clpdly, MS_U16 u16Caldur);






void MApi_XC_ADC_Set_YPbPrLooseLPF(MS_BOOL benable);






void MApi_XC_ADC_Set_SOGBW(MS_U16 u16value);






void MApi_XC_ADC_SetClampDuration(MS_U16 u16Value);







MS_BOOL MApi_XC_ADC_EnableHWCalibration(MS_BOOL bEnable);







MS_BOOL MApi_XC_ADC_SetIdacCurrentMode(ADC_DacCurrentMode_t eMode);






ADC_DacCurrentMode_t MApi_XC_ADC_GetIdacCurrentMode(void);

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNSK2Type.h"
#ifndef _DRV_NSK2TYPE_H_
#define _DRV_NSK2TYPE_H_ 
# 111 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNSK2Type.h"
#define NSK2_DBGLV_EMERG 0
#define NSK2_DBGLV_ALERT 1
#define NSK2_DBGLV_CRIT 2
#define NSK2_DBGLV_ERR 3
#define NSK2_DBGLV_WARNING 4
#define NSK2_DBGLV_NOTICE 5
#define NSK2_DBGLV_INFO 6
#define NSK2_DBGLV_DEBUG 7
#define NSK2_DBGLV_ARRAY 8


#define EMM_DBGLV_EMERG 0
#define EMM_DBGLV_ALERT 1
#define EMM_DBGLV_CRIT 2
#define EMM_DBGLV_ERR 3
#define EMM_DBGLV_WARNING 4
#define EMM_DBGLV_NOTICE 5
#define EMM_DBGLV_INFO 6
#define EMM_DBGLV_DEBUG 7
#define EMM_DBGLV_ARRAY 8


#endif
# 131 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
#ifndef _DRV_MIU_H_
#define _DRV_MIU_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"
#include "UFO.h"




#ifdef STELLAR
#define _MIU_INTERNEL_USE 1
#endif



#define MIU_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'M','I','U','_'}, \
    {'0','1'}, \
    {'0','2'}, \
    {'0','0','2','6','4','8','8','5'}, \
    MSIF_OS

#define MIU_CLIENT_MAX 0x30


#define bit_check(x,bit_pos) ((x & bit_pos) != 0) ? TRUE : FALSE


#define set_req_mask_info(reg_addr,base_addr,bEnable,id_pos) \
    MST_MACRO_START \
    reg_addr = base_addr; \
    reg_addr = reg_addr + (MS_U16)((id_pos >> 4) * 0x20); \
    if(reg_addr == 0x1286) \
        reg_addr = 0x06F6; \
    else if(reg_addr == 0x0686) \
        reg_addr = 0x0628; \
    reg_addr = reg_addr + (MS_U16)(bit_check(id_pos,BIT3)); \
    HAL_MIU_WriteRegBit(reg_addr, bEnable , (1 << (id_pos & (BIT2|BIT1|BIT0)))); \
    MST_MACRO_END

#ifdef ALIGN
#undef ALIGN
#define ALIGN(_val_,_shift_) (((_val_) >> _shift_) << _shift_)
#else
#define ALIGN(_val_,_shift_) (((_val_) >> _shift_) << _shift_)
#endif


#define _ALIGN(_val_,_shift_) (((_val_) >> _shift_) << _shift_)




typedef enum
{
    CLIENT_TSPIWB,
    CLIENT_STRLD,
    CLIENT_HK51_ICACHE,
    CLIENT_AEON_I,
    CLIENT_FLH_W,
    CLIENT_HK51_XDATA,
    CLIENT_AEON,
    CLIENT_OD_LSB,
    CLIENT_GOP2,
    CLIENT_VE,
    CLIENT_FDSEICH,
    CLIENT_TSP,
    CLIENT_TTXSK,
    CLIENT_SVD_DB,
    CLIENT_FDDECICH,
    CLIENT_OPM,
    CLIENT_DC,
    CLIENT_GOP,
    CLIENT_GOP0,
    CLIENT_GOP1,
    CLIENT_DNRB,
    CLIENT_COMB,
    CLIENT_OD,
    CLIENT_MADDMA2,
    CLIENT_MAD,
    CLIENT_SVD_EN,
    CLIENT_GE,
    CLIENT_BDMA,
    CLIENT_NFC,
    CLIENT_USBP1,
    CLIENT_USBP2,
    CLIENT_RVD,
    CLIENT_SVDINTP,
    CLIENT_MVD,
    CLIENT_AESDMA,
    CLIENT_TTX,
    CLIENT_JPD,
    CLIENT_EMAC,
    CLIENT_MAX
} euMIUClientIDTYPE;

typedef struct
{
    MS_U8 miu;
    MS_U8 protect_id;
} stMIUClientID_t;

typedef enum
{
    MIU_CLIENT_NONE,
    MIU_CLIENT_DUMMY,
    MIU_CLIENT_ADCDVIPLL_W,
    MIU_CLIENT_AESDMA_RW,
    MIU_CLIENT_AU_R2_RW,
    MIU_CLIENT_BDMA_RW,
    MIU_CLIENT_DC_R,
    MIU_CLIENT_DISP_IPATH_DI_W,
    MIU_CLIENT_DISP_IPATH_MR_RW,
    MIU_CLIENT_DISP_IPATH_NR_RW,
    MIU_CLIENT_DMA2_RW,
    MIU_CLIENT_DNRA_RW,
    MIU_CLIENT_DSCRMB_RW,
    MIU_CLIENT_DVBC_ADC_RW,
    MIU_CLIENT_EMAC_RW,
    MIU_CLIENT_FCIE_RW,
    MIU_CLIENT_FDDECICH_R,
    MIU_CLIENT_FDSEICH_R,
    MIU_CLIENT_G3D_RW,
    MIU_CLIENT_GE_RW,
    MIU_CLIENT_GOP_W,
    MIU_CLIENT_GOP0_R,
    MIU_CLIENT_GOP1_R,
    MIU_CLIENT_GOP2_R,
    MIU_CLIENT_GOP3_R,
    MIU_CLIENT_HISPEED_UART_RW,
    MIU_CLIENT_HVD_RW,
    MIU_CLIENT_HVD_BBU_R,
    MIU_CLIENT_JPD_RW,
    MIU_CLIENT_M4VE_ME_R,
    MIU_CLIENT_M4VE0_RW,
    MIU_CLIENT_M4VE2_RW,
    MIU_CLIENT_MAU_RW,
    MIU_CLIENT_MAU0_W,
    MIU_CLIENT_MAU1_R,
    MIU_CLIENT_MFE0_W,
    MIU_CLIENT_MFE1_R,
    MIU_CLIENT_MHEG5_DCACHE_RW,
    MIU_CLIENT_MHEG5_ICACHE_R,
    MIU_CLIENT_MHEG5_ICACHE_RW,
    MIU_CLIENT_MHEG5_GDMA_RW,
    MIU_CLIENT_MIPS_R,
    MIU_CLIENT_MIPS_W,
    MIU_CLIENT_MIPS_RW,
    MIU_CLIENT_MOBF_RW,
    MIU_CLIENT_MPIF_RW,
    MIU_CLIENT_MVD_RW,
    MIU_CLIENT_MVD_BBU_RW,
    MIU_CLIENT_MVOP_64BIT_R,
    MIU_CLIENT_MVOP_128BIT_R,
    MIU_CLIENT_NAND_RW,
    MIU_CLIENT_OD_R,
    MIU_CLIENT_OD_W,
    MIU_CLIENT_OD_LSB_W,
    MIU_CLIENT_OD_LSB_R,
    MIU_CLIENT_OPW_W,
    MIU_CLIENT_OTG_RW,
    MIU_CLIENT_PM51_RW,
    MIU_CLIENT_PVR_W,
    MIU_CLIENT_PVR2_W,
    MIU_CLIENT_R2M_R,
    MIU_CLIENT_R2M_W,
    MIU_CLIENT_RASP0_W,
    MIU_CLIENT_RASP1_W,
    MIU_CLIENT_RVD_BBU_R,
    MIU_CLIENT_RVD_RW,
    MIU_CLIENT_SC_DNR_R,
    MIU_CLIENT_SC_DNR_W,
    MIU_CLIENT_SC_IPMAIN_R,
    MIU_CLIENT_SC_IPMAIN_W,
    MIU_CLIENT_SC_IPSUB_R,
    MIU_CLIENT_SC_IPSUB_W,
    MIU_CLIENT_SC_OP_R,
    MIU_CLIENT_SC_OPM_R,
    MIU_CLIENT_SC_TNR_R,
    MIU_CLIENT_SC_TNR_W,
    MIU_CLIENT_STRLD_RW,
    MIU_CLIENT_TSP_R,
    MIU_CLIENT_TSP_W,
    MIU_CLIENT_TSP_ORZ_R,
    MIU_CLIENT_TSP_ORZ_W,
    MIU_CLIENT_USB20_RW,
    MIU_CLIENT_USB_UHC0_RW,
    MIU_CLIENT_USB_UHC1_RW,
    MIU_CLIENT_USB_UHC2_RW,
    MIU_CLIENT_VD_COMB_R,
    MIU_CLIENT_VD_COMB_W,
    MIU_CLIENT_VD_TTX_RW,
    MIU_CLIENT_VD_TTXSL_W,
    MIU_CLIENT_VD_TTXSK_W,
    MIU_CLIENT_VE_W,
    MIU_CLIENT_VE_R,
    MIU_CLIENT_VIF_ADC_W,
    MIU_CLIENT_VIVALDI9_AUDMA_RW,
    MIU_CLIENT_VIVALDI9_DECODER_R,
    MIU_CLIENT_VIVALDI9_DMA_RW,
    MIU_CLIENT_VIVALDI9_LNKLST_R,
    MIU_CLIENT_VIVALDI9_MAD_RW,
    MIU_CLIENT_VIVALDI9_SE_R,
    MIU_CLIENT_MSP_ICACHE_RW,
    MIU_CLIENT_DISP_IPATH_DI_RW,
    MIU_CLIENT_MVOP1_R,
    MIU_CLIENT_LDM_W,
    MIU_CLIENT_LDM_R,
    MIU_CLIENT_T3D_W,
    MIU_CLIENT_T3D_R,
    MIU_CLIENT_MIIC0_RW,
    MIU_CLIENT_MIIC1_RW,
    MIU_CLIENT_MIIC2_W,
    MIU_CLIENT_MAXID,
    MIU_CLIENT_SC_IPMAIN_RW,
    MIU_CLIENT_SC_IPSUB_RW,
    MIU_CLIENT_SC_OPMAIN_RW,
    MIU_CLIENT_FRC_OSD_RW,
    MIU_CLIENT_FRC_IP_R,
    MIU_CLIENT_FRC_IP_W,
    MIU_CLIENT_FRC_OD_R,
    MIU_CLIENT_FRC_OD_W,
    MIU_CLIENT_FRC_OPM_R,
    MIU_CLIENT_FRC_R2_RW,
    MIU_CLIENT_FRC_SC_RW,
    MIU_CLIENT_SC_OP_W,
    MIU_CLIENT_SECURE_R2_RW,
    MIU_CLIENT_SC_2D3D_RW,
    MIU_CLIENT_SC_OD_W,
    MIU_CLIENT_SC_OD_R,
    MIU_CLIENT_SC_LD_RW,
    MIU_CLIENT_GPD_RW,
    MIU_CLIENT_VP6_RW,
    MIU_CLIENT_SDIO_RW,
    MIU_CLIENT_G3D0_RW,
    MIU_CLIENT_G3D1_RW,
    MIU_CLIENT_SECEMAC_RW,
    MIU_CLIENT_USB_UHC3_RW,
    MIU_CLIENT_TSP_PVR0_W,
    MIU_CLIENT_TSP_PVR1_W,
    MIU_CLIENT_MAU0_RW,
    MIU_CLIENT_MAU1_RW,
    MIU_CLIENT_TSP_SEC_W,
    MIU_CLIENT_OPM_R,
    MIU_CLIENT_USB3_RW,
    MIU_CLIENT_SC_DIPW_RW,
    MIU_CLIENT_CMD_QUEUE_RW,
    MIU_CLIENT_TSO_RW,
    MIU_CLIENT_VE_2DMCDI_RW,
    MIU_CLIENT_SC_IPSUB2_R,
    MIU_CLIENT_SC_IPSUB2_W,
    MIU_CLIENT_MIIC_DMA_RW,
    MIU_CLIENT_UART_DMA_RW,
    MIU_CLIENT_NJPD_RW,
    MIU_CLIENT_XD2MIU_RW,
    MIU_CLIENT_VD_R2D_RW,
    MIU_CLIENT_VD_R2I_R,
    MIU_CLIENT_TSP_ORZ_RW,
    MIU_CLIENT_MVOP_SUB_R,
    MIU_CLIENT_SC_DIPW_W,
    MIU_CLIENT_T3D_RW,
    MIU_CLIENT_BT_RW,
    MIU_CLIENT_VE_VBI_R,
    MIU_CLIENT_ARM_RW,
    MIU_CLIENT_SC1_OP_R,
    MIU_CLIENT_SC1_IPMAIN_RW,
    MIU_CLIENT_GOP4_R,
    MIU_CLIENT_GOP5_R,
    MIU_CLIENT_GMAC_RW,
    MIU_CLIENT_SATA_RW,
    MIU_CLIENT_SC_LOCALDIMING_RW,
    MIU_CLIENT_JPD720P_RW,
    MIU_CLIENT_SC_IPM2_R,
    MIU_CLIENT_VIVALDI_DSC_R,
    MIU_CLIENT_TSP_JPD_RW,
    MIU_CLIENT_DEMOD_W,
    MIU_CLIENT_DEMOD_R,
    MIU_CLIENT_DEMOD_ADCDMA_W,
    MIU_CLIENT_GPU_RW,
    MIU_CLIENT_PDW1_RW,
    MIU_CLIENT_GPO0_PDW0_RW,
    MIU_CLIENT_EVD_R,
    MIU_CLIENT_EVD_RW,
    MIU_CLIENT_SC_FRCL_R,
    MIU_CLIENT_SC_FRCR_R,
    MIU_CLIENT_VD_VBI_RW,
    MIU_CLIENT_VD_MHEG5_ICACHE_RW,
    MIU_CLIENT_TSP00_RW,
    MIU_CLIENT_TSP01_RW,
    MIU_CLIENT_TSP02_RW,
    MIU_CLIENT_TSP03_RW,
    MIU_CLIENT_TSP04_RW,
    MIU_CLIENT_TSP05_RW,
    MIU_CLIENT_TSP06_RW,
    MIU_CLIENT_VIVALDI9_COMBINE_RW,
    MIU_CLIENT_TSP07_RW,
    MIU_CLIENT_ISDBT_TDI_R,
    MIU_CLIENT_ISDBT_TDI_W,
    MIU_CLIENT_FI_Queue0_WR,
    MIU_CLIENT_FI_Queue1_WR,
    MIU_CLIENT_SWDC_RW,
    MIU_CLIENT_ISDB1_RW,
    MIU_CLIENT_ISDB2_RW,
    MIU_CLIENT_MIIC3_RW,
    MIU_CLIENT_SECAU_R2_RW,
    MIU_CLIENT_SC_LOCALDIMING_R_RW,
    MIU_CLIENT_SC_LOCALDIMING_L_RW,
    MIU_CLIENT_SC0_L_RW,
    MIU_CLIENT_SC0_R_RW,
    MIU_CLIENT_TSP_FIQ_RW,
    MIU_CLIENT_EVD_R2D_RW,
    MIU_CLIENT_EVD_R2I_R,
    MIU_CLIENT_SECHVD_RW,
    MIU_CLIENT_SECEVD_RW,
    MIU_CLIENT_MFDEC_R,
    MIU_CLIENT_SECMFDEC_R,
    MIU_CLIENT_MIUTEST_R,
    MIU_CLIENT_GOP3_PDW0_RW,
    MIU_CLIENT_SC1_OPMAIN_RW,
    MIU_CLIENT_SC2_IPSUB_RW,
    MIU_CLIENT_SC_IPMAIN2_RW,
    MIU_CLIENT_SC2_OPMAIN_RW,
    MIU_CLIENT_SC_ODL_RW,
    MIU_CLIENT_SC_ODR_RW,
    MIU_CLIENT_SC1_IPSUB_RW,
    MIU_CLIENT_EVD_BBU_R,
    MIU_CLIENT_SC_DWIN_W,
    MIU_CLIENT_ZDEC_RW,
    MIU_CLIENT_ZDEC_ACP_RW,
    MIU_CLIENT_USB30_1_RW,
    MIU_CLIENT_USB30_2_RW,
    MIU_CLIENT_3RDHVD_RW,
    MIU_CLIENT_VP9_RW,
    MIU_CLIENT_FRC_R,
    MIU_CLIENT_FRCM_W,
    MIU_CLIENT_SC_OD_RW,
    MIU_CLIENT_SC_OPSUB_W,
    MIU_CLIENT_FRCS_W,
    MIU_CLIENT_EVD_MTFC_W,
    MIU_CLIENT_EVD_MTFY_W,
    MIU_CLIENT_ZDEC2_RW,
    MIU_CLIENT_SC2_IPMAIN_RW,
    MIU_CLIENT_MTF_W,
    MIU_CLIENT_DBG_R,
    MIU_CLIENT_DS_R,
    MIU_CLIENT_FRC_R2,
    MIU_CLIENT_MVD_RTO_RW,
    MIU_CLIENT_FRC_FSCM2_RW,
    MIU_CLIENT_FRC_FSCM3_RW,
    MIU_CLIENT_FRC_IPM0_W,
    MIU_CLIENT_FRC_IPM1_W,
    MIU_CLIENT_FRC_OPM0_R,
    MIU_CLIENT_FRC_OPM1_R,
    MIU_CLIENT_FRC_OPME0_R,
    MIU_CLIENT_FRC_OPME1_R,
    MIU_CLIENT_FRC_OPMI0_R,
    MIU_CLIENT_FRC_OPMI1_R,
    MIU_CLIENT_FRC_ME_W,
    MIU_CLIENT_FRC_ME_R,
    MIU_CLIENT_FRC_HR_W,
    MIU_CLIENT_FRC_HR_R,
    MIU_CLIENT_FRC_MI_MERGE_RW,
    MIU_CLIENT_MC2D_RW,
    MIU_CLIENT_CMD_QUEUE1_RW,
    MIU_CLIENT_USB_UHC4_RW,
    MIU_CLIENT_DEMOD_RW,
    MIU_CLIENT_VE_RW,
    MIU_CLIENT_SC_PDW_W,
    MIU_CLIENT_VIVALDI9_R2_ARB_RW,
    MIU_CLIENT_MCU51_DB_TOOL_RW,
    MIU_CLIENT_TSP_RW,
    MIU_CLIENT_TSP_ORZ2_RW,
    MIU_CLIENT_EVD_BBU_RW,
    MIU_CLIENT_DVBC_ADC_W,
    MIU_CLIENT_GMAC1_RW,
    MIU_CLIENT_MFE_RW,
    MIU_CLIENT_VD_R2_L_I_R,
    MIU_CLIENT_VD_R2_L_D_RW,
    MIU_CLIENT_CA_MIU_CROSSBAR_2_RW,
    MIU_CLIENT_TSP08_RW,
    MIU_CLIENT_ZDEC_LZDMA_RW,
    MIU_CLIENT_EVD2_BBU_R,
    MIU_CLIENT_GOP3_DWIN_RW,
    MIU_CLIENT_MVOP_256BIT_R,
    MIU_CLIENT_MFDEC1_R,
    MIU_CLIENT_SC_DYN_SCL_R,
    MIU_CLIENT_SC1_OPM_R,
    MIU_CLIENT_ZDEC_ACP_W,
    MIU_CLIENT_CMD_QUEUE_R,
    MIU_CLIENT_VIVALDI9_DECODER_RW,
    MIU_CLIENT_DEMOD_ADCDMA_RW,
    MIU_CLIENT_MIU_BIST,
    MIU_CLIENT_CA_MIU_CROSSBAR_0_RW,
    MIU_CLIENT_CA_MIU_CROSSBAR_1_RW,
    MIU_CLIENT_SECGMAC_RW,
    MIU_CLIENT_AU_R2_1_RW,
    MIU_CLIENT_TSO_1_RW,
    MIU_CLIENT_TSIO_RW,
    MIU_CLIENT_PCIE_OUTBOUND_RW,
    MIU_CLIENT_PCIE_INBOUND_RW,
    MIU_CLIENT_DDI_0_RW,
    MIU_CLIENT_SC_DIPW_1_RW,
    MIU_CLIENT_EVD_ENGINE1_RW,
    MIU_CLIENT_HVD_ENGINE1_RW,
    MIU_CLIENT_DDI_1_RW,
    MIU_CLIENT_MFDEC0_1_R,
    MIU_CLIENT_MFDEC1_1_R,
    MIU_CLIENT_AUTO_DOWNLOAD_R,
    MIU_CLIENT_MFEH_R,
    MIU_CLIENT_AUDIO_RW,
    MIU_CLIENT_OD_RW,
    MIU_CLIENT_MVOP1_256BIT_R,
    MIU_CLIENT_MVD_256BIT_RW,
    MIU_CLIENT_TSP_FILEIN_RW,
    MIU_CLIENT_TSP_SEC_RW,
    MIU_CLIENT_HDR_L_RW,
    MIU_CLIENT_HDR_R_RW,
    MIU_CLIENT_MIU_CMD_RW,
    MIU_CLIENT_G256_POST_ARB_RW,
    MIU_CLIENT_G128_POST_ARB_RW,
    MIU_CLIENT_G3_PRE_ARB_RW,
    MIU_CLIENT_EVD_2_MIU0_RW,
    MIU_CLIENT_EVD_2_MIU1_RW,
    MIU_CLIENT_DEMOD_MCU51_WR,
    MIU_CLIENT_DEMOD1_WR,
    MIU_CLIENT_DEMOD2_WR,
    MIU_CLIENT_DEMOD3_WR,
    MIU_CLIENT_DEMOD4_WR,
    MIU_CLIENT_DEMOD5_WR,
    MIU_CLIENT_DEMOD6_WR,
    MIU_CLIENT_TSO_TX_RW,
    MIU_CLIENT_TSO_RX_RW,
    MIU_CLIENT_SC_DIP_RW,
    MIU_CLIENT_SC_DIP_DI_RW,
    MIU_CLIENT_ADL_RW,

}eMIUClientID;

typedef enum
{

    MIU_SELTYPE_MIU0 = 0,

    MIU_SELTYPE_MIU1,

    MIU_SELTYPE_MIU_ALL,

    MIU_SELTYPE_MIU2,

    MIU_SELTYPE_MIU3

}eMIU_SelType;

typedef struct
{
    MS_U8 u8Gp:4;
    MS_U8 u8BitPos:4;
}MIU_ClientInfo;

typedef struct DLL_PACKED
{
    MS_BOOL bHit;
    MS_U8 u8Group;
    MS_U8 u8ClientID;
    MS_U8 u8Block;
}MIU_PortectInfo;

typedef struct
{
    MS_U8 u81st;
    MS_U8 u82nd;
    MS_U8 u83rd;
    MS_U8 u84th;
}MIU_GroupPriority;

typedef enum
{
  E_MIU_0 = 0,
  E_MIU_1,
  E_MIU_2,
  E_MIU_3,
  E_MIU_NUM,
} MIU_ID;

typedef enum
{
  E_MIU_DDR_32MB = 0,
  E_MIU_DDR_64MB,
  E_MIU_DDR_128MB,
  E_MIU_DDR_256MB,
  E_MIU_DDR_512MB,
  E_MIU_DDR_1024MB,
  E_MIU_DDR_2048MB,
  E_MIU_DDR_4096MB,
  E_MIU_DDR_8192MB,
}MIU_DDR_SIZE;

typedef enum
{
  E_MIU_DDR3,
  E_MIU_DDR4
}MIU_DDR_TYPE;

typedef enum
{
  E_MIU_CLIENT_64BIT = 0,
  E_MIU_CLIENT_128BIT,
  E_MIU_CLIENT_256BIT,
}eMIU_ClientWidth;

#define MST_MACRO_START do {
#define MST_MACRO_END } while (0)


#define set_client_info(client_data,miu_pos,id_code) \
        MST_MACRO_START \
        client_data->miu = miu_pos; \
        client_data->protect_id = id_code; \
        MST_MACRO_END
# 671 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
#include "drvMIU_v2.h"
# 684 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_OPM_R(MS_U8 u8Mask, MS_U8 u8Miu);
# 693 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_DNRB_R(MS_U8 u8Mask, MS_U8 u8Miu);
# 702 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_DNRB_W(MS_U8 u8Mask, MS_U8 u8Miu);
# 711 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_DNRB_RW(MS_U8 u8Mask, MS_U8 u8Miu);
# 720 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_SC_RW(MS_U8 u8Mask, MS_U8 u8Miu);
# 729 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_MVOP_R(MS_U8 u8Mask, MS_U8 u8Miu);
# 738 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_MVD_R(MS_U8 u8Mask, MS_U8 u8Miu);
# 747 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_MVD_W(MS_U8 u8Mask, MS_U8 u8Miu);
# 756 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_MVD_RW(MS_U8 u8Mask, MS_U8 u8Miu);
# 765 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_Mask_Req_AUDIO_RW(MS_U8 u8Mask, MS_U8 u8Miu);
# 774 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_MaskReq(MS_U8 u8Miu, eMIUClientID eClientID);
# 783 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_UnMaskReq(MS_U8 u8Miu, eMIUClientID eClientID);
# 792 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_InitCounter(void);
# 801 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_VOP_SwitchMIU(MS_U8 u8MiuID);
# 810 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
void MDrv_MIU_PrintMIUProtectInfo(void);
# 819 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_U8* MDrv_MIU_GetDefaultClientID_KernelProtect(void);
# 828 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_U16 MDrv_MIU_GetBusWidth(void);
# 837 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_SetSsc(MS_U16 u16Fmodulation, MS_U16 u16FDeviation,MS_BOOL bEnable);
# 846 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_SetSscValue(MS_U8 u8MiuDev, MS_U16 u16Fmodulation, MS_U16 u16FDeviation, MS_BOOL bEnable);
# 855 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_GetClientID(euMIUClientIDTYPE client_name, stMIUClientID_t *client_read, stMIUClientID_t *client_write);
# 864 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_Mask(euMIUClientIDTYPE client_name);
# 873 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_Unmask(euMIUClientIDTYPE client_name);
# 882 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_MaskByPort(euMIUClientIDTYPE client_name,stMIUClientID_t *ByPort);
# 891 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_UnmaskByPort(euMIUClientIDTYPE client_name,stMIUClientID_t *ByPort);
# 900 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_SetIOMapBase(void);
# 909 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_ProtectAlign(MS_U32 *u32PageShift);
# 918 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_Dram_Size(MS_U8 MiuID, MS_U8 DramSize);
# 927 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_Dram_ReadSize(MS_U8 MiuID, MIU_DDR_SIZE *pDramSize);
# 936 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_U8 MDrv_MIU_ClinetNumber(MS_U8 u8Blockx);
# 945 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_Protect( MS_U8 u8Blockx, MS_U8 *pu8ProtectId, MS_PHY phyStart, MS_PHY phyEnd, MS_BOOL bSetFlag );

MS_BOOL MDrv_MIU_ProtectEx( MS_U8 u8Blockx, MS_U32 *pu32ProtectId, MS_PHY phy64Start, MS_PHY phy64End, MS_BOOL bSetFlag );
# 956 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_IsSupportMIU1(void);
# 965 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_SelMIU(eMIUClientID eClientID, eMIU_SelType eType);
# 974 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_GetClientInfo(MS_U8 u8MiuDev, eMIUClientID eClientID, MIU_ClientInfo *pInfo);
# 983 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_GetProtectInfo(MS_U8 u8MiuDev, MIU_PortectInfo *pInfo);
# 992 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_SetGroupPriority(MS_U8 u8MiuDev, MIU_GroupPriority sPriority);
# 1001 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_SetHPriorityMask(MS_U8 u8MiuDev, eMIUClientID eClientID, MS_BOOL bMask);
# 1010 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_GetLibVer(const MSIF_Version **ppVersion);
# 1019 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_EnableScramble(MS_BOOL bEnable);
# 1028 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_IsScrambleEnabled(void);
# 1037 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_GetLoading(MS_U8 u8MiuDev, MS_U32 *Loading);
# 1046 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_Init(void);
# 1055 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_U32 MDrv_MIU_SetPowerState(EN_POWER_MODE u16PowerState);
# 1064 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
MS_BOOL MDrv_MIU_GetClientWidth(MS_U8 u8MiuDevi, eMIUClientID eClientID, eMIU_ClientWidth *pClientWidth);

MS_BOOL MDrv_MIU_GetDramType(MIU_ID eMiu, MIU_DDR_TYPE* pType);

#ifdef _MIU_INTERNEL_USE
# 1077 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU.h"
DLL_PUBLIC MS_BOOL MDrv_MIU_GetLoading(MS_U8 u8MiuDev, MS_U32 *Loading);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drv_gop_sc.h"
#ifndef DRV_GOP_SC_H
#define DRV_GOP_SC_H 

#ifdef DRV_GOP_SC_C
#define INTERFACE 
#else
#define INTERFACE extern
#endif


typedef enum
{
    EN_DST_FB=0,
    EN_DST_FBL=1,
    EN_DST_NUM,
}DRV_GOP_SC_Dst;


typedef struct
{

    MS_U16 u16VttIn;
    MS_U16 u16HttIn;
    MS_U16 u16HdeIn;
    MS_U16 u16VdeIn;

    MS_U16 u16Vde_St;
    MS_U16 u16Hde_St;

}DRV_GOP_SC_InCfg;

typedef struct
{

    MS_U16 u16VttOut;
    MS_U16 u16HttOut;
    MS_U16 u16HdeOut;
    MS_U16 u16VdeOut;

    MS_BOOL bInterlace;

}DRV_GOP_SC_OutCfg;

typedef struct
{
    MS_U8 u8MuxSel;
    MS_U8 u8TVSystem;
    DRV_GOP_SC_Dst stDst;

    DRV_GOP_SC_InCfg InCfg;
    DRV_GOP_SC_OutCfg OutCfg;

}DRV_GOP_SC_INFO;


typedef struct
{
    MS_U16 u16ValidV;
    MS_U16 u16ValidH;
    MS_U8 u8SkipV;
    MS_U8 u8SkipH;

    MS_U16 u16VFacInt;
    MS_U16 u16VFacFrac;
    MS_U16 u16VE_RefY;
    MS_U16 u16VE_RefX;

    MS_U32 u32IDclk;
    MS_U32 u32ODclk;

}GOP_SC_REF;

MS_BOOL MDrv_GOP_SC_Init(void);
VOID MDrv_GOP_SC_Init_riu_base( MS_VIRT vriu_base );
MS_BOOL MDrv_GOP_SC_MuxSel(MS_U8 u8Source);
VOID MDrv_GOP_SC_SetParams(DRV_GOP_SC_InCfg *pInCfg,DRV_GOP_SC_OutCfg *pOutCfg,MS_U8 u8TvSys);
MS_BOOL MDrv_GOP_SC_SetCfg(VOID);
MS_BOOL MDrv_GOP_SC_SetDst(DRV_GOP_SC_Dst stDst);
MS_BOOL MDrv_GOP_SC_SetLock(VOID);
MS_BOOL MDrv_GOP_SC_SetFPLL_Enable(MS_BOOL bEnable);

#undef INTERFACE

#endif
# 137 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC.h"
#ifndef _API_DAC_H_
#define _API_DAC_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C" {
#endif
#include "UFO.h"






#ifndef SYMBOL_WEAK
#define SYMBOL_WEAK __attribute__((weak))
#endif

#define MSIF_DAC_LIB_CODE {'D','A','C','_'}
#define MSIF_DAC_LIBVER {'0','0'}
#define MSIF_DAC_BUILDNUM {'2','7'}
#define MSIF_DAC_CHANGELIST {'0','0','6','5','8','6','0','4'}

#define DAC_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DAC_LIB_CODE , \
    MSIF_DAC_LIBVER , \
    MSIF_DAC_BUILDNUM , \
    MSIF_DAC_CHANGELIST, \
    MSIF_OS





typedef enum
{
    E_APIDAC_FAIL = 0,
    E_APIDAC_OK = 1,
    E_APIDAC_GET_BASEADDR_FAIL,
    E_APIDAC_OBTAIN_MUTEX_FAIL,
} APIDAC_Result;



typedef enum
{
    E_RES_720x480I_60Hz = 0,
    E_RES_720x480P_60Hz,
    E_RES_720x576I_50Hz,
    E_RES_720x576P_50Hz,
    E_RES_1280x720P_50Hz,
    E_RES_1280x720P_60Hz,
    E_RES_1920x1080I_50Hz,
    E_RES_1920x1080I_60Hz,
    E_RES_1920x1080P_50Hz,
    E_RES_1920x1080P_60Hz,
    E_RES_1920x1080P_30Hz,
    E_RES_1920x1080P_25Hz,
    E_RES_1920x1080P_24Hz,
    E_RES_640x480P_60Hz,
    E_RES_1920x2205P_24Hz,
    E_RES_1280x1470P_50Hz,
    E_RES_1280x1470P_60Hz,
    E_RES_3840x2160P_24Hz,
    E_RES_3840x2160P_25Hz,
    E_RES_3840x2160P_30Hz,
    E_RES_3840x2160P_50Hz,
    E_RES_3840x2160P_60Hz,
    E_RES_4096x2160P_24Hz,
    E_RES_4096x2160P_25Hz,
    E_RES_4096x2160P_30Hz,
    E_RES_4096x2160P_50Hz,
    E_RES_4096x2160P_60Hz,
    E_RES_3840x2160P420_30Hz,
    E_RES_3840x2160P420_50Hz,
    E_RES_3840x2160P420_60Hz,
    E_RES_4096x2160P420_30Hz,
    E_RES_4096x2160P420_50Hz,
    E_RES_4096x2160P420_60Hz,
    E_RES_1600x1200P_60Hz,
    E_RES_1440x900P_60Hz,
    E_RES_1280x1024P_60Hz,
    E_RES_1024x768P_60Hz,
    E_RES_VGA_START = 0x40,
    E_RES_VGA640x480P_60Hz = E_RES_VGA_START,
    E_RES_TTL_START = 0xC0,
    E_RES_TTL480X272P_60Hz = E_RES_TTL_START,
} E_OUTPUT_VIDEO_TIMING_TYPE;


typedef enum
{
    E_COLOR_8_BIT,
    E_COLOR_10_BIT,
    E_COLOR_12_BIT,
}E_OUTPUT_BIT_TYPE;

typedef enum
{
    E_DAC_TO_HDGEN = 0,
    E_DAC_TO_VE = 1,
    E_DAC_TO_VE_YPBPR =3
} E_DAC_OUTPUT_TYPE;

typedef enum
{
    E_DAC_R_G_B = 0,
    E_DAC_R_B_G = 1,
    E_DAC_G_R_B = 2,
    E_DAC_B_G_R = 4,
    E_DAC_G_B_R = 5,
    E_DAC_B_R_G = 6,
    E_DAC_R_R_R = 7,
} E_DAC_SWAP_SEL;

typedef enum
{
    E_DAC_OUTPUT_LEVEL_HIGH = 0,
    E_DAC_OUTPUT_LEVEL_LOW = 1
} E_DAC_MAX_OUTPUT_LEVEL;

typedef enum
{
    E_DAC_SD_OFF =0,
    E_DAC_SD_X = 1,
    E_DAC_SD_Y = 2,
    E_DAC_SD_XY = 3,
    E_DAC_SD_C = 4,
    E_DAC_SD_XC = 5,
    E_DAC_SD_YC = 6,
    E_DAC_SD_XYC = 7,
}E_DAC_SD_ENABLE_CTRL;

typedef enum
{
    E_DAC_HD_OFF =0,
    E_DAC_HD_R = 1,
    E_DAC_HD_G = 2,
    E_DAC_HD_RG = 3,
    E_DAC_HD_B = 4,
    E_DAC_HD_RB = 5,
    E_DAC_HD_GB = 6,
    E_DAC_HD_RGB = 7,

}E_DAC_HD_ENABLE_CTRL;

typedef enum
{
    E_DAC_DETECT_PLUGIN,
    E_DAC_DETECT_PLUGOUT,
}E_DAC_DETECT_TYPE;

typedef enum
{
    E_DAC_DETECT_HD,
    E_DAC_DETECT_SD,
}E_DAC_DETECT;

typedef enum
{
    E_DAC_VIDEO_VBI_WSS_START = 0x0000,

    E_DAC_VIDEO_VBI_WSS_AS_4x3_FULL,
    E_DAC_VIDEO_VBI_WSS_AS_14x9_LETTERBOX_CENTER,
    E_DAC_VIDEO_VBI_WSS_AS_14x9_LETTERBOX_TOP,
    E_DAC_VIDEO_VBI_WSS_AS_16x9_LETTERBOX_CENTER,
    E_DAC_VIDEO_VBI_WSS_AS_16x9_LETTERBOX_TOP,
    E_DAC_VIDEO_VBI_WSS_AS_ABOVE16x9_LETTERBOX_CENTER,
    E_DAC_VIDEO_VBI_WSS_AS_14x9_FULL_CENTER,
    E_DAC_VIDEO_VBI_WSS_AS_16x9_ANAMORPHIC,

    E_DAC_VIDEO_VBI_WSS_CGMS_COPYRIGHT,
    E_DAC_VIDEO_VBI_WSS_CGMS_COPY_PROTECTION,

    E_DAC_VIDEO_VBI_WSS_CGMS_COPY_FREELY,
    E_DAC_VIDEO_VBI_WSS_CGMS_COPY_ONCE,
    E_DAC_VIDEO_VBI_WSS_CGMS_COPY_NO_MORE,
    E_DAC_VIDEO_VBI_WSS_CGMS_COPY_NEVER,

    E_DAC_VIDEO_VBI_WSS525_A_START = 0x0100,

    E_DAC_VIDEO_VBI_WSS525_A_AS_4x3_NORMAL,
    E_DAC_VIDEO_VBI_WSS525_A_AS_4x3_LETTERBOX,
    E_DAC_VIDEO_VBI_WSS525_A_AS_16x9_ANAMORPHIC,
    E_DAC_VIDEO_VBI_WSS525_A_AS_16x9_NORMAL = E_DAC_VIDEO_VBI_WSS525_A_AS_16x9_ANAMORPHIC,
    E_DAC_VIDEO_VBI_WSS525_A_AS_RESERVED,

    E_DAC_VIDEO_VBI_WSS525_A_CGMS_COPY_FREELY,
    E_DAC_VIDEO_VBI_WSS525_A_CGMS_COPY_ONCE,
    E_DAC_VIDEO_VBI_WSS525_A_CGMS_COPY_NO_MORE,
    E_DAC_VIDEO_VBI_WSS525_A_CGMS_COPY_NEVER,

    E_DAC_VIDEO_VBI_WSS525_A_APS_NO_APS,
    E_DAC_VIDEO_VBI_WSS525_A_APS_PSP_CS_OFF,
    E_DAC_VIDEO_VBI_WSS525_A_APS_PSP_2_LINE_CS,
    E_DAC_VIDEO_VBI_WSS525_A_APS_PSP_4_LINE_CS,
} E_DAC_VIDEO_VBI_WSS_TYPE;

typedef struct __attribute__((__packed__))
{

    MS_U32 u32DAC_SetWSS_version;
    MS_U32 u32DAC_SetWSS_Length;

    E_OUTPUT_VIDEO_TIMING_TYPE eOutput_Timing;
    E_DAC_VIDEO_VBI_WSS_TYPE eVBI_WSS_Type;

} DAC_SETWSS_INFO;

typedef struct __attribute__((__packed__))
{
    MS_U32 u32Type;
}APIDAC_OUTPUT_TYPE;

typedef struct __attribute__((__packed__))
{
    APIDAC_OUTPUT_TYPE eSupportOutputType;
} DAC_ApiInfo;

typedef struct __attribute__((__packed__))
{
    MS_BOOL bDac_Initialized;
    MS_BOOL bDac_VE_enabled;
    MS_BOOL bDac_YPbPr_enabled;
} DAC_ApiStatus;

typedef enum
{
    E_DAC_POWER_SUSPEND = 1,
    E_DAC_POWER_RESUME = 2,
    E_DAC_POWER_MECHANICAL = 3,
    E_DAC_POWER_SOFT_OFF = 4,
} E_DAC_POWER_MODE;
# 397 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC.h"
APIDAC_Result MApi_DAC_GetLibVer(const MSIF_Version **ppVersion);





const DAC_ApiInfo * MApi_DAC_GetInfo(void);






MS_BOOL MApi_DAC_GetStatus(DAC_ApiStatus *pDacStatus);

#ifdef UFO_XC_GETOUTPUTINTELACETIMING




MS_BOOL SYMBOL_WEAK MApi_DAC_GetOutputInterlaceTiming(void);
#endif





MS_BOOL MApi_DAC_SetDbgLevel(MS_U16 u16DbgSwitch);





MS_BOOL MApi_DAC_Init(void);






void MApi_DAC_Enable(MS_BOOL bEnable, MS_BOOL bIsYPbPr);






void MApi_DAC_SetClkInv(MS_BOOL bEnable, MS_BOOL bIsYPbPr);





void MApi_DAC_SetYPbPrOutputTiming(E_OUTPUT_VIDEO_TIMING_TYPE eTiming);






void MApi_DAC_SetOutputSource(E_DAC_OUTPUT_TYPE enOutputType, MS_BOOL bIsYPbPr);






void MApi_DAC_SetOutputLevel(E_DAC_MAX_OUTPUT_LEVEL enLevel, MS_BOOL bIsYPbPr);






void MApi_DAC_SetOutputSwapSel(E_DAC_SWAP_SEL enSwap,MS_BOOL bIsYPbPr);





void MApi_DAC_OnOffSD(E_DAC_SD_ENABLE_CTRL enBit);





E_DAC_SD_ENABLE_CTRL SYMBOL_WEAK MApi_DAC_GetSDStatus(void);





void MApi_DAC_OnOffHD(E_DAC_HD_ENABLE_CTRL enBit);





E_DAC_HD_ENABLE_CTRL SYMBOL_WEAK MApi_DAC_GetHDStatus(void);






void MApi_DAC_ClkSel(E_OUTPUT_VIDEO_TIMING_TYPE eTiming, E_OUTPUT_BIT_TYPE ebits);

void MApi_DAC_DumpTable(MS_U8 *pDACTable, MS_U8 u8DACtype);

void MApi_DAC_Exit(void);





void MApi_DAC_SetIHalfOutput(MS_BOOL bEnable, MS_BOOL bIsYPbPr);





void MApi_DAC_SetQuartOutput(MS_BOOL bEnable,MS_BOOL bIsYPbPr);
# 528 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC.h"
void MApi_DAC_SetDacState(MS_BOOL bEnabled, MS_BOOL bIsYPbPr);
# 537 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC.h"
MS_BOOL MApi_DAC_HotPlugDetect(E_DAC_DETECT SelDAC,E_DAC_DETECT_TYPE DetectType, MS_BOOL *State);

MS_U32 Mapi_DAC_SetPowerState(E_DAC_POWER_MODE ePowerState);







MS_BOOL SYMBOL_WEAK MApi_DAC_SetWSSOnOff(MS_BOOL bEnable, MS_BOOL bIsYPbPr);
# 556 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC.h"
MS_BOOL SYMBOL_WEAK MApi_DAC_GetWSSStatus(MS_BOOL bIsYPbPr, MS_BOOL *pEnable, DAC_SETWSS_INFO *pSetWSS_Data);






MS_BOOL SYMBOL_WEAK MApi_DAC_ResetWSSData(MS_BOOL bIsYPbPr);
# 572 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC.h"
MS_BOOL SYMBOL_WEAK MApi_DAC_SetWSSOutput(MS_BOOL bEnable, MS_BOOL bIsYPbPr, DAC_SETWSS_INFO SetWSS_Data);
# 581 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDAC.h"
MS_BOOL SYMBOL_WEAK MApi_DAC_EnableICT(MS_BOOL bEnable);






void MApi_DAC_SetVGAHsyncVsync(MS_BOOL bEnable);



#ifdef __cplusplus
}
#endif

#endif
# 95 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/ULog.h"
#ifndef __ULOG_H__
#define __ULOG_H__ 

#ifdef __cplusplus
extern "C" {
#endif

#if (defined CONFIG_UTOPIA_TEE || defined CONFIG_MBOOT || defined CONFIG_NOS || defined MSOS_TYPE_OPTEE )






#define ULOGI(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGW(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGD(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGE(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGF(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)

#elif (defined CONFIG_ECOS)

#ifdef MS_DEBUG
#define ULOGI(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGW(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGD(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGE(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGF(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#else
#define ULOGI(tag,fmt,...) 
#define ULOGW(tag,fmt,...) 
#define ULOGD(tag,fmt,...) 
#define ULOGE(tag,fmt,...) 
#define ULOGF(tag,fmt,...) 
#endif

#elif (defined MSOS_TYPE_LINUX_KERNEL)

#define ULOGI(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGW(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGD(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGE(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)
#define ULOGF(tag,fmt,...) printf("[Utopia][" tag "]: " fmt, ##__VA_ARGS__)

#elif (defined CONFIG_MLOG)
#include "MLog.h"






#define ULOGI(tag,fmt,...) MLOGI("Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGW(tag,fmt,...) MLOGW("Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGD(tag,fmt,...) MLOGD("Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGE(tag,fmt,...) MLOGE("Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGF(tag,fmt,...) MLOGF("Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#elif (defined ANDROID)
#include <cutils/log.h>
#ifdef ALOG






#define ULOGI(tag,fmt,...) ALOG(LOG_INFO, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGW(tag,fmt,...) ALOG(LOG_WARN, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGD(tag,fmt,...) ALOG(LOG_DEBUG, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGE(tag,fmt,...) ALOG(LOG_ERROR, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGF(tag,fmt,...) ALOG(LOG_FATAL, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#else






#define ULOGI(tag,fmt,...) LOG(LOG_INFO, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGW(tag,fmt,...) LOG(LOG_WARN, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGD(tag,fmt,...) LOG(LOG_DEBUG, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGE(tag,fmt,...) LOG(LOG_ERROR, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#define ULOGF(tag,fmt,...) LOG(LOG_FATAL, "Utopia", "[" tag "]" fmt, ##__VA_ARGS__)
#endif
#else






#define ULOGI(tag,fmt,...) {}
#define ULOGW(tag,fmt,...) {}
#define ULOGD(tag,fmt,...) {}
#define ULOGE(tag,fmt,...) {}
#define ULOGF(tag,fmt,...) {}
#endif

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_v2.h"
#ifndef _DMX_H_
#define _DMX_H_ 

#include "MsDevice.h"

#ifdef __cplusplus
extern "C"
{
#endif


typedef enum {


    MApi_CMD_DMX_Init = 0,
    MApi_CMD_DMX_Exit = 1,
    MApi_CMD_DMX_ForceExit = 2,
    MApi_CMD_DMX_Suspend = 3,
    MApi_CMD_DMX_Resume = 4,
    MApi_CMD_DMX_ChkFwAlive = 5,
    MApi_CMD_DMX_Reset = 6,
    MApi_CMD_DMX_SetFwMiuDataAddr = 7,
    MApi_CMD_DMX_WProtectEnable = 8,
    MApi_CMD_DMX_OrzWProtectEnable = 9,

    MApi_CMD_DMX_ReadDropCount = 10,
    MApi_CMD_DMX_SetPowerState = 11,
    MApi_CMD_DMX_SetOwner = 12,
    MApi_CMD_DMX_GetCap = 13,

    MApi_CMD_DMX_SetBurstLen = 14,


    MApi_CMD_DMX_Flow = 15,
    MApi_CMD_DMX_Flow_ParlInvert = 16,
    MApi_CMD_DMX_Flow_ENABLE = 17,


    MApi_CMD_DMX_GetPcr = 18,
    MApi_CMD_DMX_Stc_Get = 19,
    MApi_CMD_DMX_Stc_Set = 20,
    MApi_CMD_DMX_Stc_UpdateCtrl = 21,
    MApi_CMD_DMX_Stc_SetOffset = 22,
    MApi_CMD_DMX_Stc_ClkAdjust = 23,


    MApi_CMD_DMX_Open = 24,
    MApi_CMD_DMX_Close = 25,
    MApi_CMD_DMX_Start = 26,
    MApi_CMD_DMX_Stop = 27,
    MApi_CMD_DMX_Info = 28,
    MApi_CMD_DMX_Pid = 29,
    MApi_CMD_DMX_IsStart = 30,
    MApi_CMD_DMX_CopyData = 31,
    MApi_CMD_DMX_Proc = 32,
    MApi_CMD_DMX_ChangeFltSrc = 33,
    MApi_CMD_DMX_GetOwner = 34,

    MApi_CMD_DMX_GetPESScmbSts = 35,
    MApi_CMD_DMX_GetTsScmbSts = 36,


    MApi_CMD_DMX_Sec_Reset = 37,
    MApi_CMD_DMX_Sec_ReadAddr = 38,
    MApi_CMD_DMX_Sec_GetWriteAddr = 39,
    MApi_CMD_DMX_Sec_GetStartAddr = 40,
    MApi_CMD_DMX_Sec_GetEndAddr = 41,
    MApi_CMD_DMX_Sec_SetPattern = 42,


    MApi_CMD_DMX_GetTTXWrite = 43,
    MApi_CMD_DMX_GetAccess = 44,
    MApi_CMD_DMX_ReleaseAccess = 45,


    MApi_CMD_DMX_AVFIFO_Reset = 46,
    MApi_CMD_DMX_AVFIFO_Status = 47,
    MApi_CMD_DMX_RemoveDupAVFifoPkt = 48,
    MApi_CMD_DMX_AUBD_Enable = 49,


    MApi_CMD_DMX_FI_PlayStamp = 50,
    MApi_CMD_DMX_FI_TimestampMode = 51,
    MApi_CMD_DMX_FI_SetPlaybackStampClk = 52,


    MApi_CMD_DMX_Pvr_Open = 53,
    MApi_CMD_DMX_Pvr_Close = 54,
    MApi_CMD_DMX_Pvr_PidOpen = 55,
    MApi_CMD_DMX_Pvr_PidClose = 56,
    MApi_CMD_DMX_Pvr_Start = 57,
    MApi_CMD_DMX_Pvr_Stop = 58,
    MApi_CMD_DMX_Pvr_GetWriteAddr = 59,
    MApi_CMD_DMX_Pvr_SetPktMode = 60,
    MApi_CMD_DMX_Pvr_SetRecordStamp = 61,
    MApi_CMD_DMX_Pvr_GetRecordStamp = 62,
    MApi_CMD_DMX_Pvr_SetMobfKey = 63,
    MApi_CMD_DMX_Pvr_SetRecordStampClk = 64,


    MApi_CMD_DMX_FI_Start = 65,
    MApi_CMD_DMX_FI_Stop = 66,
    MApi_CMD_DMX_FI_Info = 67,
    MApi_CMD_DMX_FI_Pause = 68,
    MApi_CMD_DMX_FI_Resume = 69,
    MApi_CMD_DMX_FI_IsIdle = 70,
    MApi_CMD_DMX_FI_IsBusy = 71,
    MApi_CMD_DMX_FI_IsPause = 72,
    MApi_CMD_DMX_FI_CmdQReset = 73,
    MApi_CMD_DMX_FI_CmdQGetEmptyNum = 74,
    MApi_CMD_DMX_FI_BypassFileTimestamp = 75,
    MApi_CMD_DMX_FI_CmdQGetFifoLevel = 76,
    MApi_CMD_DMX_FI_GetFileTimeStamp = 77,
    MApi_CMD_DMX_FI_GetReadAddr = 78,
    MApi_CMD_DMX_FI_SetMobfKey = 79,


    MApi_CMD_DMX_MMFI_IsIdle = 80,
    MApi_CMD_DMX_MMFI_IsBusy = 81,
    MApi_CMD_DMX_MMFI_CmdQReset = 82,
    MApi_CMD_DMX_MMFI_GetEmptyNum = 83,
    MApi_CMD_DMX_MMFI_Start = 84,
    MApi_CMD_DMX_MMFI_GetFileTimeStamp = 85,

    MApi_CMD_DMX_MMFI_PidOpen = 86,
    MApi_CMD_DMX_MMFI_PidClose = 87,
    MApi_CMD_DMX_MMFI_GetFifoLevel = 88,
    MApi_CMD_DMX_MMFI_PlayStamp_Set = 89,
    MApi_CMD_DMX_MMFI_PlayStamp_Get = 90,
    MApi_CMD_DMX_MMFI_SetTimeStampClk = 91,
    MApi_CMD_DMX_MMFI_RemoveDupAVPkt = 92,
    MApi_CMD_DMX_MMFI_SetMOBFKey = 93,


    MApi_CMD_DMX_SetDbgLevel = 94,
    MApi_CMD_DMX_GetFwVer = 95,

    MApi_CMD_DMX_CmdRun = 96,


    MApi_CMD_DMX_SetFw = 97,
    MApi_CMD_DMX_SetHK = 98,
    MApi_CMD_DMX_Init_1_0 = 99,
    MApi_CMD_DMX_TSPInit_1_0 = 100,
    MApi_CMD_DMX_ReleseHWSemp = 101,
    MApi_CMD_DMX_GetLibVer = 102,
    MApi_CMD_DMX_STC64ModeEnable = 103,


    MApi_CMD_DMX_SetPktMode = 104,
    MApi_CMD_DMX_SetMergeStrSync = 105,

    MApi_CMD_DMX_PVR_Flow = 106,


    MApi_CMD_DMX_TSO_FileInfo = 107,
    MApi_CMD_DMX_TSO_FileIsIdle = 108,
    MApi_CMD_DMX_TSO_FileGetCmdQEmptyNum = 109,
    MApi_CMD_DMX_TSO_FileStart = 110,
    MApi_CMD_DMX_TSO_FileStop = 111,
    MApi_CMD_DMX_TSO_FilePlayStamp = 112,
    MApi_CMD_DMX_TSO_FileGetTimeStamp = 113,
    MApi_CMD_DMX_TSO_FileBypassStamp = 114,
    MApi_CMD_DMX_TSO_FileTimeStampEnable = 115,


    MApi_CMD_DMX_DBG_GET_DISCONCNT = 116,
    MApi_CMD_DMX_DBG_GET_DROPPKTCNT = 117,
    MApi_CMD_DMX_DBG_GET_LOCKPKTCNT = 118,
    MApi_CMD_DMX_DBG_GET_AVPKTCNT = 119,

    MApi_CMD_DMX_GET_SECTEI_PKTCNT = 120,
    MApi_CMD_DMX_RESET_SECTEI_PKTCNT = 121,
    MApi_CMD_DMX_GET_SECDISCON_PKTCNT = 122,
    MApi_CMD_DMX_RESET_SECDISCON_PKTCNT = 123,


    MApi_CMD_DMX_Pvr_CBSize = 124,
    MApi_CMD_DMX_Pvr_SetCaMode = 125,
    MApi_CMD_DMX_Pvr_IsStart = 126,


    MApi_CMD_DMX_TSO_OutClk = 127,
    MApi_CMD_DMX_STCEng_Sel = 128,
    MApi_CMD_DMX_TSO_LocStrId = 129,
    MApi_CMD_DMX_TSO_CmdQReset = 130,
    MApi_CMD_DMX_GetFltScmbSts = 131,


    MApi_CMD_DMX_FQ_SetFltRushPass = 132,
    MApi_CMD_DMX_FQ_Init = 133,
    MApi_CMD_DMX_FQ_Exit = 134,
    MApi_CMD_DMX_FQ_RushEnable = 135,
    MApi_CMD_DMX_FQ_SkipRushData = 136,
    MApi_CMD_DMX_FQ_Configure = 137,
    MApi_CMD_DMX_FQ_SetRushAddr = 138,
    MApi_CMD_DMX_FQ_ReadGet = 139,
    MApi_CMD_DMX_FQ_WriteGet = 140,


    MApi_CMD_DMX_TSO_SvqBufSet = 150,
    MApi_CMD_DMX_TSO_InputCfg = 151,
    MApi_CMD_DMX_TSO_OutputCfg = 152,
    MApi_CMD_DMX_TSO_OutputEn = 153,
    MApi_CMD_DMX_TSO_PidOpen = 154,
    MApi_CMD_DMX_TSO_PidClose = 155,
    MApi_CMD_DMX_TSO_FI_GetReadAddr = 156,
    MApi_CMD_DMX_TSO_Configure = 157,


    MApi_CMD_DMX_MStr_SyncBy = 170,


    MApi_CMD_DMX_WaitTspCbEvt = 190,


    MApi_CMD_DMX_GetIntCnt = 200,
    MApi_CMD_DMX_DropEn = 201,
    MApi_CMD_DMX_TeiRmErrPkt = 202,
    MApi_CMD_DMX_SetFwDbgParam = 203,
    MApi_CMD_DMX_PVR_MOBFEn = 204,
    MApi_CMD_DMX_Get_DbgPortInfo = 205,
    MApi_CMD_DMX_Open_MultiFlt = 206,
    MApi_CMD_DMX_Pvr_Pause = 207,
    MApi_CMD_DMX_Pvr_Pid = 208,
    MApi_CMD_DMX_OutPadCfg = 209,
    MApi_CMD_DMX_GetCapEx = 210,
    MApi_CMD_DMX_TsOutPhase = 211,
    MApi_CMD_DMX_FlowDscmbEng = 212,
    MApi_CMD_DMX_DropScmbPkt = 213,
    MApi_CMD_DMX_LiveAB_Enable = 214,
    MApi_CMD_DMX_IsLiveAB_Enable = 215,


    MApi_CMD_DMX_MMFI_Info = 220,
    MApi_CMD_DMX_MMFI_BypassStamp = 221,
    MApi_CMD_DMX_MMFI_Timestamp_En = 222,


    MApi_CMD_DMX_File_PVR_PidOpen = 230,
    MApi_CMD_DMX_File_PVR_PidClose = 231,
    MApi_CMD_DMX_File_PVR_Start = 232,
    MApi_CMD_DMX_File_PVR_Stop = 233,


    MApi_CMD_DMX_RES_ALLOC = 240,
    MApi_CMD_DMX_RES_FREE = 241,
    MApi_CMD_DMX_PCR_GET_MAP_STC = 242,




    MApi_CMD_DMX_TSPInit_GetConfig = 250,
    MApi_CMD_DMX_AVFIFO_BypassTsHd = 251,


    MApi_CMD_DMX_FI_Eng_Info = 267,
    MApi_CMD_DMX_Get_PipeId = 268,

    MApi_CMD_DMX_Open_Ex = 269,
    MApi_CMD_DMX_Info_Ex = 270,



    MApi_CMD_DMX_TSIO_Service_SetDMAoutVC = 300,
    MApi_CMD_DMX_TSIO_Service_SetDestination = 301,
    MApi_CMD_DMX_TSIO_Service_SetDMAinVC = 302,
    MApi_CMD_DMX_TSIO_Service_SetLocdecKey = 303,
    MApi_CMD_DMX_TSIO_Service_PidOpen = 304,
    MApi_CMD_DMX_TSIO_Service_PidClose = 305,
    MApi_CMD_DMX_TSIO_Service_Alloc = 306,
    MApi_CMD_DMX_TSIO_Service_Free = 307,
    MApi_CMD_DMX_TSIO_RegisterIntCb = 308,
    MApi_CMD_DMX_TSIO_Init = 309,
    MApi_CMD_DMX_TSIO_Cmd = 310,
    MApi_CMD_DMX_TSIO_Exit = 311,
    MApi_CMD_DMX_TSIO_CC = 312,
    MApi_CMD_DMX_TSIO_GetInfo = 313,
    MApi_CMD_DMX_TSIO_Service_DMAinVC_Start = 314,
    MApi_CMD_DMX_TSIO_Service_LocdecKeyEnable = 315,
    MApi_CMD_DMX_TSIO_Service_DMAout_WriteGet = 316,
    MApi_CMD_DMX_TSIO_Open = 317,
    MApi_CMD_DMX_TSIO_Close = 318,
    MApi_CMD_DMX_TSIO_WaitCbEvt = 319,
    MApi_CMD_DMX_TSIO_Service_DMAin_PidOpen = 320,
    MApi_CMD_DMX_TSIO_Service_DMAin_PidClose = 321,
} eDmxIoctlOpt;
# 400 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_v2.h"
typedef enum
{
    DMX_FLOW_OUT_LIVE0 = 0,
    DMX_FLOW_OUT_LIVE1 = 1,
    DMX_FLOW_OUT_LIVE2 = 2,
    DMX_FLOW_OUT_LIVE3 = 3,

    DMX_FLOW_OUT_FILE0 = 4,
    DMX_FLOW_OUT_FILE1 = 5,
    DMX_FLOW_OUT_FILE2 = 6,
    DMX_FLOW_OUT_FILE3 = 7,

    DMX_FLOW_OUT_PVR0 = 8,
    DMX_FLOW_OUT_PVR1 = 9,
    DMX_FLOW_OUT_PVR2 = 10,
    DMX_FLOW_OUT_PVR3 = 11,
    DMX_FLOW_OUT_PVR4 = 12,
    DMX_FLOW_OUT_PVR5 = 13,
    DMX_FLOW_OUT_PVRCB = 14,

    DMX_FLOW_OUT_MMFIAU = 15,
    DMX_FLOW_OUT_MMFI0 = DMX_FLOW_OUT_MMFIAU,
    DMX_FLOW_OUT_MMFIV3D = 16,
    DMX_FLOW_OUT_MMFI1 = DMX_FLOW_OUT_MMFIV3D,

} DMX_FLOW_OUTPUT;

typedef struct DLL_PACKED _DMX_CAP_PARAM
{
    MS_U32 u32Res;
    DMX_QUERY_TYPE Quetype;
    void* pdata;

}DMX_CAP_PARAM, *PDMX_CAP_PARAM;

typedef struct DLL_PACKED _DMX_CAP_EX_PARAM
{
    MS_U32 u32Res;
    MS_S32 InputStrLen;
    MS_S32 OutputSize;
    char* StrQuetype;
    void* pdata;
}DMX_CAP_EX_PARAM, *PDMX_CAP_EX_PARAM;

typedef struct DLL_PACKED _DMX_FLOW_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32CAEngSel;
    DMX_FLOW DmxFlow;
    DMX_FLOW_INPUT DmxFlowInput;
    MS_BOOL bClkInv;
    MS_BOOL bExtSync;
    MS_BOOL bParallel;
    MS_BOOL bSet;

}DMX_FLOW_PARAM, *PDMX_FLOW_PARAM;

typedef struct DLL_PACKED _DMX_PVRFLOW_PARAM
{
    MS_U32 u32Res;
    DMX_PVR_ENG eEng;
    DMX_TSIF eSrcTSIf;
    MS_BOOL bSet;
    MS_BOOL bDscmbRec;

}DMX_PVRFLOWPARAM, *PDMX_PVRFLOW_PARAM;

typedef struct DLL_PACKED _DMX_FLT_TYPE_PARAM
{
    MS_U32 u32Res;
    DMX_FILTER_TYPE DmxFltType;
    MS_U32 u32DmxId;

}DMX_FLT_TYPE_PARAM, *PDMX_FLT_TYPE_PARAM;

typedef struct DLL_PACKED _DMX_FLT_INFO_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32DmxId;
    DMX_Flt_info* pDmxFltInfo;
    DMX_FILTER_TYPE* pDmxFltType;
    MS_BOOL bSet;

}DMX_FLT_INFO_PARAM, *PDMX_FLT_INFO_PARAM;

typedef struct DLL_PACKED _DMX_FLT_INFO_PARAM_Ex
{
    MS_U32 u32Res;
    MS_U32 u32DmxId;
    DMX_Flt_info_Ex* pDmxFltInfo;
}DMX_FLT_INFO_PARAM_Ex, *PDMX_FLT_INFO_PARAM_Ex;

typedef struct DLL_PACKED _DMX_FLT_COPYDATA_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32DmxId;
    MS_U32 u32BufSize;
    MS_U32 u32ActualSize;
    MS_U32 u32RmnSize;
    DMX_CheckCb pfCheckCB;
    MS_U8* pu8Buf;

}DMX_FLT_COPY_PARAM, *PDMX_FLT_COPY_PARAM;

typedef struct DLL_PACKED _DMX_FLT_EVENT_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32DmxId;
    DMX_EVENT* pEvent;

}DMX_FLT_EVENT_PARAM, *PDMX_FLT_EVENT_PARAM;

typedef struct DLL_PACKED _DMX_FLT_SEC_PAT_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32DmxId;
    MS_U32 u32MatchSize;
    MS_U8* pu8Pattern;
    MS_U8* pu8Mask;
    MS_U8* pu8NotMask;
}DMX_FLT_SEC_PAT_PARAM, *PDMX_FLT_SEC_PAT_PARAM;

typedef struct DLL_PACKED _DMX_AVFIFO_PARAM
{
    DMX_FILTER_TYPE DmxFltType;
    MS_U32 u32Data;
    MS_U32 u32Res;
}DMX_AVFIFO_PARAM, *PDMX_AVFIFO_PARAM;

typedef struct DLL_PACKED _DMX_AVFIFO_DROP_PARAM
{
    MS_U32 u32Res;
    DMX_FILTER_TYPE DmxFltType;
    MS_BOOL bAllFifo;
    MS_BOOL bEnable;

}DMX_AVFIFO_DROP_PARAM, *PDMX_AVFIFO_DROP_PARAM;


typedef struct DLL_PACKED _DMX_TIMESTAM_CLK_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32EngId;
    DMX_TimeStamp_Clk eClk;

}DMX_TIMESTAMP_CLK_PARAM, *PDMX_TIMESTAMP_CLK_PARAM;

typedef struct DLL_PACKED _DMX_PVR_INFO_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32EngId;
    DMX_Pvr_info* pPvrInfo;

}DMX_PVR_INFO_PARAM, *PDMX_PVR_INFO_PARAM;

typedef struct DLL_PACKED _DMX_PVR_FLTTYPE_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32EngId;
    MS_U32 u32DmxId;
    MS_U32 u32Pid;
    DMX_FILTER_TYPE FltSrc;
    MS_U32 u32CAEngSel;
    MS_U32 u32SelShareFlt;

}DMX_PVR_FLTTYPE_PARAM, *PDMX_PVR_FLTTYPE_PARAM;

typedef struct DLL_PACKED _DMX_FILE_START_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32EngId;
    DMX_FILEIN_DST Dst;
    MS_PHY pBuf;
    MS_U32 u32BufSize;

}DMX_FILE_START_PARAM, *PDMX_FILE_START_PARAM;

typedef struct DLL_PACKED _DMX_FILE_INFO_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32EngId;
    DMX_Filein_info* pFileinInfo;

}DMX_FILE_INFO_PARAM, *PDMX_FILE_INFO_PARAM;

typedef struct DLL_PACKED _DMX_MMFI_FLT_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32DmxId;
    MS_U32 u32Pid;
    DMX_MMFI_FLTTYPE flttype;
    DMX_MMFI_PATH MMFIPath;
}DMX_MMFI_FLT_PARAM, *PDMX_MMFI_FLT_PARAM;

typedef struct DLL_PACKED _DMX_CMDRUN_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32Cmd;
    MS_U32 u32Config;
    MS_U32 u32DataNum;
    void* pData;
}DMX_CMDRUN_PARAM, *PDMX_CMDRUN_PARAM;

typedef struct DLL_PACKED _DMX_POWSTATE_PARAM
{
    MS_U32 u32Res;
    EN_POWER_MODE u16PowerState;
    MS_PHY u32FWAddr;
    MS_U32 u32FWSize;
}DMX_POWSTATE_PARAM, *PDMX_POWSTATE_PARAM;

typedef struct DLL_PACKED _DMX_MMFI_START_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32EngId;
    DMX_MMFI_DST Dst;
    MS_PHY pBuf;
    MS_U32 u32BufSize;

}DMX_MMFI_START_PARAM, *PDMX_MMFI_START_PARAM;

typedef struct DLL_PACKED _DMX_PKT_MODE_PARAM
{
    MS_U32 u32Res;
    DMX_FLOW eFlow;
    DMX_PacketMode ePktMode;
}DMX_PKT_MODE_PARAM, *PDMX_PKT_MODE_PARAM;

typedef struct DLL_PACKED _DMX_PKT_DISCONCNT_PARAM
{
    MS_U32 u32Res;
    DMX_DisContiCnt_info* pInfo;
    MS_U32 u32Cnt;
}DMX_PKT_DISCONCNT_PARAM, *PDMX_PKT_DISCONCNT_PARAM;

typedef struct DLL_PACKED _DMX_PKT_DROPCNT_PARAM
{
    MS_U32 u32Res;
    DMX_DropPktCnt_info* pInfo;
    MS_U32 u32Cnt;
}DMX_PKT_DROPCNT_PARAM, *PDMX_PKT_DROPCNT_PARAM;

typedef struct DLL_PACKED _DMX_PKT_LOCKCNT_PARAM
{
    MS_U32 u32Res;
    DMX_LockPktCnt_info* pInfo;
    MS_U32 u32Cnt;
}DMX_PKT_LOCKCNT_PARAM, *PDMX_PKT_LOCKCNT_PARAM;

typedef struct DLL_PACKED _DMX_PKT_AVCNT_PARAM
{
    MS_U32 u32Res;
    DMX_AVPktCnt_info* pInfo;
    MS_U32 u32Cnt;
}DMX_PKT_AVCNT_PARAM, *PDMX_PKT_AVCNT_PARAM;

typedef struct DLL_PACKED _DMX_PKT_SECTEI_PARAM
{
    MS_U32 u32Res;
    DMX_FILTER_TYPE eType;
    MS_U32 u32Cnt;
}DMX_PKT_SECTEI_PARAM, *PDMX_PKT_SECTEI_PARAM;

typedef struct DLL_PACKED _DMX_WP_PARAM
{
    MS_BOOL bEnable;
    MS_PHY* pu32StartAddr;
    MS_PHY* pu32EndAddr;
}DMX_WP_PARAM, *PDMX_WP_PARAM;

typedef struct DLL_PACKED _DMX_TSO_OUTCLK_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32Eng;
    DMX_TSO_OutClk eTsoOutClk;
    DMX_TSO_OutClkSrc eTsoOutClkSrc;
    MS_U16 u16DivNum;
    MS_BOOL bClkInv;
    MS_BOOL bSet;
}DMX_TSO_OUTCLK_PARAM, *PDMX_TSO_OUTCLK_PARAM;

typedef struct DLL_PACKED _DMX_TSO_LOCSTRID_PARAM
{
    MS_U32 u32Res;
    MS_U8 u8Eng;
    DMX_TSIF eIf;
    MS_U8* pu8StrId;
    MS_BOOL bSet;
}DMX_TSO_LOCSTRID_PARAM, *PDMX_TSO_LOCSTRID_PARAM;

typedef struct DLL_PACKED _DMX_FQ_INIT_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32Eng;
    DMX_FQ_Info* pInfo;
}DMX_FQ_INIT_PARAM, *PDMX_FQ_INIT_PARAM;

typedef struct DLL_PACKED _DMX_FQ_SKIP_RUSH_DATA_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32Eng;
    DMX_FQ_SkipPath eSkipPath;
}DMX_FQ_SKIP_RUSH_DATA_PARAM, *PDMX_FQ_SKIP_RUSH_DATA_PARAM;

typedef struct DLL_PACKED _DMX_FQ_CONFIGURE_PARAM
{
    MS_U32 u32Res;
    DMX_FQ_Cfg* pCfg;
}DMX_FQ_CONFIGURE_PARAM, *PDMX_FQ_CONFIGURE_PARAM;

typedef struct DLL_PACKED _DMX_MSTR_SYNCBY_PARAM
{
    MS_U32 u32Res;
    DMX_TSIF eIf;
    MS_U8 u8StrId;
    MS_U8* pu8SyncByte;
    MS_BOOL bSet;
}DMX_MSTR_SYNCBY_PARAM, *PDMX_MSTR_SYNCBY_PARAM;

typedef struct DLL_PACKED _DMX_OutputPad_Cfg
{
    MS_U32 u32Res;
    DMX_FLOW_OUTPUT_PAD eOutPad;
    DMX_FLOW_INPUT eInSrcPad;
    MS_BOOL bInParallel;
    MS_U32 u32ResvNum;
    MS_U32* pu32Resv;
}DMX_OutputPad_Cfg, *PDMX_OutputPad_Cfg;

typedef struct DLL_PACKED _DMX_FLOW_DSCMBENG_PARAM
{
    MS_U32 u32Res;
    MS_U32 u32DscmbEng;
    DMX_TSIF eTsif;
    MS_BOOL bSet;
}DMX_FLOW_DSCMBENG_PARAM, *PDMX_FLOW_DSCMBENG_PARAM;

typedef struct DLL_PACKED _DMX_DROP_SCMB_PKT_PARAM
{
    MS_U32 u32Res;
    DMX_FILTER_TYPE eType;
    MS_BOOL bEnable;
}DMX_DROP_SCMB_PKT_PARAM,*PDMX_DROP_SCMB_PKT_PARAM;

#ifdef __cplusplus
}
#endif


#endif
# 149 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse.h"
#ifndef _API_XC_MODEPARSE_H_
#define _API_XC_MODEPARSE_H_ 
#ifdef __cplusplus
extern "C"
{
#endif
#include "UFO.h"
# 167 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse.h"
#define MD_FLAG_NULL 0x00

#define MD_FLAG_POR_HPVP 0x01
#define MD_FLAG_POR_HPVN 0x02
#define MD_FLAG_POR_HNVP 0x04
#define MD_FLAG_POR_HNVN 0x08
#define MD_FLAG_INTERLACE 0x10

#define MD_FLAG_EURO_HDTV_BIT 0x20

#define MD_FLAG_YPBPR_BIT 0x40
#define MD_FLAG_HDTV_BIT 0x80







typedef enum
{
    XC_MODEPARSE_NOT_PARSED = 0,
    XC_MODEPARSE_OUT_OF_RANGE,
    XC_MODEPARSE_UNSUPPORT_MODE,
    XC_MODEPARSE_SUPPORT_MODE,
} XC_MODEPARSE_RESULT;

typedef struct DLL_PACKED
{

    MS_U8 u8ModeIndex;
    MS_U16 u16ResWidth;
    MS_U16 u16ResHeight;


    INPUT_SOURCE_TYPE_t eSrcType;


    MS_U16 u16HFreqx10;
    MS_U16 u16VFreqx10;
    MS_U16 u16Vtotal;
    MS_U8 u8SyncStatus;


    MS_WINDOW_TYPE sDVI_HDMI_DE_Info;


    MS_DETECT_EURO_HDTV_STATUS_TYPE eEuroHDTVStatus;
} XC_MODEPARSE_INPUT_INFO;

typedef enum
{
    RES_640X350,
    RES_640X400,
    RES_720X400,
    RES_640X480,
    RES_800X600,
    RES_832X624,
    RES_1024X768,
    RES_1280X1024,
    RES_1600X1200,
    RES_1152X864,
    RES_1152X870,
    RES_1280X768,
    RES_1280X960,
    RES_720X480,
    RES_1920X1080,
    RES_1280X720,
    RES_720X576,
    RES_1920X1200,
    RES_1400X1050,
    RES_1440X900,
    RES_1680X1050,
    RES_1280X800,
    RES_1600X1024,
    RES_1600X900,
    RES_1360X768,
    RES_848X480,
    RES_1920X1080P,
    RES_1366X768,
    RES_864X648,
    RES_1280X1470,
    RES_1920X2205,
    RES_720X240,
    RES_720x288,
    RES_1152X900,
    RES_856x480,
    RES_1536X960,
    RES_1600X1000,
    RES_1704X960,
    RES_1728X1080,
    RES_1864X1050,
    RES_MAXIMUM
}EN_RESOLUTION_TYPE;

typedef struct DLL_PACKED
{
    EN_RESOLUTION_TYPE enResolutionIndex;

    MS_U16 u16HorizontalFrequency;
    MS_U16 u16VerticalFrequency;

    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;

    MS_U16 u16HorizontalTotal;
    MS_U16 u16VerticalTotal;
    MS_U8 u8VTotalTolerance;

    MS_U8 u8AdcPhase;

    MS_U8 u8StatusFlag;




}MS_PCADC_MODETABLE_TYPE;

typedef struct DLL_PACKED
{
    EN_RESOLUTION_TYPE enResolutionIndex;

    MS_U16 u16HorizontalFrequency;
    MS_U16 u16VerticalFrequency;

    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;

    MS_U16 u16HorizontalTotal;
    MS_U16 u16VerticalTotal;
    MS_U16 u16VTotalTolerance;

    MS_U16 u16AdcPhase;

    MS_U8 u8StatusFlag;




}MS_PCADC_MODETABLE_TYPE_EX;

#if defined(UFO_PUBLIC_HEADER_300)
typedef struct
{
    MS_U16 u16DisplayWidth;
    MS_U16 u16DisplayHeight;

}MS_MODE_RESOLUTION;
#endif
# 326 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse.h"
MS_BOOL MApi_XC_ModeParse_Init(void);
# 337 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse.h"
XC_MODEPARSE_RESULT MApi_XC_ModeParse_MatchMode(MS_PCADC_MODETABLE_TYPE* ModeDB, MS_U8 u16NumberOfItems , XC_MODEPARSE_INPUT_INFO *psInputInfo);
# 347 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse.h"
XC_MODEPARSE_RESULT MApi_XC_ModeParse_MatchModeEx(MS_PCADC_MODETABLE_TYPE_EX* ModeDB, MS_U8 u16NumberOfItems , XC_MODEPARSE_INPUT_INFO *psInputInfo);
#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHSL_SHM.h"
#if defined (MSOS_TYPE_LINUX)
#ifndef FRHSL_SHM_H
#define FRHSL_SHM_H 





#include "MsTypes.h"

#ifdef __cplusplus
extern "C" {
#endif


#define HSL_SHMEM_KEY 7995
#define HSL_SHMEM_SIZE 128

typedef struct
{
  char data[HSL_SHMEM_SIZE];
  MS_BOOL handled;
}cHslSyncData;

typedef struct
{
  cHslSyncData* ptr;
  int id;
}cHslSyncMem;





MS_BOOL InitShareMemory(cHslSyncMem* syncMem, MS_BOOL create);
void FreeShareMemory(cHslSyncMem* syncMem);
MS_BOOL StoreShareMemory(cHslSyncMem* syncMem, void* source);
MS_BOOL RestoreShareMemory(cHslSyncMem* syncMem, void* dest);

void PackAtRespIntoHslCmdResp(const char* a_atResp);
void PackAtCmdEchoIntoHslCmdResp(MS_BOOL a_result, const char* a_atCmd);

#ifdef __cplusplus
}
#endif

#endif

#endif
# 101 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_ATSC.h"
#include "drvDMD_ATSC.h"

#if 0


#ifndef _DRV_ATSC_H_
#define _DRV_ATSC_H_ 

#include "MsDevice.h"
#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 126 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_ATSC.h"
#define MSIF_DMD_ATSC_INTERN_LIB_CODE {'D','M','D','_','A','T', 'S','C','_','I','N','T','E','R','N','_'}
#define MSIF_DMD_ATSC_INTERN_LIBVER {'0','0'}
#define MSIF_DMD_ATSC_INTERN_BUILDNUM {'0','0' }
#define MSIF_DMD_ATSC_INTERN_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_ATSC_INTERN_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_ATSC_INTERN_LIB_CODE, \
    MSIF_DMD_ATSC_INTERN_LIBVER, \
    MSIF_DMD_ATSC_INTERN_BUILDNUM, \
    MSIF_DMD_ATSC_INTERN_CHANGELIST, \
    MSIF_OS

#define IS_BITS_SET(val,bits) (((val)&(bits)) == (bits))




typedef enum
{
    DMD_ATSC_DBGLV_NONE,
    DMD_ATSC_DBGLV_INFO,
    DMD_ATSC_DBGLV_NOTICE,
    DMD_ATSC_DBGLV_WARNING,
    DMD_ATSC_DBGLV_ERR,
    DMD_ATSC_DBGLV_CRIT,
    DMD_ATSC_DBGLV_ALERT,
    DMD_ATSC_DBGLV_EMERG,
    DMD_ATSC_DBGLV_DEBUG,
} DMD_ATSC_DbgLv;

typedef enum
{
    DMD_ATSC_DEMOD_ATSC_VSB,
    DMD_ATSC_DEMOD_ATSC_64QAM,
    DMD_ATSC_DEMOD_ATSC_256QAM,
    DMD_ATSC_DEMOD_MAX,
    DMD_ATSC_DEMOD_NULL = DMD_ATSC_DEMOD_MAX,
} DMD_ATSC_DEMOD_TYPE;

typedef enum
{
    DMD_ATSC_SIGNAL_NO = 0,
    DMD_ATSC_SIGNAL_WEAK = 1,
    DMD_ATSC_SIGNAL_MODERATE = 2,
    DMD_ATSC_SIGNAL_STRONG = 4,
    DMD_ATSC_SIGNAL_VERY_STRONG = 8
} DMD_ATSC_SIGNAL_CONDITION;

typedef enum
{
    DMD_ATSC_GETLOCK,
    DMD_ATSC_GETLOCK_VSB_AGCLOCK,
    DMD_ATSC_GETLOCK_VSB_PRELOCK,
    DMD_ATSC_GETLOCK_VSB_FSYNCLOCK,
    DMD_ATSC_GETLOCK_VSB_CELOCK,
    DMD_ATSC_GETLOCK_VSB_FECLOCK,
    DMD_ATSC_GETLOCK_QAM_AGCLOCK,
    DMD_ATSC_GETLOCK_QAM_PRELOCK,
    DMD_ATSC_GETLOCK_QAM_MAINLOCK,
} DMD_ATSC_GETLOCK_TYPE;

typedef enum
{
    DMD_ATSC_LOCK,
    DMD_ATSC_CHECKING,
    DMD_ATSC_CHECKEND,
    DMD_ATSC_UNLOCK,
    DMD_ATSC_NULL,
} DMD_ATSC_LOCK_STATUS;


typedef struct
{

    MS_U16 u16VSBAGCLockCheckTime;
    MS_U16 u16VSBPreLockCheckTime;
    MS_U16 u16VSBFSyncLockCheckTime;
    MS_U16 u16VSBFECLockCheckTime;

    MS_U16 u16QAMAGCLockCheckTime;
    MS_U16 u16QAMPreLockCheckTime;
    MS_U16 u16QAMMainLockCheckTime;


    MS_U8 *u8DMD_ATSC_DSPRegInitExt;
    MS_U8 u8DMD_ATSC_DSPRegInitSize;
    MS_U8 *u8DMD_ATSC_InitExt;

    MS_U16 u16IF_KHZ;
    MS_BOOL bIQSwap;
} DMD_ATSC_InitData;

typedef enum
{
    E_DMD_ATSC_FAIL=0,
    E_DMD_ATSC_OK=1
} DMD_ATSC_Result;

typedef struct
{
    MS_U8 u8Version;
    MS_U32 u32ATSCScanTimeStart;
    MS_U32 u32ATSCFECLockTime;
    DMD_ATSC_LOCK_STATUS eStatus;
    MS_U32 u32ATSCLockStatus;
} DMD_ATSC_Info;

#define DMD_ATSC_LOCK_VSB_PRE_LOCK BIT_(0)
#define DMD_ATSC_LOCK_VSB_FSYNC_LOCK BIT_(1)
#define DMD_ATSC_LOCK_VSB_CE_LOCK BIT_(2)
#define DMD_ATSC_LOCK_VSB_FEC_LOCK BIT_(3)

#define DMD_ATSC_LOCK_QAM_AGC_LOCK BIT_(8)
#define DMD_ATSC_LOCK_QAM_PRE_LOCK BIT_(9)
#define DMD_ATSC_LOCK_QAM_MAIN_LOCK BIT_(10)
# 257 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_ATSC.h"
extern MS_BOOL MDrv_DMD_ATSC_Init(DMD_ATSC_InitData *pDMD_DVBT_InitData, MS_U32 u32InitDataLen);



extern MS_BOOL MDrv_DMD_ATSC_Exit(void);
# 277 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_ATSC.h"
extern MS_BOOL MDrv_DMD_ATSC_SetDbgLevel(DMD_ATSC_DbgLv u8DbgLevel);




extern DMD_ATSC_Info* MDrv_DMD_ATSC_GetInfo(void);




extern MS_BOOL MDrv_DMD_ATSC_GetLibVer(const MSIF_Version **ppVersion);





extern MS_BOOL MDrv_DMD_ATSC_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





extern MS_BOOL MDrv_DMD_ATSC_SetReg(MS_U16 u16Addr, MS_U8 u8Data);



extern MS_BOOL MDrv_DMD_ATSC_SetSerialControl(MS_BOOL bEnable);



extern void MDrv_DMD_ATSC_SetReset(void);



extern MS_BOOL MDrv_DMD_ATSC_SetConfig(DMD_ATSC_DEMOD_TYPE eType, MS_BOOL bEnable);



extern MS_BOOL MDrv_DMD_ATSC_SetActive(MS_BOOL bEnable);



extern DMD_ATSC_LOCK_STATUS MDrv_DMD_ATSC_GetLock(DMD_ATSC_GETLOCK_TYPE eType);



extern DMD_ATSC_DEMOD_TYPE MDrv_DMD_ATSC_GetModulationMode(void);



extern MS_BOOL MDrv_DMD_ATSC_GetSignalStrength(MS_U16 *u16Strength);



extern DMD_ATSC_SIGNAL_CONDITION MDrv_DMD_ATSC_GetSignalQuality(void);



extern MS_BOOL MDrv_DMD_ATSC_GetCellID(MS_U16 *u16CellID);

extern MS_U32 MDrv_DMD_ATSC_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef __cplusplus
}
#endif


#endif

#endif
# 146 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVIF.h"
#ifndef _DRVVIF_H_
#define _DRVVIF_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsCommon.h"
#include "MsIRQ.h"
#include "MsOS.h"
#include "MsTypes.h"
#if 0



#define MSIF_VIF_LIB_CODE {'V','I','F','_'}
#define MSIF_VIF_LIBVER {'1','7'}
#define MSIF_VIF_BUILDNUM {'0','5'}
#define MSIF_VIF_CHANGELIST {'0','0','6','1','8','0','0','4'}
#define MSIF_VIF_DASH {'_'}
#define MSIF_VIF_DATE {'1','3','0','8','1','4'}

#define VIF_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_VIF_LIB_CODE, \
    MSIF_VIF_LIBVER, \
    MSIF_VIF_BUILDNUM, \
    MSIF_VIF_CHANGELIST, \
    MSIF_OS
#endif




#ifdef _DRVVIF_C_
#define INTERFACE 
#else
#define INTERFACE extern
#endif

#ifndef BOOL
#define BOOL MS_BOOL
#endif
#ifndef BYTE
#define BYTE MS_U8
#endif
#ifndef WORD
#define WORD MS_U16
#endif
#ifndef DWORD
#define DWORD MS_U32
#endif
#ifndef U8
#define U8 MS_U8
#endif
#ifndef U16
#define U16 MS_U16
#endif
#ifndef U32
#define U32 MS_U32
#endif
#ifndef VIRT
#define VIRT MS_VIRT
#endif

typedef enum
{
    afcBELOW_MINUS_187p5KHz = 0x07,
    afcMINUS_162p5KHz = 0x06,
    afcMINUS_137p5KHz = 0x05,
    afcMINUS_112p5KHz = 0x04,
    afcMINUS_87p5KHz = 0x03,
    afcMINUS_62p5KHz = 0x02,
    afcMINUS_37p5KHz = 0x01,
    afcMINUS_12p5KHz = 0x00,
    afcPLUS_12p5KHz = 0x0F,
    afcPLUS_37p5KHz = 0x0E,
    afcPLUS_62p5KHz = 0x0D,
    afcPLUS_87p5KHz = 0x0C,
    afcPLUS_112p5KHz = 0x0B,
    afcPLUS_137p5KHz = 0x0A,
    afcPLUS_162p5KHz = 0x09,
    afcABOVE_PLUS_187p5KHz = 0x08
} eAFC;


typedef enum
{
    E_AFC_BELOW_MINUS_187p5KHz = 0x07,
    E_AFC_MINUS_162p5KHz = 0x06,
    E_AFC_MINUS_137p5KHz = 0x05,
    E_AFC_MINUS_112p5KHz = 0x04,
    E_AFC_MINUS_87p5KHz = 0x03,
    E_AFC_MINUS_62p5KHz = 0x02,
    E_AFC_MINUS_37p5KHz = 0x01,
    E_AFC_MINUS_12p5KHz = 0x00,
    E_AFC_PLUS_12p5KHz = 0x0F,
    E_AFC_PLUS_37p5KHz = 0x0E,
    E_AFC_PLUS_62p5KHz = 0x0D,
    E_AFC_PLUS_87p5KHz = 0x0C,
    E_AFC_PLUS_112p5KHz = 0x0B,
    E_AFC_PLUS_137p5KHz = 0x0A,
    E_AFC_PLUS_162p5KHz = 0x09,
    E_AFC_ABOVE_PLUS_187p5KHz = 0x08,
    E_AFC_OUT_OF_AFCWIN = 0x10,
} AFC;

typedef enum
{
    VIF_IF_FREQ_INVALID,
    VIF_IF_FREQ_B,
    VIF_IF_FREQ_G,
    VIF_IF_FREQ_I,
    VIF_IF_FREQ_DK,
    VIF_IF_FREQ_L,
    VIF_IF_FREQ_L_PRIME,
    VIF_IF_FREQ_MN,
    VIF_IF_FREQ_J,
    VIF_IF_FREQ_PAL_38,
    VIF_IF_FREQ_MAX_IF_FREQ,
    VIF_IF_DIGITAL_MODE
} VIF_IF_FREQ;

typedef enum
{
    VIF_SOUND_B,
    VIF_SOUND_B_NICAM,
    VIF_SOUND_GH,
    VIF_SOUND_GH_NICAM,
    VIF_SOUND_I,
    VIF_SOUND_DK1,
    VIF_SOUND_DK2,
    VIF_SOUND_DK3,
    VIF_SOUND_DK_NICAM,
    VIF_SOUND_L,
    VIF_SOUND_LL,
    VIF_SOUND_MN,
    VIF_SOUND_NUMS
}VIFSoundSystem;

typedef enum
{
    IF_FREQ_3395,
    IF_FREQ_3800,
    IF_FREQ_3890,
    IF_FREQ_3950,
    IF_FREQ_4575,
    IF_FREQ_5875,
    IF_FREQ_NUMS
}IfFrequencyType;

typedef enum
{
    FREQ_VHF_L,
    FREQ_VHF_H,
    FREQ_UHF,
    FREQ_RANGE_NUMS
}FrequencyBand;

typedef struct DLL_PACKED _VIFInitialIn
{
    BYTE VifTop;
    BYTE VifIfBaseFreq;
    BYTE VifTunerStepSize;
    BYTE VifSawArch;
    WORD VifVgaMaximum;
    WORD VifVgaMinimum;
    WORD GainDistributionThr;
    BYTE VifAgcVgaBase;
    BYTE VifAgcVgaOffs;
    BYTE VifAgcRefNegative;
    BYTE VifAgcRefPositive;
    BYTE VifDagc1Ref;
    BYTE VifDagc2Ref;
    WORD VifDagc1GainOv;
    WORD VifDagc2GainOv;
    BYTE VifCrKf1;
    BYTE VifCrKp1;
    BYTE VifCrKi1;
    BYTE VifCrKp2;
    BYTE VifCrKi2;
    BYTE VifCrKp;
    BYTE VifCrKi;
    WORD VifCrLockThr;
    WORD VifCrThr;
    DWORD VifCrLockNum;
    DWORD VifCrUnlockNum;
    WORD VifCrPdErrMax;
    BOOL VifCrLockLeakySel;
    BOOL VifCrPdX2;
    BOOL VifCrLpfSel;
    BOOL VifCrPdModeSel;
    BOOL VifCrKpKiAdjust;
    BYTE VifCrKpKiAdjustGear;
    BYTE VifCrKpKiAdjustThr1;
    BYTE VifCrKpKiAdjustThr2;
    BYTE VifCrKpKiAdjustThr3;
    BOOL VifDynamicTopAdjust;
    BYTE VifDynamicTopMin;
    BOOL VifAmHumDetection;
    BOOL VifClampgainClampSel;
    BYTE VifClampgainSyncbottRef;
    BYTE VifClampgainSyncheightRef;
    BYTE VifClampgainKc;
    BYTE VifClampgainKg;
    BOOL VifClampgainClampOren;
    BOOL VifClampgainGainOren;
    WORD VifClampgainClampOvNegative;
    WORD VifClampgainGainOvNegative;
    WORD VifClampgainClampOvPositive;
    WORD VifClampgainGainOvPositive;
    BYTE VifClampgainClampMin;
    BYTE VifClampgainClampMax;
    BYTE VifClampgainGainMin;
    BYTE VifClampgainGainMax;
    WORD VifClampgainPorchCnt;
    BYTE VifPeakingFilterB_VHF_L;
    BYTE VifYcDelayFilterB_VHF_L;
    BYTE VifGroupDelayFilterB_VHF_L;
    BYTE VifPeakingFilterGH_VHF_L;
    BYTE VifYcDelayFilterGH_VHF_L;
    BYTE VifGroupDelayFilterGH_VHF_L;
    BYTE VifPeakingFilterDK_VHF_L;
    BYTE VifYcDelayFilterDK_VHF_L;
    BYTE VifGroupDelayFilterDK_VHF_L;
    BYTE VifPeakingFilterI_VHF_L;
    BYTE VifYcDelayFilterI_VHF_L;
    BYTE VifGroupDelayFilterI_VHF_L;
    BYTE VifPeakingFilterL_VHF_L;
    BYTE VifYcDelayFilterL_VHF_L;
    BYTE VifGroupDelayFilterL_VHF_L;
    BYTE VifPeakingFilterLL_VHF_L;
    BYTE VifYcDelayFilterLL_VHF_L;
    BYTE VifGroupDelayFilterLL_VHF_L;
    BYTE VifPeakingFilterMN_VHF_L;
    BYTE VifYcDelayFilterMN_VHF_L;
    BYTE VifGroupDelayFilterMN_VHF_L;
    BYTE VifPeakingFilterB_VHF_H;
    BYTE VifYcDelayFilterB_VHF_H;
    BYTE VifGroupDelayFilterB_VHF_H;
    BYTE VifPeakingFilterGH_VHF_H;
    BYTE VifYcDelayFilterGH_VHF_H;
    BYTE VifGroupDelayFilterGH_VHF_H;
    BYTE VifPeakingFilterDK_VHF_H;
    BYTE VifYcDelayFilterDK_VHF_H;
    BYTE VifGroupDelayFilterDK_VHF_H;
    BYTE VifPeakingFilterI_VHF_H;
    BYTE VifYcDelayFilterI_VHF_H;
    BYTE VifGroupDelayFilterI_VHF_H;
    BYTE VifPeakingFilterL_VHF_H;
    BYTE VifYcDelayFilterL_VHF_H;
    BYTE VifGroupDelayFilterL_VHF_H;
    BYTE VifPeakingFilterLL_VHF_H;
    BYTE VifYcDelayFilterLL_VHF_H;
    BYTE VifGroupDelayFilterLL_VHF_H;
    BYTE VifPeakingFilterMN_VHF_H;
    BYTE VifYcDelayFilterMN_VHF_H;
    BYTE VifGroupDelayFilterMN_VHF_H;
    BYTE VifPeakingFilterB_UHF;
    BYTE VifYcDelayFilterB_UHF;
    BYTE VifGroupDelayFilterB_UHF;
    BYTE VifPeakingFilterGH_UHF;
    BYTE VifYcDelayFilterGH_UHF;
    BYTE VifGroupDelayFilterGH_UHF;
    BYTE VifPeakingFilterDK_UHF;
    BYTE VifYcDelayFilterDK_UHF;
    BYTE VifGroupDelayFilterDK_UHF;
    BYTE VifPeakingFilterI_UHF;
    BYTE VifYcDelayFilterI_UHF;
    BYTE VifGroupDelayFilterI_UHF;
    BYTE VifPeakingFilterL_UHF;
    BYTE VifYcDelayFilterL_UHF;
    BYTE VifGroupDelayFilterL_UHF;
    BYTE VifPeakingFilterLL_UHF;
    BYTE VifYcDelayFilterLL_UHF;
    BYTE VifGroupDelayFilterLL_UHF;
    BYTE VifPeakingFilterMN_UHF;
    BYTE VifYcDelayFilterMN_UHF;
    BYTE VifGroupDelayFilterMN_UHF;
    BYTE ChinaDescramblerBox;
    BYTE VifDelayReduce;
    BOOL VifOverModulation;
    BOOL VifOverModulationDetect;
    BOOL VifACIDetect;
    BOOL VifSeriousACIDetect;
    BYTE VifACIAGCREF;
    BYTE VifADCOverflowAGCREF;
    BYTE VifChanelScanAGCREF;
    BYTE VifACIDetTHR1;
    BYTE VifACIDetTHR2;
    BYTE VifACIDetTHR3;
    BYTE VifACIDetTHR4;
    BYTE VifFreqBand;
    WORD VifSos21FilterC0;
    WORD VifSos21FilterC1;
    WORD VifSos21FilterC2;
    WORD VifSos21FilterC3;
    WORD VifSos21FilterC4;
    WORD VifSos22FilterC0;
    WORD VifSos22FilterC1;
    WORD VifSos22FilterC2;
    WORD VifSos22FilterC3;
    WORD VifSos22FilterC4;
    WORD VifSos31FilterC0;
    WORD VifSos31FilterC1;
    WORD VifSos31FilterC2;
    WORD VifSos31FilterC3;
    WORD VifSos31FilterC4;
    WORD VifSos32FilterC0;
    WORD VifSos32FilterC1;
    WORD VifSos32FilterC2;
    WORD VifSos32FilterC3;
    WORD VifSos32FilterC4;
    BYTE VifTunerType;
    DWORD VifCrRate_B;
    BOOL VifCrInvert_B;
    DWORD VifCrRate_GH;
    BOOL VifCrInvert_GH;
    DWORD VifCrRate_DK;
    BOOL VifCrInvert_DK;
    DWORD VifCrRate_I;
    BOOL VifCrInvert_I;
    DWORD VifCrRate_L;
    BOOL VifCrInvert_L;
    DWORD VifCrRate_LL;
    BOOL VifCrInvert_LL;
    DWORD VifCrRate_MN;
    BOOL VifCrInvert_MN;
    BYTE VifReserve;
}VIFInitialIn;

typedef enum
{
    VIF_PARA_USER_FILTER,
    VIF_PARA_TOP,
    VIF_PARA_LEAKY_SEL,
    VIF_PARA_K_SEL,
    VIF_PARA_GET_VERSION,
    VIF_PARA_SET_BYPASS_PEAKING_SOS21,
    VIF_PARA_GET_PGA2_LEVEL,
    VIF_PARA_GET_IF,
    VIF_PARA_GET_K_SEL,
    VIF_PARA_SET_HW_KPKI,
    VIF_PARA_SET_TAGC_ODMODE,
    VIF_PARA_SET_NOTCH_A1A2,
    VIF_PARA_SET_SOS_1112,
    VIF_PARA_GET_PD_INV,
    VIF_PARA_SET_PD_INV,
    VIF_PARA_GET_VGA,
    VIF_PARA_SET_CLAMPGAIN_GAIN_OV_POS,
    VIF_PARA_SET_CLAMPGAIN_GAIN_OV_NEG,
    VIF_PARA_SET_AGC_K,
    VIF_PARA_SET_AGC_REF,
    VIF_PARA_SET_IF_RATE_FM,
    VIF_PARA_SET_CR_RATE_FM,
    VIF_PARA_SET_DESCRAMBLERBOX_DELAY,
    VIF_PARA_SET_SSC_ENABLE,
    VIF_PARA_SET_DISABLE_ADAGC,
    VIF_PARA_SET_ENABLE_SOS33,
    VIF_PARA_GROUP_NUMS
}VIF_PARA_GROUP;


typedef enum
{
    PK_START=1,
    PK_B_VHF_L=PK_START,
    PK_GH_VHF_L,
    PK_DK_VHF_L,
    PK_I_VHF_L,
    PK_L_VHF_L,
    PK_LL_VHF_L,
    PK_MN_VHF_L,
    PK_B_VHF_H,
    PK_GH_VHF_H,
    PK_DK_VHF_H,
    PK_I_VHF_H,
    PK_L_VHF_H,
    PK_LL_VHF_H,
    PK_MN_VHF_H,
    PK_B_UHF,
    PK_GH_UHF,
    PK_DK_UHF,
    PK_I_UHF,
    PK_L_UHF,
    PK_LL_UHF,
    PK_MN_UHF,
    PK_END=PK_MN_UHF,

    YC_START,
    YC_B_VHF_L=YC_START,
    YC_GH_VHF_L,
    YC_DK_VHF_L,
    YC_I_VHF_L,
    YC_L_VHF_L,
    YC_LL_VHF_L,
    YC_MN_VHF_L,
    YC_B_VHF_H,
    YC_GH_VHF_H,
    YC_DK_VHF_H,
    YC_I_VHF_H,
    YC_L_VHF_H,
    YC_LL_VHF_H,
    YC_MN_VHF_H,
    YC_B_UHF,
    YC_GH_UHF,
    YC_DK_UHF,
    YC_I_UHF,
    YC_L_UHF,
    YC_LL_UHF,
    YC_MN_UHF,
    YC_END=YC_MN_UHF,

    GP_START,
    GP_B_VHF_L=GP_START,
    GP_GH_VHF_L,
    GP_DK_VHF_L,
    GP_I_VHF_L,
    GP_L_VHF_L,
    GP_LL_VHF_L,
    GP_MN_VHF_L,
    GP_B_VHF_H,
    GP_GH_VHF_H,
    GP_DK_VHF_H,
    GP_I_VHF_H,
    GP_L_VHF_H,
    GP_LL_VHF_H,
    GP_MN_VHF_H,
    GP_B_UHF,
    GP_GH_UHF,
    GP_DK_UHF,
    GP_I_UHF,
    GP_L_UHF,
    GP_LL_UHF,
    GP_MN_UHF,
    GP_END=GP_MN_UHF,

    VIF_USER_FILTER_SELECT_NUMS
}VIF_USER_FILTER_SELECT;

typedef struct DLL_PACKED _VIFUserFilter
{
    WORD VifSos21FilterC0;
    WORD VifSos21FilterC1;
    WORD VifSos21FilterC2;
    WORD VifSos21FilterC3;
    WORD VifSos21FilterC4;
    WORD VifSos22FilterC0;
    WORD VifSos22FilterC1;
    WORD VifSos22FilterC2;
    WORD VifSos22FilterC3;
    WORD VifSos22FilterC4;
    WORD VifSos31FilterC0;
    WORD VifSos31FilterC1;
    WORD VifSos31FilterC2;
    WORD VifSos31FilterC3;
    WORD VifSos31FilterC4;
    WORD VifSos32FilterC0;
    WORD VifSos32FilterC1;
    WORD VifSos32FilterC2;
    WORD VifSos32FilterC3;
    WORD VifSos32FilterC4;





    BYTE VifUserPeakingFilterSelect;
    BYTE VifUserYcDelayFilterSelect;
    BYTE VifUserGroupDelayFilterSelect;
}VIFUserFilter;

typedef struct DLL_PACKED _VIFNotchA1A2
{
    WORD Vif_N_A1_C0;
    WORD Vif_N_A1_C1;
    WORD Vif_N_A1_C2;
    WORD Vif_N_A2_C0;
    WORD Vif_N_A2_C1;
    WORD Vif_N_A2_C2;
}VIFNotchA1A2;

typedef struct DLL_PACKED _VIFSOS1112
{
    WORD Vif_SOS_11_C0;
    WORD Vif_SOS_11_C1;
    WORD Vif_SOS_11_C2;
    WORD Vif_SOS_11_C3;
    WORD Vif_SOS_11_C4;
    WORD Vif_SOS_12_C0;
    WORD Vif_SOS_12_C1;
    WORD Vif_SOS_12_C2;
    WORD Vif_SOS_12_C3;
    WORD Vif_SOS_12_C4;
}VIFSOS1112;

typedef struct DLL_PACKED _VIFSOS33
{
    WORD Vif_SOS_33_C0;
    WORD Vif_SOS_33_C1;
    WORD Vif_SOS_33_C2;
    WORD Vif_SOS_33_C3;
    WORD Vif_SOS_33_C4;
}VIFSOS33;
# 666 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVIF.h"
INTERFACE void DRV_VIF_Version(void);







INTERFACE void DRV_VIF_SetClock(BOOL bEnable);
# 683 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVIF.h"
INTERFACE void DRV_VIF_Init(VIFInitialIn * pVIF_InitData, DWORD u32InitDataLen);






INTERFACE void DRV_VIF_Reset(void);






INTERFACE void DRV_VIF_Exit(void);







INTERFACE void DRV_VIF_Handler(BOOL bAutoScan);







INTERFACE void DRV_VIF_SetSoundSystem(VIFSoundSystem ucSoundSystem);







INTERFACE void DRV_VIF_SetIfFreq(IfFrequencyType u16IfFreq);






INTERFACE U8 DRV_VIF_Read_CR_FOE(void);






INTERFACE U8 DRV_VIF_Read_CR_LOCK_STATUS(void);







INTERFACE void DRV_VIF_BypassDBBAudioFilter(BOOL bEnable);







INTERFACE void DRV_VIF_SetFreqBand(FrequencyBand u8FreqBand);






INTERFACE BOOL DRV_VIF_GetInputLevelIndicator(void);
# 768 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVIF.h"
INTERFACE BOOL DRV_VIF_SetParameter(VIF_PARA_GROUP paraGroup, void * pVIF_Para, DWORD u32DataLen);







INTERFACE void DRV_VIF_ShiftClk(BYTE VifShiftClk);







INTERFACE MS_U32 MDrv_VIF_SetPowerState(EN_POWER_MODE u16PowerState);
# 793 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVIF.h"
INTERFACE void DRV_VIF_WriteByte(U32 u32Reg, U8 u8Val );







INTERFACE U8 DRV_VIF_ReadByte(U32 u32Reg );
#undef INTERFACE

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOPSCD_v2.h"
#ifndef _GOPSCD_H_
#define _GOPSCD_H_ 



#ifdef __cplusplus
extern "C"
{
#endif







typedef enum
{

    MAPI_CMD_GOPSCD_INIT,
    MAPI_CMD_GOPSCD_SCALING,
    MAPI_CMD_GOPSCD_SET_INFO,
    MAPI_CMD_GOPSCD_GET_INFO,
    MAPI_CMD_GOPSCD_SET_HVSPSIZE,
    MAPI_CMD_GOPSCD_SET_SKIPPIXEL,
}E_GOPSCD_API_CMD_TYPE;

typedef enum
{
    E_GOPSCD_CMD_DISABLE = 0x0,
    E_GOPSCD_CMD_ENABLE = 0x1,
    E_GOPSCD_CMD_SCALING_ONCE = 0x2,
}E_GOPSCD_SCALING_CMD;

typedef struct
{
 GOPSC_Result bReturnValue;
}GOPSCD_INIT_INFO, *PGOPSCD_INIT_INFO;

typedef struct
{
 E_GOPSCD_SCALING_CMD gopscCmd;
 GOPSC_Result bReturnValue;
 MS_U8 u8FrameCount;
}GOPSCD_SCALING, *PGOPSCD_SCALING;

typedef struct
{
 GOPSC_Info* gopscInfo;
 GOPSC_Result bReturnValue;
}GOPSCD_SET_INFO, *PGOPSCD_SET_INFO;

typedef struct
{
 GOPSC_Info* gopscInfo;
 GOPSC_Result bReturnValue;
}GOPSCD_GET_INFO, *PGOPSCD_GET_INFO;

typedef struct
{
 GOPSC_SizeInfo* sizeInfo;
 MS_U32 flag;
 GOPSC_Result bReturnValue;
}GOPSCD_SET_HVSPSZIE, *PGOPSCD_SET_HVSPSZIE;

typedef struct
{
 GOPSC_SkipPixelInfo* skippixelInfo;
 MS_U32 flag;
 GOPSC_Result bReturnValue;
}GOPSCD_SET_SKIPPIXEL, *PGOPSCD_SET_SKIPPIXEL;

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCA.h"
#ifndef __DRV_CA_H__
#define __DRV_CA_H__ 

#include "MsTypes.h"
#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif

#define MSIF_CA_LIB_CODE {'C','A', '_', '_'}
#define MSIF_CA_LIBVER {'0','1'}
#define MSIF_CA_BUILDNUM {'1','1'}
#define MSIF_CA_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define CA_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_CA_LIB_CODE, \
    MSIF_CA_LIBVER, \
    MSIF_CA_BUILDNUM, \
    MSIF_CA_CHANGELIST, \
    MSIF_OS


typedef enum
{
    E_CA_DEBUG_PORT_I2C,
    E_CA_DEBUG_PORT_JTAG,
    E_CA_DEBUG_PORT_SCAN,
} CA_DEBUG_PORT;

typedef enum
{
    E_CA_DEBUG_PORT_OPEN,
    E_CA_DEBUG_PORT_PASSWD,
    E_CA_DEBUG_PORT_CLOSE
} CA_DEBUG_PORT_MODE;

typedef enum
{
    E_CA_LOCK_WRITE = 1 << 0,
    E_CA_LOCK_READ = 1 << 1
} CA_LOCK_TYPE;

typedef enum
{
    E_BOOT_LockWord_W0000_0511_Addr,
    E_BOOT_LockWord_W0512_1023_Addr,
    E_BOOT_LockWord_W1024_1535_Addr,
    E_BOOT_LockWord_W1536_2047_Addr,
    E_BOOT_LockWord_W2048_2559_Addr,
    E_BOOT_LockWord_W2560_3071_Addr,
    E_BOOT_LockWord_W3072_3583_Addr,
    E_BOOT_LockWord_W3584_3759_Addr,
    E_LockWord_v_PubOtpOID,
    E_LockWord_v_PubOtpVID,
    E_LockWord_v_pubOtpUniqueID1,
    E_LockWord_v_pubOtpUniqueID2,
    E_LockWord_CA_Reserved,
    E_LockWord_CA_MSID,

    E_BOOT_LockWord_W3072_3391_Addr,
    E_LockWord_v_pubOtpUniqueID3,
    E_LockWord_v_pubOtpUniqueID4,

    E_LockWord_CAV_SecretKey6_W=0x106,
    E_LockWord_CAV_SecretKey6_R=0x116,

    E_LockWord_RSA_1_W=0x201,

    E_LockWord_Debugport_PWD_W=0x301,
    E_LockWord_Debugport_PWD_R=0x311,

    E_LockWord_CA_reserved0=0x401,
    E_LockWord_CA_reserved1=0x402,
    E_LockWord_CA_reserved2=0x403,
    E_LockWord_CA_reserved3=0x404,
} CA_OTP_LOCK;
# 197 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCA.h"
typedef enum
{
    E_CA_VENDOR_NULL,
    E_CA_VENDOR_CONAX = 0x0300,
    E_CA_VENDOR_ECHOSTAR = 0x0500,
    E_CA_VENDOR_IRDETO = 0x0900,
    E_CA_VENDOR_LATENS = 0x0C00,
    E_CA_VENDOR_NDS = 0x0E00,
    E_CA_VENDOR_NAGRA = 0x0E10,
    E_CA_VENDOR_SMI = 0x1300,
    E_CA_VENDOR_VIACCESS = 0x1600,
    E_CA_VENDOR_VERIMATRIX = 0x1610,
    E_CA_VENDOR_UNKNOW = 0xFFFF
} CA_VENDOR_CODE;

typedef struct
{
    MS_U32 u32FwAddr;
    MS_U32 u32FwSize;
} CA_BGC_CFG;

typedef struct
{
    MS_U32 u32BGCMode;
    MS_U32 u32ProtectAddr;
    MS_U32 u32ProtectSize;
    MS_U8 u8Golden[32];
    MS_U8 u8ResetPassword[4];
    MS_U16 u16Interval;
} CA_BGC_SEC_CFG;

typedef enum
{
    E_CA_SECRET_KEY1,
    E_CA_SECRET_KEY2,
    E_CA_SECRET_KEY3,
    E_CA_SECRET_KEY4,
    E_CA_SECRET_KEY5,
    E_CA_SECRET_KEY6,
    E_CA_SECRET_KEY7,
    E_CA_SECRET_KEY8,
} CA_SECRET_KEY;

typedef enum
{
    E_CA_RSA_KEY0,
    E_CA_RSA_KEY1,
} CA_RSA_KEY;

typedef enum
{
    E_CA_CUSTOM_SECURE_MAGIC,
} CA_CUSTOM_DATA;


DLL_PUBLIC MS_BOOL MDrv_CA_Init(void);
DLL_PUBLIC MS_U32 MDrv_CA_MaxDeviceIdSize(void);
DLL_PUBLIC MS_U32 MDrv_CA_MaxReservedSize(void);




DLL_PUBLIC MS_BOOL MDrv_CA_OTP_EnableSecureBoot(void);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_IsSecureBootEnabled(void);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetBlockLock(MS_U32 u32Start, MS_U32 u32End, CA_LOCK_TYPE eLockType);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetBlockLock(MS_U32 *pu32Start, MS_U32 *pu32End, CA_LOCK_TYPE *eLockType);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetRSAextID(MS_U32 u32Value);
DLL_PUBLIC MS_U32 MDrv_CA_OTP_GetRSAextID(void);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetTEERSAextID(MS_U32 u32Value);
DLL_PUBLIC MS_U32 MDrv_CA_OTP_GetTEERSAextID(void);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetHASH_REF_VER(MS_U32 u32HASH0_REF_VER, MS_U32 u32HASH2_REF_VER);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetHASH_REF_VER(MS_U32 *pu32HASH0_REF_VER, MS_U32 *pu32HASH2_REF_VER);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetHASH1_REF_VER(MS_U32 u32HASH1_REF_VER);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetHASH1_REF_VER(MS_U32 *pu32HASH1_REF_VER);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetHASH_TEE_REF_VER(MS_U32 u32HASH_TEE0_REF_VER, MS_U32 u32HASH_TEE1_REF_VER, MS_U32 u32HASH_TEE2_REF_VER);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetHASH_TEE_REF_VER(MS_U32 *pu32HASH_TEE0_REF_VER, MS_U32 *pu32HASH_TEE1_REF_VER, MS_U32 *pu32HASH_TEE2_REF_VER);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetDebugPortMode(CA_DEBUG_PORT eDebugPort, CA_DEBUG_PORT_MODE eMode);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetDebugPortMode(CA_DEBUG_PORT eDebugPort, CA_DEBUG_PORT_MODE *eMode);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetDeviceId(const MS_U8 *pu8Did, MS_U32 u32Size);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetDeviceId(MS_U8 *pu8Did, MS_U32 u32Size);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_WriteReserved(const MS_U8 *pu8RData, MS_U32 u32Size);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_ReadReserved(MS_U8 *pu8RData, MS_U32 u32Size);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_EnableSecureCWMode(void);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_IsSecureCWMode(void);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_DumpKeyProperty(MS_U32 u32KeyNumber);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetSecretKey(CA_SECRET_KEY eKeySel, const MS_U8 *pu8SecretKey, MS_U32 u32Size);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetSecretKey(CA_SECRET_KEY eKeySel, MS_U8 *pu8SecretKey, MS_U32 u32Size);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetRSAKey(CA_RSA_KEY eKeySel, const MS_U8 *pu8RSAKey, MS_U32 u32Size);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetRSAKey(CA_RSA_KEY eKeySel, MS_U8 *pu8RSAKey, MS_U32 u32Size);

DLL_PUBLIC MS_BOOL MDrv_CA_OTP_SetDebugPortPassword(CA_DEBUG_PORT eDebugPort, const MS_U8 *pu8Password, MS_U32 u32Size);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_GetDebugPortPassword(CA_DEBUG_PORT eDebugPort, MS_U8 *pu8Password, MS_U32 u32Size);




DLL_PUBLIC MS_BOOL MDrv_CA_OTP_IsBlank(MS_U32 addr);
DLL_PUBLIC MS_U32 MDrv_CA_OTP_Read(MS_U32 addr);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_Write(MS_U32 addr, MS_U32 value);

DLL_PUBLIC MS_BOOL MDrv_CA_Locked(CA_OTP_LOCK eLock);
DLL_PUBLIC MS_BOOL MDrv_CA_OTP_Lock(CA_OTP_LOCK eLock);




DLL_PUBLIC MS_U32 MDrv_CA_Random(void);




DLL_PUBLIC MS_U32 MDrv_CA_OTP_ReadCAVendor(void);





DLL_PUBLIC MS_BOOL MDrv_CA_MBX_Init(void);
DLL_PUBLIC MS_U32 MDrv_CA_MBX_Write(MS_U8* u8Addr, MS_U32 u32Size);
DLL_PUBLIC MS_U32 MDrv_CA_MBX_Read(MS_U8* u8Addr, MS_U32 u32Size);




DLL_PUBLIC MS_BOOL MDrv_CA_STR_Init(void);
DLL_PUBLIC MS_BOOL MDrv_CA_STR_SetParamAddr(MS_U8 *pu8VAddr);
DLL_PUBLIC MS_BOOL MDrv_CA_STR_SetMAC(MS_U8 *pu8MAC, MS_U32 u32MACSize);




DLL_PUBLIC MS_BOOL MDrv_CA_BGC_Init(CA_BGC_CFG stBGCCfg);
DLL_PUBLIC MS_BOOL MDrv_CA_BGC_SetSection(MS_U32 u32SecId, const CA_BGC_SEC_CFG* const pstSecCfg);
DLL_PUBLIC MS_BOOL MDrv_CA_BGC_ResetSection(MS_U32 u32SecId, const MS_U8* const pu8RstPSWD);




DLL_PUBLIC MS_BOOL MDrv_CA_CustomData_Write(CA_CUSTOM_DATA eData, MS_U32 u32Data);
DLL_PUBLIC MS_BOOL MDrv_CA_CustomData_Read(CA_CUSTOM_DATA eData, MS_U32* pu32Data);


#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_v2.h"
#ifndef _XC_H_
#define _XC_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
#include "MsTypes.h"
#include "UFO.h"


typedef enum
{

    E_XC_CMD_NONE = 0,
    E_XC_CMD_GET_LIB_VERSION,
    E_XC_CMD_GET_INFO,
    E_XC_CMD_GET_STATUS,
#if defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_GET_STATUS_NODELAY,
#endif
    E_XC_CMD_GET_STATUS_EX,
    E_XC_CMD_SET_DBG_LEVEL,
    E_XC_CMD_SET_FPLL_CUSTOMERMODE,
    E_XC_CMD_SET_IOMAPBASE,
    E_XC_CMD_INIT,
    E_XC_CMD_INIT_MISC,
    E_XC_CMD_GET_MISC_STATUS,
    E_XC_CMD_GET_CAPABILITY,
    E_XC_CMD_GET_CHIPCAPS,
    E_XC_CMD_EXIT,
    E_XC_CMD_SET_DYNAMIC_SCALING,
    E_XC_CMD_SET_DYNAMIC_SCALING_FLAG,
    E_XC_CMD_GET_DNR_BASEOFFSET,
    E_XC_CMD_GET_STORE_FRAMENUM,
    E_XC_CMD_GET_FRAMENUM_FACTOR,
    E_XC_CMD_SET_WINDOW,
    E_XC_CMD_SET_DUALWINDOW,
    E_XC_CMD_SET_TRAVELING_WINDOW,
    E_XC_CMD_SET_INPUTSOURCE,
#if defined(UFO_PUBLIC_HEADER_212)
    E_XC_CMD_SET_FIELD_DETECT,
#endif
    E_XC_CMD_CHECK_YUVSPACE,
    E_XC_CMD_CHECK_MEMORYFORMAT422,
    E_XC_CMD_SET_FORCE_RGBIN,
    E_XC_CMD_SET_MIRRORMODE_EX,
    E_XC_CMD_GET_MIRRORMODE_TYPEEX,
    E_XC_CMD_GET_SYNC_STATUS,
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_CONFIG_CMA,
#endif
    E_XC_CMD_SET_WAIT_OUTPUT_VSYNC,
    E_XC_CMD_SET_WAIT_INPUT_VSYNC,
    E_XC_CMD_SET_HDMI_SYNCMODE,
    E_XC_CMD_GET_HDMI_SYNCMODE,
    E_XC_CMD_SET_REPORT_WINDOW,
    E_XC_CMD_SET_SKIP_OPWRITEOFF_IN_SETWINDOW,
    E_XC_CMD_GET_SKIP_OPWRITEOFF_IN_SETWINDOW,
    E_XC_SET_SKIP_DISABLE_OPWRITEOFF_IN_FPLL,
    E_XC_CMD_SET_OPWRITEOFF_ENABLE,
    E_XC_CMD_SET_OPWRITEOFF_ENABLE_TO_REG,
    E_XC_CMD_FORCESET_OPWRITEOFF_ENABLE,
    E_XC_CMD_GET_OPWRITEOFF_ENABLE,
    E_XC_CMD_SET_DISPLAY_WIN_TO_REG,
    E_XC_CMD_GET_DISPLAY_WIN_FROM_REG,
    E_XC_CMD_SET_FREEZEIMG,
    E_XC_CMD_CHECK_FREEZEIMG,
    E_XC_CMD_SET_BOTHWINDOW_BLACKVIDEO,
    E_XC_CMD_SET_BLACKSCREEN,
    E_XC_CMD_SET_BLACKVIDEO,
    E_XC_CMD_CHECK_BLACKVIDEO_ENABLE,
    E_XC_CMD_SET_FRAMEBUFFERLESS,
    E_XC_CMD_CHECK_FRAMEBUFFERLESS,
    E_XC_CMD_SET_REQUEST_FRAMEBUFFERLESS,
    E_XC_CMD_CHECK_REQUEST_FRAMEBUFFERLESS,
    E_XC_CMD_GET_3D_HWVERSION,
    E_XC_CMD_CHECK_3D_SUPPORT_HW2DTO3D,
    E_XC_CMD_SET_3D_MODE,
    E_XC_CMD_SET_3D_MAINWIN_FIRST,
    E_XC_CMD_SET_3D_LR_EXCHANGE,
    E_XC_CMD_CHECK_3D_LR_EXCHANGED,
    E_XC_CMD_GET_3D_INPUT_MODE,
    E_XC_CMD_GET_3D_OUTPUT_MODE,
    E_XC_CMD_GET_3D_PANELTYPE,
    E_XC_CMD_GET_3D_MAINWIN_FIRST,
    E_XC_CMD_CHECK_3D_MAINSUB_IPSYNC,
    E_XC_CMD_SET_3D_VERTICALVIDEO_OFFSET,
    E_XC_CMD_GET_3D_VERTICALVIDEO_OFFSET,
    E_XC_CMD_CHECK_3D_FORMAT_SUPPORTED,
    E_XC_CMD_SET_3D_HORIZONTAL_SHIFT,
    E_XC_CMD_SET_3D_LR_SBS2LINE,
    E_XC_CMD_GET_3D_HORIZONTAL_SHIFT,
    E_XC_CMD_SET_3D_HW2DTO3D_BUFFER,
    E_XC_CMD_SET_3D_HW2DTO3D_PARAMETERS,
    E_XC_CMD_GET_3D_HW2DTO3D_PARAMETERS,
    E_XC_CMD_SET_3D_DETECT_3DFORMAT_PARAMETERS,
    E_XC_CMD_GET_3D_DETECT_3DFORMAT_PARAMETERS,
    E_XC_CMD_GET_3D_FORMAT_DETECTED_BY_CONTENT,
    E_XC_CMD_SET_NINELATTICE,
    E_XC_CMD_SET_3D_POST_PQSETTING,
    E_XC_CMD_SET_3D_FRAMEPACKING_INFO,
    E_XC_CMD_SET_3D_AUTODETECT,
    E_XC_CMD_GET_3D_AUTODETECT_3DFLAG,
    E_XC_CMD_SET_3D_SUBWINCLOCK,
    E_XC_CMD_CHECK_3D_LR_SBS2LINE,
    E_XC_CMD_CHECK_3D_SKIP_DEFAULT_LR_FLAG,
    E_XC_CMD_SET_3D_SKIP_DEFAULT_LR_FLAG,
    E_XC_CMD_SET_MUX_INIT,
    E_XC_CMD_SET_MUX_SOURCE_MONITOR,
    E_XC_CMD_SET_MUX_CREATE_PATH,
    E_XC_CMD_SET_MUX_DELETE_PATH,
    E_XC_CMD_SET_MUX_ENABLE_PATH,
    E_XC_CMD_SET_MUX_TRIGGER_PATH_SYNC_EVENT,
    E_XC_CMD_SET_MUX_TRIGGER_DEST_ONOFF_EVENT,
    E_XC_CMD_SET_MUX_ONOFF_PERIODIC_HANDLER,
    E_XC_CMD_GET_MUX_PATHINFO,
    E_XC_CMD_SET_MUX_SUPPORT_MHL_PATHINFO,
    E_XC_CMD_SET_MUX_MHL_HOTPLUG_INVERSE_INFO,
    E_XC_CMD_GET_MUX_HDMIPORT,
    E_XC_CMD_GET_MUX_INPUTSOURCE2VDYMUXPORT,
#if defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_GET_MUX_MAPPINGTAB,
#endif
    E_XC_CMD_SET_NR,
    E_XC_CMD_SET_FILM_MODE_PATCH,
    E_XC_CMD_CHECK_UC_ENABLED,
    E_XC_CMD_SET_GENERATE_SPECIFIC_TIMING,
    E_XC_CMD_GET_DE_BYPASS_MODE,
    E_XC_CMD_GET_DE_WINDOW,
    E_XC_CMD_GET_DE_WIN_WIDTH_HEIGHT_IN_DE_BYPASS_MODE,
    E_XC_CMD_GET_CAPTURE_WINDOW,
    E_XC_CMD_SET_CAPTURE_WINDOW_VSTART,
    E_XC_CMD_SET_CAPTURE_WINDOW_HSTART,
    E_XC_CMD_SET_CAPTURE_WINDOW_VSIZE,
    E_XC_CMD_SET_CAPTURE_WINDOW_HSIZE,
    E_XC_CMD_SET_SOFTWARE_RESET,
    E_XC_CMD_GET_HFREQX10,
    E_XC_CMD_GET_HFREQX1K,
    E_XC_CMD_GET_VFREQX10,
    E_XC_CMD_GET_VFREQX1K,
    E_XC_CMD_GET_ACCURATE_VFREQX1k,
    E_XC_CMD_SET_INTERRUPT_ATTACH,
    E_XC_CMD_SET_INTERRUPT_DEATTACH,
    E_XC_CMD_SET_DISABLE_INPUTSOURCE,
    E_XC_CMD_CHECK_INPUTSOURCE_DISABLED,
    E_XC_CMD_SET_CHANGE_PANELTYPE,
    E_XC_CMD_GET_CURRENT_READBANK,
    E_XC_CMD_GET_CURRENT_WRITEBANK,
    E_XC_CMD_SET_AUTO_PRESCALING,
    E_XC_CMD_GET_VSYNC_WIDTH,
    E_XC_CMD_SET_GOP_ENABLE,
    E_XC_CMD_SET_SELECT_IP_FOR_GOP,
    E_XC_CMD_SET_VOP_NEW_BLENDING_LEVEL,
    E_XC_CMD_GET_DESTINATION_INFO,
    E_XC_CMD_SET_FDMASK_BYWIN,
    E_XC_CMD_GET_FDMASK_BYWIN,
    E_XC_CMD_SET_IP1_TESTPATTERN,
    E_XC_CMD_SET_INIT_IP_FOR_INTERNAL_TIMING,
    E_XC_CMD_SET_IPMUX,
    E_XC_CMD_CHECK_HSYNC_ACTIVE,
    E_XC_CMD_CHECK_VSYNC_ACTIVE,
    E_XC_CMD_GET_AUTO_POSITION_WINDOW,
    E_XC_CMD_SET_FRAMEBUFFER_ADDRESS,
    E_XC_CMD_SET_FRCM_FRAMEBUFFER_ADDRESS,
    E_XC_CMD_CHECK_FRAMEBUFFER_ENOUGH_FOR_CUSSCALING,
    E_XC_CMD_SET_SCALER_MEMORY_REQUEST,
    E_XC_CMD_GET_PIXEL_DATA,
    E_XC_CMD_GET_AVAILABLE_SIZE,
    E_XC_CMD_SET_FRAME_COLOR,
    E_XC_CMD_SET_DISPLAY_WINDOW_COLOR,
    E_XC_CMD_GET_SUPPORT_SOURCE_TO_VE,
    E_XC_CMD_SET_OUTPUT_CAPTURE,
    E_XC_CMD_SET_GAMMA_ONOFF,
    E_XC_CMD_SET_PREGAMMA_GAIN,
    E_XC_CMD_SET_PREGAMMA_OFFSET,
    E_XC_CMD_SET_PANEL_TIMING,
    E_XC_CMD_SET_OUTPUT_TIMING_MODE,
    E_XC_CMD_SET_FREERUN_TIMING,
    E_XC_CMD_SET_CUSTOMER_SYNC_INFO,
    E_XC_CMD_GET_WAIT_FPLL_DONE,
    E_XC_CMD_GET_OUTPUT_VFREQX100,
    E_XC_CMD_GET_OP1_OUTPUT_VFREQX100,
    E_XC_CMD_CHECK_FRAMELOCK,
    E_XC_CMD_SET_CUSTOMIZE_FRC_TABLE,
    E_XC_CMD_SET_OUTPUT_FRAME_CONTROL,
    E_XC_CMD_SET_FPLL_FSM_ENABLE,
    E_XC_CMD_SET_FORCE_FREERUN,
    E_XC_CMD_CHECK_FORCE_FREERUN,
    E_XC_CMD_SET_FREERUN_FREQ,
    E_XC_CMD_SET_EXPANEL_INFO,
    E_XC_CMD_SET_FPLL_THRESHMODE,
    E_XC_CMD_GET_FPLL_THRESHMODE,
    E_XC_CMD_SET_IPAUTONOSIGNAL,
    E_XC_CMD_GET_IPAUTONOSIGNAL,
    E_XC_CMD_SET_IPAUTOCOAST,
    E_XC_CMD_SET_IPCOAST_DEBOUNCE_ENABLE,
    E_XC_CMD_SET_CLEAR_IPCOAST_STATUS,
    E_XC_CMD_SET_FPLL_MANUAL_SETTING_ENABLE,
    E_XC_CMD_SET_FPLL_BOUNDARY_TEST,
    E_XC_CMD_SET_OFFLINE_DETECTION,
    E_XC_CMD_GET_OFFLINE_DETECTION,
    E_XC_CMD_SET_OFFLINE_SOG_THRESHOLD,
    E_XC_CMD_SET_OFFLINE_SOG_BW,
    E_XC_CMD_SET_OFFLINE_INIT,
    E_XC_CMD_SET_EXTRA_FETCH_ADV_LINE,
    E_XC_CMD_SET_VGA_SOG_ENABLE,
    E_XC_CMD_SET_WINDOW_ENABLE,
    E_XC_CMD_CHECK_SUBWINDOW_ENABLE,
    E_XC_CMD_SET_BORDER_FORMAT,
    E_XC_CMD_SET_BORDER_ENABLE,
    E_XC_CMD_SET_ZORDER_MAINWINDOW_FIRST,
    E_XC_CMD_SET_PQ_LOADFUNCTION,
    E_XC_CMD_CHECK_H_NONLINEAR_SCALING,
    E_XC_CMD_SET_EUROHDTV_SUPPORT_ENABLE,
    E_XC_CMD_SET_EUROHDTV_DETECTION_ENABLE,
    E_XC_CMD_READBYTE,
    E_XC_CMD_WRITEBYTE,
    E_XC_CMD_WRITEBYTEMSK,
    E_XC_CMD_WRITE2BYTEMSK,
    E_XC_CMD_W2BYTE,
    E_XC_CMD_R2BYTE,
    E_XC_CMD_W4BYTE,
    E_XC_CMD_R4BYTE,
    E_XC_CMD_R2BYTEMSK,
    E_XC_CMD_W2BYTEMSK,
    E_XC_CMD_MLOAD_INIT,
    E_XC_CMD_MLOAD_ENABLE,
    E_XC_CMD_MLOAD_GETSTATUS,
    E_XC_CMD_MLOAD_WRITE_CMD_AND_FIRE,
    E_XC_CMD_MLOAD_WRITE_CMDS_AND_FIRE,
    E_XC_CMD_MLOAD_COMBINE,
    E_XC_CMD_MLG_INIT,
    E_XC_CMD_MLG_ENABLE,
    E_XC_CMD_MLG_GET_CAPS,
    E_XC_CMD_MLG_GETSTATUS,
    E_XC_CMD_SET_OSD2VEMODE,
    E_XC_CMD_SET_IP2_PREFILTER_ENABLE,
    E_XC_CMD_GET_PIXELRGB,
    E_XC_CMD_SET_KEEP_PIXELPOINTER_APPEAR,
    E_XC_CMD_SET_MEMORY_FORMAT_EX,
    E_XC_CMD_CHECK_REQUEST_FRAMEBUFFERLESS_MODE,
    E_XC_CMD_SET_SKIP_SWRESET,
    E_XC_CMD_SET_REPORTWINDOW_FOR_FRAMECOLOR,
    E_XC_CMD_SET_OSDLAYER,
    E_XC_CMD_GET_OSDLAYER,
    E_XC_CMD_SET_VIDEO_ALPHA,
    E_XC_CMD_GET_VIDEO_ALPHA,
    E_XC_CMD_SKIP_WAIT_VSYNC,
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) ||defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_SET_CMA_HEAP_ID,
#endif
    E_XC_CMD_SET_OP2VOP_DE_SELECTION,
    E_XC_CMD_SET_FRC_WINDOW,
    E_XC_CMD_SET_2INITFACTOR_ENABLE,
    E_XC_CMD_CHECK_FIELDPACKINGMODE_SUPPORTED,
    E_XC_CMD_PREINIT,
    E_XC_CMD_GET_BUFFERDATA,
    E_XC_CMD_SET_BUFFERDATA,
    E_XC_CMD_SET_MAINWINDOW_ENABLE,
    E_XC_CMD_SET_SUBWINDOW_ENABLE,
    E_XC_CMD_SET_SUBWINDOW_DISABLE,
    E_XC_CMD_SET_PIXEL_SHIFT,
    E_XC_CMD_SET_VIDEO_ON_OSD,
    E_XC_CMD_SET_OSD_LAYER_BLEANDING,
    E_XC_CMD_SET_OSD_LAYER_ALPHA,
    E_XC_CMD_SET_OSD_BLENDING_FORMULA,
    E_XC_CMD_GET_REPORT_PIXEL_INFO,
    E_XC_CMD_SET_SCALING,
    E_XC_CMD_SET_MCDI_BUFFERADDRESS,
    E_XC_CMD_SET_MCDI_ENABLE,
    E_XC_CMD_SEND_CMD2FRC,
    E_XC_CMD_GET_MSG_FROM_FRC,
    E_XC_CMD_SET_AUTO_RWBANK_ENABLE,
    E_XC_CMD_SET_RWBANK_MAPPING_NUM,
    E_XC_CMD_GET_RWBANK_MAPPING_NUM,
    E_XC_CMD_GET_RWBANK_MAPPING_NUM_FOR_ZAP,
    E_XC_CMD_SET_BOBMODE,
    E_XC_CMD_SET_FORCE_READBANK,
    E_XC_CMD_SET_LOCK_POINT,
    E_XC_CMD_LD_INIT,
    E_XC_CMD_SET_LD_MEMORYADDRESS,
    E_XC_CMD_GET_LD_VALUE,
    E_XC_CMD_SET_LD_LEVEL,
    E_XC_CMD_SET_LD_TURNOFF_LDBL,
    E_XC_CMD_SET_NOTUPDATE_SPI_DATA_FLAGS,
    E_XC_CMD_SET_LD_USERMODEFLAGS,
    E_XC_CMD_SET_BL_LEVEL,
    E_XC_CMD_SET_BWS_MODE,
    E_XC_CMD_SET_FRC_COLOR_PATH_CONTROL,
    E_XC_CMD_SET_FRC_OP2_RGBGAIN,
    E_XC_CMD_SET_FRC_OP2_RGBOFFSET,
    E_XC_CMD_SET_FRC_OP2_DITHER,
    E_XC_CMD_FRC_BYPASS,
    E_XC_CMD_FRC_MUTE,
    E_XC_CMD_SET_FORCE_READ_FRAME,
    E_XC_CMD_SET_CSC,
    E_XC_CMD_SET_REGISTER_PQ_FPLL_THRESH_MODE,
    E_XC_CMD_GET_FREERUN_STATUS,
    E_XC_CMD_SET_BYPASS_CSC,
    E_XC_CMD_GET_DS_FORCE_INDEX_SUPPORTED,
    E_XC_CMD_SET_DS_FORCE_INDEX,
    E_XC_CMD_SET_DS_INDEX_SOURCE_SELECT,
    E_XC_CMD_GET_DS_STATUS,
#if defined(UFO_PUBLIC_HEADER_212)
    E_XC_CMD_SET_DS_REGMODE,
#endif
#if defined(UFO_PUBLIC_HEADER_300)
    E_XC_CMD_SET_DS_FORCEI_DEIMODE,
#endif
    E_XC_CMD_OSDC_INITSETTING,
    E_XC_CMD_OSDC_SET_OUTPUTVFREQX10,
    E_XC_CMD_OSDC_CONTROL,
    E_XC_CMD_OSDC_GET_DESTINATION_INFO,
    E_XC_CMD_SET_POWERSTATE,
    E_XC_CMD_SET_BYPASS_OSDVSYNC_POS,
    E_XC_CMD_SET_BYPASS_INPUTSRC,
    E_XC_CMD_SET_SEAMLESS_ZAPPING,
    E_XC_CMD_GET_SEAMLESS_ZAPPING_STATUS,
    E_XC_CMD_SET_VTRACK_PAYLOADDATA,
    E_XC_CMD_SET_VTRACK_USERDEFINED_SETTING,
    E_XC_CMD_SET_VTRACK_ENABLE,
    E_XC_CMD_PRESET_PQINFO,
    E_XC_GET_OP1_TESTPATTERN_ENABLED,
    E_XC_SET_OP1_TESTPATTERN,
    E_XC_SET_OP2_TESTPATTERN,
    E_XC_CHECK_WHITEBALANCE_PATTERN_MODE,
    E_XC_SET_HLINEARSCALING,
    E_XC_SET_ENABLE_T3D,
    E_XC_SET_FRC_INPUTTIMING,
    E_XC_GET_FRC_INPUTTIMING,
    E_XC_CMD_GET_VBOX_INFO,
    E_XC_SET_OSD_DETECT,
    E_XC_GET_OSD_DETECT,
    E_XC_IS2K2KTOFRCMODE,
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300)
    E_XC_CMD_ENABLE_SWITCH_MAIN_SUB_ZORDER,
#endif

    E_XC_CMD_SET_XC_VOP,
    E_XC_CMD_GET_SWDSIndex,
    E_XC_CMD_GET_IS_SupportSWDS,
#if defined(UFO_PUBLIC_HEADER_500_3) ||defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_GET_FRCM_FRAMENUM,
#endif
    E_XC_CMD_SET_PIXEL_SHIFT_FEATURES,
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_IS_SUPPORT_2_STEP_SCALING,
#endif

#if defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_GET_PQ_PATH,
#endif
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_700)
    E_XC_ENABLE_LOCKFREQONLY,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_500)||defined(UFO_PUBLIC_HEADER_700)
#ifdef UFO_XC_SET_DSINFO_V0
    E_XC_CMD_SET_DSINFO,
#endif
#elif defined(UFO_PUBLIC_HEADER_300)
    E_XC_CMD_SET_DSINFO,
#endif

#if defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_DUMP_SHM,
#endif
#if defined(UFO_PUBLIC_HEADER_500_3) ||defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)

    E_XC_CMD_SET_BWD_CONFIG,
#endif

#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)

    E_XC_CMD_SET_FORCE_WRITE,
    E_XC_CMD_GET_FORCE_WRITE,
#elif (defined(UFO_PUBLIC_HEADER_500) && defined(UFO_XC_FORCEWRITE_V2))

    E_XC_CMD_SET_FORCE_WRITE,
    E_XC_CMD_GET_FORCE_WRITE,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
#ifdef UFO_XC_AUTO_DOWNLOAD

    E_XC_CMD_AUTODOWNLOAD_CONFIG_CTRL,
    E_XC_CMD_AUTODOWNLOAD_WRITE_CTRL,
    E_XC_CMD_AUTODOWNLOAD_FIRE_CTRL,
#endif
#ifdef UFO_XC_HDR
#if (UFO_XC_HDR_VERSION == 2)
    E_XC_CMD_HDR_CTRL,
#endif
#endif
    E_XC_CMD_MLOAD_CUS_INIT,
    E_XC_CMD_MLOAD_CUS_ENABLE,
#endif

#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_OPTEE_CTL,
    E_XC_CMD_OPTEE_CHECKRBASE,
    E_XC_CMD_OPTEE_MUX,
    E_XC_CMD_GET_RES_BY_PIPE,
    E_XC_CMD_CONFIG_PIPE,
    E_XC_CMD_CHECK_PIPE,
    E_XC_CMD_POLL_EVENT,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700)
    E_XC_CMD_GET3DFORMAT,
#endif
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)

#ifdef UFO_XC_SUPPORT_DUAL_MIU
    E_XC_CMD_ENABLE_DUAL_MODE,
#endif
#endif
    E_XC_CMD_SET_SWDR_INFO,
    E_XC_CMD_GET_SWDR_INFO,


    E_XC_CMD_GET_OUTPUT_VFREQ,
    E_XC_CMD_GET_CURRENT_OUTPUTVFREQX100,
    E_XC_CMD_SET_MEMORY_WRITE_REQUEST,
    E_XC_CMD_SET_MEMORY_FORMAT,
    E_XC_CMD_SET_OUTPUT_ADJUST_SETTING,
    E_XC_CMD_SET_FPLL_FSM,
    E_XC_CMD_SET_MIRROR_MODE_ENABLE,
    E_XC_CMD_SET_MIRROR_MODE2_ENABLE,
#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500_3)
#ifdef UFO_XC_SETBLACKVIDEOBYMODE
    E_XC_CMD_SET_BLACKVIDEO_BYMODE,
#endif
#endif

#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)
#ifdef UFO_XC_FB_LEVEL
    E_XC_CMD_SET_FB_LEVEL,
    E_XC_CMD_GET_FB_LEVEL,
#endif
#ifdef UFO_XC_DE_MODE
    E_XC_CMD_SET_DE_MODE,
#endif
#endif

#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500)
    E_XC_CMD_SET_TESTPATTERN,
#endif
#if defined(UFO_PUBLIC_HEADER_300) && defined(STELLAR)
    E_XC_CMD_S_DISP_CTRL,
#endif

#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_300)
    E_XC_CMD_VIDEO_PLAYBACK_CTRL,
#endif

#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500)
    E_XC_CMD_SWDS_FIRE,
#endif
    E_XC_CMD_GET_CONFIG,
    E_XC_CMD_GET_FDMASK_STATUS,
#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_CMD_SET_SCAN_TYPE,
#endif
#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_CMD_MAX = 500,
#else
    E_XC_CMD_MAX,
#endif



    E_XC_ADC_CMD_NONE,
    E_XC_ADC_CMD_SETCVBSOUT,
    E_XC_ADC_CMD_ISCVBSOUTENABLED,
    E_XC_ADC_CMD_SETPCCLOCK,
    E_XC_ADC_CMD_SETPHASE,
    E_XC_ADC_CMD_SETPHASEEX,
    E_XC_ADC_CMD_GETPHASERANGE,
    E_XC_ADC_CMD_GETPHASE,
    E_XC_ADC_CMD_GETPHASEEX,
    E_XC_ADC_CMD_ISSCARTRGB,
    E_XC_ADC_CMD_GETPCCLOCK,
    E_XC_ADC_CMD_GETSOGLEVELRANGE,
    E_XC_ADC_CMD_SETSOGLEVEL,
    E_XC_ADC_CMD_POWEROFF,
    E_XC_ADC_CMD_GETDEFAULTGAINOFFSET,
    E_XC_ADC_CMD_GETMAXIMALOFFSETVALUE,
    E_XC_ADC_CMD_GETMAXIMALGAINVALUE,
    E_XC_ADC_CMD_GETCENTERGAIN,
    E_XC_ADC_CMD_GETCENTEROFFSET,
    E_XC_ADC_CMD_SETGAIN,
    E_XC_ADC_CMD_SETOFFSET,
    E_XC_ADC_CMD_ADJUSTGAINOFFSET,
    E_XC_ADC_CMD_SOURCE_CALIBRATE,
    E_XC_ADC_CMD_SETSOGCAL,
    E_XC_ADC_CMD_SETRGB_PIPE_DELAY,
    E_XC_ADC_CMD_SCARTRGB_SOG_CLAMPDELAY,
    E_XC_ADC_CMD_SET_YPBPRLOOSELPF,
    E_XC_ADC_CMD_SET_SOGBW,
    E_XC_ADC_CMD_SETCLAMPDURATION,
    E_XC_ADC_CMD_ENABLEHWCALIBRATION,
    E_XC_ADC_CMD_SET_IDACCURRENTMODE,
    E_XC_ADC_CMD_GET_IDACCURRENTMODE,
    E_XC_ADC_CMD_MAX,


    E_XC_AUTO_CMD_NONE,
    E_XC_AUTO_CMD_GEOMETRY,
    E_XC_AUTO_CMD_GEOMETRY_EX,
    E_XC_AUTO_CMD_STOPAUTOGEOMETRY,
    E_XC_AUTO_CMD_GAINOFFSET,
    E_XC_AUTO_CMD_GETHWFIXEDGAINOFFSET,
    E_XC_AUTO_CMD_SETVALIDDATA,
    E_XC_AUTO_CMD_AUTOOFFSET,
    E_XC_AUTO_CMD_DETECTWIDTH,
    E_XC_AUTO_CMD_SETCALIBRATIONMODE,
    E_XC_AUTO_CMD_GETCALIBRATIONMODE,
    E_XC_AUTO_CMD_GETSYNCINFO,
    E_XC_AUTO_CMD_MAX ,


    E_XC_MHL_CMD_NONE,
    E_XC_MHL_CMD_INIT,
    E_XC_MHL_CMD_HANDLER,
    E_XC_MHL_CMD_SETHPD,
    E_XC_MHL_CMD_POWERCTRL,
    E_XC_MHL_CMD_WAKEUPDETECT_HANDLER,
    E_XC_MHL_CMD_MAX,


    E_XC_MODEPARSE_CMD_NONE,
    E_XC_MODEPARSE_CMD_INIT,
    E_XC_MODEPARSE_CMD_MATCHMODE,
    E_XC_MODEPARSE_CMD_MATCHMODEEX,
    E_XC_MODEPARSE_CMD_MAX,


    E_XC_PCMONITOR_CMD_NONE,
    E_XC_PCMONITOR_CMD_INIT,
    E_XC_PCMONITOR_CMD_RESTART,
    E_XC_PCMONITOR_CMD_SETTIMINGCOUNT,
    E_XC_PCMONITOR_CMD,
    E_XC_PCMONITOR_CMD_GETCURRENTSTATE,
    E_XC_PCMONITOR_CMD_GETSYNCSTATUS,
    E_XC_PCMONITOR_CMD_GET_HFREQX10,
    E_XC_PCMONITOR_CMD_GET_HFREQX1K,
    E_XC_PCMONITOR_CMD_GET_VFREQX10,
    E_XC_PCMONITOR_CMD_GET_VFREQX1K,
    E_XC_PCMONITOR_CMD_GET_VTOTAL,
    E_XC_PCMONITOR_CMD_GET_DVI_HDMI_DE_INFO,
    E_XC_PCMONITOR_CMD_SYNCLOSS,
    E_XC_PCMONITOR_CMD_INVALIDTIMINGDETECT,
    E_XC_PCMONITOR_CMD_SETTIMINGCOUNTEX,
    E_XC_PCMONITOR_CMD_MAX,


    E_XC_HDMI_IF_CMD_NONE,
    E_XC_HDMI_IF_CMD_FUNC_CAPS,
    E_XC_HDMI_IF_CMD_INIT,
    E_XC_HDMI_IF_CMD_EXIT,
    E_XC_HDMI_IF_CMD_PKT_RESET,
    E_XC_HDMI_IF_CMD_PULLHPD,
    E_XC_HDMI_IF_CMD_GC_INFO,
    E_XC_HDMI_IF_CMD_PACKET_RECEIVED,
    E_XC_HDMI_IF_CMD_GET_COLORFORMAT,
    E_XC_HDMI_IF_CMD_GET_COLORRANGE,
    E_XC_HDMI_IF_CMD_SET_EQ,
    E_XC_HDMI_IF_CMD_SET_EQ_TO_PORT,
    E_XC_HDMI_IF_CMD_AUDIO_MUTE_ENABLE,
    E_XC_HDMI_IF_CMD_AUDIO_STATUS_CLEAR,
    E_XC_HDMI_IF_CMD_GET_ASPECTRATIO,
    E_XC_HDMI_IF_CMD_GET_ACTIVEFORMAT_ASPECTRATIO,
    E_XC_HDMI_IF_CMD_GET_AVIINFOFRAMEVER,
    E_XC_HDMI_IF_CMD_ERR_STATUS_UPDATE,
    E_XC_HDMI_IF_CMD_GET_TMDS_FREQ,
    E_XC_HDMI_IF_CMD_GET_POLLINGSTATUS,
    E_XC_HDMI_IF_CMD_ISHDMI_MODE,
    E_XC_HDMI_IF_CMD_GET_MID_INFO,
    E_XC_HDMI_IF_CMD_GET_PACKET_VALUE,
    E_XC_DVI_IF_CMD_CHANNELPHASESTATUS,
    E_XC_DVI_IF_CMD_SOFTWARERESET,
    E_XC_DVI_IF_CMD_RESET,
    E_XC_HDMI_IF_CMD_AVIINFO_ACTIVEINFOPRESENT,
    E_XC_DVI_IF_CMD_CLKPULLLOW,
    E_XC_DVI_IF_CMD_SWITCHSRC,
    E_XC_HDMI_IF_CMD_SETFORCLOCKLESSTHAN70MHZ,
    E_XC_HDMI_IF_CMD_DVI_ADJUST,
    E_XC_HDMI_IF_CMD_SETUPDATEPHASELINECOUNT,
    E_XC_HDCP_IF_CMD_ENABLE,
    E_XC_HDMI_IF_CMD_SET_HDCP_ENABLE,
    E_XC_HDCP_IF_CMD_CLEARSTATUS,
    E_XC_HDCP_IF_CMD_INITPRODUCTIONKEY,
    E_XC_HDCP_IF_CMD_GETSTATUS,
    E_XC_HDCP_IF_CMD_VSYNC_END_EN,
    E_XC_HDMI_IF_CMD_AUDIO_OUTPUT,
    E_XC_HDMI_IF_CMD_AUDIO_CP_HDR_INFO,
    E_XC_HDMI_IF_CMD_AUDIO_CHANNEL_STATUS,
    E_XC_HDMI_IF_CMD_GETLIBVER,
    E_XC_HDMI_IF_CMD_GETINFO,
    E_XC_HDMI_IF_CMD_GETSTATUS,
    E_XC_HDMI_IF_CMD_READ_DDCRAM,
    E_XC_HDMI_IF_CMD_PROG_DDCRAM,
    E_XC_HDMI_IF_CMD_GET_CONTENT_TYPE,
    E_XC_HDMI_IF_CMD_GET_EXTCOLORIMETRY,
    E_XC_HDMI_IF_CMD_GET_PIXEL_REPETITION,
    E_XC_HDMI_IF_CMD_CHECK_4K2K,
    E_XC_HDMI_IF_CMD_3D_4KX2K_PROCESS,
    E_XC_HDMI_IF_CMD_AVG_SCALERINGDOWN,
    E_XC_HDMI_IF_CMD_CHECK_ADDITIONAL_FORMAT,
    E_XC_HDMI_IF_CMD_GET_3D_STRUCTURE,
    E_XC_HDMI_CMD_GET_3D_EXT_DATA,
    E_XC_HDMI_IF_CMD_GET_3D_META_FIELD,
    E_XC_HDMI_IF_CMD_GET_VIC_CODE,
    E_XC_HDMI_IF_CMD_GET_4KX2K_VIC_CODE,
    E_XC_HDMI_IF_CMD_ARC_PINCONTROL,
    E_XC_HDMI_IF_CMD_DVI_SOFTWARE_RESET,
    E_XC_HDMI_IF_CMD_SET_POWERSTATE,
    E_XC_HDMI_IF_CMD_DVI_HF_ADJUST,
    E_XC_HDMI_IF_CMD_CHECK_HDMI20_SETTING,
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_300) ||defined(UFO_PUBLIC_HEADER_500)
    E_XC_HDMI_IF_CMD_STABLE_POLLING,
    E_XC_HDMI_IF_CMD_GET_SOURCE_VERSION,
#endif
    E_XC_HDMI_IF_CMD_SET_5V_DETECT_GPIO_SELECT,
    E_XC_HDMI_IF_CMD_GET_DE_STABLE_STATUS,
    E_XC_HDMI_IF_CMD_Check_HDCP14,
#if defined(UFO_PUBLIC_HEADER_700)
    E_XC_HDMI_IF_CMD_GET_DATA_INFO,
#endif

#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_HDMI_IF_CMD_HDCP22_FILL_CIPHER_KEY = 800,
#else
    E_XC_HDMI_IF_CMD_HDCP22_FILL_CIPHER_KEY = 600,
#endif
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_300) ||defined(UFO_PUBLIC_HEADER_500)
    E_XC_HDMI_IF_CMD_HDCP22_INIT_CBFUNC,
#endif
    E_XC_HDMI_IF_CMD_HDCP22_PORT_INIT,
    E_XC_HDMI_IF_CMD_HDCP22_POLLING_READ_DONE,
    E_XC_HDMI_IF_CMD_HDCP22_ENABLE_CIPHER,
    E_XC_HDMI_IF_CMD_HDCP22_SEND_MSG,
    E_XC_HDMI_IF_CMD_HDCP22_HANDLER,

#if defined(UFO_PUBLIC_HEADER_500_3)
    E_XC_HDMI_IF_CMD_CTRL = 1000,
#elif (defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700))
    E_XC_HDMI_IF_CMD_CTRL = 800,
#endif
#if defined(UFO_PUBLIC_HEADER_500_3)

    MAPI_CMD_HDMIRX_INITIAL,
    MAPI_CMD_HDMIRX_STABLE_POLLING,
    MAPI_CMD_HDMIRX_GET_SOURCE_VERSION,
    MAPI_CMD_HDMIRX_CHECK_HDCP_STATE,
    MAPI_CMD_HDMIRX_CHECK_HDCP14_KEY,
    MAPI_CMD_HDMIRX_GET_HDCP14_KEY_VAILD,
    MAPI_CMD_HDMIRX_SET_HPD_INVERT_FLAG,
    MAPI_CMD_HDMIRX_GET_PACKET_RECEIVE,

    MAPI_CMD_HDMIRX_WRITE_X74,
    MAPI_CMD_HDMIRX_READ_X74,
    MAPI_CMD_HDMIRX_SET_REPEATER,
    MAPI_CMD_HDMIRX_SET_BSTATUS,
    MAPI_CMD_HDMIRX_SET_HDMI_MODE,
    MAPI_CMD_HDMIRX_GET_INTERRUPT_STATUS,
    MAPI_CMD_HDMIRX_WRITE_KSV_LIST,
    MAPI_CMD_HDMIRX_SET_VPRIME,
    MAPI_CMD_HDMIRX_HDCP22_FILL_CIPHER_KEY,
    MAPI_CMD_HDMIRX_HDCP22_PORT_INIT,
    MAPI_CMD_HDMIRX_HDCP22_POLLING_READ_DONE,
    MAPI_CMD_HDMIRX_HDCP22_ENABLE_CIPHER,
    MAPI_CMD_HDMIRX_HDCP22_SEND_MESSAGE,
    MAPI_CMD_HDMIRX_HDCP22_HANDLER,

    MAPI_CMD_HDMIRX_CHECK_HDCP_ENC_STATE,
#endif
    E_XC_HDMI_IF_CMD_MAX,


    E_XC_VMARK_CMD_NONE = 2000,
    E_XC_VMARK_CMD_SET_VMARK_PARAMETERS,
    E_XC_VMARK_CMD_MAX,

#if defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500)
    E_XC_CMD_GET_HDMIPOLICY,
#endif
    E_XC_CMD_NUM,
} E_XC_IOCTL_CMDS;

typedef struct DLL_PACKED
{
    const MSIF_Version **ppVersion;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_LIB_VER,*pstXC_GET_LIB_VER;

typedef struct DLL_PACKED
{
    XC_ApiInfo* stReturnValue;
} stXC_CMD_GET_INFO, *pstXC_CMD_GET_INFO;

typedef struct DLL_PACKED
{
    XC_ApiStatus* pDrvStatus;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_GET_STATUS,*pstXC_GET_STATUS;

typedef struct DLL_PACKED
{
    ST_XC_APISTATUSNODELAY* pDrvStatus;
    SCALER_WIN eWindow;
    MS_U16 u16ReturnValue;
} ST_XC_GET_STATUS_NODELAY,*PST_XC_GET_STATUS_NODELAY;

typedef struct DLL_PACKED
{
    XC_ApiStatusEx* pDrvStatusEx;
    SCALER_WIN eWindow;
    MS_U16 u16ReturnValue;
} stXC_GET_STATUS_EX,*pstXC_GET_STATUS_EX;

typedef struct
{
    MS_U16 u16DbgSwitch;
    MS_BOOL bReturnValue;
} stXC_SET_DBG_LEVEL,*pstXC_SET_DBG_LEVEL;

typedef struct
{
    EN_FPLL_MODE eMode;
    EN_FPLL_FLAG eFlag;
    MS_U32 u32Data;
} stXC_SET_FPLL_CUSTOMERMODE, *pstXC_SET_FPLL_CUSTOMERMODE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CMD_SET_IOMAPBASE, *pstXC_CMD_SET_IOMAPBASE;

typedef struct DLL_PACKED
{
    XC_INITDATA *pXC_InitData;
    MS_U32 u32InitDataLen;
    MS_BOOL bReturnValue;
} stXC_INIT,*pstXC_INIT;
typedef struct DLL_PACKED
{
    XC_INITDATA *pXC_InitData;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_CONFIG,*pstXC_GET_CONFIG;

typedef struct DLL_PACKED
{
    XC_INITMISC *pXC_Init_Misc;
    MS_U32 u32InitMiscDataLen;
    E_APIXC_ReturnValue eReturnValue;
} stXC_INIT_MISC,*pstXC_INIT_MISC;

typedef struct DLL_PACKED
{
    XC_INITMISC *pXC_Init_Misc;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_MISC_STATUS, *pstXC_GET_MISC_STATUS;

typedef struct
{
    MS_U32 u32Id;
    MS_U32 u32ReturnValue;
} stXC_GET_CAPABILITY, *pstXC_GET_CAPABILITY;

typedef struct DLL_PACKED
{
    E_XC_CAPS eCapType;
    MS_U32* pRet;
    MS_U32 ret_size;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_CHIP_CAPS,*pstXC_GET_CHIP_CAPS;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_EXIT, *pstXC_EXIT;

typedef struct DLL_PACKED
{
    XC_DynamicScaling_Info *pstDSInfo;
    MS_U32 u32DSInfoLen;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_DYNAMIC_SCALING, *pstXC_SET_DYNAMIC_SCALING;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_DYNAMIC_SCALING_FLAG, *pstXC_SET_DYNAMIC_SCALING_FLAG;

typedef struct
{
    SCALER_WIN eWindow;
#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32ReturnValue;
#else
    MS_U32 u32ReturnValue;
#endif
} stXC_GET_DNR_BASEOFFSET, *pstXC_GET_DNR_BASEOFFSET;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_GET_FRAMENUM_FACTOR, *pstXC_GET_FRAMENUM_FACTOR;

typedef struct DLL_PACKED
{
    XC_SETWIN_INFO *pstXC_SetWin_Info;
    MS_U32 u32InitDataLen;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_WINDOW, *pstXC_SET_WINDOW;

typedef struct DLL_PACKED
{
    XC_SETWIN_INFO *pstXC_SetWin_Info_Main;
    XC_SETWIN_INFO *pstXC_SetWin_Info_Sub;
    MS_BOOL bReturnValue;
} stXC_SET_DUALWINDOW, *pstXC_SET_DUALWINDOW;

typedef struct DLL_PACKED
{
    XC_SETWIN_INFO *pstXC_SetWin_Info;
    MS_U32 u32InitDataLen;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_TRAVELING_WINDOW, *pstXC_SET_TRAVELING_WINDOW;

typedef struct
{
    INPUT_SOURCE_TYPE_t enInputSourceType;
    SCALER_WIN eWindow;
} stXC_SET_INPUTSOURCE, *pstXC_SET_INPUTSOURCE;
#ifdef UFO_PUBLIC_HEADER_212
typedef struct
{
    INPUT_SOURCE_TYPE_t enInputSourceType;
    EN_VIDEO_SCAN_TYPE enVideoScanType;
    SCALER_WIN eWindow;
} stXC_SET_Field_Detect, *pstXC_SET_Field_Detect;
#endif
typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_YUVSPACE, *pstXC_CHECK_YUVSPACE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_MEMORYFORMAT422, *pstXC_CHECK_MEMORYFORMAT422;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_FORCE_RGBIN, *pstXC_SET_FORCE_RGBIN;

typedef struct
{
    MirrorMode_t eMirrorMode;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_MIRRORMODE_EX, *pstXC_SET_MIRRORMODE_EX;

typedef struct
{
    SCALER_WIN eWindow;
    MirrorMode_t eReturnValue;
} stXC_GET_MIRRORMODE_TYPEEX, *pstXC_GET_MIRRORMODE_TYPEEX;

#ifdef UFO_XC_SCAN_TYPE
typedef struct
{
    E_XC_SCAN_TYPE enScanType;
} stXC_SET_SCAN_TYPE, *pstXC_SET_SCAN_TYPE;
#endif

typedef struct DLL_PACKED
{
    INPUT_SOURCE_TYPE_t eCurrentSrc;
    XC_IP_SYNC_STATUS *sXC_Sync_Status;
    SCALER_WIN eWindow;
} stXC_GET_SYNC_STATUS, *pstXC_GET_SYNC_STATUS;

typedef struct DLL_PACKED
{
    XC_CMA_CONFIG *pstXC_CMA_Config;
    XC_CMA_CLIENT enCmaClient;
    MS_U32 u32InitDataLen;
    SCALER_WIN eWindow;
} stXC_CONFIG_CMA, *pstXC_CONFIG_CMA;

typedef struct
{
    MS_U8 u8NumVSyncs;
    MS_U16 u16Timeout;
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_SET_WAIT_OUTPUT_VSYNC, *pstXC_SET_WAIT_OUTPUT_VSYNC;

typedef struct
{
    MS_U8 u8NumVSyncs;
    MS_U16 u16Timeout;
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_SET_WAIT_INPUT_VSYNC, *pstXC_SET_WAIT_INPUT_VSYNC;

typedef struct
{
    E_HDMI_SYNC_TYPE eSynctype;
} stXC_SET_HDMI_SYNCMODE, *pstXC_SET_HDMI_SYNCMODE;

typedef struct
{
    E_HDMI_SYNC_TYPE eReturnValue;
} stXC_GET_HDMI_SYNCMODE, *pstXC_GET_HDMI_SYNCMODE;

typedef struct
{
    MS_BOOL bEnable;
    MS_WINDOW_TYPE Window;
    MS_U8 u8Color;
} stXC_SET_REPORT_WINDOW, *pstXC_SET_REPORT_WINDOW;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_SKIP_OPWRITEOFF_IN_SETWINDOW, *pstXC_SET_SKIP_OPWRITEOFF_IN_SETWINDOW;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_GET_SKIP_OPWRITEOFF_IN_SETWINDOW, *pstXC_GET_SKIP_OPWRITEOFF_IN_SETWINDOW;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_SKIP_DISABLE_OPWRITEOFF_IN_FPLL, *pstXC_SET_SKIP_DISABLE_OPWRITEOFF_IN_FPLL;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_OPWRITEOFF_ENABLE, *pstXC_SET_OPWRITEOFF_ENABLE;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_OPWRITEOFF_ENABLE_TO_REG, *pstXC_SET_OPWRITEOFF_ENABLE_TO_REG;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_FORCESET_OPWRITEOFF_ENABLE, *pstXC_FORCESET_OPWRITEOFF_ENABLE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_GET_OPWRITEOFF_ENABLE, *pstXC_GET_OPWRITEOFF_ENABLE;

typedef struct DLL_PACKED
{
    MS_WINDOW_TYPE *pstDspwin;
    SCALER_WIN eWindow;
} stXC_SET_DISPLAY_WIN_TO_REG, *pstXC_SET_DISPLAY_WIN_TO_REG;

typedef struct DLL_PACKED
{
    MS_WINDOW_TYPE *pstDspwin;
    SCALER_WIN eWindow;
} stXC_GET_DISPLAY_WIN_FROM_REG, *pstXC_GET_DISPLAY_WIN_FROM_REG;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_FREEZEIMG, *pstXC_SET_FREEZEIMG;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_FREEZEIMG, *pstXC_CHECK_FREEZEIMG;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_BOTHWINDOW_BLACKVIDEO, *pstXC_SET_BOTHWINDOW_BLACKVIDEO;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_BLACKSCREEN, *pstXC_SET_BLACKSCREEN;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_BLACKVIDEO, *pstXC_SET_BLACKVIDEO;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_BLACKVIDEO_ENABLE, *pstXC_CHECK_BLACKVIDEO_ENABLE;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_FRAMEBUFFERLESS, *pstXC_SET_FRAMEBUFFERLESS;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_FRAMEBUFFERLESS, *pstXC_CHECK_FRAMEBUFFERLESS;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_REQUEST_FRAMEBUFFERLESS, *pstXC_SET_REQUEST_FRAMEBUFFERLESS;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_REQUEST_FRAMEBUFFERLESS, *pstXC_CHECK_REQUEST_FRAMEBUFFERLESS;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_GET_3D_HWVERSION, *pstXC_GET_3D_HWVERSION;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_3D_SUPPORT_HW2DTO3D, *pstXC_CHECK_3D_SUPPORT_HW2DTO3D;

typedef struct
{
    E_XC_3D_INPUT_MODE e3dInputMode;
    E_XC_3D_OUTPUT_MODE e3dOutputMode;
    E_XC_3D_PANEL_TYPE e3dPanelType;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_3D_MODE, *pstXC_SET_3D_MODE;

typedef struct
{
    MS_BOOL bMainFirst;
    MS_BOOL bReturnValue;
} stXC_SET_3D_MAINWIN_FIRST, *pstXC_SET_3D_MAINWIN_FIRST;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_3D_LR_EXCHANGE, *pstXC_SET_3D_LR_EXCHANGE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_3D_LR_EXCHANGED, *pstXC_CHECK_3D_LR_EXCHANGED;

typedef struct
{
    SCALER_WIN eWindow;
    E_XC_3D_INPUT_MODE eReturnValue;
} stXC_GET_3D_INPUT_MODE, *pstXC_GET_3D_INPUT_MODE;

typedef struct
{
    E_XC_3D_OUTPUT_MODE eReturnValue;
} stXC_GET_3D_OUTPUT_MODE, *pstXC_GET_3D_OUTPUT_MODE;

typedef struct
{
    E_XC_3D_PANEL_TYPE eReturnValue;
} stXC_GET_3D_PANELTYPE, *pstXC_GET_3D_PANELTYPE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_GET_3D_MAINWIN_FIRST, *pstXC_GET_3D_MAINWIN_FIRST;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_3D_MAINSUB_IPSYNC, *pstXC_CHECK_3D_MAINSUB_IPSYNC;

typedef struct
{
    MS_U16 u163DVerVideoOffset;
    MS_BOOL bReturnValue;
} stXC_SET_3D_VERTICALVIDEO_OFFSET, *pstXC_SET_3D_VERTICALVIDEO_OFFSET;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_GET_3D_VERTICALVIDEO_OFFSET, *pstXC_GET_3D_VERTICALVIDEO_OFFSET;

typedef struct
{
    E_XC_3D_INPUT_MODE e3dInputMode;
    E_XC_3D_OUTPUT_MODE e3dOutputMode;
    MS_BOOL bReturnValue;
} stXC_CHECK_3D_FORMAT_SUPPORTED, *pstXC_CHECK_3D_FORMAT_SUPPORTED;

typedef struct
{
    MS_U16 u16HShift;
    MS_BOOL bReturnValue;
} stXC_SET_3D_HORIZONTAL_SHIFT, *pstXC_SET_3D_HORIZONTAL_SHIFT;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bReturnValue;
} stXC_SET_3D_LR_SBS2LINE, *pstXC_SET_3D_LR_SBS2LINE;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_GET_3D_HORIZONTAL_SHIFT, *pstXC_GET_3D_HORIZONTAL_SHIFT;

typedef struct DLL_PACKED
{
    MS_PHY u32HW2DTO3D_DD_Buf;
    MS_PHY u32HW2DTO3D_DR_Buf;
    MS_BOOL bReturnValue;
} stXC_SET_3D_HW2DTO3D_BUFFER, *pstXC_SET_3D_HW2DTO3D_BUFFER;

typedef struct
{
    MS_XC_3D_HW2DTO3D_PARA st3DHw2DTo3DPara;
    MS_BOOL bReturnValue;
} stXC_SET_3D_HW2DTO3D_PARAMETERS, *pstXC_SET_3D_HW2DTO3D_PARAMETERS;

typedef struct
{
    MS_XC_3D_HW2DTO3D_PARA *pst3DHw2DTo3DPara;
    MS_BOOL bReturnValue;
} stXC_GET_3D_HW2DTO3D_PARAMETERS, *pstXC_GET_3D_HW2DTO3D_PARAMETERS;

typedef struct DLL_PACKED
{
    MS_XC_3D_DETECT3DFORMAT_PARA *pstDetect3DFormatPara;
    MS_BOOL bReturnValue;
} stXC_SET_3D_DETECT_3DFORMAT_PARAMETERS, *pstXC_SET_3D_DETECT_3DFORMAT_PARAMETERS;

typedef struct DLL_PACKED
{
    MS_XC_3D_DETECT3DFORMAT_PARA *pstDetect3DFormatPara;
    MS_BOOL bReturnValue;
} stXC_GET_3D_DETECT_3DFORMAT_PARAMETERS, *pstXC_GET_3D_DETECT_3DFORMAT_PARAMETERS;

typedef struct
{
    SCALER_WIN eWindow;
    E_XC_3D_INPUT_MODE eReturnValue;
} stXC_GET_3D_FORMAT_DETECTED_BY_CONTENT, *pstXC_GET_3D_FORMAT_DETECTED_BY_CONTENT;

typedef struct DLL_PACKED
{
    SCALER_WIN eWindow;
    ST_DETECTNL_PARA* pstDetectNLatticePara;
    MS_BOOL bReturnValue;
} stXC_SET_NINELATTICE, *pstXC_SET_NINELATTICE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_3D_POST_PQSETTING, *pstXC_SET_3D_POST_PQSETTING;

typedef struct DLL_PACKED
{
    MS_XC_3D_FPINFO_PARA *pstFPInfoPara;
    MS_BOOL bReturnValue;
} stXC_SET_3D_FRAMEPACKING_INFO, *pstXC_SET_3D_FRAMEPACKING_INFO;

typedef struct
{
    MS_BOOL bEnable;
    E_XC_3D_AUTODETECT_METHOD enDetectMethod;
    MS_BOOL bReturnValue;
} stXC_SET_3D_AUTODETECT, *pstXC_SET_3D_AUTODETECT;

typedef struct DLL_PACKED
{
    E_XC_3D_AUTODETECT_METHOD *penDetectMethod;
    MS_BOOL *pbEnable;
    MS_BOOL bReturnValue;
} stXC_GET_3D_AUTODETECT_3DFLAG, *pstXC_GET_3D_AUTODETECT_3DFLAG;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_SET_3D_SUBWINCLOCK, *pstXC_SET_3D_SUBWINCLOCK;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_3D_LR_SBS2LINE, *pstXC_CHECK_3D_LR_SBS2LINE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_3D_SKIP_DEFAULT_LR_FLAG, *pstXC_CHECK_3D_SKIP_DEFAULT_LR_FLAG;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bReturnValue;
} stXC_SET_3D_SKIP_DEFAULT_LR_FLAG, *pstXC_SET_3D_SKIP_DEFAULT_LR_FLAG;

typedef struct DLL_PACKED
{
    void (*input_source_to_input_port)(INPUT_SOURCE_TYPE_t src_ids , E_MUX_INPUTPORT* port_ids , MS_U8* u8port_count ) ;
} stXC_SET_MUX_INIT, *pstXC_SET_MUX_INIT;

typedef struct
{
    MS_BOOL bRealTimeMonitorOnly;
} stXC_SET_MUX_SOURCE_MONITOR, *pstXC_SET_MUX_SOURCE_MONITOR;

typedef struct DLL_PACKED
{
    XC_MUX_PATH_INFO* Path_Info;
    MS_U32 u32InitDataLen;
    MS_S16 s16ReturnValue;
} stXC_SET_MUX_CREATE_PATH, *pstXC_SET_MUX_CREATE_PATH;

typedef struct
{
    INPUT_SOURCE_TYPE_t src;
    E_DEST_TYPE dest;
    MS_S16 s16ReturnValue;
} stXC_SET_MUX_DELETE_PATH, *pstXC_SET_MUX_DELETE_PATH;

typedef struct
{
    MS_U16 PathId;
    MS_S16 s16ReturnValue;
} stXC_SET_MUX_ENABLE_PATH, *pstXC_SET_MUX_ENABLE_PATH;

typedef struct DLL_PACKED
{
    INPUT_SOURCE_TYPE_t src;
    void* para;
} stXC_SET_MUX_TRIGGER_PATH_SYNC_EVENT, *pstXC_SET_MUX_TRIGGER_PATH_SYNC_EVENT;

typedef struct DLL_PACKED
{
    INPUT_SOURCE_TYPE_t src;
    void* para;
} stXC_SET_MUX_TRIGGER_DEST_ONOFF_EVENT, *pstXC_SET_MUX_TRIGGER_DEST_ONOFF_EVENT;

typedef struct
{
    INPUT_SOURCE_TYPE_t src;
    MS_BOOL bEnable;
    MS_S16 s16ReturnValue;
} stXC_SET_MUX_ONOFF_PERIODIC_HANDLER, *pstXC_SET_MUX_ONOFF_PERIODIC_HANDLER;

typedef struct DLL_PACKED
{
    XC_MUX_PATH_INFO* Paths;
    MS_U8 u8ReturnValue;
} stXC_GET_MUX_PATHINFO, *pstXC_GET_MUX_PATHINFO;

typedef struct
{
    MS_U8 u8MhlSupportInfo;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_MUX_SUPPORT_MHL_PATHINFO, *pstXC_SET_MUX_SUPPORT_MHL_PATHINFO;

typedef struct
{
    MS_BOOL bIsMhlHotPlugInverse;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_MUX_MHL_HOTPLUG_INVERSE_INFO, *pstXC_SET_MUX_MHL_HOTPLUG_INVERSE_INFO;

typedef struct
{
    INPUT_SOURCE_TYPE_t src;
    E_MUX_INPUTPORT eReturnValue;
} stXC_GET_MUX_HDMIPORT, *pstXC_GET_MUX_HDMIPORT;

typedef struct DLL_PACKED
{
    XC_MUX_INPUTSRCTABLE* mapping_tab;
    MS_U32 length;
} stXC_GET_MUX_MAPPINGTAB, *pstXC_GET_MUX_MAPPINGTAB;

typedef struct
{
    INPUT_SOURCE_TYPE_t u8InputSourceType;
    MS_U8 u8ReturnValue;
} stXC_GET_MUX_INPUTSOURCE2VDYMUXPORT, *pstXC_GET_MUX_INPUTSOURCE2VDYMUXPORT;

typedef struct
{
    MS_BOOL bEn;
    SCALER_WIN eWindow;
} stXC_SET_NR, *pstXC_SET_NR;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_UC_ENABLED, *pstXC_CHECK_UC_ENABLED;

typedef struct
{
    XC_Internal_TimingType timingtype;
} stXC_SET_GENERATE_SPECIFIC_TIMING, *pstXC_SET_GENERATE_SPECIFIC_TIMING;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_GET_DE_BYPASS_MODE, *pstXC_GET_DE_BYPASS_MODE;

typedef struct DLL_PACKED
{
    MS_WINDOW_TYPE *psWin;
    SCALER_WIN eWindow;
} stXC_GET_DE_WINDOW, *pstXC_GET_DE_WINDOW;

typedef struct DLL_PACKED
{
    MS_U16* pu16Width;
    MS_U16* pu16Height;
    SCALER_WIN eWindow;
} stXC_GET_DE_WIN_WIDTH_HEIGHT_IN_DE_BYPASS_MODE, *pstXC_GET_DE_WIN_WIDTH_HEIGHT_IN_DE_BYPASS_MODE;

typedef struct DLL_PACKED
{
    MS_WINDOW_TYPE* capture_win;
    SCALER_WIN eWindow;
} stXC_GET_CAPTURE_WINDOW, *pstXC_GET_CAPTURE_WINDOW;

typedef struct
{
    MS_U16 u16Vstart;
    SCALER_WIN eWindow;
} stXC_SET_CAPTURE_WINDOW_VSTART, *pstXC_SET_CAPTURE_WINDOW_VSTART;

typedef struct
{
    MS_U16 u16Hstart;
    SCALER_WIN eWindow;
} stXC_SET_CAPTURE_WINDOW_HSTART, *pstXC_SET_CAPTURE_WINDOW_HSTART;

typedef struct
{
    MS_U16 u16Vsize;
    SCALER_WIN eWindow;
} stXC_SET_CAPTURE_WINDOW_VSIZE, *pstXC_SET_CAPTURE_WINDOW_VSIZE;

typedef struct
{
    MS_U16 u16Hsize;
    SCALER_WIN eWindow;
} stXC_SET_CAPTURE_WINDOW_HSIZE, *pstXC_SET_CAPTURE_WINDOW_HSIZE;

typedef struct
{
    MS_U8 u8Reset;
    SCALER_WIN eWindow;
} stXC_SET_SOFTWARE_RESET, *pstXC_SET_SOFTWARE_RESET;

typedef struct
{
    MS_U16 u16HPeriod;
    MS_U16 u16ReturnValue;
} stXC_GET_HFREQX10, *pstXC_GET_HFREQX10;

typedef struct
{
    MS_U16 u16HPeriod;
    MS_U32 u32ReturnValue;
} stXC_GET_HFREQX1K, *pstXC_GET_HFREQX1K;

typedef struct
{
    MS_U16 u16HFreq;
    MS_U16 u16VTotal;
    MS_U16 u16ReturnValue;
} stXC_GET_VFREQX10, *pstXC_GET_VFREQX10;

typedef struct
{
    MS_U32 u32HFreqx1K;
    MS_U16 u16VTotal;
    MS_U32 u32ReturnValue;
} stXC_GET_VFREQX1K, *pstXC_GET_VFREQX1K;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U32 u32ReturnValue;
} stXC_GET_ACCURATE_VFREQX1k, *pstXC_GET_ACCURATE_VFREQX1k;

typedef struct DLL_PACKED
{
    SC_INT_SRC eIntNum;
    SC_InterruptCb pIntCb;
    void * pParam;
    MS_BOOL bReturnValue;
} stXC_SET_INTERRUPT_ATTACH, *pstXC_SET_INTERRUPT_ATTACH;

typedef struct DLL_PACKED
{
    SC_INT_SRC eIntNum;
    SC_InterruptCb pIntCb;
    void * pParam;
    MS_BOOL bReturnValue;
} stXC_SET_INTERRUPT_DEATTACH, *pstXC_SET_INTERRUPT_DEATTACH;

typedef struct
{
    MS_BOOL bDisable;
    SCALER_WIN eWindow;
} stXC_SET_DISABLE_INPUTSOURCE, *pstXC_SET_DISABLE_INPUTSOURCE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_INPUTSOURCE_DISABLED, *pstXC_CHECK_INPUTSOURCE_DISABLED;

typedef struct DLL_PACKED
{
    XC_PANEL_INFO *pstPanelInfo;
} stXC_SET_CHANGE_PANELTYPE, *pstXC_SET_CHANGE_PANELTYPE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U16 u16ReturnValue;
} stXC_GET_CURRENT_READBANK, *pstXC_GET_CURRENT_READBANK;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U16 u16ReturnValue;
} stXC_GET_CURRENT_WRITEBANK, *pstXC_GET_CURRENT_WRITEBANK;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_AUTO_PRESCALING, *pstXC_SET_AUTO_PRESCALING;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_GET_VSYNC_WIDTH, *pstXC_GET_VSYNC_WIDTH;

typedef struct
{
    MS_U8 MaxGOP;
    MS_U8 UseNum;
    MS_U8 u8MuxNum;
    MS_BOOL bEnable;
    MS_BOOL bReturnValue;
} stXC_SET_GOP_ENABLE, *pstXC_SET_GOP_ENABLE;

typedef struct
{
    MS_U8 u8MuxNum;
    MS_XC_IPSEL_GOP ipSelGop;
} stXC_SET_SELECT_IP_FOR_GOP, *pstXC_SET_SELECT_IP_FOR_GOP;

typedef struct DLL_PACKED
{
    MS_XC_DST_DispInfo *pDstInfo;
    MS_U32 u32SizeofDstInfo;
    EN_GOP_XCDST_TYPE XCDstType;
    MS_BOOL bReturnValue;
} stXC_GET_DESTINATION_INFO, *pstXC_GET_DESTINATION_INFO;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_FDMASK_BYWIN, *pstXC_SET_FDMASK_BYWIN;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_GET_FDMASK_BYWIN, *pstXC_GET_FDMASK_BYWIN;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_GET_FDMASK_STATUS, *pstXC_GET_FDMASK_STATUS;

typedef struct
{
    MS_U8 u8Enable;
    MS_U16 u6Pattern_type;
    SCALER_WIN eWindow;
} stXC_SET_IP1_TESTPATTERN, *pstXC_SET_IP1_TESTPATTERN;

typedef struct
{
    XC_Internal_TimingType timingtype;
} stXC_SET_INIT_IP_FOR_INTERNAL_TIMING, *pstXC_SET_INIT_IP_FOR_INTERNAL_TIMING;

typedef struct
{
    MS_U8 u8Val;
} stXC_SET_IPMUX, *pstXC_SET_IPMUX;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_HSYNC_ACTIVE, *pstXC_CHECK_HSYNC_ACTIVE;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_VSYNC_ACTIVE, *pstXC_CHECK_VSYNC_ACTIVE;

typedef struct DLL_PACKED
{
    MS_U8 u8ValidData;
    SCALER_WIN eWindow;
    MS_WINDOW_TYPE *pstAutoPositionWindow;
    MS_BOOL bReturnValue;
} stXC_GET_AUTO_POSITION_WINDOW, *pstXC_GET_AUTO_POSITION_WINDOW;

typedef struct DLL_PACKED
{
    MS_PHY u32FBAddress;
    MS_PHY u32FBSize;
    SCALER_WIN eWindow;
} stXC_SET_FRAMEBUFFER_ADDRESS, *pstXC_SET_FRAMEBUFFER_ADDRESS;

typedef struct DLL_PACKED
{
    XC_SETWIN_INFO *pstXC_SetWin_Info;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_CHECK_FRAMEBUFFER_ENOUGH_FOR_CUSSCALING, *pstXC_CHECK_FRAMEBUFFER_ENOUGH_FOR_CUSSCALING;

typedef struct
{
    MS_BOOL bEnable;
    E_XC_MEMORY_REQUEST_TYPE eRequestType;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_SCALER_MEMORY_REQUEST, *pstXC_SET_SCALER_MEMORY_REQUEST;

typedef struct
{
    MS_U16 u16CorX;
    MS_U16 u16CorY;
    MS_PIXEL_32BIT* pixel;
} stXC_GET_PIXEL_DATA, *pstXC_GET_PIXEL_DATA;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U8 u8FBNum;
    MS_U32 u32InputSize;
    MS_U32 u32ReturnValue;
} stXC_GET_AVAILABLE_SIZE, *pstXC_GET_AVAILABLE_SIZE;

typedef struct
{
    MS_U32 u32aRGB;
} stXC_SET_FRAME_COLOR, *pstXC_SET_FRAME_COLOR;

typedef struct
{
    MS_U8 u8Color;
    SCALER_WIN eWindow;
} stXC_SET_DISPLAY_WINDOW_COLOR, *pstXC_SET_DISPLAY_WINDOW_COLOR;

typedef struct DLL_PACKED
{
    MS_U16* pOutputCapability;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_SUPPORT_SOURCE_TO_VE, *pstXC_GET_SUPPORT_SOURCE_TO_VE;

typedef struct
{
    MS_BOOL bEnable;
    E_XC_SOURCE_TO_VE eSourceToVE;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OUTPUT_CAPTURE, *pstXC_SET_OUTPUT_CAPTURE;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_GAMMA_ONOFF, *pstXC_SET_GAMMA_ONOFF;

typedef struct
{
    SCALER_WIN eWindow;
    MS_XC_VOP_CHANNEL_t eVop_Channel;
    MS_U16 u16Val;
} stXC_SET_PREGAMMA_GAIN, *pstXC_SET_PREGAMMA_GAIN;

typedef struct
{
    SCALER_WIN eWindow;
    MS_XC_VOP_CHANNEL_t eVop_Channel;
    MS_U16 u16Val;
} stXC_SET_PREGAMMA_OFFSET, *pstXC_SET_PREGAMMA_OFFSET;

typedef struct DLL_PACKED
{
    XC_SetTiming_Info *pTimingInfo;
    SCALER_WIN eWindow;
} stXC_SET_PANEL_TIMING, *pstXC_SET_PANEL_TIMING;

typedef struct
{
    E_XC_PNL_OUT_TIMING_MODE enPnl_Out_Timing_Mode;
} stXC_SET_OUTPUT_TIMING_MODE, *pstXC_SET_OUTPUT_TIMING_MODE;

typedef struct
{
    MS_U16 u16FrontPorch;
    MS_U16 u16SyncWidth;
    MS_U16 u16OutputVfreq;
    MS_BOOL bReturnValue;
} stXC_SET_CUSTOMER_SYNC_INFO, *pstXC_SET_CUSTOMER_SYNC_INFO;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_GET_WAIT_FPLL_DONE, *pstXC_GET_WAIT_FPLL_DONE;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_GET_OUTPUT_VFREQX100, *pstXC_GET_OUTPUT_VFREQX100;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_GET_OP1_OUTPUT_VFREQX100, *pstXC_GET_OP1_OUTPUT_VFREQX100;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_FRAMELOCK, *pstXC_CHECK_FRAMELOCK;

typedef struct DLL_PACKED
{
    SC_FRC_SETTING * stFRCTable;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_CUSTOMIZE_FRC_TABLE, *pstXC_SET_CUSTOMIZE_FRC_TABLE;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    XC_OUTPUTFRAME_Info *pstOutFrameInfo;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OUTPUT_FRAME_CONTROL, *pstXC_SET_OUTPUT_FRAME_CONTROL;

typedef struct
{
    MS_BOOL bTrue;
} stXC_SET_FPLL_FSM_ENABLE, *pstXC_SET_FPLL_FSM_ENABLE;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_FORCE_FREERUN, *pstXC_SET_FORCE_FREERUN;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_FORCE_FREERUN, *pstXC_CHECK_FORCE_FREERUN;

typedef struct
{
    E_VFREQ_SEL VFreq;
} stXC_SET_FREERUN_FREQ, *pstXC_SET_FREERUN_FREQ;

typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    XC_PANEL_INFO_EX *pPanelInfoEx;
    MS_BOOL bReturnValue;
} stXC_SET_EXPANEL_INFO, *pstXC_SET_EXPANEL_INFO;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_FPLL_THRESHMODE, *pstXC_SET_FPLL_THRESHMODE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_GET_FPLL_THRESHMODE, *pstXC_GET_FPLL_THRESHMODE;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_IPAUTONOSIGNAL, *pstXC_SET_IPAUTONOSIGNAL;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_GET_IPAUTONOSIGNAL, *pstXC_GET_IPAUTONOSIGNAL;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_IPAUTOCOAST, *pstXC_SET_IPAUTOCOAST;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_FPLL_MANUAL_SETTING_ENABLE, *pstXC_SET_FPLL_MANUAL_SETTING_ENABLE;

typedef struct
{
    MS_U32 u32FpllSetOffset;
    MS_U16 u16TestCnt;
} stXC_SET_FPLL_BOUNDARY_TEST, *pstXC_SET_FPLL_BOUNDARY_TEST;

typedef struct
{
    INPUT_SOURCE_TYPE_t u8InputSourceType;
} stXC_SET_OFFLINE_DETECTION, *pstXC_SET_OFFLINE_DETECTION;

typedef struct
{
    INPUT_SOURCE_TYPE_t u8InputSourceType;
    MS_U8 u8ReturnValue;
} stXC_GET_OFFLINE_DETECTION, *pstXC_GET_OFFLINE_DETECTION;

typedef struct
{
    MS_U8 u8Threshold;
    MS_BOOL bReturnValue;
} stXC_SET_OFFLINE_SOG_THRESHOLD, *pstXC_SET_OFFLINE_SOG_THRESHOLD;

typedef struct
{
    MS_U8 u8BW;
    MS_BOOL bReturnValue;
} stXC_SET_OFFLINE_SOG_BW, *pstXC_SET_OFFLINE_SOG_BW;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_SET_OFFLINE_INIT, *pstXC_SET_OFFLINE_INIT;

typedef struct
{
    MS_U8 u8val;
} stXC_SET_EXTRA_FETCH_ADV_LINE, *pstXC_SET_EXTRA_FETCH_ADV_LINE;

typedef struct
{
    MS_BOOL bVGASogEn;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_VGA_SOG_ENABLE, *pstXC_SET_VGA_SOG_ENABLE;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_WINDOW_ENABLE, *pstXC_SET_WINDOW_ENABLE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_SUBWINDOW_ENABLE, *pstXC_CHECK_SUBWINDOW_ENABLE;

typedef struct
{
    MS_U8 u8Left;
    MS_U8 u8Right;
    MS_U8 u8Up;
    MS_U8 u8Down;
    MS_U8 u8color;
    SCALER_WIN eWindow;
} stXC_SET_BORDER_FORMAT, *pstXC_SET_BORDER_FORMAT;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_BORDER_ENABLE, *pstXC_SET_BORDER_ENABLE;

typedef struct
{
    MS_BOOL bMainFirst;
} stXC_SET_ZORDER_MAINWINDOW_FIRST, *pstXC_SET_ZORDER_MAINWINDOW_FIRST;

typedef struct DLL_PACKED
{
    PQ_Function_Info* function_Info;
    MS_U32 u32InitDataLen;
} stXC_SET_PQ_LOADFUNCTION, *pstXC_SET_PQ_LOADFUNCTION;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_H_NONLINEAR_SCALING, *pstXC_CHECK_H_NONLINEAR_SCALING;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_EUROHDTV_SUPPORT_ENABLE, *pstXC_SET_EUROHDTV_SUPPORT_ENABLE;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_EUROHDTV_DETECTION_ENABLE, *pstXC_SET_EUROHDTV_DETECTION_ENABLE;

typedef struct
{
    MS_U32 u32Reg;
    MS_U8 u8ReturnValue;
} stXC_READBYTE, *pstXC_READBYTE;

typedef struct
{
    MS_U32 u32Reg;
    MS_U8 u8Val;
} stXC_WRITEBYTE, *pstXC_WRITEBYTE;

typedef struct
{
    MS_U32 u32Reg;
    MS_U8 u8Val;
    MS_U8 u8Msk;
} stXC_WRITEBYTEMSK, *pstXC_WRITEBYTEMSK;

typedef struct
{
    MS_U32 u32Reg;
    MS_U16 u16val;
    MS_U16 u16Mask;
} stXC_WRITE2BYTEMSK, *pstXC_WRITE2BYTEMSK;

typedef struct
{
    MS_U32 u32Reg;
    MS_U16 u16Val;
} stXC_W2BYTE, *pstXC_W2BYTE;

typedef struct
{
    MS_U32 u32Reg;
    MS_U16 u16ReturnValue;
} stXC_R2BYTE, *pstXC_R2BYTE;

typedef struct
{
    MS_U32 u32Reg;
    MS_U32 u32Val;
} stXC_W4BYTE, *pstXC_W4BYTE;

typedef struct
{
    MS_U32 u32Reg;
    MS_U32 u32ReturnValue;
} stXC_R4BYTE, *pstXC_R4BYTE;

typedef struct
{
    MS_U32 u32Reg;
    MS_U16 u16mask;
    MS_U16 u16ReturnValue;
} stXC_R2BYTEMSK, *pstXC_R2BYTEMSK;

typedef struct
{
    MS_U32 u32Reg;
    MS_U16 u16Val;
    MS_U16 u16mask;
} stXC_W2BYTEMSK, *pstXC_W2BYTEMSK;

typedef struct DLL_PACKED
{
    MS_PHY PhyAddr;
    MS_U32 u32BufByteLen;
} stXC_MLOAD_INIT, *pstXC_MLOAD_INIT;

typedef struct
{
    MS_BOOL bEnable;
} stXC_MLOAD_ENABLE, *pstXC_MLOAD_ENABLE;

typedef struct DLL_PACKED
{
    EN_MLOAD_CLIENT_SELECT eMloadSelect;
    MS_PHY PhyAddr;
    MS_U32 u32BufByteLen;
} stXC_MLOAD_CUS_INIT, *pstXC_MLOAD_CUS_INIT;

typedef struct
{
    EN_MLOAD_CLIENT_SELECT eMloadSelect;
    MS_BOOL bEnable;
} stXC_MLOAD_CUS_ENABLE, *pstXC_MLOAD_CUS_ENABLE;

typedef struct
{
    MLOAD_TYPE eReturnValue;
} stXC_MLOAD_GETSTATUS, *pstXC_MLOAD_GETSTATUS;

typedef struct
{
    MS_U32 u32Addr;
    MS_U16 u16Data;
    MS_U16 u16Mask;
    MS_BOOL bReturnValue;
} stXC_MLOAD_WRITE_CMD_AND_FIRE, *pstXC_MLOAD_WRITE_CMD_AND_FIRE;

typedef struct DLL_PACKED
{
    MS_U32 *pu32Addr;
    MS_U16 *pu16Data;
    MS_U16 *pu16Mask;
    MS_U16 u16CmdCnt;
    MS_BOOL bReturnValue;
} stXC_MLOAD_WRITE_CMDS_AND_FIRE, *pstXC_MLOAD_WRITE_CMDS_AND_FIRE;

typedef struct
{
    MS_BOOL bEn;
    E_APIXC_ReturnValue eReturnValue;
} stXC_MLOAD_COMBINE, *pstXC_MLOAD_COMBINE;

typedef struct DLL_PACKED
{
    MS_PHY PhyAddr;
    MS_U32 u32BufByteLen;
} stXC_MLG_INIT, *pstXC_MLG_INIT;

typedef struct
{
    MS_BOOL bEnable;
} stXC_MLG_ENABLE, *pstXC_MLG_ENABLE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_MLG_GET_CAPS, *pstXC_MLG_GET_CAPS;

typedef struct
{
    MLG_TYPE eReturnValue;
} stXC_MLG_GETSTATUS, *pstXC_MLG_GETSTATUS;

typedef struct
{
    EN_VOP_SEL_OSD_XC2VE_MUX eVOPSelOSD_MUX;
} stXC_SET_OSD2VEMODE, *pstXC_SET_OSD2VEMODE;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_IP2_PREFILTER_ENABLE, *pstXC_SET_IP2_PREFILTER_ENABLE;

typedef struct DLL_PACKED
{
    XC_Get_Pixel_RGB *pData;
    SCALER_WIN eWindow;
    E_APIXC_GET_PixelRGB_ReturnValue eReturnValue;
} stXC_GET_PIXELRGB, *pstXC_GET_PIXELRGB;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_KEEP_PIXELPOINTER_APPEAR, *pstXC_SET_KEEP_PIXELPOINTER_APPEAR;

typedef struct
{
    MS_XC_MEM_FMT eMemFmt;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_MEMORY_FORMAT_EX, *pstXC_SET_MEMORY_FORMAT_EX;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_REQUEST_FRAMEBUFFERLESS_MODE, *pstXC_CHECK_REQUEST_FRAMEBUFFERLESS_MODE;

typedef struct
{
    MS_BOOL bFlag;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_SKIP_SWRESET, *pstXC_SET_SKIP_SWRESET;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_REPORTWINDOW_FOR_FRAMECOLOR, *pstXC_SET_REPORTWINDOW_FOR_FRAMECOLOR;

typedef struct
{
    E_VOP_OSD_LAYER_SEL eVOPOSDLayer;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OSDLAYER, *pstXC_SET_OSDLAYER;

typedef struct
{
    SCALER_WIN eWindow;
    E_VOP_OSD_LAYER_SEL eReturnValue;
} stXC_GET_OSDLAYER, *pstXC_GET_OSDLAYER;

typedef struct
{
    MS_U8 u8Val;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_VIDEO_ALPHA, *pstXC_SET_VIDEO_ALPHA;

typedef struct DLL_PACKED
{
    MS_U8 *pu8Val;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_VIDEO_ALPHA, *pstXC_GET_VIDEO_ALPHA;

typedef struct
{
    EN_MUTE_TYPE enMuteType;
    MS_BOOL bIsForceWrite;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_FORCE_WRITE, *pstXC_SET_FORCE_WRITE;

typedef struct
{
    EN_MUTE_TYPE enMuteType;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_FORCE_WRITE, *pstXC_GET_FORCE_WRITE;

typedef struct
{
    MS_BOOL eWindow;
    MS_BOOL bIsSkipWaitVsyn;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SKIP_WAIT_VSYNC, *pstXC_SKIP_WAIT_VSYNC;

typedef struct
{
    MS_U8 u8CMAHeapID;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_CMA_HEAP_ID, *pstXC_SET_CMA_HEAP_ID;

typedef struct
{
    E_OP2VOP_DE_SEL eVopDESel;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OP2VOP_DE_SELECTION, *pstXC_SET_OP2VOP_DE_SELECTION;

typedef struct
{
    E_XC_3D_INPUT_MODE e3dInputMode;
    E_XC_3D_OUTPUT_MODE e3dOutputMode;
    E_XC_3D_PANEL_TYPE e3dPanelType;
} stXC_SET_FRC_WINDOW, *pstXC_SET_FRC_WINDOW;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_2INITFACTOR_ENABLE, *pstXC_SET_2INITFACTOR_ENABLE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_CHECK_FIELDPACKINGMODE_SUPPORTED, *pstXC_CHECK_FIELDPACKINGMODE_SUPPORTED;

typedef struct DLL_PACKED
{
    E_XC_PREINIT_t eType;
    void* para;
    MS_U32 u32Length;
    E_APIXC_ReturnValue eReturnValue;
} stXC_PREINIT, *pstXC_PREINIT;

typedef struct
{
    E_XC_OUTPUTDATA_TYPE eBufType;
    MS_WINDOW_TYPE *pRect;
    void *pRectBuf;
    SCALER_WIN eWindow;
} stXC_GET_BUFFERDATA, *pstXC_GET_BUFFERDATA;

typedef struct DLL_PACKED
{
    E_XC_INPUTDATA_TYPE eBufType;
    MS_WINDOW_TYPE *pDstRect;
    void *pSrcBuf;
    MS_WINDOW_TYPE *pSrcRect;
    SCALER_WIN eWindow;
} stXC_SET_BUFFERDATA, *pstXC_SET_BUFFERDATA;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_MAINWINDOW_ENABLE, *pstXC_SET_MAINWINDOW_ENABLE;

typedef struct DLL_PACKED
{
    MS_WINDOW_TYPE *pstDispWin;
} stXC_SET_SUBWINDOW_ENABLE, *pstXC_SET_SUBWINDOW_ENABLE;

typedef struct
{
    MS_S8 s8H;
    MS_S8 s8V;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_PIXEL_SHIFT, *pstXC_SET_PIXEL_SHIFT;

typedef struct
{
    E_VIDEO_ON_OSD_LAYER enlayer;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_VIDEO_ON_OSD, *pstXC_SET_VIDEO_ON_OSD;

typedef struct
{
    MS_U8 u8Layer;
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OSD_LAYER_BLENDING, *pstXC_SET_OSD_LAYER_BLENDING;

typedef struct
{
    MS_U8 u8Layer;
    MS_U8 u8Alpha;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OSD_LAYER_ALPHA, *pstXC_SET_OSD_LAYER_ALPHA;

typedef struct
{
    E_XC_OSD_INDEX enOsdIndex;
    E_XC_OSD_BlENDING_TYPE enType;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OSD_BLENDING_FORMULA, *pstXC_SET_OSD_BLENDING_FORMULA;

typedef struct DLL_PACKED
{
    MS_XC_REPORT_PIXELINFO *pstRepPixInfo;
    MS_BOOL bReturnValue;
} stXC_GET_REPORT_PIXEL_INFO, *pstXC_GET_REPORT_PIXEL_INFO;

typedef struct
{
    MS_BOOL bEnable;
    E_XC_SCALING_TYPE eScaling_type;
    E_XC_VECTOR_TYPE eVector_type;
    SCALER_WIN eWindow;
} stXC_SET_SCALING, *pstXC_SET_SCALING;

typedef struct DLL_PACKED
{
    MS_PHY u32FBAddress;
    MS_PHY u32FBSize;
    E_XC_MCDI_TYPE eType;
} stXC_SET_MCDI_BUFFERADDRESS, *pstXC_SET_MCDI_BUFFERADDRESS;

typedef struct
{
    MS_BOOL bEnable;
    E_XC_MCDI_TYPE eType;
} stXC_SET_MCDI_ENABLE, *pstXC_SET_MCDI_ENABLE;

typedef struct
{
    MS_U8 u8Cmd;
    MS_U8 count;
    FRC_R2_CMD_PARAMETER_t pFRC_R2_Para;
    MS_BOOL bReturnValue;
} stXC_SEND_CMD2FRC, *pstXC_SEND_CMD2FRC;

typedef struct DLL_PACKED
{
    MS_U8* pu8Cmd;
    MS_U8* pu8ParaCount;
    MS_U8* pu8Para;
    MS_BOOL bReturnValue;
} stXC_GET_MSG_FROM_FRC, *pstXC_GET_MSG_FROM_FRC;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_AUTO_RWBANK_ENABLE, *pstXC_SET_AUTO_RWBANK_ENABLE;

typedef struct
{
    MS_U8 u8Val;
    SCALER_WIN eWindow;
} stXC_SET_RWBANK_MAPPING_NUM, *pstXC_SET_RWBANK_MAPPING_NUM;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_GET_RWBANK_MAPPING_NUM, *pstXC_GET_RWBANK_MAPPING_NUM;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_GET_RWBANK_MAPPING_NUM_FOR_ZAP, *pstXC_GET_RWBANK_MAPPING_NUM_FOR_ZAP;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_SET_BOBMODE, *pstXC_SET_BOBMODE;

typedef struct
{
    MS_BOOL bEnable;
    MS_U8 u8Bank;
    SCALER_WIN eWindow;
} stXC_SET_FORCE_READBANK, *pstXC_SET_FORCE_READBANK;

typedef struct
{
    MS_U16 u16LockPoint;
    SCALER_WIN eWindow;
} stXC_SET_LOCK_POINT, *pstXC_SET_LOCK_POINT;

typedef struct
{
    EN_LD_PANEL_TYPE enLDPanelType;
    MS_BOOL bReturnValue;
} stXC_LD_INIT, *pstXC_LD_INIT;

typedef struct DLL_PACKED
{
    MS_U8 u8MIU;
    MS_PHY u32LDFBase0;
    MS_PHY u32LDFBase1;
    MS_PHY u32LDBBase0;
    MS_PHY u32LDBBase1;
    MS_PHY u32EDGE2DBase;
    MS_PHY u32LEDOffset;
    MS_BOOL bReturnValue;
} stXC_SET_LD_MEMORYADDRESS, *pstXC_SET_LD_MEMORYADDRESS;

typedef struct DLL_PACKED
{
    MS_U8 *pu8LDValue;
    MS_U8 u8WSize;
    MS_U8 u8HSize;
    MS_BOOL bReturnValue;
} stXC_GET_LD_VALUE, *pstXC_GET_LD_VALUE;

typedef struct
{
    EN_LD_MODE enMode;
    MS_BOOL bReturnValue;
} stXC_SET_LD_LEVEL, *pstXC_SET_LD_LEVEL;

typedef struct
{
    MS_BOOL bTurnoffBL;
    MS_BOOL bReturnValue;
} stXC_SET_LD_TURNOFF_LDBL, *pstXC_SET_LD_TURNOFF_LDBL;

typedef struct
{
    MS_BOOL bRefreshSPIData;
    MS_BOOL bReturnValue;
} stXC_SET_NOTUPDATE_SPI_DATA_FLAGS, *pstXC_SET_NOTUPDATE_SPI_DATA_FLAGS;

typedef struct
{
    MS_BOOL bUserLDFlags;
    MS_BOOL bReturnValue;
} stXC_SET_LD_USERMODEFLAGS, *pstXC_SET_LD_USERMODEFLAGS;

typedef struct
{
    MS_U8 u8BLLevel;
    MS_BOOL bReturnValue;
} stXC_SET_BL_LEVEL, *pstXC_SET_BL_LEVEL;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_BWS_MODE, *pstXC_SET_BWS_MODE;

typedef struct
{
    MS_U16 u16Path_sel;
    MS_BOOL bEnable;
} stXC_SET_FRC_COLOR_PATH_CONTROL, *pstXC_SET_FRC_COLOR_PATH_CONTROL;

typedef struct
{
    MS_U16 u16RedGain;
    MS_U16 u16GreenGain;
    MS_U16 u16BlueGain;
} stXC_SET_FRC_OP2_RGBGAIN, *pstXC_SET_FRC_OP2_RGBGAIN;

typedef struct
{
    MS_U16 u16RedOffset;
    MS_U16 u16GreenOffset;
    MS_U16 u16BlueOffset;
} stXC_SET_FRC_OP2_RGBOFFSET, *pstXC_SET_FRC_OP2_RGBOFFSET;

typedef struct
{
    MS_U16 u16dither;
} stXC_SET_FRC_OP2_DITHER, *pstXC_SET_FRC_OP2_DITHER;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bReturnValue;
} stXC_FRC_BYPASS, *pstXC_FRC_BYPASS;

typedef struct
{
    MS_BOOL bEnable;
} stXC_FRC_MUTE, *pstXC_FRC_MUTE;

typedef struct
{
    MS_BOOL bEnable;
    MS_U16 u16FrameIndex;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_FORCE_READ_FRAME, *pstXC_SET_FORCE_READ_FRAME;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
} stXC_SET_CSC, *pstXC_SET_CSC;

typedef struct DLL_PACKED
{
    void (*fpPQCB)(MS_U8 u8PQWin);
} stXC_SET_REGISTER_PQ_FPLL_THRESH_MODE, *pstXC_SET_REGISTER_PQ_FPLL_THRESH_MODE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_GET_FREERUN_STATUS, *pstXC_GET_FREERUN_STATUS;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_BYPASS_CSC, *pstXC_SET_BYPASS_CSC;

typedef struct
{
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_DS_FORCE_INDEX_SUPPORTED, *pstXC_GET_DS_FORCE_INDEX_SUPPORTED;

typedef struct
{
    MS_BOOL bEnable;
    MS_U8 u8Index;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_DS_FORCE_INDEX, *pstXC_SET_DS_FORCE_INDEX;

typedef struct
{
    E_XC_DS_INDEX_SOURCE eDSIdxSrc;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_DS_INDEX_SOURCE_SELECT, *pstXC_SET_DS_INDEX_SOURCE_SELECT;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_GET_DS_STATUS, *pstXC_GET_DS_STATUS;

typedef struct
{
    MS_BOOL bCurrentPmode;
    MS_BOOL bIsTopField;
    MS_U16 u16CurrentFramerate;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_DS_FORCEI_DEIMODE, *pstXC_SET_DS_FORCEI_DEIMODE;

typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_DS_REGMODE, *pstXC_SET_DS_REGMODE;

typedef struct DLL_PACKED
{
    E_XC_OSDC_TGEN_Type e_osdctgen_type;
    MS_XC_OSDC_TGEN_INFO *pstOC_Tgen_Cus;
    MS_XC_OSDC_CTRL_INFO *pstOC_Ctrl;
    E_APIXC_ReturnValue eReturnValue;
} stXC_OSDC_INITSETTING, *pstXC_OSDC_INITSETTING;

typedef struct
{
    MS_U16 u16Vfreq;
} stXC_OSDC_SET_OUTPUTVFREQX10, *pstXC_OSDC_SET_OUTPUTVFREQX10;

typedef struct
{
    MS_U32 eCtrl_type;
    E_APIXC_ReturnValue eReturnValue;
} stXC_OSDC_CONTROL, *pstXC_OSDC_CONTROL;

typedef struct DLL_PACKED
{
    MS_OSDC_DST_DispInfo *pDstInfo;
    MS_U32 u32SizeofDstInfo;
    E_APIXC_ReturnValue eReturnValue;
} stXC_OSDC_GET_DESTINATION_INFO, *pstXC_OSDC_GET_DESTINATION_INFO;

typedef struct
{
    EN_POWER_MODE enPowerState;
    MS_U32 u32ReturnValue;
} stXC_SET_POWERSTATE, *pstXC_SET_POWERSTATE;

typedef struct
{
    MS_U16 u16VsyncStart;
    MS_U16 u16VsyncEnd;
} stXC_SET_BYPASS_OSDVSYNC_POS, *pstXC_SET_BYPASS_OSDVSYNC_POS;

typedef struct
{
    MS_BOOL bEnable;
    E_XC_BYPASS_InputSource input;
} stXC_SET_BYPASS_INPUTSRC, *pstXC_SET_BYPASS_INPUTSRC;

typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bEnable;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_SEAMLESS_ZAPPING, *pstXC_SET_SEAMLESS_ZAPPING;

typedef struct DLL_PACKED
{
    SCALER_WIN eWindow;
    MS_BOOL* pbEnable;
    E_APIXC_ReturnValue eReturnValue;
} stXC_GET_SEAMLESS_ZAPPING_STATUS, *pstXC_GET_SEAMLESS_ZAPPING_STATUS;


typedef struct
{
    MS_U16 u16Timecode;
    MS_U8 u8OperatorID;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_VTRACK_PAYLOADDATA, *pstXC_SET_VTRACK_PAYLOADDATA;

typedef struct DLL_PACKED
{
    MS_BOOL bUserDefinded;
    MS_U8* pu8Setting;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_VTRACK_USERDEFINED_SETTING, *pstXC_SET_VTRACK_USERDEFINED_SETTING;

typedef struct
{
    MS_U8 u8FrameRate;
    MS_BOOL bEnable;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_VTRACK_ENABLE, *pstXC_SET_VTRACK_ENABLE;

typedef struct DLL_PACKED
{
    XC_SETWIN_INFO *pstXC_SetWin_Info;
    SCALER_WIN eWindow;
} stXC_PRESET_PQINFO, *pstXC_PRESET_PQINFO;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_GET_OP1_TESTPATTERN_ENABLED, *pstXC_GET_OP1_TESTPATTERN_ENABLED;

typedef struct
{
    EN_XC_OP1_PATTERN ePattern;
    EN_XC_OP1_PATGEN_MODE eMode;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OP1_TESTPATTERN, *pstXC_SET_OP1_TESTPATTERN;

typedef struct
{
    EN_XC_WB_PATTERN_MODE eWBPattern;
    MS_BOOL eReturnValue;
} stXC_CHECK_WB_TESTPATTERN, *pstXC_CHECK_WB_TESTPATTERN;


typedef struct
{
    MS_BOOL bEnable;
    MS_U16 u16R_Data;
    MS_U16 u16G_Data;
    MS_U16 u16B_Data;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OP2_TESTPATTERN, *pstXC_SET_OP2_TESTPATTERN;


typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bSign;
    MS_U16 u16Delta;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_HLINEARSCALING, *pstXC_SET_HLINEARSCALING;

typedef struct
{
    MS_BOOL bEnable;
    E_APIXC_ReturnValue eReturnValue;
} stXC_EnableT3D, *pstXC_EnableT3D;


typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_GET_OUTPUT_VFREQ, *pstXC_GET_OUTPUT_VFREQ;

typedef struct
{
    MS_U32 u32ReturnValue;
} stXC_GET_CURRENT_OUTPUTVFREQX100, *pstXC_GET_CURRENT_OUTPUTVFREQX100;

typedef struct
{
    MS_BOOL bEnable;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_MEMORY_WRITE_REQUEST, *pstXC_SET_MEMORY_WRITE_REQUEST;

typedef struct
{
    MS_XC_MEM_FMT eMemFmt;
    MS_BOOL bReturnValue;
} stXC_SET_MEMORY_FORMAT, *pstXC_SET_MEMORY_FORMAT;

typedef struct DLL_PACKED
{
    XC_OUTPUT_TIMING_ADJUST_SETTING *stAdjSetting;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_OUTPUT_ADJUST_SETTING, *pstXC_SET_OUTPUT_ADJUST_SETTING;

typedef struct
{
    SCALER_WIN eWindow;
} stXC_SET_FPLL_FSM, *pstXC_SET_FPLL_FSM;

typedef struct
{
    MS_BOOL bEnable;
} stXC_SET_MIRROR_MODE_ENABLE, *pstXC_SET_MIRROR_MODE_ENABLE;

typedef struct
{
    MirrorMode_t eMirrorMode;
} stXC_SET_MIRROR_MODE2_ENABLE, *pstXC_SET_MIRROR_MODE2_ENABLE;

typedef struct
{
    MS_U8 u8ReturnValue;
} stXC_GET_SWDSIndex, *pstXC_GET_SWDSIndex;

typedef struct
{
    MS_BOOL bEnable;
} stXC_GET_Is_SupportSWDS,*pstXC_GET_Is_SupportSWDS;

#ifdef UFO_XC_SET_DSINFO_V0
typedef struct DLL_PACKED
{
    XC_DS_INFO *pstSetDSInfo;
    MS_U32 u32DSInfoLen;
    SCALER_WIN eWindow;
} stXC_SET_DSINFO, *pstXC_SET_DSINFO;
#endif

typedef struct
{
    SCALER_WIN eWindow;
    MS_U8 u8ReturnValue;
} stXC_GET_FRCM_FRAMENUM, *pstXC_GET_FRCM_FRAMENUM;

typedef struct
{
    MirrorMode_t eReturnValue;
} stXC_GET_MIRROR_MODE_TYPE, *pstXC_GET_MIRROR_MODE_TYPE;


typedef struct
{
    E_XC_FRC_InputTiming enFRC_InputTiming;
    E_APIXC_ReturnValue eReturnValue;
} stXC_Set_FRC_InputTiming, *pstXC_Set_FRC_InputTiming;

typedef struct DLL_PACKED
{
    E_XC_FRC_InputTiming *penFRC_InputTiming;
    E_APIXC_ReturnValue eReturnValue;
} stXC_Get_FRC_InputTiming, *pstXC_Get_FRC_InputTiming;

typedef struct DLL_PACKED
{
    XC_VBOX_INFO *pstXC_VboxInfo;
    E_APIXC_ReturnValue eReturnValue;
} stXC_Get_VBOX_Info, *pstXC_Get_VBOX_Info;

typedef struct
{
    MS_BOOL bEnable;
    MS_U32 Threhold;
    E_APIXC_ReturnValue eReturnValue;
} stXC_Set_OSD_DETECT, *pstXC_Set_OSD_DETECT;

typedef struct DLL_PACKED
{
    MS_BOOL *pbOSD;
    E_APIXC_ReturnValue eReturnValue;
} stXC_Get_OSD_DETECT, *pstXC_Get_OSD_DETECT;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_Is2K2KToFrcMode, *pstXC_Is2K2KToFrcMode;

typedef struct
{
    MS_BOOL bEnable;
} stXC_EnableSwitchMainSubZorder, *pstXC_EnableSwitchMainSubZorder;

#if 0
typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_Set2PMode, *pstXC_Set2PMode;
#endif

typedef struct
{
    MS_XC_VOP_Data stXC_VOPData;
    MS_BOOL bReturn;
} stXC_SetXC_VOP, *pstXC_SetXC_VOP;

typedef struct
{
    MS_U16 u16HPixelShiftRange;
    MS_U16 u16VPixelShiftRange;
    PIXEL_SHIFT_FEATURE ePixelShiftFeature;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_PIXELSHIFT_FEATURES, *pstXC_SET_PIXELSHIFT_FEATURES;

typedef struct
{
    MS_BOOL bEnable;
    E_APIXC_ReturnValue eReturnValue;
} stXC_Enable_LockFreqOnly, *pstXC_Enable_LockFreqOnly;

typedef struct DLL_PACKED
{
    E_XC_BWD_CONFIG_TYPE eType;
    SCALER_WIN eWindow;
    void *pstParam;
    MS_BOOL bReturnValue;
} stXC_SetBwdConfig, *pstXC_SetBwdConfig;

#ifdef UFO_XC_SETBLACKVIDEOBYMODE
typedef struct
{
    MS_BOOL bEnable;
    SCALER_WIN eWindow;
    EN_XC_BLACK_VIDEO_MODE eMode;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_BLACKVIDEO_BYMODE, *pstXC_SET_BLACKVIDEO_BYMODE;
#endif
typedef struct
{
    MS_BOOL bReturnValue;
} stXC_IsSupport2StepScaling, *pstXC_IsSupport2StepScaling;

typedef struct
{
    E_XC_PQ_Path_Type ePqPathType;
    MS_U16 u16Width;
    MS_U16 u16Height;
    MS_BOOL bReturnValue;
}stXC_GetPqPathStatus, *pstXC_GetPqPathStatus;

#ifdef UFO_XC_TEST_PATTERN
typedef struct DLL_PACKED
{
    EN_XC_TEST_PATTERN_MODE ePatternMode;
    void *para;
    MS_U16 u16Length;
} stXC_SET_TESTPATTERN, *pstXC_SET_TESTPATTERN;
#endif

typedef struct DLL_PACKED
{
    MS_U32 u32Cmd;
    void *pCmdArgs;
    MS_U32 u32CmdArgsSize;
    E_APIXC_ReturnValue eReturnValue;
}stXC_VIDEO_PLAYBACK_CTRL, *pstXC_VIDEO_PLAYBACK_CTRL;

typedef struct
{
    MS_U32 u32Cmd;
    void *pbuf;
    MS_U32 u32BufSize;
    MS_BOOL bReturn;
}stXC_CMD_S_DISP_CTRL, *pstXC_CMD_S_DISP_CTRL;

#ifdef UFO_XC_AUTO_DOWNLOAD
typedef struct
{
    XC_AUTODOWNLOAD_CONFIG_INFO* pstConfigInfo;
    E_APIXC_ReturnValue eReturnValue;
} stXC_AUTODOWNLOAD_CONFIG_CTRL, *pstXC_AUTODOWNLOAD_CONFIG_CTRL;

typedef struct
{
    XC_AUTODOWNLOAD_DATA_INFO* pstDataInfo;
    E_APIXC_ReturnValue eReturnValue;
} stXC_AUTODOWNLOAD_WRITE_CTRL, *pstXC_AUTODOWNLOAD_WRITE_CTRL;

typedef struct
{
    EN_XC_AUTODOWNLOAD_CLIENT enClient;
    E_APIXC_ReturnValue eReturnValue;
} stXC_AUTODOWNLOAD_FIRE_CTRL, *pstXC_AUTODOWNLOAD_FIRE_CTRL;
#endif

#ifdef UFO_XC_HDR
#if (UFO_XC_HDR_VERSION == 2)
typedef struct DLL_PACKED
{
    EN_XC_HDR_CTRL_TYPE enCtrlType;
    void *pParam;
    E_APIXC_ReturnValue eReturnValue;
} stXC_HDR_CTRL, *pstXC_HDR_CTRL;
#endif
#endif

typedef struct
{
    E_XC_FB_LEVEL eFBLevel;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_FB_LEVEL, *pstXC_SET_FB_LEVEL;

typedef struct
{
    SCALER_WIN eWindow;
#if defined(UFO_PUBLIC_HEADER_500)
    E_XC_FB_LEVEL eFBLevel;
#else
    E_XC_FB_LEVEL eReturnValue;
#endif
} stXC_GET_FB_LEVEL, *pstXC_GET_FB_LEVEL;

#ifdef UFO_XC_FRAMEBUFFERCAPS
typedef struct
{
    EN_XC_FB_CAPS enScalingCapsType;
    void *pParam;
    E_APIXC_ReturnValue eReturnValue;
    SCALER_WIN eWindow;
} stXC_GET_FRAMEBUFFERCAPS, *pstXC_GET_FRAMEBUFFERCAPS;
#endif
#ifdef UFO_XC_DE_MODE
typedef struct
{
    MS_U8 u8MD;
    SCALER_WIN eWindow;
    E_APIXC_ReturnValue eReturnValue;
} stXC_SET_DE_MODE, *pstXC_SET_DE_MODE;
#endif

typedef struct DLL_PACKED
{
    SCALER_WIN eWindow;
} stXC_SWDS_FIRE,*pstXC_SWDS_FIRE;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_POLL_EVENT, *pstXC_POLL_EVENT;

typedef struct DLL_PACKED
{
    MS_U32 u32PipeID;
    MS_U32* U32RetResNum;
    RESOURCE* pResource;
    MS_U32 u32ReturnValue;
} stXC_GetResourceByPipeID, *pstXC_GetResourceByPipeID;
typedef struct
{
    MS_U32 u32PipeID;
    MS_U32 u32SecureDMA;
    MS_U32 u32OperationMode;
    MS_U32 u32ReturnValue;
} stXC_ConfigPipe, *pstXC_ConfigPipe;
typedef struct
{
    SCALER_WIN eWindow;
    MS_BOOL bReturn;
} stXC_OPTEE_CheckRBase, *pstXC_OPTEE_CheckRBase;

typedef struct
{
    MS_U32 u32PipeID;
    MS_U32 u32SecureDMA;
    MS_U32 u32OperationMode;
    MS_U32 u32ReturnValue;
} stXC_CheckPipe, *pstXC_CheckPipe;
typedef struct DLL_PACKED
{
    EN_XC_OPTEE_ACTION action;
    XC_OPTEE_HANDLER *xc_handler;
    MS_BOOL bReturn;
} stXC_OPTEE_CTRL, *pstXC_OPTEE_CTRL;
typedef struct
{
    EN_XC_OPTEE_ACTION action;
    XC_OPTEE_MUX_DATA xc_mux_data;
    MS_BOOL bReturn;
} stXC_OPTEE_MUX, *pstXC_OPTEE_MUX;

#ifdef UFO_XC_SUPPORT_DUAL_MIU
typedef struct DLL_PACKED
{
    MS_BOOL bEnable;
    MS_U32 u32LeftFactor;
    MS_U32 u32RightFactor;
    SCALER_WIN eWindow;
    MS_BOOL bReturnValue;
} stXC_EnableDualMode, *pstXC_EnableDualMode;
#endif

typedef struct DLL_PACKED
{
    E_XC_3D_ATTRIBUTE_TYPE e3DAttrType;
    void* para;
    void* p3DFormat;
    MS_BOOL bReturnValue;
} stXC_GET3DFORMAT, *pstXC_GET3DFORMAT;

typedef struct DLL_PACKED
{
    XC_SWDR_INFO *pSWDR_INFO;
    MS_BOOL bReturnValue;
}stXC_SWDR_INFO, *pstXC_SWDR_INFO;

#ifdef UFO_XC_SUPPORT_HDMI_DOWNSCALE_OUTPUT_POLICY
typedef struct
{
    MS_U32 u32HDMIPolicyInfo;
} stXC_GET_HDMIPOLICY, *pstXC_GET_HDMIPOLICY;
#endif

#ifdef _XC_C_
#define INTERFACE 
#else
#define INTERFACE extern
#endif

#undef INTERFACE

#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvUsbcommon.h"
#ifndef __USBCOMMON_H
#define __USBCOMMON_H 

#include "asmCPU.h"

typedef void* (*mem_Alloc)(int size);
typedef void (*mem_Free)(void* pBuf);
typedef MS_U32 (*mem_VA2PA)(MS_U32 addr);
typedef MS_U32 (*mem_PA2VA)(MS_U32 addr, int bCached);
typedef void* (*mem_Cached2Noncached)(MS_U32 addr);
typedef void* (*mem_NonCached2Cached)(MS_U32 addr);


extern mem_Alloc pfnAllocCachedMem, pfnAllocNoncachedMem;
extern mem_Free pfnFreeCachedMem, pfnFreeNoncachedMem;
extern mem_VA2PA pfnVA2PA;
extern mem_PA2VA pfnPA2VA;
extern mem_Cached2Noncached pfnCached2Noncached;
extern mem_NonCached2Cached pfnNoncached2Cached;

#if 1
#define Usb_AllocateNonCachedMemory(x) pfnAllocNoncachedMem(x)
#define Usb_FreeNonCachedMemory(x) pfnFreeNoncachedMem(x)
#define Usb_AllocateCachedMemory(x) pfnAllocCachedMem(x)
#define Usb_FreeCachedMemory(x) pfnFreeCachedMem(x)




#define kmalloc(size,flag) pfnAllocCachedMem(size)
#define kfree(pBuf) pfnFreeCachedMem(pBuf)

#define USB_VA2PA(addr) pfnVA2PA(addr)
#else
#define Usb_AllocateNonCachedMemory(x) kmalloc(x, 0)
#define Usb_FreeNonCachedMemory(x) kfree(x)
#define Usb_AllocateCachedMemory(x) kmalloc(x, 0)
#define Usb_FreeCachedMemory(x) kfree(x)
#endif

#if 1
#define KSEG02KSEG1(addr) pfnCached2Noncached((MS_U32)addr)
#define KSEG12KSEG0(addr) pfnNoncached2Cached((MS_U32)addr)
#else
#define KSEG02KSEG1(addr) ((void *)((MS_U32)(addr)|0x20000000))
#define KSEG12KSEG0(addr) ((void *)((MS_U32)(addr)&~0x20000000))
#endif

#ifndef U32
#define U32 MS_U32
#endif

#ifndef U16
#define U16 MS_U16
#endif

#ifndef U8
#define U8 MS_U8
#endif

#ifndef S32
#define S32 MS_S32
#endif

#ifndef S16
#define S16 MS_S16
#endif

#ifndef S8
#define S8 MS_S8
#endif

#ifndef __u32
#define __u32 MS_U32
#endif

#ifndef __u16
#define __u16 MS_U16
#endif

#ifndef __u8
#define __u8 MS_U8
#endif

#ifndef __s32
#define __s32 MS_S32
#endif

#ifndef __s16
#define __s16 MS_S16
#endif

#ifndef __s8
#define __s8 MS_S8
#endif

#ifndef BOOL
#define BOOL MS_BOOL
#endif

#ifndef BOOLEAN
#define BOOLEAN MS_BOOL
#endif

#ifdef MS_DEBUG
#define ASSERT(_bool_) \
        { \
            if ( ! ( _bool_ ) ) \
            { \
                diag_printf("ASSERT FAIL: %s, %s %s %d\n", #_bool_, __FILE__, __PRETTY_FUNCTION__, __LINE__);\
                MAsm_CPU_SwDbgBp(); \
            } \
        }
#else
#define ASSERT(_bool_) MS_ASSERT(_bool_)
#endif



#define CHIPID_NEPTUNE 0x2
#define CHIPID_ERIS 0x3
#define CHIPID_TITANIA 0x4
#define CHIPID_PLUTO 0x5
#define CHIPID_TRITON 0x6
#define CHIPID_TITANIA2 0xB
#define CHIPID_TITANIA3 0xF
#define CHIPID_EUCLID 0x15
#define CHIPID_TITANIA4 0x18
#define CHIPID_URANUS4 0x1B
#define CHIPID_TITANIA7 0x1C
#define CHIPID_JANUS 0x1D
#define CHIPID_TITANIA8 0x1F
#define CHIPID_TITANIA9 0x23
#define CHIPID_KRONUS 0x2F
#define CHIPID_KAISERIN 0x41
#define CHIPID_KAPPA 0x75
#define CHIPID_KELTIC 0x72
#define CHIPID_KENYA 0x7C
#define CHIPID_KRITI 0x87
#define CHIPID_KAISER 0x56
#define CHIPID_KERES 0x7E
#define CHIPID_KIRIN 0x98
#define CHIPID_KRIS 0x8B
#define CHIPID_KRATOS 0x9F
#define CHIPID_KIWI 0xA7
#define CHIPID_CLIPPERS 0x7F
#define CHIPID_KAYLA 0xB1
#define CHIPID_KANO 0x92
#define CHIPID_K6 0xA8
#define CHIPID_CURRY 0xB2
#define CHIPID_K6LITE 0xBE
#define CHIPID_K5TN 0xC1


#if defined(CHIP_U4)
    #define USB_LIB_CHIPID CHIPID_URANUS4
#elif defined(CHIP_K1)
    #define USB_LIB_CHIPID CHIPID_KRONUS
#elif defined(CHIP_K2)
    #define USB_LIB_CHIPID CHIPID_KAISERIN
#elif defined(CHIP_KAPPA)
    #define USB_LIB_CHIPID CHIPID_KAPPA
#elif defined(CHIP_KELTIC)
    #define USB_LIB_CHIPID CHIPID_KELTIC
#elif defined(CHIP_KENYA)
    #define USB_LIB_CHIPID CHIPID_KENYA
#elif defined(CHIP_KRITI)
    #define USB_LIB_CHIPID CHIPID_KRITI
#elif defined(CHIP_KRATOS)
    #define USB_LIB_CHIPID CHIPID_KRATOS
#elif defined(CHIP_KAISER)
    #define USB_LIB_CHIPID CHIPID_KAISER
#elif defined(CHIP_KERES)
    #define USB_LIB_CHIPID CHIPID_KERES
#elif defined(CHIP_KIRIN)
    #define USB_LIB_CHIPID CHIPID_KIRIN
#elif defined(CHIP_KRIS)
    #define USB_LIB_CHIPID CHIPID_KRIS
#elif defined(CHIP_KIWI)
    #define USB_LIB_CHIPID CHIPID_KIWI
#elif defined(CHIP_CLIPPERS)
    #define USB_LIB_CHIPID CHIPID_CLIPPERS
#elif defined(CHIP_KAYLA)
    #define USB_LIB_CHIPID CHIPID_KAYLA
#elif defined(CHIP_KANO)
    #define USB_LIB_CHIPID CHIPID_KANO
#elif defined(CHIP_K6)
    #define USB_LIB_CHIPID CHIPID_K6
#elif defined(CHIP_CURRY)
    #define USB_LIB_CHIPID CHIPID_CURRY
#elif defined(CHIP_K6LITE)
    #define USB_LIB_CHIPID CHIPID_K6LITE
#elif defined(CHIP_K5TN)
    #define USB_LIB_CHIPID CHIPID_K5TN
#else
    #error No USB Driver Supported
#endif

#endif
# 138 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
#ifndef _DRV_SERFLASH_H_
#define _DRV_SERFLASH_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 155 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
#define SERFLASH_UTOPIA20 (0)
#define MSIF_SPIF_LIB_CODE {'S','P','I','F'}
#define MSIF_SPIF_LIBVER {'0','6'}
#define MSIF_SPIF_BUILDNUM {'0','1'}
#define MSIF_SPIF_CHANGELIST {'0','0','4','5','6','1','5','8'}

#define SPIF_DRV_VERSION \
        MSIF_TAG, \
        MSIF_CLASS, \
        MSIF_CUS, \
        MSIF_MOD, \
        MSIF_CHIP, \
        MSIF_CPU, \
        MSIF_SPIF_LIB_CODE, \
        MSIF_SPIF_LIBVER, \
        MSIF_SPIF_BUILDNUM, \
        MSIF_SPIF_CHANGELIST, \
        MSIF_OS


#define SPIDMA_CFG_ADDR_DIR_BIT (0)
#define SPIDMA_CFG_REFLECT_BIT (1)
#define SPIDMA_CFG_CRCCOPY_BIT (2)
#define SPIDMA_CFG_NOWAITCOPY_BIT (3)

#define SPIDMA_OPCFG_DEF (0)
#define SPIDMA_OPCFG_INV_COPY _LShift(1, SPIDMA_CFG_ADDR_DIR_BIT)
#define SPIDMA_OPCFG_CRC_REFLECT _LShift(1, SPIDMA_CFG_REFLECT_BIT)
#define SPIDMA_OPCFG_CRC_COPY _LShift(1, SPIDMA_CFG_CRCCOPY_BIT)
#define SPIDMA_OPCFG_NOWAIT_COPY _LShift(1, SPIDMA_CFG_NOWAITCOPY_BIT)




typedef struct
{
    MS_U32 u32AccessWidth;
    MS_U32 u32TotalSize;
    MS_U32 u32SecNum;
    MS_U32 u32SecSize;
} SERFLASH_Info;

typedef struct
{
    MS_BOOL bIsBusy;
} SERFLASH_DrvStatus;

typedef enum
{
    E_SERFLASH_DBGLV_NONE,
    E_SERFLASH_DBGLV_INFO,
    E_SERFLASH_DBGLV_NOTICE,
    E_SERFLASH_DBGLV_WARNING,
    E_SERFLASH_DBGLV_ERR,
    E_SERFLASH_DBGLV_CRIT,
    E_SERFLASH_DBGLV_ALERT,
    E_SERFLASH_DBGLV_EMERG,
    E_SERFLASH_DBGLV_DEBUG,
} SERFLASH_DbgLv;

typedef enum _SPIDMA_Dev
{
     E_SPIDMA_DEV_MIU0
    ,E_SPIDMA_DEV_MIU1
    ,E_SPIDMA_DEV_DMDMCU = 6
    ,E_SPIDMA_DEV_VDMCU
    ,E_SPIDMA_DEV_DSP
    ,E_SPIDMA_DEV_TSP
    ,E_SPIDMA_DEV_1KSRAM_HK51
    ,E_SPIDMA_DEV_MIU2
    ,E_SPIDMA_DEV_MIU3
    ,E_SPIDMA_DEV_NOT_SUPPORT
}SPIDMA_Dev;

typedef enum _SPI_DrvCKG
{
     E_SPI_XTALI = 0
    ,E_SPI_27M
    ,E_SPI_36M
    ,E_SPI_43M
    ,E_SPI_54M
    ,E_SPI_72M
    ,E_SPI_86M
    ,E_SPI_108M
    ,E_SPI_24M = 15
    ,E_SPI_HALCKG_NOT_SUPPORT
}SPI_DrvCKG;

typedef enum _SPI_DrvClkDiv
{
     E_SPI_DIV2
    ,E_SPI_DIV4
    ,E_SPI_DIV8
    ,E_SPI_DIV16
    ,E_SPI_DIV32
    ,E_SPI_DIV64
    ,E_SPI_DIV128
    ,E_SPI_ClkDiv_NOT_SUPPORT
}SPI_DrvClkDiv;

typedef enum _SERFLASH_RegionMapType
{
    E_SERFLASH_REGION_BLOCK_PROTECTION
   ,E_SERFLASH_REGION_INDIVIDUAL_BLOCK_LOCK
   ,E_SERFLASH_REGION_ONE_TIME_PROGRAM
   ,E_SERFLASH_REGION_SPECIAL_REGION
}SERFLASH_RegionMapType;

typedef struct
{
   MS_U32 u32OtpLowerRecord;
   MS_U32 u32OtpUpperRecord;
   MS_U8 u8OtpBuffer[1024];
   void *pstNext;
}ST_OTP_Record;


typedef struct
{
    MS_BOOL bProtectMark;
    MS_U32 u32Indicator;
    MS_U32 u32LowerBound;
    MS_U32 u32UpperBound;

    void *pstNext;
}SERFLASH_ProtecLayoutInfo;

typedef struct
{
   MS_U32 u32Start;
   MS_U32 u32Len;
   MS_U8 *u8data;
} SERFLASH_AccessInfo;

typedef struct
{
   MS_U32 u32StartAddr;
   MS_U32 u32EraseSize;
   MS_BOOL bWait;
} SERFLASH_EraseInfo;

typedef struct
{
   MS_U32 u32StartAddr;
   MS_U32 u32Endaddr;
} SERFLASH_SectorEraseInfo;


typedef struct
{
  MS_U32 u32DisableLowerBound;
  MS_U32 u32DisableSize;
} SERFLASH_DisRangeInfo;

typedef enum _SPI_Attribute
{
     E_SPI_ATTRI_USER_DRV
    ,E_SPI_ATTRI_KERNEL_DRV
    ,E_SPI_ATTRI_UNKNOWN
}SPI_Attribute;


typedef void (*ms_Mcu_ChipSelect_CB)(void);
typedef void (*ms_Flash_SetHWWP_CB)(MS_BOOL);



#include "drvSERFLASH_v2.h"
# 333 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
const SERFLASH_Info *MDrv_SERFLASH_GetInfo(void);
# 342 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_GetLibVer(const MSIF_Version **ppVersion);
# 351 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_GetStatus(SERFLASH_DrvStatus* pDrvStatus);
# 360 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_SetDbgLevel(MS_U8 u8DbgLevel);







MS_BOOL MDrv_SERFLASH_SetWPInfo(MS_BOOL bWPInfo);
# 377 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
void MDrv_SERFLASH_SetMcuCSCallBack(ms_Mcu_ChipSelect_CB ChipSel_cb);







void MDrv_SERFLASH_SetFlashWPCallBack(ms_Flash_SetHWWP_CB FlashWP_cb);
# 394 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_DetectType(void);
# 403 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_DetectSize(MS_U32 *u32FlashSize);
# 413 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_Set2XRead(MS_BOOL b2XMode);
# 423 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_SetCKG(SPI_DrvCKG eCKGspi);
# 433 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
void MDrv_SERFLASH_ClkDiv(SPI_DrvClkDiv eClkDivspi);
# 443 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_SetMode(MS_BOOL bXiuRiu);







MS_U64 MDrv_SERFLASH_ReadUID(void);
# 461 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_ChipSelect(MS_U8 u8FlashIndex);






void MDrv_SERFLASH_Init(void);
# 481 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_ReadID(MS_U8 *pu8FlashID, MS_U32 u32IDSize);
# 494 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_Read(MS_U32 u32FlashAddr, MS_U32 u32FlashSize, MS_U8 *user_buffer);
# 503 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_EraseChip(void);
# 514 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_AddressToBlock(MS_U32 u32FlashAddr, MS_U32 *pu32BlockIndex);
# 525 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_BlockToAddress(MS_U32 u32BlockIndex, MS_U32 *pu32FlashAddr);
# 537 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_AddressErase(MS_U32 u32StartAddr, MS_U32 u32EraseSize, MS_BOOL bWait);
# 549 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_BlockErase(MS_U32 u32StartBlock, MS_U32 u32EndBlock, MS_BOOL bWait);
# 560 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_SectorErase(MS_U32 u32StartAddr, MS_U32 u32EndAddr);
# 569 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_CheckWriteDone(void);
# 582 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_Write(MS_U32 u32FlashAddr, MS_U32 u32FlashSize, MS_U8 *user_buffer);
# 596 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_DMA(MS_U32 u32FlashStart, MS_U32 u32DRAMStart, MS_U32 u32Size);
# 606 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteProtect(MS_BOOL bEnable);
# 615 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteProtect_Enable_All_Range(void);
# 624 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteProtect_Disable_All_Range(void);
# 635 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteProtect_Disable_Range_Set(MS_U32 u32DisableLowerBound, MS_U32 u32DisableSize);
# 646 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteProtect_Enable_Range_Set(MS_U32 u32LowerBound, MS_U32 u32Size);
# 657 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteProtect_Area(MS_BOOL bEnableAllArea, MS_U8 u8BlockProtectBits);
# 667 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_ReadStatusRegister(MS_U8 *pu8StatusReg);
# 679 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_ReadStatusRegister2(MS_U8 *pu8StatusReg);
# 691 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteStatusRegister(MS_U16 u16StatusReg);
# 708 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_CopyHnd(MS_PHYADDR u32FlashAddr, MS_PHYADDR u32DstAddr, MS_U32 u32Len, SPIDMA_Dev eDstDev, MS_U8 u8OpCfg);
# 718 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
void MDrv_SERFLASH_SetGPIO(MS_BOOL bSwitch);
# 730 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_Attribute(SPI_Attribute SpiAttri);




MS_BOOL MDrv_SERFLASH_WriteProtect_Area_Lookup(MS_U32 u32ProtectSpace, MS_U32 u32NonProtectSpace, MS_U8 *pu8BlockProtectBits);
# 744 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_U32 MDrv_SERFLASH_WriteProtect_Area_Boundary(void);
# 753 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_Write(MS_U32 u32FlashAddr,MS_U32 u32FlashSize,MS_U8 * user_buffer);
# 762 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_Read(MS_U32 u32FlashAddr,MS_U32 u32FlashSize,MS_U8 * user_buffer);
# 771 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_WriteProtect(MS_BOOL bEnable);
# 780 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_WriteProtect_Enable_All_Range(void);
# 789 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_WriteProtect_Disable_All_Range(void);
# 798 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_WriteProtect_Disable_Range_Set(MS_U32 DisableLowerBound, MS_U32 DisableSize);
# 807 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_WriteProtect_Area(MS_BOOL bEnableAllArea, MS_U8 BlockProtectBits);
# 816 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_ReadStatusRegister(MS_U8 *pu8StatusReg);
# 825 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_ReadStatusRegister2(MS_U8 *pu8StatusReg);
# 834 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_WriteStatusRegister(MS_U16 u16StatusReg);
# 843 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_DetectType(void);
# 852 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_DetectSize(MS_U32 *u32FlashSize);
# 861 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_AddressToBlock(MS_U32 u32FlashAddr, MS_U32 *pu32BlockIndex);
# 870 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_BlockToAddress(MS_U32 u32BlockIndex, MS_U32 *pu32FlashAddr);
# 879 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_AddressErase(MS_U32 u32StartAddr,MS_U32 u32EraseSize,MS_BOOL bWait);
# 888 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_BlockErase(MS_U16 u16StartBlock,MS_U16 u16EndBlock,MS_BOOL bWait);
# 897 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FLASH_CheckWriteDone(void);

#ifdef MXIC_IBPM
# 908 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
void MDrv_SERFLASH_EnterIBPM(void);
# 917 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_U8 MDrv_SERFLASH_ReadBlockStatus(MS_PHYADDR u32FlashAddr);
# 926 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_SingleBlockProtect(MS_PHYADDR u32FlashAddr,MS_BOOL bLock);
# 935 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_U32 MDrv_SERFLASH_MultiBlockProtect(MS_U32 u32StartBlock, MS_U32 u32EndBlock, MS_BOOL bLock);
#endif

#ifdef MUNINN_ENABLE
# 947 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_U8 MDrv_OTP_ReadStatusReg(MS_U8 u8ByteAddr);
# 956 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
void MDrv_OTP_WriteStatusReg(MS_U8 u8ByteAddr, MS_U8 u8ByteReg);
# 965 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_PHYADDR MDrv_OTP_Read(MS_U32 u32FlashAddr, MS_U32 u32FlashSize, MS_U8 *user_buffer);
# 974 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_PHYADDR MDrv_OTP_FastRead(MS_U32 u32FlashAddr, MS_U32 u32FlashSize, MS_U8 *user_buffer);
# 983 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_PHYADDR MDrv_OTP_Write(MS_U32 u32FlashAddr, MS_U32 u32FlashSize, MS_U8 *user_buffer);
# 992 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_OTP_WriteTestMode(MS_U32 u32FlashAddr, MS_U8 ByteData);
#endif
# 1004 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FSP_WriteData(MS_U32 u32Addr, MS_U32 u32DataSize, MS_U8 *pu8Data);
# 1013 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FSP_ReadData(MS_U32 u32Addr, MS_U32 u32DataSize, MS_U8 *pu8Data);
# 1022 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FSP_BlockErase(MS_U32 u32StartBlock, MS_U32 u32EndBlock, MS_BOOL bWait);
# 1031 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_FSP_AddressErase(MS_U32 u32StartAddr, MS_U32 u32EraseSize, MS_BOOL bWait);
# 1042 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_U32 MDrv_SERFLASH_SetPowerState(EN_POWER_MODE u16PowerState);
# 1054 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSERFLASH.h"
MS_BOOL MDrv_SERFLASH_WriteProtect_TableInfo(SERFLASH_RegionMapType type, void *pstTable);







MS_BOOL MDrv_FLASH_OTP_Read(MS_U32 u32FlashAddr, MS_U16 u16FlashSize, MS_U8 *user_buffer);







MS_BOOL MDrv_FLASH_OTP_Write(MS_U32 u32FlashAddr, MS_U16 u16FlashSize, MS_U8 *user_buffer);







MS_BOOL MDrv_FLASH_OTP_ERASE(MS_U32 u32Addr);

extern ms_Mcu_ChipSelect_CB McuChipSelectCB;
extern ms_Flash_SetHWWP_CB FlashSetHWWPCB;
#ifdef __cplusplus
}
#endif

#endif
# 179 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
#ifndef _APICEC_H_
#define _APICEC_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"
#include "MsCommon.h"





#define MSIF_CEC_LIB_CODE {'C','E','C','_'}
#define MSIF_CEC_LIBVER {'0','0'}
#define MSIF_CEC_BUILDNUM {'0','8'}
#define MSIF_CEC_CHANGELIST {'0','0','4','4','9','9','9','1'}
#define CEC_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_CEC_LIB_CODE, \
    MSIF_CEC_LIBVER, \
    MSIF_CEC_BUILDNUM, \
    MSIF_CEC_CHANGELIST, \
    MSIF_OS

#define CEC_VERSION_11 0UL
#define CEC_VERSION_12 1UL
#define CEC_VERSION_12a 2UL
#define CEC_VERSION_13 3UL
#define CEC_VERSION_13a 4UL
#define CEC_VERSION_14 5UL

#define HDMI_CEC_VERSION CEC_VERSION_14

#define CEC_FIFO_CNT 4UL
#define CEC_FIFO_NUM_COUNT CEC_FIFO_CNT
#define CEC_PHY_ADDR_COUNT 2UL
#define CEC_DEVICE_EXIST_COUNT 15UL
#define CEC_FIFO_DATA_NUMBER 16UL
#define CEC_VENDOR_ID_COUNT 3UL
#define CEC_MENU_LANGUAGE_COUNT 3UL

#define RETRY_CNT 1UL
#define FrameInterval 7UL
#define BusFreeTime 6UL
#define ReTxInterval 3UL

#define ENABLE_CEC_INT ENABLE
#define ENABLE_CUST01_CEC ENABLE
#define ENABLE_SW_CEC_WAKEUP ENABLE
#define ENABLE_CEC_MULTIPLE DISABLE





typedef enum _MsCEC_INPUT_PORT
{
    INPUT_PORT0 = 0x00,
    INPUT_PORT1 = 0x01,
    INPUT_PORT2 = 0x02,
    INPUT_PORT3 = 0x03,
}MsCEC_INPUT_PORT;

typedef enum _CEC_ERROR_CODE
{
    E_CEC_FEATURE_ABORT = 0x00,
    E_CEC_RX_SUCCESS = 0x01,
    E_CEC_TX_SUCCESS = 0x02,
    E_CEC_RF = 0x04,
    E_CEC_LOST_ABT = 0x08,
    E_CEC_BIT_SHORT = 0x10,
    E_CEC_BIT_LONG = 0x20,
    E_CEC_NACK = 0x40,
    E_CEC_SYSTEM_BUSY = 0x80,
} CEC_ERROR_CODE;


typedef enum _MsCEC_DEVICELA
{
    E_LA_TV =0,
    E_LA_RECORDER1 =1,
    E_LA_RECORDER2 =2,
    E_LA_TUNER1 =3,
    E_LA_PLAYBACK1 =4,
    E_LA_AUDIO_SYS =5,
    E_LA_TUNER2 =6,
    E_LA_TUNER3 =7,
    E_LA_PLAYBACK2 =8,
    E_LA_RECORER3 =9,
#if(HDMI_CEC_VERSION >= CEC_VERSION_13a)
    E_LA_TUNER4 =10,
    E_LA_PLYBACK3 =11,
#endif
    RESERVED_1 =12,
    RESERVED_2 =13,
    E_LA_FREE_USE =14,
    E_LA_UNREGISTERED =15,
    E_LA_BROADCAST =15,
    E_LA_MAX =15,
} MsCEC_DEVICELA;


typedef enum _MsCEC_MSGLIST
{

    E_MSG_ACTIVE_SOURCE = 0x82,
    E_MSG_OTP_IMAGE_VIEW_ON = 0x04,
    E_MSG_OTP_TEXT_VIEW_ON = 0x0D,




    E_MSG_RC_INACTIVE_SOURCE = 0x9D,

    E_MSG_RC_REQ_ACTIVE_SOURCE = 0x85,
    E_MSG_RC_REQUEST_ACTIVE_SOURCE = 0x85,

    E_MSG_RC_ROUTING_CHANGE = 0x80,

    E_MSG_RC_ROUTING_INFO = 0x81,
    E_MSG_RC_ROUTING_INFORMATION = 0x81,

    E_MSG_RC_SET_STREM_PATH = 0x86,



    E_MSG_STANDBY = 0x36,



    E_MSG_OTR_RECORD_OFF = 0x0B,
    E_MSG_OTR_RECORD_ON = 0x09,
    E_MSG_OTR_RECORD_STATUS = 0x0A,
    E_MSG_OTR_RECORD_TV_SCREEN = 0x0F,



    E_MSG_TP_CLEAR_ANALOG_TIMER = 0x33,
    E_MSG_TP_CLEAR_ANALOGUE_TIMER = 0x33,

    E_MSG_TP_CLEAR_DIGITAL_TIMER = 0x99,

    E_MSG_TP_CLEAR_EXT_TIMER = 0xA1,
    E_MSG_TP_CLEAR_EXTERNAL_TIMER = 0xA1,

    E_MSG_TP_SET_ANALOG_TIMER = 0x34,
    E_MSG_TP_SET_ANALOGUE_TIMER = 0x34,

    E_MSG_TP_SET_DIGITAL_TIMER = 0x97,

    E_MSG_TP_SET_EXT_TIMER = 0xA2,
    E_MSG_TP_SET_EXTERNAL_TIMER = 0xA2,

    E_MSG_TP_SET_TIMER_PROGRAM_TITLE = 0x67,
    E_MSG_TP_TIMER_CLEARD_STATUS = 0x43,
    E_MSG_TP_TIMER_STATUS = 0x35,



    E_MSG_SI_CEC_VERSION = 0x9E,
    E_MSG_SI_GET_CEC_VERSION = 0x9F,

    E_MSG_SI_REQUEST_PHY_ADDR = 0x83,
    E_MSG_SI_GIVE_PHYSICAL_ADDRESS = 0x83,

    E_MSG_SI_GET_MENU_LANGUAGE = 0x91,


    E_MSG_SI_REPORT_PHY_ADDR = 0x84,
    E_MSG_SI_REPORT_PHYSICAL_ADDRESS = 0x84,

    E_MSG_SI_SET_MENU_LANGUAGE = 0x32,






    E_MSG_DC_DECK_CTRL = 0x42,
    E_MSG_DC_DECK_CONTROL = 0x42,

    E_MSG_DC_DECK_STATUS = 0x1B,
    E_MSG_DC_GIVE_DECK_STATUS = 0x1A,
    E_MSG_DC_PLAY = 0x41,



    E_MSG_TC_GIVE_TUNER_STATUS = 0x08,
    E_MSG_TC_GIVE_TUNER_DEVICE_STATUS = 0x08,

    E_MSG_TC_SEL_ANALOG_SERVICE = 0x92,
    E_MSG_TC_SEL_ANALOGUE_SERVICE = 0x92,

    E_MSG_TC_SEL_DIGITAL_SERVICE = 0x93,
    E_MSG_TC_SELECT_DIGITAL_SERVICE = 0x93,

    E_MSG_TC_TUNER_DEVICE_STATUS = 0x07,

    E_MSG_TC_TUNER_STEP_DEC = 0x06,
    E_MSG_TC_TUNER_STEP_DECREMENT = 0x06,

    E_MSG_TC_TUNER_STEP_INC = 0x05,
    E_MSG_TC_TUNER_STEP_INCREMENT = 0x05,




    E_MSG_VS_DEVICE_VENDOR_ID = 0x87,


    E_MSG_VS_GIVE_VENDOR_ID = 0x8C,
    E_MSG_VS_GIVE_DEVICE_VENDOR_ID = 0x8C,

    E_MSG_VS_VENDOR_COMMAND = 0x89,
    E_MSG_VS_VENDOR_COMMAND_WITH_ID = 0xA0,

    E_MSG_VS_VENDOR_RC_BUT_DOWN = 0x8A,
    E_MSG_VS_VENDOR_REMOTE_BUTTON_DOWN = 0x8A,

    E_MSG_VS_VENDOR_RC_BUT_UP = 0x8B,
    E_MSG_VS_VENDOR_REMOTE_BUTTON_UP = 0x8B,



    E_MSG_SET_OSD_STRING = 0x64,



    E_MSG_OSDNT_GIVE_OSD_NAME = 0x46,
    E_MSG_OSDNT_SET_OSD_NAME = 0x47,



    E_MSG_DMC_MENU_REQUEST = 0x8D,
    E_MSG_DMC_MENU_STATUS = 0x8E,



    E_MSG_UI_PRESS = 0x44,
    E_MSG_DMC_USER_CONTROL_PRESSED = 0x44,

    E_MSG_UI_RELEASE = 0x45,
    E_MSG_DMC_USER_CONTROL_RELEASED = 0x45,
# 440 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
    E_MSG_PS_GIVE_POWER_STATUS = 0x8F,
    E_MSG_PS_GIVE_DEVICE_POWER_STATUS = 0x8F,

    E_MSG_PS_REPORT_POWER_STATUS = 0x90,





    E_MSG_FEATURE_ABORT = 0x00,


    E_MSG_ABORT_MESSAGE = 0xFF,



    E_MSG_SAC_GIVE_AUDIO_STATUS = 0x71,
    E_MSG_SAC_GIVE_SYSTEM_AUDIO_MODE_STATUS = 0x7D,
    E_MSG_SAC_REPORT_AUDIO_STATUS = 0x7A,

    E_MSG_SAC_REPORT_SHORT_AUDIO_DESCRIPTOR = 0xA3,
    E_MSG_SAC_REQUEST_SHORT_AUDIO_DESCRIPTOR = 0xA4,

    E_MSG_SAC_SET_SYSTEM_AUDIO_MODE = 0x72,
    E_MSG_SAC_SYSTEM_AUDIO_MODE_REQUEST = 0x70,
    E_MSG_SAC_SYSTEM_AUDIO_MODE_STATUS = 0x7E,



    E_MSG_SAC_SET_AUDIO_RATE = 0x9A,



    E_MSG_ARC_INITIATE_ARC = 0xC0,
    E_MSG_ARC_REPORT_ARC_INITIATED = 0xC1,
    E_MSG_ARC_REPORT_ARC_TERMINATED = 0xC2,

    E_MSG_ARC_REQUEST_ARC_INITATION = 0xC3,
    E_MSG_ARC_REQUEST_ARC_INITIATION = 0xC3,

    E_MSG_ARC_REQUEST_ARC_TERMINATION = 0xC4,

    E_MSG_ARC_TERMINATED_ARC = 0xC5,
    E_MSG_ARC_TERMINATE_ARC = 0xC5,



    E_MSG_CDC_CDC_MESSAGE = 0xF8,

} MsCEC_MSGLIST;

typedef enum _MsCEC_MSG_TRANS_TYPE
{
    E_TRANS_BROADCAST_MSG = 0,
    E_TRANS_DIRECT_MSG = 1,
    E_TRANS_BOTHTYPE_MSG = 2,
} MsCEC_MSG_TRANS_TYPE;



typedef enum _MsCEC_DEVICE_TYPE
{
    E_DEVICE_TYPE_TV =0,
    E_DEVICE_TYPE_RECORDING_DEVICE =1,
    E_DEVICE_TYPE_RESERVED =2,
    E_DEVICE_TYPE_TUNER =3,
    E_DEVICE_TYPE_PLAYBACK_DEVICE =4,
    E_DEVICE_TYPE_AUDIO_SYSTEM =5,
} MsCEC_DEVICE_TYPE;



typedef enum _MsCEC_MSG_DC_DECK_CTRL_PARM
{
    E_MSG_DCM_CMD_SKIP_FORWARD = 1,
    E_MSG_DCM_CMD_SKIP_REVERSE = 2,
    E_MSG_DCM_CMD_STOP = 3,
    E_MSG_DCM_CMD_EJECT = 4,
} MsCEC_MSG_DC_DECK_CTRL_PARM;


typedef enum _MsCEC_MSG_DC_DECK_STATUS_PARM
{
    E_MSG_DI_CMD_PLAY = 0x11,
    E_MSG_DI_CMD_RECORD = 0x12,
    E_MSG_DI_CMD_PLAY_REVERSE = 0x13,
    E_MSG_DI_CMD_STILL = 0x14,
    E_MSG_DI_CMD_SLOW = 0x15,
    E_MSG_DI_CMD_SLOW_REVERSE = 0x16,
    E_MSG_DI_CMD_FAST_FORWARD = 0x17,
    E_MSG_DI_CMD_FAST_REVERSE = 0x18,
    E_MSG_DI_CMD_NO_MEDIA = 0x19,
    E_MSG_DI_CMD_STOP = 0x1A,
    E_MSG_DI_CMD_SKIP_FORWARD = 0x1B,
    E_MSG_DI_CMD_SKIP_REVERSE = 0x1C,
    E_MSG_DI_CMD_INDEX_SEARCH_FORWARD = 0x1D,
    E_MSG_DI_CMD_INDEX_SEARCH_REVERSE = 0x1E,
    E_MSG_DI_CMD_OTHER_STATUS = 0x1F,
} MsCEC_MSG_DC_DECK_STATUS_PARM;



typedef enum _MsCEC_MSG_STATUS_REQUEST_PARM
{
    E_MSG_SR_CMD_ON = 1,
    E_MSG_SR_CMD_OFF = 2,
    E_MSG_SR_CMD_ONCE = 3,
} MsCEC_MSG_STATUS_REQUEST_PARM;



typedef enum _MsCEC_MSG_DC_PLAY_PARM
{
    E_MSG_PM_CMD_PLAY_FORWARD = 0x24,
    E_MSG_PM_CMD_PLAY_REVERSE = 0x20,
    E_MSG_PM_CMD_PLAY_STILL = 0x25,
    E_MSG_PM_CMD_FAST_FORWARD_MINI_SPEED = 0x05,
    E_MSG_PM_CMD_FAST_FORWARD_MEDIUM_SPEED = 0x06,
    E_MSG_PM_CMD_FAST_FORWARD_MAXI_SPEED = 0x07,
    E_MSG_PM_CMD_FAST_REVERSE_MINI_SPEED = 0x09,
    E_MSG_PM_CMD_FAST_REVERSE_MEDIUM_SPEED = 0x0A,
    E_MSG_PM_CMD_FAST_REVERSE_MAXI_SPEED = 0x0B,
    E_MSG_PM_CMD_SLOW_FORWARD_MINI_SPEED = 0x15,
    E_MSG_PM_CMD_SLOW_FORWARD_MEDIUM_SPEED = 0x16,
    E_MSG_PM_CMD_SLOW_FORWARD_MAXI_SPEED = 0x17,
    E_MSG_PM_CMD_SLOW_REVERSE_MINI_SPEED = 0x19,
    E_MSG_PM_CMD_SLOW_REVERSE_MEDIUM_SPEED = 0x1A,
    E_MSG_PM_CMD_SLOW_REVERSE_MAXI_SPEED = 0x1B,
} MsCEC_MSG_DC_PLAY_PARM;



typedef enum _MsCEC_MSG_POWER_STATUS_PARM
{
    E_MSG_PWRSTA_ON = 0x00,
    E_MSG_PWRSTA_STANDBY = 0x01,
    E_MSG_PWRSTA_STANDBY2ON = 0x02,
    E_MSG_PWRSTA_ON2STANDBY = 0x03,
    E_MSG_PWRSTA_UNKNOW = 0x04,
} MsCEC_MSG_POWER_STATUS_PARM;


typedef enum _MsCEC_MSG_ABORT_REASON
{
    E_MSG_AR_UNRECOGNIZE_OPCDE = 0x00,
    E_MSG_AR_CANNOTRESPOND = 0x01,
    E_MSG_AR_CANNOTPROVIDESCR = 0x02,
    E_MSG_AR_INVALID_OPCODE = 0x03,
    E_MSG_AR_REFUSED = 0x04,
    E_MSG_AR_IGNORED = 0x05,
    E_MSG_AR_SUCCESSED = 0x06,
} MsCEC_MSG_ABORT_REASON;


typedef enum _MsCEC_MSG_MENU_REQ_TYPE
{
    E_MSG_MENU_REQ_ACTIVATED = 0,
    E_MSG_MENU_REQ_DEACTIVATED = 1,
    E_MSG_MENU_REQ_QUERY = 2,
} MsCEC_MSG_MENU_REQ_TYPE;


typedef enum _MsCEC_MSG_MENU_STATE
{
    E_MSG_MENU_ACTIVATED = 0,
    E_MSG_MENU_DEACTIVATED = 1,
} MsCEC_MSG_MENU_STATE;


typedef enum _MsCEC_MSG_RECORD_SOURCE_TYPE
{
    E_MSG_RECORD_TYPE_OWN_SOURCE = 1,
    E_MSG_RECORD_TYPE_DIGITAL_SERVICE = 2,
#if(HDMI_CEC_VERSION >= CEC_VERSION_13a)
    E_MSG_RECORD_TYPE_ANALOGUE_SERVICE = 3,
    E_MSG_RECORD_TYPE_EXTERNAL_PLUG = 4,
    E_MSG_RECORD_TYPE_EXTERNAL_PHYSICAL_ADDRESS = 5,
#endif
} MsCEC_MSG_RECORD_SOURCE_TYPE;


typedef enum _MsCEC_MSG_RECORD_STATUS_INFO
{
    E_MSG_RECORD_INFO_RECORDING_OWN_SOURCE = 0x01,
    E_MSG_RECORD_INFO_RECORDING_DIGITAL_SERVICE = 0x02,
#if(HDMI_CEC_VERSION >= CEC_VERSION_13a)
    E_MSG_RECORD_INFO_RECORDING_ANALOGUE_SERVICE = 0x03,
    E_MSG_RECORD_INFO_RECORDING_EXTERNAL_INPUT = 0x04,
#endif
    E_MSG_RECORD_INFO_NO_RECORDING_DIGITAL_SERVICE = 0x05,
#if(HDMI_CEC_VERSION >= CEC_VERSION_13a)
    E_MSG_RECORD_INFO_NO_RECORDING_ANALOGUE_SERVICE = 0x06,
    E_MSG_RECORD_INFO_NO_RECORDING_REQ_SERVICE = 0x07,
    E_MSG_RECORD_INFO_NO_RECORDING_INVALID_EXTERNAL_PLUG_NUMBER = 0x09,
    E_MSG_RECORD_INFO_NO_RECORDING_INVALID_EXTERNAL_PHYSICAL_ADDRESS = 0x0A,
    E_MSG_RECORD_INFO_NO_RECORDING_CA_NOT_SUPPORT = 0x0B,
    E_MSG_RECORD_INFO_NO_RECORDING_CA_NO = 0x0C,
    E_MSG_RECORD_INFO_NO_RECORDING_COPY_NEVER = 0x0D,
    E_MSG_RECORD_INFO_NO_RECORDING_NO_FURTHER_COPY = 0x0E,
#endif
    E_MSG_RECORD_INFO_NO_RECORDING_NO_MEDIA = 0x10,
    E_MSG_RECORD_INFO_NO_RECORDING_PLAYING = 0x11,
    E_MSG_RECORD_INFO_NO_RECORDING_ALREADY_RECORDING = 0x12,
    E_MSG_RECORD_INFO_NO_RECORDING_MEDIA_PROTECTED = 0x13,
    E_MSG_RECORD_INFO_NO_RECORDING_NO_SOURCE = 0x14,
    E_MSG_RECORD_INFO_NO_RECORDING_MEDIA_PROBLEM = 0x15,
#if(HDMI_CEC_VERSION >= CEC_VERSION_13a)
    E_MSG_RECORD_INFO_NO_RECORDING_NOT_ENOUGH_SPACE = 0x16,
    E_MSG_RECORD_INFO_NO_RECORDING_PARENTAL_LOCK = 0x17,
    E_MSG_RECORD_INFO_RECORDING_TERMINATED_NORMALLY = 0x1A,
    E_MSG_RECORD_INFO_RECORDING_ALREADY_TERMINATED = 0x1B,
#endif
    E_MSG_RECORD_INFO_NO_RECORDING_OTHER_REASON = 0x1F,
} MsCEC_MSG_RECORD_STATUS_INFO;



typedef enum _MsCEC_MSG_USER_CTRL_PARM
{
    E_MSG_UI_SELECT = 0x00,
    E_MSG_UI_UP = 0x01,
    E_MSG_UI_DOWN = 0x02,
    E_MSG_UI_LEFT = 0x03,
    E_MSG_UI_RIGHT = 0x04,
    E_MSG_UI_RIGHT_UP = 0x05,
    E_MSG_UI_RIGHT_DOWN = 0x06,
    E_MSG_UI_LEFT_UP = 0x07,
    E_MSG_UI_LEFT_DOWN = 0x08,
    E_MSG_UI_ROOTMENU = 0x09,
    E_MSG_UI_SETUP_MENU = 0x0A,
    E_MSG_UI_CONTENTS_MENU = 0x0B,
    E_MSG_UI_FAVORITE_MENU = 0x0C,
    E_MSG_UI_EXIT = 0x0D,



    E_MSG_UI_NUMBER_0 = 0x20,
    E_MSG_UI_NUMBER_1 = 0x21,
    E_MSG_UI_NUMBER_2 = 0x22,
    E_MSG_UI_NUMBER_3 = 0x23,
    E_MSG_UI_NUMBER_4 = 0x24,
    E_MSG_UI_NUMBER_5 = 0x25,
    E_MSG_UI_NUMBER_6 = 0x26,
    E_MSG_UI_NUMBER_7 = 0x27,
    E_MSG_UI_NUMBER_8 = 0x28,
    E_MSG_UI_NUMBER_9 = 0x29,

    E_MSG_UI_DOT = 0x2A,
    E_MSG_UI_ENTER = 0x2B,
    E_MSG_UI_CLEAR = 0x2C,


    E_MSG_UI_NEXT_FAVORITE = 0x2F,

    E_MSG_UI_CHANNEL_UP = 0x30,
    E_MSG_UI_CHANNEL_DOWN = 0x31,
    E_MSG_UI_PREVIOUS_CHANNEL = 0x32,
    E_MSG_UI_SOUND_SELECT = 0x33,
    E_MSG_UI_INPUT_SELECT = 0x34,
    E_MSG_UI_DISPLAY_INFO = 0x35,
    E_MSG_UI_HELP = 0x36,
    E_MSG_UI_PAGE_UP = 0x37,
    E_MSG_UI_PAGE_DOWN = 0x38,



    E_MSG_UI_POWER = 0x40,
    E_MSG_UI_VOLUME_UP = 0x41,
    E_MSG_UI_VOLUME_DOWN = 0x42,
    E_MSG_UI_MUTE = 0x43,
    E_MSG_UI_PLAY = 0x44,
    E_MSG_UI_STOP = 0x45,
    E_MSG_UI_PAUSE = 0x46,
    E_MSG_UI_RECORD = 0x47,
    E_MSG_UI_REWIND = 0x48,
    E_MSG_UI_FAST_FORWARD = 0x49,
    E_MSG_UI_EJECT = 0x4A,
    E_MSG_UI_FORWARD = 0x4B,
    E_MSG_UI_BACKWARD = 0x4C,
    E_MSG_UI_STOP_RECORD = 0x4D,
    E_MSG_UI_PAUSE_RECORD = 0x4E,



    E_MSG_UI_ANGLE = 0x50,
    E_MSG_UI_SUB_PICTURE = 0x51,
    E_MSG_UI_VIDEO_ON_DEMAND = 0x52,
    E_MSG_UI_ELECTRONIC_PROGRAM_GUIDE = 0x53,
    E_MSG_UI_TIMER_PROGRAMMING = 0x54,
    E_MSG_UI_INITIAL_CONFIGURATION = 0x55,




    E_MSG_UI_PLAY_FUN = 0x60,
    E_MSG_UI_PSUSE_PLAY_FUN = 0x61,
    E_MSG_UI_RECORD_FUN = 0x62,
    E_MSG_UI_PAUSE_RECORD_FUN = 0x63,
    E_MSG_UI_STOP_FUN = 0x64,
    E_MSG_UI_MUTE_FUN = 0x65,
    E_MSG_UI_RESTORE_VOLUME_FUN = 0x66,
    E_MSG_UI_TUNE_FUN = 0x67,
    E_MSG_UI_SELECT_MEDIA_FUN = 0x68,
    E_MSG_UI_SELECT_AV_INPUT_FUN = 0x69,
    E_MSG_UI_SELECT_AUDIO_INPUT_FUN = 0x6A,
    E_MSG_UI_POWER_TOGGLE_FUN = 0x6B,
    E_MSG_UI_POWER_OFF_FUN = 0x6C,
    E_MSG_UI_POWER_ON_FUN = 0x6D,



    E_MSG_UI_F1_BLUE = 0x71,
    E_MSG_UI_F2_RED = 0x72,
    E_MSG_UI_F3_GREEN = 0x73,
    E_MSG_UI_F4_YELLOW = 0x74,
    E_MSG_UI_F5 = 0x75,
    E_MSG_UI_DATA = 0x76,


} MsCEC_MSG_USER_CTRL_PARM;


#define CP_READ_POWERON_MODE 0x9A


#define M_POWER_ON_BY_HDMI_CEC 0x2F


typedef struct _MDrv_Cec_RxData_Info
{
    MS_U8 ucLength;
    MS_U8 tRxData[CEC_FIFO_DATA_NUMBER];
} MS_CEC_RxData_Info;

typedef struct DLL_PACKED
{
    MS_U8 CecFifoIdxS;
    MS_U8 CecFifoIdxE;
    MS_U8 bCecMsgCnt;
    MS_BOOL fCecInitFinish;
    MS_CEC_RxData_Info CecRxBuf[CEC_FIFO_NUM_COUNT];
    MsCEC_DEVICELA MyLogicalAddress;
    MS_U8 MyPhysicalAddress[CEC_PHY_ADDR_COUNT];
    MsCEC_DEVICE_TYPE MyDeviceType;
    MsCEC_MSG_POWER_STATUS_PARM MyPowerStatus;
    MS_BOOL CecDevicesExisted[15];

    MS_U8 ActiveDeviceCECVersion;
    MsCEC_DEVICE_TYPE ActiveDeviceType;
    MsCEC_DEVICELA ActiveLogicalAddress;
    MS_U8 ActivePhysicalAddress[CEC_PHY_ADDR_COUNT];
    MsCEC_MSG_POWER_STATUS_PARM ActivePowerStatus;

#if ENABLE_CEC_MULTIPLE
    MsCEC_DEVICELA MyLogicalAddress2;
    MS_U8 MyPhysicalAddress2[CEC_PHY_ADDR_COUNT];
    MsCEC_DEVICE_TYPE MyDeviceType2;
    MsCEC_DEVICE_TYPE IniLogicalAddress;
#endif
} MS_CEC_INFO_LIST;

typedef struct
{
    MS_BOOL bAttachDrvISR;
    MS_U32 ulXTAL_CLK_Hz;
} stCEC_INITIAL_CONFIG;

typedef struct
{
    MS_BOOL bAttachDrvISR;
    MS_U32 ulXTAL_CLK_Hz;
    MS_U32 ulReturnValue;
} stCEC_INITIAL_CONFIG_INFO;

typedef enum
{
    E_CEC_CMD_ATTACH_DRIVER_ISR
}E_CEC_CTRL_ID;







typedef struct
{
    MS_BOOL bAttachDrvFlag;
}stCMD_CEC_ATTACH_DRIVER_ISR;

typedef enum
{

    MAPI_CMD_DDC2BI_GET_INFO,
    MAPI_CMD_CEC_INIT_CHIP,
    MAPI_CMD_CEC_PORT_SELECT,
    MAPI_CMD_CEC_EXIT,
    MAPI_CMD_CEC_SET_MY_LOGICAL_ADDRESS,
    MAPI_CMD_CEC_INIT,
    MAPI_CMD_CEC_CHECK_EXIST_DEVICES,
    MAPI_CMD_CEC_NEXT_DEVICE,
    MAPI_CMD_CEC_CHK_RX_BUF,
    MAPI_CMD_CEC_TX_SEND_MSG,
    MAPI_CMD_CEC_TX_SEND_MSG2,
    MAPI_CMD_CEC_TX_SEND_POLLING_MSG,
    MAPI_CMD_CEC_MSG_ACTIVE_SOURCE,
    MAPI_CMD_CEC_MSG_ROUTING_CHANGE,
    MAPI_CMD_CEC_MSG_REQ_ACTIVE_SOURCE,
    MAPI_CMD_CEC_MSG_SET_STREAM_PATH,
    MAPI_CMD_CEC_MSG_STANDBY,
    MAPI_CMD_CEC_MSG_RECORD_OFF,
    MAPI_CMD_CEC_MSG_RECORD_ON,
    MAPI_CMD_CEC_MSG_REPORT_CEC_VERSION,
    MAPI_CMD_CEC_MSG_REQ_CEC_VERSION,
    MAPI_CMD_CEC_MSG_REPORT_PHYCAL_ADDRESS,
    MAPI_CMD_CEC_MSG_REQ_PHYCAL_ADDRESS,
    MAPI_CMD_CEC_MSG_DECK_CONTROL,
    MAPI_CMD_CEC_MSG_DEC_STATUS,
    MAPI_CMD_CEC_MSG_GIVE_DECK_STATUS,
    MAPI_CMD_CEC_MSG_DC_PLAY,
    MAPI_CMD_CEC_MSG_REQ_MENU_STATUS,
    MAPI_CMD_CEC_MSG_USER_CTRL_PRESSED,
    MAPI_CMD_CEC_MSG_USER_CTRL_RELEASED,
    MAPI_CMD_CEC_MSG_GIVE_AUDIO_STATUS,
    MAPI_CMD_CEC_MSG_REPORT_POWER_STATUS,
    MAPI_CMD_CEC_MSG_REQ_POWER_STATUS,
    MAPI_CMD_CEC_MSG_FEATURE_ABORT,
    MAPI_CMD_CEC_MSG_ABORT,
    MAPI_CMD_CEC_MSG_SEND_MENU_LANGUAGE,
    MAPI_CMD_CEC_MSG_REQ_ARC_INITIATION,
    MAPI_CMD_CEC_MSG_REQ_ARC_TERMINATION,
    MAPI_CMD_CEC_MSG_AUDIO_MODE_REQ,
    MAPI_CMD_CEC_MSG_REPORT_PHYCAL_ADDRESS2,
    MAPI_CMD_CEC_CHECK_FRAME,
    MAPI_CMD_CEC_CONFIG_WAKEUP,
    MAPI_CMD_CEC_ENABLED,
    MAPI_CMD_CEC_GET_TX_STATUS,
    MAPI_CMD_CEC_SET_POWER_STATE,
    MAPI_CMD_CEC_SET_MY_LOGICAL_ADDRESS2,
    MAPI_CMD_CEC_GET_HEADER,
    MAPI_CMD_CEC_GET_OPCODE,
    MAPI_CMD_CEC_GET_PARA,
    MAPI_CMD_CEC_GET_CMD_LEN,
    MAPI_CMD_CEC_IS_RX_BUF_EMPTY,
    MAPI_CMD_CEC_SET_ACTIVE_LOGICAL_ADDRESS,
    MAPI_CMD_CEC_GET_ACTIVE_LOGICAL_ADDRESS,
    MAPI_CMD_CEC_GET_POWER_STATUS,
    MAPI_CMD_CEC_GET_FIFO_IDX,
    MAPI_CMD_CEC_SET_FIFO_IDX,
    MAPI_CMD_CEC_SET_ACTIVE_POWER_STATUS,
    MAPI_CMD_CEC_GET_ACTIVE_POWER_STATUS,
    MAPI_CMD_CEC_SET_ACTIVE_PHYSICAL_ADDRESS,
    MAPI_CMD_CEC_SET_ACTIVE_DEVICE_CEC_VERSION,
    MAPI_CMD_CEC_SET_ACTIVE_DEVICE_TYPE,
    MAPI_CMD_CEC_GET_MSG_CNT,
    MAPI_CMD_CEC_SET_MSG_CNT,
    MAPI_CMD_CEC_GET_RX_DATA,
    MAPI_CMD_CEC_SET_MY_PHYSICAL_ADDRESS,
    MAPI_CMD_CEC_SET_MY_PHYSICAL_ADDRESS2,
    MAPI_CMD_CEC_SET_INITIATOR,
    MAPI_CMD_CEC_CHECK_DEVICE_IS_TX,
    MAPI_CMD_CEC_CONFIG_WAKEUP_INFO_VENDOR_ID,
    MAPI_CMD_CEC_SET_RETRY_COUNT,
    MAPI_CMD_CEC_ATTACH_DRIVER_ISR,
    MAPI_CMD_CEC_GET_CONFIGURATION,
}E_CEC_API_CMD_TYPE;

typedef struct
{
    MS_U32 u32XTAL_CLK_Hz;
}MS_CEC_INIT_INFO;

typedef struct DLL_PACKED
{
    MS_CEC_INFO_LIST *eInfo;
    MS_BOOL bGetInfo;
} stCEC_DDC2BI_GET_INFO, *pstCEC_DDC2BI_GET_INFO;

typedef struct
{
    MS_U32 u32XTAL_CLK_Hz;
} stCEC_INIT_CHIP, *pstCEC_INIT_CHIP;

typedef struct
{
    MsCEC_INPUT_PORT InputPort;
} stCEC_PORT_SELECT, *pstCEC_PORT_SELECT;

typedef struct
{
    MsCEC_DEVICELA myLA;
} stCEC_SET_MY_LOGICAL_ADDRESS, *pstCEC_SET_MY_LOGICAL_ADDRESS;

typedef struct
{
    MS_U32 u32XTAL_CLK_Hz;
} stCEC_INIT, *pstCEC_INIT;

typedef struct
{
    MsCEC_DEVICELA eNextDeviceLA;
} stCEC_NEXT_DEVICE, *pstCEC_NEXT_DEVICE;

typedef struct DLL_PACKED
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSGLIST eMsg;
    MS_U8 *ucCmd;
    MS_U8 ucLen;
    CEC_ERROR_CODE eErrorCode;
} stCEC_TX_SEND_MSG, *pstCEC_TX_SEND_MSG;

typedef struct DLL_PACKED
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSGLIST eMsg;
    MS_U8 *ucCmd;
    MS_U8 ucLen;
    CEC_ERROR_CODE eErrorCode;
} stCEC_TX_SEND_MSG2, *pstCEC_TX_SEND_MSG2;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_TX_SEND_POLLING_MSG, *pstCEC_TX_SEND_POLLING_MSG;

typedef struct
{
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_ACTIVE_SOURCE, *pstCEC_MSG_ACTIVE_SOURCE;

typedef struct DLL_PACKED
{
    MS_U8 *ucOrigAddr;
    MS_U8 *ucNewAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_ROUTING_CHANGE, *pstCEC_MSG_ROUTING_CHANGE;

typedef struct
{
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REQ_ACTIVE_SOURCE, *pstCEC_MSG_REQ_ACTIVE_SOURCE;

typedef struct DLL_PACKED
{
    MS_U8 *ucNewAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_SET_STREAM_PATH, *pstCEC_MSG_SET_STREAM_PATH;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_STANDBY, *pstCEC_MSG_STANDBY;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_RECORD_OFF, *pstCEC_MSG_RECORD_OFF;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSG_RECORD_SOURCE_TYPE eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_RECORD_ON, *pstCEC_MSG_RECORD_ON;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MS_U8 ucVersion;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REPORT_CEC_VERSION, *pstCEC_MSG_REPORT_CEC_VERSION;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REQ_CEC_VERSION, *pstCEC_MSG_REQ_CEC_VERSION;

typedef struct
{
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REPORT_PHYCAL_ADDRESS, *pstCEC_MSG_REPORT_PHYCAL_ADDRESS;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REQ_PHYCAL_ADDRESS, *pstCEC_MSG_REQ_PHYCAL_ADDRESS;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSG_DC_DECK_CTRL_PARM eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_DECK_CONTROL, *pstCEC_MSG_DECK_CONTROL;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSG_DC_DECK_STATUS_PARM eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_DEC_STATUS, *pstCEC_MSG_DEC_STATUS;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSG_STATUS_REQUEST_PARM eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_GIVE_DECK_STATUS, *pstCEC_MSG_GIVE_DECK_STATUS;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSG_DC_PLAY_PARM eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_DC_PLAY, *pstCEC_MSG_DC_PLAY;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSG_MENU_REQ_TYPE eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REQ_MENU_STATUS, *pstCEC_MSG_REQ_MENU_STATUS;

typedef struct
{
    MS_BOOL bUserCtrlEn;
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSG_USER_CTRL_PARM eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_USER_CTRL_PRESSED, *pstCEC_MSG_USER_CTRL_PRESSED;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_USER_CTRL_RELEASED, *pstCEC_MSG_USER_CTRL_RELEASED;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_GIVE_AUDIO_STATUS, *pstCEC_MSG_GIVE_AUDIO_STATUS;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REPORT_POWER_STATUS, *pstCEC_MSG_REPORT_POWER_STATUS;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REQ_POWER_STATUS, *pstCEC_MSG_REQ_POWER_STATUS;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSGLIST eMsg;
    MsCEC_MSG_ABORT_REASON eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_FEATURE_ABORT, *pstCEC_MSG_FEATURE_ABORT;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    MsCEC_MSGLIST eMsg;
    MsCEC_MSG_ABORT_REASON eCmd;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_ABORT, *pstCEC_MSG_ABORT;

typedef struct DLL_PACKED
{
    MS_U8 *pu8MenulanguageCode;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_SEND_MENU_LANGUAGE, *pstCEC_MSG_SEND_MENU_LANGUAGE;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REQ_ARC_INITIATION, *pstCEC_MSG_REQ_ARC_INITIATION;

typedef struct
{
    MsCEC_DEVICELA eDetAddr;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REQ_ARC_TERMINATION, *pstCEC_MSG_REQ_ARC_TERMINATION;

typedef struct DLL_PACKED
{
    MsCEC_DEVICELA eDetAddr;
    MS_BOOL bAmpSwitch;
    MS_U8 *ucMyAddress;
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_AUDIO_MODE_REQ, *pstCEC_MSG_AUDIO_MODE_REQ;

typedef struct
{
    CEC_ERROR_CODE eErrorCode;
} stCEC_MSG_REPORT_PHYCAL_ADDRESS2, *pstCEC_MSG_REPORT_PHYCAL_ADDRESS2;

typedef struct
{
    MsCEC_MSG_TRANS_TYPE eMsgType;
    MS_U8 ucLen;
    MS_BOOL bValid;
} stCEC_CHECK_FRAME, *pstCEC_CHECK_FRAME;

typedef struct
{
    MS_BOOL bEnableFlag;
} stCEC_ENABLED, *pstCEC_ENABLED;

typedef struct
{
    MS_U8 ucTxStatus;
} stCEC_GET_TX_STATUS, *pstCEC_GET_TX_STATUS;

typedef struct
{
    MS_BOOL bIsTx;
} stCEC_DEVICE_IS_TX, *pstCEC_DEVICE_IS_TX;

typedef struct
{
    EN_POWER_MODE ePowerState;
    MS_U32 u32Status;
} stCEC_SET_POWER_STATE, *pstCEC_SET_POWER_STATE;

typedef struct
{
    MsCEC_DEVICELA myLA;
} stCEC_SET_MY_LOGICAL_ADDRESS2, *pstCEC_SET_MY_LOGICAL_ADDRESS2;


typedef struct
{
    MS_U8 ucValue;
} stCEC_GET_HEADER, *pstCEC_GET_HEADER;

typedef struct
{
    MS_U8 ucValue;
} stCEC_GET_OPCODE, *pstCEC_GET_OPCODE;

typedef struct
{
    MS_U8 ucIdx;
    MS_U8 ucValue;
} stCEC_GET_PARA, *pstCEC_GET_PARA;

typedef struct
{
    MS_U8 ucValue;
} stCEC_GET_CMD_LEN, *pstCEC_GET_CMD_LEN;

typedef struct
{
    MS_BOOL bEmpty;
} stCEC_IS_RX_BUF_EMPTY, *pstCEC_IS_RX_BUF_EMPTY;

typedef struct
{
    MsCEC_DEVICELA eAddr;
} stCEC_SET_ACTIVE_LOGICAL_ADDRESS, *pstCEC_SET_ACTIVE_LOGICAL_ADDRESS;

typedef struct
{
    MsCEC_DEVICELA eAddr;
} stCEC_GET_ACTIVE_LOGICAL_ADDRESS, *pstCEC_GET_ACTIVE_LOGICAL_ADDRESS;

typedef struct
{
    MsCEC_MSG_POWER_STATUS_PARM ePowerStatus;
} stCEC_GET_POWER_STATUS, *pstCEC_GET_POWER_STATUS;

typedef struct
{
    MS_U8 ucFifoIdx;
} stCEC_GET_FIFO_IDX, *pstCEC_GET_FIFO_IDX;

typedef struct
{
    MS_U8 ucIdx;
} stCEC_SET_FIFO_IDX, *pstCEC_SET_FIFO_IDX;

typedef struct
{
    MsCEC_MSG_POWER_STATUS_PARM eStatus;
} stCEC_SET_ACTIVE_POWER_STATUS, *pstCEC_SET_ACTIVE_POWER_STATUS;

typedef struct
{
    MsCEC_MSG_POWER_STATUS_PARM ePowerStatus;
} stCEC_GET_ACTIVE_POWER_STATUS, *pstCEC_GET_ACTIVE_POWER_STATUS;

typedef struct
{
    MS_U8 ucPara1;
    MS_U8 ucPara2;
} stCEC_SET_ACTIVE_PHYSICAL_ADDRESS, *pstCEC_SET_ACTIVE_PHYSICAL_ADDRESS;

typedef struct
{
    MS_U8 ucVer;
} stCEC_SET_ACTIVE_DEVICE_CEC_VERSION, *pstCEC_SET_ACTIVE_DEVICE_CEC_VERSION;

typedef struct
{
    MsCEC_DEVICE_TYPE eType;
} stCEC_SET_ACTIVE_DEVICE_TYPE, *pstCEC_SET_ACTIVE_DEVICE_TYPE;

typedef struct
{
    MS_U8 ucMsgCnt;
} stCEC_GET_MSG_CNT, *pstCEC_GET_MSG_CNT;

typedef struct
{
    MS_U8 ucCnt;
} stCEC_SET_MSG_CNT, *pstCEC_SET_MSG_CNT;

typedef struct
{
    MS_U8 ucFifoIdx;
    MS_U8 ucIdx;
    MS_U8 ucRxData;
} stCEC_GET_RX_DATA, *pstCEC_GET_RX_DATA;

typedef struct DLL_PACKED
{
    MS_U8 *ucData;
} stCEC_SET_MY_PHYSICAL_ADDRESS, *pstCEC_SET_MY_PHYSICAL_ADDRESS;

typedef struct DLL_PACKED
{
    MS_U8 *ucData;
} stCEC_SET_MY_PHYSICAL_ADDRESS2, *pstCEC_SET_MY_PHYSICAL_ADDRESS2;

typedef struct
{
    MsCEC_DEVICELA eIniLa;
} stCEC_SET_INITIATOR, *pstCEC_SET_INITIATOR;

typedef struct DLL_PACKED
{
    MS_U8 *ucVendorID;
} stCEC_CONFIG_WAKEUP_INFO_VENDOR_ID, *pstCEC_CONFIG_WAKEUP_INFO_VENDOR_ID;

typedef struct
{
    MS_U8 ucRetryCount;
} stCEC_SET_RETRY_COUNT, *pstCEC_SET_RETRY_COUNT;

typedef struct
{
    MS_BOOL bAttachDrvFlag;
}stCEC_ATTACH_DRIVER_ISR, *pstCEC_ATTACH_DRIVER_ISR;

typedef struct
{
    stCEC_INITIAL_CONFIG_INFO stInitialConfigInfo;
} stCEC_GET_CONFIGURATION, *pstCEC_GET_CONFIGURATION;



typedef struct
{
    MS_BOOL bIsInitialized;
    MS_BOOL bIsRunning;
}MS_CEC_Status;
# 1331 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
void SYMBOL_WEAK MApi_CEC_PortSelcet(MsCEC_INPUT_PORT InputPort);
# 1340 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL MApi_CEC_GetLibVer(const MSIF_Version **ppVersion);
# 1349 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL MApi_DDC2BI_GetInfo(MS_CEC_INFO_LIST *pInfo);
# 1358 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL MApi_DDC2BI_GetStatus(MS_CEC_Status *pStatus);
# 1367 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL MApi_DDC2BI_SetDbgLevel(MS_U16 u16DbgSwitch);






void MApi_CEC_Exit(void);







void MApi_CEC_Init(MS_CEC_INIT_INFO *pCECInfo);







void MApi_CEC_InitChip(MS_CEC_INIT_INFO *pCECInfo);







void MApi_CEC_SetMyLogicalAddress(MsCEC_DEVICELA myLA);






void MApi_CEC_ChkRxBuf(void);
# 1416 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_TxSendMsg(MsCEC_DEVICELA header,MsCEC_MSGLIST opcode,MS_U8* operand_ptr,MS_U8 len);
# 1427 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_TxSendMsg2(MsCEC_DEVICELA dst_address, MsCEC_MSGLIST msg, MS_U8* operand_ptr, MS_U8 len);







CEC_ERROR_CODE MsAPI_CecTxSendPollingMsg(MsCEC_DEVICELA dst_address);
# 1447 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_ActiveSource(void);
# 1461 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_RoutingChange(MS_U8* orig_address, MS_U8* new_address);






CEC_ERROR_CODE MApi_CEC_Msg_ReqActiveSource(void);







CEC_ERROR_CODE MApi_CEC_Msg_SetStreamPath(MS_U8* new_address);
# 1491 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_Standby(MsCEC_DEVICELA dst_address);
# 1504 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_RecordOff(MsCEC_DEVICELA dst_address);
# 1513 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MsAPI_CEC_Msg_RecordOn(MsCEC_DEVICELA dst_address, MsCEC_MSG_RECORD_SOURCE_TYPE cmd);
# 1527 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_ReportCECVersion(MsCEC_DEVICELA dst_address, MS_U8 version);







CEC_ERROR_CODE MApi_CEC_Msg_ReqCECVersion(MsCEC_DEVICELA dst_address);






CEC_ERROR_CODE MApi_CEC_Msg_ReportPhycalAddress(void);







CEC_ERROR_CODE MApi_CEC_Msg_ReqPhycalAddress(MsCEC_DEVICELA dst_address);
# 1564 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_DeckControl(MsCEC_DEVICELA dst_address, MsCEC_MSG_DC_DECK_CTRL_PARM cmd);
# 1573 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_DecStatus(MsCEC_DEVICELA dst_address, MsCEC_MSG_DC_DECK_STATUS_PARM cmd);
# 1582 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_MSg_GiveDeckStatus(MsCEC_DEVICELA dst_address, MsCEC_MSG_STATUS_REQUEST_PARM cmd);
# 1591 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_MSg_DCPlay(MsCEC_DEVICELA dst_address, MsCEC_MSG_DC_PLAY_PARM cmd);
# 1606 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_ReqMenuStatus(MsCEC_DEVICELA dst_address, MsCEC_MSG_MENU_REQ_TYPE cmd);
# 1616 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_UserCtrlPressed(MS_BOOL bUserCtrlEn, MsCEC_DEVICELA dst_address, MsCEC_MSG_USER_CTRL_PARM cmd);







CEC_ERROR_CODE MApi_CEC_Msg_UserCtrlReleased(MsCEC_DEVICELA dst_address);
# 1637 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_ReportPowerStatus(MsCEC_DEVICELA dst_address);







CEC_ERROR_CODE MApi_CEC_Msg_ReqPowerStatus(MsCEC_DEVICELA dst_address);
# 1659 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MApi_CEC_Msg_FeatureAbort(MsCEC_DEVICELA dst_address, MsCEC_MSGLIST msg, MsCEC_MSG_ABORT_REASON cmd);







CEC_ERROR_CODE MApi_CEC_Msg_Abort(MsCEC_DEVICELA dst_address);







CEC_ERROR_CODE MApi_CEC_Msg_SendMenuLanguage(MS_U8* pu8MenuLanguageCode);







CEC_ERROR_CODE MsAPI_CecMsg_ReqARCInitiation(MsCEC_DEVICELA dst_address);







CEC_ERROR_CODE MsAPI_CecMsg_ReqARCTermination(MsCEC_DEVICELA dst_address);
# 1701 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
CEC_ERROR_CODE MsAPI_CecMsg_AudioModeReq(MsCEC_DEVICELA dst_address, MS_BOOL amp_switch, MS_U8* my_address );







CEC_ERROR_CODE MApi_CEC_Msg_GiveAudioStatus(MsCEC_DEVICELA dst_address);






MS_U8 MApi_CEC_Get_Header(void);






MS_U8 MApi_CEC_Get_OpCode(void);







MS_U8 MApi_CEC_Get_Para(MS_U8 u8Idx);






MS_U8 MApi_CEC_GetCmdLen(void);







void MApi_CEC_SetActiveLogicalAddress(MsCEC_DEVICELA Addr);






MsCEC_DEVICELA MApi_CEC_GetActiveLogicalAddress(void);






MsCEC_MSG_POWER_STATUS_PARM MApi_CEC_GetPowerStatus(void);






MS_U8 MApi_CEC_GetFifoIdx(void);







void MApi_CEC_SetFifoIdx(MS_U8 u8Idx);







void MApi_CEC_SetActivePowerStatus(MsCEC_MSG_POWER_STATUS_PARM Status);






MsCEC_MSG_POWER_STATUS_PARM MApi_CEC_GetActivePowerStatus(void);
# 1799 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
void MApi_CEC_SetActivePhysicalAddress(MS_U8 u8Para1, MS_U8 u8Para2);







void MApi_CEC_SetActiveDeviceCECVersion(MS_U8 u8Ver);







void MApi_CEC_SetActiveDeviceType(MsCEC_DEVICE_TYPE Type);






MS_U8 MApi_CEC_GetMsgCnt(void);







void MApi_CEC_SetMsgCnt(MS_U8 u8Cnt);
# 1839 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_U8 MApi_CEC_GetRxData(MS_U8 u8Fifoidx, MS_U8 u8Idx);
# 1849 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL MApi_CEC_CheckFrame(MsCEC_MSG_TRANS_TYPE msg_type, MS_U8 ucLen);






void MApi_CEC_CheckExistDevices(void);






void MApi_CEC_ConfigWakeUp(void);







void MApi_CEC_Enabled(MS_BOOL bEnableFlag);







void MApi_CEC_SetMyPhysicalAddress(MS_U8 *pdata);

#if ENABLE_CEC_MULTIPLE






void MApi_CEC_SetMyLogicalAddress2(MsCEC_DEVICELA myLA);






CEC_ERROR_CODE MApi_CEC_Msg_ReportPhycalAddress2(void);







void MApi_CEC_SetMyPhysicalAddress2(MS_U8 *pdata);







void MApi_CEC_SetInitiator(MsCEC_DEVICELA IniLA);
#endif
# 1923 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_U8 MApi_CEC_GetTxStatus(void);
# 1932 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_U32 MApi_CEC_SetPowerState(EN_POWER_MODE u16PowerState);







void MApi_CEC_SetRetryCount(MS_U8 u8RetryCount);







void MApi_CEC_ConfigWakeupInfoVendorID(MS_U8* u8CecVendorID);







MsCEC_DEVICELA MApi_CEC_NextDevice(void);
# 1965 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL MApi_CEC_IsRxBufEmpty(void);
# 1974 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL MApi_CEC_CheckDeviceIsTx(void);
# 1985 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_BOOL SYMBOL_WEAK MApi_CEC_Ctrl(MS_U32 u32Cmd, void *pBuf, MS_U32 u32BufSize);
# 1994 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiCEC.h"
MS_U32 SYMBOL_WEAK mapi_CEC_GetConfig(stCEC_INITIAL_CONFIG *stInitialConfig);

#ifdef __cplusplus
}
#endif

#endif
# 138 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
#ifndef _DRV_RTC_H_
#define _DRV_RTC_H_ 



#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"




#define RTC_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'R','T','C',}, \
    {'0','0'}, \
    {'0','0'}, \
    {'0','0','0','0','0','0','0','0'}, \
    MSIF_OS

#define RTC_VERSION 0x00000001

typedef enum _RTC_DbgLv
{
    E_RTC_DBGLV_NONE,
    E_RTC_DBGLV_ERR_ONLY,
    E_RTC_DBGLV_INFO,
    E_RTC_DBGLV_ALL
}RTC_DbgLv;


typedef enum
{
    E_MS_DRV_RTC_0,
    E_MS_DRV_RTC_2,
    E_MS_DRV_RTC_MAX,
}E_MS_DRV_RTC;

typedef enum
{
    E_MS_DRV_RTC_TIME_UNIT_SEC,
    E_MS_DRV_RTC_TIME_UNIT_MS,
    E_MS_DRV_RTC_TIME_UNIT_US,
}E_MS_DRV_RTC_TIME_UNIT;

typedef enum
{
    E_MS_DRV_RTC_STATUS_OK,
    E_MS_DRV_RTC_STATUS_NOT_INIT,
    E_MS_DRV_RTC_STATUS_IN_USE,
    E_MS_DRV_RTC_STATUS_INVALID_ARGUMENT,
}E_MS_DRV_RTC_STATUS;

E_MS_DRV_RTC_STATUS MDrv_RTC_ResetRTC(E_MS_DRV_RTC eRtc);
E_MS_DRV_RTC_STATUS MDrv_RTC_SetCount(E_MS_DRV_RTC eRtc, MS_U32 u32Value);
E_MS_DRV_RTC_STATUS MDrv_RTC_SetMatchCount(E_MS_DRV_RTC eRtc, MS_U32 u32Value);
MS_U32 MDrv_RTC_GetMatchCount(E_MS_DRV_RTC eRtc);
E_MS_DRV_RTC_STATUS MDrv_RTC_IntClear(E_MS_DRV_RTC eRtc);
E_MS_DRV_RTC_STATUS MDrv_RTC_SetPeriod(E_MS_DRV_RTC eRtc, MS_U32 u32Amount, E_MS_DRV_RTC_TIME_UNIT eUnit);
E_MS_DRV_RTC_STATUS MDrv_RTC_StartCounter(E_MS_DRV_RTC eRtc);
# 215 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
MS_BOOL MDrv_RTC_Init(E_MS_DRV_RTC eRtc, MS_U32 u32Freq, MS_U32 u32Xtal, MS_U32 u32Sec,InterruptCb pIntCb);
# 224 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
MS_U32 MDrv_RTC_GetCount(E_MS_DRV_RTC eRtc);
# 233 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
void MDrv_RTC_DeInit(E_MS_DRV_RTC eRtc);
# 246 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
void RTCRegisterToUtopia(FUtopiaOpen ModuleType);
# 255 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
MS_U32 RTCOpen(void** pInstance, MS_U32 u32ModuleVersion, void* pAttribute);
# 264 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
MS_U32 RTCClose(void* pInstance);
# 273 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRTC.h"
MS_U32 RTCIoctl(void* pInstance, MS_U32 u32Cmd, void *pArgs);


typedef struct _RTC_RESOURCE_PRIVATE
{
    MS_U32 Dummy;
}RTC_RESOURCE_PRIVATE;

typedef struct _RTC_INSTANT_PRIVATE
{

}RTC_INSTANT_PRIVATE;

typedef struct _RTC_INIT_PARAM
{
    E_MS_DRV_RTC eRtc;
    MS_U32 u32Freq;
    MS_U32 u32Xtal;
    MS_U32 u32Sec;
    InterruptCb pIntCb;

} RTC_INIT_PARAM;

MS_U16 MDrv_RTC_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef __cplusplus
}
#endif

#endif
# 144 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
#ifndef _DRV_PCMCIA_H_
#define _DRV_PCMCIA_H_ 

#include "MsTypes.h"
#include "MsDevice.h"

#include "ULog.h"




#define MAX_PCMCIA_CONFIGS 6
#define MAX_PCMCIA_STRLEN (64)
#define MAX_CIS_SIZE 0x100
#define PCMCIA_HW_TIMEOUT 3000
#define PCMCIA_IRQ_ENABLE 1


#define PCMCIA_MEM_READY (0x04)


#define PCMCIA_PHYS_REG_DATA (0)
#define PCMCIA_PHYS_REG_COMMANDSTATUS (1)
#define PCMCIA_PHYS_REG_SIZELOW (2)
#define PCMCIA_PHYS_REG_SIZEHIGH (3)


#define PCMCIA_STATUS_DATAAVAILABLE (0x80)
#define PCMCIA_STATUS_FREE (0x40)
#define PCMCIA_STATUS_IIR (0x10)
#define PCMCIA_STATUS_RESERVEDBITS (0x2C)
#define PCMCIA_STATUS_WRITEERROR (0x02)
#define PCMCIA_STATUS_READERROR (0x01)


#define PCMCIA_COMMAND_DAIE (0x80)

#define PCMCIA_COMMAND_FRIE (0x40)

#define PCMCIA_COMMAND_RESERVEDBITS (0x30)
#define PCMCIA_COMMAND_RESET (0x08)
#define PCMCIA_COMMAND_SIZEREAD (0x04)
#define PCMCIA_COMMAND_SIZEWRITE (0x02)
#define PCMCIA_COMMAND_HOSTCONTROL (0x01)

#define PCMCIAINFO_MANID_VALID (0x00000001)
#define PCMCIAINFO_VERS1_VALID (0x00000002)
#define PCMCIAINFO_FUNCID_VALID (0x00000004)

#ifdef __cplusplus
extern "C" {
#endif





#define MSIF_PCMCIA_LIB_CODE {'P','C','M','_'}
#define MSIF_PCMCIA_LIBVER {'0','1'}
#define MSIF_PCMCIA_BUILDNUM {'0','1'}
#define MSIF_PCMCIA_CHANGELIST {'0','0','2','5','8','4','9','3'}

#define PCMCIA_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_PCMCIA_LIB_CODE, \
    MSIF_PCMCIA_LIBVER, \
    MSIF_PCMCIA_BUILDNUM, \
    MSIF_PCMCIA_CHANGELIST, \
    MSIF_OS

typedef void (*IsrCallback)( void* wparam, void* lparam );





typedef enum {
    E_PCMCIA_FUNC_CUSTOM = 0,
    E_PCMCIA_FUNC_MEMORY = 1,
    E_PCMCIA_FUNC_SERIAL = 2,
    E_PCMCIA_FUNC_PARALLEL = 3,
    E_PCMCIA_FUNC_DRIVE = 4,
    E_PCMCIA_FUNC_VIDEO = 5,
    E_PCMCIA_FUNC_NETWORK = 6,
    E_PCMCIA_FUNC_AIMS = 7,
    E_PCMCIA_FUNC_SCSI = 8,
    E_PCMCIA_FUNC_CARDBUS = 9,
    E_PCMCIA_FUNC_MANUFACTURER = 0xFF
} PCMCIA_FUNCTYPE;

typedef enum {
    E_PCMCIA_MODULE_A = 0,
    E_PCMCIA_MODULE_B = 1,
    E_PCMCIA_MODULE_MAX = 2
} PCMCIA_MODULE;





typedef struct
{
    MS_U32 dwEAAddr;
    MS_U32 dwEALen;
    MS_U16 wIRQData;
    MS_U8 bConfigIndex;
    MS_U8 bIRQDesc1;
    MS_U8 fCITagsPresent;
} PCMCIA_CONFIG;



typedef struct
{
    MS_U32 ConfigOffset;
    MS_U32 dwValidFlags;
    MS_U16 wManufacturerId;
    MS_U16 wCardID;


    MS_U16 wPCMCIAStdRev;
    MS_U8 pszManufacturerName[MAX_PCMCIA_STRLEN];
    MS_U8 pszProductName[MAX_PCMCIA_STRLEN];
    MS_U8 pszProductInfo1[MAX_PCMCIA_STRLEN];
    MS_U8 pszProductInfo2[MAX_PCMCIA_STRLEN];
    MS_U8 bCI_PLUS;

    PCMCIA_FUNCTYPE FuncType;
    MS_U8 bFuncIDSysInfo;

    MS_U8 bINT;
    MS_U8 bNumConfigs;

    PCMCIA_CONFIG Config[MAX_PCMCIA_CONFIGS];
} PCMCIA_INFO;




typedef struct {
    MS_BOOL bISRCardInsert;
    MS_BOOL bISRCardRemove;
    MS_BOOL bISRCardData;
} PCMCIA_ISR;




typedef void *PCMCIA_HANDLE;
# 322 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_Init(MS_BOOL bCD_Reverse);







MS_BOOL MDrv_PCMCIA_GetConfig(MS_BOOL* bCD_Reverse);
# 340 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_U32 MDrv_PCMCIA_SetPowerState(EN_POWER_MODE u16PowerState);
# 351 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_BOOL MDrv_PCMCIA_PollingV2( PCMCIA_MODULE eModule );
# 362 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_BOOL MDrv_PCMCIA_DetectV2( PCMCIA_MODULE eModule );






void MDrv_PCMCIA_Set_HW_ResetDuration( MS_U8 u8HW_ResetDuration );






void MDrv_PCMCIA_ResetHW_V2( PCMCIA_MODULE eModule );
# 388 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_ReadAttribMemV2( PCMCIA_MODULE eModule, MS_U16 u16Addr, MS_U8 *pDest );
# 397 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_ParseAttribMem( MS_U8 *pAttribMem, MS_U16 dwLen, PCMCIA_INFO *pInfo );
# 406 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_WriteAttribMemV2( PCMCIA_MODULE eModule, MS_U16 wAddr, MS_U8 bData );
# 415 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_WriteIOMemV2( PCMCIA_MODULE eModule, MS_U16 wAddr, MS_U8 bData );
# 426 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_WriteIOMemLongV2( PCMCIA_MODULE eModule, MS_U16 u16Addr, MS_U8 u8Value, MS_U16 u16DataLen, MS_U8* u8pWriteBuffer);
# 437 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_U8 MDrv_PCMCIA_ReadIOMemV2( PCMCIA_MODULE eModule, MS_U16 wAddr );







MS_BOOL MDrv_PCMCIA_IsModuleStillPluggedV2( PCMCIA_MODULE eModule );






void MDrv_PCMCIA_Set_Detect_Trigger( MS_BOOL bActiveHigh );






void MDrv_PCMCIA_Set_Detect_Enable( MS_BOOL bEnable );






MS_U32 MDrv_PCMCIA_Get_CD_IntervalV2( PCMCIA_MODULE eModule );







MS_BOOL MDrv_PCMCIA_GetLibVer( const MSIF_Version **ppVersion );
# 483 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_SetCommandBitV2( PCMCIA_MODULE eModule, MS_U8 u8CommandBit, MS_BOOL bValue );







MS_BOOL MDrv_PCMCIA_ResetInterfaceV2( PCMCIA_MODULE eModule );







MS_BOOL MDrv_PCMCIA_IsDataAvailableV2( PCMCIA_MODULE eModule );
# 508 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_U16 MDrv_PCMCIA_ReadDataV2( PCMCIA_MODULE eModule, MS_U8* u8pReadBuffer, MS_U16 u16ReadBufferSize );
# 518 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_BOOL MDrv_PCMCIA_WriteDataV2( PCMCIA_MODULE eModule, MS_U8* u8pWriteBuffer, MS_U16 u16DataLen );
# 528 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_BOOL MDrv_PCMCIA_SwitchToIOmodeV2( PCMCIA_MODULE eModule, PCMCIA_INFO *pInfo );
# 539 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_U16 MDrv_PCMCIA_NegotiateBufferSizeV2( PCMCIA_MODULE eModule, PCMCIA_INFO *pInfo );







void MDrv_PCMCIA_WriteBufferSizeV2( PCMCIA_MODULE eModule, MS_U16 u16BufferSize );
# 557 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_BOOL MDrv_PCMCIA_WaitForStatusBitV2( PCMCIA_MODULE eModule, MS_U8 u8StatusBit );
# 567 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
MS_U8 MDrv_PCMCIA_ReadyStatus( void );





void MDrv_PCMCIA_Exit( void );

#if PCMCIA_IRQ_ENABLE







void MDrv_PCMCIA_Enable_InterruptV2( PCMCIA_MODULE eModule, MS_BOOL bEnable );
# 592 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
void MDrv_PCMCIA_Set_InterruptStatusV2( PCMCIA_MODULE eModule, MS_BOOL Status );







MS_BOOL MDrv_PCMCIA_Get_InterruptStatusV2( PCMCIA_MODULE eModule );







void MDrv_PCMCIA_InstarllIsrCallbackV2( PCMCIA_MODULE eModule, IsrCallback fnIsrCallback );
#endif





#define PCMCIA_DEFAULT_MODULE E_PCMCIA_MODULE_A
#if 0

    #define MDrv_PCMCIA_Polling(p...) MDrv_PCMCIA_PollingV2(PCMCIA_DEFAULT_MODULE)
    #define MDrv_PCMCIA_IsModuleStillPlugged(p...) MDrv_PCMCIA_IsModuleStillPluggedV2(PCMCIA_DEFAULT_MODULE)
    #define MDrv_PCMCIA_SetCommandBit(p...) MDrv_PCMCIA_SetCommandBitV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_ResetInterface(p...) MDrv_PCMCIA_ResetInterfaceV2(PCMCIA_DEFAULT_MODULE)
    #define MDrv_PCMCIA_IsDataAvailable(p...) MDrv_PCMCIA_IsDataAvailableV2(PCMCIA_DEFAULT_MODULE)
    #define MDrv_PCMCIA_ReadData(p...) MDrv_PCMCIA_ReadDataV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_WriteData(p...) MDrv_PCMCIA_WriteDataV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_SwitchToIOmode(p...) MDrv_PCMCIA_SwitchToIOmodeV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_NegotiateBufferSize(p...) MDrv_PCMCIA_NegotiateBufferSizeV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_WriteBufferSize(p...) MDrv_PCMCIA_WriteBufferSizeV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_WaitForStatusBit(p...) MDrv_PCMCIA_WaitForStatusBitV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_ResetHW(p...) MDrv_PCMCIA_ResetHW_V2(PCMCIA_DEFAULT_MODULE)
    #define MDrv_PCMCIA_WriteAttribMem(p...) MDrv_PCMCIA_WriteAttribMemV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_ReadAttribMem(p...) MDrv_PCMCIA_ReadAttribMemV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_WriteIOMem(p...) MDrv_PCMCIA_WriteIOMemV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_WriteIOMemLong(p...) MDrv_PCMCIA_WriteIOMemLongV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_ReadIOMem(p...) MDrv_PCMCIA_ReadIOMemV2(PCMCIA_DEFAULT_MODULE, p)
    #define MDrv_PCMCIA_Get_CD_Interval(p...) MDrv_PCMCIA_Get_CD_IntervalV2(PCMCIA_DEFAULT_MODULE)

    #if PCMCIA_IRQ_ENABLE
        #define MDrv_PCMCIA_Enable_Interrupt(p...) MDrv_PCMCIA_Enable_InterruptV2(PCMCIA_DEFAULT_MODULE, p)
        #define MDrv_PCMCIA_Set_InterruptStatus(p...) MDrv_PCMCIA_Set_InterruptStatusV2(PCMCIA_DEFAULT_MODULE, p)
        #define MDrv_PCMCIA_Get_InterruptStatus(p...) MDrv_PCMCIA_Get_InterruptStatusV2(PCMCIA_DEFAULT_MODULE)
        #define MDrv_PCMCIA_InstarllIsrCallback(p...) MDrv_PCMCIA_InstarllIsrCallbackV2(PCMCIA_DEFAULT_MODULE, p)
    #endif
#else






    MS_BOOL MDrv_PCMCIA_Polling( void );






    MS_BOOL MDrv_PCMCIA_IsModuleStillPlugged( void );
# 666 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    void MDrv_PCMCIA_SetCommandBit( MS_U8 u8CommandBit, MS_BOOL bValue );







    MS_BOOL MDrv_PCMCIA_ResetInterface( void );







    MS_BOOL MDrv_PCMCIA_IsDataAvailable( void );
# 691 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    MS_U16 MDrv_PCMCIA_ReadData( MS_U8* u8pReadBuffer, MS_U16 u16ReadBufferSize );
# 701 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    MS_BOOL MDrv_PCMCIA_WriteData( MS_U8* u8pWriteBuffer, MS_U16 u16DataLen );
# 710 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    MS_BOOL MDrv_PCMCIA_SwitchToIOmode( PCMCIA_INFO *pInfo );







    MS_U16 MDrv_PCMCIA_NegotiateBufferSize( PCMCIA_INFO *pInfo );







    void MDrv_PCMCIA_WriteBufferSize( MS_U16 u16BufferSize );
# 735 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    MS_BOOL MDrv_PCMCIA_WaitForStatusBit( MS_U8 u8StatusBit );






    void MDrv_PCMCIA_ResetHW( void );
# 751 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    void MDrv_PCMCIA_WriteAttribMem( MS_U16 wAddr, MS_U8 bData );
# 760 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    void MDrv_PCMCIA_ReadAttribMem( MS_U16 u16Addr, MS_U8 *pDest );
# 769 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    void MDrv_PCMCIA_WriteIOMem( MS_U16 wAddr, MS_U8 bData );
# 780 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPCMCIA.h"
    void MDrv_PCMCIA_WriteIOMemLong( MS_U16 u16Addr, MS_U8 u8Value, MS_U16 u16DataLen, MS_U8* u8pWriteBuffer);







    MS_U8 MDrv_PCMCIA_ReadIOMem( MS_U16 wAddr );






    MS_U32 MDrv_PCMCIA_Get_CD_Interval( void );

    #if PCMCIA_IRQ_ENABLE






        void MDrv_PCMCIA_Enable_Interrupt( MS_BOOL bEnable );







        void MDrv_PCMCIA_Set_InterruptStatus( MS_BOOL Status );






        MS_BOOL MDrv_PCMCIA_Get_InterruptStatus( void );







        void MDrv_PCMCIA_InstarllIsrCallback( IsrCallback fnIsrCallback );
    #endif
#endif

#ifdef __cplusplus
}
#endif

#endif
# 130 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
#ifndef __DRVGPIO_H__
#define __DRVGPIO_H__ 


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"

#define MSIF_GPIO_LIB_CODE {'G','P','I','O'}
#define MSIF_GPIO_LIBVER {'0','3'}
#define MSIF_GPIO_BUILDNUM {'0','6'}
#define MSIF_GPIO_CHANGELIST {'0','0','5','5','7','0','9','3'}

#define GPIO_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_GPIO_LIB_CODE, \
    MSIF_GPIO_LIBVER, \
    MSIF_GPIO_BUILDNUM, \
    MSIF_GPIO_CHANGELIST, \
    MSIF_OS

typedef enum _GPIO_DbgLv
{
    E_GPIO_DBGLV_NONE,
    E_GPIO_DBGLV_ERR_ONLY,
    E_GPIO_DBGLV_REG_DUMP,
    E_GPIO_DBGLV_INFO,
    E_GPIO_DBGLV_ALL
}GPIO_DbgLv;

typedef enum _GPIO_Result
{
    E_GPIO_NOT_SUPPORT = -1,
    E_GPIO_FAIL = 0,
    E_GPIO_OK = 1
}GPIO_Result;

typedef struct _GPIO_Info
{
    MS_U32 u32GPIONum;
    MS_U32 u32IOMap;
    MS_U32 u32IOMap_PM;
}GPIO_Info;

typedef struct _GPIO_Status
{
    MS_U8 u8DbgLevel;
    MS_BOOL bInit;
}GPIO_Status;

typedef int MS_GPIO_NUM;

typedef enum _GPIO_Attribute
{
 E_GPIO_ATTRI_USER_DRV ,
 E_GPIO_ATTRI_KERNEL_DRV ,
 E_GPIO_ATTRI_UNKNOWN
}GPIO_Attribute;
# 207 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
MS_BOOL MDrv_GPIO_SetIOMapBase(void);
# 216 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
GPIO_Result MDrv_GPIO_GetLibVer(const MSIF_Version **ppVersion);
# 225 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
GPIO_Result MDrv_GPIO_SetDbgLevel(GPIO_DbgLv eLevel);
# 234 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
const GPIO_Info* MDrv_GPIO_GetInfo(void);
# 243 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void MDrv_GPIO_GetStatus(GPIO_Status *pStatus);
# 253 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void mdrv_gpio_init(void);
# 262 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void mdrv_gpio_set_high(MS_GPIO_NUM gpio);
# 271 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void mdrv_gpio_set_low(MS_GPIO_NUM gpio);
# 280 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void mdrv_gpio_set_input(MS_GPIO_NUM gpio);
# 298 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
int mdrv_gpio_get_inout(MS_GPIO_NUM gpio);
# 307 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
int mdrv_gpio_get_level(MS_GPIO_NUM gpio);

typedef enum _GPIO_Edge
{
    E_GPIO_RISING_EDGE,
    E_GPIO_FALLING_EDGE
} GPIO_Edge;


typedef void ( *GPIO_Callback ) (void);
# 326 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
GPIO_Result mdrv_gpio_attach_interrupt(MS_GPIO_NUM gpio_num,GPIO_Edge gpio_edge_type,GPIO_Callback pCallback);
# 335 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
GPIO_Result mdrv_gpio_detach_interrupt(MS_GPIO_NUM gpio_num);
# 344 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void mdrv_gpio_interrupt_action(void);
# 353 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void mdrv_gpio_enable_interrupt_all(void);
# 362 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
void mdrv_gpio_disable_interrupt_all(void);
# 371 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
GPIO_Result mdrv_gpio_enable_interrupt(MS_GPIO_NUM gpio);
# 380 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
GPIO_Result mdrv_gpio_disable_interrupt(MS_GPIO_NUM gpio);
# 391 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvGPIO.h"
MS_U16 MDrv_GPIO_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvEMMFlt.h"
#ifndef _DRVEMMFLT_H_
#define _DRVEMMFLT_H_ 
# 106 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvEMMFlt.h"
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "UFO.h"




#define MSIF_EMMFLT_LIB_CODE {'E','M','M','F'}
#define MSIF_EMMFLT_LIBVER {'0','1'}
#define MSIF_EMMFLT_BUILDNUM {'0','1'}
#define MSIF_EMMFLT_CHANGELIST {'0','0','3','4','8','0','3','3'}

#define EMMRASP_SHAREINT 

#define EMMFLT_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_EMMFLT_LIB_CODE, \
    MSIF_EMMFLT_LIBVER, \
    MSIF_EMMFLT_BUILDNUM, \
    MSIF_EMMFLT_CHANGELIST, \
    MSIF_OS

typedef MS_U32 EMMFLT_RESULT;

typedef void (*EMMFLT_Notify)(MS_U32 conn, MS_U32 reason, void *pData);


#define DRV_EMMFLT_OK TRUE
#define DRV_EMMFLT_FAIL FALSE
#define DRV_EMMFLT_INVALID_REQUEST 3



#define EMM_SRC_FILEIN 0
#define EMM_SRC_LIVEIN 1

typedef enum
{
    EMM_ENGINE = 0,
    RASP_ENGINE,
    MAX_ENGINE,
}EMMRASP_e;

typedef enum _EMM_EVENT_
{
    EMM_EVENT_ARRIVE = 0,
    EMM_EVENT_OVERFLOW,
} EMM_EVENT_e;


#if defined(UFO_PUBLIC_HEADER_500_3)
typedef enum _EMM_SrcType_
{
    EMM_SRC_TS0 = 0,
    EMM_SRC_TS1,
    EMM_SRC_TS2,
    EMM_SRC_TS3,
    EMM_SRC_TS4,
    EMM_SRC_TS5,
    EMM_SRC_TS6,
    EMM_SRC_TSO,
    EMM_SRC_INTERDEMOD_0,
    EMM_SRC_INTERDEMOD_1,
    EMM_SRC_MEMORY,
}EMM_SRCTYPE_e;
#else
typedef enum _EMM_SrcType_
{
    EMM_SRC_TS0 = 0,
    EMM_SRC_TS1,
    EMM_SRC_TS2,
    EMM_SRC_TS3,
    EMM_SRC_INTERDEMOD_0,
    EMM_SRC_INTERDEMOD_1,
    EMM_SRC_MEMORY,
}EMM_SRCTYPE_e;
#endif

typedef enum
{
    EMM_TIDMODE_INGORE = 0x0,
    EMM_TIDMODE_ACCEPT_ALL,
    EMM_TIDMODE_ACCEPT_ADDRESS,
    EMM_TIDMODE_RESERVED,
} EMMDRV_TIDMODE_e;

typedef enum _EMM_OutType_
{
    EMM_OUT_NORMAL = 0,
    EMM_OUT_184BYTES,
    EMM_OUT_PACKETNUM,
}EMM_OUTTYPE_e;

typedef struct _EMMFLT_Require_
{
    MS_U32 u32DstBufSize;
    MS_U32 u32AlignBytes;
    MS_U8 u8EMMNumber;
} EMMFLT_Require_t;


typedef struct _EMM_FILTER_DEF
{
    MS_U8 filter_type;
    MS_U8 filter_address[4];
    MS_U8 filter_address_mask[4];

} EMM_FILTER_DEF_t;






EMMFLT_RESULT MDrv_EMMFLT_Init(EMMFLT_Require_t *pRequire);
EMMFLT_RESULT MDrv_EMMFLT_GetHwBufCnt(MS_U32 *pHwBufCnt);
EMMFLT_RESULT MDrv_EMMFLT_SetDbgLevel(MS_U32 u32Level);
EMMFLT_RESULT MDrv_EMMFLT_SetNotify(EMMFLT_Notify Notify);
EMMFLT_RESULT MDrv_EMMFLT_SetEmmPID(MS_U32 connection,MS_U16 u16EmmPID);
EMMFLT_RESULT MDrv_EMMFLT_SetTidMode(MS_U32 connection, MS_U8 u8TidValue, EMMDRV_TIDMODE_e eTIDMODE);
EMMFLT_RESULT MDrv_EMMFLT_EnableEmmTID(MS_U32 connection, MS_BOOL bEnable);
EMMFLT_RESULT MDrv_EMMFLT_SetFilterCfg(MS_U32 connection, MS_U8 FilerIndex, EMM_FILTER_DEF_t *pFilter);
EMMFLT_RESULT MDrv_EMMFLT_Fire(MS_U32 connection);

EMMFLT_RESULT MDrv_EMMFLT_SetDstBufInfo(MS_U32 x_connection, MS_U32 u32BufAddr, MS_U32 u32BufSize);
EMMFLT_RESULT MDrv_EMMFLT_EmmProcessingFinished(MS_U8 *emm_buf );
EMMFLT_RESULT MDrv_EMMFLT_Deinit(void);
EMMFLT_RESULT MDrv_EMMFLT_SrcSelect(MS_U32 x_connection, MS_U32 u32SrcFrom, EMM_SRCTYPE_e eSrcType);
EMMFLT_RESULT MDrv_EMMFLT_StopEmm(MS_U32 x_connection);
EMMFLT_RESULT MDrv_EMMFLT_EmmProcessingFinished(MS_U8 *emm_buf );
EMMFLT_RESULT MDrv_EMMFLT_SetOutputType(MS_U32 x_connection, EMM_OUTTYPE_e eOutType);
EMMFLT_RESULT MDrv_EMMFLT_ConnectCheck(MS_U32 connection);

EMMFLT_RESULT MDrv_EMMFLT_SetExtendConfig(MS_U32 x_connection, MS_U16 type, MS_U16 extendbytes, MS_U16 syncbyte);
EMMFLT_RESULT MDrv_EMMFLT_InputMode(MS_U32 x_connection, MS_BOOL bSerial);

void EMMRASP_IntAttach(EMMRASP_e eEng, MS_BOOL Enable);

#ifdef __cplusplus
}
#endif
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCPU_v2.h"
#ifndef _DRV_CPU_V2_H_
#define _DRV_CPU_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif






typedef enum {
    MDrv_CMD_CPU_InitFront,
    MDrv_CMD_CPU_InitEnd,
    MDrv_CMD_CPU_Disable,
    MDrv_CMD_CPU_Enable,
    MDrv_CMD_CPU_SetHost,
    MDrv_CMD_CPU_GetInfo,
    MDrv_CMD_CPU_GetLibVer,
    MDrv_CMD_CPU_GetStatus,
    MDrv_CMD_CPU_SetDbgLevel,
    MDrv_CMD_CPU_GetBase,
    MDrv_CMD_CPU_QueryClock,
} eCPUIoctlOpt;

typedef enum
{
 CPU_MODULE_V1,
 CPU_MODULE_V2,
} eCPUModuleVersion;
# 145 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCPU_v2.h"
typedef struct _CPU_API_V1
{
}CPU_API_V1;

typedef struct _CPU_API_V2
{
}CPU_API_V2;



typedef struct _CPU_INITEND_PARAM
{
    MS_U32 u32_ADR;
}CPU_INITEND_PARAM, *PCPU_INITEND_PARAM;


typedef struct _CPU_ENABLE_PARAM
{
    MS_U32 u32_ADR;
}CPU_ENABLE_PARAM, *PCPU_ENABLE_PARAM;


typedef struct _CPU_SETHOST_PARAM
{
    MS_BOOL bHost;
}CPU_SETHOST_PARAM, *PCPU_SETHOST_PARAM;


typedef struct _CPU_GETLIBVER_PARAM
{
    const MSIF_Version **ppVersion;
}CPU_GETLIBVER_PARAM, *PCPU_GETLIBVER_PARAM;


typedef struct _CPU_GETSTATUS_PARAM
{
    COPRO_DrvStatus *pStatus;
}CPU_GETSTATUS_PARAM, *PCPU_GETSTATUS_PARAM;


typedef struct _CPU_SETDBGLEVEL_PARAM
{
    MS_U8 u8Level;
}CPU_SETDBGLEVEL_PARAM, *PCPU_SETDBGLEVEL_PARAM;


typedef struct _CPU_GETINFO_PARAM
{
    MS_BOOL bInit;
    MS_U32 u32Addr;
}CPU_GETINFO_PARAM, *PCPU_GETINFO_PARAM;
# 207 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCPU_v2.h"
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiHDMITx_NDS.h"
#ifndef _API_HDMITX_NDS_H_
#define _API_HDMITX_NDS_H_ 

#include "hdmi.h"


#ifdef CUSTOMER_NDS

DLL_PUBLIC MS_BOOL MApi_HDMITx_Get_Events(MS_U32 *events, MS_BOOL bEraseEvent);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Get_Rx_CONNECTION_STATUS(HDMIConnectionStatus *status);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Get_EEDID_Block(HDMIGetEEDIDBlock *eedid);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Set_HDMI_Protocol(MS_U8 protocol);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Stop(void);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Set_Video_Code(MS_U8 *videoCode);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Set_Pixel_Format(MS_U8 *pixelFormat);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Set_Aspect_Ratio(HDMIAspectRatio *aspectRatio);

DLL_PUBLIC MS_BOOL MApi_HDMITx_Set_Colorimetry(HDMIColorimetry *colorimetryData);


DLL_PUBLIC MS_BOOL MApi_HDMITx_Set_AVMUTE(MS_BOOL bflag);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Start_Authentication(void);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Stop_Authentication(void);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Get_BCaps(HDMIHDCPBCaps *arg);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Get_BStatus(HDMIHDCPBStatus *arg);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Send_SRM(DigitalCPSrm *srm);
DLL_PUBLIC void MApi_HDMITx_HDCP_Reset_SRM(void);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Encryption_Enable(MS_U8 control);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Get_HDCP_Status(MS_U8 *status);

DLL_PUBLIC MS_BOOL MApi_HDMITx_HDCP_Configure(HDMIHDCPConfiguration *arg);

DLL_PUBLIC MS_BOOL MApi_HDMITx_CEC_Read(HDMICECRead *readMsgs);

DLL_PUBLIC MS_BOOL MApi_HDMITx_CEC_Write(HDMICECMessage *msg);

#endif


#if 0


#include "MsTypes.h"






#ifdef __cplusplus
extern "C"
{
#endif

#define CUSTOMER_NDS 

#ifdef CUSTOMER_NDS
#ifndef __HDMI_H__






#define HDMI_EVENT_HOTPLUGGED (0x00000001U)
#define HDMI_EVENT_HOTUNPLUG (0x00000002U)
#define HDMI_EVENT_CEC_RECEIVED (0x00000010U)
#define HDMI_EVENT_CP_AUTHENTICATED (0x00100000U)
#define HDMI_EVENT_CP_AUTHENTICATION_FAILED (0x00200000U)
#define HDMI_EVENT_CP_KSV_REVOKED (0x00400000U)
#define HDMI_EVENT_CP_KSV_INVALID (0x00800000U)
#define HDMI_EVENT_CP_LINK_INTEGRITY_FAILED (0x01000000U)
#define HDMI_EVENT_CP_LINK_INTEGRITY_NO_ACK (0x02000000U)


#define HDMI_STATUS_NOT_AUTHENTICATED (1)
#define HDMI_STATUS_AUTHENTICATED (2)
#define HDMI_STATUS_NOT_AUTHENTICATED_KSV_INVALID (3)
#define HDMI_STATUS_NOT_AUTHENTICATED_KSV_REVOKED (4)
#define HDMI_STATUS_NOT_AUTHENTICATED_LINK_INTEGRITY_FAILED (5)
#define HDMI_STATUS_NOT_AUTHENTICATED_LINK_INTEGRITY_NO_ACK (6)
#define HDMI_STATUS_AUTHENTICATION_DISABLED (7)


#define HDMI_CAP_V0 (0x00000001)


#define HDMI_SPEC_HDMI_1_0 (0x01)
#define HDMI_SPEC_HDMI_1_1 (0x02)
#define HDMI_SPEC_HDMI_1_2 (0x03)
#define HDMI_SPEC_HDMI_1_2a (0x04)
#define HDMI_SPEC_HDMI_1_3 (0x05)
#define HDMI_SPEC_HDMI_1_3a (0x06)



#define HDMI_SPEC_HDCP_1_0 (0x01)
#define HDMI_SPEC_HDCP_1_1 (0x02)
#define HDMI_SPEC_HDCP_1_2 (0x03)
#define HDMI_SPEC_HDCP_1_3 (0x04)


#define HDMI_FEATURE_CEC (0x00000001)
#define HDMI_FEATURE_EXTENDED_COLORIMETRY (0x00000002)
#define HDMI_FEATURE_PIXEL_FORMAT_RGB (0x00000010)
#define HDMI_FEATURE_PIXEL_FORMAT_YCbCr422 (0x00000020)
#define HDMI_FEATURE_PIXEL_FORMAT_YCbCr444 (0x00000040)

#define HDMI_EEDID_BLOCK_SIZE (128)


#define HDMI_PROTOCOL_DVI (1)
#define HDMI_PROTOCOL_HDMI (2)


#define HDMI_PIXEL_FORMAT_RGB (0x00)
#define HDMI_PIXEL_FORMAT_YCbCr422 (0x20)
#define HDMI_PIXEL_FORMAT_YCbCr444 (0x40)


#define HDMI_SOURCE_ASPECT_RATIO_NO_DATA (0x00)
#define HDMI_SOURCE_ASPECT_RATIO_4_3 (0x10)
#define HDMI_SOURCE_ASPECT_RATIO_16_9 (0x20)

#define HDMI_AFD_SAME_AS_PICTURE (0x08)
#define HDMI_AFD_4_3_CENTER (0x09)
#define HDMI_AFD_16_9_CENTER (0x0A)
#define HDMI_AFD_14_9_CENTER (0x0B)

#define HDMI_AFDINFO_INVALID (0x00)
#define HDMI_AFDINFO_VALID (0x10)

#define HDMI_BARINFO_INVALID (0x00)
#define HDMI_BARINFO_VERTICAL_VALID (0x04)
#define HDMI_BARINFO_HORIZONTAL_VALID (0x08)
#define HDMI_BARINFO_BOTH_VALID (0x0C)

#define HDMI_SCANINFO_NO_DATA (0x00)
#define HDMI_SCANINFO_OVERSCANNED (0x01)
#define HDMI_SCANINFO_UNDERSCANNED (0x02)

#define HDMI_SCALING_NO_SCALING (0x00)
#define HDMI_SCALING_HORIZONTAL (0x01)
#define HDMI_SCALING_VERTICAL (0x02)
#define HDMI_SCALING_HORIZONTAL_VERTICAL (0x03)


#define HDMI_COLORIMETRY_NONE (0x00)
#define HDMI_COLORIMETRY_SMPTE_170M (0x40)
#define HDMI_COLORIMETRY_ITU_709 (0x80)
#define HDMI_COLORIMETRY_EXTENDED (0xC0)

#define HDMI_EXTENDED_COLORIMETRY_XVCC601 (0x00)
#define HDMI_EXTENDED_COLORIMETRY_XVCC709 (0x10)







typedef struct
{
    MS_U32 version;
    void* capability;
    MS_U32 capabilitySize;
} HDMICapsEx;



typedef struct
{
    MS_U32 features;
    MS_U8 numBlenderConnections;
    MS_U8 numSPDIFConnections;
    MS_U8 hdmiVersion;
    MS_U8 hdcpVersion;
} HDMICapsV0;


typedef struct
{
    MS_U8 attached;
    MS_U8 powered;
} HDMIConnectionStatus;


typedef struct
{
    MS_U32 blockNumber;
    MS_U8 eedid[HDMI_EEDID_BLOCK_SIZE];
    MS_U32 timeOut;
} HDMIGetEEDIDBlock;


typedef struct
{
    MS_U8 pictureAspectRatio;
    MS_U8 activeFormatDescriptor;
    MS_U16 topBarEndsLine;
    MS_U16 bottomBarStartsLine;
    MS_U16 leftBarEndsPixel;
    MS_U16 rightBarStartsPixel;
    MS_U8 barinfoValidity;
    MS_U8 afdValidity;
    MS_U8 scanInfo;
    MS_U8 scalingInfo;
} HDMIAspectRatio;


typedef struct
{
    MS_U8 colorimetry;
    MS_U8 extendedColorimetry;
} HDMIColorimetry;


typedef struct
{
    MS_U8 bcaps;
    MS_U32 timeOut;
} HDMIHDCPBCaps;


typedef struct
{
    MS_U16 bstatus;
    MS_U32 timeOut;
} HDMIHDCPBStatus;

typedef struct
{
    MS_U32 length;
    MS_U8 *data;
} DigitalCPSrm;


typedef struct
{
    MS_U32 encryptionStartTime;
    MS_U8 checkPjIntegrity;
} HDMIHDCPConfiguration;



typedef struct
{
 MS_U8 header;
 MS_U8 messageLength ;
 MS_U8 message[16];
} HDMICECMessage;


typedef struct
{
 HDMICECMessage *messages ;
 MS_U8 numMessages;
 MS_U8 numMessagesReturned;
} HDMICECRead;

#endif





MS_S8 MApi_HDMITx_Get_Events(MS_U32 *events);

MS_S8 MApi_HDMITx_Get_Rx_CONNECTION_STATUS(HDMIConnectionStatus *status);

MS_S8 MApi_HDMITx_Get_EEDID_Block(HDMIGetEEDIDBlock *eedid);

MS_S8 MApi_HDMITx_Set_HDMI_Protocol(MS_U8 protocol);

MS_S8 MApi_HDMITx_Stop(void);

MS_S8 MApi_HDMITx_Set_Video_Code(MS_U8 *videoCode);

MS_S8 MApi_HDMITx_Set_Pixel_Format(MS_U8 *pixelFormat);

MS_S8 MApi_HDMITx_Set_Aspect_Ratio(HDMIAspectRatio *aspectRatio);

MS_S8 MApi_HDMITx_Set_Colorimetry(HDMIColorimetry *colorimetryData);


MS_S8 MApi_HDMITx_Set_AVMUTE(MS_BOOL bflag);

MS_S8 MApi_HDMITx_HDCP_Start_Authentication(void);

MS_S8 MApi_HDMITx_HDCP_Stop_Authentication(void);

MS_S8 MApi_HDMITx_HDCP_Get_BCaps(HDMIHDCPBCaps *arg);

MS_S8 MApi_HDMITx_HDCP_Get_BStatus(HDMIHDCPBStatus *arg);

MS_S8 MApi_HDMITx_HDCP_Send_SRM(DigitalCPSrm *srm);

MS_S8 MApi_HDMITx_HDCP_Encryption_Enable(MS_U8 control);

MS_S8 MApi_HDMITx_HDCP_Get_HDCP_Status(MS_U8 *status);

MS_S8 MApi_HDMITx_HDCP_Configure(HDMIHDCPConfiguration *arg);

MS_S8 MApi_HDMITx_CEC_Read(HDMICECRead *readMsgs);

MS_S8 MApi_HDMITx_CEC_Write(HDMICECMessage *msg);

#endif

#ifdef __cplusplus
}
#endif

#endif
#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C_v2.h"
#ifndef _DRV_HWI2C_V2_H_
#define _DRV_HWI2C_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif



#include "UFO.h"





typedef enum {
    MDrv_CMD_HWI2C_Init,
    MDrv_CMD_HWI2C_Start,
    MDrv_CMD_HWI2C_Stop,
    MDrv_CMD_HWI2C_GetPortIndex,
    MDrv_CMD_HWI2C_SelectPort,
    MDrv_CMD_HWI2C_SetClk,
    MDrv_CMD_HWI2C_SetReadMode,
    MDrv_CMD_HWI2C_WriteByte,
    MDrv_CMD_HWI2C_WriteBytes,
    MDrv_CMD_HWI2C_ReadByte,
    MDrv_CMD_HWI2C_ReadBytes,
    MDrv_CMD_HWI2C_SelectPort1,
 MDrv_CMD_HWI2C_SetClkP1,
 MDrv_CMD_HWI2C_SetReadModeP1,
 MDrv_CMD_HWI2C_WriteByteP1,
 MDrv_CMD_HWI2C_WriteBytesP1,
 MDrv_CMD_HWI2C_ReadByteP1,
 MDrv_CMD_HWI2C_ReadBytesP1,
 MDrv_CMD_HWI2C_SetDbgLevel,
 MDrv_CMD_HWI2C_GetLibVer,
 MDrv_CMD_HWI2C_GetStatus,
 MDrv_CMD_HWI2C_GetInfo,
 MDrv_CMD_HWI2C_ConfigDelay,
 MDrv_CMD_HWI2C_SetPowerState
} eHWI2CIoctlOpt;

#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_500_3)
typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_Init
{
   HWI2C_UnitCfg *psCfg;
} HWI2C_PRIVATE_PARAM_Init, *PHWI2C_PRIVATE_PARAM_Init;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_GetPortIndex
{
   HWI2C_PORT ePort;
   MS_U8* pu8Port;
} HWI2C_PRIVATE_PARAM_GetPortIndex, *PHWI2C_PRIVATE_PARAM_GetPortIndex;

typedef struct _HWI2C_PRIVATE_PARAM_SelectPort
{
   HWI2C_PORT ePort;
} HWI2C_PRIVATE_PARAM_SelectPort, *PHWI2C_PRIVATE_PARAM_SelectPort;

typedef struct _HWI2C_PRIVATE_PARAM_SetClk
{
   HWI2C_CLKSEL eClk;
} HWI2C_PRIVATE_PARAM_SetClk, *PHWI2C_PRIVATE_PARAM_SetClk;

typedef struct _HWI2C_PRIVATE_PARAM_SetReadMode
{
   HWI2C_ReadMode eReadMode;
} HWI2C_PRIVATE_PARAM_SetReadMode, *PHWI2C_PRIVATE_PARAM_SetReadMode;

typedef struct _HWI2C_PRIVATE_PARAM_WriteByte
{
   MS_U16 u16SlaveCfg;
   MS_U8 u8RegAddr;
   MS_U8 u8Data;
   MS_BOOL bReturn;
} HWI2C_PRIVATE_PARAM_WriteByte, *PHWI2C_PRIVATE_PARAM_WriteByte;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_WriteBytes
{
   MS_U16 u16SlaveCfg;
   MS_U32 uAddrCnt;
   MS_U8 *pRegAddr;
   MS_U32 uSize;
   MS_U8 *pData;
   MS_BOOL bReturn;
} HWI2C_PRIVATE_PARAM_WriteBytes, *PHWI2C_PRIVATE_PARAM_WriteBytes;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_ReadByte
{
   MS_U16 u16SlaveCfg;
   MS_U8 u8RegAddr;
   MS_U8 *pData;
   MS_BOOL bReturn;
} HWI2C_PRIVATE_PARAM_ReadByte, *PHWI2C_PRIVATE_PARAM_ReadByte;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_ReadBytes
{
   MS_U16 u16SlaveCfg;
   MS_U32 uAddrCnt;
   MS_U8 *pRegAddr;
   MS_U32 uSize;
   MS_U8 *pData;
   MS_BOOL bReturn;
} HWI2C_PRIVATE_PARAM_ReadBytes, *PHWI2C_PRIVATE_PARAM_ReadBytes;

typedef struct _HWI2C_PRIVATE_PARAM_SelectPort1
{
   HWI2C_PORT ePort;
} HWI2C_PRIVATE_PARAM_SelectPort1, *PHWI2C_PRIVATE_PARAM_SelectPort1;

typedef struct _HWI2C_PRIVATE_PARAM_SetClkP1
{
   HWI2C_CLKSEL eClk;
} HWI2C_PRIVATE_PARAM_SetClkP1, *PHWI2C_PRIVATE_PARAM_SetClkP1;

typedef struct _HWI2C_PRIVATE_PARAM_SetReadModeP1
{
   HWI2C_ReadMode eReadMode;
} HWI2C_PRIVATE_PARAM_SetReadModeP1, *PHWI2C_PRIVATE_PARAM_SetReadModeP1;

typedef struct _HWI2C_PRIVATE_PARAM_WriteByteP1
{
   MS_U16 u16SlaveCfg;
   MS_U8 u8RegAddr;
   MS_U8 u8Data;
} HWI2C_PRIVATE_PARAM_WriteByteP1, *PHWI2C_PRIVATE_PARAM_WriteByteP1;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_WriteBytesP1
{
   MS_U16 u16SlaveCfg;
   MS_U32 uAddrCnt;
   MS_U8 *pRegAddr;
   MS_U32 uSize;
   MS_U8 *pData;
} HWI2C_PRIVATE_PARAM_WriteBytesP1, *PHWI2C_PRIVATE_PARAM_WriteBytesP1;


typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_ReadByteP1
{
   MS_U16 u16SlaveCfg;
   MS_U8 u8RegAddr;
   MS_U8 *pData;
} HWI2C_PRIVATE_PARAM_ReadByteP1, *PHWI2C_PRIVATE_PARAM_ReadByteP1;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_ReadBytesP1
{
   MS_U16 u16SlaveCfg;
   MS_U32 uAddrCnt;
   MS_U8 *pRegAddr;
   MS_U32 uSize;
   MS_U8 *pData;
} HWI2C_PRIVATE_PARAM_ReadBytesP1, *PHWI2C_PRIVATE_PARAM_ReadBytesP1;

typedef struct _HWI2C_PRIVATE_PARAM_SetDbgLevel
{
   HWI2C_DbgLv eLevel;
} HWI2C_PRIVATE_PARAM_SetDbgLevel, *PHWI2C_PRIVATE_PARAM_SetDbgLevel;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_GetLibVer
{
   const MSIF_Version **ppVersion;
} HWI2C_PRIVATE_PARAM_GetLibVer, *PHWI2C_PRIVATE_PARAM_GetLibVer;

typedef struct DLL_PACKED _HWI2C_PRIVATE_PARAM_GetStatus
{
   HWI2C_Status *pStatus;
} HWI2C_PRIVATE_PARAM_GetStatus, *PHWI2C_PRIVATE_PARAM_GetStatus;

#if 0
typedef struct _HWI2C_PRIVATE_PARAM_SetPowerState
{
   EN_POWER_MODE u16PowerState;
} HWI2C_PRIVATE_PARAM_SetPowerState;
#endif
#if 1
typedef union _HWI2C_PRIVATE_PARAM
{
 HWI2C_PRIVATE_PARAM_Init privateInit;
 HWI2C_PRIVATE_PARAM_GetPortIndex privateGetPortIndex;
 HWI2C_PRIVATE_PARAM_SelectPort privateSelectPort;
 HWI2C_PRIVATE_PARAM_SetClk privateSetClk;
 HWI2C_PRIVATE_PARAM_SetReadMode privateSetReadMode;
 HWI2C_PRIVATE_PARAM_WriteByte privateWriteByte;
 HWI2C_PRIVATE_PARAM_WriteBytes privateWriteBytes;
 HWI2C_PRIVATE_PARAM_ReadByte privateReadByte;
 HWI2C_PRIVATE_PARAM_ReadBytes privateReadBytes;
 HWI2C_PRIVATE_PARAM_SetReadModeP1 privateSetReadModeP1;
 HWI2C_PRIVATE_PARAM_WriteByteP1 privateWriteByteP1;
 HWI2C_PRIVATE_PARAM_WriteBytesP1 privateWriteBytesP1;
 HWI2C_PRIVATE_PARAM_ReadByteP1 privateReadByteP1;
 HWI2C_PRIVATE_PARAM_ReadBytesP1 privateReadBytesP1;
 HWI2C_PRIVATE_PARAM_SetDbgLevel privateSetDbgLevel;
 HWI2C_PRIVATE_PARAM_GetStatus privateGetStatus;

} HWI2C_PRIVATE_PARAM;
#endif

#endif







#ifdef __cplusplus
}
#endif

#endif
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
#ifndef _DRV_MBX_H
#define _DRV_MBX_H 

#ifdef _DRV_MBX_C
#define INTERFACE 
#else
#define INTERFACE extern
#endif



#ifdef __cplusplus
extern "C"
{
#endif




#include "MsTypes.h"
#include "MsDevice.h"






#define MBX_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'M','B','X','_'}, \
    {'0','2'}, \
    {'0','4'}, \
    {'0','0','5','4','6','1','0','2'}, \
    MSIF_OS


#define MAX_MBX_QUEUE_SIZE 256

#define MAX_MBX_PARAM_SIZE 10

#define MAX_MBX_INFORMATION_SIZE 8



#define MBX_STATUS_QUEUE_OVER_FLOW 0x00000001

#define MBX_STATUS_QUEUE_HAS_INSTANT_MSG 0x00000002

#define MBX_STATUS_QUEUE_HAS_NORMAL_MSG 0x00000004





#define MBX_CHECK_INSTANT_MSG 0x00000002

#define MBX_CHECK_NORMAL_MSG 0x00000004

#define MBX_CHECK_ALL_MSG_CLASS (MBX_CHECK_INSTANT_MSG|MBX_CHECK_NORMAL_MSG)

#define MBX_CHECK_BLOCK_RECV 0x80000000



#define MBX_DBG_LEVEL_NONE 0x00

#define MBX_DBG_LEVEL_MBXHAL 0x01

#define MBX_DBG_LEVEL_MSGQ 0x02

#define MBX_DBG_LEVEL_MBXINT 0x04

#define MBX_DBG_LEVEL_CRITICAL 0x08

#define MBX_DBG_LEVEL_ALL 0x0F
# 224 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
typedef enum
{

    E_MBX_CLASS_SYSTEM = 0,

    E_MBX_CLASS_INPUT = 1,

    E_MBX_CLASS_TSP = 2,

    E_MBX_CLASS_CHANNEL = 3,

    E_MBX_CLASS_MEMORY = 4,

    E_MBX_CLASS_MPEG = 5,

    E_MBX_CLASS_VIDEO = 6,

    E_MBX_CLASS_AUDIO = 7,

    E_MBX_CLASS_MHEG5_STATE = 8,

    E_MBX_CLASS_MVF = 9,

    E_MBX_CLASS_GE = 10,

    E_MBX_CLASS_CI = 11,

    E_MBX_CLASS_TEST = 12,

    E_MBX_CLASS_MAD = 13,


    E_MBX_CLASS_MPEG2_FS = 14,

    E_MBX_CLASS_MPEG2 = 15,

    E_MBX_CLASS_BMP = 16,

    E_MBX_CLASS_PNG = 17,

    E_MBX_CLASS_JPEG = 18,

    E_MBX_CLASS_MJPEG = 19,

    E_MBX_CLASS_JPEG_ENCODER = 20,

    E_MBX_CLASS_VDPLAYER_FS = 21,

    E_MBX_CLASS_VDPLAYER = 22,

    E_MBX_CLASS_RMPLAYER_FS = 23,

    E_MBX_CLASS_RMPLAYER = 24,

    E_MBX_CLASS_TSPLAYER_FS = 25,

    E_MBX_CLASS_TSPLAYER = 26,

    E_MBX_CLASS_LZSS = 27,

    E_MBX_CLASS_CAPE = 28,

    E_MBX_CLASS_CC = 29,

    E_MBX_CLASS_DLNA = 30,

    E_MBX_CLASS_DUMMY_LOOP = 31,

    E_MBX_CLASS_CHAKRA_SUBSYS = 32,

    E_MBX_CLASS_FCNTL = 33,

    E_MBX_CLASS_IRKEY = 34,

    E_MBX_CLASS_BTPD = 35,

    E_MBX_CLASS_OBAMA_CMD = 36,

    E_MBX_CLASS_OBAMA_APP = 37,

    E_MBX_CLASS_KTV = 38,

    E_MBX_CLASS_CIPLUS = 39,

    E_MBX_CLASS_PRINT_MESSAGE = 40,

    E_MBX_CLASS_SHWFS = 41,

    E_MBX_CLASS_AUTO_TEST = 42,

    E_MBX_CLASS_STILLIMAGE_CMD_IO = 43,

    E_MBX_CLASS_STILLIMAGE_DATA_IO_FAST = 44,

    E_MBX_CLASS_STILLIMAGE_DATA_IO = 45,

    E_MBX_CLASS_NET_DEBUG = 46,

    E_MBX_CLASS_PM_WAIT = 47,

    E_MBX_CLASS_PM_NOWAIT = 48,

    E_MBX_CLASS_IRKEY_NOWAIT = 49,

    E_MBX_CLASS_SAR = 50,

    E_MBX_CLASS_SAR_NOWAIT = 51,

    E_MBX_CLASS_SECURE_WAIT = 52,

    E_MBX_CLASS_SECURE_NOWAIT = 53,

    E_MBX_CLASS_FRC = 54,

    E_MBX_CLASS_PM_PWM_WAIT= 55,

    E_MBX_CLASS_PM_PWM_NOWAIT= 56,

 E_MBX_CLASS_DYNAMIC_ID = 57,

 E_MBX_CLASS_QUERY_CLASS = 58,
     E_MBX_CLASS_CB_SECURE_WAIT =59,
    E_MBX_CLASS_CB_SECURE_NOWAIT = 60,

    E_MBX_CLASS_CB_PNL_WAIT= 61,

    E_MBX_CLASS_CB_PNL_NOWAIT= 62,
    E_MBX_CLASS_CB_LOGO_NOWAIT= 63,
    E_MBX_CLASS_CB_MUSIC_NOWAIT= 64,
    E_MBX_CLASS_CB_OSD_NOWAIT= 65,
    E_MBX_CLASS_CB_HEARTBEAT_NOWAIT= 66,
    E_MBX_CLASS_CB_CHECK_NOWAIT= 67,


    E_MBX_CLASS_NUM,

    E_MBX_CLASS_MAX = 0xFF
}MBX_Class;


typedef enum
{

   E_MBX_CPU_PM = 0,

   E_MBX_CPU_AEON = 1,

   E_MBX_CPU_MIPS = 2,

   E_MBX_CPU_R2M = 2,

   E_MBX_CPU_MIPS_VPE0 = 2,

   E_MBX_CPU_MIPS_VPE1 = 3,
   #if 1

   E_MBX_CPU_R2FRC = 4,
   #endif
   E_MBX_CPU_MAX,
}MBX_CPU_ID;


typedef enum
{

    E_MBX_ROLE_HK = 0,

    E_MBX_ROLE_CP = 1,

    E_MBX_ROLE_PM = 2,
    E_MBX_ROLE_AEON = 3,
     #if 1

    E_MBX_ROLE_FRC = 4,
    #endif
    E_MBX_ROLE_MAX
}MBX_ROLE_ID;


typedef enum
{

    E_MBX_MSG_TYPE_NORMAL = 0,

    E_MBX_MSG_TYPE_INSTANT = 1
}MBX_MSG_Type;


typedef enum
{

    E_MBX_SUCCESS = 0,

    E_MBX_ERR_NOT_INITIALIZED = 1,

    E_MBX_ERR_NO_MORE_MEMORY = 2,

    E_MBX_ERR_SLOT_BUSY = 3,

    E_MBX_ERR_SLOT_AREADY_OPENNED = 4,

    E_MBX_ERR_SLOT_NOT_OPENNED = 5,

    E_MBX_ERR_INVALID_CPU_ID = 6,

    E_MBX_ERR_INVALID_PARAM = 7,

    E_MBX_ERR_PEER_CPU_BUSY = 8,

    E_MBX_ERR_PEER_CPU_NOT_ALIVE = 9,

    E_MBX_ERR_PEER_CPU_NOTREADY = 10,

    E_MBX_ERR_PEER_CPU_OVERFLOW = 11,

    E_MBX_ERR_MSG_ALREADY_FETCHED = 12,

    E_MBX_ERR_TIME_OUT = 13,

    E_MBX_ERR_NO_MORE_MSG = 14,

    E_MBX_ERR_HAS_MSG_PENDING = 15,

    E_MBX_ERR_NOT_IMPLEMENTED = 16,

    E_MBX_UNKNOW_ERROR = 0xFFFF
} MBX_Result;





typedef struct __attribute__((packed))
{

    MBX_ROLE_ID eRoleID;

    MBX_MSG_Type eMsgType;


    MS_U8 u8Ctrl;

    MS_U8 u8MsgClass;

    MS_U8 u8Index;

    MS_U8 u8ParameterCount;

    MS_U8 u8Parameters[MAX_MBX_PARAM_SIZE];

    MS_U8 u8S0;

    MS_U8 u8S1;
}MBX_Msg;


typedef struct __attribute__((packed))
{




    MS_U32 status;

    MS_U32 u32NormalMsgCount;

    MS_U32 u32InstantMsgCount;
}MBX_MSGQ_Status;


typedef struct __attribute__((packed))
{

    MS_U8 u8HWMBXGroupNum;
}MBX_DrvInfo;


typedef struct __attribute__((packed))
{

    MS_BOOL bEnabled;

    MS_S32 s32RefCnt;
}MBX_DrvStatus;



typedef void (*MBX_MAIL_ARRIVE_NOTIFY_FUNC)( MBX_Msg *pMsg, MS_BOOL *pbAddToQueue);
# 521 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_Init(MBX_CPU_ID eHKCPU, MBX_ROLE_ID eHostRole, MS_U32 u32TimeoutMillSecs);
# 530 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_DeInit(MS_BOOL bForceDiscardPendingMsg);
# 539 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_RegisterMSG(MBX_Class eMsgClass, MS_U16 u16MsgQueueSize);
# 549 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_RegisterMSGWithCallBack(MBX_Class eMsgClass, MS_U16 u16MsgQueueSize, MBX_MAIL_ARRIVE_NOTIFY_FUNC notifier);
# 558 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_UnRegisterMSG(MBX_Class eMsgClass, MS_BOOL bForceDiscardMsgQueue);
# 567 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_ClearMSG(MBX_Class eMsgClass);
# 576 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_SendMsg(MBX_Msg *pMsg);
# 585 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_GetMsgQueueStatus(MBX_Class eTargetClass, MBX_MSGQ_Status *pMsgQueueStatus);
# 594 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_RecvMsg(MBX_Class eTargetClass, MBX_Msg *pMsg, MS_U32 u32WaitMillSecs, MS_U32 u32Flag);
# 603 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_CheckMsg(MBX_Class eTargetClass, MBX_Msg *pMsg, MS_U32 u32WaitMillSecs, MS_U32 u32Flag);
# 612 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_SendMsgLoopback(MBX_Msg *pMsg, MBX_ROLE_ID eSrcRoleId);
# 621 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_Enable(MS_BOOL bEnable);
# 630 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_RemoveLatestMsg(void);
# 640 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MS_U16 MDrv_MBX_SetPowerState(EN_POWER_MODE u16PowerState);
# 651 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_SetInformation(MBX_ROLE_ID eTargetRole, MS_U8 *pU8Info, MS_U8 u8Size);
# 660 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MBX_Result MDrv_MBX_GetInformation(MBX_ROLE_ID eTargetRole, MS_U8 *pU8Info, MS_U8 u8Size);
# 671 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE void MDrv_MBX_SetDbgLevel(MS_U8 u8DbgLevel);
# 680 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MS_BOOL MDrv_MBX_GetLibVer(const MSIF_Version **ppVersion);
# 689 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MS_BOOL MDrv_MBX_GetInfo(MBX_DrvInfo *pMbxDrvInfo);
# 698 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MS_BOOL MDrv_MBX_GetStatus(MBX_DrvStatus *pMbxDrvStatus);
# 707 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE void MDrv_MBX_SetCallDrvFlag(MS_BOOL bEnable);
# 716 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMBX.h"
INTERFACE MS_BOOL MDrv_MBX_GetCallDrvFlag(void);

#undef INTERFACE


#ifdef __cplusplus
}
#endif

#endif
# 98 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Cus.h"
#ifndef _API_XC_CUS_H_
#define _API_XC_CUS_H_ 

#include "apiXC.h"
#include "apiXC_DWIN.h"
#include "apiXC_Adc.h"
#include "apiXC_Auto.h"
#include "apiXC_PCMonitor.h"
#include "apiXC_ModeParse.h"
#include "drvXC_HDMI_if.h"


#ifdef __cplusplus
extern "C"
{
#endif

#ifdef STELLAR

#define MAX_CUS_PQ_PARA_ELEMENT 4

typedef enum
{
    E_XC_S_DISPLAY_INITMISC_A_NULL = 0x0000,
    E_XC_S_DISPLAY_INITMISC_A_FIRE_DISABLE_ML = 0x0001,
    E_XC_S_DISPLAY_INITMISC_A_NO_DELAY_ML = 0x0002,
    E_XC_S_DISPLAY_INITMISC_A_ADC_HW_AUTOGAIN = 0x0004,
    E_XC_S_DISPLAY_INITMISC_A_3D_ML = 0x0008,
    E_XC_S_DISPLAY_INITMISC_A_SKIP_ML_HTT_VTT = 0x0010,
    E_XC_S_DISPLAY_INITMISC_A_PC_MONITOR_MUTE = 0x0020,
    E_XC_S_DISPLAY_INITMISC_A_NO_DELAY_GET_VTT = 0x0040,
    E_XC_S_DISPLAY_INITMISC_A_ENABLE_CVBSOX_ADCX = 0x0080,
} E_XC_S_DISPLAY_INIT_MISC_A;

typedef enum
{
    E_XC_S_DISPLAY_TESTPATTERN_IPMUX,
    E_XC_S_DISPLAY_TESTPATTERN_IP1,
    E_XC_S_DISPLAY_TESTPATTERN_VOP,
    E_XC_S_DISPLAY_TESTPATTERN_VOP2,
    E_XC_S_DISPLAY_TESTPATTERN_OP1,
    E_XC_S_DISPLAY_TESTPATTERN_OP2,
    E_XC_S_DISPLAY_TESTPATTERN_MOD,
}E_XC_S_DISPLAY_TESTPATTERN;

typedef enum
{






    E_XC_S_DISPLAY_ADCGainOffset_GET,
    E_XC_S_DISPLAY_DEWin_SET,
    E_XC_S_DISPLAY_ADCRBSwap_SET,
    E_XC_S_DISPLAY_LRBlackBar_SET,
    E_XC_S_DISPLAY_ScartOverlay_SET,
    E_XC_S_DISPLAY_Resolution_GET,
    E_XC_S_DISPLAY_TESTPATTERN_SET,
    E_XC_S_DISPLAY_INITMISC_SET,
    E_XC_S_DISPLAY_INITMISC_GET,
    E_XC_S_DISPLAY_STATUS_GET,


    E_XC_S_PQ_SetICCYModelEnable = 0x100,
    E_XC_S_PQ_SetIHCYModelEnable,
    E_XC_S_PQ_SetIHCHueEnable,
    E_XC_S_PQ_SetICCSaturationEnable,
    E_XC_S_PQ_SetBlueStretchEnable,
    E_XC_S_PQ_SetICCSaturationAdj,
    E_XC_S_PQ_SetIHCHueAdj,
    E_XC_S_PQ_SetIBCYAdj,
    E_XC_S_PQ_SetIHCSkinHueAdj,
    E_XC_S_PQ_SetICCDecreaseGainAdj,
    E_XC_S_PQ_SetMotionCountThreshold,
    E_XC_S_PQ_SetScaleFilter,
    E_XC_S_PQ_DLCInit,
    E_XC_S_PQ_SetPieceWiseEnable,
    E_XC_S_PQ_SetColorAdaptiveRange,
    E_XC_S_PQ_SetHistogramReqEnable,
    E_XC_S_PQ_SetIBCYEnable,
    E_XC_S_PQ_SetAdaptiveCGainEnable,
    E_XC_S_PQ_SetCDNRIndex,
    E_XC_S_PQ_SetCDNRGain,
    E_XC_S_PQ_SetCDNREnable,
    E_XC_S_PQ_SetAdaptiveCGain,
    E_XC_S_PQ_OPC_GetAverage,
    E_XC_S_PQ_PQ_OPC_GetMAXValue,
    E_XC_S_PQ_PQ_OPC_GetLDData,
    E_XC_S_PQ_PQ_OPC_GetMotionData,
    E_XC_S_PQ_PQ_OPC_SetBLData,
    E_XC_S_PQ_PQ_OPC_Enable,
    E_XC_S_PQ_PQ_MACE_SetBlueStretchData,
    E_XC_S_PQ_PQ_GetBlueStretchInfo,
    E_XC_S_PQ_PQ_SET_THXMode,
    E_XC_S_PQ_PQ_SetFilmMode_CUS,
}E_XC_S_DISPLAY_CTRL_ID;

typedef struct
{
    MS_U16 u16HStart;
    MS_U16 u16HEnd;
    MS_U16 u16VStart;
    MS_U16 u16VEnd;
}XC_S_DISPLAY_DEWin_SET;
typedef struct
{
    MS_BOOL bEnable;
    MS_U32 u32Width;
}XC_S_DISPLAY_LRBlackBar_SET;
typedef struct
{
    MS_BOOL bOverlay;
}XC_S_DISPLAY_ScartOverlay_SET;
typedef struct
{
    MS_BOOL bEnable;
    INPUT_SOURCE_TYPE_t enInputPortType;
}XC_S_DISPLAY_ADCRBSwap_SET;

typedef enum
{
    ADC_COLOR_RED = 0,
    ADC_COLOR_GREEN = 1,
    ADC_COLOR_BLUE = 2,
    ADC_COLOR_Y = 3,
} HAL_ADC_COLOR_t;
typedef struct
{
    EN_RESOLUTION_TYPE enReolution;
    MS_MODE_RESOLUTION resl;
}XC_S_DISPLAY_Resolution_GET;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U16 u16Pattern_type;
    MS_U16 u16Enable;
    MS_U16 u16Pattern[4];
}XC_S_DISPLAY_TESTPATTERN_SET;

typedef struct
{
    MS_U32 u32CusMISC_A;
    MS_U32 u32CusMISC_B;
} XC_S_DISPLAY_INITMISC;

typedef struct
{
    SCALER_WIN eWindow;
    MS_U16 u16OutputVFreqAfterFRC;
    MS_U8 u8SyncStatus;
    MS_U16 u16InputHperiod;
    MS_U16 u16InputVTotal;
    MS_U16 u16InputHFreq;
    MS_U16 u16InputVFreq;
    MS_U32 u32InputAccurateVFreq;
} XC_S_DISPLAY_STATUS_GET;

typedef struct
{
    MS_U8 u8WinIdx;
    MS_BOOL bPara[MAX_CUS_PQ_PARA_ELEMENT];
    MS_U8 u8Para[MAX_CUS_PQ_PARA_ELEMENT];
    MS_S8 s8Para[MAX_CUS_PQ_PARA_ELEMENT];
    MS_U16 u16Para[MAX_CUS_PQ_PARA_ELEMENT];
    void* pPara[MAX_CUS_PQ_PARA_ELEMENT];
    void* pReturn;
}XC_S_CUS_PQ_SETTINGS;

#endif

#ifdef __cplusplus
}
#endif

#endif
# 96 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsDevice.h"
#ifndef __PRANA_DEVICE_H__
#define __PRANA_DEVICE_H__ 

#include "MsTypes.h"

#define DEVICE_NULL ((device_t)0)

typedef unsigned long device_t;




typedef enum
{
    E_EVT_SUSPEND = 1,
    E_EVT_SHUTDOWN = 2,
} eDEVEVT;

typedef enum
{
    E_POWER_SUSPEND = 1,
    E_POWER_RESUME = 2,
    E_POWER_MECHANICAL = 3,
    E_POWER_SOFT_OFF = 4,
} EN_POWER_MODE;





#ifndef POLLIN
#define POLLIN 0x01
#endif

#ifndef POLLOUT
#define POLLOUT 0x02
#endif

#ifndef POLLHUP
#define POLLHUP 0x04
#endif




struct devio
{
    int (*open) (device_t dev, int mode);
    int (*close)(device_t dev);

    int (*read) (device_t dev, char *buf, MS_U32 len, int off);

    int (*write)(device_t dev, const char *buf, MS_U32 len, int off);
    int (*poll) (device_t dev, int types);
    int (*ioctl)(device_t dev, int request, unsigned long arg);
    int (*event)(eDEVEVT evt);
};


#define DEVICE_MAGIC (('D' << 24) | ('E' << 16) | ('V' << 8) | 'I')




#ifndef MSOS_TYPE_LINUX_KERNEL
struct device
{
    int magic;
    int refcnt;
    int flags;
    struct devio *devio;
};
#endif
#define device_valid(dev) ((dev)->magic == DEVICE_MAGIC)
#endif






#define MS_MODULE_HW 0x0000

#define MS_MODULE_CHIPTOP 0x0011
#define MS_MODULE_MIU 0x0012
#define MS_MODULE_WDT 0x003C
#define MS_MODULE_CFG 0x00F0
#define MS_MODULE_OTP 0x00F4
#define MS_MODULE_SPRAM 0x00F5
#define MS_MODULE_OTP2 0x00F6

#define MS_MODULE_ACE 0x0101
#define MS_MODULE_AUDIO 0x0102
#define MS_MODULE_AVD 0x0103
#define MS_MODULE_BDMA 0x0104
#define MS_MODULE_DLC 0x0105
#define MS_MODULE_FLASH 0x0106
#define MS_MODULE_GE 0x0107
#define MS_MODULE_GOP 0x0108
#define MS_MODULE_HVD 0x0109
#define MS_MODULE_HWI2C 0x010a
#define MS_MODULE_IR 0x010b
#define MS_MODULE_IRQ 0x010c
#define MS_MODULE_JPD 0x010d
#define MS_MODULE_MBX 0x010e
#define MS_MODULE_MVD 0x010f
#define MS_MODULE_MVOP 0x0120
#define MS_MODULE_RVD 0x0122
#define MS_MODULE_SC 0x0123
#define MS_MODULE_TSP 0x0124
#define MS_MODULE_UART 0x0125
#define MS_MODULE_VPU 0x0126
#define MS_MODULE_XC 0x0127
#define MS_MODULE_PNL 0x0128
#define MS_MODULE_ISP 0x0129
#define MS_MODULE_PFSH 0x012a
#define MS_MODULE_GPIO 0x012b
#define MS_MODULE_PM 0x012c
#define MS_MODULE_VBI 0x012d
#define MS_MODULE_PCMCIA 0x012e
#define MS_MODULE_PIU 0x012f
#define MS_MODULE_MHEG5 0x0130
#define MS_MODULE_RTC_0 0x0131
#define MS_MODULE_RTC_2 0x0132
#define MS_MODULE_VIF 0x0133
#define MS_MODULE_MFE 0x0134
#define MS_MODULE_DIP 0x0135
#define MS_MODULE_RASP 0x0136
#define MS_MODULE_MMFILEIN 0x0137
#define MS_MODULE_MPIF 0x0138
#define MS_MODULE_GPD 0x0139
#define MS_MODULE_TSO 0x013a
#define MS_MODULE_CMDQ 0x013b
#define MS_MODULE_MSPI 0x013c
#define MS_MODULE_SC1 0x013d
#define MS_MODULE_IR_TX 0x013e
#define MS_MODULE_XC_EXT 0x013f
#define MS_MODULE_SEM 0x02f0

#define MS_MODULE_CA 0x0300
#define MS_MODULE_NDS 0x0310
#define MS_MODULE_NSK 0x0311
#define MS_MODULE_CAM 0x0312
#define MS_MODULE_NGA 0x0313

#define MS_MODULE_PWM 0x1032
#define MS_MODULE_DMD 0x1033
#define MS_MODULE_PWS 0x1034
#define MS_MODULE_EFUSE 0x1035

#define MS_MODULE_FRC 0x2000
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPVR_IframeLUT_v2.h"
#ifndef _DRV_PVR_IFRAMELUT_V2_H_
#define _DRV_PVR_IFRAMELUT_V2_H_ 

#include "drvPVR_IframeLUT.h"

#ifdef __cplusplus
extern "C"
{
#endif






typedef enum
{
    E_MDrv_CMD_PVR_IframeLUT_Init,
    E_MDrv_CMD_PVR_IframeLUT_Open,
    E_MDrv_CMD_PVR_IframeLUT_SetVdecType,
    E_MDrv_CMD_PVR_IframeLUT_GetWritePtr,
    E_MDrv_CMD_PVR_IframeLUT_Close,
    E_MDrv_CMD_PVR_IframeLUT_Exit,
} ePVRIframeLUTIoctlOpt;
# 134 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPVR_IframeLUT_v2.h"
typedef PVR_IFRAMELUT_Cfg PVR_IFRAMELUT_OPEN_PARAM;


typedef struct DLL_PACKED
{
    MS_U32 u32PvrEng;
    EN_PVR_IFRAMELUT_VDEC_TYPE eVdecType;
} PVR_IFRAMELUT_SETVDECTYPE_PARAM;


typedef struct DLL_PACKED
{
    MS_U32 u32PvrEng;
    MS_U32 *pu32WritePtr;
} PVR_IFRAMELUT_GETWRITEPTR_PARAM;


typedef MS_U32 PVR_IFRAMELUT_CLOSE_PARAM;



#ifdef __cplusplus
}
#endif

#endif
# 141 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
#ifndef _DRVAESDMA_H_
#define _DRVAESDMA_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"
#include "MsCommon.h"
#include "UFO.h"

#define AESDMA_UTOPIA20 (1)



#define AES_ENABLE 0x01
#define TDES_ENABLE 0x10
#define WORD_MASK 0x0000000F
#define RSA_INPUT_SIZE 256
#define RSA_UNIT_SIZE 4
#define SHA_WAIT 1
#if (SHA_WAIT==1)
#if defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_500_3)
#define SHA_TIMEOUT_VALUE 500000
#elif defined(UFO_PUBLIC_HEADER_300)
#define SHA_TIMEOUT_VALUE 0x500000
#else
#define SHA_TIMEOUT_VALUE 1200000
#endif
#endif
#define AES_MAX_TIMEOUT_VALUE 0x500000
#define RSA_MAX_TIMEOUT_VALUE 0x500000
#define RSA_DEFAULT_TIMEOUT_VALUE 0x180000

#define MSIF_AESDMA_LIB_CODE {'D','M','A','_'}
#define MSIF_AESDMA_LIBVER {'0','3'}
#define MSIF_AESDMA_BUILDNUM {'0','3'}
#define MSIF_AESDMA_CHANGELIST {'0','0','3','3','1','6','3','7'}

#define AESDMA_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_AESDMA_LIB_CODE, \
    MSIF_AESDMA_LIBVER, \
    MSIF_AESDMA_BUILDNUM, \
    MSIF_AESDMA_CHANGELIST, \
    MSIF_OS


typedef enum
{
    E_DRVAESDMA_CIPHER_ECB = 0,
    E_DRVAESDMA_CIPHER_CTR,
    E_DRVAESDMA_CIPHER_CBC,
    E_DRVAESDMA_CIPHER_DES_ECB,
    E_DRVAESDMA_CIPHER_DES_CTR,
    E_DRVAESDMA_CIPHER_DES_CBC,
    E_DRVAESDMA_CIPHER_TDES_ECB,
    E_DRVAESDMA_CIPHER_TDES_CTR,
    E_DRVAESDMA_CIPHER_TDES_CBC,
    E_DRVAESDMA_CIPHER_CTS_CBC,
    E_DRVAESDMA_CIPHER_CTS_ECB,
    E_DRVAESDMA_CIPHER_DES_CTS_CBC,
    E_DRVAESDMA_CIPHER_DES_CTS_ECB,
    E_DRVAESDMA_CIPHER_TDES_CTS_CBC,
    E_DRVAESDMA_CIPHER_TDES_CTS_ECB,
} DrvAESDMA_CipherMode;


typedef enum
{
    E_DRVAESDMA_PARSER_TS_PKT192 = 0,
    E_DRVAESDMA_PARSER_TS_PKT192_CLEAR,
    E_DRVAESDMA_PARSER_TS_PKT188,
    E_DRVAESDMA_PARSER_TS_PKT188_CLEAR,
    E_DRVAESDMA_PARSER_HDCP20_PKT192,
    E_DRVAESDMA_PARSER_HDCP20_PKT192_CLEAR,
    E_DRVAESDMA_PARSER_HDCP20_PKT188,
    E_DRVAESDMA_PARSER_HDCP20_PKT188_CLEAR,
} DrvAESDMA_ParserMode;

typedef enum
{
    E_DRVAESDMA_PARSER_SCRMB_10 = 0,
    E_DRVAESDMA_PARSER_SCRMB_11,
    E_DRVAESDMA_PARSER_SCRMB_CLEAR,
} DrvAESDMA_ScrmbPattern;


typedef enum
{
    E_DRVAESDMA_SHA1 = 0,
    E_DRVAESDMA_SHA256,
} DrvAESDMA_SHAMode;


typedef enum
{
    E_DRVAESDMA_RSA1024_PUBLIC = 0,
    E_DRVAESDMA_RSA1024_PRIVATE,
    E_DRVAESDMA_RSA2048_PUBLIC,
    E_DRVAESDMA_RSA2048_PRIVATE,
    E_DRVAESDMA_RSA256_PUBLIC,
    E_DRVAESDMA_RSA256_PRIVATE,
} DrvAESDMA_RSAMode;


typedef enum
{
    E_DRVAESDMA_RSA_HWKEY_PRIVATE = 0,
    E_DRVAESDMA_RSA_HWKEY_PUBLIC1,
    E_DRVAESDMA_RSA_HWKEY_PUBLIC2,
    E_DRVAESDMA_RSA_HWKEY_ROM_PRIVATE,
    E_DRVAESDMA_RSA_HWKEY_ROM_PUBLIC,
} DrvAESDMA_RSAHwKeyMode;


typedef enum
{
    E_DRVAESDMA_EVENT_DATA_INIT = 0x00000000,

    E_DRVAESDMA_EVENT_DMA_DONE = 0x00010000,

    E_DRVAESDMA_EVENT_DMA_PAUSE = 0x00020000,

} DrvAESDMA_Event;

typedef enum
{
    E_DRVAESDMA_DBG_Release = 0,
    E_DRVAESDMA_DBG_L1,
    E_DRVAESDMA_DBG_L2,
} DrvAESDMA_DbgLevel;

typedef enum
{
    E_DRVAESDMA_ODD_KEY = 0,
    E_DRVAESDMA_EVEN_KEY,
} DrvAESDMA_KEY_TYPE;

typedef enum
{
    E_DRVAESDMA_SECRETKEY_1 = 1,
    E_DRVAESDMA_SECRETKEY_2 = 2,
    E_DRVAESDMA_SECRETKEY_EAEK,
} DrvAESDMA_SecretKeyType;
# 306 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
typedef MS_U32 DRVAESDMA_RESULT;

typedef struct DLL_PACKED
{
    MS_U32 u32KeyN[64];
    MS_U32 u32KeyE[64];

}DrvAESDMA_RSAKey;

typedef struct DLL_PACKED
{
    MS_U32 u32Sig[64];

}DrvAESDMA_RSASig;

typedef struct DLL_PACKED
{
    MS_U32 u32RSAOut[64];

}DrvAESDMA_RSAOut;


typedef struct DLL_PACKED
{
    MS_U32 u32SHMPhyAddr;
    MS_BOOL bSecureModeEnable;
    MS_U32 u32SHMSize;
    MS_U8 u8SHMMiuSel;

}DrvAESDMA_SecureInfo;

typedef struct DLL_PACKED
{
#if defined(UFO_PUBLIC_HEADER_500_3)||defined(UFO_PUBLIC_HEADER_700)
    MS_VIRT u32Addr;
    MS_U32 u32Size;
#else
    MS_U32 u32Addr;
    MS_U32 u32Size;
#endif
}DrvAESDMA_SHADataInfo;

typedef enum
{
    E_DRVAESDMA_HASH_STAGE_FIRST ,
    E_DRVAESDMA_HASH_STAGE_UPDATE ,
    E_DRVAESDMA_HASH_STAGE_LAST ,
    E_DRVAESDMA_HASH_STAGE_ONCE ,
}DrvAESDMA_HASH_STAGE;

typedef struct DLL_PACKED
{
    DrvAESDMA_SHAMode eMode;
    DrvAESDMA_SHADataInfo stInput;
    DrvAESDMA_SHADataInfo stOutput;
}DrvAESDMA_HASHCFG;





#define DRVAESDMA_OK 0x00000000
#define DRVAESDMA_FAIL 0x00000001
#define DRVAESDMA_INVALID_PARAM 0x00000002
#define DRVAESDMA_FUNC_ERROR 0x00000003
#define DRVAESDMA_MIU_ADDR_ERROR 0x00000004



#define AESDMA_DMA_DONE 0x00010000
#define AESDMA_DMA_PAUSE 0x00020000
#define AESDMA_STATES_GROUP (AESDMA_DMA_DONE | \
                                             AESDMA_DMA_PAUSE )

#define AESDMA_PARSER_PID_MAX 0x00001FFF

typedef void (*P_DrvAESDMA_EvtCallback)(DrvAESDMA_Event eEvent);




#include "drvAESDMA_v2.h"




#ifndef MSOS_TYPE_NUTTX







DRVAESDMA_RESULT MDrv_AESDMA_SetSecurityInfo(DrvAESDMA_SecureInfo *pSecureInfo);
#endif
# 412 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_Init(MS_PHY u32miu0addr , MS_PHY u32miu1addr , MS_U32 u32miunum);
# 421 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_QueryCipherMode(DrvAESDMA_CipherMode eMode);
# 431 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SelEng(DrvAESDMA_CipherMode eMode, MS_BOOL bDescrypt);
# 442 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SetKey_Ex(const MS_U8 *pu8Key, MS_U32 u32Len);
# 452 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SetIV_Ex(const MS_U8 *pu8IV, MS_U32 u32Len);
# 462 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SetKey(MS_U32 *pCipherKey);
# 472 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SetKeySel(MS_U32 *pCipherKey, DrvAESDMA_KEY_TYPE stKeyType);







DRVAESDMA_RESULT MDrv_AESDMA_SetOddIV(MS_U32 *pInitVector);






DRVAESDMA_RESULT MDrv_AESDMA_SetSecureKey(void);







DRVAESDMA_RESULT MDrv_AESDMA_SetIV(MS_U32 *pInitVector);
# 506 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SetPS(MS_U32 u32PTN, MS_U32 u32Mask, MS_BOOL bPSin_Enable, MS_BOOL bPSout_Enable);






DRVAESDMA_RESULT MDrv_AESDMA_PSRelease(void);
# 524 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SetFileInOut(MS_PHY phyFileinAddr, MS_U32 u32FileInNum, MS_PHY phyFileOutSAddr, MS_PHY phyFileOutEAddr);







DRVAESDMA_RESULT MDrv_AESDMA_Start(MS_BOOL bStart);







DRVAESDMA_RESULT MDrv_AESDMA_Reset(void);







DRVAESDMA_RESULT MDrv_AESDMA_GetStatus(void);







DRVAESDMA_RESULT MDrv_AESDMA_IsFinished(void);






MS_U32 MDrv_AESDMA_GetPSMatchedByteCNT(void);






MS_U32 MDrv_AESDMA_GetPSMatchedPTN(void);
# 580 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_Notify(DrvAESDMA_Event eEvents, P_DrvAESDMA_EvtCallback pfCallback);
# 589 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_SetDbgLevel(DrvAESDMA_DbgLevel DbgLevel);
# 598 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_GetLibVer(const MSIF_Version **ppVersion);
# 608 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_Rand(MS_U32 *u32PABuf, MS_U32 u32Size);
# 617 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_AESDMA_Set_Clk(MS_BOOL benable);
# 628 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_SHA_Calculate(DrvAESDMA_SHAMode eMode, MS_PHY phyPAInBuf, MS_U32 u32Size, MS_PHY phyPAOutBuf);
# 640 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_SHA_CalculateManual(DrvAESDMA_HASHCFG stCfg, DrvAESDMA_HASH_STAGE eStage, MS_U32 u32DoneBytes, MS_U8 *pu8SetIV);

DRVAESDMA_RESULT SYMBOL_WEAK MDrv_SHA_Accumulation(DrvAESDMA_HASH_STAGE eMode, DrvAESDMA_SHAMode eStage, MS_U32 u32SrcBufAddr, MS_U32 u32SrcSize, MS_U32 u32WorkingBufAddr, MS_U32 u32WorkingSize, MS_U16* pu16ShaVal );






DRVAESDMA_RESULT MDrv_MOBF_DmaOnly(void);
# 659 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_MOBF_Encrypt(MS_U32 u32Key, MS_BOOL bEnable);
# 669 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT MDrv_MOBF_Decrypt(MS_U32 u32Key, MS_BOOL bEnable);







DRVAESDMA_RESULT MDrv_MOBF_OneWay(void);







DRVAESDMA_RESULT MDrv_AESDMA_Parser_MaskScrmb(MS_BOOL bEnable);







DRVAESDMA_RESULT MDrv_AESDMA_Parser_SetScrmbPattern(DrvAESDMA_ScrmbPattern ePattern);







DRVAESDMA_RESULT MDrv_AESDMA_Parser_SetAddedScrmbPattern(DrvAESDMA_ScrmbPattern ePattern);







MS_U8 MDrv_AESDMA_Parser_QueryPidCount(void);







DRVAESDMA_RESULT MDrv_AESDMA_Parser_SetPid(MS_U8 u8Index, MS_U16 u16Pid);







DRVAESDMA_RESULT MDrv_AESDMA_Parser_BypassPid(MS_BOOL bEnable);







DRVAESDMA_RESULT MDrv_AESDMA_Parser_Encrypt(DrvAESDMA_ParserMode eMode);







DRVAESDMA_RESULT MDrv_AESDMA_Parser_Decrypt(DrvAESDMA_ParserMode eMode);







MS_BOOL MDrv_AESDMA_Lock(void);







MS_BOOL MDrv_AESDMA_Unlock(void);







DRVAESDMA_RESULT MDrv_RSA_Calculate(DrvAESDMA_RSASig *pstSign, DrvAESDMA_RSAKey *pstKey, DrvAESDMA_RSAMode eMode);






DRVAESDMA_RESULT MDrv_RSA_Calculate_Hw_Key(DrvAESDMA_RSASig *pstSign, DrvAESDMA_RSAHwKeyMode eMode);
DRVAESDMA_RESULT MDrv_RSA_IsFinished(void);







DRVAESDMA_RESULT MDrv_RSA_Output(DrvAESDMA_RSAMode eMode, DrvAESDMA_RSAOut *pstRSAOut);







MS_U32 MDrv_AESDMA_SetPowerState(EN_POWER_MODE u16PowerState);







DRVAESDMA_RESULT MDrv_AESDMA_Exit(void);







DRVAESDMA_RESULT MDrv_AESDMA_IsSecretKeyInNormalBank(void);

DRVAESDMA_RESULT MDrv_AESDMA_EnableTwoKeys(MS_BOOL bEnable);
DRVAESDMA_RESULT MDrv_AESDMA_SetOddKey(MS_U32 *pInitVector);
DRVAESDMA_RESULT MDrv_AESDMA_ParserStart(MS_BOOL bStart);
DRVAESDMA_RESULT _MDrv_AESDMA_NormalReset(void);







DRVAESDMA_RESULT MDrv_AESDMA_NormalReset(void);

DRVAESDMA_RESULT _MDrv_AESDMA_SelEng(DrvAESDMA_CipherMode eMode, MS_BOOL bDescrypt);
DRVAESDMA_RESULT _MDrv_AESDMA_SetKey(MS_U32 *pCipherKey);
DRVAESDMA_RESULT _MDrv_AESDMA_SetIV(MS_U32 *pInitVector);
DRVAESDMA_RESULT _MDrv_AESDMA_SetFileInOut(MS_PHY phy64FileinAddr, MS_U32 u32FileInNum, MS_PHY phy64FileOutSAddr, MS_PHY phy64FileOutEAddr);
DRVAESDMA_RESULT _MDrv_AESDMA_Start(MS_BOOL bStart);
DRVAESDMA_RESULT _MDrv_RSA_Calculate(DrvAESDMA_RSASig *pstSign, DrvAESDMA_RSAKey *pstKey, DrvAESDMA_RSAMode eMode);
DRVAESDMA_RESULT _MDrv_SHA_Calculate(DrvAESDMA_SHAMode eMode, MS_PHY phy64PAInBuf, MS_U32 u32Size, MS_PHY phy64PAOutBuf);
DRVAESDMA_RESULT _MDrv_RSA_IsFinished(void);
DRVAESDMA_RESULT _MDrv_RSA_Output(DrvAESDMA_RSAMode eMode, DrvAESDMA_RSAOut *pstRSAOut);
DRVAESDMA_RESULT _MDrv_AESDMA_Init(MS_PHY phy64miu0addr , MS_PHY phy64miu1addr , MS_U32 u32miunum);
DRVAESDMA_RESULT _MDrv_AESDMA_Reset(void);
DRVAESDMA_RESULT _MDrv_AESDMA_Set_Clk(MS_BOOL benable);
DRVAESDMA_RESULT _MDrv_AESDMA_SetPS(MS_U32 u32PTN, MS_U32 u32Mask, MS_BOOL bPSin_Enable, MS_BOOL bPSout_Enable);
DRVAESDMA_RESULT _MDrv_AESDMA_PSRelease(void);
#if defined(UFO_PUBLIC_HEADER_700)
DRVAESDMA_RESULT _MDrv_AESDMA_IsFinished(MS_U32 *u32RetVal);
DRVAESDMA_RESULT _MDrv_AESDMA_GetStatus(MS_U32 *u32RetVal);
MS_U32 _MDrv_AESDMA_GetPSMatchedByteCNT(MS_U32 *u32RetVal);
#endif


MS_U32 _MDrv_AESDMA_GetPSMatchedPTN(void);
DRVAESDMA_RESULT _MDrv_AESDMA_Notify(DrvAESDMA_Event eEvents, P_DrvAESDMA_EvtCallback pfCallback);
DRVAESDMA_RESULT _MDrv_AESDMA_Get_Rand_Num(MS_U8 *pu8Num);
DRVAESDMA_RESULT _MDrv_AESDMA_Parser_MaskScrmb(MS_BOOL bEnable);
DRVAESDMA_RESULT _MDrv_AESDMA_Parser_SetScrmbPattern(DrvAESDMA_ScrmbPattern ePattern);
DRVAESDMA_RESULT _MDrv_AESDMA_Parser_BypassPid(MS_BOOL bEnable);
DRVAESDMA_RESULT _MDrv_AESDMA_Parser_SetPid(MS_U8 u8Index, MS_U16 u16Pid);
DRVAESDMA_RESULT _MDrv_AESDMA_Rand(MS_U32 *u32PABuf, MS_U32 u32Size);







DRVAESDMA_RESULT MDrv_HDCP_ProcessCipher(MS_U8 u8Idx, MS_U8* pu8Riv, MS_U8 *pu8ContentKey);

DRVAESDMA_RESULT MDrv_AESDMA_SetDefaultCAVid(MS_U32 u32CAVid);







DRVAESDMA_RESULT SYMBOL_WEAK MDrv_AESDMA_SetSecuredKeyIndex (MS_U8 u8KeyIdx);

DRVAESDMA_RESULT _MDrv_AESDMA_Parser_Encrypt(DrvAESDMA_ParserMode eMode);
#if defined(UFO_PUBLIC_HEADER_700)||defined(UFO_PUBLIC_HEADER_500)
MS_U8 _MDrv_AESDMA_Parser_QueryPidCount(MS_U8* retCount);
#endif
DRVAESDMA_RESULT _MDrv_AESDMA_Parser_Decrypt(DrvAESDMA_ParserMode eMode);
DRVAESDMA_RESULT _MDrv_AESDMA_Parser_SetAddedScrmbPattern(DrvAESDMA_ScrmbPattern ePattern);
DRVAESDMA_RESULT _MDrv_AESDMA_SetKeySel(MS_U32 *pCipherKey, DrvAESDMA_KEY_TYPE stKeyType);
DRVAESDMA_RESULT _MDrv_AESDMA_SetOddIV(MS_U32 *pInitVector);
DRVAESDMA_RESULT _MDrv_AESDMA_IsSecretKeyInNormalBank(MS_U8 *retVal);
DRVAESDMA_RESULT _MDrv_AESDMA_EnableTwoKeys(MS_BOOL bEnable);
DRVAESDMA_RESULT _MDrv_AESDMA_SetSecureKey(void);







DRVAESDMA_RESULT MDrv_HDCP_GetHdcpCipherState(MS_U8 u8Idx, MS_U8 *pu8State);

DRVAESDMA_RESULT MDrv_HDMI_GetM0(MS_U32 u32InputPortType, MS_U8 *pu8Data);
# 897 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT SYMBOL_WEAK MDrv_AESDMA_SetKeyIndex (MS_U32 u32Index, MS_BOOL bIsOddKey);
# 906 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT SYMBOL_WEAK MDrv_AESDMA_SetAesCtr64 (MS_BOOL bCtr64En);
# 915 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT SYMBOL_WEAK MDrv_AESDMA_AllocKeySlot (MS_U32 *pu32Index);
# 924 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
DRVAESDMA_RESULT SYMBOL_WEAK MDrv_AESDMA_FreeKeySlot (MS_U32 u32Index);

MS_BOOL MDrv_AESDMA_GetConfig(PAESDMA_INIT sAesdmaInit);
# 937 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA.h"
#ifdef __cplusplus
}
#endif


#endif
# 139 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
#ifndef _API_SWI2C_H_
#define _API_SWI2C_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 158 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
#define MSIF_SWI2C_LIB_CODE {'S','I','2','C'}
#define MSIF_SWI2C_LIBVER {'0','5'}
#define MSIF_SWI2C_BUILDNUM {'0','5' }
#define MSIF_SWI2C_CHANGELIST {'0','0','4','9','7','5','7','8'}

#define SWI2C_API_VERSION \
      MSIF_TAG, \
      MSIF_CLASS, \
      MSIF_CUS, \
      MSIF_MOD, \
      MSIF_CHIP, \
      MSIF_CPU, \
      MSIF_SWI2C_LIB_CODE, \
      MSIF_SWI2C_LIBVER, \
      MSIF_SWI2C_BUILDNUM, \
      MSIF_SWI2C_CHANGELIST, \
      MSIF_OS



#define SWI2C_SPEED_MAPPING_400K 400
#define SWI2C_SPEED_MAPPING_350K 350
#define SWI2C_SPEED_MAPPING_300K 300
#define SWI2C_SPEED_MAPPING_250K 250
#define SWI2C_SPEED_MAPPING_200K 200
#define SWI2C_SPEED_MAPPING_150K 150
#define SWI2C_SPEED_MAPPING_100K 100
#define SWI2C_SPEED_MAPPING_50K 50


typedef enum
{

    E_SWI2C_FAIL =0,

    E_SWI2C_OK = 1,

} SWI2C_Result;


typedef struct
{
    MS_U16 padSCL;
    MS_U16 padSDA;
    MS_U16 defDelay;
} SWI2C_BusCfg;


typedef enum {
    E_SWI2C_READ_MODE_DIRECT,
    E_SWI2C_READ_MODE_DIRECTION_CHANGE,
    E_SWI2C_READ_MODE_DIRECTION_CHANGE_STOP_START,
    E_SWI2C_READ_MODE_MAX
} SWI2C_ReadMode;


typedef enum _SWI2C_DbgLvl
{
    E_SWI2C_DBGLVL_NONE = 0,
    E_SWI2C_DBGLVL_WARNING,
    E_SWI2C_DBGLVL_ERROR,
    E_SWI2C_DBGLVL_INFO,
    E_SWI2C_DBGLVL_ALL,
}SWI2C_DbgLvl;

typedef enum _SWI2C_CfgCmd
{
    E_SWI2C_CFGCMD_TRANSRTY=0,
    E_SWI2C_CFGCMD_SNDBYRTY,
    E_SWI2C_CFGCMD_NONE,
}SWI2C_CfgCmd;


typedef struct
{
    MS_U32 u32CfgParam[8] ;
    SWI2C_CfgCmd cfgCmd;
    MS_U8 u8BusNum;
    MS_BOOL bByBus;
    MS_BOOL bRecoveried;
} SWI2C_Config;
# 247 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
void MApi_SWI2C_Init(SWI2C_BusCfg SWI2CBusCfg[],MS_U8 u8CfgBusNum);
# 256 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_WriteBytes(MS_U16 u16BusNumSlaveID, MS_U8 u8addrcount, MS_U8* pu8addr, MS_U16 u16size, MS_U8* pu8data);
# 265 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_WriteBytesStop(MS_U16 u16BusNumSlaveID, MS_U8 AddrCnt, MS_U8* pu8addr, MS_U16 u16size, MS_U8* pBuf,MS_BOOL bGenStop);
# 274 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_ReadBytes(MS_U16 u16BusNumSlaveID, MS_U8 u8AddrNum, MS_U8* paddr, MS_U16 u16size, MS_U8* pu8data);
# 283 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_ReadBytes_ThruMode(MS_U16 u16BusNumSlaveID, MS_U8 ucSubAdr, MS_U8* paddr, MS_U16 ucBufLen, MS_U8* pBuf);
# 292 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_ReadByte(MS_U16 u16BusNumSlaveID, MS_U8 u8RegAddr, MS_U8 *pu8Data);
# 301 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_WriteByte(MS_U16 u16BusNumSlaveID, MS_U8 u8RegAddr, MS_U8 u8Data);
# 310 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_Write2Bytes(MS_U16 u16BusNumSlaveID, MS_U8 u8addr, MS_U16 u16data);
# 319 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_U16 MApi_SWI2C_Read2Bytes(MS_U16 u16BusNumSlaveID, MS_U8 u8addr);
# 328 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_Write4Bytes(MS_U16 u16BusNumSlaveID, MS_U32 u32Data, MS_U8 u8EndData);
# 337 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_ReadByteDirectly(MS_U16 u16BusNumSlaveID, MS_U8 * pu8Data);
# 346 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_WriteGroupBytes(MS_U16 u16BusNumSlaveID, MS_U8 u8SubGroup, MS_U16 u16Addr, MS_U16 u16Data);
# 355 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_U16 MApi_SWI2C_ReadGroupBytes(MS_U16 u16BusNumSlaveID, MS_U8 u8SubGroup, MS_U16 u16Addr);
# 364 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_U8 MApi_SWI2C_GetMaxBuses(void);
# 373 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_U32 MApi_SWI2C_Speed_Setting(MS_U8 u8BusNum, MS_U32 u32Speed_K);
# 382 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_SetReadMode(SWI2C_ReadMode eReadMode);
# 391 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_SetBusReadMode(MS_U8 u8BusNum, SWI2C_ReadMode eReadMode);
# 400 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_GetLibVer(const MSIF_Version **ppVersion);
# 409 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
SWI2C_Result MApi_SWI2C_SetDbgLevel(SWI2C_DbgLvl eLevel);
# 418 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_U16 MApi_SWI2C_SetPowerState(EN_POWER_MODE u16PowerState);
# 433 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
void MApi_SWI2C_MutexLock(void);
# 442 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
void MApi_SWI2C_MutexUnlock(void);
# 451 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
void MApi_SWI2C_UseBus( MS_U8 u8BusChn );
# 460 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
void MApi_SWI2C_UnuseBus(void);
# 469 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_AccessStart(MS_U8 u8SlaveID, MS_U8 trans_t);
# 478 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
void MApi_SWI2C_Stop(void);
# 487 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_Start(void);
# 496 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_BOOL MApi_SWI2C_SendByte(MS_U8 u8date);
# 505 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiSWI2C.h"
MS_U8 MApi_SWI2C_GetByte(MS_U16 u16Ack);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc_EX.h"
#ifndef _API_XC_ADC_EX_H_
#define _API_XC_ADC_EX_H_ 


#include "MsCommon.h"


#include "apiXC_EX.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 125 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc_EX.h"
typedef struct
{
    MS_U16 u16RedGain;
    MS_U16 u16GreenGain;
    MS_U16 u16BlueGain;
    MS_U16 u16RedOffset;
    MS_U16 u16GreenOffset;
    MS_U16 u16BlueOffset;
} XC_ADC_EX_AdcGainOffsetSetting;


typedef enum
{
    E_XC_ADC_EX_Internal_0V,
    E_XC_ADC_EX_Internal_0_1V,
    E_XC_ADC_EX_Internal_0_6V,
    E_XC_ADC_EX_Internal_None,
} XC_ADC_EX_Internal_Voltage;


typedef enum
{
    E_XC_ADC_EX_Gen_480P_Clk,
    E_XC_ADC_EX_Gen_720P_Clk,
    E_XC_ADC_EX_Gen_1080P_Clk,
} XC_ADC_EX_Gen_Clock_Type;


typedef enum
{
    E_XC_ADC_EX_VClamp_0_85V,
    E_XC_ADC_EX_VClamp_0_9V,
    E_XC_ADC_EX_VClamp_0_95V,
    E_XC_ADC_EX_VClamp_1_0V,
    E_XC_ADC_EX_VClamp_1_05V,
    E_XC_ADC_EX_VClamp_1_2V,
    E_XC_ADC_EX_VClamp_1_5V,
} XC_ADC_EX_VClamp_Level_Type;


typedef enum
{
    E_XC_ADC_EX_CHR = 0,
    E_XC_ADC_EX_CHG,
    E_XC_ADC_EX_CHB,
    E_XC_ADC_EX_ALL,
} XC_ADC_EX_CHANNEL_t;


typedef enum
{
    E_XC_ADC_EX_REST_ATOP = _XC_EX_BIT(7),
    E_XC_ADC_EX_REST_HDMI = _XC_EX_BIT(6),
    E_XC_ADC_EX_REST_HDCP = _XC_EX_BIT(5),
    E_XC_ADC_EX_REST_DVI = _XC_EX_BIT(4),
    E_XC_ADC_EX_REST_PLL_DIG_B = _XC_EX_BIT(3),
    E_XC_ADC_EX_REST_ADC_DIG_B = _XC_EX_BIT(2),
    E_XC_ADC_EX_REST_PLL_DIG_A = _XC_EX_BIT(1),
    E_XC_ADC_EX_REST_ADC_DIG_A = _XC_EX_BIT(0),
    E_XC_ADC_EX_REST_PLL = ( E_XC_ADC_EX_REST_PLL_DIG_B | E_XC_ADC_EX_REST_PLL_DIG_A ),
    E_XC_ADC_EX_REST_ADC = ( E_XC_ADC_EX_REST_ADC_DIG_B | E_XC_ADC_EX_REST_ADC_DIG_A ),
} XC_ADC_EX_RESET;
# 198 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc_EX.h"
DLL_PUBLIC void MApi_XC_ADC_EX_SetCVBSOut(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, XC_EX_DEST_TYPE enOutputType , XC_EX_INPUT_SOURCE_TYPE enInputPortType, MS_BOOL isDigitalSource);
DLL_PUBLIC MS_BOOL MApi_XC_ADC_EX_IsCVBSOutEnabled(XC_DEVICE_ID *pDeviceId, XC_EX_DEST_TYPE enOutputType);





DLL_PUBLIC void MApi_XC_ADC_EX_SetPcClock(XC_DEVICE_ID *pDeviceId, MS_U16 u16Clock);





DLL_PUBLIC void MApi_XC_ADC_EX_SetPhase(XC_DEVICE_ID *pDeviceId, MS_U8 u8Value);





DLL_PUBLIC void MApi_XC_ADC_EX_SetPhaseEx(XC_DEVICE_ID *pDeviceId, MS_U16 u16Value);





DLL_PUBLIC MS_U16 MApi_XC_ADC_EX_GetPhaseRange( XC_DEVICE_ID *pDeviceId );





DLL_PUBLIC MS_U8 MApi_XC_ADC_EX_GetPhase( XC_DEVICE_ID *pDeviceId );
DLL_PUBLIC MS_U16 MApi_XC_ADC_EX_GetPhaseEx( XC_DEVICE_ID *pDeviceId );

DLL_PUBLIC MS_BOOL MApi_XC_ADC_EX_IsScartRGB(XC_DEVICE_ID *pDeviceId);
DLL_PUBLIC MS_U16 MApi_XC_ADC_EX_GetPcClock(XC_DEVICE_ID *pDeviceId );







DLL_PUBLIC void MApi_XC_ADC_EX_GetSoGLevelRange(XC_DEVICE_ID *pDeviceId, MS_U32 *u32min, MS_U32 *u32max, MS_U32 *u32Recommend_value);





DLL_PUBLIC void MApi_XC_ADC_EX_SetSoGLevel(XC_DEVICE_ID *pDeviceId, MS_U32 u32Value);





DLL_PUBLIC void MApi_XC_ADC_EX_PowerOff(XC_DEVICE_ID *pDeviceId);







DLL_PUBLIC void MApi_XC_ADC_EX_GetDefaultGainOffset(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE eSource , XC_ADC_EX_AdcGainOffsetSetting* pstADCSetting);






DLL_PUBLIC MS_U16 MApi_XC_ADC_EX_GetMaximalOffsetValue(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC MS_U16 MApi_XC_ADC_EX_GetMaximalGainValue(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC MS_U16 MApi_XC_ADC_EX_GetCenterGain(XC_DEVICE_ID *pDeviceId);






DLL_PUBLIC MS_U16 MApi_XC_ADC_EX_GetCenterOffset(XC_DEVICE_ID *pDeviceId);
# 298 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc_EX.h"
DLL_PUBLIC void MApi_XC_ADC_EX_SetGain(XC_DEVICE_ID *pDeviceId, MS_U8 u8color, MS_U16 u16value);






DLL_PUBLIC void MApi_XC_ADC_EX_SetOffset(XC_DEVICE_ID *pDeviceId, MS_U8 u8color, MS_U16 u16value);





DLL_PUBLIC void MApi_XC_ADC_EX_AdjustGainOffset(XC_DEVICE_ID *pDeviceId, XC_ADC_EX_AdcGainOffsetSetting* pstADCSetting);





DLL_PUBLIC void MApi_XC_ADC_EX_Source_Calibrate(XC_DEVICE_ID *pDeviceId, XC_EX_INPUT_SOURCE_TYPE enInputSourceType);





DLL_PUBLIC void MApi_XC_ADC_EX_SetSoGCal(XC_DEVICE_ID *pDeviceId);


DLL_PUBLIC void MApi_XC_ADC_EX_SetRGB_PIPE_Delay(XC_DEVICE_ID *pDeviceId, MS_U8 u8Value);


DLL_PUBLIC void MApi_XC_ADC_EX_ScartRGB_SOG_ClampDelay(XC_DEVICE_ID *pDeviceId, MS_U16 u16Clpdly, MS_U16 u16Caldur);

DLL_PUBLIC void MApi_XC_ADC_EX_Set_YPbPrLooseLPF(XC_DEVICE_ID *pDeviceId, MS_BOOL benable);





DLL_PUBLIC void MApi_XC_ADC_EX_Set_SOGBW(XC_DEVICE_ID *pDeviceId, MS_U16 u16value);


DLL_PUBLIC void MApi_XC_ADC_EX_SetClampDuration(XC_DEVICE_ID *pDeviceId, MS_U16 u16Value);





DLL_PUBLIC MS_BOOL MApi_XC_ADC_EX_EnableHWCalibration(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable);

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MLog.h"
#ifndef __MLOG_H__
#define __MLOG_H__ 

#ifdef __cplusplus
extern "C" {
#endif
typedef enum
{
    EN_LOG_PRIORITY_UNKNOWN = 0,
    EN_LOG_PRIORITY_DEFAULT,
    EN_LOG_PRIORITY_VERBOSE,
    EN_LOG_PRIORITY_INFO,
    EN_LOG_PRIORITY_WARN,
    EN_LOG_PRIORITY_DEBUG,
    EN_LOG_PRIORITY_ERROR,
    EN_LOG_PRIORITY_FATAL,
    EN_LOG_PRIORITY_SILENT,
} EN_LOG_PRIORITY;

void filter_log(EN_LOG_PRIORITY pri,const char* TAG,const char* format, ...);

#define MLOGV(tag,fmt,...) filter_log(EN_LOG_PRIORITY_VERBOSE, tag, fmt, ##__VA_ARGS__)
#define MLOGI(tag,fmt,...) filter_log(EN_LOG_PRIORITY_INFO, tag, fmt, ##__VA_ARGS__)
#define MLOGW(tag,fmt,...) filter_log(EN_LOG_PRIORITY_WARN, tag, fmt, ##__VA_ARGS__)
#define MLOGD(tag,fmt,...) filter_log(EN_LOG_PRIORITY_DEBUG, tag, fmt, ##__VA_ARGS__)
#define MLOGE(tag,fmt,...) filter_log(EN_LOG_PRIORITY_ERROR, tag, fmt, ##__VA_ARGS__)
#define MLOGF(tag,fmt,...) filter_log(EN_LOG_PRIORITY_FATAL, tag, fmt, ##__VA_ARGS__)
#define TARGET_USES_LOGD 1





void mlog_showTags(void);





void mlog_addTAG(char* TAG);





void mlog_removeTAG(char* TAG);





EN_LOG_PRIORITY mlog_getPriority(void);





void mlog_setPriority(EN_LOG_PRIORITY pri);


#ifdef __cplusplus
}
#endif

#endif
# 137 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DBC.h"
#ifndef _API_XC_DBC_H_
#define _API_XC_DBC_H_ 

#ifdef __cplusplus
extern "C"
{
#endif






void MApi_XC_DLC_DBC_Init(XC_DLC_DBC_MFinit DLC_DBC_MFinit);





void MApi_XC_DBC_Init(void);






void MApi_XC_DLC_DBC_Setstatus(MS_BOOL bDBCEnable);






MS_BOOL MApi_XC_DLC_DBC_Getstatus(void);






void MApi_XC_DLC_DBC_SetReady(MS_BOOL bDBCReady);






void MApi_XC_DLC_DBC_SetDebugMode(MS_U8 ucDBC_DebugMode);






MS_U8 MApi_XC_DLC_DBC_GetDebugMode(void);






void MApi_XC_DLC_DBC_UpdatePWM(MS_U8 u8PWMvalue);






MS_U16 MApi_XC_DLC_DBC_Handler(void);





void MApi_XC_DLC_DBC_AdjustYCGain(void);
# 221 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DBC.h"
void MApi_XC_DLC_DBC_YCGainInit(MS_U8 u8YGain_M, MS_U8 u8YGain_L, MS_U8 u8CGain_M, MS_U8 u8CGain_L);





void MApi_XC_DLC_DBC_Reset(void);




typedef void (*MApi_XC_DBC_OnOff_Callback)(MS_BOOL );




typedef void (*MApi_XC_DBC_AdjustBackLight_Callback)(MS_U32 );




typedef struct DLL_PACKED {
    MS_U8 *pCmdBuff;
    MApi_XC_DBC_OnOff_Callback fnDBC_AP_OnOff;
    MApi_XC_DBC_AdjustBackLight_Callback fnDBC_AdjustBacklight;
    MApi_XC_DLC_Print_Callback fnDBC_Putchar;
}tDBC_CONTROL_PARAMS;






void MApi_XC_DBC_DecodeExtCmd(tDBC_CONTROL_PARAMS *params );

#ifdef __cplusplus
}
#endif

#endif
# 61 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
#ifndef _DRV_MSPI_H_
#define _DRV_MSPI_H_ 
#include "MsCommon.h"


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"







#define MSPI_UTOPIA20 (0)
#define MSPI_READ_OPERATION 0
#define MSPI_WRITE_OPERATION 1
#define MSPI_CMD_TYPE 3


#define MSPI_DC_CONFIG 1
#define MSPI_CLK_CONFIG 2
#define MSPI_FRAME_CONFIG 4




typedef struct
{
    MS_U8 u8TrStart;
    MS_U8 u8TrEnd;
    MS_U8 u8TB;
    MS_U8 u8TRW;
} MSPI_DCConfig;

typedef struct
{
    MS_U8 u8WBitConfig[8];
    MS_U8 u8RBitConfig[8];
} MSPI_FrameConfig;


typedef struct
{
 MS_U8 U8Clock;
 MS_BOOL BClkPolarity;
 MS_BOOL BClkPhase;
    MS_U32 u32MAXClk;
} MSPI_CLKConfig;

typedef struct
{
 MSPI_DCConfig tMSPI_DCConfig[MSPI_CMD_TYPE];
 MSPI_FrameConfig tMSPI_FrameConfig[MSPI_CMD_TYPE];
 MSPI_CLKConfig tMSPI_ClockConfig[MSPI_CMD_TYPE];
 MS_U8 U8ChipSel;
 MS_BOOL BLsbFirst;
 void (*MSPIIntHandler)(void);
 MS_BOOL BIntEnable;
 MS_U8 U8BitMapofConfig[MSPI_CMD_TYPE];
    MS_U32 u32DevId;
} MSPI_config;

typedef struct
{
    MS_U16 PadCs;
}stMSPI_csPdCfg;
typedef enum _MSPI_ERRORNOn
{
     E_MSPI_OK = 0
    ,E_MSPI_INIT_FLOW_ERROR =1
    ,E_MSPI_DCCONFIG_ERROR =2
    ,E_MSPI_CLKCONFIG_ERROR =4
    ,E_MSPI_FRAMECONFIG_ERROR =8
    ,E_MSPI_OPERATION_ERROR = 0x10
    ,E_MSPI_PARAM_OVERFLOW = 0x20
    ,E_MSPI_MMIO_ERROR = 0x40
    ,E_MSPI_HW_NOT_SUPPORT = 0x80
    ,E_MSPI_NULL
}MSPI_ErrorNo;

typedef enum
{
    E_MSPI_DBGLV_NONE,
    E_MSPI_DBGLV_INFO,
    E_MSPI_DBGLV_NOTICE,
    E_MSPI_DBGLV_WARNING,
    E_MSPI_DBGLV_ERR,
    E_MSPI_DBGLV_CRIT,
    E_MSPI_DBGLV_ALERT,
    E_MSPI_DBGLV_EMERG,
    E_MSPI_DBGLV_DEBUG,
} MSPI_DbgLv;




#include "drvMSPI_v2.h"
# 173 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MSPI_Init_Ext(MS_U8 u8HWNum);







MSPI_ErrorNo MDrv_MSPI_Init(MSPI_config *tMSPIConfig, MS_U8 u8HWNum);
# 190 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MSPI_Read(MS_U8 *pData, MS_U16 u16Size);
# 199 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MSPI_Write(MS_U8 *pData, MS_U16 u16Size);
# 208 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MSPI_DCConfig(MSPI_DCConfig *ptDCConfig);
# 217 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MSPI_CLKConfig(MSPI_CLKConfig *ptCLKConfig);
# 227 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MSPI_FRAMEConfig(MSPI_FrameConfig *ptFrameConfig);
# 239 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
void MDrv_MSPI_SlaveEnable(MS_BOOL Enable);
# 253 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MS_BOOL MDrv_MSPI_HW_Support(void);
# 262 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MS_U32 MDrv_MSPI_SetPowerState(EN_POWER_MODE enPowerState);
# 271 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MS_BOOL MDrv_MSPI_SetDbgLevel(MS_U8 u8DbgLevel);
# 283 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MasterSPI_Init(MSPI_config *tMSPIConfig, MS_U8 u8HWNum);







MSPI_ErrorNo MDrv_MasterSPI_Read(MS_U32 u32DevID, MS_U8 *pData, MS_U16 u16Size);







MSPI_ErrorNo MDrv_MasterSPI_Write(MS_U32 u32DevID, MS_U8 *pData, MS_U16 u16Size);
# 308 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MasterSPI_DCConfig(MS_U32 u32DevID, MSPI_DCConfig *ptDCConfig);
# 317 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MasterSPI_CLKConfig(MS_U32 u32DevID, MSPI_CLKConfig *ptCLKConfig);
# 326 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MasterSPI_FRAMEConfig(MS_U32 u32DevID, MSPI_FrameConfig *ptFrameConfig);







MSPI_ErrorNo MDrv_MasterSPI_SlaveEnable(MS_U32 u32DevID, MS_BOOL Enable);
# 343 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MS_BOOL MDrv_MasterSPI_CsPadConfig(MS_U32 u32DevID, MS_U32 u32CsPad);
# 352 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MS_BOOL MDrv_MasterSPI_MaxClkConfig(MS_U32 u32DevID, MS_U32 u32MaxClk);







MSPI_ErrorNo MDrv_MSPI_Info_Config(ST_DRV_MSPI_INFO *stMspi_Info);
# 369 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI.h"
MSPI_ErrorNo MDrv_MSPI_RWBytes(MS_BOOL Direct, MS_U8 u8Bytes);
#ifdef __cplusplus
}
#endif

#endif
# 155 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
#ifndef _DRV_PM_H_
#define _DRV_PM_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
# 174 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
#define MSIF_PM_LIB_CODE {'P','M','_','_'}
#define MSIF_PM_LIBVER {'0','3'}
#define MSIF_PM_BUILDNUM {'0','0'}
#define MSIF_PM_CHANGELIST {'0','0','3','5','2','1','6','3'}
#define MSIF_PM_OS '0'

#define PM_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_PM_LIB_CODE, \
    MSIF_PM_LIBVER, \
    MSIF_PM_BUILDNUM, \
    MSIF_PM_CHANGELIST, \
    MSIF_PM_OS


#define PM_MAX_BUF_WAKE_IR (32)
#define PM_MAX_BUF_WAKE_IR2 (16)
#define PM_MAX_BUF_WAKE_KEYPAD (32)
#define PM_MAX_BUF_WAKE_MAC_ADDRESS (6)
# 206 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
#define WRITE_CMD 0
#define READ_CMD 1
#define SLEEP_CMD 2
#define CTRL_WRITE_CMD 3
#define CTRL_READ_CMD 4


#define SLEEP_MODE 0
#define DEEP_SLEEP_MODE 1


#define IR_WAKEUP (1<<0)
#define CEC_WAKEUP (1<<1)
#define GPIO5_WAKEUP (1<<2)
#define GPIO6_WAKEUP (1<<3)
#define KEYPAD_WAKEUP (1<<4)
#define EASYSYNC_WAKEUP (1<<5)
#define SYNC_WAKEUP (1<<6)
#define RTC_WAKEUP (1<<7)

#define DVI_DET_WAKEUP (1<<10)
#define DVI_DET2_WAKEUP (1<<11)


#define POWER_OFF_HIGH (1<<15)


#define IR_TYPE_FULLDECODE_MODE 1
#define IR_TYPE_RAWDATA_MODE 2
#define IR_TYPE_SWDECODE_MODE 3


#define MDRV_IRQ_BEGIN 0x40
#define MDRV_IRQ_END 0x7F
#define IRQ_PMSLEEP (MDRV_IRQ_BEGIN + 12)


#define ENABLE_GPIO0 (1<<0)
#define ENABLE_GPIO1 (1<<1)
#define ENABLE_GPIO2 (1<<2)
#define ENABLE_GPIO3 (1<<3)
#define ENABLE_GPIO6 (1<<6)
#define ENABLE_GPIO7 (1<<7)
#define ENABLE_GPIO8 (1<<8)
#define ENABLE_GPIO9 (1<<9)
#define ENABLE_GPIO10 (1<<10)
#define ENABLE_GPIO11 (1<<11)
#define ENABLE_GPIO12 (1<<12)



typedef enum
{

    CP_WRITE_HOST_MEM_TO_MICOM = 0xE0UL,


    CP_WRITE_HOST_MEM_TO_MICOM_START = 0xE1UL,


    CP_WRITE_HOST_MEM_TO_MICOM_DATA = 0xE2UL,


    CP_WRITE_KEYPAD_BOUND_1 = 0xE6UL,


    CP_WRITE_KEYPAD_BOUND_2 = 0xE7UL,


    CP_READ_MICOM_TO_HOST_MEM = 0xE3UL,


    CP_WRITE_MICOM_TO_HOST_MEM_START = 0xE4UL,


    CP_READ_MICOM_TO_HOST_MEM_DATA = 0xE5UL,


    CP_NO_CMD = 0

} DDI_MICOM_CMDTYPE;


typedef struct
{
    MS_U8 Preamble : 2;
    MS_U8 Opcode : 6;
} PM_Cmd;


typedef struct
{
    MS_S16 s16Time;
    MS_S16 s16UpBnd;
    MS_S16 s16LowBnd;
} PM_IrTimeCfg;


typedef struct
{
    MS_U8 u8IrModeSel;
    MS_U8 u8IrCtrl;
    MS_U8 u8IrHdrCode0;
    MS_U8 u8IrHdrCode1;
    MS_U32 u32IrTimOutCyc;
    PM_IrTimeCfg tIrHdrCoTim;
    PM_IrTimeCfg tIrOffCoTim;
    PM_IrTimeCfg tIrOffCoRpTim;
    PM_IrTimeCfg tIrLg01HighTim;
    PM_IrTimeCfg tIrLg0Tim;
    PM_IrTimeCfg tIrLg1Tim;
} PM_IrRegCfg;


typedef struct
{
    MS_U8 u8UpBnd;
    MS_U8 u8LowBnd;
} PM_SarBndCfg;


typedef struct
{
    PM_SarBndCfg tSarChan1;
    PM_SarBndCfg tSarChan2;
    PM_SarBndCfg tSarChan3;
    PM_SarBndCfg tSarChan4;
} PM_SarRegCfg;


typedef struct
{
    PM_SarBndCfg tChanMinus;
    PM_SarBndCfg tChanPlus;
    PM_SarBndCfg tInput;
    PM_SarBndCfg tMenu;
    PM_SarBndCfg tOk;
    PM_SarBndCfg tPower;
    PM_SarBndCfg tVolumeMinus;
    PM_SarBndCfg tVolumePlus;
} PM_SarParamCfg;

typedef enum
{
    E_PM_RTC_0=0,
    E_PM_RTC_2=1,
}E_PM_RTC;


typedef enum
{

    E_PM_IRQ_IR = 0,

    E_PM_IRQ_CEC_WAKE = 1,

    E_PM_IRQ_EX_INT = 2,

    E_PM_IRQ_EX_INT2 = 3,

    E_PM_IRQ_SAR = 4,

    E_PM_IRQ_SYNC_DET = 5,

    E_PM_IRQ_DVICLK_DET = 6,

    E_PM_IRQ_RTC = 7,

    E_PM_IRQ_WDT = 8,

    E_PM_IRQ_MBOX0 = 9,

    E_PM_IRQ_MBOX1 = 10,

    E_PM_IRQ_MBOX2 = 11,

    E_PM_IRQ_MMOX3 = 12,

    E_PM_IRQ_MAX = E_PM_IRQ_MMOX3,

} PM_IRQ_TYPE;


typedef struct
{
    unsigned long r[32];
#ifdef __AEONR2__
    unsigned long machi2;
#endif
    unsigned long machi;
    unsigned long maclo;

    unsigned long pc;



    unsigned long eear;

    int vector;
    int sr;

} PM_SavedRegisters;

typedef void (*PM_IsrCb_Type)(PM_SavedRegisters *regs, MS_U32 vector);


typedef void ( *IRRecord_Callback ) (MS_VIRT virtSrcAddr, MS_U16 u16DataSize);


typedef struct
{
    PM_IsrCb_Type isr;
    MS_U32 data;
} PM_IrqStruct;






typedef enum _PM_DbgLv
{
    E_PM_DBGLV_NONE,
    E_PM_DBGLV_ERR_ONLY,
    E_PM_DBGLV_INFO,
    E_PM_DBGLV_ALL,
}PM_DbgLv;


typedef enum
{

    E_PM_FAIL = 0,

    E_PM_OK = 1,

} PM_Result;


typedef enum
{
    E_PM_POWERON_STANBY = 1,
    E_PM_POWERON_SLEEP = 2,
    E_PM_POWERON_DEEPSLEEP = 3,
    E_PM_POWERON_ACON = 0xffUL,

} PM_PowerOnMode;

typedef enum
{
 E_PM_WAKEUPSRC_NONE = 0,
 E_PM_WAKEUPSRC_IR,
 E_PM_WAKEUPSRC_DVI,
 E_PM_WAKEUPSRC_DVI2,
 E_PM_WAKEUPSRC_CEC,
 E_PM_WAKEUPSRC_SAR,
 E_PM_WAKEUPSRC_ESYNC,
 E_PM_WAKEUPSRC_SYNC,
 E_PM_WAKEUPSRC_RTC,
 E_PM_WAKEUPSRC_RTC2,
 E_PM_WAKEUPSRC_AVLINK,
 E_PM_WAKEUPSRC_UART,
 E_PM_WAKEUPSRC_GPIO,
 E_PM_WAKEUPSRC_MHL,
 E_PM_WAKEUPSRC_WOL,

} PM_WakeupSource;


typedef enum
{
    E_PM_ACKFLG_NULL = 0,
    E_PM_ACKFLG_WAIT_INIT = (1<<0),
    E_PM_ACKFLG_WAIT_STATUS = (1<<1),
    E_PM_ACKFLG_WAIT_LIBVER = (1<<2),
    E_PM_ACKFLG_WAIT_POWERDOWN = (1<<3),
    E_PM_ACKFLG_WAIT_RTCINIT = (1<<4),
    E_PM_ACKFLG_WAIT_RTCSETCOUNTER = (1<<5),
    E_PM_ACKFLG_WAIT_RTCGETCOUNTER = (1<<6),
    E_PM_ACKFLG_WAIT_RTCSETMATCHCOUNTER = (1<<7),
    E_PM_ACKFLG_WAIT_RTCGETMATCHCOUNTER = (1<<8),
    E_PM_ACKFLG_WAIT_INFO = (1<<9),
    E_PM_ACKFLG_WAIT_GETMASTERKEY = (1<<10),
    E_PM_ACKFLG_WAIT_GETDEVICEID = (1<<11),
    E_PM_ACKFLG_WAIT_GETCHIPID = (1<<12),
    E_PM_ACKFLG_WAIT_GPIOINIT = (1<<13),
    E_PM_ACKFLG_WAIT_PWMINIT = (1<<14),
    E_PM_ACKFLG_WAIT_PWMCONFIG = (1<<15),
    E_PM_ACKFLG_WAIT_GETPMMEMADDR = (1<<16),
    E_PM_ACKFLG_WAIT_GETEXTRASRAMDATA = (1<<17),
    E_PM_ACKFLG_WAIT_SETEXTRASRAMDATA = (1<<18),
    E_PM_ACKFLG_WAIT_WDT_KICK = (1<<19),
} PM_AckFlags;


typedef enum
{
    E_PM_PWM_ACKFLG_NULL = 0,
    E_PM_PWM_ACKFLG_WAIT_INIT = (1<<0),
    E_PM_PWM_ACKFLG_WAIT_CONF = (1<<1),
    E_PM_PWM_ACKFLG_WAIT_IRRECORD_RECIEVE_REQUIRE = (1<<2),
    E_PM_PWM_ACKFLG_WAIT_IRRECORD_RECIEVE_COMPLETE = (1<<3),
    E_PM_PWM_ACKFLG_WAIT_IRRECORD_TRANSMIT = (1<<4),
    E_PM_PWM_ACKFLG_WAIT_IRRECORD_SETCALLBACK = (1<<5),
    E_PM_PWM_ACKFLG_WAIT_IRRECORD_RECIEVE_EXIT = (1<<6),
    E_PM_PWM_ACKFLG_WAIT_GPIO_PWM_REQUIRE = (1<<7),
} PM_PWM_AckFlags;

#if defined(MSOS_TYPE_ECOS)
typedef enum
{
    E_PM_ST_NULL = 0,
    E_PM_ST_BOOTING = 1,
    E_PM_ST_READY = 2,
    E_PM_ST_STANDBY = 3,
    E_PM_ST_PMMODE = 4,
    E_PM_ST_MAX_STATUS = 255

} __attribute__ ((aligned (4096))) PM_DrvStatus;

#else

typedef enum __attribute__ ((aligned (4096)))
{
    E_PM_ST_NULL = 0,
    E_PM_ST_BOOTING = 1,
    E_PM_ST_READY = 2,
    E_PM_ST_STANDBY = 3,
    E_PM_ST_PMMODE = 4,
    E_PM_ST_MAX_STATUS = 255

} PM_DrvStatus;
#endif


#define E_PM_STANDBY 0
#define E_PM_SLEEP 1
#define E_PM_DEEP_SLEEP 2
#define E_PM_NORMAL 3


#define E_PM_WAKE_ZERO 0
#define E_PM_WAKE_LAST 1
#define E_PM_ZERO_TWOSTAGE_POWERDOWN 2
#define E_PM_LAST_TWOSTAGE_POWERDOWN 3


typedef enum
{

    PM_CMDIDX_INIT = 0x01UL,
    PM_CMDIDX_GET_STATUS = 0x02UL,
    PM_CMDIDX_GET_LIBVER = 0x03UL,
    PM_CMDIDX_POWER_DOWN = 0x04UL,
    PM_CMDIDX_RTC_INIT = 0x05UL,
    PM_CMDIDX_RTC_SETCOUNTER = 0x06UL,
    PM_CMDIDX_RTC_GETCOUNTER = 0x07UL,
    PM_CMDIDX_RTC_SETMATCHCOUNTER = 0x08UL,
    PM_CMDIDX_RTC_GETMATCHCOUNTER = 0x09UL,
    PM_CMDIDX_GET_INFO = 0x0AUL,
    PM_CMDIDX_GET_MASTERKEY = 0x0BUL,
    PM_CMDIDX_GET_DEVICEID = 0x0CUL,
    PM_CMDIDX_GET_CHIPID = 0x0DUL,
    PM_CMDIDX_GPIO_INIT = 0x0EUL,
    PM_CMDIDX_PWM_INIT =0x0FUL,
    PM_CMDIDX_PWM_CONFIG =0x10UL,

    PM_CMDIDX_PWM_IRRECORD_RECEIVED_SETCALLBACK = 0x11UL,
    PM_CMDIDX_PWM_IRRECORD_RECEIVED_REQUIRE = 0x12UL,
    PM_CMDIDX_PWM_IRRECORD_RECEIVED_COMPLETE = 0x13UL,
    PM_CMDIDX_PWM_IRRECORD_TRANSMIT = 0x14UL,
    PM_CMDIDX_PWM_IRRECORD_RECEIVED_EXIT = 0x15UL,
    PM_CMDIDX_GETEXTRASRAMDATA = 0x16UL,
    PM_CMDIDX_SETEXTRASRAMDATA = 0x17UL,
    PM_CMDIDX_SET_ONBOARD_LED = 0x18UL,
    PM_CMDIDX_SET_POWER_LED_N_PROGRAM_TIMER_LED = 0x19UL,

    PM_CMDIDX_LED_FLASH = 0x20UL,
    PM_CMDIDX_GLOBAL_CHIP_RESET = 0x21UL,
    PM_CMDIDX_GET_PM_MEMADDR = 0x22UL,
    PM_CMDIDX_GET_SYSTEM_ALIVE_STATUS = 0x23UL,
    PM_CMDIDX_WDT_STATUS = 0x24UL,
    PM_CMDIDX_UPATE_POWER_LED_STATUS = 0x25UL,
    PM_CMDIDX_LED_FLASH_TOGGLE = 0x28UL,
    PM_CMDIDX_POWER_ON_TIME_RECORD = 0x29UL,

    PM_CMDIDX_ACK_51ToAEON = 0x30UL,
    PM_CMDIDX_WDT_KICK = 0x40UL,
#if defined(UFO_PM_BACKLIGHT_CTRL)
    PM_CMDIDX_LED = 0x42,
    PM_CMDIDX_START_BACKLIGHT_PROCESSING = 0x44,
    PM_CMDIDX_SET_BACKLIGHT_CTRL_MODE = 0x45,
    PM_CMDIDX_SET_BACKLIGHT_CTRL_ON_OFF = 0x46,
    PM_CMDIDX_SET_SOURCE_SIGNAL_CTRL_MODE = 0x47,
    PM_CMDIDX_SET_OFL_STB = 0x48,
#endif
    PM_CMDIDX_SN_INIT_ACK = 0x50UL,
    PM_CMDIDX_PWM_GPIO_REQUIRE = 0x60UL,

    PM_CMDIDX_ACK_AEONTo51 = 0xA0UL,

} PM_CmdIndex;

typedef enum
{
    E_WDT_NOT_ENABLE,
    E_WDT_REFRESH,
    E_WDT_STOP_REFRESH,
    E_WDT_RESET_SYSTEM_IMMEDIATE,
} WDT_STATUS;



typedef enum
{
    E_ON_BOARD_LED_OFF= 0,
    E_ON_BOARD_LED_PATTERN_1 = 1,
    E_ON_BOARD_LED_PATTERN_2 = 2,
    E_ON_BOARD_LED_PATTERN_3 = 3,
    E_ON_BOARD_LED_PATTERN_4 = 4,
    E_ON_BOARD_LED_PATTERN_5 = 5,
    E_ON_BOARD_LED_ON= 255,
} USB_LED_PATTERN;

typedef enum
{
    E_ON_BOARD_LED_STAGE_BIST= 0,
    E_ON_BOARD_LED_STAGE_MBOOT_SUCCESS=1,
    E_ON_BOARD_LED_STAGE_APL_SUCCESS= 2,
    E_ON_BOARD_LED_STAGE_UPDATE_SW= 3,
} ON_BOARD_LED_STAGE;


typedef enum
{
    E_PROGRAM_TIMER_IS_SET= 0,
    E_PROGRAM_TIMER_IS_REMINDING= 1,
    E_PROGRAM_TIMER_IS_RECORDING=2,
    E_PROGRAM_TIMER_IS_NOT_SET= 3,
} PROGRAM_TIMER_LED_STATUS;

typedef enum
{
    E_SW_UPDATE_NOT_IN_PROGRESS= 0,
    E_SW_UPDATE_IN_PROGRESS= 1,
    E_SW_UPDATE_FAILED= 2,
    E_SW_UPDATE_SUCCESSFUL= 3,
    E_SW_UPDATE_FAN_ERROR=4,
    E_SW_UPDATE_FAN_ERROR_RECOVER=5,
} SW_UPDATE_STATUS;

typedef enum
{
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE1= 1,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE2= 2,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE3= 3,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE4= 4,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE5= 5,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE6= 6,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE7= 7,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE8= 8,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE9= 9,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE10= 10,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE11= 11,
    E_POWER_LED_N_PROGRAM_TIMER_LED_MODE12= 12,
} POWER_LED_N_PROGRAM_TIMER_LED_MODE;

typedef enum
{
    E_POWER_LED_KEEP= 0,
    E_POWER_LED_GREEN,
    E_POWER_LED_RED,
    E_POWER_LED_ORANGE,
} UPATE_POWER_LED_PATTERN;



typedef enum
{
    E_PM_NON_STR=0,
    E_PM_NON_STR_AC,
    E_PM_STR,
    E_PM_STR_CRC,
}PM_STRMode;


#define CRC_KERNEL_BUF (3)
typedef struct __attribute__ ((aligned (4096)))
{
    MS_U8 bPmWakeEnableIR : 1;
    MS_U8 bPmWakeEnableSAR : 1;
    MS_U8 bPmWakeEnableGPIO0 : 1;
    MS_U8 bPmWakeEnableGPIO1 : 1;
    MS_U8 bPmWakeEnableUART1 : 1;
    MS_U8 bPmWakeEnableSYNC : 1;
    MS_U8 bPmWakeEnableESYNC : 1;

    MS_U8 bPmWakeEnableRTC0 : 1;
    MS_U8 bPmWakeEnableRTC1 : 1;
    MS_U8 bPmWakeEnableDVI0 : 1;
    MS_U8 bPmWakeEnableDVI2 : 1;
    MS_U8 bPmWakeEnableCEC : 1;
    MS_U8 bPmWakeEnableAVLINK : 1;
    MS_U8 bPmWakeEnableMHL : 1;
    MS_U8 bPmWakeEnableWOL : 1;

    MS_U8 u8PmWakeIR[PM_MAX_BUF_WAKE_IR];
    MS_U8 u8PmWakeIR2[PM_MAX_BUF_WAKE_IR2];
    MS_U8 u8PmWakeMACAddress[PM_MAX_BUF_WAKE_MAC_ADDRESS];

    MS_U8 u8PmStrMode;
    MS_BOOL bLxCRCMiu[CRC_KERNEL_BUF];
    MS_U32 u32LxCRCAddress[CRC_KERNEL_BUF];
    MS_U32 u32LxCRCSize[CRC_KERNEL_BUF];
    MS_U8 u8PmWakeEnableWOWLAN;
    MS_U8 u8PmWakeWOWLANPol;
} PM_WakeCfg;


typedef struct __attribute__ ((aligned (4096)))
{
    MS_U8 u8IREncodeMode;
    MS_U8 u8Customercode1;
    MS_U8 u8Customercode2;
    MS_U8 u8IRKeycode;
    MS_U8 u8IRRepeat;
    MS_U8 u8Reserved0;
    MS_U8 u8Reserved1;
    MS_U8 u8Reserved2;
} PWMSimIR_CFG;

typedef struct __attribute__ ((aligned (4096)))
{


    MS_U16 u16Offset;
    MS_U16 u16DataLen;
    MS_U8 u8ExtraSramData[];
} PM_ExtraSramData;


typedef struct __attribute__ ((aligned (4096)))
{
    MS_U8 u8PowerDownMode;
    MS_U8 u8WakeAddress;

} PM_PowerDownCfg;


typedef struct __attribute__ ((aligned (4096)))
{
    MS_U32 u32RtcCtrlWord;
    MS_U32 u32RtcSetMatchCounter;
    MS_U32 u32RtcGetMatchCounter;
    MS_U32 u32RtcSetCounter;
    MS_U32 u32RtcGetCounter;
    MS_U8 u8PmRtcIndex;
    MS_U8 u8Reserved0;
    MS_U8 u8Reserved1;
    MS_U8 u8Reserved2;

} PM_RtcParam;


typedef struct __attribute__ ((aligned (4096)))
{
    MS_U8 u8PmSupSleepMode;
    MS_U8 u8PmSupRtcIdxMax;

}PM_DrvInfo;

typedef struct
{
    MS_U8 u8Reserved[16];

}PM_Dummy;
# 795 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_isRunning(void);
# 804 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_InterruptRequest( void );
void MDrv_PM_LoadFw( MS_U8 *pPmCode, MS_U16 u16Len );
# 814 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_RegWrite( MS_U16 u16Addr, MS_U8 u8Data );
# 823 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_U8 MDrv_PM_RegRead( MS_U16 u16Addr );
# 832 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RegWriteBit(MS_U16 u16Addr, MS_U8 bBit, MS_U8 u8BitPos );
# 841 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_U8 MDrv_PM_RegReadBit(MS_U16 u16Addr, MS_U8 u8BitPos);
# 850 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RegWrite2byte( MS_U16 u16RegIndex, MS_U16 u16Value );
# 859 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RegWrite3byte( MS_U16 u16Regndex, MS_U32 u32Value );
# 868 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_Control( MS_U8 u8opcode, MS_U8 u8Data, MS_U16 u16Data );
# 877 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_CtrlWrite( MS_U8 u8Opcode, MS_U8 u8CmdType, MS_U8 u8DataNum, MS_U8 *pu8Data );
# 886 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_CtrlRead( MS_U8 u8Opcode, MS_U8 u8CmdType, MS_U8 u8DataNum, MS_U8 *pu8Data );
# 895 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_MemoryWrite(MS_U8 *pu8Data, MS_U16 u16MemLen);
# 904 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_MemoryRead(MS_U8 *pu8Data, MS_U16 u16MemLen);
# 913 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RTCEnableInterrupt(MS_BOOL bEnable);
# 922 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RTC2EnableInterrupt(MS_BOOL bEnable);
# 931 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RTC2SetMatchTime(MS_U32 u32PmSysTime);
# 941 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RTCSetMatchTime(MS_U32 u32PmSysTime);
# 950 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_U32 MDrv_PM_RTCGetMatchTime(void);
# 959 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RTCSetSystemTime(MS_U32 u32PmSysTime);
# 968 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_U32 MDrv_PM_RTCGetSystemTime(void);
# 977 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RTCInit(MS_U32 u32CtrlWord);
# 986 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_IRInit(MS_U8 irclk_mhz, PM_IrRegCfg *irRegCfg);
# 995 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_KeypadInit(PM_SarRegCfg *sarRegCfg, PM_SarParamCfg *sarParamCfg);
# 1004 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_CalibrateRC(void);
# 1013 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_isDownloaded(void);
# 1022 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_Set_Download(void);
# 1031 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_IrqAttach(PM_IRQ_TYPE irq, PM_IsrCb_Type isr, MS_U32 data);
# 1040 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_IrqDetach(PM_IRQ_TYPE irq);
# 1049 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_IrqUnmask(PM_IRQ_TYPE irq);
# 1058 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_IrqMask(PM_IRQ_TYPE irq);
# 1067 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_IrqMaskAll(void);
# 1077 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_ActiveStandbyMode(MS_BOOL bTrigger);
# 1086 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_IsActiveStandbyMode(MS_BOOL *bActive);
# 1096 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_Init(PM_WakeCfg *pPmWakeCfg);
# 1105 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GetStatus(PM_DrvStatus *pDrvStatus);
# 1114 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GetLibVer(const MSIF_Version **ppVersion);
# 1123 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PowerDown(PM_PowerDownCfg *pPmPowerDownCfg);
# 1132 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GetMasterKey(MS_U8 *pPmPowerDownCfg);
# 1141 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GetDeviceID(MS_U8 *DeviceID);
# 1150 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GetChipID(MS_U8 *ChipParam);
# 1159 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GetPMMemAddr(MS_U8 *PmMemAddr);
# 1168 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
const PM_DrvInfo* MDrv_PM_GetInfo(void);
# 1177 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GPIOInit(MS_U16 u16GPIOIndex);
# 1186 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_SetDbgLevel(PM_DbgLv eLevel);
# 1195 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_RtcInit(PM_RtcParam *pPmRtcParam);
# 1204 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_Rtc_DisableInit(E_PM_RTC eRtc);
# 1213 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_RtcSetCounter(PM_RtcParam *pPmRtcParam);
# 1222 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_RtcGetCounter(PM_RtcParam *pPmRtcParam);
# 1231 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_RtcSetMatchCounter(PM_RtcParam *pPmRtcParam);
# 1240 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_RtcGetMatchCounter(PM_RtcParam *pPmRtcParam);
# 1249 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GetExtraSramData(PM_ExtraSramData *pPmExtraSramData);
# 1258 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_SetExtraSramData(PM_ExtraSramData *pPmExtraSramData);
# 1268 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_SetSPIOffsetForMCU(MS_U32 BANK);
# 1277 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_SetSRAMOffsetForMCU(void);
# 1286 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_BOOL MDrv_PM_SetDRAMOffsetForMCU(MS_U32 u32Offset);
# 1295 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_PowerOnMode MDrv_PM_PowerOnMode(void);
# 1304 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_WakeupSource MDrv_PM_GetWakeupSource(void);
# 1313 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_U8 MDrv_PM_GetWakeupKey(void);
# 1322 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_Disable51(void);
# 1331 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_GPIO4_SetPower(MS_BOOL bOn);
# 1340 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_Init(MS_U8 u8PWM);
# 1349 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_Config(PWMSimIR_CFG *pPmPWMCfg);
# 1358 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_IRRecord_Init(void);
# 1367 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_IRRecord_Receive_Complete(MS_U32 u32BufferAddr,MS_U16 u16BufferSize);
# 1376 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_IRRecord_Receive_Require(MS_U32 u32BufferAddr,MS_U16 u16BufferSize);
# 1385 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_IRRecord_Transmit(MS_U32 u32BufferAddr,MS_U16 u16BufferSize);
# 1394 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_IRRecord_SetCallBackFunction(IRRecord_Callback pCallback);
# 1403 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_IRRecord_Receive_Exit(void);
# 1412 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_RunTimePM_Disable_PassWord(void);
# 1421 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_WDT_Kick(MS_U8 u8Kick);
# 1430 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
void MDrv_PM_STR_CheckFactoryPowerOnModePassword(void);
# 1439 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_STR_CheckFactoryPowerOnMode_Second(MS_BOOL bCheck);
# 1448 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_Check_Version(MS_BOOL bCheck);
# 1457 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_U16 MDrv_PM_GetSRAMSize(void);
# 1466 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
MS_U8 MDrv_PM_GetIRPowerOnKey(void);
void MDrv_PM_GetRT51Status(void);
# 1476 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPM.h"
PM_Result MDrv_PM_PWM_Duty(MS_U8 u8cfg,MS_U8 u8step);
#ifdef MSOS_TYPE_LINUX
PM_Result MDrv_PM_IO_INIT(void);
PM_Result MDrv_PM_WriteDramInfo_Data(MS_U32 u32Addr, MS_U32 u32Size);
PM_Result MDrv_PM_WriteDramInfo_Code(MS_U32 u32Addr, MS_U32 u32Size);
#endif
#if defined(UFO_PM_BACKLIGHT_CTRL)
  PM_Result MDrv_PM_LED(MS_U8 u8Status);
  PM_Result MDrv_PM_Backlight_Processing(void);
  PM_Result MDrv_PM_Backlight_OnOff(MS_U8 eStatus, MS_U8 u8BacklightDuty);
  PM_Result MDrv_PM_Backlight_Ctrl_Mode(MS_U8 eBLCtrlMode, MS_U8 u8BacklightDuty);
  PM_Result MDrv_PM_Backlight_Operation(MS_U8 u8status);
#endif
PM_Result MDrv_PM_STR_CRC_Check(MS_U16 u16CRCChecksum);
#ifdef __cplusplus
}
#endif

#endif
# 98 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_VMark.h"
#ifndef _API_XC_VMARK_H_
#define _API_XC_VMARK_H_ 
#ifdef __cplusplus
extern "C"
{
#endif




#include "apiXC.h"





#define XC_VMARK_PARAMETER_VERSION 1






typedef struct __attribute__((packed))
{

    MS_U32 u32XC_VMark_version;
    MS_U32 u32XC_VMarK_Length;

    MS_U8 u8WatermarkOn;
    MS_U8 u8FrequencyDistance[3][3];
    MS_U8 u8BackgroundEmbeddingOn;
    MS_U16 u16EmbeddingStrengthThreshold[48];
    MS_U16 u16EmbeddingStrengthThresholdBG[48];
    MS_U16 u16DirectionMax;
    MS_S8 s8StrengthMultiply;

    MS_U8 u8PayloadSymbols[1920];
    MS_U8 u8SymbolsRows;
    MS_U8 u8SymbolsCols;
    MS_U8 u8SymbolsXpos;
    MS_U8 u8SymbolsYpos;
    MS_U8 u8SymbolSize;
    MS_U16 u16SpacingVert;
    MS_U16 u16SpacingHorz;
    MS_U8 u8SymbolScaleControl;
}XC_VMARK_PARAMETER;





#ifdef UFO_XC_VMARK





DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_VMark_SetParameters(MS_U8 u8ServiceIndex, XC_VMARK_PARAMETER *pstXC_VMarkParameters);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Adc_v2.h"
#ifndef _XC_ADC_H_
#define _XC_ADC_H_ 

#ifdef __cplusplus
extern "C"
{
#endif


typedef struct
{
    MS_BOOL bEnable;
    E_DEST_TYPE enOutputType;
    INPUT_SOURCE_TYPE_t enInputPortType;
    MS_BOOL isDigitalSource;
} stXC_ADC_SETCVBSOUT, *pstXC_ADC_SETCVBSOUT;


typedef struct
{
    E_DEST_TYPE enOutputType;
    MS_BOOL bReturnValue;
} stXC_ADC_ISCVBSOUTENABLED, *pstXC_ADC_ISCVBSOUTENABLED;

typedef struct
{
    MS_U16 u16Value;
} stXC_ADC_SETPCCLOCK, *pstXC_ADC_SETPCCLOCK;

typedef struct
{
    MS_U8 u8Value;
} stXC_ADC_SETPHASE, *pstXC_ADC_SETPHASE;

typedef struct
{
    MS_U16 u16Value;
} stXC_ADC_SETPHASEEX, *pstXC_ADC_SETPHASEEX;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_ADC_GETPHASERANGE, *pstXC_ADC_GETPHASERANGE;

typedef struct
{
    MS_U8 u8ReturnValue;
} stXC_ADC_GETPHASE, *pstXC_ADC_GETPHASE;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_ADC_GETPHASEEX, *pstXC_ADC_GETPHASEEX;

typedef struct
{
    MS_BOOL bReturnValue;
} stXC_ADC_ISSCARTRGB, *pstXC_ADC_ISSCARTRGB;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_ADC_GETPCCLOCK, *pstXC_ADC_GETPCCLOCK;

typedef struct DLL_PACKED
{
    MS_U32 *u32min;
    MS_U32 *u32max;
    MS_U32 *u32Recommend_value;
} stXC_ADC_GETSOGLEVELRANGE, *pstXC_ADC_GETSOGLEVELRANGE;

typedef struct
{
    MS_U32 u32Value;
} stXC_ADC_SETSOGLEVEL, *pstXC_ADC_SETSOGLEVEL;


typedef struct
{
    INPUT_SOURCE_TYPE_t enSource;
    APIXC_AdcGainOffsetSetting* pstADCSetting;
} stXC_ADC_GETDEFAULTGAINOFFSET, *pstXC_ADC_GETDEFAULTGAINOFFSET;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_ADC_GETMAXIMALOFFSETVALUE, *pstXC_ADC_GETMAXIMALOFFSETVALUE;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_ADC_GETMAXIMALGAINVALUE, *pstXC_ADC_GETMAXIMALGAINVALUE;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_ADC_GETCENTERGAIN, *pstXC_ADC_GETCENTERGAIN;

typedef struct
{
    MS_U16 u16ReturnValue;
} stXC_ADC_GETCENTEROFFSET, *pstXC_ADC_GETCENTEROFFSET;

typedef struct
{
    MS_U8 u8Color;
    MS_U16 u16Value;
} stXC_ADC_SETGAIN, *pstXC_ADC_SETGAIN;

typedef struct
{
    MS_U8 u8Color;
    MS_U16 u16Value;
} stXC_ADC_SETOFFSET, *pstXC_ADC_SETOFFSET;

typedef struct DLL_PACKED
{
    APIXC_AdcGainOffsetSetting* pstADCSetting;
} stXC_ADC_ADJUSTGAINOFFSET, *pstXC_ADC_ADJUSTGAINOFFSET;

typedef struct
{
    INPUT_SOURCE_TYPE_t enInputSourceType;
} stXC_ADC_SOURCE_CALIBRATE, *pstXC_ADC_SOURCE_CALIBRATE;

typedef struct
{
    MS_U8 u8Value;
} stXC_ADC_SETRGB_PIPE_DELAY, *pstXC_ADC_SETRGB_PIPE_DELAY;

typedef struct
{
    MS_U16 u16Clpdly;
    MS_U16 u16Caldur;
} stXC_ADC_SCARTRGB_SOG_CLAMPDELAY, *pstXC_ADC_SCARTRGB_SOG_CLAMPDELAY;

typedef struct
{
    MS_BOOL bEnable;
} stXC_ADC_SET_YPBPRLOOSELPF, *pstXC_ADC_SET_YPBPRLOOSELPF;

typedef struct
{
    MS_U16 u16Value;
} stXC_ADC_SET_SOGBW, *pstXC_ADC_SET_SOGBW;

typedef struct
{
    MS_U16 u16Value;
} stXC_ADC_SETCLAMPDURATION, *pstXC_ADC_SETCLAMPDURATION;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bReturnValue;
} stXC_ADC_ENABLEHWCALIBRATION, *pstXC_ADC_ENABLEHWCALIBRATION;

typedef struct
{
    ADC_DacCurrentMode_t eMode;
    MS_BOOL bReturnValue;
} stXC_ADC_SETIDACCURRENTMODE, *pstXC_ADC_SETIDACCURRENTMODE;

typedef struct
{
    ADC_DacCurrentMode_t eReturnMode;
} stXC_ADC_GETIDACCURRENTMODE, *pstXC_ADC_GETIDACCURRENTMODE;


#ifdef __cplusplus
}
#endif

#endif
# 100 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRVD.h"
#ifndef _DRV_RVD_H_
#define _DRV_RVD_H_ 
#ifdef __cplusplus
extern "C"
{
#endif
# 117 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRVD.h"
#define MSIF_RVD_LIB_CODE {'R','V','D','_'}
#define MSIF_RVD_LIBVER {'0','1'}
#define MSIF_RVD_BUILDNUM {'0','1'}
#define MSIF_RVD_CHANGELIST {'0','0','1','3','2','9','3','7'}





#define RVD_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_RVD_LIB_CODE, \
    MSIF_RVD_LIBVER, \
    MSIF_RVD_BUILDNUM, \
    MSIF_RVD_CHANGELIST, \
    MSIF_OS
# 147 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvRVD.h"
typedef void (*RVD_InterruptCb)(void);





typedef enum
{
    E_RVD_DEBUG_NONE = 0x0,
    E_RVD_DEBUG_INF = 0x01,
    E_RVD_DEBUG_DRV = 0x02,
    E_RVD_DEBUG_HAL = 0x04,
    E_RVD_DEBUG_ERR = 0x08
} RVD_DebugLevel;





typedef enum
{
    E_RVD_DISPLAYMODE_NULL = 0x7000,
    E_RVD_DISPLAYMODE_SHOW = 0x7001,
    E_RVD_DISPLAYMODE_DONE = 0x7002
} RVD_DisplayMode;





typedef enum
{
    E_RVD_TRICKMODE_DECODE_ALL = 0,
    E_RVD_TRICKMODE_DECODE_I = 1,
    E_RVD_TRICKMODE_DECODE_IP = 2
} RVD_TrickMode;





typedef enum
{
    E_RVD_FW_SOURCE_NONE,
    E_RVD_FW_SOURCE_DRAM,
    E_RVD_FW_SOURCE_FLASH,
}RVD_FWSourceType;





typedef struct
{
    MS_BOOL bInit;
    MS_BOOL bBusy;
} RVD_DrvStatus;





typedef enum
{
    E_RVD_RVTYPE_FLAGRV8 = 0,
    E_RVD_RVTYPE_FLAGRV9 = 1
} RVD_RVType;





typedef enum
{
    E_RVD_RET_FAIL = 0,
    E_RVD_RET_SUCCESS = 1,
    E_RVD_RET_UNSUPPORTED = 2,
    E_RVD_RET_ILLEGAL_ACCESS = 3,
    E_RVD_RET_TIMEOUT = 4,
    E_RVD_RET_NOTREADY = 5,
    E_RVD_RET_INVALID_PARAM = 6,
    E_RVD_RET_RE_INIT
} RVD_Result;





typedef enum
{
    E_RVD_CMD_NULL = 0x0,


    E_RVD_CMD_NEW_BASE = 0x00010000,




    E_RVD_CMD_TYPE_ACTION_MASK = (0x0100|E_RVD_CMD_NEW_BASE),

    E_RVD_CMD_PLAY,
    E_RVD_CMD_PAUSE,
    E_RVD_CMD_STOP,

    E_RVD_CMD_STEP_DECODE,
    E_RVD_CMD_FLUSH,

    E_RVD_CMD_MIN_FRAME_GAP,
    E_RVD_CMD_DIS_VDEAD,
    E_RVD_CMD_FLUSH_DEC_Q,
    E_RVD_CMD_BLUE_SCREEN,
    E_RVD_CMD_FREEZE_IMG,
    E_RVD_CMD_JUMP_TO_PTS,
    E_RVD_CMD_SKIP_TO_PTS,
    E_RVD_CMD_SYNC_TOLERANCE,
    E_RVD_CMD_SYNC_VIDEO_DELAY,
    E_RVD_CMD_FREERUN_THRESHOLD,




    E_RVD_CMD_SETTINGS_MASK = (0x0200|E_RVD_CMD_NEW_BASE),
    E_RVD_CMD_DYNAMIC_SCALE,
    E_RVD_CMD_SCALER_INFO,




    E_RVD_CMD_MODE_MASK = (0x0300|E_RVD_CMD_NEW_BASE),
    E_RVD_CMD_SKIP_DEC,
    E_RVD_CMD_SYNC_ACTIVE,
    E_RVD_CMD_DISP_SPEED,
    E_RVD_CMD_DISP_ERR_FRM,
    E_RVD_CMD_ERR_CONCEAL,
    E_RVD_CMD_DROP_DISP_AUTO,
    E_RVD_CMD_DROP_DISP_ONCE,
    E_RVD_CMD_DISP_REPEAT_MAX,




    E_RVD_CMD_TEST_MASK = (0x0400|E_RVD_CMD_NEW_BASE),
    E_RVD_CMD_ENABLE_LAST_FRAME_SHOW,
    E_RVD_CMD_ISR_TYPE
} RVD_User_Cmd;





typedef struct
{
    MS_U16 RV_Version;
    MS_U16 ulNumSizes;
    MS_U16 ulPicSizes_w[8];
    MS_U16 ulPicSizes_h[8];
    MS_U16 ulBufMode;
    MS_U32 ulFBAddr;
    MS_U32 ulFBSize;
    MS_U32 ulVLCAddr;
} RVD_FileInfo;





typedef struct
{
    MS_BOOL bRVD_MiuSel;
    MS_BOOL bRVD_FWBinInMIU1;
    MS_BOOL bRVD_VLCBinInMIU1;
    MS_BOOL bRVD_HWinMIU1;
    MS_BOOL bRVD_FWinMIU1;
    MS_U32 u32VLC_DstAddr;
    MS_U32 u32VLC_DstSize;
    MS_U32 u32VLC_ScrAddr;
    MS_U32 u32VLC_ScrSize;
    MS_U32 u32FW_ScrAddr;
    MS_U32 u32FW_ScrSize;
    MS_U32 u32FW_DstAddr;
    MS_U32 u32FW_PhyAddr;
    MS_U32 u32BDMAFlag;
} RVD_MiuInfo;
extern RVD_MiuInfo gRVDInfo;





typedef struct
{
    MS_U32 u32PacketID_HI;
    MS_U32 u32PacketID_LO;

} RVD_Packet_ID;





typedef struct
{
    RVD_FWSourceType eFWSourceType;
    MS_U32 u32FWAddr;
    MS_U32 u32FWSize;
    MS_U32 u32FBAddr;
    MS_U32 u32FBSize;
    MS_U32 u32BSAddr;
    MS_U32 u32BSSize;
    MS_U32 u32PBAddr;
    MS_U32 u32PBSize;
    MS_U32 u32FWBinAddr;
    MS_U32 u32FWBinSize;
    MS_U32 u32VLCBinAddr;
    MS_U32 u32VLCBinSize;
} RVD_MEMCfg;





typedef struct
{
    MS_U16 u16HorSize;
    MS_U16 u16VerSize;
    MS_U16 u16Sar_width;
    MS_U16 u16Sar_height;
    MS_U8 u8par_width;
    MS_U8 u8par_height;
    MS_U16 u16FrameRate;
    MS_U16 u16CropRight;
    MS_U16 u16CropLeft;
    MS_U16 u16CropBottom;
    MS_U16 u16CropTop;
    MS_U32 u32DynScalingAddr;
    MS_U8 u8DynScalingDepth;
    MS_BOOL bEnableMIUSel;
    MS_U32 u32AspectWidth;
    MS_U32 u32AspectHeight;
} RVD_FrameInfo;





typedef struct
{
    MS_U32 u32LumaAddr;
    MS_U32 u32ChromaAddr;
    MS_U32 u32TimeStamp;
    MS_U32 u32ID_L;
    MS_U32 u32ID_H;
    MS_U16 u16FrmType;
    MS_U16 u16Pitch;
    MS_U16 u16Width;
    MS_U16 u16Height;
} RVD_FrameBuff_Info;





typedef enum
{
    E_RVD_SKIP_DECB_NONE = 0,
    E_RVD_SKIP_DECB_ONCE,
    E_RVD_SKIP_DECB_ALL
} RVD_CmdSkipDecArg;





typedef enum
{
    E_RVD_FREERUN = -1,
    E_RVD_DISABLE = 0,
    E_RVD_VIDEO_DELAY
} RVD_CmdAVSyncArg;





typedef enum
{
    E_RVD_SPEED_SLOW,
    E_RVD_SPEED_NORMAL,
    E_RVD_SPEED_FF
} RVD_CmdDispSpeedArg;





typedef enum
{
    E_RVD_DROPDISPAUTO_DISABLE = 0,
    E_RVD_DROPDISPAUTO_ENABLE
} RVD_CmdDropDispAutoArg;





typedef enum
{
    E_RVD_DISP_SPEED_FF_32X = -32,
    E_RVD_DISP_SPEED_FF_16X = -16,
    E_RVD_DISP_SPEED_FF_8X = -8,
    E_RVD_DISP_SPEED_FF_4X = -4,
    E_RVD_DISP_SPEED_FF_2X = -2,
    E_RVD_DISP_SPEED_NORMAL_1X = 1,
    E_RVD_DISP_SPEED_SF_2X = 2,
    E_RVD_DISP_SPEED_SF_4X = 4,
    E_RVD_DISP_SPEED_SF_8X = 8,
    E_RVD_DISP_SPEED_SF_16X = 16,
    E_RVD_DISP_SPEED_SF_32X = 32,
}RVD_Disp_Speed;





typedef enum
{
    E_RVD_DROP_DISPLAY_AUTO = (1<<0),
    E_RVD_DROP_DISPLAY_ONCE = (1<<1),
}RVD_Drop_Disp;





typedef enum
{
    E_RVD_MMAP_FW = 0,
    E_RVD_MMAP_BS = 1,
    E_RVD_MMAP_FB = 2,
    E_RVD_MMAP_PB = 3,
    E_RVD_MMAP_FW_BIN = 4,
    E_RVD_MMAP_VLC_BIN = 5,
    E_RVD_MMAP_ALL = 6
} RVD_MMAP_Type;





typedef enum
{
    E_RVD_ACTIONMODE_IDEL = 0,
    E_RVD_ACTIONMODE_PLAY = 1,
    E_RVD_ACTIONMODE_PAUSE = 2,
    E_RVD_ACTIONMODE_STOP = 3,
    E_RVD_ACTIONMODE_STEPDECODE = 4
} RVD_ActionMode;





typedef enum
{
    E_RVD_PICCODTYPE_INTRAPIC,
    E_RVD_PICCODTYPE_FORCED_INTRAPIC,
    E_RVD_PICCODTYPE_INTERPIC,
    E_RVD_PICCODTYPE_TRUEBPIC
} RVD_PicCodType;





typedef enum
{
    E_RVD_STATUSTYPE_AVSYNCON = BIT(0),
    E_RVD_STATUSTYPE_IFRAMEFOUND = BIT(1),
    E_RVD_STATUSTYPE_PLAYBACK_FINISH = BIT(2),
    E_RVD_STATUSTYPE_ENABLE_LAST_FRAME_SHOW = BIT(3),
    E_RVD_STATUSTYPE_BLUE_SCREEN = BIT(4),
    E_RVD_STATUSTYPE_FREEZE_IMG = BIT(5),
    E_RVD_STATUSTYPE_SKIP_DECODE = BIT(6),
    E_RVD_STATUSTYPE_1ST_FRAMERDY = BIT(7)
} RVD_StatusType;





typedef enum
{
    E_ERROR_NONE = 0,
    E_ERROR_PACKET_HEADER,
    E_ERROR_FRAME_HEADER,
    E_ERROR_SLICE_HEADER,
    E_ERROR_DECODE_TIMEOUT,
    E_ERROR_OUT_OF_MEMORY,
    E_ERROR_BYTE_POS,
    E_ERROR_DISPLAY_TIMEOUT
} RVD_ErrorCode;





typedef struct
{
    MS_BOOL bRVD;
    MS_U32 HWversion;
    MS_U32 FWversion;
}RVD_DrvInfo;





typedef enum
{
    E_RVD_ISR_NONE = 0,

    E_RVD_ISR_DISP_ONE = BIT(0),
    E_RVD_ISR_DISP_REPEAT = BIT(1),
    E_RVD_ISR_DISP_WITH_CC = BIT(2),

    E_RVD_ISR_DEC_ONE = BIT(8),
    E_RVD_ISR_DEC_I = BIT(9),
    E_RVD_ISR_DEC_HW_ERR = BIT(10),
    E_RVD_ISR_DEC_CC_FOUND = BIT(11),
    E_RVD_ISR_DEC_DISP_INFO_CHANGE = BIT(12),
    E_RVD_ISR_DEC_DATA_ERR = BIT(13),
} RVD_ISR_Event;


#define RVD_MSG_INF(format,args...) do{if(MDrv_RVD_IsDbgEnable(E_RVD_DEBUG_INF)) printf(format, ##args);}while(0)
#define RVD_MSG_DRV(format,args...) do{if(MDrv_RVD_IsDbgEnable(E_RVD_DEBUG_DRV)) printf(format, ##args);}while(0)
#define RVD_MSG_HAL(format,args...) do{if(MDrv_RVD_IsDbgEnable(E_RVD_DEBUG_HAL)) printf(format, ##args);}while(0)
#define RVD_MSG_ERR(format,args...) do{if(MDrv_RVD_IsDbgEnable(E_RVD_DEBUG_ERR)) printf(format, ##args);}while(0)





extern void MDrv_RVD_SetBBU_OffsetLength(MS_U32 u32Address,MS_U32 u32offset, MS_U32 u32length);
extern MS_S16 MDrv_RVD_GetQmemSwBbuVacancy(void);
extern void MDrv_RVD_GetFrameSize(MS_U16* u16Width,MS_U16* u16Height);
extern MS_U32 MDrv_RVD_GetBBUStartAddr(void);
extern MS_U32 MDrv_RVD_GetTimeStamp(void);
extern MS_U32 MDrv_RVD_GetDecodeCnt(void);
extern void MDrv_RVD_SetBBUDepth(MS_U32 u32Rptr);
extern void MDrv_RVD_SetBBUReadPtr(MS_U32 u32Rptr);
extern void MDrv_RVD_SetBBUWritePtr(MS_U32 u32Wptr);
extern MS_U32 MDrv_RVD_GetBBUReadPtr(void);
extern MS_U32 MDrv_RVD_GetBBUWritePtr(void);
extern MS_U16 MDrv_RVD_GetBBUDepth(void);
extern void MDrv_RVD_SetPictureSize(MS_U16 u16Width, MS_U16 u16Height);
extern void MDrv_RVD_SetDisplay(RVD_DisplayMode u32PlayMode);
extern void MDrv_RVD_PushBBU (MS_U32 u32offset, MS_U32 u32length ,RVD_Packet_ID *rvdPackerInfo);
extern void MDrv_RVD_SetFileInfo(RVD_FileInfo *pFileInfo);
extern RVD_Result MDrv_RVD_Init(RVD_FileInfo *pFileInfo,RVD_MEMCfg* memCfg);
extern RVD_Result MDrv_RVD_EnableDynamicScaling(MS_BOOL bEnable);
extern void MDrv_RVD_SetVirtualBox(MS_U16 u16Width, MS_U16 u16Height);
extern RVD_Result MDrv_RVD_SetDynScalingParam(MS_U32 u32StAddr, MS_U32 u32Size);
extern RVD_Result MDrv_RVD_FlushQueue(void);
extern MS_U32 MDrv_RVD_GetESReadPtr(void);
extern MS_U32 MDrv_RVD_ReadSVDProgramCounter(void);
extern RVD_Result MDrv_RVD_ChkCmdRdy(void);
extern RVD_Result MDrv_RVD_SetCmd(RVD_User_Cmd u32Command,MS_U32 u32Argument);
extern RVD_Result MDrv_RVD_SetSpeed(RVD_Disp_Speed u32DispSpeed);
extern MS_BOOL MDrv_RVD_IsDbgEnable(MS_U8 u8DbgLevel);
extern MS_U8 MDrv_RVD_GetDbgLevel(void);
extern void MDrv_RVD_SetDbgLevel(MS_U8 u8DbgLevel);
extern RVD_Result MDrv_RVD_SetCfg( RVD_MEMCfg* memCfg);
extern void MDrv_RVD_SetOSRegBase(MS_U32 u32RegBaseAddr );
extern MS_U32 MDrv_RVD_GetFrameCnt(void);
extern MS_U32 MDrv_RVD_GetESWritePtr(void);
extern MS_BOOL MDrv_RVD_CheckDispInfoRdy(void);
extern MS_BOOL MDrv_RVD_CheckCaps(void);
extern MS_BOOL MDrv_RVD_IsTSPlaying(void);
extern void MDrv_RVD_SetTrickMode(RVD_TrickMode u32TrickMode);
extern RVD_Result MDrv_RVD_Play(void);
extern RVD_Result MDrv_RVD_AVSyncOn(MS_BOOL bEnable,MS_U16 u16SyncDelay, MS_U16 u16SyncTolerance);
extern MS_BOOL MDrv_RVD_IsAVSyncOn(void);
extern RVD_Result MDrv_RVD_Pause(void);
extern RVD_Result MDrv_RVD_Exit(void);
extern RVD_Result MDrv_RVD_Resume(void);
extern RVD_Result MDrv_RVD_EnableLastFrameShowed(MS_BOOL bEnabled);
extern RVD_Result MDrv_RVD_StepPlay(void);
extern MS_BOOL MDrv_RVD_IsStepPlayDone(void);
extern MS_BOOL MDrv_RVD_IsIdle(void);
extern MS_BOOL MDrv_RVD_IsDispFinish(void);
extern MS_BOOL MDrv_RVD_IsIFrameFound(void);
extern MS_U32 MDrv_RVD_GetErrCode(void);
extern RVD_Result MDrv_RVD_DbgGetData(MS_U32 u32Addr , MS_U32 *u32Data);
extern RVD_Result MDrv_RVD_GetLibVer(const MSIF_Version **ppVersion);
extern MS_BOOL MDrv_RVD_DispSetupDone(void);
extern RVD_Result MDrv_RVD_GetDispInfo(RVD_FrameInfo *pinfo);
extern MS_BOOL MDrv_RVD_GetStatus( RVD_DrvStatus *pstatus);
extern void MDrv_RVD_SetBBU_ID(MS_U32 u32Address,MS_U32 u32Byte_Pos,MS_U32 u32ID_High, MS_U32 u32ID_Low);
const RVD_DrvInfo* MDrv_RVD_GetInfo( void );
extern MS_U32 MDrv_RVD_GetIDReadPtr(void);
extern MS_U32 MDrv_RVD_GetIDWritePtr(void);
extern void MDrv_RVD_SetIDWritePtr(MS_U32 u32Wptr);
extern void MDrv_RVD_SetIDReadPtr(MS_U32 u32Wptr);
extern RVD_Result MDrv_RVD_GetFrameInfo(RVD_FrameBuff_Info *framebuffinfo ,MS_BOOL bGETDISP);
extern MS_BOOL MDrv_RVD_SetForceISR(MS_BOOL bEnable);
extern MS_BOOL MDrv_RVD_GetISRInfo( RVD_ISR_Event* eType );
extern MS_BOOL MDrv_RVD_SetEnableISR(MS_BOOL bEnable);
extern RVD_Result MDrv_RVD_SetISREvent(RVD_ISR_Event eEvent ,RVD_InterruptCb fnISRHandler );
extern RVD_Result MDrv_RVD_SetDispRepeatCnt(MS_U32 u32Num);

extern RVD_Result MDrv_RVD_JumpToPTS(MS_U32 u32time_ms);
extern RVD_Result MDrv_RVD_SkipToPTS(MS_U32 u32time_ms);
extern MS_U32 MDrv_RVD_GetTrickMode(void);
extern MS_BOOL MDrv_RVD_IsStepDecodeDone(void);
extern RVD_Result MDrv_RVD_StepDecode(void);
extern RVD_Result MDrv_RVD_Rst(void );
extern RVD_Result MDrv_RVD_SetFreezeImg(MS_BOOL bEnabled);
extern RVD_Result MDrv_RVD_SetBlueScreen(MS_BOOL bEnabled);
extern RVD_Result MDrv_RVD_FireDecCmd(void);
extern MS_BOOL MDrv_RVD_Is1stFrameRdy(void);
extern MS_U32 MDrv_RVD_GetDecErrCnt(void);
extern MS_U32 MDrv_RVD_GetDataErrCnt(void);
extern MS_U32 MDrv_RVD_GetSkipCnt(void);
extern MS_U32 MDrv_RVD_GetDropCnt(void);
extern MS_U32 MDrv_RVD_GetDispQueNum(void);
extern RVD_Result MDrv_RVD_DbgSetCmd(RVD_User_Cmd u32Command,MS_U32 u32Argument);
extern void MDrv_RVD_DbgSetData(MS_U32 u32Addr,MS_U32 data);
extern void MDrv_RVD_Dump_Status(void);
#if 0
#if defined(REDLION_LINUX_KERNEL_ENVI)
extern MS_S32 _DRV_RVD_ISRHandler(void);
#else
extern void _DRV_RVD_ISRHandler(void);
#endif
#endif

extern void MDrv_RVD_EnableTurboFWMode(MS_BOOL bEnable);

extern RVD_Result MDrv_RVD_SetAVSyncFreerunThreshold(MS_U32 u32Th);

#ifdef __cplusplus
}
#endif

#endif
# 161 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
#ifndef APIXC_DWIN_H
#define APIXC_DWIN_H 
#ifdef __cplusplus
extern "C"
{
#endif
#include "MsCommon.h"



#include "ULog.h"



#define XC_INFO(x,args...) ULOGI("DIP API", x, ##args)

#define XC_WARN(x,args...) ULOGW("DIP API", x, ##args)

#define XC_DBUG(x,args...) ULOGD("DIP API", x, ##args)

#define XC_ERR(x,args...) ULOGE("DIP API", x, ##args)

#define XC_FATAL(x,args...) ULOGF("DIP API", x, ##args)


#define MAX_BUFF_CNT 8UL
#define AUTO_BUFF_CNT 0UL

typedef enum
{
    DIP_WINDOW = 0,
    DWIN0_WINDOW = 1,
    DWIN1_WINDOW = 2,
    MAX_DIP_WINDOW
}SCALER_DIP_WIN;

typedef enum
{
    E_XC_DIP_RGB_SWAPTO_BGR = 0,
    E_XC_DIP_RGB_SWAP_MAX
}EN_XC_DIP_RGB_SWAP_TYPE;


typedef enum
{

    DIP_DATA_FMT_YUV422 = 0,

    DIP_DATA_FMT_RGB565,

    DIP_DATA_FMT_ARGB8888,

    DIP_DATA_FMT_YUV420,

    DIP_DATA_FMT_YC422,

    DIP_DATA_FMT_YUV420_H265,

    DIP_DATA_FMT_YUV420_H265_10BITS,

    DIP_DATA_FMT_YUV420_PLANER,

    DIP_DATA_FMT_YUV420_SEMI_PLANER,

    DIP_DATA_FMT_YUV422_MED_DI_FIELDTYPE_TOP,

    DIP_DATA_FMT_YUV422_MED_DI_FIELDTYPE_BOTTOM,

    DIP_DATA_FMT_YUV420_MED_DI_FIELDTYPE_TOP,

    DIP_DATA_FMT_YUV420_MED_DI_FIELDTYPE_BOTTOM,
    DIP_DATA_FMT_MAX
} EN_XC_DIP_DATA_FMT;


typedef enum
{
    DIP_TILE_BLOCK_R_NONE = 0x0,
    DIP_TILE_BLOCK_W_NONE = 0x1,
    DIP_TILE_BLOCK_R_16_32 = 0x2,
    DIP_TILE_BLOCK_W_16_32 = 0x3,
    DIP_TILE_BLOCK_R_32_16 = 0x4,
    DIP_TILE_BLOCK_W_32_16 = 0x5,
    DIP_TILE_BLOCK_R_32_32 = 0x6,
    DIP_TILE_BLOCK_W_32_32 = 0x7,
}EN_XC_DIP_TILE_BLOCK;

typedef enum
{

    DIP_SCAN_MODE_PROGRESSIVE,

    DIP_SCAN_MODE_extern,
} EN_XC_DIP_SCAN_MODE;

typedef enum
{
    DIP_CAP_NOT_EXIST = 0x0,
    DIP_CAP_EXIST = 0x1,
    DIP_CAP_420TILE = 0x2,
    DIP_CAP_SCALING_DOWN = 0x4,
    DIP_CAP_MIRROR = 0x8,
    DIP_CAP_DIPR = 0x10,
    DIP_CAP_R2Y = 0x20,
    DIP_CAP_OP1_CAPTURE = 0x40,

    DIP_CAP_OP1_CAPTURE_V1 = 0x40,

    DIP_CAP_OP1_CAPTURE_V2 = 0x80,
    DIP_CAP_SCALING_UP = 0x100,
    DIP_CAP_OSD_BLENDING = 0x200,
    DIP_CAP_OC_CAPTURE = 0x400,
    DIP_CAP_SC2_NON_SCALING = 0x800,
}EN_XC_DIP_CAP;

typedef enum
{
    E_XC_DIP_VOP2 =0x00,
    E_XC_DIP_OP2 =0x01,
    E_XC_DIP_VIP =0x02,
    E_XC_DIP_BRI =0x03,
    E_XC_DIP_NONE ,
}EN_XC_DIP_OP_CAPTURE;

typedef enum
{
    E_XC_DIP_ROTATION_270 =0x00,
    E_XC_DIP_ROTATION_90 =0x01,
}EN_XC_DIP_ROTATION;


typedef enum
{

    E_XC_DIP_Debug_Level_LOW = 0,

    E_XC_DIP_Debug_Level_MED = 1,

    E_XC_DIP_Debug_Level_HIGH = 2,
} EN_XC_DIP_DEBUG_LEVEL;

typedef enum
{
    E_XC_DIP_CMDQ_BEGIN = 0,
    E_XC_DIP_CMDQ_END = 1,
}EN_XC_DIP_CMDQ_ACTION;

typedef struct DLL_PACKED
{
    MS_U8 u8BufCnt;
    MS_PHY u32YBuf[MAX_BUFF_CNT];
    MS_PHY u32CBuf[MAX_BUFF_CNT];
} BUFFER_INFO;

typedef struct DLL_PACKED
{
    SCALER_DIP_WIN eWindow;
    MS_U32 u32DipChipCaps;
} ST_XC_DIP_CHIPCAPS;

typedef struct DLL_PACKED
{
    MS_U8 u8BufCnt;
    MS_U16 u16Width;
    MS_U16 u16Height;
    MS_U16 u16Pitch;
    MS_PHY u32BufStart;
    MS_PHY u32BufEnd;
    SCALER_DIP_SOURCE_TYPE enSource;
}ST_XC_DIP_WINPROPERTY;

typedef struct DLL_PACKED
{
    MS_U16 u16Width;
    MS_U16 u16Height;
    MS_U16 u16Pitch;
    MS_PHY u32YBufAddr;
    MS_PHY u32CBufAddr;
    EN_XC_DIP_DATA_FMT enDataFmt;
    MS_PHY u32YBufAddr10Bits;
    MS_PHY u32CBufAddr10Bits;
}ST_XC_DIPR_PROPERTY;

typedef struct DLL_PACKED
{
    MS_U32 ID[4];
} DIPRESOURCE;


typedef struct DLL_PACKED
{
    MS_U32 u32version;
    MS_U32 u32size;
} ST_DIPR_VER_CRL;

typedef enum
{
    E_DIP_MFEDC_TILE_16_32 =0x00,
    E_DIP_MFEDC_TILE_32_16 =0x01,
    E_DIP_MFEDC_TILE_32_32 =0x02,
}EN_MFDEC_TILE_MODE;

typedef enum
{
    E_XC_DIP_H26X_MODE =0x00,
    E_XC_DIP_VP9_MODE =0x01,
}EN_MFDEC_VP9_MODE;


typedef struct DLL_PACKED
{
    MS_U32 u32version;
    MS_U32 u32size;
} ST_MFDEC_HTLB_VER_CRL;

typedef struct DLL_PACKED
{
    ST_MFDEC_HTLB_VER_CRL stMFDec_HTLB_VerCtl;
    MS_PHY u32HTLBEntriesAddr;
    MS_U8 u8HTLBEntriesSize;
    MS_U8 u8HTLBTableId;
    void* pHTLBInfo;
} ST_DIP_MFDEC_HTLB_INFO;


typedef struct DLL_PACKED
{
    MS_U32 u32version;
    MS_U32 u32size;
} ST_MFDEC_VER_CRL;

typedef struct DLL_PACKED
{
    ST_MFDEC_VER_CRL stMFDec_VerCtl;
    MS_BOOL bMFDec_Enable;
    MS_U8 u8MFDec_Select;
    MS_BOOL bHMirror;
    MS_BOOL bVMirror;
    EN_MFDEC_TILE_MODE enMFDec_tile_mode;
    MS_BOOL bUncompress_mode;
    MS_BOOL bBypass_codec_mode;
    EN_MFDEC_VP9_MODE en_MFDecVP9_mode;
    MS_PHY phyLuma_FB_Base;
    MS_PHY phyChroma_FB_Base;
    MS_U16 u16FB_Pitch;
    MS_U16 u16StartX;
    MS_U16 u16StartY;
    MS_U16 u16HSize;
    MS_U16 u16VSize;
    MS_PHY phyBitlen_Base;
    MS_U16 u16Bitlen_Pitch;
    ST_DIP_MFDEC_HTLB_INFO stMFDec_HTLB_Info;
    void* pMFDecInfo;
} ST_DIP_MFDEC_INFO;

typedef enum
{

    E_DIP_3DDI_TOP_SINGLE_FIELD =0x00,

    E_DIP_3DDI_BOTTOM_SINGLE_FIELD =0x01,

    E_DIP_3DDI_TOP_BOTH_FIELD_STAGGER =0x02,

    E_DIP_3DDI_BOTTOM_BOTH_FIELD_STAGGER =0x03,

    E_DIP_MED_DI_TOP_BOTH_FIELD_STAGGER =0x04,

    E_DIP_MED_DI_BOTTOM_BOTH_FIELD_STAGGER =0x05,

    E_DIP_MED_DI_TOP_BOTH_FIELD_SEPARATE =0x06,

    E_DIP_MED_DI_BOTTOM_BOTH_FIELD_SEPARATE =0x07,
}EN_DIP_DI_FIELD;

typedef struct DLL_PACKED
{
    MS_PHY phyDIInitAddr;
    MS_U32 u32DIInitSize;
}ST_DIPR_DI_INIT_INFO;

typedef struct DLL_PACKED
{
    MS_PHY phyDI_BufAddr;
    MS_U32 u32DI_BufSize;
    MS_U8 u8DIBufCnt;
}ST_DIP_DI_NWAY_BUF_INFO;

typedef struct DLL_PACKED
{
    MS_BOOL bEnableDI;
    MS_BOOL bInitDI;
    ST_DIPR_DI_INIT_INFO stInitInfo;
    MS_U8 u8NwayIndex;
    EN_DIP_DI_FIELD enDI_Field;
    MS_PHY phyBotYBufAddr;
    MS_PHY phyBotCBufAddr;
    MS_PHY phyBotYBufAddr10Bits;
    MS_PHY phyBotCBufAddr10Bits;
    MS_BOOL bEnableBob;
    MS_BOOL bEnaNwayInfoRefresh;
    ST_DIP_DI_NWAY_BUF_INFO *stDINwayBufInfo;
    MS_U8 u8NwayBufCnt;
} ST_DIP_DI_SETTING;


typedef struct DLL_PACKED
{
    MS_U32 u32version;
    MS_U32 u32size;
} ST_DIPR_3DDI_VER_CRL;

typedef struct DLL_PACKED
{
    ST_DIPR_3DDI_VER_CRL stDipr3DDI_VerCtl;
    void* pDIPR3DDISetting;
} ST_DIP_DIPR_3DDI_SETTING;

typedef struct DLL_PACKED
{
    ST_DIPR_VER_CRL stDIPR_VerCtl;
    ST_XC_DIPR_PROPERTY stDIPRProperty;
    ST_DIP_MFDEC_INFO stDIPR_MFDecInfo;
    ST_DIP_DIPR_3DDI_SETTING stDIPR3DDISetting;
    void* pDIPRSetting;
}ST_XC_DIPR_PROPERTY_EX;
# 498 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_QueryResource(SCALER_DIP_WIN eWindow);
# 508 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_GetResource(SCALER_DIP_WIN eWindow);
# 518 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_ReleaseResource(SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_CMDQ_SetAction( EN_XC_DIP_CMDQ_ACTION eAction, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_CMDQ_SetOperations(cmd_mload_utopia_interface *pOps, MS_BOOL bEnable,SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_InitByDIP(SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetFrameBufferAddress(MS_PHY u32FBAddress, MS_PHY u32FBSize, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetInputSource(INPUT_SOURCE_TYPE_t enInputSourceType, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_GetInputSource(INPUT_SOURCE_TYPE_t *enInputSourceType, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_DisableInputSource(MS_BOOL bDisable, SCALER_DIP_WIN eWindow);
# 538 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetWindow(XC_SETWIN_INFO *pstXC_SetWin_Info, MS_U32 u32InitDataLen, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_GetDEWindow(MS_WINDOW_TYPE *psWin, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetCaptureWindowVstart(MS_U16 u16Vstart, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetCaptureWindowHstart(MS_U16 u16Hstart, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetCaptureWindowVsize(MS_U16 u16Vsize, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetCaptureWindowHsize(MS_U16 u16Hsize, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_GetCaptureWindow(MS_WINDOW_TYPE* capture_win, SCALER_DIP_WIN eWindow);
# 556 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_EnableR2Y(MS_BOOL benable, SCALER_DIP_WIN eWindow);


DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SWReset(SCALER_DIP_WIN eWindow);
# 573 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_FrameRateCtrl(MS_BOOL bEnable,MS_U16 u16In,MS_U16 u16Out, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_CapOneFrame(SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_CapOneFrameFast(SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_ClearInt(MS_U16 u8mask, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_Ena(MS_BOOL bEnable, SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_EnaInt(MS_U16 u8mask, MS_BOOL bEnable, SCALER_DIP_WIN eWindow);
# 587 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetSourceScanType(EN_XC_DIP_SCAN_MODE enScanMode, SCALER_DIP_WIN eWindow);
# 598 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_EnaInterlaceWrite(MS_BOOL bEnable, SCALER_DIP_WIN eWindow);
# 609 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetOutputDataFmt(EN_XC_DIP_DATA_FMT fmt, SCALER_DIP_WIN eWindow);
# 621 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetDIPWinProperty(ST_XC_DIP_WINPROPERTY *pstDIPWinProperty, SCALER_DIP_WIN eWindow);
# 630 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_EnableY2R(MS_BOOL bEnable, SCALER_DIP_WIN eWindow);
# 639 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetAlpha(MS_U8 u8AlphaVal, SCALER_DIP_WIN eWindow);
# 648 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SwapUV(MS_BOOL bEnable, SCALER_DIP_WIN eWindow);
# 659 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SwapYC(MS_BOOL bEnable, SCALER_DIP_WIN eWindow);
# 671 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SwapRGB(MS_BOOL bEnable, EN_XC_DIP_RGB_SWAP_TYPE enSwapType, SCALER_DIP_WIN eWindow);




DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetWinProperty_Ex(MS_U8 u8BufCnt ,MS_U16 u16Width, MS_U16 u16Height, MS_PHY u32BufStart ,MS_PHY u32BufEnd, SCALER_DIP_SOURCE_TYPE eSource,SCALER_DIP_WIN eWindow);
# 686 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetOutputCapture(MS_BOOL bEnable,EN_XC_DIP_OP_CAPTURE eOpCapture,SCALER_DIP_WIN eWindow);
# 698 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetMirror(MS_BOOL bHMirror,MS_BOOL bVMirror,SCALER_DIP_WIN eWindow);
# 707 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetDIPRProperty(ST_XC_DIPR_PROPERTY *pstDIPRProperty,SCALER_DIP_WIN eWindow);
# 716 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC SYMBOL_WEAK E_APIXC_ReturnValue MApi_XC_DIP_SetDIPRProperty_EX(ST_XC_DIPR_PROPERTY_EX *pstDIPRProperty_ex, SCALER_DIP_WIN eWindow);
# 725 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_InterruptAttach(InterruptCb pIntCb,SCALER_DIP_WIN eWindow);







DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_InterruptDetach(SCALER_DIP_WIN eWindow);
# 743 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC MS_U32 MApi_XC_DIP_SetPowerState(EN_POWER_MODE u16PowerState);
# 753 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_Rotation(MS_BOOL bRotation,EN_XC_DIP_ROTATION eRoDirection,SCALER_DIP_WIN eTmpWindow);
# 763 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetPinpon(MS_BOOL bPinpon,MS_PHY u32PinponAddr,SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_SetHVSP(MS_BOOL bSelect,SCALER_DIP_WIN eWindow);
DLL_PUBLIC E_APIXC_ReturnValue MApi_XC_DIP_Set420TileBlock(EN_XC_DIP_TILE_BLOCK eTileBlock,SCALER_DIP_WIN eWindow);







DLL_PUBLIC MS_U32 MApi_XC_DIP_SetDbgLevel(EN_XC_DIP_DEBUG_LEVEL u8DbgLevel);







DLL_PUBLIC MS_U16 MApi_XC_DIP_GetIntStatus(SCALER_DIP_WIN eWindow);
# 791 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN.h"
DLL_PUBLIC BUFFER_INFO MApi_XC_DIP_GetBufInfo(SCALER_DIP_WIN eWindow);




DLL_PUBLIC MS_U32 MDrv_XC_DIP_GetResourceByPipeID(MS_U32 u32PipeID, MS_U32* U32RetResNum, DIPRESOURCE* pResource);
DLL_PUBLIC MS_U32 MDrv_XC_DIP_ConfigPipe(MS_U32 u32PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);
DLL_PUBLIC MS_U32 MDrv_XC_DIP_CheckPipe(MS_U32 u32PipeID, MS_U32 u32SecureDMA, MS_U32 u32OperationMode);

#ifdef __cplusplus
}
#endif
#endif
# 98 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse_EX.h"
#ifndef _API_XC_MODEPARSE_EX_H_
#define _API_XC_MODEPARSE_EX_H_ 

#include "MsCommon.h"


#include "drvXC_IOPort_EX.h"


#include "apiXC_EX.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 125 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_ModeParse_EX.h"
#define XC_MODEPARSE_EX_MD_FLAG_NULL 0x00

#define XC_MODEPARSE_EX_MD_FLAG_POR_HPVP 0x01
#define XC_MODEPARSE_EX_MD_FLAG_POR_HPVN 0x02
#define XC_MODEPARSE_EX_MD_FLAG_POR_HNVP 0x04
#define XC_MODEPARSE_EX_MD_FLAG_POR_HNVN 0x08
#define XC_MODEPARSE_EX_MD_FLAG_INTERLACE 0x10

#define XC_MODEPARSE_EX_MD_FLAG_EURO_HDTV_BIT 0x20

#define XC_MODEPARSE_EX_MD_FLAG_YPBPR_BIT 0x40
#define XC_MODEPARSE_EX_MD_FLAG_HDTV_BIT 0x80







typedef enum
{
    E_XC_MODEPARSE_EX_NOT_PARSED = 0,
    E_XC_MODEPARSE_EX_OUT_OF_RANGE,
    E_XC_MODEPARSE_EX_UNSUPPORT_MODE,
    E_XC_MODEPARSE_EX_SUPPORT_MODE,
} XC_MODEPARSE_EX_RESULT;

typedef struct
{

    MS_U8 u8ModeIndex;
    MS_U16 u16ResWidth;
    MS_U16 u16ResHeight;


    XC_EX_INPUT_SOURCE_TYPE eSrcType;


    MS_U16 u16HFreqx10;
    MS_U16 u16VFreqx10;
    MS_U16 u16Vtotal;
    MS_U8 u8SyncStatus;


    XC_EX_WINDOW_TYPE sDVI_HDMI_DE_Info;


    XC_EX_DETECT_EURO_HDTV_STATUS_TYPE eEuroHDTVStatus;
} XC_MODEPARSE_EX_INPUT_INFO;

typedef enum
{
    E_XC_MODEPARSE_EX_RES_640X350,
    E_XC_MODEPARSE_EX_RES_640X400,
    E_XC_MODEPARSE_EX_RES_720X400,
    E_XC_MODEPARSE_EX_RES_640X480,
    E_XC_MODEPARSE_EX_RES_800X600,
    E_XC_MODEPARSE_EX_RES_832X624,
    E_XC_MODEPARSE_EX_RES_1024X768,
    E_XC_MODEPARSE_EX_RES_1280X1024,
    E_XC_MODEPARSE_EX_RES_1600X1200,
    E_XC_MODEPARSE_EX_RES_1152X864,
    E_XC_MODEPARSE_EX_RES_1152X870,
    E_XC_MODEPARSE_EX_RES_1280X768,
    E_XC_MODEPARSE_EX_RES_1280X960,
    E_XC_MODEPARSE_EX_RES_720X480,
    E_XC_MODEPARSE_EX_RES_1920X1080,
    E_XC_MODEPARSE_EX_RES_1280X720,
    E_XC_MODEPARSE_EX_RES_720X576,
    E_XC_MODEPARSE_EX_RES_1920X1200,
    E_XC_MODEPARSE_EX_RES_1400X1050,
    E_XC_MODEPARSE_EX_RES_1440X900,
    E_XC_MODEPARSE_EX_RES_1680X1050,
    E_XC_MODEPARSE_EX_RES_1280X800,
    E_XC_MODEPARSE_EX_RES_1600X1024,
    E_XC_MODEPARSE_EX_RES_1600X900,
    E_XC_MODEPARSE_EX_RES_1360X768,
    E_XC_MODEPARSE_EX_RES_848X480,
    E_XC_MODEPARSE_EX_RES_1920X1080P,
    E_XC_MODEPARSE_EX_RES_1366X768,
    E_XC_MODEPARSE_EX_RES_864X648,
    E_XC_MODEPARSE_EX_RES_1280X1470,
    E_XC_MODEPARSE_EX_RES_1920X2205,
    E_XC_MODEPARSE_EX_RES_720X240,
    E_XC_MODEPARSE_EX_RES_720x288,
    E_XC_MODEPARSE_EX_RES_1152X900,
    E_XC_MODEPARSE_EX_RES_856x480,
    E_XC_MODEPARSE_EX_RES_MAXIMUM
} XC_MODEPARSE_EX_RESOLUTION_TYPE;

typedef struct
{
    XC_MODEPARSE_EX_RESOLUTION_TYPE enResolutionIndex;

    MS_U16 u16HorizontalFrequency;
    MS_U16 u16VerticalFrequency;

    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;

    MS_U16 u16HorizontalTotal;
    MS_U16 u16VerticalTotal;
    MS_U8 u8VTotalTolerance;

    MS_U8 u8AdcPhase;

    MS_U8 u8StatusFlag;




} XC_MODEPARSE_EX_PCADC_MODETABLE_TYPE;

typedef struct
{
    XC_MODEPARSE_EX_RESOLUTION_TYPE enResolutionIndex;

    MS_U16 u16HorizontalFrequency;
    MS_U16 u16VerticalFrequency;

    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;

    MS_U16 u16HorizontalTotal;
    MS_U16 u16VerticalTotal;
    MS_U16 u16VTotalTolerance;

    MS_U16 u16AdcPhase;

    MS_U8 u8StatusFlag;




} XC_MODEPARSE_EX_PCADC_MODETABLE_TYPE_EX;






DLL_PUBLIC MS_BOOL MApi_XC_ModeParse_EX_Init(XC_DEVICE_ID *pDeviceId);


DLL_PUBLIC XC_MODEPARSE_EX_RESULT MApi_XC_ModeParse_EX_MatchMode(XC_DEVICE_ID *pDeviceId, XC_MODEPARSE_EX_PCADC_MODETABLE_TYPE* ModeDB, MS_U8 u16NumberOfItems , XC_MODEPARSE_EX_INPUT_INFO *psInputInfo);
DLL_PUBLIC XC_MODEPARSE_EX_RESULT MApi_XC_ModeParse_EX_MatchModeEx(XC_DEVICE_ID *pDeviceId, XC_MODEPARSE_EX_PCADC_MODETABLE_TYPE_EX* ModeDB, MS_U8 u16NumberOfItems , XC_MODEPARSE_EX_INPUT_INFO *psInputInfo);
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA_v2.h"
#ifndef _DRV_AESDMA_V2_H_
#define _DRV_AESDMA_V2_H_ 

#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif







typedef enum {
    MDrv_CMD_AESDMA_Init,
 MDrv_CMD_AESDMA_SetIV,
    MDrv_CMD_AESDMA_Reset,
    MDrv_CMD_AESDMA_SetFileInOut,
    MDrv_CMD_AESDMA_SetKey,
    MDrv_CMD_AESDMA_SelEng,
    MDrv_CMD_AESDMA_Start,
    MDrv_CMD_AESDMA_GetStatus,
    MDrv_CMD_AESDMA_IsFinished,
    MDrv_CMD_AESDMA_SetClk,
    MDrv_CMD_AESDMA_SetSecureKey,
    MDrv_CMD_AESDMA_SetPS,
    MDrv_CMD_AESDMA_PSRelease,
    MDrv_CMD_AESDMA_GetPSMatchedByteCNT,
    MDrv_CMD_AESDMA_GetPSMatchedPTN,
    MDrv_CMD_AESDMA_Notify,
    MDrv_CMD_AESDMA_Rand,
    MDrv_CMD_RSA_Calculate,
    MDrv_CMD_RSA_IsFinished,
    MDrv_CMD_RSA_Output,
    MDrv_CMD_SHA_Calculate,
    MDrv_CMD_AESDMA_Memcpy,
    MDrv_CMD_SHA_CalculateManual,
    MDrv_CMD_AESDMA_PARSER_MASKSCRMB,
    MDrv_CMD_AESDMA_PARSER_SETSCRMBPATTERN,
    MDrv_CMD_AESDMA_PARSER_BYPASSPID,
    MDrv_CMD_AESDMA_PARSER_SETPID,
    MDrv_CMD_AESDMA_PARSER_ENCRYPT,
    MDrv_CMD_AESDMA_PARSER_DECRYPT,
    MDrv_CMD_AESDMA_PARSER_Start,
    MDrv_CMD_AESDMA_PARSER_SETADDEDSCRMBPATTERN,
    MDrv_CMD_AESDMA_PARSER_QUERYPIDCOUNT,
    MDrv_CMD_AESDMA_ENABLE_Two_Key,
    MDrv_CMD_AESDMA_SetOddKey,
    MDrv_CMD_AESDMA_SetOddIV,
    MDrv_CMD_IS_SECRETKEY_IN_NORMAL_BLANK,
    MDrv_CMD_AESDMA_SetKey_Ex,
    MDrv_CMD_AESDMA_SetIV_Ex,
    MDrv_CMD_HDCP_MDrv_PROCESSCIPHER,
    MDrv_CMD_AESDMA_Set_Efuse_Key_Index,
    MDrv_CMD_HDCP_GetHdcpCipherState,
    MDrv_CMD_AESDMA_Set_Key_Index,
    MDrv_CMD_AESDMA_Set_AES_CTR64_En,
    MDrv_CMD_AESDMA_SetDefaultCAVid,
    MDrv_CMD_AESDMA_GetConfig,
    MDrv_CMD_AESDMA_AllocKeySlot,
    MDrv_CMD_AESDMA_FreeKeySlot,
} eAesdmaIoctlOpt;
# 177 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA_v2.h"
#ifdef BIFROST_32BIT_MODE
typedef struct DLL_PACKED _AESDMA_INIT
{
    MS_U32 u32miu0addr;
    MS_U32 u32miu1addr;
    MS_U32 u32miunum;
}AESDMA_INIT, *PAESDMA_INIT;

typedef struct DLL_PACKED _AESDMA_FILE_INOUT
{
    MS_U32 u32FileinAddr;
    MS_U32 u32FileInNum;
    MS_U32 u32FileOutSAddr;
    MS_U32 u32FileOutEAddr;
}AESDMA_FILE_INOUT, *PAESDMA_FILE_INOUT;
#else
typedef struct DLL_PACKED _AESDMA_INIT
{
    MS_PHY u32miu0addr;
    MS_PHY u32miu1addr;
    MS_U32 u32miunum;
}AESDMA_INIT, *PAESDMA_INIT;

typedef struct DLL_PACKED _AESDMA_FILE_INOUT
{
    MS_PHY u32FileinAddr;
    MS_U32 u32FileInNum;
    MS_PHY u32FileOutSAddr;
    MS_PHY u32FileOutEAddr;
}AESDMA_FILE_INOUT, *PAESDMA_FILE_INOUT;
#endif

typedef struct DLL_PACKED _AESDMA_SEL_ENG
{
    DrvAESDMA_CipherMode eMode;
    MS_BOOL bDescrypt;
}AESDMA_SEL_ENG, *PAESDMA_SEL_ENG;

typedef struct DLL_PACKED _AESDMA_SET_IV
{
    MS_U32 *pInitVector;
}AESDMA_SET_IV, *PAESDMA_SET_IV;

typedef struct DLL_PACKED _AESDMA_SET_KEY
{
    MS_U32 *pCipherKey;
}AESDMA_SET_KEY, *PAESDMA_SET_KEY;

typedef struct DLL_PACKED _AESDMA_SET_KEY_EX
{
    const MS_U8 *pu8Key;
    MS_U32 u32Len;
}AESDMA_SET_KEY_EX, *PAESDMA_SET_KEY_EX;

typedef struct DLL_PACKED _AESDMA_SET_IV_EX
{
    const MS_U8 *pu8IV;
    MS_U32 u32Len;
}AESDMA_SET_IV_EX, *PAESDMA_SET_IV_EX;


typedef struct DLL_PACKED _AESDMA_SET_PS
{
    MS_U32 u32PTN;
    MS_U32 u32Mask;
    MS_BOOL bPSin_Enable;
    MS_BOOL bPSout_Enable;
}AESDMA_SET_PS, *PAESDMA_SET_PS;

typedef struct DLL_PACKED _AESDMA_START
{
    MS_BOOL bStart;
}AESDMA_START, *PAESDMA_START;


typedef struct DLL_PACKED _AESDMA_NOTIFY
{
    DrvAESDMA_Event eEvents;
    P_DrvAESDMA_EvtCallback pfCallback;
}AESDMA_NOTIFY, *PAESDMA_NOTIFY;

typedef struct DLL_PACKED _AESDMA_RAND
{
    MS_U32 *u32PABuf;
    MS_U32 u32Size;
}AESDMA_RAND, *PAESDMA_RAND;

typedef struct DLL_PACKED _RSA_CALCULATE
{
    DrvAESDMA_RSASig *pstSign;
    DrvAESDMA_RSAKey *pstKey;
    DrvAESDMA_RSAMode eMode;
}RSA_CALCULATE, *PRSA_CALCULATE;

typedef struct DLL_PACKED _RSA_OUTPUT
{
    DrvAESDMA_RSAMode eMode;
    DrvAESDMA_RSAOut *pstRSAOut;
}RSA_OUTPUT, *PRSA_OUTPUT;

#ifdef BIFROST_32BIT_MODE
typedef struct DLL_PACKED _SHA_CALCULATE
{
    DrvAESDMA_SHAMode eMode;
    MS_U32 u32PAInBuf;
    MS_U32 u32Size;
    MS_U32 u32PAOutBuf;
}SHA_CALCULATE, *PSHA_CALCULATE;
#else
typedef struct DLL_PACKED _SHA_CALCULATE
{
    DrvAESDMA_SHAMode eMode;
    MS_PHY u32PAInBuf;
    MS_U32 u32Size;
    MS_PHY u32PAOutBuf;
}SHA_CALCULATE, *PSHA_CALCULATE;
#endif

typedef struct DLL_PACKED _SHA_CALCULATE_MANUAL
{
    DrvAESDMA_HASHCFG stCfg;
    DrvAESDMA_HASH_STAGE eStage;
    MS_U32 u32DoneBytes;
    MS_U8 *pu8SetIV;
}SHA_CALCULATE_MANUAL, *PSHA_CALCULATE_MANUAL;

typedef struct DLL_PACKED _AESDMA_PARSER_CONFIGURATIONS
{
    DrvAESDMA_ScrmbPattern eScrmbPattern;
    DrvAESDMA_ParserMode eParserMode;
    DrvAESDMA_ScrmbPattern eAddedScrmbPattern;
}AESDMA_PARSER_CONFIGURATIONS, *PAESDMA_PARSER_CONFIGURATIONS;

typedef struct DLL_PACKED _AESDMA_PARSER_PID_CONFIGURATIONS
{

    MS_BOOL bBypassPid;
    MS_U8 u8PidIndex;
    MS_U16 u16Pid;
}AESDMA_PARSER_PID_CONFIGURATIONS, *PAESDMA_PARSER_PID_CONFIGURATIONS;

typedef struct DLL_PACKED _AESDMA_CAVID
{
    MS_U32 u32CAVid;
}AESDMA_CAVID, *PAESDMA_CAVID;

typedef struct DLL_PACKED _HDCP_CIPHER
{
    MS_U8 u8Idx;
    MS_U8 pu8Riv[8];
    MS_U8 pu8ContentKey[16];
}HDCP_CIPHER, *PHDCP_CIPHER;

typedef struct DLL_PACKED _HDCP_CIPHER_STATE
{
    MS_U8 u8Idx;
    MS_U8 *pu8State;
}HDCP_CIPHER_STATE, *PHDCP_CIPHER_STATE;

typedef struct DLL_PACKED _AESDMA_KEY_INDEX
{
    MS_BOOL bOddKeyEn;
    MS_U32 u32KeyIndex;
}AESDMA_KEY_INDEX, *PAESDMA_KEY_INDEX;

typedef struct DLL_PACKED _AESDMA_ALLOC_KEY_SLOT
{
    MS_U32 *pu32KeyIndex;
}AESDMA_ALLOC_KEY_SLOT, *PAESDMA_ALLOC_KEY_SLOT;
# 357 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAESDMA_v2.h"
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMAPool.h"
#ifndef _DRVCMAPOOL_H_
#define _DRVCMAPOOL_H_ 

#if defined (MSOS_TYPE_LINUX) || defined (MSOS_TYPE_OPTEE)
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "UFO.h"

#define CMA_FLAG_MAP_VMA (1UL<<0)
#define CMA_FLAG_CACHED (1UL<<1)
#define CMA_FLAG_VIRT_ADDR (1UL<<2)
#define CMA_FLAG_MTLB_POOL (1UL<<3)




#define CMA_FLAG_KERNEL_MODE_USER_SPACE_MAP_CACHED (1UL<<5)
# 132 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMAPool.h"
enum ion_heap_ids {
    INVALID_HEAP_ID = -1,


    ION_SYSTEM_HEAP_ID = 0,


    ION_SYSTEM_CONTIG_HEAP_ID = 1,


    ION_CARVEOUT_HEAP_ID = 2,


    ION_CHUNK_HEAP_ID = 3,


    ION_DMA_HEAP_ID = 4,




    ION_CMA_HEAP_ID_START = 15,


    ION_MALI_MIUO_HEAP_ID = 16,
    ION_MALI_MIU1_HEAP_ID = 17,
    ION_MALI_MIU2_HEAP_ID = 18,


    ION_VDEC_HEAP_ID = 19,


#if defined(CHIP_MONET) || defined(CHIP_MANHATTAN)
        ION_XC_HEAP_ID = 20,
#else
        ION_XC_HEAP_ID = 22,
#endif

    ION_HEAP_ID_RESERVED = 31
};




#ifdef UFO_PUBLIC_HEADER_300
struct CMA_Pool_Alloc_Param
{
    MS_U32 pool_handle_id;
    MS_U32 offset_in_pool;
    MS_U32 length;
    MS_U32 flags;
    MS_U32 virt_addr;
};
#else
struct CMA_Pool_Alloc_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_SIZE length;
    MS_U32 flags;
    MS_VIRT virt_addr;
};
#endif

#ifdef UFO_PUBLIC_HEADER_300
struct CMA_Pool_Free_Param
{
    MS_U32 pool_handle_id;
    MS_U32 offset_in_pool;
    MS_U32 length;
};
#else
struct CMA_Pool_Free_Param
{
    MS_U32 pool_handle_id;
    MS_U64 offset_in_pool;
    MS_SIZE length;
};
#endif

#ifdef UFO_PUBLIC_HEADER_300
struct CMA_Pool_Init_Param
{
    MS_U32 heap_id;

    MS_U32 mtlb_addrspace_offset;
    MS_U32 mtlb_addrspace_len;



    MS_U32 flags;


    MS_U32 pool_handle_id;
    MS_U32 miu;
    MS_U32 heap_miu_start_offset;
    MS_U32 heap_length;
};
#else
struct CMA_Pool_Init_Param
{
    MS_U32 heap_id;

    MS_U64 mtlb_addrspace_offset;
    MS_U64 mtlb_addrspace_len;



    MS_VIRT flags;


    MS_U32 pool_handle_id;
    MS_U32 miu;
    MS_U64 heap_miu_start_offset;
    MS_SIZE heap_length;
};

struct PA_In_CMA_Pool_Param
{
    MS_U64 PA;
    MS_S32 miu;

    MS_BOOL in_heap;
    MS_S32 heap_id;
    MS_U64 heap_miu_start_offset;
    MS_U64 heap_length;
    MS_U64 pa_offset_in_heap;
    MS_S32 error_code;
};
#endif



MS_BOOL __attribute__((weak)) MApi_CMA_Pool_Init(struct CMA_Pool_Init_Param * Init_Param);
MS_BOOL __attribute__((weak)) MApi_CMA_Pool_Release(MS_U32 pool_handle_id);
MS_BOOL __attribute__((weak)) MApi_CMA_Pool_GetMem(struct CMA_Pool_Alloc_Param * alloc_param);
MS_BOOL __attribute__((weak)) MApi_CMA_Pool_PutMem(struct CMA_Pool_Free_Param * free_param);

#ifdef __cplusplus
}
#endif
#endif
#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL_v2.h"
#ifndef _API_XC_PANEL_V2_H_
#define _API_XC_PANEL_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "UFO.h"

typedef enum
{
    E_PNL_POOL_ID_INTERNAL = 0,
    E_PNL_POOL_ID_INTERNAL1 = 1,

    E_PNL_POOL_ID_NUM,
    E_PNL_POOL_ID_MAX = E_PNL_POOL_ID_NUM,
} E_PNL_POOL_ID;


typedef enum
{
    E_PNL_DEVICE_ID_0 = 0,
    E_PNL_DEVICE_ID_1 = 1,
    E_PNL_DEVICE_ID_NUM,
    E_PNL_DEVICE_ID_MAX = E_PNL_DEVICE_ID_NUM,
} E_PNL_DEVICE_ID;


#define PNL_GET_INTERNAL_POOL_ID(u32Id) \
            ((u32Id == E_PNL_DEVICE_ID_1) ? E_PNL_POOL_ID_INTERNAL1 : E_PNL_POOL_ID_INTERNAL)

typedef enum
{
    E_PNL_CMD_GETLIBVER,
    E_PNL_CMD_GETINFO,
    E_PNL_CMD_GETSTATUS,
    E_PNL_CMD_GETSTATUSEX,
    E_PNL_CMD_SETDBGLEVEL,
    E_PNL_CMD_IOMAPBASEINIT,
    E_PNL_CMD_PREINIT,
    E_PNL_CMD_INIT,
    E_PNL_CMD_INIT_EX,
    E_PNL_CMD_GET_CONFIG,
    E_PNL_CMD_SETOUTPUT,
    E_PNL_CMD_CHANGEPANELTYPE,
    E_PNL_CMD_TCONMAP_DUMPTABLE,
    E_PNL_CMD_TCONMAP_POWER_SEQUENCE,
    E_PNL_CMD_TCON_COUNT_RESET,
    E_PNL_CMD_TCON_INIT,
    E_PNL_CMD_GETDSTINFO,
    E_PNL_CMD_CONTROL_OUT_SWING,
    E_PNL_CMD_SET_OUTPUT_PATTERN,
    E_PNL_CMD_MOD_CALIBRATION_SETTING,
    E_PNL_CMD_MOD_DO_CALIBRATION,
    E_PNL_CMD_BD_LVDS_OUTPUT_TYPE,
    E_PNL_CMD_SETLPLLTYPEEXT,
    E_PNL_CMD_INIT_MISC,
    E_PNL_CMD_GET_MISC_STATUS,
    E_PNL_CMD_MOD_OUTPUTCONFIG_USER,
    E_PNL_CMD_MOD_OUTPUT_CHANNEL_ORDER,
    E_PNL_CMD_HWLVDSRESERVEDTOLRFLAG,
    E_PNL_CMD_MOD_PVDD_POWER_SETTING,
    E_PNL_CMD_SETSSC_EN,
    E_PNL_CMD_SETSSC_FMODULATION,
    E_PNL_CMD_SETSSC_RDEVIATION,
    E_PNL_CMD_SETOSDSSC_EN,
    E_PNL_CMD_SETOSDSSC_FMODULATION,
    E_PNL_CMD_SETOSDSSC_RDEVIATION,
    E_PNL_CMD_SKIPTIMINGCHANGE,
    E_PNL_CMD_PRE_SET_MODE_ON,
    E_PNL_CMD_OVERDRIVER_INIT,
    E_PNL_CMD_OVERDRIVER_SETTING,
    E_PNL_CMD_OVERDRIVER_ENABLE,
    E_PNL_CMD_GET_LPLL_TYPE,
    E_PNL_CMD_GET_TCON_CAPABILITY,
    E_PNL_CMD_SETPAIRSWAP,
    E_PNL_CMD_SET_EXT_LPLL_TYPE,
    E_PNL_CMD_CALEXTLPLLSETBYDCLK,
    E_PNL_CMD_SETDIFFSWINGLEVEL,
    E_PNL_CMD_SETPOWERSTATE,
    E_PNL_CMD_FORCESETPANELDCLK,
    E_PNL_CMD_ENABLEINTERNALTERMINATION,
    E_PNL_CMD_OUTPUTDEVICEHANDSHAKE,
    E_PNL_CMD_OUTPUTDEVICEOCHANDSHAKE,
    E_PNL_CMD_SETOUTPUTINTERLACETIMING,
    E_PNL_CMD_GETOUTPUTINTERLACETIMING,
    E_PNL_CMD_GETPANELDATA,
    E_PNL_CMD_DUMPPANELDATA,
    E_PNL_CMD_SETSSC,
    E_PNL_CMD_GETPANELONTIMING,
    E_PNL_CMD_GETPANELOFFTIMING,
    E_PNL_CMD_GETPANELDIMCTRL,
    E_PNL_CMD_GETALLGAMMATBL,
    E_PNL_CMD_ENABLEPANEL,
    E_PNL_CMD_SETGAMMATBL,
    E_PNL_CMD_GETGAMMATBL,
    E_PNL_CMD_SETPNLGAMMATBL,
    E_PNL_CMD_SETGAMMAVALUE,
    E_PNL_CMD_GETLPLLMODE,
    E_PNL_CMD_GETDEFVFREQ,
    E_PNL_CMD_FORCESETPANELHSTART,
    E_PNL_CMD_GETPANELNAME,
    E_PNL_CMD_GETHSTART,
    E_PNL_CMD_GETVSTART,
    E_PNL_CMD_GETWIDTH,
    E_PNL_CMD_GETHEIGHT,
    E_PNL_CMD_GETHTOTAL,
    E_PNL_CMD_GETVTOTAL,
    E_PNL_CMD_GETHSYNCWIDTH,
    E_PNL_CMD_GETHSYNCBACKPORCH,
    E_PNL_CMD_GETVSYNCBACKPORCH,
    E_PNL_CMD_GETLPLLTYPE,
    E_PNL_CMD_GETARC,
    E_PNL_CMD_GETMINSET,
    E_PNL_CMD_GETMAXSET,
    E_PNL_CMD_GETOUTTIMINGMODE,
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
    E_PNL_CMD_GETSUPPORTMAXDCLK,
    E_PNL_CMD_INIT_LOCALDIMMING,
#else
    E_PNL_CMD_CHECKVBY1HANDSHAKESTATUS,
    E_PNL_CMD_SET_VIDEOHWTRAINING_MODE,
    E_PNL_CMD_SET_OSDHWTRAINING_MODE,
    E_PNL_CMD_GET_VIDEOHWTRAINING_MODE,
    E_PNL_CMD_GET_OSDHWTRAINING_MODE,
    E_PNL_CMD_Setting,
#endif
    E_PNL_CMD_NUM,
    E_PNL_CMD_MAX = E_PNL_CMD_NUM,
} E_PNL_IOCTL_CMDS;

typedef struct DLL_PACKED _stPNL_GetLibVer
{
    const MSIF_Version **ppVersion;
    APIPNL_Result eResult;
} stPNL_GetLibVer, *pstPNL_GetLibVer;

typedef struct DLL_PACKED _stPNL_GetInfo
{
    const PNL_ApiInfo *pApiInfo;
} stPNL_GetInfo, *pstPNL_GetInfo;

typedef struct DLL_PACKED _stPNL_GetStatus
{
    PNL_ApiStatus *pPnlStatus;
    MS_BOOL bReturn;
} stPNL_GetStatus, *pstPNL_GetStatus;

typedef struct DLL_PACKED _stPNL_GetStatusEx
{
    PNL_ApiExtStatus *pPnlExtStatus;
    MS_BOOL bReturn;
} stPNL_GetStatusEx, *pstPNL_GetStatusEx;

typedef struct _stPNL_SetDbgLevel
{
    MS_U16 u16DbgSwitch;
    MS_BOOL bReturn;
} stPNL_SetDbgLevel, *pstPNL_SetDbgLevel;

typedef struct _stPNL_IOMapBaseInit
{
    MS_BOOL bReturn;
} stPNL_IOMapBaseInit, *pstPNL_IOMapBaseInit;

typedef struct _stPNL_PreInit
{
    E_PNL_PREINIT_OPTIONS eInitParam;
    MS_BOOL bReturn;
} stPNL_PreInit, *pstPNL_PreInit;

typedef struct DLL_PACKED _stPNL_Init
{
    PanelType *pSelPanelType;
    MS_BOOL bReturn;
} stPNL_Init, *pstPNL_Init;

typedef struct DLL_PACKED _stPNL_Init_Ex
{
    PanelType *pSelPanelType;
    MSIF_Version LIBVER;
    MS_BOOL bReturn;
} stPNL_Init_Ex, *pstPNL_Init_Ex;

typedef struct DLL_PACKED _stPNL_GetConfig
{
    PanelType *pSelPanelType;
    APIPNL_Result eReturn;
} stPNL_GetConfig, *pstPNL_GetConfig;

typedef struct _stPNL_SetOutput
{
    APIPNL_OUTPUT_MODE eOutputMode;
} stPNL_SetOutput, *pstPNL_SetOutput;

typedef struct DLL_PACKED _stPNL_ChangePanelType
{
    PanelType *pSelPanelType;
    MS_BOOL bReturn;
} stPNL_ChangePanelType, *pstPNL_ChangePanelType;

typedef struct DLL_PACKED _stPNL_TCONMAP_DumpTable
{
    MS_U8 *pTCONTable;
    MS_U8 u8Tcontype;
    MS_BOOL bReturn;
} stPNL_TCONMAP_DumpTable, *pstPNL_TCONMAP_DumpTable;

typedef struct DLL_PACKED _stPNL_TCONMAP_Power_Sequence
{
    MS_U8 *pTCONTable;
    MS_BOOL bEnable;
    MS_BOOL bReturn;
} stPNL_TCONMAP_Power_Sequence, *pstPNL_TCONMAP_Power_Sequence;

typedef struct _stPNL_TCON_Count_Reset
{
    MS_BOOL bEnable;
} stPNL_TCON_Count_Reset, *pstPNL_TCON_Count_Reset;

typedef struct _stPNL_TCON_Init
{
} stPNL_TCON_Init, *pstPNL_TCON_Init;

typedef struct DLL_PACKED _stPNL_GetDstInfo
{
    MS_PNL_DST_DispInfo *pDstInfo;
    MS_U32 u32SizeofDstInfo;
    MS_BOOL bReturn;
} stPNL_GetDstInfo, *pstPNL_GetDstInfo;

typedef struct _stPNL_Control_Out_Swing
{
    MS_U16 u16Swing_Level;
    MS_BOOL bReturn;
} stPNL_Control_Out_Swing, *pstPNL_Control_Out_Swing;

typedef struct _stPNL_SetOutputPattern
{
    MS_BOOL bEnable;
    MS_U16 u16Red;
    MS_U16 u16Green;
    MS_U16 u16Blue;
} stPNL_SetOutputPattern, *pstPNL_SetOutputPattern;

typedef struct DLL_PACKED _stPNL_Mod_Calibration_Setting
{
 MS_PNL_ModCaliInfo *pstModCaliInfo;
 MS_BOOL bReturn;
} stPNL_Mod_Calibration_Setting, *pstPNL_Mod_Calibration_Setting;

typedef struct _stPNL_Mod_Do_Calibration
{
    MS_BOOL bReturn;
} stPNL_Mod_Do_Calibration, *pstPNL_Mod_Do_Calibration;

typedef struct _stPNL_BD_LVDS_Output_Type
{
    MS_U16 Type;
} stPNL_BD_LVDS_Output_Type, *pstPNL_BD_LVDS_Output_Type;

typedef struct _stPNL_SetLPLLTypeExt
{
    APIPNL_LINK_EXT_TYPE eLPLL_TypeExt;
} stPNL_SetLPLLTypeExt, *pstPNL_SetLPLLTypeExt;

typedef struct _stPNL_Init_MISC
{
    APIPNL_MISC ePNL_MISC;
} stPNL_Init_MISC, *pstPNL_Init_MISC;

typedef struct _stPNL_Get_MISC_Status
{
    MS_U32 u32Status;
} stPNL_Get_MISC_Status, *pstPNL_Get_MISC_Status;

typedef struct _stPNL_MOD_OutputConfig_User
{
    MS_U32 u32OutputCFG0_7;
    MS_U32 u32OutputCFG8_15;
    MS_U32 u32OutputCFG16_21;
} stPNL_MOD_OutputConfig_User, *pstPNL_MOD_OutputConfig_User;

typedef struct _stPNL_MOD_OutputChannelOrder
{
    MS_U8 u8OutputOrderType;
    MS_U16 u16OutputOrder0_3;
    MS_U16 u16OutputOrder4_7;
    MS_U16 u16OutputOrder8_11;
    MS_U16 u16OutputOrder12_13;
} stPNL_MOD_OutputChannelOrder, *pstPNL_MOD_OutputChannelOrder;

typedef struct _stPNL_HWLVDSReservedtoLRFlag
{
    MS_PNL_HW_LVDSResInfo lvdsresinfo;
} stPNL_HWLVDSReservedtoLRFlag, *pstPNL_HWLVDSReservedtoLRFlag;

typedef struct _stPNL_MOD_PVDD_Power_Setting
{
    MS_BOOL bIs2p5;
} stPNL_MOD_PVDD_Power_Setting, *pstPNL_MOD_PVDD_Power_Setting;

typedef struct _stPNL_SetSSC_En
{
    MS_BOOL bEnable;
    APIPNL_Result eReturn;
} stPNL_SetSSC_En, *pstPNL_SetSSC_En;

typedef struct _stPNL_SetSSC_Fmodulation
{
    MS_U16 u16Fmodulation;
    APIPNL_Result eReturn;
} stPNL_SetSSC_Fmodulation, *pstPNL_SetSSC_Fmodulation;

typedef struct _stPNL_SetSSC_Rdeviation
{
    MS_U16 u16Rdeviation;
    APIPNL_Result eReturn;
} stPNL_SetSSC_Rdeviation, *pstPNL_SetSSC_Rdeviation;

typedef struct _stPNL_SetOSDSSC_En
{
    MS_BOOL bEnable;
    APIPNL_Result eReturn;
} stPNL_SetOSDSSC_En, *pstPNL_SetOSDSSC_En;

typedef struct _stPNL_SetOSDSSC_Fmodulation
{
    MS_U16 u16Fmodulation;
    APIPNL_Result eReturn;
} stPNL_SetOSDSSC_Fmodulation, *pstPNL_SetOSDSSC_Fmodulation;

typedef struct _stPNL_SetOSDSSC_Rdeviation
{
    MS_U16 u16Rdeviation;
    APIPNL_Result eReturn;
} stPNL_SetOSDSSC_Rdeviation, *pstPNL_SetOSDSSC_Rdeviation;

typedef struct _stPNL_SkipTimingChange
{
    MS_BOOL bFlag;
    APIPNL_Result eResult;
} stPNL_SkipTimingChange, *pstPNL_SkipTimingChange;

typedef struct _stPNL_PreSetModeOn
{
    MS_BOOL bSetMode;
    APIPNL_Result eResult;
} stPNL_PreSetModeOn, *pstPNL_PreSetModeOn;

typedef struct DLL_PACKED _stPNL_OverDriver_Init
{
    MS_PNL_OD_INITDATA *pPNL_ODInitData;
    MS_U32 u32ODInitDataLen;
    APIPNL_Result eResult;
} stPNL_OverDriver_Init, *pstPNL_OverDriver_Init;

typedef struct DLL_PACKED _stPNL_OverDriver_Setting
{
    MS_PNL_OD_SETTING *pPNL_ODSetting;
    MS_U32 u32ODInitDataLen;
    APIPNL_Result eResult;
} stPNL_OverDriver_Setting, *pstPNL_OverDriver_Setting;


typedef struct _stPNL_OverDriver_Enable
{
    MS_BOOL bEnable;
    APIPNL_Result eResult;
} stPNL_OverDriver_Enable, *pstPNL_OverDriver_Enable;

typedef struct _stPNL_Get_LPLL_Type
{
    MS_U8 u8Return;
} stPNL_Get_LPLL_Type, *pstPNL_Get_LPLL_Type;

typedef struct _stPNL_Get_TCON_Capability
{
    MS_BOOL bReturn;
} stPNL_Get_TCON_Capability, *pstPNL_Get_TCON_Capability;

typedef struct _stPNL_SetPairSwap
{
    MS_U32 u32Polarity;
} stPNL_SetPairSwap, *pstPNL_SetPairSwap;

typedef struct _stPNL_SetExt_LPLL_Type
{
    MS_U16 u16Ext_lpll_type;
} stPNL_SetExt_LPLL_Type, *pstPNL_SetExt_LPLL_Type;

typedef struct _stPNL_CalExtLPLLSETbyDClk
{
    MS_U32 ldHz;
} stPNL_CalExtLPLLSETbyDClk, *pstPNL_CalExtLPLLSETbyDClk;

typedef struct _stPNL_SetDiffSwingLevel
{
    MS_U8 u8Swing_Level;
    MS_BOOL bReturn;
} stPNL_SetDiffSwingLevel, *pstPNL_SetDiffSwingLevel;

typedef struct _stPNL_SetPowerState
{
    EN_POWER_MODE ePowerState;
    MS_U32 u32Return;
} stPNL_SetPowerState, *pstPNL_SetPowerState;

typedef struct _stPNL_ForceSetPanelDCLK
{
    MS_U16 u16PanelDCLK;
    MS_BOOL bSetDCLKEnable;
    MS_BOOL bReturn;
} stPNL_ForceSetPanelDCLK, *pstPNL_ForceSetPanelDCLK;

typedef struct _stPNL_ForceSetPanelHStart
{
    MS_U16 u16PanelHStart;
    MS_BOOL bSetHStartEnable;
    MS_BOOL bReturn;
} stPNL_ForceSetPanelHStart, *pstPNL_ForceSetPanelHStart;

typedef struct _stPNL_EnableInternalTermination
{
    MS_BOOL bEnable;
    MS_BOOL bReturn;
} stPNL_EnableInternalTermination, *pstPNL_EnableInternalTermination;

typedef struct _stPNL_OutputDeviceHandshake
{
    MS_BOOL bReturn;
} stPNL_OutputDeviceHandshake, *pstPNL_OutputDeviceHandshake;

typedef struct _stPNL_OutputDeviceOCHandshake
{
    MS_BOOL bReturn;
} stPNL_OutputDeviceOCHandshake, *pstPNL_OutputDeviceOCHandshake;

typedef struct _stPNL_SetOutputInterlaceTiming
{
    MS_BOOL bEnable;
    APIPNL_Result eReturn;
} stPNL_SetOutputInterlaceTiming, *pstPNL_SetOutputInterlaceTiming;

typedef struct _stPNL_GetOutputInterlaceTiming
{
    MS_BOOL bReturn;
} stPNL_GetOutputInterlaceTiming, *pstPNL_GetOutputInterlaceTiming;

typedef struct DLL_PACKED _stPNL_GetPanelData
{
    PanelType* pstPNLData;
} stPNL_GetPanelData, *pstPNL_GetPanelData;

typedef struct _stPNL_SetSSC
{
    MS_U16 u16Fmodulation;
    MS_U16 u16Rdeviation;
    MS_BOOL bEnable;
} stPNL_SetSSC, *pstPNL_SetSSC;

typedef struct _stPNL_GetPanelOnTiming
{
    APIPNL_POWER_TIMING_SEQ seq;
    MS_U16 u16Return;
} stPNL_GetPanelOnTiming, *pstPNL_GetPanelOnTiming;

typedef struct _stPNL_GetPanelOffTiming
{
    APIPNL_POWER_TIMING_SEQ seq;
    MS_U16 u16Return;
} stPNL_GetPanelOffTiming, *pstPNL_GetPanelOffTiming;

typedef struct _stPNL_GetPanelDimCtrl
{
    APIPNL_DIMMING_CTRL dim_type;
    MS_U8 u8Return;
} stPNL_GetPanelDimCtrl, *pstPNL_GetPanelDimCtrl;

typedef struct DLL_PACKED _stPNL_GetAllGammaTbl
{
    MS_U8** ppu8Return;
} stPNL_GetAllGammaTbl, *pstPNL_GetAllGammaTbl;

typedef struct _stPNL_EnablePanel
{
    MS_BOOL bPanelOn;
    MS_BOOL bReturn;
} stPNL_EnablePanel, *pstPNL_EnablePanel;

typedef struct DLL_PACKED _stPNL_SetGammaTbl
{
    APIPNL_GAMMA_TYPE eGammaType;
    MS_U8* pu8GammaTab[3];
    APIPNL_GAMMA_MAPPEING_MODE Gamma_Map_Mode;
    MS_BOOL bReturn;
} stPNL_SetGammaTbl, *pstPNL_SetGammaTbl;

typedef struct DLL_PACKED _stPNL_GetGammaTbl
{
    APIPNL_GAMMA_TYPE eGammaType;
    MS_U8* pu8GammaTab[3];
    APIPNL_GAMMA_MAPPEING_MODE Gamma_Map_Mode;
    MS_BOOL bReturn;
} stPNL_GetGammaTbl, *pstPNL_GetGammaTbl;

typedef struct DLL_PACKED _stPNL_SetPNLGammaTbl
{
    MS_U8* pu8GammaTab;
    MS_U8 u8Index;
    MS_BOOL bReturn;
} stPNL_SetPNLGammaTbl, *pstPNL_SetPNLGammaTbl;


typedef struct _stPNL_SetGammaValue
{
    MS_U8 u8Channel;
    MS_U16 u16Offset;
    MS_U16 u16GammaValue;
    MS_BOOL bReturn;
} stPNL_SetGammaValue, *pstPNL_SetGammaValue;

typedef struct _stPNL_GetLPLLMode
{
    MS_U8 u8Return;
} stPNL_GetLPLLMode, *pstPNL_GetLPLLMode;

typedef struct _stPNL_GetDefVFreqe
{
    MS_U16 u16Return;
} stPNL_GetDefVFreq, *pstPNL_GetDefVFreq;

typedef struct DLL_PACKED _stPNL_GetName
{
    const char* pPNLName;
}stPNL_GetName, *pstPNL_GetName;

typedef struct _stPNL_GetHstart
{
    MS_U16 u16Return;
} stPNL_GetHstart, *pstPNL_GetHstart;

typedef struct _stPNL_GetVstart
{
    MS_U16 u16Return;
} stPNL_GetVstart, *pstPNL_GetVstart;

typedef struct _stPNL_GetWidth
{
    MS_U16 u16Return;
} stPNL_GetWidth, *pstPNL_GetWidth;

typedef struct _stPNL_GetHeight
{
    MS_U16 u16Return;
} stPNL_GetHeight, *pstPNL_GetHeight;

typedef struct _stPNL_GetHtotal
{
    MS_U16 u16Return;
} stPNL_GetHtotal, *pstPNL_GetHtotal;

typedef struct _stPNL_GetVtotal
{
    MS_U16 u16Return;
} stPNL_GetVtotal, *pstPNL_GetVtotal;

typedef struct stPNL_GetHsyncWidth
{
    MS_U8 u8Return;
} stPNL_GetHsyncWidth,*pstPNL_GetHsyncWidth;

typedef struct _stPNL_GetHsyncBackPorch
{
    MS_U8 u8Return;
} stPNL_GetHsyncBackPorch,*pstPNL_GetHsyncBackPorch;

typedef struct _stPNL_GetVsyncBackPorch
{
    MS_U8 u8Return;
} stPNL_GetVsyncBackPorch,*pstPNL_GetVsyncBackPorch;

typedef struct _stPNL_GetLPLLType
{
    MS_U8 u8Return;
} stPNL_GetLPLLType,*pstPNL_GetLPLLType;

typedef struct _stPNL_GetARC
{
    E_PNL_ASPECT_RATIO ePanelAspectRatio;
} stPNL_GetARC,*pstPNL_GetARC;

typedef struct _stPNL_GetMinSET
{
    MS_U32 u32Return;
} stPNL_GetMinSET,*pstPNL_GetMinSET;

typedef struct _stPNL_GetMaxSET
{
    MS_U32 u32Return;
} stPNL_GetMaxSET,*pstPNL_GetMaxSET;

typedef struct _stPNL_GetOutTimingMode
{
    APIPNL_OUT_TIMING_MODE ePanelOutTimingMode;
} stPNL_GetOutTimingMode,*pstPNL_GetOutTimingMode;

typedef struct _stPNL_GetSupportMaxDclk
{
    MS_U16 u16Return;
} stPNL_GetSupportMaxDclk,*pstPNL_GetSupportMaxDclk;

typedef struct _stPNL_Init_LocalDimming
{
    pstPNL_Init_LocalDimming_Parameters pLD_InitData;
    MS_U16 u16DataLen;
    MS_U16 u16Return;
} stPNL_Init_LocalDimming, *pstPNL_Init_LocalDimming;

typedef struct _stPNL_CheckVBY1HandshakeStatus
{
    MS_BOOL bResult;
} stPNL_CheckVBY1HandshakeStatus,*pstPNL_CheckVBY1HandshakeStatus;

typedef struct _stPNL_MOD_Video_HWTrainingMode
{
    MS_BOOL bEnable;
}stPNL_MOD_Video_HWTrainingMode,*pstPNL_MOD_Video_HWTrainingMode;

typedef struct _stPNL_MOD_OSD_HWTrainingMode
{
    MS_BOOL bEnable;
}stPNL_MOD_OSD_HWTrainingMode,*pstPNL_MOD_OSD_HWTrainingMode;

typedef struct _stPNL_GetVideoHWTraining_status
{
    MS_BOOL bStatus;
}stPNL_GetVideoHWTraining_status,*pstPNL_GetVideoHWTraining_status;

typedef struct _stPNL_GetOSDHWTraining_status
{
    MS_BOOL bStatus;
}stPNL_GetOSDHWTraining_status,*pstPNL_GetOSDHWTraining_status;

typedef struct DLL_PACKED _stPNL_Setting
{
    MS_U32 u32Cmd;
    void *pCmdArgs;
    MS_U32 u32CmdArgsSize;
    APIPNL_Result eReturnValue;
}stPNL_Setting,*pstPNL_Setting;

#ifdef __cplusplus
}
#endif

#endif
# 135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
#ifndef _DRV_IR_H_
#define _DRV_IR_H_ 


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"
# 155 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
#define MSIF_IR_LIB_CODE {'I','R','_','_'}
#define MSIF_IR_LIBVER {'0','5'}
#define MSIF_IR_BUILDNUM {'0','0' }
#define MSIF_IR_CHANGELIST {'0','0','4','4','3','0','8','6'}

#define IR_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_IR_LIB_CODE, \
    MSIF_IR_LIBVER, \
    MSIF_IR_BUILDNUM, \
    MSIF_IR_CHANGELIST, \
    MSIF_OS


#define IR_VERSION_STRING_MAX 33
#define IR_DUMMY_KEY 0xFF
#define IR_DUMMY_STATUS 0x00


#define IR_DEC_RC_RC5 0
#define IR_DEC_RC_RC5X 1
#define IR_DEC_RC_RC6 2
#define IR_DEC_FULL 3
#define IR_DEC_RAW 4
#define IR_DEC_SW 5
#define IR_DEC_FMT 6





typedef struct __attribute__((aligned (4096)))
{
    MS_U8 u8IsDecodeEn : 1;
    MS_U8 u8IsIntMsked : 1;
    MS_U8 u8IsPolarInv : 1;
    MS_U8 u8IsFifoFullEn : 1;
    MS_U8 u8IsFifoFull : 1;
    MS_U8 u8IsKeyMsbFst : 1;
    MS_U8 u8IsBitInvEn : 1;
    MS_U8 u8IsGlhrmEn : 1;
    MS_U8 u8DecodeMode : 4;
    MS_U8 u8CCodeBytes : 2;
    MS_U8 u8Reserved : 2;
    MS_U8 u8CodeBits;
    MS_U8 u8FifoDepth;

    MS_U8 u8IsRCDecodeEn : 1;
    MS_U8 u8IsRCPolarInv : 1;
    MS_U8 u8RCReserved : 6;
}IR_DrvInfo;


typedef struct
{
    MS_S16 s16Time;
    MS_S8 s8UpBnd;
    MS_S8 s8LoBnd;
} IR_TimeCfg;


typedef struct __attribute__((aligned (4096)))
{
    IR_TimeCfg tHdr;
    IR_TimeCfg tOff;
    IR_TimeCfg tOffRpt;
    IR_TimeCfg tLg01Hg;
    IR_TimeCfg tLg0;
    IR_TimeCfg tLg1;

} IR_TimeBnd;


typedef struct __attribute__((aligned (4096)))
{

    MS_U8 u8Ctrl0;
    MS_U8 u8Ctrl1;
    MS_U8 u8Clk_mhz;
    MS_U8 u8HdrCode0;
    MS_U8 u8HdrCode1;
    MS_U8 u8CCodeBytes;
    MS_U8 u8CodeBits;
    MS_U8 u8HdrCode20;
    MS_U8 u8HdrCode21;

} IR_RegCfg;


typedef enum
{

    E_IR_FAIL =0,

    E_IR_OK = 1,

} IR_Result;


typedef enum
{

    E_IR_INIT_OK = (1<<0),

    E_IR_INST_CLBK = (1<<1),

    E_IR_FIFO_EMPTY = (1<<2),

    E_IR_FIFO_FULL = (1<<3),

    E_IR_KEY_CODE = (1<<4),

    E_IR_KEY_TIMEOUT = (1<<5),

    E_IR_KEY_DECERR = (1<<6),

    E_IR_ENABLE = (1<<7),

    E_IR_MAX_STATUS = 255
} IR_Status;





typedef enum
{

    E_IR_CPUTo51_CMD_INIT=0x00,

    E_IR_CPUTo51_CMD_CONFIG,

    E_IR_CPUTo51_CMD_KEYCODE,

    E_IR_CPUTo51_CMD_SETCLBK,

    E_IR_CPUTo51_CMD_LIBVER,

    E_IR_CPUTo51_CMD_STATUS,

    E_IR_CPUTo51_CMD_ENABLE,

    E_IR_CPUTo51_CMD_INFO,
} IR_CPUTo51CmdIdx;


typedef enum
{


    E_IR_51ToCPU_CMD_ACK_INIT=0x00,

    E_IR_51ToCPU_CMD_ACK_CONFIG,

    E_IR_51ToCPU_CMD_ACK_KEYCODE,

    E_IR_51ToCPU_CMD_ACK_SETCLBK,

    E_IR_51ToCPU_CMD_ACK_LIBVER,

    E_IR_51ToCPU_CMD_ACK_STATUS,

    E_IR_51ToCPU_CMD_ACK_ENABLE,

    E_IR_51ToCPU_CMD_ACK_INFO,



    E_IR_51ToCPU_CMD_KEYCODE,

} IR_51ToCPUCmdIdx;


typedef enum
{

    E_IR_ACKFLG_NULL = 0,

    E_IR_ACKFLG_WAIT_INIT = (1<<0),

    E_IR_ACKFLG_WAIT_CONFIG = (1<<1),

    E_IR_ACKFLG_WAIT_KEYCODE = (1<<2),

    E_IR_ACKFLG_WAIT_SETCLBK = (1<<3),

    E_IR_ACKFLG_WAIT_LIBVER = (1<<4),

    E_IR_ACKFLG_WAIT_STATUS = (1<<5),

    E_IR_ACKFLG_WAIT_ENABLE = (1<<6),

    E_IR_ACKFLG_WAIT_INFO = (1<<7),
} IR_AckFlags;


typedef void ( *IR_Callback ) (MS_U8 u8Key, MS_U8 u8RepeatFlag);


typedef enum _IR_DbgLvl
{
    E_IR_DBGLVL_NONE = 0,
    E_IR_DBGLVL_WARNING,
    E_IR_DBGLVL_ERROR,
    E_IR_DBGLVL_INFO,
    E_IR_DBGLVL_ALL,
}IR_DbgLvl;
# 379 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_Init(IR_RegCfg *pIRRegCfg);
# 388 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_Config(IR_TimeBnd *pIRTimeBnd);
# 399 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_GetKeyCode(MS_U8 *pu8Key, MS_U8 *pu8Repeat);
# 411 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_SetCallback(IR_Callback pCallback);







IR_Callback MDrv_IR_GetCallback(void);
# 429 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_GetLibVer(const MSIF_Version **ppVersion);
# 439 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_GetStatus(MS_U8 *pu8IRStatus);
# 449 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_Enable(MS_BOOL bEnable);







const IR_DrvInfo* MDrv_IR_GetInfo(void);
# 466 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
IR_Result MDrv_IR_SetDbgLevel(IR_DbgLvl eLevel);

#define IR_VERSION 0x00000001


#if 1
#define IR_MAX_BUF_DPH 2
#define IR_MAX_BUF_LEN 256
typedef enum
{
    E_IR_DECMODE_HWFULL = 0,
    E_IR_DECMODE_HWRAW,
    E_IR_DECMODE_HWRC5,
    E_IR_DECMODE_HWRC5X,
    E_IR_DECMODE_HWRC6,
    E_IR_DECMODE_SW,
    E_IR_DECMODE_SHOT,
    E_IR_DECMODE_NONE
} IR_DecodeMode;







typedef enum
{
    E_IR_XFM_NOTDEF = 0,
    E_IR_XFM_C16D8D8P=1,
    E_IR_XFM_C8D8=2,
    E_IR_XFM_C4D8C4D8P=3,
    E_IR_XFM_C26D8D8P=4,
    E_IR_XFM_C32D8D8P=5,
    E_IR_XFM_C5D6C5D6P=6,
    E_IR_XFM_C6D6C6D6P=7,
    E_IR_XFM_D7C6=8,
    E_IR_XFM_D7C8=9,
    E_IR_XFM_D8C6=10,
    E_IR_XFM_D5_only=11,
    E_IR_XFM_S1C4D6=12,
    E_IR_XFM_C5D6D4=13,
    E_IR_XFM_R1T1C3D6=14,
    E_IR_XFM_RESERVED=15,

} IR_ExtFormat;

typedef enum
{
    EN_IR_SHOT_P = 0x01,
    EN_IR_SHOT_N = 0x02,
    EN_IR_SHOT_PN = 0x03,
    EN_IR_SHOT_INVLD,

} IR_ShotSel;


typedef struct
{
    MS_S16 s16Time;
    MS_S8 s8UpBnd;
    MS_S8 s8LoBnd;
} IR_TimeBndParam;


typedef struct
{
    MS_U32 gu32KeyMin;
    MS_U32 gu32KeyMax;
    MS_U32 gu32RptMin;
    MS_U32 gu32RptMax;
} IR_TimeTailParam;


typedef struct
{
    IR_TimeBndParam tHdr;
    IR_TimeBndParam tOff;
    IR_TimeBndParam tOffRpt;
    IR_TimeBndParam tLg01Hg;
    IR_TimeBndParam tLg0;
    IR_TimeBndParam tLg1;
    IR_TimeBndParam tSepr;
    MS_U32 u32TimeoutCyc;
    MS_U16 u16RCBitTime;
    IR_TimeTailParam tTail;
} IR_TimeCfgParam;


typedef struct
{
    MS_U8 u8DecMode;
    MS_U8 u8ExtFormat;
    MS_U8 u8Ctrl0;
    MS_U8 u8Ctrl1;
    MS_U8 u8Clk_mhz;
    MS_U8 u8HdrCode0;
    MS_U8 u8HdrCode1;
    MS_U8 u8CCodeBytes;
    MS_U8 u8CodeBits;
    MS_U8 u8KeySelect;
    MS_U16 u16GlhrmNum;
    IR_ShotSel enShotSel;
    MS_BOOL bInvertPolar;

} IR_InitCfgParam;


typedef struct
{
    MS_U32 u32Buffer[IR_MAX_BUF_DPH][IR_MAX_BUF_LEN];
    MS_U32 u32Length;
    MS_U8 u8RdIdx;
    MS_U8 u8WtIdx;
} IR_PulseShotInfo;


typedef struct
{
    MS_U8 u8IRHeaderCode0;
    MS_U8 u8IRHeaderCode1;
    MS_U8 u8IR2HeaderCode0;
    MS_U8 u8IR2HeaderCode1;
}MS_MultiIR_HeaderInfo;

#define IR_IOC_MAGIC 'u'
#define MDRV_IR_INIT _IO(IR_IOC_MAGIC, 0)
#define MDRV_IR_SET_DELAYTIME _IOW(IR_IOC_MAGIC, 1, int)
#define MDRV_IR_GET_KEY _IOW(IR_IOC_MAGIC, 2, int)
#define MDRV_IR_GET_LASTKEYTIME _IOW(IR_IOC_MAGIC, 3, int)
#define MDRV_IR_PARSE_KEY _IOW(IR_IOC_MAGIC, 4, int)
#define MDRV_IR_TEST _IOW(IR_IOC_MAGIC, 5, int)
#define MDRV_IR_ENABLE_IR _IOW(IR_IOC_MAGIC, 6, int)
#define MDRV_IR_IS_FANTASY_PROTOCOL_SUPPORTED _IOR(IR_IOC_MAGIC, 7, int)
#define MDRV_IR_ENABLE_FANTASY_DATA_TRANSFER _IOW(IR_IOC_MAGIC, 8, int)
#define MDRV_IR_SET_MASTER_PID _IOW(IR_IOC_MAGIC, 9, int)
#define MDRV_IR_GET_MASTER_PID _IOW(IR_IOC_MAGIC, 10, int)
#define MDRV_IR_INITCFG _IOW(IR_IOC_MAGIC, 11, IR_InitCfgParam)
#define MDRV_IR_TIMECFG _IOW(IR_IOC_MAGIC, 12, IR_TimeCfgParam)
#define MDRV_IR_GET_SWSHOT_BUF _IOW(IR_IOC_MAGIC, 13, IR_PulseShotInfo)
#define MDRV_IR_SEND_KEY _IOW(IR_IOC_MAGIC, 14, int)
#define MDRV_IR_SET_HEADER _IOW(IR_IOC_MAGIC, 15, MS_MultiIR_HeaderInfo)

#define IR_IOC_MAXNR 15
# 618 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
void MDrv_IR_OpenDevice(void);







void MDrv_IR_InitCfg(IR_InitCfgParam* pInitCfg);







void MDrv_IR_TimeCfg(IR_TimeCfgParam* pTimeCfg);







void MDrv_IR_GetPulseShot(IR_PulseShotInfo* pPulseShotInfo);







void MDrv_IR_SetMultiHeaderCode(MS_MultiIR_HeaderInfo* pMultiHeaderCode);
# 662 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
void IRRegisterToUtopia(FUtopiaOpen ModuleType);







MS_U32 IROpen(void** pInstance, MS_U32 u32ModuleVersion, void* pAttribute);







MS_U32 IRClose(void* pInstance);







MS_U32 IRIoctl(void* pInstance, MS_U32 u32Cmd, void *pArgs);
# 695 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIR.h"
MS_U32 MDrv_IR_SetPowerState(EN_POWER_MODE u16PowerState);



typedef struct _IR_RESOURCE_PRIVATE
{
    MS_U32 Dummy;
}IR_RESOURCE_PRIVATE;

typedef struct _IR_INSTANT_PRIVATE
{

}IR_INSTANT_PRIVATE;


#endif

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMMIO.h"
#ifndef __DRV_MMIO_H__
#define __DRV_MMIO_H__ 


#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"




#define MSIF_MMIO_LIB_CODE {'M','M','I','O'}
#define MSIF_MMIO_LIBVER {'0','1'}
#define MSIF_MMIO_BUILDNUM {'0','2'}
#define MSIF_MMIO_CHANGELIST {'0','0','4','0','9','9','0','8'}

#define MMIO_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_MMIO_LIB_CODE, \
    MSIF_MMIO_LIBVER, \
    MSIF_MMIO_BUILDNUM, \
    MSIF_MMIO_CHANGELIST, \
    MSIF_OS





#define DRV_MMIO_PM_BANK 0x0001
#define DRV_MMIO_NONPM_BANK 0x0002
#define DRV_MMIO_FLASH_BANK0 0x0003
#define DRV_MMIO_FRC_BANK 0x0004
#define DRV_MMIO_OTP_BANK 0x0010
#define DRV_MMIO_SPRAM_BANK 0x0011
#define DRV_MMIO_OTP_BANK2 0x0012
#define DRV_MMIO_XC_EXT_BANK 0x0013


#define DRV_MMIO_SC_BANK 0x0100
#define DRV_MMIO_TSP_BANK 0x0101
#define DRV_MMIO_NDS_BANK 0x0102
#define DRV_MMIO_NSK_BANK 0x0103
#define DRV_MMIO_CAM_BANK 0x0104
#define DRV_MMIO_NGA_BANK 0x0105
#define DRV_MMIO_SC1_BANK 0x0106
# 198 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMMIO.h"
MS_BOOL MDrv_MMIO_Init(void);




MS_BOOL MDrv_MMIO_GetBASE(MS_VIRT *ptrBaseaddr, MS_PHY *u32Basesize, MS_U32 u32Module);




MS_BOOL MDrv_MMIO_Close(void);


#ifdef __cplusplus
}
#endif


#endif
# 152 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
#ifndef __DRV_DSCMB_H__
#define __DRV_DSCMB_H__ 

#include "MsTypes.h"
#include "MsCommon.h"

#include "ULog.h"

#ifdef __cplusplus
extern "C"
{
#endif

#define MSIF_DSMB_LIB_CODE {'D','S','M','B'}
#define MSIF_DSMB_LIBVER {'0','2'}
#define MSIF_DSMB_BUILDNUM {'1','8'}
#define MSIF_DSMB_CHANGELIST {'0','0','5','6','5','9','8','0'}

#define DSCMB_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DSMB_LIB_CODE, \
    MSIF_DSMB_LIBVER, \
    MSIF_DSMB_BUILDNUM, \
    MSIF_DSMB_CHANGELIST, \
    MSIF_OS


#define DSCMB_ASSERT_AND_RETURN(x) if (!(x)){printf ("ASSERT FAIL: %s %s %d\n", __FILE__, __FUNCTION__, __LINE__); return FALSE;}
#define DSCMB_ASSERT_NO_RETURN(x) if (!(x)){printf ("ASSERT FAIL: %s %s %d\n", __FILE__, __FUNCTION__, __LINE__);}

#define DSCMB_LIB_TIME_MAX 16
#define DSCMB_LIB_DATE_MAX 16

typedef struct DLL_PACKED
{
    MS_U8 Time[DSCMB_LIB_TIME_MAX];
    MS_U8 Date[DSCMB_LIB_DATE_MAX];
} DSCMB_Info;

typedef struct DLL_PACKED
{
    MS_U32 u32Status;
} DSCMB_Status;


#define DRV_DSCMB_FLT_NULL 0xFFFFFFFF

typedef enum
{

    E_SLOT_TYPE_NORMAL = 0,
    E_SLOT_TYPE_SHARE,
} DSCMB_SLOT_Type;

typedef enum
{
    E_DSCMB_FLT_3_KEYS = 0x00000000,
    E_DSCMB_FLT_2_KEYS = 0x00000001,
    E_DSCMB_FLT_2_KEYS_SHARE = 0x00000002,
    E_DSCMB_FLT_1_KEYS = 0x00000003,
    E_DSCMB_FLT_SECURE_KEYS_ENABLE = 1 << 7,
} DSCMB_Flt_Type;


typedef enum
{

    E_DSCMB_TYPE_CSA = 0,

    E_DSCMB_TYPE_NSA_AS_ESA,

    E_DSCMB_TYPE_DES,

    E_DSCMB_TYPE_AES,


    E_DSCMB_TYPE_AES_ECB,
    E_DSCMB_TYPE_AES_SCTE52,
    E_DSCMB_TYPE_AES_CTR,
    E_DSCMB_TYPE_TDES_ECB,
    E_DSCMB_TYPE_TDES_SCTE52,


    E_DSCMB_TYPE_SYN_AES,

    E_DSCMB_TYPE_MULTI2,


    E_DSCMB_TYPE_CSA3,


    E_DSCMB_TYPE_CSA_CONF,

    E_DSCMB_TYPE_OC,
} DSCMB_Type;


typedef enum
{

    E_DSCMB_KEY_CLEAR = 0,

    E_DSCMB_KEY_EVEN,

    E_DSCMB_KEY_ODD,


    E_DSCMB_KEY_FSCB_ENABLE = 1 << 4,

    E_DSCMB_KEY_TO_KL_ENABLE = 1 << 5,

    E_DSCMB_KEY_SECURE_KEYS_ENABLE = 1 << 7,
} DSCMB_Key_Type;


typedef enum
{

    E_DSCMB_NONE = 0x00000000,

    E_DSCMB_TS = 0x00000001,

    E_DSCMB_PES = 0x00000002,

    E_DSCMB_TS_PES = (E_DSCMB_TS | E_DSCMB_PES),
} SCMB_Level;


typedef enum
{
    E_DSCMB_ENG_LSAS = 0x1,
    E_DSCMB_ENG_ESA = 0x2,
    E_DSCMB_ENG_LSAD = 0x4,
} DSCMB_Eng_Type;


typedef enum
{

    E_DSCMB_KL_SRC_ACPU = 0,

    E_DSCMB_KL_SRC_SECRET_1 = 1,

    E_DSCMB_KL_SRC_SECRET_2 = 2,

    E_DSCMB_KL_SRC_SECRET_3 = 3,

    E_DSCMB_KL_SRC_SECRET_4 = 4,

    E_DSCMB_KL_SRC_SECRET_5 = 5,

    E_DSCMB_KL_SRC_SECRET_6 = 6,

    E_DSCMB_KL_SRC_SECRET_7 = 7,

    E_DSCMB_KL_SRC_SECRET_8 = 8,

    E_DSCMB_KL_SRC_SECRET_9 = 16,

    E_DSCMB_KL_SRC_SECRET_10 = 10,

    E_DSCMB_KL_SRC_SECRET_11 = 11,

    E_DSCMB_KL_SRC_SECRET_12 = 12,

    E_DSCMB_KL_SRC_SECRET_13 = 13,

    E_DSCMB_KL_SRC_SECRET_14 = 14,

    E_DSCMB_KL_SRC_SECRET_15 = 15,


    E_DSCMB_KL_SRC_PRIVATE_0 = 5,

    E_DSCMB_KL_SRC_PRIVATE_1 = 6,

    E_DSCMB_KL_SRC_PRIVATE_2 = 7,

    E_DSCMB_KL_SRC_PRIVATE_3 = 8,


    E_DSCMB_KL_SRC_PRIVATE_EX_0 = 0x40,

    E_DSCMB_KL_SRC_PRIVATE_EX_1 = 0x41,

    E_DSCMB_KL_SRC_PRIVATE_EX_2 = 0x42,

    E_DSCMB_KL_SRC_PRIVATE_EX_3 = 0x43,


    E_DSCMB_KL_SRC_VGK = 9,

    E_DSCMB_KL_SRC_KDF_ENABLE = 1 << 8,
} DSCMB_KLSrc;


typedef enum
{
    E_DSCMB_KL_DST_ACPU = 0x1,
    E_DSCMB_KL_DST_KT_NSA = 0x3,
    E_DSCMB_KL_DST_DMA_AES = 0x4,
    E_DSCMB_KL_DST_DMA_TDES = 0x5,
    E_DSCMB_KL_DST_PRIVATE0 = 0x6,
    E_DSCMB_KL_DST_PRIVATE1 = 0x7,
    E_DSCMB_KL_DST_PRIVATE2 = 0x8,



    E_DSCMB_KL_DST_CPU_ACPU = 0x00000080,

    E_DSCMB_KL_DST_CPU_SCPU = 0x00000081,

    E_DSCMB_KL_DST_TSIO = 0x00000800,

    E_DSCMB_KL_DST_KT_LSAD = 0x00008000,
    E_DSCMB_KL_DST_KT_ESA = 0x00008100,
    E_DSCMB_KL_DST_KT_LSAS = 0x00008200,
    E_DSCMB_KL_DST_KT_PIDSLOTMAP_ENABLE = (1 << 14),

    E_DSCMB_KL_DST_CFB = 0x00080000,

    E_DSCMB_KL_DST_DMA_SK0 = 0x00800000,
    E_DSCMB_KL_DST_DMA_SK1 = 0x00810000,
    E_DSCMB_KL_DST_DMA_SK2 = 0x00820000,
    E_DSCMB_KL_DST_DMA_SK3 = 0x00830000,
    E_DSCMB_KL_DST_DMA_PVRLUT0 = 0x00840000,
    E_DSCMB_KL_DST_DMA_PVRLUT1 = 0x00850000,
    E_DSCMB_KL_DST_DMA_PVRLUT2 = 0x00860000,
    E_DSCMB_KL_DST_DMA_PVRLUT3 = 0x00870000,
    E_DSCMB_KL_DST_DMA_SPS0 = 0x00880000 ,
    E_DSCMB_KL_DST_DMA_SPS1 = 0x00890000 ,
    E_DSCMB_KL_DST_DMA_SPS2 = 0x008A0000 ,
    E_DSCMB_KL_DST_DMA_SPS3 = 0x008B0000 ,
    E_DSCMB_KL_DST_DMA_SPD0 = 0x008C0000 ,
    E_DSCMB_KL_DST_DMA_SPD1 = 0x008D0000 ,
    E_DSCMB_KL_DST_DMA_SPD2 = 0x008E0000 ,
    E_DSCMB_KL_DST_DMA_SPD3 = 0x008F0000 ,

    E_DSCMB_KL_DST_PRIVATE_0 =(int)0x81000000 ,
    E_DSCMB_KL_DST_PRIVATE_1 =(int)0x82000000 ,
    E_DSCMB_KL_DST_PRIVATE_2 =(int)0x83000000 ,
    E_DSCMB_KL_DST_PRIVATE_3 =(int)0x84000000 ,
} DSCMB_KLDst;

typedef enum
{

    E_DSCMB_CAP_ENGINE_NUM,

    E_DSCMB_CAP_FLT_NUM,

    E_DSCMB_CAP_SUPPORT_ALGORITHM,

    E_DSCMB_CAP_SUPPORT_KEY_TYPE,

    E_DSCMB_CAP_PIDFILTER_MAP_START,

    E_DSCMB_CAP_PIDFILTER_MAP_END,

    E_DSCMB_CAP_SHARE_KEY_SLOT_MAX_NUM,

    E_DSCMB_CAP_SHARE_KEY_REGION_NUM,

    E_DSCMB_CAP_SHARE_KEY_REGION_START,

    E_DSCMB_CAP_SHARE_KEY_REGION_END,
} DSCMB_Query_Type;

typedef enum
{

    E_DSCMB_CFG_HDCP2_TX_CONTENT_CATEGORY_SUPPORT,


    E_DSCMB_CFG_SCMB_STATUS_PUSI_ONLY,

} DSCMB_Option;

typedef enum
{
    E_DSCMB_KL_TDES = 0x00000000,
    E_DSCMB_KL_AES = 0x0000003F,
} DSCMB_KLEng;

typedef enum
{
    E_DSCMB_KL_SEL_DEFAULT = 0,
    E_DSCMB_KL_SEL_CW ,
    E_DSCMB_KL_SEL_PVR ,
} DSCMB_KL_SelEng;


typedef enum
{
    E_DSCMB_KL_TYPE_LV0 = 0,
    E_DSCMB_KL_TYPE_LV1 ,
    E_DSCMB_KL_TYPE_LV2 ,
    E_DSCMB_KL_TYPE_LV3 ,
    E_DSCMB_KL_TYPE_LV4 ,
    E_DSCMB_KL_TYPE_LV5 ,
    E_DSCMB_KL_TYPE_INF = 9 ,
    E_DSCMB_KL_TYPE_S5 = 0xD,
} DSCMB_KLType;

typedef enum
{
    E_DSCMB_KL_128_BITS ,
    E_DSCMB_KL_64_BITS ,
} DSCMB_KL_OutputSize;


typedef struct DLL_PACKED
{
    MS_BOOL bDecrypt;
    MS_BOOL bInverse;
    MS_BOOL bKeepRound;
    MS_U32 u32Round;
    MS_U32 u32EngMode;
    DSCMB_KLType eKLType;
    DSCMB_KL_OutputSize eOutsize;

} DSCMB_KLCfg;

typedef enum
{
    E_KDF_HASH_SHA1,
    E_KDF_HASH_SHA256,
} KDF_TYPE;


typedef enum
{
    E_KDF_HW_KEY1,
    E_KDF_HW_KEY2,
    E_KDF_HW_KEY3,
    E_KDF_HW_KEY4,
    E_KDF_HW_KEY_NUM,
} KDF_HW_KEY_SEL;


typedef struct DLL_PACKED
{
    MS_U16 u16AppId;
    KDF_TYPE eKDFType;
    KDF_HW_KEY_SEL eHWKeyId;
} DSCMB_KL_KDF;

typedef enum
{
    DSCMB_FSCB_UNCHG = 0,
    DSCMB_FSCB_CLEAR,
    DSCMB_FSCB_EVEN,
    DSCMB_FSCB_ODD,
} DSCMB_FSCB;


typedef struct DLL_PACKED
{
    DSCMB_KLEng eAlgo;
    DSCMB_KLSrc eSrc;
    DSCMB_KLDst eDst;
    DSCMB_KL_OutputSize eOutsize;
    DSCMB_Key_Type eKeyType;

    MS_U32 u32Level;
    MS_U32 u32EngID;
    MS_U32 u32DscID;
    MS_U8 *u8KeyACPU;


    MS_U8 *pu8KeyKLIn;
    MS_BOOL bDecrypt;
    MS_BOOL bInverse;


    DSCMB_KL_SelEng eKLSel;
    MS_U32 u32CAVid;
    DSCMB_KL_KDF stKDF;
    DSCMB_FSCB eFSCB;
} DSCMB_KLCfg_All;


typedef enum
{
    E_DSCMB_MAIN_ALGO_AES ,
    E_DSCMB_MAIN_ALGO_CSA2 ,
    E_DSCMB_MAIN_ALGO_DES ,
    E_DSCMB_MAIN_ALGO_TDES ,
    E_DSCMB_MAIN_ALGO_MULTI2 ,
    E_DSCMB_MAIN_ALGO_CSA2_CONF ,
    E_DSCMB_MAIN_ALGO_CSA3 ,
    E_DSCMB_MAIN_ALGO_ASA ,
    E_DSCMB_MAIN_ALGO_TCSA3 ,
    E_DSCMB_MAIN_ALGO_ESSA ,
    E_DSCMB_MAIN_ALGO_DEFAULT = 0xF,
    E_DSCMB_MAIN_ALGO_NUM,
} DSCMB_MainAlgo_Type;


typedef enum
{
    E_DSCMB_SUB_ALGO_NONE = 0 ,
    E_DSCMB_SUB_ALGO_MDI_CBC = 0,
    E_DSCMB_SUB_ALGO_MDI_RCBC ,
    E_DSCMB_SUB_ALGO_MDD_CBC ,
    E_DSCMB_SUB_ALGO_MDD_RCBC ,
    E_DSCMB_SUB_ALGO_LEADING_CLEAR ,
    E_DSCMB_SUB_ALGO_ECB ,
    E_DSCMB_SUB_ALGO_CBC ,
    E_DSCMB_SUB_ALGO_CTR ,
    E_DSCMB_SUB_ALGO_OFB ,
    E_DSCMB_SUB_ALGO_DEFAULT = 0xF,
    E_DSCMB_SUB_ALGO_NUM,
} DSCMB_SubAlgo_Type;


typedef enum
{
    E_DSCMB_RESSB_ALGO_NONE = 0,
    E_DSCMB_RESSB_ALGO_CLR = 0,
    E_DSCMB_RESSB_ALGO_CTS,
    E_DSCMB_RESSB_ALGO_SCTE52,
    E_DSCMB_RESSB_ALGO_XORIV1,
    E_DSCMB_RESSB_ALGO_OC_M,
    E_DSCMB_RESSB_ALGO_XORIV2,
    E_DSCMB_RESSB_ALGO_CTR,
    E_DSCMB_RESSB_ALGO_DEFAULT = 0x7,
    E_DSCMB_RESSB_ALGO_NUM,
} DSCMB_ResSBAlgo_Type;


typedef struct DLL_PACKED
{
    DSCMB_MainAlgo_Type eMainAlgo;
    DSCMB_SubAlgo_Type eSubAlgo;
    DSCMB_ResSBAlgo_Type eResAlgo;
    DSCMB_ResSBAlgo_Type eSBAlgo;
    MS_BOOL bDecrypt;
} DSCMB_Algo_Cfg;

typedef enum
{
    E_DSCMB_CAPVR_PROG0 = 1 ,
    E_DSCMB_CAPVR_PROG1 = 2 ,
} DSCMB_CAPVR_MODE;

typedef enum
{
    E_DSCMB_TSIF_LIVE0,
    E_DSCMB_TSIF_LIVE1,
    E_DSCMB_TSIF_LIVE2,
    E_DSCMB_TSIF_LIVE3,
    E_DSCMB_TSIF_FILE0,
    E_DSCMB_TSIF_FILE1,
    E_DSCMB_TSIF_FILE2,
    E_DSCMB_TSIF_FILE3,
    E_DSCMB_TSIF_NUM,
} DSCMB_TSIF;


#define DSCMB_KL_Status MS_U32

#define KL_STATUS_KEY_OK 0x0000
#define KL_STATUS_ACPU_KEY_NULL 0x0001
#define KL_STATUS_ACPU_OUTKEY_NULL 0x0002
#define KL_STATUS_INVALID_KEYROUND_PARAMETER 0x0004
#define KL_STATUS_INVALID_INPUT_LEVEL 0x0008
#define KL_STATUS_IVALID_DSCMB_ID 0x0010
#define KL_STATUS_WAIT_CW_READY_TIMEOUT 0x0020
#define KL_STATUS_WAIT_KL_READY_TIMEOUT 0x0040
#define KL_STATUS_KL_INPUT_NULL 0x0080

#define KL_STATUS_BAD_KEY 0x0100
#define KL_STATUS_INVALID_FUNCTION 0x0200
#define KL_STATUS_MULTI_FUNCTION 0x0400
#define KL_STATUS_ZERO_ORDER 0x0800
#define KL_STATUS_INTERNAL_BAD_KEY 0x1000
#define KL_STATUS_INVALID_KL_SEL 0x2000




typedef DSCMB_KLSrc DSCMB_KLadderSrc;
#define E_DSCMB_KLAD_SRC_ACPU E_DSCMB_KL_SRC_ACPU
#define E_DSCMB_KLAD_SRC_SECRET_KEY1 E_DSCMB_KL_SRC_SECRET_1
#define E_DSCMB_KLAD_SRC_SECRET_KEY2 E_DSCMB_KL_SRC_SECRET_2
#define E_DSCMB_KLAD_SRC_SECRET_KEY3 E_DSCMB_KL_SRC_SECRET_3
#define E_DSCMB_KLAD_SRC_SECRET_KEY4 E_DSCMB_KL_SRC_SECRET_4
#define E_DSCMB_KLAD_SRC_VGK E_DSCMB_KL_SRC_VGK

typedef DSCMB_KLDst DSCMB_KLadderDst;
#define E_DSCMB_KLAD_DST_KTAB_ESA E_DSCMB_KL_DST_KT_ESA
#define E_DSCMB_KLAD_DST_KTAB_NSA = E_DSCMB_KL_DST_KT_NSA
#define E_DSCMB_KLAD_DST_AESDMA_AES = E_DSCMB_KL_DST_DMA_AES
#define E_DSCMB_KLAD_DST_AESDMA_TDES = E_DSCMB_KL_DST_DMA_TDES
#define E_DSCMB_KLAD_DST_ACPU = E_DSCMB_KL_DST_ACPU

typedef DSCMB_KLCfg DSCMB_KLadderConfig;


#define MDrv_DSCMB_FltAlloc(void) \
    MDrv_DSCMB2_FltAlloc(0)
#define MDrv_DSCMB_FltAlloc_Ex(eFltType) \
    MDrv_DSCMB2_FltAlloc_Ex(0, eFltType)
#define MDrv_DSCMB_FltFree(u32DscmbId) \
    MDrv_DSCMB2_FltFree(0, u32DscmbId)
#define MDrv_DSCMB_FltConnectPid(u32DscmbId,u32Pid) \
    MDrv_DSCMB2_FltConnectPid(0, u32DscmbId, u32Pid)
#define MDrv_DSCMB_FltDisconnectPid(u32DscmbId,u32Pid) \
    MDrv_DSCMB2_FltDisconnectPid(0, u32DscmbId, u32Pid)
#define MDrv_DSCMB_FltConnectFltId(u32DscmbId,u32FltId) \
    MDrv_DSCMB2_FltConnectFltId(0, u32DscmbId, u32FltId)
#define MDrv_DSCMB_FltDisconnectPid_Ex(u32DscmbId,u32Pid) \
    MDrv_DSCMB2_FltDisconnectPid_Ex(0, u32DscmbId, u32Pid)
#define MDrv_DSCMB_FltDisconnectFltId(u32DscmbId,u32FltId) \
    MDrv_DSCMB2_FltDisconnectFltId(0, u32DscmbId, u32FltId)
#define MDrv_DSCMB_FltDscmb(u32DscmbId,bDscmb) \
    MDrv_DSCMB2_FltDscmb(0, u32DscmbId, bDscmb)
#define MDrv_DSCMB_FltTypeSet(u32DscmbId,eType) \
    MDrv_DSCMB2_FltTypeSet(0, u32DscmbId, eType)
#define MDrv_DSCMB_Multi2_SetRound(u32Round) \
    MDrv_DSCMB2_Multi2_SetRound(0, u32Round)
#define MDrv_DSCMB_Multi2_SetSystemKey(u8Syskey) \
    MDrv_DSCMB2_Multi2_SetSystemKey(0, u8Syskey)
#define MDrv_DSCMB_FltKeySet(u32DscmbId,eKeyType,pu8Key) \
    MDrv_DSCMB2_FltKeySet(0, u32DscmbId, eKeyType, pu8Key)
#define MDrv_DSCMB_FltKeyReset(u32DscmbId,eKeyType) \
    MDrv_DSCMB2_FltKeyReset(0, u32DscmbId, eKeyType)
#define MDrv_DSCMB_FltIVSet(u32DscmbId,eKeyType,pu8IV) \
    MDrv_DSCMB2_FltIVSet(0, u32DscmbId, eKeyType, pu8IV)
#define MDrv_DSCMB_PidFlt_ScmbStatus(u32PidFltId,pScmbLevel) \
    MDrv_DSCMB2_PidFlt_ScmbStatus(0, u32PidFltId, pScmbLevel)
#define MDrv_DSCMB_FltKeyReset(u32DscmbId,eKeyType) \
    MDrv_DSCMB2_FltKeyReset(0, u32DscmbId, eKeyType)
# 706 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_Init(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB2_Exit(void);
# 726 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_SetDefaultCAVid(MS_U32 u32EngId, MS_U32 u32CAVid);
# 737 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_U32 MDrv_DSCMB2_FltAlloc(MS_U32 u32EngId);
# 748 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_U32 MDrv_DSCMB2_FltAlloc_Ex(MS_U32 u32EngId, DSCMB_Flt_Type eFltType);
# 760 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltFree(MS_U32 u32EngId, MS_U32 u32DscmbId);
# 771 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltSwitchType(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Flt_Type eFltType);
# 782 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltConnectFltId(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U32 u32FltId);
# 792 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltDisconnectFltId(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U32 u32FltId);


#if !(defined(MSOS_TYPE_OPTEE) || defined(MSOS_TYPE_NUTTX))
# 805 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltConnectPid(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U32 u32Pid);
# 815 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltDisconnectPid(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U32 u32Pid);
# 825 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltDisconnectPid_Ex(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U32 u32Pid);
#endif
# 838 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetAlgo(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Eng_Type eEngType, DSCMB_Algo_Cfg stConfig);
# 851 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetKeyFSCB(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Eng_Type eEngType, DSCMB_Key_Type eKeyType, DSCMB_FSCB eForceSCB);
# 864 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetKey(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Eng_Type eEngType, DSCMB_Key_Type eKeyType, MS_U8* pu8Key);
# 876 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngResetKey(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Eng_Type eEngType, DSCMB_Key_Type eKeyType);
# 888 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetIV(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Key_Type eKeyType, MS_U8* pu8IV);
# 901 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetIV_Ex(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Eng_Type eEngType, DSCMB_Key_Type eKeyType, MS_U8* pu8IV);
# 912 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetRIV(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U8* pu8RIV);
# 924 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetSwitch(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Eng_Type eUppSwitch, DSCMB_Eng_Type eLowSwitch);
# 935 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngSetFSCB(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_FSCB eForceSCB );
# 948 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_EngEnableKey(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Eng_Type eEngType, DSCMB_Key_Type eKeyType, MS_BOOL bEn);
# 958 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_CAPVR_FlowSet(MS_U32 u32EngId, DSCMB_CAPVR_MODE eCaMode, DSCMB_TSIF ePvrSrcTsif);
# 967 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_DualPath_Enable(MS_U32 u32EngId, MS_U32 u32FltId);
# 976 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_DualPath_Disable(MS_U32 u32EngId, MS_U32 u32FltId);
# 989 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltDscmb(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_BOOL bDscmb);
# 1002 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltTypeSet(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Type DscmbType);
# 1013 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltKeySet(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Key_Type eKeyType, MS_U8* pu8Key);
# 1023 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltKeyReset(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Key_Type eKeyType);
# 1035 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_FltIVSet(MS_U32 u32EngId, MS_U32 u32DscmbId, DSCMB_Key_Type eKeyType, MS_U8* pu8IV);
# 1048 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_OptConfig(MS_U32 u32EngId, DSCMB_Option eOpt, void* pInput, void* pOutput, MS_BOOL bSet);
# 1060 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_GetCap(MS_U32 u32EngId, DSCMB_Query_Type eQueryType, void* pInput, void* pOutput);







DLL_PUBLIC MS_BOOL MDrv_DSCMB2_GetLibVer(const MSIF_Version **ppVersion);







DLL_PUBLIC MS_BOOL MDrv_DSCMB2_SetDBGLevel(MS_U32 u32Level);
# 1086 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_GetConnectStatus(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U32 u32TspFltId);
# 1095 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_U32 MDrv_DSCMB2_GetPidSlotMapIndex(MS_U32 u32EngId, MS_U32 u32DscmbId);
# 1106 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_Multi2_SetRound(MS_U32 u32EngId, MS_U32 u32Round);
# 1116 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_Multi2_SetSystemKey(MS_U32 u32EngId, MS_U8* u8Syskey);
# 1125 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_HDCP2_SetRIV(MS_U32 u32EngId, MS_U8* pu8RIV);
# 1135 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_HDCP2_SetRIV_Ex(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U8* pu8RIV);
# 1145 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_PVR_RecCtrl(MS_U32 u32EngId, MS_BOOL Enable);
# 1155 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_U32 MDrv_DSCMB2_SetPowerState(EN_POWER_MODE u16PowerState);
# 1166 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_PidFlt_ScmbStatus(MS_U32 u32EngId, MS_U32 u32PidFltId, SCMB_Level* pScmbLevel);
# 1175 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB_GetStatus(DSCMB_Status *pStatus);





DLL_PUBLIC const DSCMB_Info* MDrv_DSCMB_GetInfo(void);
# 1193 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB2_KLadder_ETSI(DSCMB_KLCfg_All* KLCfg , MS_U8 *ACPU_Out, MS_U8 *pu8Nonce, MS_U8 * pu8Response, DSCMB_KL_Status* u32Status );






DLL_PUBLIC MS_BOOL MDrv_DSCMB2_KLadder_AtomicExec(DSCMB_KLCfg_All* KLCfg , MS_U8 *ACPU_Out, DSCMB_KL_Status* u32Status );
# 1212 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB_Init(void);






DLL_PUBLIC MS_BOOL MDrv_DSCMB_Exit(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_GetLibVer(const MSIF_Version **ppVersion);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_SetDBGLevel(MS_U32 u32Level);
# 1246 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB_GetConnectStatus(MS_U32 u32EngId, MS_U32 u32DscmbId, MS_U32 u32TspFltId);






DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_AtomicExec(DSCMB_KLCfg_All* KLCfg , MS_U8 *ACPU_Out, DSCMB_KL_Status* u32Status);






DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Reset(void);






DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_SetInput(MS_U32 u32Level, MS_U8* pu8In, MS_U32 u32InLen);






DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_SetKey(DSCMB_KLSrc KLSrc, MS_U8* pu8Key, MS_U32 u32KeyLen);






DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_SetDst(DSCMB_KLDst KLDst);







DLL_PUBLIC void MDrv_DSCMB_KLadder_SetConfig(DSCMB_KLCfg *KLCfg);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Start(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_IsComplete(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Output_Start(MS_U32 u32DscmbId, DSCMB_Key_Type eKeyType);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Output_IsComplete(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Output_Stop(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_ResetAcpuAck(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_ReadDataFromAcpu(MS_U8* pu8Out);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Stop(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Lock(void);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_KLadder_Unlock(void);
# 1379 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB_2ndarySet(MS_U32 u32PidPrim, MS_U32 u32Pid2ndary);







DLL_PUBLIC MS_BOOL MDrv_DSCMB_2ndaryReset(MS_U32 u32PidPrim);
# 1399 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDSCMB.h"
DLL_PUBLIC MS_BOOL MDrv_DSCMB_SlotSwitchWrite(MS_U32 u32DscmbId, DSCMB_Key_Type eKeyType, MS_U32 u32SW0, MS_U32 u32SW1, MS_U32 u32SW2);







DLL_PUBLIC MS_BOOL MDrv_DSCMB2_SetRecBuf(MS_U32 u32EngId , MS_U32 u32Start, MS_U32 u32Size);







DLL_PUBLIC MS_BOOL MDrv_DSCMB2_RecCtrl(MS_U32 u32EngId, MS_BOOL bEnable);







DLL_PUBLIC MS_BOOL MDrv_DSCMB2_GetRecWptr(MS_U32 u32EngId, MS_U32* pu32Write);







DLL_PUBLIC MS_U32 MApi_DSCMB_SetPowerState(EN_POWER_MODE u16PowerState);


#ifdef __cplusplus
}
#endif

#endif
# 79 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/api_mfe_frmformat.h"
#ifndef _API_MFE_FRMFORMAT_H_
#define _API_MFE_FRMFORMAT_H_ 

#include "MsTypes.h"

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum
{
MFE_API_MFE_COLORFORMAT_MSTTILE = 0,
MFE_API_MFE_COLORFORMAT_YUYV = 1,
MFE_API_MFE_COLORFORMAT_YVYU = 2,
MFE_API_MFE_COLORFORMAT_UYVY = 3,
MFE_API_MFE_COLORFORMAT_VYUY = 4,
} MFE_API_MFE_COLORFORMAT;

typedef struct _MS_MfeFrameFormat
{
    MS_PHY Cur_PhyY0;
    MS_U8* Cur_VirY0;
    MS_PHY Cur_PhyC0;
    MS_U8* Cur_VirC0;
    MS_PHY Cur_PhyY1;
    MS_U8* Cur_VirY1;
    MS_PHY Cur_PhyC1;
    MS_U8* Cur_VirC1;

} MS_MfeFrameFormat_t;

typedef struct _MS_MfeEXIFInfo
{
    MS_U32 tmp;
} MS_MfeEXIFInfo_t;

typedef struct _MS_MfeAdvInfo
{
    MS_U32 frame_mode;
    MS_U32 has_exif;
    MS_U32 framerate_change;
    MS_U32 new_framerate;
    MFE_API_MFE_COLORFORMAT colorformat;
} MS_MfeAdvInfo_t;

typedef struct _MS_MfeFrameInfo
{
    MS_U8 starcode[5];
    MS_MfeFrameFormat_t inbuf;
    MS_MfeAdvInfo_t advbuf;

} MS_MfeFrameInfo_t;

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI_v2.h"
#ifndef _DRV_MSPI_V2_H_
#define _DRV_MSPI_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif







typedef enum {
    MDrv_CMD_MSPI_Init_Ext,
    MDrv_CMD_MSPI_Init,
    MDrv_CMD_MSPI_Read,
    MDrv_CMD_MSPI_Write,
    MDrv_CMD_MSPI_DCConfig,
    MDrv_CMD_MSPI_CLKConfig,
    MDrv_CMD_MSPI_FRAMEConfig,
    MDrv_CMD_MSPI_SlaveEnable,
    MDrv_CMD_MSPI_SetPowerState,
    MDrv_CMD_MSPI_DbgLEvel,
    MDrv_CMD_MasterSPI_Init_Ext,
    MDrv_CMD_MasterSPI_Init,
    MDrv_CMD_MasterSPI_Read,
    MDrv_CMD_MasterSPI_Write,
    MDrv_CMD_MasterSPI_DCConfig,
    MDrv_CMD_MasterSPI_CLKConfig,
    MDrv_CMD_MasterSPI_FRAMEConfig,
    MDrv_CMD_MasterSPI_SlaveEnable,
    MDrv_CMD_MasterSPI_CSPadConfig,
    MDrv_CMD_MasterSPI_MaxClkConfig,
} eMSPIIoctlOpt;
# 148 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI_v2.h"
typedef struct _MPSI_INIT_EXT
{
    MS_U8 u8HWNum;
}MSPI_INIT_EXT, *PMSPI_INIT_EXT;

typedef struct _MSPI_INIT
{
    MSPI_config *ptMSPIConfig;
    MS_U8 u8HWNum;
}MSPI_INIT, *PMSPI_INIT;

typedef struct _MSPI_READ
{
    MS_U8 *pu8Data;
    MS_U16 u16Size;
}MSPI_READ, *PMSPI_READ;

typedef struct _MSPI_WRITE
{
    MS_U8 *pu8Data;
    MS_U16 u16Size;
}MSPI_WRITE, *PMSPI_WRITE;

typedef struct _MSPI_DCCONFIG
{
    MSPI_DCConfig *ptDCConfig;
}MSPI_DCCONFIG, *PMSPI_DCCONFIG;

typedef struct _MSPI_CLKCONFIG
{
    MSPI_CLKConfig *ptCLKConfig;
}MSPI_CLKCONFIG, *PMSPI_CLKCONFIG;

typedef struct _MSPI_FRAMECONFIG
{
    MSPI_FrameConfig *ptFrameConfig;
}MSPI_FRAMECONFIG, *PMSPI_FRAMECONFIG;

typedef struct _MSPI_SLAVE_ENABLE
{
    MS_BOOL bEnable;
}MSPI_SLAVE_ENABLE, *PMSPI_SLAVE_ENABLE;

typedef struct _MSPI_SETPOWERSTATE
{
    EN_POWER_MODE enPowerState;
}MSPISETPOWERSTATE, *PMSPISETPOWERSTATE;

typedef struct _MASTERSPI_READ
{
    MS_U32 u32DevID;
    MS_U8 *pu8Data;
    MS_U16 u16Size;
}MASTERSPI_READ, *PMASTERSPI_READ;

typedef struct _MASTERSPI_WRITE
{
    MS_U32 u32DevID;
    MS_U8 *pu8Data;
    MS_U16 u16Size;
}MASTERSPI_WRITE, *PMASTERSPI_WRITE;

typedef struct _MASTERSPI_DCCONFIG
{
    MS_U32 u32DevID;
    MSPI_DCConfig *ptDCConfig;
}MASTERSPI_DCCONFIG, *PMASTERSPI_DCCONFIG;

typedef struct _MASTERSPI_CLKCONFIG
{
    MS_U32 u32DevID;
    MSPI_CLKConfig *ptCLKConfig;
}MASTERSPI_CLKCONFIG, *PMASTERSPI_CLKCONFIG;

typedef struct _MASTERSPI_FRAMECONFIG
{
    MS_U32 u32DevID;
    MSPI_FrameConfig *ptFrameConfig;
}MASTERSPI_FRAMECONFIG, *PMASTERSPI_FRAMECONFIG;

typedef struct _MASTERSPI_SLAVE_ENABLE
{
    MS_U32 u32DevID;
    MS_BOOL bEnable;
}MASTERSPI_SLAVE_ENABLE, *PMASTERSPI_SLAVE_ENABLE;

typedef struct _MASTERSPI_CSPADCONFIG
{
    MS_U32 u32DevID;
    MS_U32 u32CsPad;
}MASTERSPI_CS_PADCONFIG, *PMASTERSPI_CSPADCONFIG;

typedef struct _MASTERSPI_MAXCLKCONFIG
{
    MS_U32 u32DevID;
    MS_U32 u32MaxClk;
}MASTERSPI_MAXCLKCONFIG, *PMASTERSPI_MAXCLKCONFIG;

typedef struct _MSPI_SETDBGLEVEL
{
    MS_U8 u8DbgLevel;
}MSPI_SETDBGLEVEL, *PMSPI_SETDBGLEVEL;





typedef struct
{
    MS_U8 u8MspiChanel;
    MS_U8 u8MspiMode;
    MS_U32 u32MspiClk;
    MS_U8 u8WBitConfig[8];
    MS_U8 u8RBitConfig[8];
    MS_U8 u8TrStart;
    MS_U8 u8TrEnd;
    MS_U8 u8TB;
    MS_U8 u8TRW;
}ST_DRV_MSPI_INFO;
# 278 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMSPI_v2.h"
#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT_v2.h"
#ifndef _DRV_DVBT_V2_H_
#define _DRV_DVBT_V2_H_ 



#include "drvDMD_INTERN_DVBT.h"
#ifdef __cplusplus
extern "C"
{
#endif



typedef enum {
    DMD_DVBT_DRV_CMD_Init,
    DMD_DVBT_DRV_CMD_Exit,
    DMD_DVBT_DRV_CMD_SetDbgLeve,
    DMD_DVBT_DRV_CMD_GetInfo,
    DMD_DVBT_DRV_CMD_GetLibVer,
    DMD_DVBT_DRV_CMD_GetFWVer,
    DMD_DVBT_DRV_CMD_GetReg,
    DMD_DVBT_DRV_CMD_SetReg,
    DMD_DVBT_DRV_CMD_SetSerialControl,
    DMD_DVBT_DRV_CMD_SetConfig,
    DMD_DVBT_DRV_CMD_SetConfigHPLP,
    DMD_DVBT_DRV_CMD_SetConfigHPLPSetIF,
    DMD_DVBT_DRV_CMD_SetActive,
    DMD_DVBT_DRV_CMD_GetLock,
    DMD_DVBT_DRV_CMD_GetSignalStrength,
    DMD_DVBT_DRV_CMD_GetSignalStrengthWithRFPower,
    DMD_DVBT_DRV_CMD_GetSignalQuality,
    DMD_DVBT_DRV_CMD_GetSignalQualityWithRFPower,
    DMD_DVBT_DRV_CMD_GetSNR,
    DMD_DVBT_DRV_CMD_GetPostViterbiBer,
    DMD_DVBT_DRV_CMD_GetPreViterbiBer,
    DMD_DVBT_DRV_CMD_GetPacketErr,
    DMD_DVBT_DRV_CMD_GetTPSInfo,
    DMD_DVBT_DRV_CMD_GetCellID,
    DMD_DVBT_DRV_CMD_GetFreqOffset,
    DMD_DVBT_DRV_CMD_NORDIGSSITableWrite,
    DMD_DVBT_DRV_CMD_NORDIGSSITableRead,
    DMD_DVBT_DRV_CMD_SetPowerState,

    DMD_DVBT_DRV_CMD_GetIFAGC
} DMD_DVBT_DRV_COMMAND;

typedef struct DLL_PACKED _DMD_DVBT_InitData_Transform
{

    MS_U8 u8SarChannel;
# 168 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT_v2.h"
    MS_U8 *u8DMD_DVBT_DSPRegInitExt;
    MS_U8 u8DMD_DVBT_DSPRegInitSize;
    MS_U8 *u8DMD_DVBT_InitExt;
} DMD_DVBT_InitData_Transform;

typedef struct DLL_PACKED _DVBT_EXIT_PARAM
{
 MS_BOOL ret;
}DVBT_EXIT_PARAM, *PDVBT_EXIT_PARAM;

typedef struct DLL_PACKED _DVBT_SETDBG_LEVEL_PARAM
{
    DMD_DbgLv u8DbgLevel;
    MS_BOOL ret;
} DVBT_SETDBG_LEVEL_PARAM, *PDVBT_SETDBG_LEVEL_PARAM;

typedef struct DLL_PACKED _DVBT_INIT_PARAM
{
    DMD_DVBT_InitData_Transform *DMD_DVBT_InitData;
    MS_U32 u32InitDataLen;
 MS_BOOL ret;
} DVBT_INIT_PARAM, *PDVBT_INIT_PARAM;

typedef struct DLL_PACKED _DVBT_GETINFO_PARAM
{
    DMD_DVBT_INFO_TYPE eInfoType;
 DMD_DVBT_Info* pInfo;
 MS_BOOL ret;
} DVBT_GETINFO_PARAM, *PDVBT_GETINFO_PARAM;







typedef struct DLL_PACKED _DVBT_GETLIBVER_PARAM
{
    const MSIF_Version **ppVersion;
    MS_BOOL ret;
} DVBT_GETLIBVER_PARAM, *PDVBT_GETLIBVER_PARAM;

typedef struct DLL_PACKED _DVBT_GETFWVER_PARAM
{
    MS_U16 *ver;
   MS_BOOL ret;
} DVBT_GETFWVER_PARAM, *PDVBT_GETFWVER_PARAM;

typedef struct DLL_PACKED _DVBT_GETREG_PARAM
{
    MS_U16 u16Addr;
    MS_U8 *pu8Data;
   MS_BOOL ret;
} DVBT_GETREG_PARAM, *PDVBT_GETREG_PARAM;

typedef struct DLL_PACKED _DVBT_SETREG_PARAM
{
    MS_U16 u16Addr;
    MS_U8 u8Data;
   MS_BOOL ret;
} DVBT_SETREG_PARAM, *PDVBT_SETREG_PARAM;

typedef struct DLL_PACKED _DVBT_SetSerialControl_PARAM
{
    MS_BOOL bEnable;
    MS_BOOL ret;
} DVBT_SetSerialControl_PARAM, *PDVBT_SetSerialControl_PARAM;

typedef struct DLL_PACKED _DVBT_SetConfig_PARAM
{
    DMD_RF_CHANNEL_BANDWIDTH BW;
    MS_BOOL bSerialTS;
    MS_BOOL bPalBG;
    MS_BOOL ret;
} DVBT_SetConfig_PARAM, *PDVBT_SetConfig_PARAM;

typedef struct DLL_PACKED _DVBT_SetConfigHPLP_PARAM
{
    DMD_RF_CHANNEL_BANDWIDTH BW;
    MS_BOOL bSerialTS;
    MS_BOOL bPalBG;
    MS_BOOL bLPSel;
    MS_BOOL ret;
} DVBT_SetConfigHPLP_PARAM, *PDVBT_SetConfigHPLP_PARAM;

typedef struct DLL_PACKED _DVBT_SetConfigHPLPSetIF_PARAM
{
    DMD_RF_CHANNEL_BANDWIDTH BW;
    MS_BOOL bSerialTS;
    MS_BOOL bPalBG;
    MS_BOOL bLPSel;
    MS_U32 u32IFFreq;
    MS_U32 u32FSFreq;
    MS_U8 u8IQSwap;
    MS_BOOL ret;
} DVBT_SetConfigHPLPSetIF_PARAM, *PDVBT_SetConfigHPLPSetIF_PARAM;

typedef struct DLL_PACKED _DVBT_SetActive_PARAM
{
    MS_BOOL bEnable;
    MS_BOOL ret;
} DVBT_SetActive_PARAM, *PDVBT_SetActive_PARAM;

typedef struct DLL_PACKED _DVBT_GetLock_PARAM
{
    DMD_DVBT_GETLOCK_TYPE eType;
    DMD_LOCK_STATUS *eLockStatus;
    MS_BOOL ret;
} DVBT_GetLock_PARAM, *PDVBT_GetLock_PARAM;

typedef struct DLL_PACKED _DVBT_GetSignalStrength_PARAM
{
    MS_U16 *u16Strength;
    MS_BOOL ret;
} DVBT_GetSignalStrength_PARAM, *PDVBT_GetSignalStrength_PARAM;


#if(0)
typedef struct _DVBT_GetSignalStrengthWithRFPower_PARAM
{
    MS_U16 *u16Strength;
    float fRFPowerDbm;
    MS_BOOL ret;
} DVBT_GetSignalStrengthWithRFPower_PARAM, *PDVBT_GetSignalStrengthWithRFPower_PARAM;
#endif

typedef struct DLL_PACKED _DVBT_GetSignalQuality_PARAM
{
    MS_U16 *u16Quality;
    MS_BOOL ret;
} DVBT_GetSignalQuality_PARAM, *PDVBT_GetSignalQuality_PARAM;

typedef struct DLL_PACKED _DVBT_GetSignalQualityWithRFPower_PARAM
{
    MS_U16 *u16Quality;
    float fRFPowerDbm;
    MS_BOOL ret;
} DVBT_GetSignalQualityWithRFPower_PARAM, *PDVBT_GetSignalQualityWithRFPower_PARAM;


typedef struct _DVBT_GetSNR_PARAM
{
    MS_U32 *noise_power_reg;
    MS_BOOL ret;
} DVBT_GetSNR_PARAM, *PDVBT_GetSNR_PARAM;


typedef struct _DVBT_GetIFAGC_PARAM
{
 MS_U8 *ifagc_reg;
 MS_U8 *ifagc_reg_lsb;
 MS_U16 *ifagc_err_reg;
 MS_BOOL ret;
}DVBT_GetIFAGC_PARAM,*PDVBT_GetIFAGC_PARAM;


typedef struct _DVBT_GetPostViterbiBer_PARAM
{
 MS_U32 *BitErr_reg;
 MS_U16 *BitErrPeriod_reg;
 MS_U16 *PktErr_reg;
 MS_BOOL ret;
} DVBT_GetPostViterbiBer_PARAM, *PDVBT_GetPostViterbiBer_PARAM;


#if(0)
typedef struct _DVBT_GetPreViterbiBer_PARAM
{
    float *ber;
    MS_BOOL ret;
} DVBT_GetPreViterbiBer_PARAM, *PDVBT_GetPreViterbiBer_PARAM;
#endif

typedef struct DLL_PACKED _DVBT_GetPacketErr_PARAM
{
    MS_U16 *pktErr;
    MS_BOOL ret;
} DVBT_GetPacketErr_PARAM, *PDVBT_GetPacketErr_PARAM;

typedef struct DLL_PACKED _DVBT_GetTPSInfo_PARAM
{
    MS_U16 *u16Info;
    MS_BOOL ret;
} DVBT_GetTPSInfo_PARAM, *PDVBT_GetTPSInfo_PARAM;

typedef struct DLL_PACKED _DVBT_GetCellID_PARAM
{
    MS_U16 *u16CellID;
    MS_BOOL ret;
} DVBT_GetCellID_PARAM, *PDVBT_GetCellID_PARAM;


#if(0)
typedef struct _DVBT_GetFreqOffset_PARAM
{
    float *pFreqOff;
    MS_BOOL ret;
} DVBT_GetFreqOffset_PARAM, *PDVBT_GetFreqOffset_PARAM;
#endif


#if(0)
typedef struct _DVBT_NORDIGSSITableWrite_PARAM
{
    DMD_CONSTEL constel;
    DMD_CODERATE code_rate;
    float write_value;
    MS_BOOL ret;
} DVBT_NORDIGSSITableWrite_PARAM, *PDVBT_NORDIGSSITableWrite_PARAM;

typedef struct DLL_PACKED _DVBT_NORDIGSSITableRead_PARAM
{
    DMD_CONSTEL constel;
    DMD_CODERATE code_rate;
    float *read_value;
    MS_BOOL ret;
} DVBT_NORDIGSSITableRead_PARAM, *PDVBT_NORDIGSSITableRead_PARAM;
#endif

typedef struct DLL_PACKED _DVBT_SetPowerState_PARAM
{
    EN_POWER_MODE u16PowerState;
    MS_BOOL ret;
} DVBT_SetPowerState_PARAM, *PDVBT_SetPowerState_PARAM;
# 403 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBT_v2.h"
MS_U32 DVBTOpen(void** pInstantTmp, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 DVBTClose(void* pInstantTmp);
MS_U32 DVBTIoctl(void* pInstantTmp, MS_U32 u32Cmd, void* pArgs);



#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI_v2.h"
#ifndef __DRV_VBI_V2_H__
#define __DRV_VBI_V2_H__ 

#include "drvVBI.h"
#include "drvDMX_TTX.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif

typedef enum
{
    VBI_POOL_ID_VBI0 = 0,
    VBI_POOL_ID_VBI1 = 1,
} eVBIPoolID;

typedef enum {

    MDrv_CMD_VBI_RingBuffer_Reset = 0,
    MDrv_CMD_VBI_RegisterCB,
    MDrv_CMD_VBI_InitializeTTXSlicer,
    MDrv_CMD_VBI_EnableTTXSlicer,
    MDrv_CMD_VBI_IsVPS_Ready,
    MDrv_CMD_VBI_IsTTX_Ready,
    MDrv_CMD_VBI_IsWSS_Ready,
    MDrv_CMD_VBI_GetWSS_Data,
    MDrv_CMD_VBI_GetVPS_Data,
    MDrv_CMD_VBI_SetVideoStandard,
    MDrv_CMD_VBI_TTX_PacketBufferIsEmpty,
    MDrv_CMD_VBI_TTX_CheckCircuitReady,
    MDrv_CMD_VBI_TTX_GetPacketCount,
    MDrv_CMD_VBI_TTX_GetPackets,
    MDrv_CMD_VBI_TTX_GetPacket,
    MDrv_CMD_VBI_TTX_PacketBufferIsOverflow,
    MDrv_CMD_VBI_TTX_PacketBufferGetNoOfOverflows,
    MDrv_CMD_VBI_TTX_EnableLine,
    MDrv_CMD_VBI_WSS_SetVpsByteNum,
    MDrv_CMD_VBI_GetCompleteVPS_Data,
    MDrv_CMD_VBI_GetRawVPS_Data,


    MDrv_CMD_VBI_CC_InitSlicer = 100,
    MDrv_CMD_VBI_CC_InitYPbYr,
    MDrv_CMD_VBI_CC_SetDataRate,
    MDrv_CMD_VBI_CC_GetInfo,
    MDrv_CMD_VBI_CC_SetFrameCnt,
    MDrv_CMD_VBI_CC_EnableSlicer,
    MDrv_CMD_VBI_CC_EnableLine,
    MDrv_CMD_VBI_CC_SetSCWindowLen,
    MDrv_CMD_VBI_CC_SetVideoStandard,


    MDrv_CMD_DMX_TTX_RingBuffer_Reset = 200,
    MDrv_CMD_DMX_TTX_Init,
    MDrv_CMD_DMX_TTX_SetFilterID,
    MDrv_CMD_DMX_TTX_SetCB,
    MDrv_CMD_DMX_TTX_PacketBufferIsEmpty,
    MDrv_CMD_DMX_TTX_GetPackets,
    MDrv_CMD_DMX_TTX_GetPacket,
    MDrv_CMD_DMX_TTX_PacketBufferIsOverflow,
    MDrv_CMD_DMX_TTX_PacketBufferGetNoOfOverflows,
    MDrv_CMD_DMX_TTX_Exit,


    MDrv_CMD_VBI_ObtainEng = 300,
    MDrv_CMD_VBI_ReleaseEng,
    MDrv_CMD_VBI_QueryCap,
    MDrv_CMD_VBI_GetLibVer,
    MDrv_CMD_VBI_GetInfo,
    MDrv_CMD_VBI_GetStatus,
    MDrv_CMD_VBI_SetDbgLevel,
    MDrv_CMD_VBI_Init,
    MDrv_CMD_VBI_SyncMemory,
    MDrv_CMD_VBI_Exit,
    MDrv_CMD_VBI_ProtectMemory,

    MDrv_CMD_VBI_Suspend,
    MDrv_CMD_VBI_Resume,
    MDrv_CMD_VBI_SetPowerState,

    MDrv_CMD_DMX_TTX_Suspend,
    MDrv_CMD_DMX_TTX_Resume,
    MDrv_CMD_DMX_TTX_SetPowerState,
} eVBIIoctlOpt;

typedef struct DLL_PACKED _VBI_BOOL
{
    MS_BOOL bCheck;
} VBI_BOOL, *PVBI_BOOL;

typedef struct DLL_PACKED _VBI_GET_DATA
{
    MS_U16 u16data;
} VBI_GET_DATA, *PVBI_GET_DATA;

typedef struct _VBI_GET_RESULT
{
    EN_POWER_MODE u16PowerState;
    MS_U32 u32result;
} VBI_GET_RESULT, *PVBI_GET_RESULT;



typedef struct _VBI_GETLIBVER
{
    const MSIF_Version **ppVersion;
} VBI_GETLIBVER_PARAM, *PVBI_GETLIBVER;

typedef struct DLL_PACKED _VBI_GETINFO
{
    MS_U8 u8NoInfo;
} VBI_GETINFO_PARAM, *PVBI_GETINFO_PARAM;

typedef struct DLL_PACKED _GETSTATUS
{
    VBI_DrvStatus *pDrvStatus;
} VBI_GETSTATUS_PARAM, *PVBI_GETSTATUS;

typedef struct DLL_PACKED _VBI_SETDBGLEVEL
{
    MS_U16 u16DbgSwitch;
} VBI_SETDBGLEVEL_PARAM, *PVBI_SETDBGLEVEL;

typedef struct DLL_PACKED _VBI_CMD
{
    EN_VBI_CMD cmd;
} VBI_CMD, *PVBI_CMD;

typedef struct DLL_PACKED _VBI_INIT_TYPE
{
    EN_VBI_CMD cmd;
    VBI_INIT_TYPE type;
} VBI_INIT_TYPE_PARAM, *PVBI_INIT_TYPE;

typedef struct DLL_PACKED _DMX_TTX_CMD
{
    EN_VBI_CMD cmd;
} DMX_TTX_CMD, *PDMX_TTX_CMD;

typedef struct DLL_PACKED _VBI_REGISTER_CB
{
    VBI_CB_FN pFN;
#if defined(UFO_PUBLIC_HEADER_300)
    MS_PHYADDR bufferAddr;
#else
    MS_PHY bufferAddr;
#endif
    MS_U32 length;
} VBI_REGISTER_CB, *PVBI_REGISTER_CB;

typedef struct DLL_PACKED _VBI_INITIALIZER_TTX_SLICER
{
    EN_VBI_CMD cmd;
#if defined(UFO_PUBLIC_HEADER_300)
    MS_PHYADDR bufferAddr;
#else
    MS_PHY bufferAddr;
#endif
    MS_U16 packetCount;
} VBI_INITIALIZER_TTX_SLICER, *PVBI_INITIALIZER_TTX_SLICER;

typedef struct DLL_PACKED _VBI_ENABLE_TTX_SLICER
{
    MS_BOOL bEnable;
} VBI_ENABLE_TTX_SLICER, *PVBI_ENABLE_TTX_SLICER, VBI_CC_ENABLE_SLICER, *PVBI_CC_ENABLE_SLICER;

typedef struct DLL_PACKED _VBI_GET_VPS_DATA
{
    MS_U8 *lowerWord;
    MS_U8 *higherWord;
} VBI_GET_VPS_DATA, *PVBI_GET_VPS_DATA;

typedef struct DLL_PACKED _VBI_GET_COMPLETE_VPS_DATA
{
    MS_U8 **pBuffer;
    MS_U32 *length;
} VBI_GET_COMPLETE_VPS_DATA, *PVBI_GET_COMPLETE_VPS_DATA;

typedef struct DLL_PACKED _VBI_GET_RAW_VPS_DATA
{
    MS_U8 byte0;
    MS_U8 byte1;
    MS_U8 byte2;
    MS_U8 byte3;
} VBI_GET_RAW_VPS_DATA, *PVBI_GET_RAW_VPS_DATA;

typedef struct DLL_PACKED _VBI_SET_VIDEO_STANDARD
{
    VBI_VIDEO_STANDARD eStandard;
    MS_BOOL bRet;
} VBI_SET_VIDEO_STANDARD, *PVBI_SET_VIDEO_STANDARD;


typedef struct DLL_PACKED _VBI_TTX_GET_PACKETS
{
#if defined(UFO_PUBLIC_HEADER_300)
    MS_PHYADDR dataAddr;
#else
    MS_PHY dataAddr;
#endif
    MS_U32 *length;
} VBI_TTX_GET_PACKETS, *PVBI_TTX_GET_PACKETS;

typedef struct DLL_PACKED _VBI_TTX_GET_PACKET
{
#if defined(UFO_PUBLIC_HEADER_300)
    MS_PHYADDR *packetAddress;
#else
    MS_PHY *packetAddress;
#endif
} VBI_TTX_GET_PACKET, *PVBI_TTX_GET_PACKET;

typedef struct DLL_PACKED _VBI_TTX_ENABLE_LINE
{
    MS_U16 StartLine;
    MS_U16 EndLine;
} VBI_TTX_ENABLE_LINE, *PVBI_TTX_ENABLE_LINE;

typedef struct DLL_PACKED _VBI_SYNC_MEMORY
{
    MS_U32 u32Start;
    MS_U32 u32Size;
} VBI_SYNC_MEMORY, *PVBI_SYNC_MEMORY;

typedef struct DLL_PACKED _VBI_CC_INIT_SLICER
{
#if defined(UFO_PUBLIC_HEADER_300)
    MS_U32 u32RiuAddr;
    MS_PHYADDR bufferAddr;
#else
    MS_VIRT u32RiuAddr;
    MS_PHY bufferAddr;
#endif
    MS_U16 packetCount;
} VBI_CC_INIT_SLICER, *PVBI_CC_INIT_SLICER;

typedef struct DLL_PACKED _VBI_CC_INIT_YPBYR
{
    MS_U8 cvbs_no;
} VBI_CC_INIT_YPBYR, *PVBI_CC_INIT_YPBYR;

typedef struct DLL_PACKED _VBI_CC_SETDATARATE
{
    MS_U8 *ptable;
} VBI_CC_SETDATARATE, *PVBI_CC_SETDATARATE;

typedef struct DLL_PACKED _VBI_CC_GETINFO
{
    MS_U32 selector;
    MS_U32 info;
} VBI_CC_GETINFO, *PVBI_CC_GETINFO;

typedef struct DLL_PACKED _VBI_CC_SET_FRAMECNT
{
    MS_U8 cnt;
} VBI_CC_SET_FRAMECNT, *PVBI_CC_SET_FRAMECNT, VBI_VBI_WSS_VPSBYTENUM, *PVBI_VBI_WSS_VPSBYTENUM;

typedef struct DLL_PACKED _VBI_CC_ENABLE_LINE
{
    MS_U16 StartLine;
    MS_U16 EndLine;
    MS_U8 mode;
} VBI_CC_ENABLE_LINE, *PVBI_CC_ENABLE_LINE;

typedef struct DLL_PACKED _VBI_CC_SET_SC_WND_LEN
{
    MS_U8 u8Len;
    MS_BOOL bRet;
} VBI_CC_SET_SC_WND_LEN, *PVBI_CC_SET_SC_WND_LEN;

typedef struct DLL_PACKED _VBI_PROTECT_MEMORY
{
    MS_BOOL bEnable;
    MS_PHY phyAddr;
    MS_U32 u32Size;
    MS_BOOL bRet;
} VBI_PROTECT_MEMORY, *PVBI_PROTECT_MEMORY;

typedef struct DLL_PACKED _DMX_TTX_SET_FILTERID
{
    MS_U8 fid;
} DMX_TTX_SET_FILTERID, *PDMX_TTX_SET_FILTERID;

typedef struct DLL_PACKED _DMX_TTX_SET_CB
{
    DMX_CB_FN fn;
} DMX_TTX_SET_CB, *PDMX_TTX_SET_CB;

#ifdef __cplusplus
}
#endif

#endif
# 131 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
#ifndef _API_XC_PANEL_H_
#define _API_XC_PANEL_H_ 

#include "MsDevice.h"
#include "MsVersion.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C" {
#endif

#ifdef _API_XC_PANEL_C_
#define INTERFACE 
#else
#define INTERFACE extern
#endif
# 155 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
#ifdef MSOS_TYPE_LINUX_KERNEL
#define SYMBOL_WEAK 
#else
#define SYMBOL_WEAK __attribute__((weak))
#endif

#ifndef _MS_VERSION_H_
#define MSIF_TAG {'M','S','I','F'}
#define MSIF_CLASS {'0','0'}
#define MSIF_CUS 0x0000
#define MSIF_MOD 0x0000
#define MSIF_CHIP 0x000B
#define MSIF_CPU '0'
#define MSIF_OS '2'
#endif


#define MSIF_PNL_LIB_CODE {'P','N','L','_'}
#define MSIF_PNL_LIBVER {'0','3'}
#define MSIF_PNL_BUILDNUM {'5','2'}
#define MSIF_PNL_CHANGELIST {'0','0','6','1','4','4','7','7'}

#define PNL_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_PNL_LIB_CODE , \
    MSIF_PNL_LIBVER , \
    MSIF_PNL_BUILDNUM , \
    MSIF_PNL_CHANGELIST, \
    MSIF_OS


#define API_PNLSTATUS_EX_VERSION 1




#define PNL_DBGLEVEL_OFF (0x0000)
#define PNL_DBGLEVEL_INIT (0x0001)
#define PNL_DBGLEVEL_PANEL_EN (0x0002)
#define PNL_DBGLEVEL_SSC (0x0004)
#define PNL_DBGLEVEL_GAMMA (0x0008)
#define PNL_DBGLEVEL_CALIBRATION (0x0010)





typedef enum
{
    E_APIPNL_FAIL = 0,
    E_APIPNL_OK = 1,
    E_APIPNL_GET_BASEADDR_FAIL,
    E_APIPNL_OBTAIN_MUTEX_FAIL,
} APIPNL_Result;


typedef enum
{
    E_PNL_ASPECT_RATIO_4_3 = 0,
    E_PNL_ASPECT_RATIO_WIDE,
    E_PNL_ASPECT_RATIO_OTHER,
}E_PNL_ASPECT_RATIO;


typedef enum
{
    E_APIPNL_GAMMA_10BIT = 0,
    E_APIPNL_GAMMA_12BIT,
    E_APIPNL_GAMMA_ALL
} APIPNL_GAMMA_TYPE;


typedef enum
{
    E_APIPNL_GAMMA_8BIT_MAPPING = 0,
    E_APIPNL_GAMMA_10BIT_MAPPING,
    E_APIPNL_GAMMA_ALL_MAPPING
} APIPNL_GAMMA_MAPPEING_MODE;


typedef enum
{
    E_APIPNL_DIMMING_MIN = 0,
    E_APIPNL_DIMMING_CURRENT ,
    E_APIPNL_DIMMING_MAX ,
} APIPNL_DIMMING_CTRL;


typedef enum
{
    LINK_TTL,
    LINK_LVDS,
    LINK_RSDS,
    LINK_MINILVDS,
    LINK_ANALOG_MINILVDS,
    LINK_DIGITAL_MINILVDS,
    LINK_MFC,
    LINK_DAC_I,
    LINK_DAC_P,
    LINK_PDPLVDS,
    LINK_EXT,
}APIPNL_LINK_TYPE;


typedef enum
{

    LINK_EPI34_8P = LINK_EXT,
    LINK_EPI28_8P,
    LINK_EPI34_6P,
    LINK_EPI28_6P,


    LINK_MINILVDS_5P_2L,
    LINK_MINILVDS_4P_2L,
    LINK_MINILVDS_3P_2L,
    LINK_MINILVDS_6P_1L,
    LINK_MINILVDS_5P_1L,
    LINK_MINILVDS_4P_1L,
    LINK_MINILVDS_3P_1L,

    LINK_HS_LVDS,
    LINK_HF_LVDS,

    LINK_TTL_TCON,
    LINK_MINILVDS_2CH_3P_8BIT,
    LINK_MINILVDS_2CH_4P_8BIT,
    LINK_MINILVDS_2CH_5P_8BIT,
    LINK_MINILVDS_2CH_6P_8BIT,

    LINK_MINILVDS_1CH_3P_8BIT,
    LINK_MINILVDS_1CH_4P_8BIT,
    LINK_MINILVDS_1CH_5P_8BIT,
    LINK_MINILVDS_1CH_6P_8BIT,

    LINK_MINILVDS_2CH_3P_6BIT,
    LINK_MINILVDS_2CH_4P_6BIT,
    LINK_MINILVDS_2CH_5P_6BIT,
    LINK_MINILVDS_2CH_6P_6BIT,

    LINK_MINILVDS_1CH_3P_6BIT,
    LINK_MINILVDS_1CH_4P_6BIT,
    LINK_MINILVDS_1CH_5P_6BIT,
    LINK_MINILVDS_1CH_6P_6BIT,
    LINK_HDMI_BYPASS_MODE,

    LINK_EPI34_2P,
    LINK_EPI34_4P,
    LINK_EPI28_2P,
    LINK_EPI28_4P,

    LINK_VBY1_10BIT_4LANE,
    LINK_VBY1_10BIT_2LANE,
    LINK_VBY1_10BIT_1LANE,
    LINK_VBY1_8BIT_4LANE,
    LINK_VBY1_8BIT_2LANE,
    LINK_VBY1_8BIT_1LANE,

    LINK_VBY1_10BIT_8LANE,
    LINK_VBY1_8BIT_8LANE,

    LINK_EPI28_12P,

    LINK_HS_LVDS_2CH_BYPASS_MODE,
    LINK_VBY1_8BIT_4LANE_BYPASS_MODE,
    LINK_VBY1_10BIT_4LANE_BYPASS_MODE,
    LINK_EPI24_12P,
    LINK_VBY1_10BIT_16LANE,
    LINK_VBY1_8BIT_16LANE,
    LINK_USI_T_8BIT_12P,
    LINK_USI_T_10BIT_12P,
    LINK_ISP_8BIT_12P,
    LINK_ISP_8BIT_6P_D,

#if defined(UFO_PUBLIC_HEADER_500)
    LINK_ISP_8BIT_8P,
    LINK_ISP_10BIT_12P,
    LINK_ISP_10BIT_6P_D,
    LINK_ISP_10BIT_8P,
    LINK_EPI24_16P,
    LINK_EPI28_16P,
    LINK_EPI28_6P_EPI3G,
    LINK_EPI28_8P_EPI3G,
#endif
    LINK_CMPI24_10BIT_12P,
    LINK_CMPI27_8BIT_12P,
}APIPNL_LINK_EXT_TYPE;


typedef enum
{
    E_APIPNL_POWER_TIMING_1 ,
    E_APIPNL_POWER_TIMING_2 ,
    E_APIPNL_POWER_TIMING_NA = 0xFFFF,
} APIPNL_POWER_TIMING_SEQ;


typedef enum
{
    TI_10BIT_MODE = 0,
    TI_8BIT_MODE = 2,
    TI_6BIT_MODE = 3,
} APIPNL_TIBITMODE;


typedef enum
{
    E_PNL_CHG_DCLK = 0,
    E_PNL_CHG_HTOTAL = 1,
    E_PNL_CHG_VTOTAL = 2,
} APIPNL_OUT_TIMING_MODE;


typedef enum
{
    OUTPUT_10BIT_MODE = 0,
    OUTPUT_6BIT_MODE = 1,
    OUTPUT_8BIT_MODE = 2,
} APIPNL_OUTPUTFORMAT_BITMODE;


typedef struct __attribute__((packed))
{
    APIPNL_GAMMA_TYPE eSupportGammaType;
} PNL_ApiInfo;


typedef struct __attribute__((packed))
{
    MS_BOOL bPanel_Initialized;
    MS_BOOL bPanel_Enabled;
} PNL_ApiStatus;


typedef struct DLL_PACKED
{
    MS_U32 u32ApiStatusEx_Version;
    MS_U16 u16ApiStatusEX_Length;

    MS_BOOL bPNLInitialize;
    MS_BOOL bPNLEnable;
    MS_U16 u16VTotal;
    MS_U16 u16DEVStart;
    MS_U16 u16DEVEnd;
    MS_U16 u16VSyncStart;
    MS_U16 u16VSyncEnd;
    MS_U16 u16HTotal;
    MS_U16 u16DEHStart;
    MS_U16 u16DEHEnd;
    MS_U16 u16HSyncWidth;
    MS_BOOL bIsPanelManualVysncMode;
    MS_BOOL bInterlaceOutput;
    MS_BOOL bYUVOutput;
} PNL_ApiExtStatus;


typedef enum
{
    E_APIPNL_OUTPUT_NO_OUTPUT = 0,
    E_APIPNL_OUTPUT_CLK_ONLY,
    E_APIPNL_OUTPUT_DATA_ONLY,
    E_APIPNL_OUTPUT_CLK_DATA,
} APIPNL_OUTPUT_MODE;



typedef enum
{
    E_APIPNL_MISC_CTRL_OFF = 0x0000,
    E_APIPNL_MISC_MFC_ENABLE = 0x0001,
    E_APIPNL_MISC_SKIP_CALIBRATION = 0x0002,
    E_APIPNL_MISC_GET_OUTPUT_CONFIG = 0x0004,
    E_APIPNL_MISC_SKIP_ICONVALUE = 0x0008,

    E_APIPNL_MISC_MFC_MCP = 0x0010,
    E_APIPNL_MISC_MFC_ABChannel = 0x0020,
    E_APIPNL_MISC_MFC_ACChannel = 0x0040,
    E_APIPNL_MISC_MFC_ENABLE_60HZ = 0x0080,
    E_APIPNL_MISC_MFC_ENABLE_240HZ = 0x0100,
    E_APIPNL_MISC_4K2K_ENABLE_60HZ = 0x0200,
    E_APIPNL_MISC_SKIP_T3D_CONTROL = 0x0400,
    E_APIPNL_MISC_PIXELSHIFT_ENABLE = 0x0800,
    E_APIPNL_MISC_ENABLE_MANUAL_VSYNC_CTRL = 0x8000,
} APIPNL_MISC;

typedef enum
{
    E_APIPNL_TCON_TAB_TYPE_GENERAL,
    E_APIPNL_TCON_TAB_TYPE_GPIO,
    E_APIPNL_TCON_TAB_TYPE_SCALER,
    E_APIPNL_TCON_TAB_TYPE_MOD,
    E_APIPNL_TCON_TAB_TYPE_GAMMA,
    E_APIPNL_TCON_TAB_TYPE_POWER_SEQUENCE_ON,
    E_APIPNL_TCON_TAB_TYPE_POWER_SEQUENCE_OFF,
    E_APIPNL_TCON_TAB_TYPE_PANEL_INFO,
}APIPNL_TCON_TAB_TYPE;

typedef struct
{
#if !defined(CONFIG_MBOOT)
    MS_U8 u8SubTableType;
    MS_U16 u16RegCount;
    MS_U8 u8RegType;
    MS_U16 u16RegListOffset;
#endif
    MS_U8* pData;
}ST_PNL_TCON_PANEL;

typedef enum
{
    APIPNL_OUTPUT_CHANNEL_ORDER_DEFAULT,
    APIPNL_OUTPUT_CHANNEL_ORDER_USER,
}APIPNL_OUTPUT_CHANNEL_ORDER;


typedef enum
{
    E_STATUS_SUCCESS = 0,
    E_STATUS_FAIL = 1,
    E_STATUS_NOT_SUPPORTED,
    E_STATUS_PARAMETER_ERROR,
} E_PNL_LOCALDIMMING_RETURN_TYPE;

typedef enum
{
    E_LED_DEVICE_SEC_75INCH_DIRECT_180 = 0,
    E_LED_DEVICE_SEC_85INCH_DIRECT_240 = 1,
    E_LED_DEVICE_AMT_65INCH_DIRECT_120,
    E_PNL_LOCALDIMMING_TYPE_NUM,
    E_PNL_LOCALDIMMING_TYPE_MAX = E_PNL_LOCALDIMMING_TYPE_NUM,
} E_PNL_LOCALDIMMING_TYPE;

typedef struct _stPNL_Init_LocalDimming_Parameters
{
    E_PNL_LOCALDIMMING_RETURN_TYPE ePnlLDType;
    MS_U32 u32Adrress;
    MS_U16 u16Size;
    MS_U16 u16PnlWidth;
    MS_U16 u16PnlHeight;
} stPNL_Init_LocalDimming_Parameters, *pstPNL_Init_LocalDimming_Parameters;






typedef struct
{



    const char* ( * const Name ) ( void );
    MS_U16 ( * const HStart ) ( void );
    MS_U16 ( * const VStart ) ( void );
    MS_U16 ( * const Width ) ( void );
    MS_U16 ( * const Height ) ( void );
    MS_U16 ( * const HTotal ) ( void );
    MS_U16 ( * const VTotal ) ( void );
    MS_U8 ( * const HSynWidth ) ( void );
    MS_U8 ( * const HSynBackPorch ) ( void );
    MS_U8 ( * const VSynBackPorch ) ( void );
    MS_U16 ( * const DefaultVFreq ) ( void );
    MS_U8 ( * const LPLL_Mode ) ( void );
    MS_U8 ( * const LPLL_Type ) ( void );
    E_PNL_ASPECT_RATIO ( * const AspectRatio ) ( void );
    MS_U32 ( * const MinSET ) ( void );
    MS_U32 ( * const MaxSET ) ( void );
# 536 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
    void ( * const SetSSC ) ( MS_U16 u16Fmodulation, MS_U16 u16Rdeviation, MS_BOOL bEnable ) ;
    void ( * const SetOSDSSC ) ( MS_U16 u16Fmodulation, MS_U16 u16Rdeviation, MS_BOOL bEnable ) ;



    MS_BOOL ( * const Enable ) ( MS_BOOL bEnable ) ;





    MS_BOOL ( * const SetGammaTbl ) ( APIPNL_GAMMA_TYPE eGammaType,
                                      MS_U8* pu8GammaTab[3],
                                      APIPNL_GAMMA_MAPPEING_MODE Gamma_Map_Mode ) ;



    MS_U8** ( * const GammaTab ) ( void ) ;


    void ( * const Dump ) ( void ) ;



    MS_U8 ( * const DimCtrl ) ( APIPNL_DIMMING_CTRL max_min_setting ) ;



    MS_U16 ( * const OnTiming ) ( APIPNL_POWER_TIMING_SEQ power_on_sequence_timing ) ;



    MS_U16 ( * const OffTiming ) ( APIPNL_POWER_TIMING_SEQ power_off_sequence_timing ) ;




    void ( *TurnBackLightOn ) ( MS_BOOL bEnable ) ;
    APIPNL_OUT_TIMING_MODE
          ( * const OutTimingMode )( void );





    MS_BOOL (* const SetGammaValue)(MS_U8 u8Channel, MS_U16 u16Offset, MS_U16 u16GammaValue);





    MS_BOOL ( * const GetGammaTbl ) ( APIPNL_GAMMA_TYPE eGammaType,
                                      MS_U8* pu8GammaTab[3],
                                      APIPNL_GAMMA_MAPPEING_MODE Gamma_Map_Mode ) ;
}XC_PNL_OBJ;


typedef struct __attribute__((packed))
{
    const char *m_pPanelName;
#if !(defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_300))
#if !defined (__aarch64__)
    MS_U32 u32AlignmentDummy0;
#endif
#endif



    MS_U8 m_bPanelDither :1;
    APIPNL_LINK_TYPE m_ePanelLinkType :4;




    MS_U8 m_bPanelDualPort :1;
    MS_U8 m_bPanelSwapPort :1;
    MS_U8 m_bPanelSwapOdd_ML :1;
    MS_U8 m_bPanelSwapEven_ML :1;
    MS_U8 m_bPanelSwapOdd_RB :1;
    MS_U8 m_bPanelSwapEven_RB :1;

    MS_U8 m_bPanelSwapLVDS_POL :1;
    MS_U8 m_bPanelSwapLVDS_CH :1;
    MS_U8 m_bPanelPDP10BIT :1;
    MS_U8 m_bPanelLVDS_TI_MODE :1;




    MS_U8 m_ucPanelDCLKDelay;
    MS_U8 m_bPanelInvDCLK :1;
    MS_U8 m_bPanelInvDE :1;
    MS_U8 m_bPanelInvHSync :1;
    MS_U8 m_bPanelInvVSync :1;





    MS_U8 m_ucPanelDCKLCurrent;
    MS_U8 m_ucPanelDECurrent;
    MS_U8 m_ucPanelODDDataCurrent;
    MS_U8 m_ucPanelEvenDataCurrent;




    MS_U16 m_wPanelOnTiming1;
    MS_U16 m_wPanelOnTiming2;
    MS_U16 m_wPanelOffTiming1;
    MS_U16 m_wPanelOffTiming2;





    MS_U8 m_ucPanelHSyncWidth;
    MS_U8 m_ucPanelHSyncBackPorch;




    MS_U8 m_ucPanelVSyncWidth;
    MS_U8 m_ucPanelVBackPorch;


    MS_U16 m_wPanelHStart;
    MS_U16 m_wPanelVStart;
    MS_U16 m_wPanelWidth;
    MS_U16 m_wPanelHeight;


    MS_U16 m_wPanelMaxHTotal;
    MS_U16 m_wPanelHTotal;
    MS_U16 m_wPanelMinHTotal;

    MS_U16 m_wPanelMaxVTotal;
    MS_U16 m_wPanelVTotal;
    MS_U16 m_wPanelMinVTotal;

    MS_U8 m_dwPanelMaxDCLK;
    MS_U8 m_dwPanelDCLK;
    MS_U8 m_dwPanelMinDCLK;


    MS_U16 m_wSpreadSpectrumStep;
    MS_U16 m_wSpreadSpectrumSpan;

    MS_U8 m_ucDimmingCtl;
    MS_U8 m_ucMaxPWMVal;
    MS_U8 m_ucMinPWMVal;

    MS_U8 m_bPanelDeinterMode :1;
    E_PNL_ASPECT_RATIO m_ucPanelAspectRatio;
# 700 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
    MS_U16 m_u16LVDSTxSwapValue;
    APIPNL_TIBITMODE m_ucTiBitMode;
    APIPNL_OUTPUTFORMAT_BITMODE m_ucOutputFormatBitMode;

    MS_U8 m_bPanelSwapOdd_RG :1;
    MS_U8 m_bPanelSwapEven_RG :1;
    MS_U8 m_bPanelSwapOdd_GB :1;
    MS_U8 m_bPanelSwapEven_GB :1;




    MS_U8 m_bPanelDoubleClk :1;
    MS_U32 m_dwPanelMaxSET;
    MS_U32 m_dwPanelMinSET;
    APIPNL_OUT_TIMING_MODE m_ucOutTimingMode;
    MS_U8 m_bPanelNoiseDith :1;
} PanelType;


typedef struct DLL_PACKED
{
    MS_U32 VDTOT;
    MS_U32 DEVST;
    MS_U32 DEVEND;
    MS_U32 HDTOT;
    MS_U32 DEHST;
    MS_U32 DEHEND;
    MS_BOOL bInterlaceMode;
    MS_BOOL bYUVOutput;
} MS_PNL_DST_DispInfo;


typedef struct
{
    MS_U32 u32pair;
    MS_U16 u16channel;
    MS_BOOL bEnable;
} MS_PNL_HW_LVDSResInfo;


typedef struct DLL_PACKED
{
    MS_U8 u8ODTbl[1056];
    MS_U32 u32PNL_version;

#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32OD_MSB_Addr;
#else
    MS_PHYADDR u32OD_MSB_Addr;
#endif
    MS_U32 u32OD_MSB_Size;
#if defined(UFO_PUBLIC_HEADER_700)
    MS_PHY u32OD_LSB_Addr;
#else
    MS_PHYADDR u32OD_LSB_Addr;
#endif
    MS_U32 u32OD_LSB_Size;
} MS_PNL_OD_INITDATA;

typedef struct DLL_PACKED
{
    MS_U16* pu16ODTbl;
    MS_U32 u32PNL_version;

    MS_PHY u32OD_MSB_Addr;
    MS_U32 u32OD_MSB_Size;
    MS_PHY u32OD_LSB_Addr;
    MS_U32 u32OD_LSB_Size;
    MS_U32 u32ODTbl_Size;
} MS_PNL_OD_SETTING;


typedef struct DLL_PACKED
{
    MS_U16 m_u16ExpectSwingLevel;
    MS_U8 m_u8ModCaliPairSel;
    MS_U8 m_u8ModCaliTarget;
    MS_S8 m_s8ModCaliOffset;
    MS_BOOL m_bPVDD_2V5;
}MS_PNL_ModCaliInfo;




typedef enum
{
    E_PNL_MOD_PECURRENT_SETTING,
    E_PNL_CONTROL_OUT_SWING,
}E_PNL_SETTING;



typedef struct
{
    MS_U16 u16Current_Level;
    MS_U16 u16Channel_Select;
}ST_PNL_MOD_PECURRENT_SETTING;

typedef struct
{
    MS_U16 u16Swing_Level;
}ST_PNL_CONTROL_OUT_SWING;
# 819 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
extern XC_PNL_OBJ g_IPanel;
INTERFACE void* pu32PNLInst;
typedef enum
{
    E_PNL_NO_OUTPUT,
    E_PNL_CLK_ONLY,
    E_PNL_CLK_DATA,
    E_PNL_MAX,
} E_PNL_PREINIT_OPTIONS;
# 836 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
APIPNL_Result MApi_PNL_GetLibVer(const MSIF_Version **ppVersion);
# 845 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
const PNL_ApiInfo * MApi_PNL_GetInfo(void);







MS_BOOL MApi_PNL_GetStatus(PNL_ApiStatus *pPnlStatus);







MS_BOOL MApi_PNL_GetStatusEx(PNL_ApiExtStatus *pPnlExtStatus);







MS_BOOL MApi_PNL_SetDbgLevel(MS_U16 u16DbgSwitch);






MS_BOOL MApi_PNL_IOMapBaseInit(void);






MS_BOOL MApi_PNL_PreInit(E_PNL_PREINIT_OPTIONS eInitParam);







#ifndef _API_XC_PANEL_C_
#define MApi_PNL_Init(x) MApi_PNL_Init_Ex(x, (MSIF_Version){{ PNL_API_VERSION },});
#endif
# 927 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
MS_BOOL MApi_PNL_Init_Ex(PanelType *pSelPanelType, MSIF_Version LIBVER);







APIPNL_Result MApi_PNL_GetConfig(PanelType *pSelPanelType);






void MApi_PNL_SetOutput(APIPNL_OUTPUT_MODE eOutputMode);







MS_BOOL MApi_PNL_ChangePanelType(PanelType *pSelPanelType);
# 959 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
MS_BOOL MApi_PNL_TCONMAP_DumpTable(MS_U8 *pTCONTable, MS_U8 u8Tcontype);
# 968 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
MS_BOOL MApi_PNL_TCONMAP_Power_Sequence(MS_U8 *pTCONTable, MS_BOOL bEnable);






void MApi_PNL_TCON_Count_Reset ( MS_BOOL bEnable );





void MApi_PNL_TCON_Init( void );







MS_BOOL MApi_PNL_GetDstInfo(MS_PNL_DST_DispInfo *pDstInfo, MS_U32 u32SizeofDstInfo);







MS_BOOL MApi_PNL_Control_Out_Swing(MS_U16 u16Swing_Level);







MS_BOOL MApi_PNL_ForceSetPanelDCLK(MS_U16 u16PanelDCLK ,MS_BOOL bSetDCLKEnable );







MS_BOOL MApi_PNL_ForceSetPanelHStart(MS_U16 u16PanelHStart ,MS_BOOL bSetHStartEnable);
# 1022 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
void MApi_PNL_SetOutputPattern(MS_BOOL bEnable, MS_U16 u16Red , MS_U16 u16Green, MS_U16 u16Blue);






MS_BOOL MApi_Mod_Calibration_Setting(MS_PNL_ModCaliInfo *pstModCaliInfo);






MS_BOOL MApi_Mod_Do_Calibration(void);







void MApi_BD_LVDS_Output_Type(MS_U16 Type);






void MApi_PNL_SetLPLLTypeExt(APIPNL_LINK_EXT_TYPE eLPLL_TypeExt);






void MApi_PNL_Init_MISC(APIPNL_MISC ePNL_MISC);






MS_U32 MApi_PNL_GetMiscStatus(void);
# 1074 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
void MApi_PNL_MOD_OutputConfig_User(MS_U32 u32OutputCFG0_7, MS_U32 u32OutputCFG8_15, MS_U32 u32OutputCFG16_21);
# 1085 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
void MApi_PNL_MOD_OutputChannelOrder(MS_U8 u8OutputOrderType,
                                                    MS_U16 u16OutputOrder0_3,
                                                    MS_U16 u16OutputOrder4_7,
                                                    MS_U16 u16OutputOrder8_11,
                                                    MS_U16 u16OutputOrder12_13);






void MApi_PNL_HWLVDSReservedtoLRFlag(MS_PNL_HW_LVDSResInfo lvdsresinfo);






void MApi_MOD_PVDD_Power_Setting(MS_BOOL bIs2p5);
# 1112 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
APIPNL_Result MApi_PNL_SetSSC_En(MS_BOOL bEnable);







APIPNL_Result MApi_PNL_SetSSC_Fmodulation(MS_U16 u16Fmodulation);






APIPNL_Result MApi_PNL_SetSSC_Rdeviation(MS_U16 u16Rdeviation);







APIPNL_Result MApi_PNL_SetOSDSSC_En(MS_BOOL bEnable);







APIPNL_Result MApi_PNL_SetOSDSSC_Fmodulation(MS_U16 u16Fmodulation);







APIPNL_Result MApi_PNL_SetOSDSSC_Rdeviation(MS_U16 u16Rdeviation);
# 1160 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
APIPNL_Result MApi_PNL_SkipTimingChange(MS_BOOL bFlag);







APIPNL_Result MApi_PNL_PreSetModeOn(MS_BOOL bSetModeOn);
# 1177 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
APIPNL_Result MApi_PNL_OverDriver_Init(MS_PNL_OD_INITDATA *pPNL_ODInitData, MS_U32 u32ODInitDataLen);
# 1186 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
APIPNL_Result SYMBOL_WEAK MApi_PNL_OverDriver_Setting(MS_PNL_OD_SETTING *pPNL_ODSetting, MS_U32 u32ODInitDataLen);






APIPNL_Result MApi_PNL_OverDriver_Enable(MS_BOOL bEnable);







MS_BOOL MApi_PNL_Get_TCON_Capability(void);







void MApi_PNL_SetPairSwap(MS_U32 u32Polarity);






void MApi_PNL_SetExt_LPLL_Type(MS_U16 u16Ext_lpll_type);






void MApi_PNL_CalExtLPLLSETbyDClk(MS_U32 ldHz);







MS_BOOL MApi_PNL_EnableInternalTermination(MS_BOOL bEnable);
# 1240 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
MS_U32 MApi_PNL_SetPowerState(EN_POWER_MODE ePowerState);
# 1253 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiPNL.h"
MS_BOOL MApi_PNL_SetDiffSwingLevel(MS_U8 u8Swing_Level);






MS_BOOL MApi_PNL_OutputDeviceHandshake(void);






MS_BOOL MApi_PNL_OutputDeviceOCHandshake(void);






APIPNL_Result MApi_PNL_SetOutputInterlaceTiming(MS_BOOL bEnable);






MS_U16 SYMBOL_WEAK MApi_PNL_GetSupportMaxDclk(void);

void MApi_PNL_GetPanelData(PanelType* pstPNLData);
void MApi_PNL_DumpPanelData(void);
void MApi_PNL_SetSSC(MS_U16 u16Fmodulation, MS_U16 u16Rdeviation, MS_BOOL bEnable);
MS_U16 MApi_PNL_GetPanelOnTiming(APIPNL_POWER_TIMING_SEQ seq);
MS_U16 MApi_PNL_GetPanelOffTiming(APIPNL_POWER_TIMING_SEQ seq);
MS_U8 MApi_PNL_GetPanelDimCtrl(APIPNL_DIMMING_CTRL dim_type);
MS_U8** MApi_PNL_GetAllGammaTbl(void);
MS_BOOL MApi_PNL_EnablePanel(MS_BOOL bPanelOn);
MS_BOOL MApi_PNL_SetPanelGamma(MS_U8* pu8GammaTab, MS_U8 u8Index);
MS_BOOL MApi_PNL_SetGammaTbl(APIPNL_GAMMA_TYPE eGammaType, MS_U8* pu8GammaTab[3], APIPNL_GAMMA_MAPPEING_MODE Gamma_Map_Mode);
MS_BOOL MApi_PNL_GetGammaTbl(APIPNL_GAMMA_TYPE eGammaType, MS_U8* pu8GammaTab[3], APIPNL_GAMMA_MAPPEING_MODE Gamma_Map_Mode);
MS_BOOL MApi_PNL_SetGammaValue(MS_U8 u8Channel, MS_U16 u16Offset, MS_U16 u16GammaValue);
MS_U16 MApi_PNL_InitLocalDimming(pstPNL_Init_LocalDimming_Parameters pstPnlLDArgs, MS_U16 u16DataLen);
MS_BOOL MApi_PNL_Check_VBY1_Handshake_Status(void);
void MApi_PNL_SetVideoHWTraining(MS_BOOL bEnable);
void MApi_PNL_SetOSDHWTraining(MS_BOOL bEnable);
MS_BOOL MApi_PNL_GetVideoHWTraining_Status(void);
MS_BOOL MApi_PNL_GetOSDHWTraining_Status(void);
MS_BOOL SYMBOL_WEAK MApi_PNL_GetOutputInterlaceTiming(void);
APIPNL_Result MApi_PNL_Setting(MS_U32 u32Cmd,void *pCmdArgs,MS_U32 u32CmdArgsSize);

#undef INTERFACE

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ATSC_v2.h"
#ifndef _DRV_ATSC_V2_H_
#define _DRV_ATSC_V2_H_ 

#include "drvDMD_ATSC.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 121 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ATSC_v2.h"
#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif





typedef enum {
    DMD_ATSC_DRV_CMD_SetDbgLevel,
    DMD_ATSC_DRV_CMD_GetInfo,
    DMD_ATSC_DRV_CMD_GetLibVer,
    DMD_ATSC_DRV_CMD_Init,
    DMD_ATSC_DRV_CMD_Exit,
    DMD_ATSC_DRV_CMD_GetConfig,
    DMD_ATSC_DRV_CMD_SetConfig,
    DMD_ATSC_DRV_CMD_SetReset,
    DMD_ATSC_DRV_CMD_Set_QAM_SR,
    DMD_ATSC_DRV_CMD_SetActive,
    DMD_ATSC_DRV_CMD_SetPowerState,
    DMD_ATSC_DRV_CMD_GetLock,
    DMD_ATSC_DRV_CMD_GetModulationMode,
    DMD_ATSC_DRV_CMD_GetSignalStrength,
    DMD_ATSC_DRV_CMD_GetSignalQuality,
    DMD_ATSC_DRV_CMD_GetSNRPercentage,
    DMD_ATSC_DRV_CMD_GET_QAM_SNR,
    DMD_ATSC_DRV_CMD_Read_uCPKT_ERR,
    DMD_ATSC_DRV_CMD_GetPreViterbiBer,
    DMD_ATSC_DRV_CMD_GetPostViterbiBer,
    DMD_ATSC_DRV_CMD_ReadFrequencyOffset,
    DMD_ATSC_DRV_CMD_SetSerialControl,
    DMD_ATSC_DRV_CMD_IIC_BYPASS_MODE,
    DMD_ATSC_DRV_CMD_SWITCH_SSPI_GPIO,
    DMD_ATSC_DRV_CMD_GPIO_GET_LEVEL,
    DMD_ATSC_DRV_CMD_GPIO_SET_LEVEL,
    DMD_ATSC_DRV_CMD_GPIO_OUT_ENABLE,
    DMD_ATSC_DRV_CMD_DoIQSwap,
    DMD_ATSC_DRV_CMD_GetReg,
    DMD_ATSC_DRV_CMD_SetReg,
    DMD_ATSC_DRV_CMD_MD_Init,
    DMD_ATSC_DRV_CMD_MD_Exit,
    DMD_ATSC_DRV_CMD_MD_GetConfig,
    DMD_ATSC_DRV_CMD_MD_SetConfig,
    DMD_ATSC_DRV_CMD_MD_SetReset,
    DMD_ATSC_DRV_CMD_MD_Set_QAM_SR,
    DMD_ATSC_DRV_CMD_MD_SetActive,
    DMD_ATSC_DRV_CMD_MD_SetPowerState,
    DMD_ATSC_DRV_CMD_MD_GetLock,
    DMD_ATSC_DRV_CMD_MD_GetModulationMode,
    DMD_ATSC_DRV_CMD_MD_GetSignalStrength,
    DMD_ATSC_DRV_CMD_MD_GetSignalQuality,
    DMD_ATSC_DRV_CMD_MD_GetSNRPercentage,
    DMD_ATSC_DRV_CMD_MD_GET_QAM_SNR,
    DMD_ATSC_DRV_CMD_MD_Read_uCPKT_ERR,
    DMD_ATSC_DRV_CMD_MD_GetPreViterbiBer,
    DMD_ATSC_DRV_CMD_MD_GetPostViterbiBer,
    DMD_ATSC_DRV_CMD_MD_ReadFrequencyOffset,
    DMD_ATSC_DRV_CMD_MD_SetSerialControl,
    DMD_ATSC_DRV_CMD_MD_IIC_BYPASS_MODE,
    DMD_ATSC_DRV_CMD_MD_SWITCH_SSPI_GPIO,
    DMD_ATSC_DRV_CMD_MD_GPIO_GET_LEVEL,
    DMD_ATSC_DRV_CMD_MD_GPIO_SET_LEVEL,
    DMD_ATSC_DRV_CMD_MD_GPIO_OUT_ENABLE,
    DMD_ATSC_DRV_CMD_MD_DoIQSwap,
    DMD_ATSC_DRV_CMD_MD_GetReg,
    DMD_ATSC_DRV_CMD_MD_SetReg
} DMD_ATSC_DRV_COMMAND;

typedef struct DLL_PACKED _ATSC_DBG_LEVEL_PARAM
{
    DMD_ATSC_DbgLv u8DbgLevel;
} ATSC_DBG_LEVEL_PARAM, *PATSC_DBG_LEVEL_PARAM;

typedef struct DLL_PACKED _ATSC_GET_INFO_PARAM
{
    DMD_ATSC_Info* pInfo;
} ATSC_GET_INFO_PARAM, *PATSC_GET_INFO_PARAM;

typedef struct DLL_PACKED _ATSC_GET_LIB_VER_PARAM
{
    const MSIF_Version **ppVersion;
} ATSC_GET_LIB_VER_PARAM, *PATSC_GET_LIB_VER_PARAM;

typedef struct DLL_PACKED _ATSC_INIT_PARAM
{
    MS_U8 id;
    DMD_ATSC_InitData *pDMD_ATSC_InitData;
    MS_U32 u32InitDataLen;
} ATSC_INIT_PARAM, *PATSC_INIT_PARAM;

typedef struct DLL_PACKED _ATSC_ID_PARAM
{
    MS_U8 id;
} ATSC_ID_PARAM, *PATSC_ID_PARAM;

typedef struct DLL_PACKED _ATSC_SET_CONFIG_PARAM
{
    MS_U8 id;
    DMD_ATSC_DEMOD_TYPE eType;
    MS_BOOL bEnable;
} ATSC_SET_CONFIG_PARAM, *PATSC_SET_CONFIG_PARAM;

typedef struct DLL_PACKED _ATSC_SET_QAM_SR_PARAM
{
    MS_U8 id;
    DMD_ATSC_DEMOD_TYPE eType;
    MS_U16 symbol_rate;
} ATSC_SET_QAM_SR_PARAM, *PATSC_SET_QAM_SR_PARAM;

typedef struct DLL_PACKED _ATSC_SET_ACTIVE_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} ATSC_SET_ACTIVE_PARAM, *PATSC_SET_ACTIVE_PARAM;

typedef struct DLL_PACKED _ATSC_SET_POWER_STATE_PARAM
{
    MS_U8 id;
    EN_POWER_MODE u16PowerState;
} ATSC_SET_POWER_STATE_PARAM, *PATSC_SET_POWER_STATE_PARAM;

typedef struct DLL_PACKED _ATSC_GET_LOCK_PARAM
{
    MS_U8 id;
    DMD_ATSC_GETLOCK_TYPE eType;
    DMD_ATSC_LOCK_STATUS status;
} ATSC_GET_LOCK_PARAM, *PATSC_GET_LOCK_PARAM;

typedef struct DLL_PACKED _ATSC_GET_MODULATION_MODE_PARAM
{
    MS_U8 id;
    DMD_ATSC_DEMOD_TYPE eType;
} ATSC_GET_MODULATION_MODE_PARAM, *PATSC_GET_MODULATION_MODE_PARAM;

typedef struct DLL_PACKED _ATSC_GET_SIGNAL_STRENGTH_PARAM
{
    MS_U8 id;
    MS_U16 u16Strength;
} ATSC_GET_SIGNAL_STRENGTH_PARAM, *PATSC_GET_SIGNAL_STRENGTH_PARAM;

typedef struct DLL_PACKED _ATSC_GET_SIGNAL_QUALITY_PARAM
{
    MS_U8 id;
    DMD_ATSC_SIGNAL_CONDITION eQuality;
} ATSC_GET_SIGNAL_QUALITY_PARAM, *PATSC_GET_SIGNAL_QUALITY_PARAM;

typedef struct DLL_PACKED _ATSC_GET_SNR_PERCENTAGE_PARAM
{
    MS_U8 id;
    MS_U8 u8Percentage;
} ATSC_GET_SNR_PERCENTAGE_PARAM, *PATSC_GET_SNR_PERCENTAGE_PARAM;

typedef struct DLL_PACKED _ATSC_GET_SNR_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_ATSC_SNR_DATA snr;
    #else
    float snr;
    #endif
} ATSC_GET_SNR_PARAM, *PATSC_GET_SNR_PARAM;

typedef struct DLL_PACKED _ATSC_GET_UCPKT_ERR_PARAM
{
    MS_U8 id;
    MS_U16 u16PacketErr;
} ATSC_GET_UCPKT_ERR_PARAM, *PATSC_GET_UCPKT_ERR_PARAM;

typedef struct DLL_PACKED _ATSC_GET_BER_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_ATSC_BER_DATA ber;
    #else
    float ber;
    #endif
} ATSC_GET_BER_PARAM, *PATSC_GET_BER_PARAM;

typedef struct DLL_PACKED _ATSC_READ_FREQ_OFFSET_PARAM
{
    MS_U8 id;
    #ifdef UTPA2
    DMD_ATSC_CFO_DATA cfo;
    #else
    MS_S16 cfo;
    #endif
} ATSC_READ_FREQ_OFFSET_PARAM, *PATSC_READ_FREQ_OFFSET_PARAM;

typedef struct DLL_PACKED _ATSC_SET_SERIAL_CONTROL_PARAM
{
    MS_U8 id;
    MS_U8 u8TsConfigData;
} ATSC_SET_SERIAL_CONTROL_PARAM, *PATSC_SET_SERIAL_CONTROL_PARAM;

typedef struct DLL_PACKED _ATSC_IIC_BYPASS_MODE_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} ATSC_IIC_BYPASS_MODE_PARAM, *PATSC_IIC_BYPASS_MODE_PARAM;

typedef struct DLL_PACKED _ATSC_SWITCH_SSPI_GPIO_PARAM
{
    MS_U8 id;
    MS_BOOL bEnable;
} ATSC_SWITCH_SSPI_GPIO_PARAM, *PATSC_SWITCH_SSPI_GPIO_PARAM;

typedef struct DLL_PACKED _ATSC_GPIO_LEVEL_PARAM
{
    MS_U8 id;
    MS_U8 u8Pin;
    MS_BOOL bLevel;
} ATSC_GPIO_LEVEL_PARAM, *PATSC_GPIO_LEVEL_PARAM;

typedef struct DLL_PACKED _ATSC_GPIO_OUT_ENABLE_PARAM
{
    MS_U8 id;
    MS_U8 u8Pin;
    MS_BOOL bEnableOut;
} ATSC_GPIO_OUT_ENABLE_PARAM, *PATSC_GPIO_OUT_ENABLE_PARAM;

typedef struct DLL_PACKED _ATSC_DO_IQ_SWAP_PARAM
{
    MS_U8 id;
    MS_BOOL bIsQPad;
} ATSC_DO_IQ_SWAP_PARAM, *PATSC_DO_IQ_SWAP_PARAM;

typedef struct DLL_PACKED _ATSC_REG_PARAM
{
    MS_U8 id;
    MS_U16 u16Addr;
    MS_U8 u8Data;
} ATSC_REG_PARAM, *PATSC_REG_PARAM;





DLL_PUBLIC extern void ATSCRegisterToUtopia(FUtopiaOpen ModuleType);
DLL_PUBLIC extern MS_U32 ATSCOpen(void** ppInstance, MS_U32 u32ModuleVersion, void* pAttribute);
DLL_PUBLIC extern MS_U32 ATSCClose(void* pInstance);
DLL_PUBLIC extern MS_U32 ATSCIoctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);

#ifdef __cplusplus
}
#endif

#endif
# 137 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSEAL.h"
#ifndef _DRV_SEAL_H_
#define _DRV_SEAL_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsCommon.h"
#include "utopia.h"
#include "UFO.h"




#define BIT0 0x0001UL
#define BIT1 0x0002UL
#define BIT2 0x0004UL
#define BIT3 0x0008UL
#define BIT4 0x0010UL
#define BIT5 0x0020UL
#define BIT6 0x0040UL
#define BIT7 0x0080UL
#define BIT8 0x0100UL
#define BIT9 0x0200UL
#define BIT10 0x0400UL
#define BIT11 0x0800UL
#define BIT12 0x1000UL
#define BIT13 0x2000UL
#define BIT14 0x4000UL
#define BIT15 0x8000UL




#define SEAL_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    {'S','E','A','L'}, \
    {'0','0'}, \
    {'0','0'}, \
    {'0','0','2','6','4','8','8','5'}, \
    MSIF_OS





typedef enum
{
    E_SEAL_MIU_DEV0,
    E_SEAL_MIU_DEV1,
    E_SEAL_MIU_DEV2,
    E_SEAL_MIU_DEV3,
    E_SEAL_MIU_NUM,
}eSeal_MiuDev;

typedef enum
{
#if defined(UFO_PUBLIC_HEADER_500)
    E_SEAL_SECURE_WRITE = BIT0,
    E_SEAL_SECURE_READ = BIT1,
    E_SEAL_NONSECURE_WRITE = BIT2,
    E_SEAL_NONSECURE_READ = BIT3,
#else
    E_SEAL_SECURE_READ = BIT0,
    E_SEAL_SECURE_WRITE = BIT1,
    E_SEAL_NONSECURE_READ = BIT2,
    E_SEAL_NONSECURE_WRITE = BIT3,
#endif
}eSeal_SecureAttribute;

typedef enum
{
    E_SEAL_SECURE_RANGE_ID0,
    E_SEAL_SECURE_RANGE_ID1,
    E_SEAL_SECURE_RANGE_ID2,
    E_SEAL_SECURE_RANGE_ID3,
    E_SEAL_SECURE_RANGE_ID4,
    E_SEAL_SECURE_RANGE_ID5,
    E_SEAL_SECURE_RANGE_ID6,
    E_SEAL_SECURE_RANGE_ID7,
#if defined(UFO_PUBLIC_HEADER_300)||defined(UFO_PUBLIC_HEADER_700)
    E_SEAL_SECURE_RANGE_ID8,
    E_SEAL_SECURE_RANGE_ID9,
    E_SEAL_SECURE_RANGE_ID10,
    E_SEAL_SECURE_RANGE_ID11,
    E_SEAL_SECURE_RANGE_ID12,
    E_SEAL_SECURE_RANGE_ID13,
    E_SEAL_SECURE_RANGE_ID14,
    E_SEAL_SECURE_RANGE_ID15,
#endif
    E_SEAL_SECURE_RANGE_NUM,
}eSeal_SecureRangeId;

typedef enum
{
#if defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300)||defined(UFO_PUBLIC_HEADER_700)
    E_SEAL_PROCESSOR_DUMMY = -1,
    E_SEAL_DBBUS = 0,
    E_SEAL_MCU51,
    E_SEAL_CPU2,
    E_SEAL_VD_R2,
    E_SEAL_SECURE_R2,
    E_SEAL_SC,
    E_SEAL_CMDQ,
    E_SEAL_HEMCU,
    E_SEAL_SECURE_51,
#if defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_700)
    E_SEAL_SC_BE,
#endif
#else
    E_SEAL_DBBUS,
    E_SEAL_MCU51,
    E_SEAL_CPU2,
    E_SEAL_VD_R2,
    E_SEAL_SECURE_R2,
    E_SEAL_SC,
    E_SEAL_CMDQ,
    E_SEAL_HEMCU,
#endif
    E_SEAL_PROCESSOR_NUM,
}eSeal_ProcessorId ;

typedef enum
{
    E_SEAL_NONE =0,
    E_SEAL_DUMMY =1,
    E_SEAL_RIU_DBG_PROT_NONPM =2,
    E_SEAL_MSPI0_PROT_NONPM =3,
    E_SEAL_MSPI1_PROT_NONPM =4,
    E_SEAL_VD_MHEG5_PROT_NONPM =5,
    E_SEAL_MAU1_PROT_NONPM =6,
    E_SEAL_HIREG_PROT_NONPM =7,
    E_SEAL_POR_STATUS_PROT_NONPM =8,
    E_SEAL_INTR_CPUINT_PROT_NONPM =9,
    E_SEAL_MIU2_PROT_NONPM =10,
    E_SEAL_USB0_PROT_NONPM =11,
    E_SEAL_USB1_PROT_NONPM =12,
    E_SEAL_BDMA_CH0_PROT_NONPM =13,
    E_SEAL_BDMA_CH1_PROT_NONPM =14,
    E_SEAL_UART0_PROT_NONPM =15,
    E_SEAL_CLKGEN0_PROT_NONPM =16,
    E_SEAL_DSCRMB_PROT_NONPM =17,
    E_SEAL_UHC1_PROT_NONPM =18,
    E_SEAL_MHEG5_PROT_NONPM =19,
    E_SEAL_MVD_PROT_NONPM =20,
    E_SEAL_MIU_PROT_NONPM =21,
    E_SEAL_MVOPSUB_PROT_NONPM =22,
    E_SEAL_MVOP_PROT_NONPM =23,
    E_SEAL_TSP0_PROT_NONPM =24,
    E_SEAL_TSP1_PROT_NONPM =25,
    E_SEAL_JPD_PROT_NONPM =26,
    E_SEAL_SEMAPH_PROT_NONPM =27,
    E_SEAL_MAU0_PROT_NONPM =28,
    E_SEAL_ECBRIDGE_PROT_NONPM =29,
    E_SEAL_INTR_CTRL_PROT_NONPM =30,
    E_SEAL_HDMI2_PROT_NONPM =31,
    E_SEAL_HVD_PROT_NONPM =32,
    E_SEAL_TSP2_PROT_NONPM =33,
    E_SEAL_MIPS_PROT_NONPM =34,
    E_SEAL_CHIP_PROT_NONPM =35,
    E_SEAL_GOP_PROT_NONPM =36,
    E_SEAL_EMAC0_PROT_NONPM =37,
    E_SEAL_EMAC1_PROT_NONPM =38,
    E_SEAL_EMAC2_PROT_NONPM =39,
    E_SEAL_EMAC3_PROT_NONPM =40,
    E_SEAL_UHC0_PROT_NONPM =41,
    E_SEAL_ADC_ATOP_PROT_NONPM =42,
    E_SEAL_ADC_DTOP_PROT_NONPM =43,
    E_SEAL_HDMI_PROT_NONPM =44,
    E_SEAL_GE0_PROT_NONPM =45,
    E_SEAL_SMART_PROT_NONPM =46,
    E_SEAL_CI_PROT_NONPM =47,
    E_SEAL_CHIPGPIO_PROT_NONPM =48,
    E_SEAL_VP6_PROT_NONPM =49,
    E_SEAL_LDM_DMA0_PROT_NONPM =50,
    E_SEAL_LDM_DMA1_PROT_NONPM =51,
    E_SEAL_SC0_PROT_NONPM =52,
    E_SEAL_SC1_PROT_NONPM =53,
    E_SEAL_SC2_PROT_NONPM =54,
    E_SEAL_SC3_PROT_NONPM =55,
    E_SEAL_SC4_PROT_NONPM =56,
    E_SEAL_CLKGEN1_PROT_NONPM =57,
    E_SEAL_MAILBOX_PROT_NONPM =58,
    E_SEAL_MIIC_PROT_NONPM =59,
    E_SEAL_PCM_PROT_NONPM =60,
    E_SEAL_VDMCU51_IF_PROT_NONPM =61,
    E_SEAL_DMDMCU51_IF_PROT_NONPM =62,
    E_SEAL_URDMA_PROT_NONPM =63,
    E_SEAL_AFEC_PROT_NONPM =64,
    E_SEAL_COMB_PROT_NONPM =65,
    E_SEAL_VBI_PROT_NONPM =66,
    E_SEAL_SCM_PROT_NONPM =67,
    E_SEAL_UTMI2_PROT_NONPM =68,
    E_SEAL_PATGEN_PROT_NONPM =69,
    E_SEAL_UTMI1_PROT_NONPM =70,
    E_SEAL_UTMI_PROT_NONPM =71,
    E_SEAL_VE_0_PROT_NONPM =72,
    E_SEAL_REG_PIU_NONPM_PROT_NONPM =73,
    E_SEAL_VE_1_PROT_NONPM =74,
    E_SEAL_VE_2_PROT_NONPM =75,
    E_SEAL_MPIF_PROT_NONPM =76,
    E_SEAL_GPD_PROT_NONPM =77,
    E_SEAL_UART1_PROT_NONPM =78,
    E_SEAL_UART2_PROT_NONPM =79,
    E_SEAL_FUART_PROT_NONPM =80,
    E_SEAL_GE1_PROT_NONPM =81,
    E_SEAL_G3D_PROT_NONPM =82,
    E_SEAL_DVI_ATOP_PROT_NONPM =83,
    E_SEAL_DVI_DTOP_PROT_NONPM =84,
    E_SEAL_DVIEQ_PROT_NONPM =85,
    E_SEAL_HDCP_PROT_NONPM =86,
    E_SEAL_NR_HSD_PROT_NONPM =87,
    E_SEAL_ANA_MISC_PROT_NONPM =88,
    E_SEAL_MIU_ATOP_PROT_NONPM =89,
    E_SEAL_NR_PROT_NONPM =90,
    E_SEAL_DI_PROT_NONPM =91,
    E_SEAL_MFE0_PROT_NONPM =92,
    E_SEAL_MFE1_PROT_NONPM =93,
    E_SEAL_ADC_DTOPB_PROT_NONPM =94,
    E_SEAL_NFIE0_PROT_NONPM =95,
    E_SEAL_NFIE1_PROT_NONPM =96,
    E_SEAL_NFIE2_PROT_NONPM =97,
    E_SEAL_ON0_PROT_NONPM =98,
    E_SEAL_ON1_PROT_NONPM =99,
    E_SEAL_MIIC0_PROT_NONPM =100,
    E_SEAL_MIIC1_PROT_NONPM =101,
    E_SEAL_MIIC2_PROT_NONPM =102,
    E_SEAL_MIIC3_PROT_NONPM =103,
    E_SEAL_CLKGEN_DMD_PROT_NONPM =104,
    E_SEAL_DEMOD_0_PROT_NONPM =105,
    E_SEAL_DEMOD_1_PROT_NONPM =106,
    E_SEAL_DEMOD_2_PROT_NONPM =107,
    E_SEAL_DEMOD_3_PROT_NONPM =108,
    E_SEAL_DEMOD_4_PROT_NONPM =109,
    E_SEAL_DEMOD_5_PROT_NONPM =110,
    E_SEAL_DEMOD_6_PROT_NONPM =111,
    E_SEAL_DEMOD_7_PROT_NONPM =112,
    E_SEAL_DMD_ANA_MISC_PROT_NONPM =113,
    E_SEAL_AUR20_PROT_NONPM =114,
    E_SEAL_VIVALDI0_PROT_NONPM =115,
    E_SEAL_VIVALDI1_PROT_NONPM =116,
    E_SEAL_VIVALDI2_PROT_NONPM =117,
    E_SEAL_VIVALDI3_PROT_NONPM =118,
    E_SEAL_VIVALDI4_PROT_NONPM =119,
    E_SEAL_VIVALDI5_PROT_NONPM =120,
    E_SEAL_AUR21_PROT_NONPM =121,
    E_SEAL_AUR22_PROT_NONPM =122,
    E_SEAL_DVI_ATOP_1_PROT_NONPM =123,
    E_SEAL_DVI_DTOP_1_PROT_NONPM =124,
    E_SEAL_DVIEQ_1_PROT_NONPM =125,
    E_SEAL_HDCP_1_PROT_NONPM =126,
    E_SEAL_DVI_ATOP_2_PROT_NONPM =127,
    E_SEAL_DVI_DTOP_2_PROT_NONPM =128,
    E_SEAL_DVIEQ_2_PROT_NONPM =129,
    E_SEAL_HDCP_2_PROT_NONPM =130,
    E_SEAL_DVI_PS_PROT_NONPM =131,
    E_SEAL_DVI_DTOP_3_PROT_NONPM =132,
    E_SEAL_DVIEQ_3_PROT_NONPM =133,
    E_SEAL_HDCP_3_PROT_NONPM =134,
    E_SEAL_USB2_PROT_NONPM =135,
    E_SEAL_UHC2_PROT_NONPM =136,
    E_SEAL_DRM_SECURE_PROT_NONPM =137,
    E_SEAL_DSCRMB2_PROT_NONPM =138,
    E_SEAL_DSCRMB3_PROT_NONPM =139,
    E_SEAL_GPD0_PROT_NONPM =140,
    E_SEAL_GPD1_PROT_NONPM =141,
    E_SEAL_GOP4G_0_PROT_NONPM =142,
    E_SEAL_GOP4G_1_PROT_NONPM =143,
    E_SEAL_GOP4G_ST_PROT_NONPM =144,
    E_SEAL_GOP2G_0_PROT_NONPM =145,
    E_SEAL_GOP2G_1_PROT_NONPM =146,
    E_SEAL_GOP2G_ST_PROT_NONPM =147,
    E_SEAL_GOP1G_0_PROT_NONPM =148,
    E_SEAL_GOP1G_1_PROT_NONPM =149,
    E_SEAL_GOP1G_ST_PROT_NONPM =150,
    E_SEAL_GOP1GX_0_PROT_NONPM =151,
    E_SEAL_GOP1GX_1_PROT_NONPM =152,
    E_SEAL_GOP1GX_ST_PROT_NONPM =153,
    E_SEAL_GOPD_PROT_NONPM =154,
    E_SEAL_SPARE0_PROT_NONPM =155,
    E_SEAL_SPARE1_PROT_NONPM =156,
    E_SEAL_CA9PAT_PROT_NONPM =157,
    E_SEAL_USB30PHY_DTOP_PROT_NONPM =158,
    E_SEAL_USB30PHY_ATOP_PROT_NONPM =159,
    E_SEAL_UTMI3_PROT_NONPM =160,
    E_SEAL_USB3INDCTL_PROT_NONPM =161,
    E_SEAL_USB3TOP_PROT_NONPM =162,
    E_SEAL_ALBANY0_PROT_NONPM =163,
    E_SEAL_ALBANY1_PROT_NONPM =164,
    E_SEAL_SEC_R2_PROT_NONPM =165,
    E_SEAL_SEC_MAU0_PROT_NONPM =166,
    E_SEAL_MOBF_PROT_NONPM =167,
    E_SEAL_DC_SCL_PROT_NONPM =168,
    E_SEAL_JPD1_PROT_NONPM =169,
    E_SEAL_JPD2_PROT_NONPM =170,
    E_SEAL_JPD3_PROT_NONPM =171,
    E_SEAL_CMDQ_PROT_NONPM =172,
    E_SEAL_MSC_PROT_NONPM =173,
    E_SEAL_GPUAPB_PROT_NONPM =174,
    E_SEAL_X32_USB3XHCI_PROT_NONPM =175,
    E_SEAL_USBBC0_PROT_NONPM =176,
    E_SEAL_USBBC1_PROT_NONPM =177,
    E_SEAL_USBBC2_PROT_NONPM =178,
    E_SEAL_USB3_BC0_PROT_NONPM =179,
    E_SEAL_MHL_TMDS_PROT_NONPM =180,
    E_SEAL_HDCPKEY_PROT_NONPM =181,
    E_SEAL_ACP_PROT_NONPM =182,
    E_SEAL_SPARE2_PROT_NONPM =183,
    E_SEAL_SPARE3_PROT_NONPM =184,
    E_SEAL_TSP_DUMMY_PROT_NONPM =185,
    E_SEAL_CODEC_DUMMY_PROT_NONPM =186,
    E_SEAL_MHEG5_DUMMY_PROT_NONPM =187,
    E_SEAL_DSCRMB4_PROT_NONPM =188,
    E_SEAL_MENULOAD_PROT_PM =189,
    E_SEAL_GDMA_PROT_PM =190,
    E_SEAL_DDC_PROT_PM =191,
    E_SEAL_ISP_PROT_PM =192,
    E_SEAL_FSP_PROT_PM =193,
    E_SEAL_QSPI_PROT_PM =194,
    E_SEAL_PM_SLEEP_PROT_PM =195,
    E_SEAL_PM_GPIO_PROT_PM =196,
    E_SEAL_MCU_PROT_PM =197,
    E_SEAL_PM_CEC_PROT_PM =198,
    E_SEAL_PM_RTC_PROT_PM =199,
    E_SEAL_PM_RTC2_PROT_PM =200,
    E_SEAL_PM_SAR_PROT_PM =201,
    E_SEAL_PM_AV_LINK_PROT_PM =202,
    E_SEAL_PM_TOP_PROT_PM =203,
    E_SEAL_MHL_CBUS_PROT_PM =204,
    E_SEAL_EFUSE_PROT_PM =205,
    E_SEAL_IRQ_PROT_PM =206,
    E_SEAL_CACHE_PROT_PM =207,
    E_SEAL_XDMIU_PROT_PM =208,
    E_SEAL_PM_MISC_PROT_PM =209,
    E_SEAL_PM_MHL_CBUS_PROT_PM =210,
    E_SEAL_WDT_PROT_PM =211,
    E_SEAL_TIMER0_PROT_PM =212,
    E_SEAL_TIMER1_PROT_PM =213,
    E_SEAL_SEC_KEY_PROT_PM =214,
    E_SEAL_DID_KEY_PROT_PM =215,
    E_SEAL_REG_PIU_MISC_0_PROT_PM =216,
    E_SEAL_IR_PROT_PM =217,
    E_SEAL_PM_SPARE0_PROT_PM =218,
    E_SEAL_PM_SPARE1_PROT_PM =219,
    E_SEAL_FUART1_PROT_NONPM =220,
    E_SEAL_URDMA1_PROT_NONPM =221,
    E_SEAL_UPLL0_PROT_NONPM =222,
    E_SEAL_UPLL1_PROT_NONPM =223,
    E_SEAL_UART3_PROT_NONPM =224,
    E_SEAL_CLKGEN2_PROT_NONPM =225,
    E_SEAL_VDMCU51_1_IF_PROT_NONPM =226,
    E_SEAL_ADC_ATOPB_PROT_NONPM =227,
    E_SEAL_UART4_PROT_NONPM =228,
    E_SEAL_ANA_MISC_GMAC_PROT_NONPM =229,
    E_SEAL_USB30PHY_DTOP_M_0_PROT_NONPM =230,
    E_SEAL_USB30PHY_DTOP_M_1_PROT_NONPM =231,
    E_SEAL_USB3_PROT_NONPM =232,
    E_SEAL_TSO_PROT_NONPM =233,
    E_SEAL_SDIO0_PROT_NONPM =234,
    E_SEAL_MIU_ARB256_PROT_NONPM =235,
    E_SEAL_HDMITX_MISC_PROT_NONPM =236,
    E_SEAL_MIIC4_PROT_NONPM =237,
    E_SEAL_MIIC5_PROT_NONPM =238,
    E_SEAL_HDMITX_VIDEO_PROT_NONPM =239,
    E_SEAL_HDMITX_AUDIO_PROT_NONPM =240,
    E_SEAL_USB30PHY_ATOP_M_0_PROT_NONPM =241,
    E_SEAL_USB30PHY_ATOP_M_1_PROT_NONPM =242,
    E_SEAL_UTMISS0_PROT_NONPM =243,
    E_SEAL_UTMISS1_PROT_NONPM =244,
    E_SEAL_UHC3_PROT_NONPM =245,
    E_SEAL_SDIO1_PROT_NONPM =246,
    E_SEAL_SDIO2_PROT_NONPM =247,
    E_SEAL_USBBC3_PROT_NONPM =248,
    E_SEAL_USB3_BC1_PROT_NONPM =249,
    E_SEAL_SECURERANGE0_PROT_NONPM =250,
    E_SEAL_SECURERANGE1_PROT_NONPM =251,
    E_SEAL_TZPC_NONPM_PROT_NONPM =252,
    E_SEAL_NFIE3_PROT_NONPM =253,
    E_SEAL_DSCRMB5_PROT_NONPM =254,
    E_SEAL_EMMC_PLL_PROT_NONPM =255,
    E_SEAL_VIVALDI6_PROT_NONPM =256,
    E_SEAL_VIVALDI7_PROT_NONPM =257,
    E_SEAL_GMAC0_PROT_NONPM =258,
    E_SEAL_GMAC1_PROT_NONPM =259,
    E_SEAL_GMAC2_PROT_NONPM =260,
    E_SEAL_GMAC3_PROT_NONPM =261,
    E_SEAL_GMAC4_PROT_NONPM =262,
    E_SEAL_PCM2_PROT_NONPM =263,
    E_SEAL_TSP3_PROT_NONPM =264,
    E_SEAL_HEVC0_PROT_NONPM =265,
    E_SEAL_HEVC1_PROT_NONPM =266,
    E_SEAL_DYN_SCL_PROT_NONPM =267,
    E_SEAL_X32_MVD1_PROT_NONPM =268,
    E_SEAL_X32_MVD2_PROT_NONPM =269,
    E_SEAL_X32_MVD3_PROT_NONPM =270,
    E_SEAL_X32_MVD4_PROT_NONPM =271,
    E_SEAL_CODEC_MRQ_PROT_NONPM =272,
    E_SEAL_MIU3_PROT_NONPM =273,
    E_SEAL_MIU_ATOP2_PROT_NONPM =274,
    E_SEAL_X32_HVD0_PROT_NONPM =275,
    E_SEAL_X32_HVD1_PROT_NONPM =276,
    E_SEAL_X32_HVD2_PROT_NONPM =277,
    E_SEAL_X32_HVD3_PROT_NONPM =278,
    E_SEAL_X32_HVD4_PROT_NONPM =279,
    E_SEAL_X32_HVD5_PROT_NONPM =280,
    E_SEAL_X32_HVD6_PROT_NONPM =281,
    E_SEAL_X32_HVD7_PROT_NONPM =282,
    E_SEAL_X32_EVD0_PROT_NONPM =283,
    E_SEAL_X32_EVD1_PROT_NONPM =284,
    E_SEAL_X32_EVD2_PROT_NONPM =285,
    E_SEAL_X32_EVD3_PROT_NONPM =286,
    E_SEAL_X32_EVD4_PROT_NONPM =287,
    E_SEAL_X32_EVD5_PROT_NONPM =288,
    E_SEAL_X32_EVD6_PROT_NONPM =289,
    E_SEAL_X32_EVD7_PROT_NONPM =290,
    E_SEAL_X32_EVD8_PROT_NONPM =291,
    E_SEAL_X32_GPUAPB0_PROT_NONPM =292,
    E_SEAL_X32_GPUAPB1_PROT_NONPM =293,
    E_SEAL_X32_GPUAPB2_PROT_NONPM =294,
    E_SEAL_TIMER2_PROT_PM =295,
    E_SEAL_ALBANY0_PROT_PM =296,
    E_SEAL_ALBANY1_PROT_PM =297,
    E_SEAL_ALBANY2_PROT_PM =298,
    E_SEAL_NORPF_PROT_NONPM =299,
    E_SEAL_PM_PROT_NONPM =300,
    E_SEAL_ON_PROT_NONPM =301,
    E_SEAL_SWCD_PROT_NONPM =302,
    E_SEAL_ALBANY2_PROT_NONPM =303,
    E_SEAL_TZPC_PROT_PM =304,
    E_SEAL_SPARE4_PROT_NONPM =305,
    E_SEAL_SPARE5_PROT_NONPM =306,
    E_SEAL_JPD4_PROT_NONPM =307,
    E_SEAL_RIU_DBG_PROT_PM =308,
    E_SEAL_UHC4_PROT_NONPM =309,
    E_SEAL_USB4_PROT_NONPM =310,
    E_SEAL_UTMI4_PROT_NONPM =311,
    E_SEAL_USBBC4_PROT_NONPM =312,
    E_SEAL_UTMISS_PROT_NONPM =313,
    E_SEAL_VDR2_PROT_NONPM =314,
    E_SEAL_INTR_CTRL1_PROT_NONPM =315,
    E_SEAL_L3_AXI_PROT_NONPM =316,
    E_SEAL_MCU_ARM_PROT_NONPM =317,
    E_SEAL_VDMCU51_1_IF_NONPM =318,
    E_SEAL_SC_GP1_NONPM =319,
    E_SEAL_CHIPGPIO1_NONPM =320,
    E_SEAL_GPU_NONPM =321,
    E_SEAL_ANA_MISC2_NONPM =322,
    E_SEAL_AU_MAU_NONPM =323,
    E_SEAL_AU_GDMA_NONPM =324,
    E_SEAL_USB3_NONPM =325,
    E_SEAL_OTG0_NONPM =326,
    E_SEAL_OTG1_NONPM =327,
    E_SEAL_OTG2_NONPM =328,
    E_SEAL_OTG3_NONPM =329,
    E_SEAL_SECURERANGE2_NONPM =330,
    E_SEAL_TZPC_NONPM2_NONPM =331,
    E_SEAL_TSO1_NONPM =332,
    E_SEAL_MSC1_NONPM =333,
    E_SEAL_EVD_NONPM =334,
    E_SEAL_MIU_ARB_NONPM =335,
    E_SEAL_TSP4_NONPM =336,
    E_SEAL_DVI_ATOP3_NONPM =337,
    E_SEAL_HDMI_P4_NONPM =338,
    E_SEAL_HDMI2_P4_NONPM =339,
    E_SEAL_DVI_ATOP_P4_NONPM =340,
    E_SEAL_DVI_DTOP_P4_NONPM =341,
    E_SEAL_DVI_EQ_P4_NONPM =342,
    E_SEAL_HDCP_P4_NONPM =343,
    E_SEAL_DVI_POWERSAVE_P4_NONPM =344,
    E_SEAL_MIU3_NONPM =345,
    E_SEAL_MIU_ATOP3_NONPM =346,
    E_SEAL_MIU_ARB2_NONPM =347,
    E_SEAL_MIU_ARB3_NONPM =348,
    E_SEAL_MIU4_NONPM =349,
    E_SEAL_MIU_ATOP4_NONPM =350,
    E_SEAL_MIU_ARB4_NONPM =351,
    E_SEAL_GE2_NONPM =352,
    E_SEAL_GE3_NONPM =353,
    E_SEAL_HDCP22_P0_NONPM =354,
    E_SEAL_HDCP22_P1_NONPM =355,
    E_SEAL_HDCP22_P2_NONPM =356,
    E_SEAL_HDCP22_P3_NONPM =357,
    E_SEAL_HDCP22_P4_NONPM =358,
    E_SEAL_AU_R2_1_NONPM =359,
    E_SEAL_AU_MAU_1_NONPM =360,
    E_SEAL_AU_GDMA_1_NONPM =361,
    E_SEAL_VD_EVD_R2_NONPM =362,
    E_SEAL_MAU_EVD_NONPM =363,
    E_SEAL_MAU1_LV2_0_NONPM =364,
    E_SEAL_MAU1_LV2_1_NONPM =365,
    E_SEAL_MAU_EVD_LV2_0_NONPM =366,
    E_SEAL_MAU_EVD_LV2_1_NONPM =367,
    E_SEAL_SEC_MAU_LV2_0_NONPM =368,
    E_SEAL_SEC_MAU_LV2_1_NONPM =369,
    E_SEAL_TSP5_NONPM =370,
    E_SEAL_X32_USB3XHCI_NONPM =371,
    E_SEAL_X32_GPUAPB0_NONPM =372,
    E_SEAL_X32_GPUAPB1_NONPM =373,
    E_SEAL_X32_GPUAPB2_NONPM =374,
    E_SEAL_SECURERANGE3_PROT_NONPM =375,
    E_SEAL_HIREG_EVD_PROT_NONPM =376,
    E_SEAL_PM_RTC0_PROT_PM =377,
    E_SEAL_PM_RTC1_PROT_PM =378,
    E_SEAL_PM_CEC1_PROT_PM =379,
    E_SEAL_PM_CEC2_PROT_PM =380,
    E_SEAL_PM_CEC3_PROT_PM =381,
    E_SEAL_MOD2_PROT_NONPM =382,
    E_SEAL_GOPG4_0_PROT_NONPM =383,
    E_SEAL_GOPG4_1_PROT_NONPM =384,
    E_SEAL_GOPG4_ST_PROT_NONPM =385,
    E_SEAL_USB30_MIU_ARB_PROT_NONPM =386,
    E_SEAL_ZDEC_PROT_NONPM =387,
    E_SEAL_PATGEN_CODEC_PROT_NONPM =388,
    E_SEAL_PATGEN_VIV_PROT_NONPM =389,
    E_SEAL_PATGEN_CPU_PROT_NONPM =390,
    E_SEAL_PATGEN_GPU_PROT_NONPM =391,
    E_SEAL_PATGEN_DEMOD_PROT_NONPM =392,
    E_SEAL_PATGEN_TSP_PROT_NONPM =393,
    E_SEAL_PATGEN_DVI_PROT_NONPM =394,
    E_SEAL_PATGEN_EVD_PROT_NONPM =395,
    E_SEAL_PATGEN_SC0_PROT_NONPM =396,
    E_SEAL_PATGEN_SC1_PROT_NONPM =397,
    E_SEAL_PATGEN_SC2_PROT_NONPM =398,
    E_SEAL_COMBO_PHY0_P0_PROT_NONPM =399,
    E_SEAL_COMBO_PHY1_P0_PROT_NONPM =400,
    E_SEAL_COMBO_PHY0_P1_PROT_NONPM =401,
    E_SEAL_COMBO_PHY1_P1_PROT_NONPM =402,
    E_SEAL_COMBO_PHY0_P2_PROT_NONPM =403,
    E_SEAL_COMBO_PHY1_P2_PROT_NONPM =404,
    E_SEAL_COMBO_PHY0_P3_PROT_NONPM =405,
    E_SEAL_COMBO_PHY1_P3_PROT_NONPM =406,
    E_SEAL_DVI_DTOP_DUAL_P0_PROT_NONPM =407,
    E_SEAL_DVI_RSV_DUAL_P0_PROT_NONPM =408,
    E_SEAL_HDCP_DUAL_P0_PROT_NONPM =409,
    E_SEAL_DVI_DTOP_DUAL_P1_PROT_NONPM =410,
    E_SEAL_DVI_RSV_DUAL_P1_PROT_NONPM =411,
    E_SEAL_HDCP_DUAL_P1_PROT_NONPM =412,
    E_SEAL_DVI_DTOP_DUAL_P2_PROT_NONPM =413,
    E_SEAL_DVI_RSV_DUAL_P2_PROT_NONPM =414,
    E_SEAL_HDCP_DUAL_P2_PROT_NONPM =415,
    E_SEAL_DVI_DTOP_DUAL_P3_PROT_NONPM =416,
    E_SEAL_DVI_RSV_DUAL_P3_PROT_NONPM =417,
    E_SEAL_HDCP_DUAL_P3_PROT_NONPM =418,
    E_SEAL_HDMI_DUAL_0_PROT_NONPM =419,
    E_SEAL_HDMI2_DUAL_0_PROT_NONPM =420,
    E_SEAL_HDMI_DUAL_1_PROT_NONPM =421,
    E_SEAL_HDMI2_DUAL_1_PROT_NONPM =422,
    E_SEAL_COMBO_GP_TOP_PROT_NONPM =423,
    E_SEAL_USB30HS_UHC_PROT_NONPM =424,
    E_SEAL_USB30HS1_UHC_PROT_NONPM =425,
    E_SEAL_USB30HS_USBC_PROT_NONPM =426,
    E_SEAL_USB30HS1_USBC_PROT_NONPM =427,
    E_SEAL_USB30PHY1_DTOP_M_0_PROT_NONPM =428,
    E_SEAL_USB30PHY1_ATOP_M_0_NONPM =429,
    E_SEAL_MSPI_MCARD_PROT_NONPM =430,
    E_SEAL_VP9_TOP_PROT_NONPM =431,
    E_SEAL_GPU_PLL_PROT_NONPM =432,
    E_SEAL_VIVALDI8_PROT_NONPM =433,
    E_SEAL_VIVALDI9_PROT_NONPM =434,
    E_SEAL_VIVALDIa_PROT_NONPM =435,
    E_SEAL_VIVALDIb_PROT_NONPM =436,
    E_SEAL_PM_PATGEN_PROT_PM =437,
    E_SEAL_SCDC_0_PROT_PM =438,
    E_SEAL_SCDC_1_PROT_PM =439,
    E_SEAL_SCDC_2_PROT_PM =440,
    E_SEAL_SCDC_3_PROT_PM =441,
    E_SEAL_SECURE_TZPC_PROT_NONPM =442,
    E_SEAL_UP110_PORT_NONPM =443,
    E_SEAL_UP111_PORT_NONPM =444,
    E_SEAL_IDAC_NONPM =445,
    E_SEAL_DIPW_NONPM =446,
    E_SEAL_VE_DISC_NONPM =447,
    E_SEAL_VE_GAMA_NONPM =448,
    E_SEAL_GOP0G_0_PROT_NONPM =449,
    E_SEAL_GOP0G_1_PROT_NONPM =450,
    E_SEAL_GOP0G_ST_PROT_NONPM =451,
    E_SEAL_GOP3G_0_PROT_NONPM =452,
    E_SEAL_GOP3G_1_PROT_NONPM =453,
    E_SEAL_GOP3G_ST_PROT_NONPM =454,
    E_SEAL_PM_SPARE2_PROT_PM =455,
    E_SEAL_PM_SPARE3_PROT_PM =456,
    E_SEAL_HDMITX_PROT_NONPM =457,
    E_SEAL_HDCPTX_PROT_NONPM =458,
    E_SEAL_SDIO_PLL_PROT_NONPM =459,
    E_SEAL_TSP4_PROT_NONPM =460,
    E_SEAL_TSP5_PROT_NONPM =461,
    E_SEAL_MIIC_PM0_PROT_PM =462,
    E_SEAL_TZPC_PM_PROT_PM =463,
    E_SEAL_TS_SAMPLE_NONPM =464,
    E_SEAL_CLKGEN_SC_FE =465,
    E_SEAL_CLKGEN_SC_BE =466,
    E_SEAL_CLKGEN_SC_GP2 =467,
    E_SEAL_SC_GPLUS =468,
    E_SEAL_SRAM_LDO =469,
    E_SEAL_VIVALDIa_0_PROT_NONPM =470,
    E_SEAL_VIVALDIa_1_PROT_NONPM =471,
    E_SEAL_VIVALDIa_2_PROT_NONPM =472,
    E_SEAL_VIVALDIa_3_PROT_NONPM =473,
    E_SEAL_MHL_ECBUS_PROT_NONPM =474,
    E_SEAL_CBUS_AUDIO_PROT_NONPM =475,
    E_SEAL_MHL_ECBUS_PHY_PROT_NONPM =476,
    E_SEAL_L2_CACHE_PROT_NONPM =477,
    E_SEAL_PADTOP0_PROT_NONPM =478,
    E_SEAL_PADTOP1_PROT_NONPM =479,
    E_SEAL_MIPS_PATGEN_PROT_NONPM =480,
    E_SEAL_ANA_MISC_MIPSPLL_PROT_NONPM =481,
    E_SEAL_ANA_MISC_HDMI_PROT_NONPM =482,
    E_SEAL_ANA_MISC_DSP_PROT_NONPM =483,
    E_SEAL_RASP0_PROT_NONPM =484,
    E_SEAL_RASP1_PROT_NONPM =485,
    E_SEAL_RASP2_PROT_NONPM =486,
    E_SEAL_RASP3_PROT_NONPM =487,
    E_SEAL_HDNITX_MISC_PROT_NONPM =488,
    E_SEAL_GOPMIX_PROT_NONPM =489,
    E_SEAL_DAC_PLL_PROT_NONPM =490,
    E_SEAL_SECEMAC0_PROT_NONPM =491,
    E_SEAL_SECEMAC1_PROT_NONPM =492,
    E_SEAL_SECEMAC2_PROT_NONPM =493,
    E_SEAL_SECEMAC3_PROT_NONPM =494,
    E_SEAL_SECEMAC4_PROT_NONPM =495,
    E_SEAL_VE_VTRACK_NONPM =496,
    E_SEAL_VE_P2I_NONPM =497,
    E_SEAL_RASP0_FILE_PROT_NONPM =498,
    E_SEAL_RASP1_FILE_PROT_NONPM =499,
    E_SEAL_MIU_KEY_PROT_NONPM =500,
    E_SEAL_PCM1_PROT_NONPM =501,
    E_SEAL_FI_QUEUE_PROT_NONPM =502,
    E_SEAL_CH34_MOD_PROT_NONPM =503,
    E_SEAL_BYTE_WR_PROT_NONPM =504,
    E_SEAL_ONEWAY_PROT_NONPM =505,
    E_SEAL_TSP6_PROT_NONPM =506,
    E_SEAL_TSP7_PROT_NONPM =507,
    E_SEAL_CA_MIUCROSSBAR_PROT_NONPM =508,
    E_SEAL_EMM_FLT1_PROT_NONPM =509,
    E_SEAL_CA_PWD_PROT_NONPM =510,
    E_SEAL_EMM_FLT0_PROT_NONPM =511,
    E_SEAL_TSO0_PROT_NONPM =512,
    E_SEAL_KC_DESC_PROT_NONPM =513,
    E_SEAL_SEC_R2_CPU_PROT_NONPM =514,
    E_SEAL_X32_NSK_NONPM =515,
    E_SEAL_X32_BRIDGE_NONPM =516,
    E_SEAL_X32_CIPHERCH0_NONPM =517,
    E_SEAL_X32_CIPHERCH1_NONPM =518,
    E_SEAL_X32_TSCEBANK0_NONPM =519,
    E_SEAL_X32_TSCEBANK1_NONPM =520,
    E_SEAL_X32_CRYPTODMA0_NONPM =521,
    E_SEAL_X32_CRYPTODMA1_NONPM =522,
    E_SEAL_X32_KEYTABLE_NONPM =523,
    E_SEAL_X32_KEYLADDER0_NONPM =524,
    E_SEAL_X32_KEYLADDER1_NONPM =525,
    E_SEAL_X32_KEYLADDER2_NONPM =526,
    E_SEAL_X32_PROGPVR0_NONPM =527,
    E_SEAL_X32_PROGPVR1_NONPM =528,
    E_SEAL_X32_PROGPVR2_NONPM =529,
    E_SEAL_X32_PROGPVR3_NONPM =530,
    E_SEAL_X32_RSA_NONPM =531,
    E_SEAL_X32_MAILBOX_NONPM =532,
    E_SEAL_X32_OTP_CTRL_NONPM =533,
    E_SEAL_X32_OTP_PUB0_NONPM =534,
    E_SEAL_X32_OTP_PUB1_NONPM =535,
    E_SEAL_X32_OTP_PUB2_NONPM =536,
    E_SEAL_X32_OTP_PUB3_NONPM =537,
    E_SEAL_X32_NI_NONPM =538,
    E_SEAL_X32_AKL0_NONPM =539,
    E_SEAL_X32_AKL1_NONPM =540,
    E_SEAL_X32_XIUGEN_NONPM =541,
    E_SEAL_ONEWAY_PROT_PM =542,
    E_SEAL_SEC_PROT_PM =543,
    E_SEAL_UART5_PROT_NONPM =544,
    E_SEAL_SPARE6_PROT_NONPM =545,
    E_SEAL_SPARE7_PROT_NONPM =546,
    E_SEAL_USBC0_PROT_NONPM =547,
    E_SEAL_USBC1_PROT_NONPM =548,
    E_SEAL_USBC2_PROT_NONPM =549,
    E_SEAL_USBC3_PROT_NONPM =550,
    E_SEAL_SPI2FCIE_PROT_NONPM =551,
    E_SEAL_GPU_PLL_PROT_NONPN =552,
    E_SEAL_VIVALDIc_PROT_NONPM =553,
    E_SEAL_VIVALDId_PROT_NONPM =554,
    E_SEAL_DMD_MCU2_PROT_NONPM =555,
    E_SEAL_MIU_ARB_SC_NONPM =556,
    E_SEAL_MIU_ARB2_SC_NONPM =557,
    E_SEAL_VIVALDIb_0_PROT_NONPM =558,
    E_SEAL_VIVALDIb_1_PROT_NONPM =559,
    E_SEAL_VIVALDIb_2_PROT_NONPM =560,
    E_SEAL_VIVALDIb_3_PROT_NONPM =561,
    E_SEAL_PM_POR_PROT_PM =562,
    E_SEAL_TSP8_PROT_NONPM =563,
    E_SEAL_MCM_DIG_PROT_NONPM =564,
    E_SEAL_MCM_CODEC_PROT_NONPM =565,
    E_SEAL_MCM_TSP_PROT_NONPM =566,
    E_SEAL_MCM_VIVALdi9_PROT_NONPM =567,
    E_SEAL_MCM_SC_PROT_NONPM =568,
    E_SEAL_MCM_DMD_PROT_NONPM =569,
    E_SEAL_OTV23_PROT_NONPM =570,
    E_SEAL_OTV01_PROT_NONPM =571,
    E_SEAL_EVD_1_PROT_NONPM =572,
    E_SEAL_SMART2_PROT_NONPM =573,
    E_SEAL_SECMCU51_PROT_NONPM =574,
    E_SEAL_ANA_MISC_EVDPLL_MIUPLL_PROT_NONPM =575,
    E_SEAL_ANA_MISC_MPLLTOP_PROT_NONPM =576,
    E_SEAL_HI_VDR2_PROT_NONPM =577,
    E_SEAL_HI_VDR2_HIREG_PROT_NONPM =578,
    E_SEAL_AU_R2_PROT_NONPM =579,
    E_SEAL_GOP_AFBC_PROT_NONPM =580,
    E_SEAL_MCU_ARM_PMU0_PROT_NONPM =581,
    E_SEAL_GOPMIX_SD_PROT_NONPM =582,
    E_SEAL_SPI_PRE_ARB_PROT_NONPM =583,
    E_SEAL_SECGMAC0_PROT_NONPM =584,
    E_SEAL_SECGMAC1_PROT_NONPM =585,
    E_SEAL_SECGMAC2_PROT_NONPM =586,
    E_SEAL_SECGMAC3_PROT_NONPM =587,
    E_SEAL_SECGMAC4_PROT_NONPM =588,
    E_SEAL_PCIE_MAC_PROT_NONPM =589,
    E_SEAL_PCIE_AXI2MI_BRI_PROT_NONPM =590,
    E_SEAL_USB30_SS_MIUPROT0_PROT_NONPM =591,
    E_SEAL_USB30_HS0_MIUPROT1_PROT_NONPM =592,
    E_SEAL_USB30_HS1_MIUPROT2_PROT_NONPM =593,
    E_SEAL_CLKDET_PROT_NONPM =594,
    E_SEAL_EMACMIUPROT_PROT_NONPM =595,
    E_SEAL_CALB_PROT_NONPM =596,
    E_SEAL_VIVALDIa_4_PROT_NONPM =597,
    E_SEAL_VIVALDIa_5_PROT_NONPM =598,
    E_SEAL_TSP9_PROT_NONPM =599,
    E_SEAL_TSP10_PROT_NONPM =600,
    E_SEAL_USBMIUPROT0_PROT_NONPM =601,
    E_SEAL_USBMIUPROT1_PROT_NONPM =602,
    E_SEAL_USBMIUPROT2_PROT_NONPM =603,
    E_SEAL_DIG_TOP_PROT_NONPM =604,
    E_SEAL_PATGEN_ROOT_PROT_NONPM =605,
    E_SEAL_CODEC_BLOCK_PROT_NONPM =606,
    E_SEAL_HI_CODEC_BLOCK_PROT_NONPM =607,
    E_SEAL_PATGEN_HI_CODEC_BLOCK_PROT_NONPM =608,
    E_SEAL_SC_BLOCK_PROT_NONPM =609,
    E_SEAL_PATGEN_SC_PROT_NONPM =610,
    E_SEAL_TSP_BLOCK_PROT_NONPM =611,
    E_SEAL_VIVALDI9_BLOCK_PROT_NONPM =612,
    E_SEAL_PATGEN_VIVALDI9_PROT_NONPM =613,
    E_SEAL_GPU_BLOCK_PROT_NONPM =614,
    E_SEAL_HI_CODEC_LITE_BLOCK_PROT_NONPM =615,
    E_SEAL_PATGEN_HI_CODEC_BLOCK_LITE_NONPM =616,
    E_SEAL_PATGEN_GPU_DIE_PROT_NONPM =617,
    E_SEAL_HDCP22TX_PROT_NONPM =618,
    E_SEAL_HDMITX_PHY_PROT_NONPM =619,
    E_SEAL_VMX_VMARK_SC0_PROT_NONPM =620,
    E_SEAL_VMX_VMARK_SC1_PROT_NONPM =621,
    E_SEAL_HDMI3_DUAL_0_PROT_NONPM =622,
    E_SEAL_HDMITX2_PROT_NONPM =623,
    E_SEAL_X32_RNG_PROT_NONPM =624,
    E_SEAL_X32_GPUAPB_PROT_NONPM =625,
    E_SEAL_X32_PCIE_MAC_PROT_NONPM =626,
    E_SEAL_CRYPTODMA_GEN_SECURE_PROT_NONPM =627,
    E_SEAL_CRYPTODMA_GEN_NON_SEcure_PROT_NONPM =628,
    E_SEAL_CRYPTODMA_SEC_R2_PROT_NONPM =629,
    E_SEAL_CRYPTODMA_SEC_51_PROT_NONPM =630,
    E_SEAL_PM51_TO_MIU_PROT_NONPM =631,
    E_SEAL_ARM2MIU_NON_SECURE_PROT_NONPM =632,
    E_SEAL_ARM2MIU_SECURE_PROT_NONPM =633,
    E_SEAL_DEMOD_DMDMCU51_MIU_PROT_NONPM =634,
    E_SEAL_ANA_MISC_MPOP_PROT_NONPM =635,
    E_SEAL_CRYPTODMA_SEC_R2_PROT_NONPN =636,
    E_SEAL_MSPI0_PROT_PM =637,
    E_SEAL_BYTE2WORD_PROT_PM =638,
    E_SEAL_FSC1_PROT_PM =639,
    E_SEAL_OTP_LDO_PROT_PM =640,
    E_SEAL_MFSC_PROT_NONPM =641,
    E_SEAL_PATGEN_FSC_PROT_NONPM =642,
    E_SEAL_USB0_MIUPROT_PROT_NONPM =643,
    E_SEAL_USB1_MIUPROT_PROT_NONPM =644,
    E_SEAL_USB2_MIUPROT_PROT_NONPM =645,
    E_SEAL_USB3_MIUPROT_PROT_NONPM =646,
    E_SEAL_VIVALDIe_PROT_NONPM =647,
    E_SEAL_VIVALDIf_PROT_NONPM =648,
    E_SEAL_MIU_ARB3_SC_NONPM =649,
    E_SEAL_MIU_ARB_FRC_NONPM =650,
    E_SEAL_MIU_ARB2_FRC_NONPM =651,
    E_SEAL_DSCRMB6_PROT_NONPM =652,
    E_SEAL_DSCRMB7_PROT_NONPM =653,
    E_SEAL_CRI_KL_PROT_NONPM =654,
    E_SEAL_CERT_KL_PROT_NONPM =655,
    E_SEAL_X32_CRI_APB_PROT_NONPM =656,
    E_SEAL_X32_CERT_PROT_NONPM =657,
    E_SEAL_COMB1_PROT_NONPM =658,
    E_SEAL_COMB2_PROT_NONPM =659,
    E_SEAL_COMB3_PROT_NONPM =660,
    E_SEAL_COMB4_PROT_NONPM =661,
    E_SEAL_COMB5_PROT_NONPM =662,
    E_SEAL_PDW0_PROT_NONPM =663,
    E_SEAL_PDW1_PROT_NONPM =664,
    E_SEAL_DIP_PROT_NONPM =665,
    E_SEAL_STR_PROT_PM =666,
    E_SEAL_TSP_SPARE_PROT_NONPM =667,
    E_SEAL_CODEC_SPARE_PROT_NONPM =668,
    E_SEAL_MHEG5_SPARE_PROT_NONPM =669,
    E_SEAL_CCI400_PROT_NONPM =670,
    E_SEAL_ARM_CA72_PROT_NONPM =671,
    E_SEAL_SCPLL_PROT_NONPM =672,
    E_SEAL_TOP_SPARE0_PROT_NONPM =673,
    E_SEAL_TOP_SPARE1_PROT_NONPM =674,
    E_SEAL_MIPSPLL_2_PROT_NONPM =675,
    E_SEAL_SC_GPLUS_TOP_PROT_NONPM =676,
    E_SEAL_DSCRMB23_PROT_NONPM =677,
    E_SEAL_DSCRMB24_PROT_NONPM =678,
    E_SEAL_MFT_PROT_NONPM =679,
    E_SEAL_CMDQ_SUB_PROT_NONPM =680,
    E_SEAL_PATGEN_DEMOD1_PROT_NONPM =681,
    E_SEAL_DEMOD_8_PROT_NONPM =682,
    E_SEAL_DEMOD_9_PROT_NONPM =683,
    E_SEAL_MIU_DIG_E_PROT_NONPM =684,
    E_SEAL_MIU_DIG_E2_PROT_NONPM =685,
    E_SEAL_MIU_DIG_E3_PROT_NONPM =686,
    E_SEAL_MIU_DIG_E4_PROT_NONPM =687,
    E_SEAL_DMD_TOP_1_PROT_NONPM =688,
    E_SEAL_TSO2_PROT_NONPM =689,
    E_SEAL_GPU2MIU_MASK_PROT_NONPM =690,
    E_SEAL_MIU_ARBB_NONPM =691,
    E_SEAL_MIU_ARBB2_NONPM =692,
    E_SEAL_MIU_ARBB3_NONPM =693,
    E_SEAL_MIU_ARBB4_NONPM =694,
    E_SEAL_DSCRMB25_PROT_NONPM =695,
    E_SEAL_DSCRMB26_PROT_NONPM =696,
    E_SEAL_DSCRMB27_PROT_NONPM =697,
    E_SEAL_MIU_ARB3_FRC_NONPM =698,
    E_SEAL_VIVALDIa_6_PROT_NONPM =699,
    E_SEAL_HDMI3_DUAL_1_PROT_NONPM =700,
    E_SEAL_X32_PKA_APB_PROT_NONPM =701,
    E_SEAL_SC_GPLUS_TOP =702,
    E_SEAL_ZDEC_TOP_PROT_NONPM =703,
    E_SEAL_GS_PROT_NONPM =704,
    E_SEAL_STB_DC_PROT_NONPM =705,
    E_SEAL_SVP3_PROT_NONPM =706,
    E_SEAL_PM_DIG_TOP_PROT_PM =707,
    E_SEAL_BLK_DIG_PROT_NONPM =708,
    E_SEAL_PATGEN_DIG_PROT_NONPM =709,
    E_SEAL_BLK_CODEC_PROT_NONPM =710,
    E_SEAL_BLK_DMD0_PROT_NONPM =711,
    E_SEAL_BLK_HICODEC_PROT_NONPM =712,
    E_SEAL_BLK_SC_PROT_NONPM =713,
    E_SEAL_BLK_TSP_PROT_NONPM =714,
    E_SEAL_BLK_VIVALDI9_PROT_NONPM =715,
    E_SEAL_INTR_CTRL_CPU0_1_PROT_NONPM =716,
    E_SEAL_INTR_CTRL_CPU1_1_PROT_NONPM =717,
    E_SEAL_INTR_CTRL_CPU2_1_PROT_NONPM =718,
    E_SEAL_INTR_CTRL_CPU3_1_PROT_NONPM =719,
    E_SEAL_HVD1_PROT_NONPM =720,
    E_SEAL_INTR_CTRL_CPU0_0_PROT_NONPM =721,
    E_SEAL_INTR_CTRL_CPU1_0_PROT_NONPM =722,
    E_SEAL_INTR_CTRL_CPU2_0_PROT_NONPM =723,
    E_SEAL_INTR_CTRL_CPU3_0_PROT_NONPM =724,
    E_SEAL_SATA_GHC_PROT_NONPM =725,
    E_SEAL_SATA_P0_PROT_NONPM =726,
    E_SEAL_SATA_MISC_PROT_NONPM =727,
    E_SEAL_SATA_MIUPROT_PROT_NONPM =728,
    E_SEAL_SATA_PHY_PROT_NONPM =729,
    E_SEAL_INTR_CTRL_CPU4_0_PROT_NONPM =730,
    E_SEAL_INTR_CTRL_CPU4_1_PROT_NONPM =731,
    E_SEAL_MFDEC_PROT_NONPM =732,
    E_SEAL_CLKGEN_AUR2_0_PROT_NONPM =733,
    E_SEAL_PATGEN_AUR2_0_PROT_NONPM =734,
    E_SEAL_CLKGEN_AUR2_1_PROT_NONPM =735,
    E_SEAL_PATGEN_AUR2_1_PROT_NONPM =736,
    E_SEAL_GOP5G_0_PROT_NONPM =737,
    E_SEAL_GOP5G_1_PROT_NONPM =738,
    E_SEAL_GOP5G_ST_PROT_NONPM =739,
    E_SEAL_TZPC_MIU0_PROT_NONPM =740,
    E_SEAL_TZPC_MIU1_PROT_NONPM =741,
    E_SEAL_TZPC_HOSTID_NONPM_PROT_NONPM =742,
    E_SEAL_IMONITOR_PROT_NONPM =743,
    E_SEAL_MIU_PROTECT_PROT_NONPM =744,
    E_SEAL_MIU_PROTECT2_PROT_NONPM =745,
    E_SEAL_PKA_PROT_NONPM =746,
    E_SEAL_PKA_BYTE2WORD_PROT_NONPM =747,
    E_SEAL_TSIO0_PROT_NONPM =748,
    E_SEAL_TSIO1_PROT_NONPM =749,
    E_SEAL_TSIO2_PROT_NONPM =750,
    E_SEAL_TSIO3_PROT_NONPM =751,
    E_SEAL_TSO3_PROT_NONPM =752,
    E_SEAL_TSIO_LOC_DEC_PROT_NONPM =753,
    E_SEAL_TSIO_PHY_PROT_NONPM =754,
    E_SEAL_VD_R2_SUBSYS_PROT_NONPM =755,
    E_SEAL_X32_PIDSLOTMTN_PROT_NONPM =756,
    E_SEAL_X32_KEYLADDER0_1_NONPM =757,
    E_SEAL_X32_CA_MPROT_NONPM =758,
    E_SEAL_X32_CA_RPROT_NONPM =759,
    E_SEAL_X32_GMAC0_NONPM =760,
    E_SEAL_X32_GMAC1_NONPM =761,
    E_SEAL_X32_GMAC2_NONPM =762,
    E_SEAL_X32_EMAC0_NONPM =763,
    E_SEAL_X32_EMAC1_NONPM =764,
    E_SEAL_X32_EMAC2_NONPM =765,
    E_SEAL_X32_SATA_MAC_PROT_NONPM =766,
    E_SEAL_TSP_PVR4_PROT_NONPM =767,
    E_SEAL_TSP_VQ_PROT_NONPM =768,
    E_SEAL_TSP_OR_PROT_NONPM =769,
    E_SEAL_TSP_SEC_PROT_NONPM =770,
    E_SEAL_TSP_FILEIN_ILLEGAL_PROT_NONPM =771,
    E_SEAL_TSP_NON_SECURE_PROT_NONPM =772,
    E_SEAL_STR_DATA_PM_PROT_PM =773,
    E_SEAL_MIU_BWFLAG_PROT_NONPM =774,
    E_SEAL_MIU_BWFLAG2_PROT_NONPM =775,
    E_SEAL_X32_CPUAPB0_NONPM =776,
    E_SEAL_PAD_MUX_NONPM =777,
    E_SEAL_ROM_CRC_NONPM =778,
    E_SEAL_SECURE_HDMITX_NONPM =779,
    E_SEAL_DEMOD_MIU_ARB_PROT_NONPM =780,
    E_SEAL_DEMOD_BLOCK_PROT_NONPM =781,
    E_SEAL_SECPVR_LUT_PROT_NONPM =782,
    E_SEAL_PVR_FSC0_PROT_NONPM =783,
    E_SEAL_PVR_FSC1_PROT_NONPM =784,
    E_SEAL_PVR_FSC2_PROT_NONPM =785,
    E_SEAL_PVR_FSC3_PROT_NONPM =786,
    E_SEAL_X32_CFB_0_PROT_NONPM =787,
    E_SEAL_X32_CFB_1_PROT_NONPM =788,
    E_SEAL_AEON_I_PROT_NONPM =789,
    E_SEAL_DSP_I_PROT_NONPM =790,
    E_SEAL_SECU_51_I_PROT_NONPM =791,
    E_SEAL_AU_R2_1_I_PROT_NONPM =792,
    E_SEAL_AU_R2_0_I_PROT_NONPM =793,
    E_SEAL_VD_R2_I_PROT_NONPM =794,
    E_SEAL_SECU_R2_I_PROT_NONPM =795,
    E_SEAL_DMD51_I_PROT_NONPM =796,
    E_SEAL_ARM_I_NON_SECURE_PROT_NONPM =797,
    E_SEAL_ARM_I_SECURE_PROT_NONPM =798,
    E_SEAL_PM51_I_PROT_NONPM =799,
    E_SEAL_X32_SATA_MAC_01_PROT_NONPM =800,
    E_SEAL_X32_SATA_MAC_02_PROT_NONPM =801,
    E_SEAL_X32_SATA_MAC_03_PROT_NONPM =802,
    E_SEAL_AEON_D_PROT_NONPM =803,
    E_SEAL_DSP_D_PROT_NONPM =804,
    E_SEAL_SECU_51_D_PROT_NONPM =805,
    E_SEAL_AU_R2_1_D_PROT_NONPM =806,
    E_SEAL_AU_R2_0_D_PROT_NONPM =807,
    E_SEAL_VD_R2_D_PROT_NONPM =808,
    E_SEAL_SECU_R2_D_PROT_NONPM =809,
    E_SEAL_DMD51_D_PROT_NONPM =810,
    E_SEAL_ARM_D_NON_SECURE_PROT_NONPM =811,
    E_SEAL_ARM_D_SECURE_PROT_NONPM =812,
    E_SEAL_PM51_D_PROT_NONPM =813,
    E_SEAL_IR_TX_PROT_PM =814,
    E_SEAL_IR_TX_MEM_PROT_PM =815,
    E_SEAL_IR2_PROT_PM =816,
    E_SEAL_MAILBOX_PQ_PROT_NONPM =817,
    E_SEAL_BAT_PROT_NONPM =818,
    E_SEAL_SC_EXT_PROT_NONPM =819,
    E_SEAL_MSC_EXT_PROT_NONPM =820,
    E_SEAL_DWIN0_PROT_NONPM =821,
    E_SEAL_DWIN1_PROT_NONPM =822,
    E_SEAL_DIP_0_PROT_NONPM =823,
    E_SEAL_DIP_1_PROT_NONPM =824,
    E_SEAL_DDI_0_PROT_NONPM =825,
    E_SEAL_DDI_1_PROT_NONPM =826,
    E_SEAL_WFIMON_PROT_PM =827,
    E_SEAL_ANA_MISC_MIPSPLL1_PROT_NONPM =828,
    E_SEAL_ANA_MISC_MIPSPLL2_PROT_NONPM =829,
    E_SEAL_X32_MAILBOX_1_NONPM =830,
    E_SEAL_ANA_MISC_LPF_PROT_NONPM =831,
    E_SEAL_ANA_MISC_DDR_SCAL_PROT_NONPM =832,
    E_SEAL_GEMAC0_PROT_NONPM =833,
    E_SEAL_GEMAC1_PROT_NONPM =834,
    E_SEAL_GEMAC2_PROT_NONPM =835,
    E_SEAL_GEMAC3_PROT_NONPM =836,
    E_SEAL_GEMAC4_PROT_NONPM =837,
    E_SEAL_CH34_MOD1_PROT_NONPM =838,
    E_SEAL_X32_GEMAC0_NONPM =839,
    E_SEAL_X32_GEMAC1_NONPM =840,
    E_SEAL_X32_GEMAC2_NONPM =841,
    E_SEAL_BLK_DIG_PM_PROT_PM =842,
 E_SEAL_IP_NUM =843
}eSeal_IP;

typedef enum
{
    E_SEAL_LOCK_NONE =0,
    E_SEAL_LOCK_DUMMY =1,
    E_SEAL_VD_R2_INST_BUF =2,
    E_SEAL_HK_R2_INST_BUF =3,
    E_SEAL_AUDIO_DEC_R2_INST_BUF =4,
    E_SEAL_AUDIO_DEC_ES_BUF =5,
    E_SEAL_AUDIO_ENC_R2_INST_BUF =6,
    E_SEAL_AUDIO_ENC_ES_BUF =7,
    E_SEAL_HVD_ES0_BUF =8,
    E_SEAL_HVD_ES1_BUF =9,
    E_SEAL_HVD_ES2_BUF =10,
    E_SEAL_MFE0_ES_BUF =11,
    E_SEAL_MFE1_ES_BUF =12,
    E_SEAL_TSP_AEON_INS_BUF =13,
    E_SEAL_PVR_BUF =14,
    E_SEAL_SECURE_RANGE =15,
    E_SEAL_SC_BUF =16,
    E_SEAL_GE_BUF =17,
    E_SEAL_SC_WP_DIPW =18,
    E_SEAL_SC_RP_DIPW =19,
    E_SEAL_SC_WP_DIPR =20,
    E_SEAL_SC_RP_DIPR =21,
    E_SEAL_CIPHERENG_WP_SYSKEY =22,
    E_SEAL_CIPHERENG_RP_SYSKEY =23,
    E_SEAL_DSCRMB_WP_RIV0 =24,
    E_SEAL_DSCRMB_RP_RIV0 =25,
    E_SEAL_DSCRMB_WP_RIV1 =26,
    E_SEAL_DSCRMB_RP_RIV1 =27,
    E_SEAL_DSCRMB_WP_WDATA =28,
    E_SEAL_DSCRMB_RP_WDATA =29,
    E_SEAL_DSCRMB_RP_RDATA =30,
    E_SEAL_RNG_PROTECT =31,
    E_SEAL_RSA_PROTECT =32,
    E_SEAL_SHA_PROTECT =33,
    E_SEAL_MVD_WR_PROTN_0 =34,
    E_SEAL_MVD_WR_PROTN_1 =35,
    E_SEAL_MVD_WR_PROTN_2 =36,
    E_SEAL_EVD_0_WR_PROTN_0 =37,
    E_SEAL_EVD_1_WR_PROTN_0 =38,
    E_SEAL_MHEG5_WR_PROTN_0 =39,
    E_SEAL_TSO_WP_TSOFI =40,
    E_SEAL_TSO_RP_TSOFI =41,
    E_SEAL_MMFI_WP_MMFI0 =42,
    E_SEAL_MMFI_RP_MMFI0 =43,
    E_SEAL_MMFI_WP_MMFI1 =44,
    E_SEAL_MMFI_RP_MMFI1 =45,
    E_SEAL_TSP0_WP_PVR =46,
    E_SEAL_TSP0_RP_PVR =47,
    E_SEAL_TSP0_WP_PVR1 =48,
    E_SEAL_TSP0_RP_PVR1 =49,
    E_SEAL_TSP0_WP_FILEIN =50,
    E_SEAL_TSP0_RP_FILEIN =51,
    E_SEAL_TSP0_WP_QMEM =52,
    E_SEAL_TSP0_RP_QMEM =53,
    E_SEAL_TSP0_WP_FW =54,
    E_SEAL_TSP0_RP_FW =55,
    E_SEAL_VE_WP =56,
    E_SEAL_VE_RP =57,
    E_SEAL_SC_WP_OD =58,
    E_SEAL_SC_RP_OD =59,
    E_SEAL_SC_WP_SCM_M =60,
    E_SEAL_SC_RP_SCM_M =61,
    E_SEAL_SC_WP_SCM_S =62,
    E_SEAL_SC_RP_SCM_S =63,
    E_SEAL_SC_WP_PDW0 =64,
    E_SEAL_SC_RP_PDW0 =65,
    E_SEAL_SC_WP_PDW1 =66,
    E_SEAL_SC_RP_PDW1 =67,
    E_SEAL_SC_WP_OPW =68,
    E_SEAL_SC_RP_OPW =69,
    E_SEAL_GOPD_PROTN =70,
    E_SEAL_GE0_SB_PROTN =71,
    E_SEAL_GE0_DB_PROTN =72,
    E_SEAL_GE1_SB_PROTN =73,
    E_SEAL_GE1_DB_PROTN =74,
    E_SEAL_AUDIO_LCL_R2_WR_PROTN_0 =75,
    E_SEAL_AUDIO_LCL_R2_WR_PROTN_1 =76,
    E_SEAL_AUDIO_LCL_R2_WR_PROTN_2 =77,
    E_SEAL_AUDIO_LCL_R2_WR_PROTN_3 =78,
    E_SEAL_AUDIO_SCL_R2_WR_PROTN_0 =79,
    E_SEAL_AUDIO_SCL_R2_WR_PROTN_1 =80,
    E_SEAL_AUDIO_SCL_R2_WR_PROTN_2 =81,
    E_SEAL_AUDIO_SCL_R2_WR_PROTN_3 =82,
    E_SEAL_SECURE_R2_WR_PROTN_0 =83,
    E_SEAL_SECURE_R2_WR_PROTN_1 =84,
    E_SEAL_SECURE_R2_WR_PROTN_2 =85,
    E_SEAL_SECURE_R2_WR_PROTN_3 =86,
    E_SEAL_EVD_R2_WR_PROTN_0 =87,
    E_SEAL_EVD_R2_WR_PROTN_1 =88,
    E_SEAL_EVD_R2_WR_PROTN_2 =89,
    E_SEAL_EVD_R2_WR_PROTN_3 =90,
    E_SEAL_HVD_R2_WR_PROTN_0 =91,
    E_SEAL_HVD_R2_WR_PROTN_1 =92,
    E_SEAL_HVD_R2_WR_PROTN_2 =93,
    E_SEAL_HVD_R2_WR_PROTN_3 =94,
    E_SEAL_AUDIO_DSP_ES_PROTN =95,
    E_SEAL_AUDIO_DSP_CACHE_PROTN =96,
    E_SEAL_EVD_0_WR_PROTN_1 =97,
    E_SEAL_EVD_1_WR_PROTN_1 =98,
    E_SEAL_DSCRMB_WP_RIV2 =99,
    E_SEAL_DSCRMB_RP_RIV2 =100,
    E_SEAL_DSCRMB_WP_RIV3 =101,
    E_SEAL_DSCRMB_RP_RIV3 =102,
    E_SEAL_SC2_WP_SCM_M =103,
    E_SEAL_SC2_RP_SCM_M =104,
    E_SEAL_VP9_TOP =105,
    E_SEAL_TSP0_WP_FILEIN1 =106,
    E_SEAL_TSP0_RP_FILEIN1 =107,
    E_SEAL_TSP0_WP_PVR2 =108,
    E_SEAL_TSP0_RP_PVR2 =109,
    E_SEAL_TSP0_WP_FIQ =110,
    E_SEAL_TSP0_RP_FIQ =111,
    E_SEAL_MVOP_WP_TLB =112,
    E_SEAL_AUDIO_PAS_PROTN =113,
    E_SEAL_AUDIO_AL_PROTN =114,
    E_SEAL_TSP_WP_PVR3 =115,
    E_SEAL_TSP_RP_PVR3 =116,
    E_SEAL_TSP_WP_FILEIN2 =117,
    E_SEAL_TSP_RP_FILEIN2 =118,
    E_SEAL_TSP_WP_FILEIN3 =119,
    E_SEAL_TSP_RP_FILEIN3 =120,
    E_SEAL_TSP_WP_FILEIN4 =121,
    E_SEAL_TSP_RP_FILEIN4 =122,
    E_SEAL_TSP_WP_FILEIN5 =123,
    E_SEAL_TSP_RP_FILEIN5 =124,
    E_SEAL_CRI_KL_WP_N =125,
    E_SEAL_PCIERC_IBWP_PROTN =126,
    E_SEAL_PCIERC_OBWP_PROTN =127,
    E_SEAL_TSP_WP_FILEIN1 =128,
    E_SEAL_TSP_RP_FILEIN1 =129,
    E_SEAL_TSP_WP_FIQ0 =130,
    E_SEAL_TSP_RP_FIQ0 =131,
    E_SEAL_TSP_WP_PVR4 =132,
    E_SEAL_TSP_RP_PVR4 =133,
    E_SEAL_TSP_WP_FIQ1 =134,
    E_SEAL_TSP_RP_FIQ1 =135,
    E_SEAL_TSP_WP_ORZ =136,
    E_SEAL_TSP_RP_ORZ =137,
    E_SEAL_USB_MIUPROT_WP_N =138,
    E_SEAL_EMAC_MIUPROT_WP_N =139,
    E_SEAL_PCIE_MIUPROT_WP_N =140,
    E_SEAL_AU_HDMI_DMA_WP_N =141,
    E_SEAL_TSP_WP_VQ =142,
    E_SEAL_TSP_RP_VQ =143,
    E_SEAL_TSP_WP_SEC =144,
    E_SEAL_TSP_RP_SEC =145,
    E_SEAL_TSP_WP_FIQ2 =146,
    E_SEAL_TSP_RP_FIQ2 =147,
    E_SEAL_TSP_WP_FIQ3 =148,
    E_SEAL_TSP_RP_FIQ3 =149,
    E_SEAL_EVD_LITE_0_WR_PROTN_0 =150,
    E_SEAL_EVD_LITE_1_WR_PROTN_1 =151,
    E_SEAL_GOPG_WP_N =152,
    E_SEAL_DIP_PROTN =153,
    E_SEAL_HDGEN_WP_N =154,
    E_SEAL_HDGEN_RP_N =155,
    E_SEAL_HDGEN_DCS_MV_WP_N =156,
    E_SEAL_HDGEN_DCS_MV_RP_N =157,
    E_SEAL_VE_DCS_MV_WP_N =158,
    E_SEAL_VE_DCS_MV_RP_N =159,
    E_SEAL_LOCK_ECO =160,
    E_SEAL_VTRACK_PROTN =161,
    E_SEAL_FCIE_WR_PROT_ENABLE_0 =162,
    E_SEAL_FCIE_WR_PROT_ENABLE_1 =163,
    E_SEAL_FCIE_WR_PROT_ENABLE_2 =164,
    E_SEAL_FCIE_WR_PROT_ENABLE_3 =165,
    E_SEAL_HDCP_RIU_R_PROTN =166,
    E_SEAL_HDCP_XIU_R_PROTN =167,
    E_SEAL_HDCP_RIU_W_PROTN =168,
    E_SEAL_HDCP_XIU_W_PROTN =169,
    E_SEAL_FCIE_WR_PROT_0_LOCK =170,
    E_SEAL_FCIE_WR_PROT_1_LOCK =171,
    E_SEAL_FCIE_WR_PROT_2_LOCK =172,
    E_SEAL_FCIE_WR_PROT_3_LOCK =173,
    E_SEAL_LOCK_NUM =174
}eSeal_Lock;

typedef enum
{
    E_SEAL_OVERLAP =0,
    E_SEAL_CONTAIN =1
} eSeal_CheckSecureRangeType;

typedef enum
{
    E_SEAL_IPGROUP_VDEC_R2,
    E_SEAL_IPGROUP_VDEC_DECODER,
} eSeal_IPGroup;

typedef struct
{
    MS_BOOL bIsHit;
    MS_U8 u8MiuDev;
    MS_U8 u8SecureRangeId;
    MS_U8 u8ClientId;
    MS_BOOL bIsSecure;
    MS_BOOL bIsWrite;
    MS_U64 u64HitAddr;
}Seal_PortectInfo;

typedef struct
{
    MS_U8 u8MiuDev;
    MS_U8 u8SecureRangeId;
    MS_U64 u64StartAddr;
    MS_U64 u64EndAddr;
    MS_U32 u32Attribute;
}Seal_SecureRangeInfo;

typedef void (*SEAL_CB_FUNC)(InterruptNum eIntNum);
# 1339 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvSEAL.h"
MS_BOOL MDrv_SEAL_Init(void);







MS_BOOL MDrv_Seal_SecureRangeSet(MS_U8 u8SecureRangeId ,MS_U64 u64StartAddr, MS_U64 u64EndAddr, MS_U32 u32Attribute);







MS_BOOL MDrv_Seal_SecureRangeQuery(MS_U8 u8MiuDev, MS_U8 u8SecureRangeId, Seal_SecureRangeInfo *pSecureRangeInfo);







MS_BOOL MDrv_Seal_IMI_RangeSet(MS_U32 u32StartAddr, MS_U32 u32EndAddr, MS_BOOL bEnable);







MS_BOOL MDrv_Seal_GetHittedInfo(MS_U8 u8MiuDev, Seal_PortectInfo *pInfo);







MS_BOOL MDrv_Seal_SecureRangeLock(MS_U8 u8MiuDev, MS_U8 u8SecureRangeId);







MS_BOOL MDrv_Seal_NonSecureProcessorSet(MS_U8 u8ProcessorId, MS_BOOL bNonEnable);







MS_BOOL MDrv_Seal_NonSecureProcessorQuery(MS_U8 u8ProcessorId, MS_BOOL *bNonSecure);







MS_BOOL MDrv_Seal_SecureSlaveSet(MS_U32 u32SlaveId, MS_BOOL bSecure);







MS_BOOL MDrv_Seal_SecureSlaveQuery(MS_U32 u32SlaveId, MS_BOOL *pSecure);







MS_BOOL MDrv_Seal_SecureMasterSet(MS_U32 u32MasterId, MS_BOOL bSecure);







MS_BOOL MDrv_Seal_SecureMasterQuery(MS_U32 u32MasterId, MS_BOOL *pSecure);







MS_U32 MDrv_Seal_SetPowerState(EN_POWER_MODE u16PowerState);







MS_BOOL MDrv_Seal_BufferLock(MS_U8 u8BufferLockId, MS_BOOL bLock);







MS_BOOL MDrv_Seal_ENInterrupt(MS_BOOL bEnable);







MS_BOOL MDrv_Seal_AttachCallbackFunc(SEAL_CB_FUNC pSEALCBFunc);







MS_BOOL MDrv_Seal_DispatchCallbackFunc(void);

MS_BOOL MDrv_Seal_CheckSecureRange(MS_PHY phyStartAddr, MS_U32 u32Length, eSeal_CheckSecureRangeType eCheckSecureRangeType);

MS_BOOL MDrv_Seal_QueryBufferLocked(eSeal_Lock eLockId, MS_BOOL* bLocked);

#ifdef MSOS_TYPE_OPTEE
MS_BOOL MDrv_Seal_ChangeIPSecureDMAAbillity(MS_U32 u32ModuleID, MS_U32 u32ModuleParameter, MS_U32 u32IsSecure);
MS_BOOL MDrv_Seal_SetSecureRange(MS_PHY u64phy, MS_U32 u32Length, MS_U32 u32IsSecure);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 128 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGPD.h"
#ifndef _API_GPD_H_
#define _API_GPD_H_ 

#ifdef __cplusplus
extern "C" {
#endif

#include "UFO.h"

#define MSIF_GPD_LIB_CODE {'G','P','D','_'}
#define MSIF_GPD_LIBVER {'0','1'}
#define MSIF_GPD_BUILDNUM {'0','3'}
#define MSIF_GPD_CHANGELIST {'0','0','6','1','4','5','9','5'}


#define GPD_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_GPD_LIB_CODE, \
    MSIF_GPD_LIBVER, \
    MSIF_GPD_BUILDNUM, \
    MSIF_GPD_CHANGELIST, \
    MSIF_OS



#if !defined(U8)
#define U8 MS_U8
#endif
#if !defined(U16)
#define U16 MS_U16
#endif
#if !defined(U32)
#define U32 MS_U32
#endif
#if !defined(S8)
#define S8 MS_S8
#endif
#if !defined(S16)
#define S16 MS_S16
#endif
#if !defined(S32)
#define S32 MS_S32
#endif



#if !defined(TRUE) && !defined(FALSE)
#define TRUE 1
#define FALSE 0
#endif

#define ARGB8888 0
#define YUV422 1
#define RGB565 2
#define YVYU422 3
#define GRAY 4
#define GRAY_ALPHA 5

#ifndef GPD_SUPPORT_MGIF
#define GPD_SUPPORT_MGIF 1
#endif

#ifndef GPD_NO_SUPPORT_MGIF
#define GPD_NO_SUPPORT_MGIF 0
#endif

#define GPD_VERSION 0x12062516
#define WORDALIGN 0x3
#define GPD_CLOCK_OFFSET (0x50 << 1)

#define GPD_UTOPIA20 (1)

typedef struct DLL_PACKED
{
    MS_PHY u32PA_ReadBufferAddr;
    MS_VIRT u32VA_ReadBufferAddr;
    MS_U32 u32ReadBufferSize;
    MS_PHY u32PA_WriteBufferAddr;
    MS_VIRT u32VA_WriteBufferAddr;
    MS_U32 u32WriteBufferSize;
    MS_PHY u32PA_DepthBufferAddr;
    MS_VIRT u32VA_DepthBufferAddr;
    MS_PHY u32PA_ColorBufferAddr;
    MS_VIRT u32VA_ColorBufferAddr;
    MS_VIRT RegBaseAddr;
    MS_VIRT ReadBitBaseAddr;
} gpd_addr_info;


typedef struct DLL_PACKED
{
    char *filename;
    MS_U32 u32Width;
    MS_U32 u32Height;
    MS_U8 u8BitPP;
    MS_U8 u8Interlace;
    MS_S32 enGPDStatus;
    MS_U8 u8MGIF;
} gpd_pic_info;


typedef struct DLL_PACKED
{
    MS_U32 hstart;
    MS_U32 vstart;
    MS_U32 width;
    MS_U32 height;

} gpd_roi_info;

typedef struct DLL_PACKED
{
    MS_PHY u32PA_StartAddr;
    MS_PHY u32PA_EndAddr;

} gpd_access_region;

typedef struct DLL_PACKED
{
    MS_U32 u32Width;
    MS_U32 ocolor;
    MS_U32 u32Pitch;
} gpd_get_pitch_info;

typedef enum {
    GPD_STATE_MGIF_TERMINATE,
    GPD_STATE_GIF_ERROR,
    GPD_STATE_MGIF_WAIT_BUFFFER,
    GPD_STATE_GIF_SUCCESS
} gpd_state;


typedef enum
{
    E_GPD_USER_CMD_SET_ACCESS_REGION = 0,
    E_GPD_USER_CMD_SET_CACHEABLE,
    E_GPD_USER_CMD_SET_DEBUG_LEVEL,

} gpd_user_cmd;

typedef enum
{
    E_GPD_GET_CMD_GET_PITCH = 0,

} gpd_get_cmd;

typedef enum
{
    E_GPD_SCALE_ONE_TO_TWO,
    E_GPD_SCALE_ONE_TO_FOUR,
    E_GPD_SCALE_ONE_TO_EIGHT,
    E_GPD_SCALE_ONE_TO_SIXTEEN,
} gpd_scale_mode;

#if 1






void *MApi_GPD_Init(MS_PHY SrcBuf);
# 303 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGPD.h"
MS_S32 MApi_GPD_InputSource(gpd_pic_info* param, MS_PHY InputBuf, MS_U32 Size);
# 312 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGPD.h"
MS_S32 MApi_GPD_OutputDecode(MS_PHY DecodeBuf, MS_U32 ocolor, MS_U32 Size);
# 322 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGPD.h"
MS_S32 MApi_GPD_OutputDecodeROI(MS_PHY DecodeBuf, MS_U32 ocolor, MS_U32 Size, gpd_roi_info *roi);
# 331 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGPD.h"
MS_S32 MApi_GPD_OutputDecodeMGIF(MS_PHY DecodeBuf, MS_U32 ocolor, MS_U32 Size);







MS_S32 MApi_GPD_GetDuration(void);






#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
void MApi_GPD_SetGIFMode(int mode);
#else
void MApi_GPD_SetGIFMode(MS_U32 mode);
#endif

#else

MS_S32 MAdp_GPD_Init(void);
MS_S32 MAdp_GPD_Play(gpd_pic_info* param, MS_U32 ocolor, MS_U8 *srcbuffer, MS_U32 size);
MS_S32 MAdp_GPD_Compare(MS_U32 ocolor_typ);
#endif







void MApi_GPD_ScalingEnable(MS_U32 mode);






void MApi_GPD_ScalingDisable(void);







MS_U32 MApi_GPD_SetControl(gpd_user_cmd cmd_id, MS_VIRT param);







#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
U32 MApi_GPD_GetControl(gpd_get_cmd cmd_id, U32* param);
#else
MS_U32 MApi_GPD_GetControl(gpd_get_cmd cmd_id, MS_VIRT param);
#endif
# 403 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGPD.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
U32 MApi_GPD_GetCRCResult(const MS_U8 *pu8Data, MS_U32 u32Size, MS_U32 u32Width, unsigned int ocolor);
#else
MS_U32 MApi_GPD_GetCRCResult(const MS_U8 *pu8Data, MS_U32 u32Size, MS_U32 u32Width, MS_U32 ocolor);
#endif

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS_v2.h"
#ifndef _DRV_DVBS_V2_H_
#define _DRV_DVBS_V2_H_ 



#include "drvDMD_INTERN_DVBS.h"
#ifdef __cplusplus
extern "C"
{
#endif

#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif



typedef enum {
    DMD_DVBS_DRV_CMD_Init,
    DMD_DVBS_DRV_CMD_Exit,
    DMD_DVBS_DRV_CMD_SetDbgLevel,
    DMD_DVBS_DRV_CMD_GetInfo,
    DMD_DVBS_DRV_CMD_GetLibVer,
    DMD_DVBS_DRV_CMD_GetFWVer,
    DMD_DVBS_DRV_CMD_GetDSPReg,
    DMD_DVBS_DRV_CMD_SetDSPReg,
    DMD_DVBS_DRV_CMD_GetReg,
    DMD_DVBS_DRV_CMD_SetReg,
    DMD_DVBS_DRV_CMD_SetSerialControl,
    DMD_DVBS_DRV_CMD_BlindScan_Config,
    DMD_DVBS_DRV_CMD_BlindScan_Config_symbol_rate_list,
    DMD_DVBS_DRV_CMD_SetConfig,
    DMD_DVBS_DRV_CMD_SetConfig_symbol_rate_list,
    DMD_DVBS_DRV_CMD_SetActive,
    DMD_DVBS_DRV_CMD_GetLockWithRFPower,
    DMD_DVBS_DRV_CMD_GetSignalStrengthWithRFPower,

    DMD_DVBS_DRV_CMD_ActiveDmdSwitch,
    DMD_DVBS_DRV_CMD_GetSNR,
    DMD_DVBS_DRV_CMD_GetPostViterbiBer,
    DMD_DVBS_DRV_CMD_GetPacketErr,
    DMD_DVBS_DRV_CMD_GetCellID,
    DMD_DVBS_DRV_CMD_GetStatus,
    DMD_DVBS_DRV_CMD_SetPowerState,
    DMD_DVBS_DRV_CMD_Demod_Restart,
    DMD_DVBS_DRV_CMD_Get_FreqOffset,
    DMD_DVBS_DRV_CMD_BlindScan_Start,
    DMD_DVBS_DRV_CMD_BlindScan_NextFreq,
    DMD_DVBS_DRV_CMD_BlindScan_Cancel,
    DMD_DVBS_DRV_CMD_BlindScan_End,
    DMD_DVBS_DRV_CMD_BlindScan_GetChannel,
    DMD_DVBS_DRV_CMD_BlindScan_GetCurrentFreq,
    DMD_DVBS_DRV_CMD_BlindScan_WaitCurFreqFinished,
    DMD_DVBS_DRV_CMD_BlindScan_GetTunerFreq,
    DMD_DVBS_DRV_CMD_DiSEqC_Init,
    DMD_DVBS_DRV_CMD_DiSEqC_SetLNBOut,
    DMD_DVBS_DRV_CMD_DiSEqC_GetLNBOut,
    DMD_DVBS_DRV_CMD_DiSEqC_Set22kOnOff,
    DMD_DVBS_DRV_CMD_DiSEqC_Get22kOnOff,
    DMD_DVBS_DRV_CMD_DiSEqC_SendCmd,
    DMD_DVBS_DRV_CMD_DiSEqC_SetTxToneMode,
    DMD_DVBS_DRV_CMD_DiSEqC_SetTone,
    DMD_DVBS_DRV_CMD_UnicableAGCCheckPower,
    DMD_DVBS_DRV_CMD_GetIFAGC,


    DMD_DVBS_DRV_CMD_GetTsDivNum,
    DMD_DVBS_DRV_CMD_GetCurrentDemodCodeRate,
    DMD_DVBS_DRV_CMD_GetTunrSignalLevel_PWR,

    DMD_DVBS_DRV_CMD_Set_IS_ID,
    DMD_DVBS_DRV_CMD_Set_Default_IS_ID,
    DMD_DVBS_DRV_CMD_Get_IS_ID_INFO,
    DMD_DVBS_DRV_CMD_VCM_Init,
    DMD_DVBS_DRV_CMD_VCM_Check,
    DMD_DVBS_DRV_CMD_VCM_Enabled,
    DMD_DVBS_DRV_CMD_VCM_Mode,
    DMD_DVBS_DRV_CMD_INT_MODE,
    DMD_DVBS_DRV_CMD_GetParam,
    DMD_DVBS_DRV_CMD_GetAGCInfo
} DMD_DVBS_DRV_COMMAND;


typedef struct DLL_PACKED _DMD_DVBS_InitData_Transform
{

    MS_U8 u8SarChannel;
# 205 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS_v2.h"
    MS_U8 *u8DMD_DVBS_DSPRegInitExt;
    MS_U8 u8DMD_DVBS_DSPRegInitSize;
    MS_U8 *u8DMD_DVBS_InitExt;
} DMD_DVBS_InitData_Transform;


typedef struct DLL_PACKED _DVBS_Init_PARAM
{
 DMD_DVBS_InitData_Transform *pDMD_DVBS_InitData;
 MS_U32 u32InitDataLen;
 MS_BOOL ret;
}DVBS_Init_PARAM,*PDVBS_Init_PARAM;

typedef struct DLL_PACKED _DVBS_SetDbgLevel_PARAM
{
 DMD_DVBS_DbgLv u8DbgLevel;
 MS_BOOL ret;
}DVBS_SetDbgLevel_PARAM,*PDVBS_SetDbgLevel_PARAM;

typedef struct DLL_PACKED _DVBS_EXIT_PARAM_PARAM
{
 MS_BOOL ret;
}DVBS_EXIT_PARAM_PARAM,*PDVBS_EXIT_PARAM_PARAM;

typedef struct DLL_PACKED _DVBS_GetInfo_PARAM
{
 const DMD_DVBS_Info* ret_info;
}DVBS_GetInfo_PARAM,*PDVBS_GetInfo_PARAM;

typedef struct _DVBS_GetLibVer_PARAM
{
 const MSIF_Version **ppVersion;
 MS_BOOL ret;
}DVBS_GetLibVer_PARAM,*PDVBS_GetLibVer_PARAM;

typedef struct DLL_PACKED _DVBS_GetFWVer_PARAM
{
 MS_U16 *ver;
 MS_BOOL ret;
}DVBS_GetFWVer_PARAM,*PDVBS_GetFWVer_PARAM;


typedef struct DLL_PACKED _DVBS_GetDSPReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 *pu8Data;
 MS_BOOL ret;
}DVBS_GetDSPReg_PARAM,*PDVBS_GetDSPReg_PARAM;

typedef struct DLL_PACKED _DVBS_SetDSPReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 pu8Data;
 MS_BOOL ret;
}DVBS_SetDSPReg_PARAM,*PDVBS_SetDSPReg_PARAM;


typedef struct DLL_PACKED _DVBS_GetReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 *pu8Data;
 MS_BOOL ret;
}DVBS_GetReg_PARAM,*PDVBS_GetReg_PARAM;

typedef struct DLL_PACKED _DVBS_SetReg_PARAM
{
 MS_U16 u16Addr;
 MS_U8 u8Data;
 MS_BOOL ret;
}DVBS_SetReg_PARAM,*PDVBS_SetReg_PARAM;


typedef struct DLL_PACKED _DVBS_SetSerialControl_PARAM
{
 MS_BOOL bEnable;
 MS_BOOL ret;
}DVBS_SetSerialControl_PARAM,*PDVBS_SetSerialControl_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_Config_Symbol_rate_list_PARAM
{
 MS_U32 u32SymbolRate;
 DMD_DVBS_MODULATION_TYPE eQamMode;
 MS_U32 u32IFFreq;
 MS_BOOL bSpecInv;
 MS_BOOL bSerialTS;
 MS_U16 *pu16_symbol_rate_list;
 MS_U8 u8_symbol_rate_list_num;
 MS_BOOL ret;
}DVBS_BlindScan_Config_Symbol_rate_list_PARAM,*PDVBS_BlindScan_Config_Symbol_rate_list_PARAM;

typedef struct DLL_PACKED _DVBS_SetConfig_Symbol_rate_list_PARAM
{
 MS_U16 u16SymbolRate;
 DMD_DVBS_MODULATION_TYPE eQamMode;
 MS_U32 u32IFFreq;
 MS_BOOL bSpecInv;
 MS_BOOL bSerialTS;
 MS_U16 *pu16_symbol_rate_list;
 MS_U8 u8_symbol_rate_list_num;
 MS_BOOL ret;
}DVBS_SetConfig_Symbol_rate_list_PARAM,*PDVBS_SetConfig_Symbol_rate_list_PARAM;

typedef struct DLL_PACKED _DVBS_SetActive_PARAM
{
 MS_BOOL bEnable;
 MS_BOOL ret;
}DVBS_SetActive_PARAM,*PDVBS_SetActive_PARAM;

typedef struct DLL_PACKED _DVBS_GetLockWithRFPower
{
 DMD_DVBS_GETLOCK_TYPE eType;
 DMD_DVBS_LOCK_STATUS *eLockStatus;
 MS_U32 u32CurrRFPowerDbm;
 MS_U32 u32NoChannelRFPowerDbm;
 MS_BOOL ret;
}DVBS_GetLockWithRFPower,*PDVBS_GetLockWithRFPower;

typedef struct DLL_PACKED _DVBS_ActiveDmdSwitch_PARAM
{
 MS_U8 demod_no;
 MS_BOOL ret;
}DVBS_ActiveDmdSwitch_PARAM,*PDVBS_ActiveDmdSwitch_PARAM;

typedef struct _DVBS_GetSignalStrengthWithRFPower_PARAM
{
 MS_U16 fRFPowerDbm;
 DMD_DVBS_DEMOD_TYPE *pDemodType;
 MS_U8 *u8_DVBS2_CurrentCodeRateLocal;
 MS_U8 *u8_DVBS2_CurrentConstellationLocal;
 MS_BOOL ret;
}DVBS_GetSignalStrengthWithRFPower_PARAM,*PDVBS_GetSignalStrengthWithRFPower_PARAM;


typedef struct _DVBS_GetIFAGC_PARAM
{
 MS_U8 *ifagc_reg;
 MS_U8 *ifagc_reg_lsb;
 MS_U16 *ifagc_err_reg;
 MS_BOOL ret;
}DVBS_GetIFAGC_PARAM,*PDVBS_GetIFAGC_PARAM;




typedef struct _DVBS_GetSNR_PARAM
{
 MS_U32 *u32NDA_SNR_A;
 MS_U32 *u32NDA_SNR_AB;
 MS_BOOL ret;
}DVBS_GetSNR_PARAM,*PDVBS_GetSNR_PARAM;


typedef struct _DVBS_GetPostViterbiBer_PARAM
{
 MS_U32 *BitErr_reg;
 MS_U16 *BitErrPeriod_reg;
 MS_BOOL ret;
}DVBS_GetPostViterbiBer_PARAM,*PDVBS_GetPostViterbiBer_PARAM;


typedef struct DLL_PACKED _DVBS_GetPacketErr_PARAM
{
 MS_U16 *pktErr;
 MS_BOOL ret;
}DVBS_GetPacketErr_PARAM,*PDVBS_GetPacketErr_PARAM;

typedef struct DLL_PACKED _DVBS_GetCellID_PARAM
{
 MS_U16 *u16CellID;
 MS_BOOL ret;
}DVBS_GetCellID_PARAM,*PDVBS_GetCellID_PARAM;


typedef struct _DVBS_GetStatus_PARAM
{
 DMD_DVBS_MODULATION_TYPE *pQAMMode;
 MS_U32 *u32SymbolRate;
 MS_S16 *s16CFO;
 MS_BOOL ret;
}DVBS_GetStatus_PARAM,*PDVBS_GetStatus_PARAM;


typedef struct DLL_PACKED _DVBS_SetPowerState_PARAM
{
 EN_POWER_MODE u16PowerState;
 MS_U32 ret_U32;
}DVBS_SetPowerState_PARAM,*PDVBS_SetPowerState_PARAM;

typedef struct DLL_PACKED _DVBS_Get_FreqOffset_PARAM
{
 MS_S16 *s16CFO;
 MS_BOOL bRet;
}DVBS_Get_FreqOffset_PARAM,*PDVBS_Get_FreqOffset_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_Start_PARAM
{
 MS_U16 u16StartFreq;
 MS_U16 u16EndFreq;
 MS_BOOL bRet;
}DVBS_BlindScan_Start_PARAM,*PDVBS_BlindScan_Start_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_NextFreq_PARAM
{
 MS_BOOL *bBlindScanEnd;
 MS_BOOL bRet;
}DVBS_BlindScan_NextFreq_PARAM,*PDVBS_BlindScan_NextFreq_PARAM;


typedef struct DLL_PACKED _DVBS_BlindScan_Cancel_PARAM
{
 MS_BOOL bRet;
}DVBS_BlindScan_Cancel_PARAM,*PDVBS_BlindScan_Cancel_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_End_PARAM
{
 MS_BOOL bRet;
}DVBS_BlindScan_End_PARAM,*PDVBS_BlindScan_End_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_GetChannel_PARAM
{
 MS_U16 u16ReadStart;
 MS_U16 *u16TPNum;
 HAL_DEMOD_MS_FE_CARRIER_PARAM *pTable;
 MS_BOOL bRet;
}DVBS_BlindScan_GetChannel_PARAM,*PDVBS_BlindScan_GetChannel_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_GetCurrentFreq_PARAM
{
 MS_U32 *u32CurrentFreq;
 MS_BOOL bRet;
}DVBS_BlindScan_GetCurrentFreq_PARAM,*PDVBS_BlindScan_GetCurrentFreq_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_WaitCurFreqFinished_PARAM
{
 MS_U8 *u8Progress;
 MS_U8 *u8FindNum;
 MS_U8 *substate_reg;
 MS_U32 *u32Data;
 MS_U16 *symbolrate_reg;
 MS_U16 *CFO_reg;
 MS_BOOL bRet;
}DVBS_BlindScan_WaitCurFreqFinished_PARAM,*PDVBS_BlindScan_WaitCurFreqFinished_PARAM;

typedef struct DLL_PACKED _DVBS_BlindScan_GetTunerFreq_PARAM
{
 MS_U16 *u16TunerCenterFreq;
 MS_U16 *u16TunerCutOffFreq;
 MS_BOOL bRet;
}DVBS_BlindScan_GetTunerFreq_PARAM,*PDVBS_BlindScan_GetTunerFreq_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_Init_PARAM
{
 MS_BOOL bRet;
}DVBS_DiSEqC_Init_PARAM,*PDVBS_DiSEqC_Init_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_SetLNBOut_PARAM
{
       MS_BOOL bLow;
 MS_BOOL bRet;
}DVBS_DiSEqC_SetLNBOut_PARAM,*PDVBS_DiSEqC_SetLNBOut_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_GetLNBOut_PARAM
{
       MS_BOOL *bLNBOutLow;
 MS_BOOL bRet;
}DVBS_DiSEqC_GetLNBOut_PARAM,*PDVBS_DiSEqC_GetLNBOut_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_Set22kOnOff_PARAM
{
       MS_BOOL b22kOn;
 MS_BOOL bRet;
}DVBS_DiSEqC_Set22kOnOff_PARAM,*PDVBS_DiSEqC_Set22kOnOff_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_Get22kOnOff_PARAM
{
       MS_BOOL *b22kOn;
 MS_BOOL bRet;
}DVBS_DiSEqC_Get22kOnOff_PARAM,*PDVBS_DiSEqC_Get22kOnOff_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_SendCmd_PARAM
{
       MS_U8 *pCmd;
 MS_U8 u8CmdSize;
 MS_BOOL bRet;
}DVBS_DiSEqC_SendCmd_PARAM,*PDVBS_DiSEqC_SendCmd_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_SetTxToneMode_PARAM
{
       MS_BOOL bTxTone22kOff;
 MS_BOOL bRet;
}DVBS_DiSEqC_SetTxToneMode_PARAM,*PDVBS_DiSEqC_SetTxToneMode_PARAM;

typedef struct DLL_PACKED _DVBS_DiSEqC_SetTone_PARAM
{
       MS_BOOL bTone1;
 MS_BOOL bRet;
}DVBS_DiSEqC_SetTone_PARAM,*PDVBS_DiSEqC_SetTone_PARAM;

typedef struct DLL_PACKED _DVBS_UnicableAGCCheckPower_PARAM
{
       MS_BOOL pbAGCCheckPower;
 MS_BOOL bRet;
}DVBS_UnicableAGCCheckPower_PARAM,*PDVBS_UnicableAGCCheckPower_PARAM;

typedef struct DLL_PACKED _DVBS_GetTsDivNum_PARAM
{
       MS_U32 *u32SymbolRate;
 MS_U8* system_type_reg;
 MS_U8 *code_rate_idx;
 MS_U8 *fec_type_idx;
 MS_U8 *pilot_flag;
 MS_U32 *u32temp;
 MS_U8 *code_rate_reg;
 MS_BOOL bRet;
}DVBS_GetTsDivNum_PARAM,*PDVBS_GetTsDivNum_PARAM;

typedef struct DLL_PACKED _DVBS_GetCurrentDemodCodeRate_PARAM
{
       DMD_DVBS_CODE_RATE_TYPE *pCodeRate;
 MS_BOOL bRet;
}DVBS_GetCurrentDemodCodeRate_PARAM,*PDVBS_GetCurrentDemodCodeRate_PARAM;

typedef struct DLL_PACKED _DVBS_GetTunrSignalLevel_PWR_PARAM
{
       MS_U16 *u16Data;
 MS_BOOL bRet;
}DVBS_GetTunrSignalLevel_PWR_PARAM,*PDVBS_GetTunrSignalLevel_PWR_PARAM;
#ifdef UFO_SUPPORT_VCM
typedef struct DLL_PACKED _DVBS_SetDefaultVCM_PARAM
{
       MS_U8 *u8IS_ID;
       MS_U8 *u8IS_ID_table;
 MS_BOOL ret;
}DVBS_SetDefaultVCM_PARAM,*PDVBS_SetDefaultVCM_PARAM;

typedef struct DLL_PACKED _DVBS_SetVCM_PARAM
{
       MS_U8 u8IS_ID;
    MS_BOOL ret;
}DVBS_SetVCM_PARAM,*PDVBS_SetVCM_PARAM;

typedef struct DLL_PACKED _DVBS_GetVCM_PARAM
{
       MS_U8 *u8IS_ID;
       MS_U8 *u8IS_ID_table;
 MS_BOOL ret;
}DVBS_GetVCM_PARAM,*PDVBS_GetVCM_PARAM;

typedef struct DLL_PACKED _DVBS_VCM_INIT_PARAM
{
        DMD_DVBS_VCM_OPT u8VCM_OPT;
        MS_U8 u8IS_ID;
        MS_U32 u32DVBS2_DJB_START_ADDR;
        MS_BOOL ret;
}DVBS_VCM_INIT_PARAM,*PDVBS_VCM_INIT_PARAM;

typedef struct DLL_PACKED _DVBS_VCM_CHECK
{
        MS_BOOL ret;
}DVBS_VCM_CHECK,*PDVBS_VCM_CHECK;

typedef struct DLL_PACKED _DVBS_VCM_ENABLED
{
        MS_U8 u8VCM_ENABLED;
        MS_BOOL ret;
}DVBS_VCM_ENABLED,*PDVBS_VCM_ENABLED;

typedef struct DLL_PACKED _DVBS_VCM_MODE
{
        DMD_DVBS_VCM_OPT u8VCM_OPT;
        MS_BOOL ret;
}DVBS_VCM_MODE,*PDVBS_VCM_MODE;

#endif

#ifdef UFO_DEMOD_DVBS_SUPPORT_DMD_INT
typedef struct DLL_PACKED _DVBS_INT_MODE
{
        fpIntCallBack fpCB;
        MS_BOOL ret;
}DVBS_INT_MODE,*PDVBS_INT_MODE;
#endif

#ifdef UFO_DEMOD_GetParam_NEW_FLOW

typedef struct DLL_PACKED _DVBS_GET_INFO
{

    HAL_DEMOD_EN_SAT_CONSTEL_TYPE eConstellation;
    HAL_DEMOD_EN_SAT_ROLL_OFF_TYPE eRollOff;
    HAL_DEMOD_EN_SAT_IQ_MODE eIQ_Mode;
    HAL_DEMOD_EN_CONV_CODE_RATE_TYPE eCodeRate;
    MS_U32 u32SymbolRate;
    HAL_DEMOD_EN_SAT_MOD_TYPE eDemodType;
    float eFreqoff;


    MS_BOOL ret;
} DVBS_GET_INFO, *PDVBS_GET_INFO;
#endif

#ifdef UFO_DEMOD_GET_AGC_INFO
typedef struct DLL_PACKED _DVBS_GET_AGC_INFO
{
    MS_U8 u8dbg_mode;
    MS_U16 *pu16Data;
    MS_BOOL ret;
} DVBS_GET_AGC_INFO, *PDVBS_GET_AGC_INFO;
#endif

void DVBSRegisterToUtopia(void);
# 629 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_INTERN_DVBS_v2.h"
MS_U32 DVBSOpen(void** pInstantTmp, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 DVBSClose(void* pInstantTmp);
MS_U32 DVBSIoctl(void* pInstantTmp, MS_U32 u32Cmd, void* pArgs);



#ifdef __cplusplus
}
#endif

#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drv_IR_TX.h"
#ifndef _DRVIRTX_H_
#define _DRVIRTX_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"

#define IRTX_UTOPIA20 (1)

typedef enum _IRTX_Result
{

    IRTX_FAIL = 0
    ,IRTX_OK = 1
    ,IRTX_TIMEOUT
    ,IRTX_QUEUE_FULL
    ,IRTX_BUSY
}IRTX_Result;




typedef struct _IRTX_TRIGGER_PARAM
{

}IRTX_TRIGGER_PARAM, *PIRTX_TRIGGER_PARAM;

typedef struct _IRTX_SETSTATUS_PARAM
{
    MS_U16 Status;
}IRTX_SETSTATUS_PARAM, *PIRTX_SETSTATUS_PARAM;


typedef struct _IRTX_SETMEMSTATUS_PARAM
{
    MS_U16 Status;
}IRTX_SETMEMSTATUS_PARAM, *PIRTX_SETMEMSTATUS_PARAM;


typedef struct _IRTX_SETCLKDIV_PARAM
{
    MS_U8 Div;
}IRTX_SETCLKDIV_PARAM, *PIRTX_SETCLKDIV_PARAM;


typedef struct _IRTX_SETDELAYCLKTIME_PARAM
{
    MS_U16 CycleTime_H;
 MS_U16 CycleTime_L;
}IRTX_SETDELAYCLKTIME_PARAM, *PIRTX_SETDELAYCLKTIME_PARAM;


typedef struct _IRTX_SETMEMADDR_PARAM
{
    MS_U16 MemAddr;
}IRTX_SETMEMADDR_PARAM, *PIRTX_SETMEMADDR_PARAM;


typedef struct _IRTX_SETMEMDATA_PARAM
{
    MS_U16 MemData;
}IRTX_SETMEMDATA_PARAM, *PIRTX_SETMEMDATA_PARAM;


typedef struct _IRTX_SETUNITVALUE_PARAM
{
    MS_U16 Unit_Value;
 MS_U8 Unit_Number;
}IRTX_SETUNITVALUE_PARAM, *PIRTX_SETUNITVALUE_PARAM;


typedef struct _IRTX_SETSHOTCOUNT_PARAM
{
    MS_U16 H_ShotCount;
    MS_U16 L_ShotCount;
  MS_U8 Unit_Number;
}IRTX_SETSHOTCOUNT_PARAM, *PIRTX_SETSHOTCOUNT_PARAM;



typedef struct _IRTX_INIT_PARAM
{

}IRTX_INIT_PARAM, *PIRTX_INIT_PARAM;



typedef struct _IRTX_SETCARRIERCOUNT_PARAM
{
    MS_U16 Count;
}IRTX_SETCARRIERCOUNT_PARAM, *PIRTX_SETCARRIERCOUNT_PARAM;




MS_BOOL MDrv_IR_TX_Trigger(void);
MS_BOOL MDrv_IR_TX_SetStatus(MS_U16 Status);
MS_BOOL MDrv_IR_TX_SetMemStatus(MS_U16 Status);
MS_BOOL MDrv_IR_TX_SetClkDiv(MS_U8 Div);
MS_BOOL MDrv_IR_TX_SetDelayCycleTime(MS_U16 CycleTime_H, MS_U16 CycleTime_L);
MS_BOOL MDrv_IR_TX_SetMemAddr(MS_U16 MemAddr);
MS_BOOL MDrv_IR_TX_SetMemData(MS_U16 MemData);
MS_BOOL MDrv_IR_TX_SetUnitValue(MS_U16 Unit_Value, MS_U8 Unit_Number);
MS_BOOL MDrv_IR_TX_SetShotCount(MS_U16 H_ShotCount, MS_U16 L_ShotCount, MS_U8 Unit_Number);
MS_BOOL MDrv_IR_TX_Init(void);
MS_BOOL MDrv_IR_TX_SetCarrierCount(MS_U16 Count);


#ifdef __cplusplus
}
#endif
#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
#ifndef _DRV_PARFLASH_H_
#define _DRV_PARFLASH_H_ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 120 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
#define MSIF_NORF_TAG {'M','S','I','F'}
#define MSIF_NORF_CLASS {'1','0'}
#define MSIF_NORF_CUS 0x6666
#define MSIF_NORF_MOD 0x0001
#define MSIF_NORF_CHIP 0x000F
#define MSIF_NORF_CPU '1'
#define MSIF_NORF_LIB_CODE {'N','O','R','F'}
#define MSIF_NORF_LIBVER {'0','1'}
#define MSIF_NORF_BUILDNUM {'0','1'}
#define MSIF_NORF_CHANGELIST {'0','0','1','1','4','5','3','4'}
#define MSIF_NORF_OS '0'

#define NORF_DRV_VERSION \
            MSIF_NORF_TAG, \
            MSIF_NORF_CLASS, \
            MSIF_NORF_CUS, \
            MSIF_NORF_MOD, \
            MSIF_NORF_CHIP, \
            MSIF_NORF_CPU, \
            MSIF_NORF_LIB_CODE, \
            MSIF_NORF_LIBVER, \
            MSIF_NORF_BUILDNUM, \
            MSIF_NORF_CHANGELIST, \
            MSIF_NORF_OS






typedef enum
{
    enPF_MX29LV400CT = 0,
    enPF_MX29LV400CB,
    enPF_MX29LV800CT,
    enPF_MX29LV800CB,
    enPF_MX29LV160CT,
    enPF_MX29LV160CB,
    enPF_MX29LV640BT,
    enPF_MX29LV640BB,
    enPF_MX29GL256EH,
    enPF_MX29GA128EH,
    enPF_MX29GA128EL,
    enPF_MX29GA256EH,
    enPF_MX29GA256EL,

    enPF_SPAN_S29GL128P,
    enPF_SPAN_S29GL256P,
    enPF_SPAN_S29GL512P,
    enPF_SPAN_S29GL01GP,

    enPF_SPAN_S29GL128P_S,
    enPF_SPAN_S29GL256P_S,
    enPF_SPAN_S29GL512P_S,

    evPF_NUM,
}PARFLASH_Device;

typedef struct
{
    MS_BOOL bTopBoot;
    MS_BOOL bUniformSecTbl;
    MS_U16 u16SecNum;
    MS_U32 u32TotBytes;
    MS_U8* pu8SecTbl;
}PARFLASH_Content;


typedef struct
{
    PARFLASH_Device enDevice;
    MS_BOOL bbytemode;
    MS_U16 u16SecNum;
    MS_U32 u32TotBytes;
}PARFLASH_Info;

typedef struct
{
    MS_BOOL bIsBusy;
}PARFLASH_DevSts;
# 210 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
const PARFLASH_Info *MDrv_PARFLASH_GetInfo(void);







MS_BOOL MDrv_PARFLASH_GetLibVer(const MSIF_Version **ppVersion);







MS_BOOL MDrv_PARFLASH_GetStatus(PARFLASH_DevSts* pDrvStatus);







MS_BOOL MDrv_PARFLASH_SetDbgLevel(MS_U8 u8DbgLevel);






void MDrv_PARFLASH_Init(void) ;






MS_BOOL MDrv_PARFLASH_ChipSelect(MS_U8 u8cs);






MS_BOOL MDrv_PARFLASH_Reset(void);
# 265 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
MS_BOOL MDrv_PARFLASH_ReadID(MS_U16 *pu16Data, MS_U8 *pu8r_len);
# 275 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
MS_BOOL MDrv_PARFLASH_SectorProtectVerify(MS_U16 u16sec, MS_BOOL* pbProtect);
# 285 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
MS_BOOL MDrv_PARFLASH_CFI_Read(MS_U8 u8addr, MS_U16* pu16data);
# 296 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
MS_BOOL MDrv_PARFLASH_Read(MS_U32 u32Addr, MS_U8 *pu8Data, MS_U32 u32Size);







MS_BOOL MDrv_PARFLASH_EraseChip(void);
# 314 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
MS_BOOL MDrv_PARFLASH_EraseSec(MS_U16 u16StartSec, MS_U16 u16EndSec);
# 325 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
MS_BOOL MDrv_PARFLASH_Write(MS_U32 u32Addr, MS_U8 *pu8Data, MS_U32 u32Size);
# 336 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvPARFLASH.h"
MS_BOOL MDrv_PARFLASH_WriteCmdCycle(MS_U8 u8cycles, MS_U32 *pu32Addrs, MS_U16 *pu16Data);






MS_U32 MDrv_PARFLASH_GetSectorOffset(MS_U16 u16sector);







MS_U32 MDrv_PARFLASH_GetSectorSize(MS_U16 u16startsec, MS_U16 u16endsec);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP_v2.h"
#ifndef _GOP_H_
#define _GOP_H_ 

#include "MsTypes.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif






#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
#define DWIN_SUPPORT_BUFFER 0x2
#define GOP_MULTIINFO_NUM 8
#else
#define DWIN_SUPPORT_BUFFER 0x2UL
#define GOP_MULTIINFO_NUM 8UL
#endif


typedef enum
{

    E_GOP_COLOR_RGB555_BLINK =E_MS_FMT_1ABFgBg12355,

    E_GOP_COLOR_RGB565 =E_MS_FMT_RGB565,

    E_GOP_COLOR_ARGB4444 =E_MS_FMT_ARGB4444,

    E_GOP_COLOR_2266 =E_MS_FMT_FaBaFgBg2266,

    E_GOP_COLOR_I8 =E_MS_FMT_I8,

    E_GOP_COLOR_ARGB8888 =E_MS_FMT_ARGB8888,

    E_GOP_COLOR_ARGB1555 =E_MS_FMT_ARGB1555,

    E_GOP_COLOR_ABGR8888 =E_MS_FMT_ABGR8888,

    E_GOP_COLOR_RGB555YUV422 =E_MS_FMT_ARGB1555_DST,

    E_GOP_COLOR_YUV422 =E_MS_FMT_YUV422,

    E_GOP_COLOR_RGBA5551 =E_MS_FMT_RGBA5551,

    E_GOP_COLOR_RGBA4444 =E_MS_FMT_RGBA4444,

    E_GOP_COLOR_RGBA8888 =E_MS_FMT_RGBA8888,

    E_GOP_COLOR_BGR565 =E_MS_FMT_BGR565,

    E_GOP_COLOR_ABGR4444 =E_MS_FMT_ABGR4444,

    E_GOP_COLOR_AYUV8888 =E_MS_FMT_AYUV8888,

    E_GOP_COLOR_ABGR1555 =E_MS_FMT_ABGR1555,

    E_GOP_COLOR_BGRA5551 =E_MS_FMT_BGRA5551,

    E_GOP_COLOR_BGRA4444 =E_MS_FMT_BGRA4444,

    E_GOP_COLOR_BGRA8888 =E_MS_FMT_BGRA8888,

    E_GOP_COLOR_INVALID =E_MS_FMT_GENERIC
} EN_GOP_COLOR_TYPE;



typedef enum
{

    E_GOP_DST_IP0=0,

    E_GOP_DST_MIXER2VE,

    E_GOP_DST_OP0,

    E_GOP_DST_VOP,

    E_GOP_DST_IP1,

    E_GOP_DST_IP_MAIN,

    E_GOP_DST_IP_SUB,

    E_GOP_DST_MIXER2OP,

    E_GOP_DST_VOP_SUB,

    E_GOP_DST_FRC,

    E_GOP_DST_VE,

    E_GOP_DST_OP1,

    E_GOP_DST_MIXER2OP1,

    E_GOP_DST_DIP,

    E_GOP_DST_GOPScaling,

    E_GOP_DST_BYPASS,

    E_GOP_DST_OP_DUAL_RATE,

    E_GOP_DST_MOD,
    MAX_GOP_DST_SUPPORT,
} EN_GOP_DST_TYPE;


typedef enum
{

    E_GOP_NO_STRETCH = 0x00,

    E_GOP_H_STRETCH = 0x01,

    E_GOP_V_STRETCH = 0x10,

    E_GOP_HV_STRETCH = 0x11,
} EN_GOP_STRETCH_DIRECTION;


typedef enum
{

    E_GOP_PAL_GOP_RIU = 0,

    E_GOP_PAL_GOP_REGDMA = 1,

    E_GOP1_PAL_GOP_RIU = 2,

    E_GOP1_PAL_GOP_REGDMA = 3,
} EN_GOP_PALETTE_READTYPE;



typedef enum
{


    E_GOP_IGNOREINIT,
    E_GOP_CONSALPHA_BITS,
    E_GOP_TIMING_INFO,
    E_GOP_IS_PIXELBASE_ENABLE,
    E_GOP_GET_MAXFBNUM,
    E_GOP_SET_SCROLL_AUTO_STOP_POSITION,
    E_GOP_SET_ADDR_BY_MBX,
    E_GOP_IS_INIT,

    E_GOP_VFILTER_RATIO = 0x100,

    E_GOP_AFBC_RESET = 0x200,
    E_GOP_AFBC_ENABLE = 0x201,
} EN_GOP_CONFIG_TYPE;


typedef enum
{

    GOPTRANSCLR_FMT0,

    GOPTRANSCLR_FMT1,

    GOPTRANSCLR_FMT2,

    GOPTRANSCLR_FMT3,
} EN_GOP_TRANSCLR_FMT;



typedef enum
{
    E_GOP_TP_DISABLE=0,
    E_GOP_TP_GRAY16,
    E_GOP_TP_GRAY16_INVERSE,
    E_GOP_TP_GRAY32,
    E_GOP_TP_GRAY32_INVERSE,
    E_GOP_TP_GRAY64,
    E_GOP_TP_GRAY64_INVERSE,
    E_GOP_TP_GRAY256,
    E_GOP_TP_GRAY256_INVERSE,
    E_GOP_TP_BLACK,
    E_GOP_TP_WHITE,
    E_GOP_TP_CLR,
    E_GOP_TP_BW_DOT,
    E_GOP_TP_BW_LINE,
    E_GOP_TP_BW_CROSS,
    E_GOP_TP_CLR_BAR,
    E_GOP_TP_CLR_BAR_INVERSE,
}EN_GOP_TST_PATTERN;

typedef enum
{
    E_GOP_GPU_TILE_LINEAR=0,
    E_GOP_GPU_TILE_DIP8X,
    E_GOP_GPU_TILE_DIP16X,
    E_GOP_GPU_TILE_GPU,
}EN_GOP_GPU_TILE_MODE;


typedef enum
{

    E_GOP_PAL_ARGB8888 = 0,

    E_GOP_PAL_INVALID
} EN_GOP_PALETTE_TYPE;

typedef enum
{
    E_GOP_4G_PALETTE,
    E_GOP_2G_PALETTE,
}EN_GOP_PALETTE;


typedef enum
{

    DWIN_SCAN_MODE_PROGRESSIVE,

    DWIN_SCAN_MODE_extern,
} EN_GOP_DWIN_SCAN_MODE;


typedef enum
{

    DWIN_ALPHA_SRC_CONST = 0,

    DWIN_ALPHA_SRC_SOURCE = 1,
    DWIN_ALPHA_SRC_MAX
} EN_GOP_DWIN_ALPHA_SRC;



typedef enum
{

    DWIN_UVSAMPLE_ORI = 0,

    DWIN_UVSAMPLE_LEFT = 1,

    DWIN_UVSAMPLE_RIGHT = 2,

    DWIN_UVSAMPLE_AVG = 3,
    DWIN_UVSAMPLE_MAX
} EN_GOP_DWIN_UVSAMPLE_Mode;


typedef enum
{
    E_GOP_TRANSPCOLOR_STRCH_DUPLICATE = 0,
    E_GOP_TRANSPCOLOR_STRCH_ASNORMAL = 1,
} EN_GOP_STRCH_TRANSPCOLORMODE;


typedef enum
{

    E_GOP_HSTRCH_6TAPE = 0,

    E_GOP_HSTRCH_DUPLICATE = 1,

    E_GOP_HSTRCH_6TAPE_LINEAR = 2,

    E_GOP_HSTRCH_6TAPE_NEAREST = 3,

    E_GOP_HSTRCH_6TAPE_GAIN0 = 4,

    E_GOP_HSTRCH_6TAPE_GAIN1 = 5,

    E_GOP_HSTRCH_6TAPE_GAIN2 = 6,

    E_GOP_HSTRCH_6TAPE_GAIN3 = 7,

    E_GOP_HSTRCH_6TAPE_GAIN4 = 8,

    E_GOP_HSTRCH_6TAPE_GAIN5 = 9,

    E_GOP_HSTRCH_4TAPE = 0xA,

    E_GOP_HSTRCH_2TAPE = 0xB,
} EN_GOP_STRETCH_HMODE;


typedef enum
{

    E_GOP_VSTRCH_LINEAR = 0,

    E_GOP_VSTRCH_DUPLICATE = 1,

    E_GOP_VSTRCH_NEAREST = 2,

    E_GOP_VSTRCH_LINEAR_GAIN0 = 3,
    E_GOP_VSTRCH_LINEAR_GAIN1 = 4,

    E_GOP_VSTRCH_LINEAR_GAIN2 = 5,

    E_GOP_VSTRCH_4TAP = 6,
} EN_GOP_STRETCH_VMODE;



typedef enum
{

    E_GOP_BW_STRONG,

    E_GOP_BW_MIDDLE,

    E_GOP_BW_WEAK,

    E_GOP_BW_UNKNOWN,
} EN_GOP_BW_STRENGTH;


typedef enum
{
    E_GOP_PINPON_G3D ,
    E_GOP_PINPON_VE,
    E_GOP_PINPON_DWIN,
    E_GOP_PINPON_DIP,
    E_GOP_PINPON_DWIN0,
    E_GOP_PINPON_DWIN1,
} EN_GOP_PINPON_MODE;


typedef enum
{
    GOP_NTSC ,
    GOP_PAL,
    GOP_CUSTOM,
    GOP_CUSTOM_OP,
    GOP_MIXER_TIMEING_MAX,
}GOP_MIXER_TIMINGTYPE;



typedef enum
{
    E_GOP_SCROLL_NONE = 0,
    E_GOP_SCROLL_UP,
    E_GOP_SCROLL_DOWN,
    E_GOP_SCROLL_LEFT,
    E_GOP_SCROLL_RIGHT,
    E_GOP_SCROLL_SW,
    E_GOP_SCROLL_KERNEL,
} GOP_SCROLL_TYPE;



typedef enum
{
    GOP_VE_NTSC ,
    GOP_VE_PAL,
    GOP_VE_TIMEING_MAX,
}GOP_VE_TIMINGTYPE;



typedef enum
{

    E_GOP_OC_SEL_2BankMode = 1,

    E_GOP_OC_SEL_4BankMode = 2 ,
} EN_GOP_OC_SEL_TYPE;



typedef enum
{
    E_GOP_3D_DISABLE ,
    E_GOP_3D_SWITH_BY_FRAME,
    E_GOP_3D_SIDE_BY_SYDE,
    E_GOP_3D_TOP_BOTTOM,
    E_GOP_3D_LINE_ALTERNATIVE,
    E_GOP_3D_FRAMEPACKING,
}EN_GOP_3D_MODETYPE;

typedef enum
{
    GOP_DWIN_SEL0,
}EN_GOP_DWIN_SEL;





typedef struct DLL_PACKED
{
    MS_U32 hstart;
    MS_U32 hend;
    MS_U32 vstart;
    MS_U32 vend;
    MS_U32 htotal;
}GOP_MixerTiming;


typedef struct DLL_PACKED
{
    MS_U32 hstart;
    MS_U32 hend;
    MS_U32 vstart;
    MS_U32 vend;
    MS_U32 htotal;
    MS_U32 hsyncdelay;
}GOP_Mixer2OPTiming;


typedef struct DLL_PACKED
{

    MS_U16 u16DispVPixelStart;

    MS_U16 u16DispVPixelEnd;

    MS_U16 u16DispHPixelStart;

    MS_U16 u16DispHPixelEnd;

#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))
    MS_U32 u32DRAMRBlkStart;
#else
    MS_PHY u32DRAMRBlkStart;
#endif

    MS_U16 u16RBlkHPixSize;

    MS_U16 u16RBlkVPixSize;

    MS_U16 u16RBlkHRblkSize;

    MS_U16 u16WinX;

    MS_U16 u16WinY;

    MS_U32 u32scrX;

    MS_U32 u32scrY;

    EN_GOP_COLOR_TYPE clrType;
} GOP_GwinInfo;


typedef struct DLL_PACKED
{

    EN_GOP_DST_TYPE eDstType;

    MS_U16 x;

    MS_U16 y;

    MS_U16 width;

    MS_U16 height;
} GOP_StretchInfo;


typedef struct DLL_PACKED
{

    MS_U16 u16x;

    MS_U16 u16y;

    MS_U16 u16w;

    MS_U16 u16h;
#if (defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300))

    MS_U32 u32fbaddr0;

    MS_U32 u32fbaddr1;
#else

    MS_PHY u32fbaddr0;

    MS_PHY u32fbaddr1;
#endif

    MS_U16 u16fbw;
} GOP_DwinProperty;

typedef union DLL_PACKED
{
    MS_U8 u8DWinIntInfo;
    struct DLL_PACKED
    {
        MS_U8 bDWinIntWADR:1;
        MS_U8 bDWinIntPROG:1;
        MS_U8 bDWinIntTF:1;
        MS_U8 bDWinIntBF:1;
        MS_U8 bDWinIntVS:1;
        MS_U8 reserved:3;
    }sDwinIntInfo;
}GOP_DWinIntInfo;


typedef union DLL_PACKED
{

    struct DLL_PACKED
    {

        MS_U8 u8A;

        MS_U8 u8R;

        MS_U8 u8G;

        MS_U8 u8B;
    } RGB;

    MS_U8 u8Data[4];
} GOP_PaletteEntry;


typedef struct DLL_PACKED
{



    MS_U8 u8GwinNum;
    MS_U8 u8GwinPri[4];
}GOP_GwinPri;


typedef struct DLL_PACKED
{

    MS_U8 u8MaxGOPNum;

    MS_U8 u8MaxGwinNum;

    EN_GOP_DST_TYPE SupportGOPDst[MAX_GOP_DST_SUPPORT];
} GOP_ApiInfo;


typedef struct DLL_PACKED
{

    EN_GOP_DST_TYPE eGOPNumDstType[6];

    MS_U16 u16GopNumStrWinHSize[6];

    MS_U16 u16GopNumStrWinVSize[6];


    MS_BOOL Gop0GwinIsEnable[4];

    MS_BOOL Gop1GwinIsEnable[4];

    MS_BOOL Gop2GwinIsEnable;

    MS_BOOL Gop3GwinIsEnable;
    MS_BOOL Gop4GwinIsEnable;
    MS_BOOL Gop5GwinIsEnable;
} GOP_ApiStatus;

typedef struct DLL_PACKED
{

    MS_U32 color;
}ST_Transparent_Color;
#ifdef __cplusplus
}
#endif

#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_DWIN_v2.h"
#include "drvXC_IOPort.h"
#include "apiXC.h"
#include "apiXC_DWIN.h"
#include "UFO.h"

typedef enum {
    DIP_TRIG_OFF,
    DIP_TRIG_ON,
    DIP_TRIG_ONESHOT,
    DIP_TRIG_ONESHOTFAST,
    DIP_TRIG_RESET,
}eDipTriggerMode;

typedef enum {
    DIP_INTR_DISABLE,
    DIP_INTR_ENABLE,
    DIP_INTR_GET,
    DIP_INTR_CLEAR,
    DIP_INTR_ATTACH,
    DIP_INTR_DETACH,
}eDipInterruptAct;

typedef enum {
    DIP_PRO_NONE = 0x000000000,
    DIP_PRO_SCANMODE = 0x000000001,
    DIP_PRO_DATAFMT = 0x000000002,
    DIP_PRO_R2Y = 0x000000004,
    DIP_PRO_Y2R = 0x000000008,
    DIP_PRO_SWAPUV = 0x000000010,
    DIP_PRO_SWAPYC = 0x000000020,
    DIP_PRO_SWAPRGB = 0x000000040,
    DIP_PRO_INTERLACE_W = 0x000000080,
    DIP_PRO_ALPHA = 0x000000100,
    DIP_PRO_FRC = 0x000000200,
    DIP_PRO_OP_CAPTURE = 0x000000400,
    DIP_PRO_MIRROR = 0x000000800,
    DIP_PRO_PINPON = 0x000001000,
    DIP_PRO_ROTATION = 0x000002000,
    DIP_PRO_HVSP = 0x000004000,
    DIP_PRO_TILEBLOCK = 0x000008000,
}eDipPropertyflag;

typedef enum {
    E_DIP_SET_DIPR_NORMAL,
    E_DIP_SET_DIPR_EX,
}EN_DIP_Diprflag;

typedef enum {
    MDrv_CMD_DIP_INIT,
    MDrv_CMD_DIP_GET_RESOURCE,
    MDrv_CMD_DIP_RELEASE_RESOURCE,
    MDrv_CMD_DIP_QUERY_RESOURCE,
    MDrv_CMD_DIP_SET_INPUTSOURCE,
    MDrv_CMD_DIP_SET_WINDOW,
    MDrv_CMD_DIP_SET_WINPROPERTY,
    MDrv_CMD_DIP_SET_PROPERTY,
    MDrv_CMD_DIP_GET_BUFINFO,
    MDrv_CMD_DIP_INTERRUPT,
#if defined(UFO_PUBLIC_HEADER_700)
    MDrv_CMD_DIP_INTERRUPT_CB,
#endif
    MDrv_CMD_DIP_TRIGGER,
    MDrv_CMD_DIP_SET_DIPR_PROPERTY,
    MDrv_CMD_DIP_CMDQ_SETACTION,
    MDrv_CMD_DIP_CMDQ_SETOPERATIONS,
    MDrv_CMD_DIP_SET_DBG_LEVEL = 0x100,
    MDrv_CMD_DIP_GET_RES_BY_PIPE = 0x200,
    MDrv_CMD_DIP_CONFIG_PIPE = 0x201,
    MDrv_CMD_DIP_CHECK_PIPE = 0x202,
} eDipIoctlOpt;

typedef struct DLL_PACKED
{
    MS_BOOL bFrameRateCtrl;
    MS_U16 u16In;
    MS_U16 u16Out;
} ST_XC_DIP_FRC;

typedef struct DLL_PACKED
{
    MS_BOOL bSwap;
    EN_XC_DIP_RGB_SWAP_TYPE eSwapType;
} ST_XC_DIP_SWAPRGB;

typedef struct DLL_PACKED
{
    MS_BOOL bOpCapture;
    EN_XC_DIP_OP_CAPTURE eOpCapture;
} ST_XC_DIP_OP_CAPTURE;

typedef struct DLL_PACKED
{
    MS_BOOL bHMirror;
    MS_BOOL bVMirror;
} ST_XC_DIP_MIRROR;

typedef struct DLL_PACKED
{
    MS_BOOL bPinpon;
    MS_PHY u32PinponAddr;
} ST_XC_DIP_PINPON;

typedef struct DLL_PACKED
{
    MS_BOOL bRotation;
    EN_XC_DIP_ROTATION eRoDirection;
} ST_XC_DIP_ROTATION;

typedef struct DLL_PACKED
{
    EN_XC_DIP_SCAN_MODE eScanMode;
    EN_XC_DIP_DATA_FMT eDataFmt;
    ST_XC_DIP_OP_CAPTURE stOpCapture;
    ST_XC_DIP_SWAPRGB stSwapRGB;
    ST_XC_DIP_MIRROR stMirror;
    ST_XC_DIP_FRC stFrameRateControl;
    ST_XC_DIP_PINPON stPinpon;
    ST_XC_DIP_ROTATION stRotation;
    MS_BOOL bSwapUV;
    MS_BOOL bSwapYC;
    MS_BOOL bR2Y;
    MS_BOOL bY2R;
    MS_BOOL bInterlaceW;
    MS_U8 u8Alpha;
#if defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500)
    MS_BOOL bHVSP;
#endif
#if defined(UFO_PUBLIC_HEADER_300)|| defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_700) || defined(UFO_PUBLIC_HEADER_500)
    EN_XC_DIP_TILE_BLOCK eTileBlock;
#endif
}ST_XC_DIP_PROPERTY;

typedef struct DLL_PACKED _DIP_RESOURCE
{
    SCALER_DIP_WIN eWindow;
}DIP_RESOURCE;

typedef struct DLL_PACKED _DIP_INPUT_SOURCE
{
    INPUT_SOURCE_TYPE_t SrcPath;
}DIP_INPUT_SOURCE;

typedef struct DLL_PACKED _DIP_SET_WINDOW
{
    MS_U32 u32DataLen;
    XC_SETWIN_INFO WinInfo;
 SCALER_DIP_WIN eWindow;
}DIP_SET_WINDOW;

typedef struct DLL_PACKED _DIP_SET_PROPERTY
{
    eDipPropertyflag eFlag;
    ST_XC_DIP_PROPERTY Property;
 SCALER_DIP_WIN eWindow;
}DIP_SET_PROPERTY;

typedef struct DLL_PACKED _DIP_SET_WIN_PROPERTY
{
    ST_XC_DIP_WINPROPERTY WinProperty;
 SCALER_DIP_WIN eWindow;
}DIP_SET_WIN_PROPERTY;

typedef struct DLL_PACKED _DIP_BUF_INFO
{
    BUFFER_INFO BufInfo;
 SCALER_DIP_WIN eWindow;
}DIP_BUF_INFO;

typedef struct DLL_PACKED _DIP_INTER_STUS
{
    eDipInterruptAct eFlag;
    MS_U16 IntrStautus;
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3) || defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_500)
    InterruptCb pIntCb;
#endif
 SCALER_DIP_WIN eWindow;
}DIP_INTER_STUS;

typedef struct DLL_PACKED _DIP_INTER_CB
{
    eDipInterruptAct eFlag;
    InterruptCb pIntCb;
 SCALER_DIP_WIN eWindow;
}DIP_INTER_CB;

typedef struct DLL_PACKED _DIP_TRIGGER_MODE
{
    eDipTriggerMode eTrigMode;
 SCALER_DIP_WIN eWindow;
}DIP_TRIGGER_MODE;

typedef struct DLL_PACKED _DIP_SET_DIPR_PROPERTY
{
    ST_XC_DIPR_PROPERTY DIPRProperty;
 SCALER_DIP_WIN eWindow;
}DIP_SET_DIPR_PROPERTY;

typedef struct DLL_PACKED _DIP_SET_DIPR_PROPERTY_EX
{
    ST_XC_DIPR_PROPERTY_EX stDIPRProperty_ex;
    EN_DIP_Diprflag enDIPRFlag;
    SCALER_DIP_WIN eWindow;
}DIP_SET_DIPR_PROPERTY_EX;

typedef struct _DIP_CMDQ_SET_ACTION
{
    SCALER_DIP_WIN eWindow;
    EN_XC_DIP_CMDQ_ACTION eAction;
}DIP_CMDQ_SET_ACTION;

typedef struct DLL_PACKED _DIP_CMDQ_SET_OPERATIONS
{
    cmd_mload_utopia_interface *pOps;
    MS_BOOL bEnable;
    SCALER_DIP_WIN eWindow;
}DIP_CMDQ_SET_OPERATIONS;
# 127 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
#ifndef _DRV_HWI2C_H_
#define _DRV_HWI2C_H_ 




#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "MsDevice.h"

#define HWI2C_UTOPIA20 (0)



#define MSIF_HWI2C_LIB_CODE {'H','I','2','C'}
#define MSIF_HWI2C_LIBVER {'0','6'}
#define MSIF_HWI2C_BUILDNUM {'0','6'}
#define MSIF_HWI2C_CHANGELIST {'0','0','5','6','2','3','3','3'}

#define HWI2C_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_HWI2C_LIB_CODE, \
    MSIF_HWI2C_LIBVER, \
    MSIF_HWI2C_BUILDNUM, \
    MSIF_HWI2C_CHANGELIST, \
    MSIF_OS


typedef enum _HWI2C_DbgLv
{
    E_HWI2C_DBGLV_NONE,
    E_HWI2C_DBGLV_ERR_ONLY,
    E_HWI2C_DBGLV_INFO,
    E_HWI2C_DBGLV_ALL
}HWI2C_DbgLv;


typedef enum _HWI2C_PORT
{
    E_HWI2C_PORT_0 = 0,
    E_HWI2C_PORT0_1,
    E_HWI2C_PORT0_2,
    E_HWI2C_PORT0_3,
    E_HWI2C_PORT0_4,
    E_HWI2C_PORT0_5,
    E_HWI2C_PORT0_6,
    E_HWI2C_PORT0_7,

    E_HWI2C_PORT_1 = 8,
    E_HWI2C_PORT1_1,
    E_HWI2C_PORT1_2,
    E_HWI2C_PORT1_3,
    E_HWI2C_PORT1_4,
    E_HWI2C_PORT1_5,
    E_HWI2C_PORT1_6,
    E_HWI2C_PORT1_7,

    E_HWI2C_PORT_2 = 16,
    E_HWI2C_PORT2_1,
    E_HWI2C_PORT2_2,
    E_HWI2C_PORT2_3,
    E_HWI2C_PORT2_4,
    E_HWI2C_PORT2_5,
    E_HWI2C_PORT2_6,
    E_HWI2C_PORT2_7,

    E_HWI2C_PORT_3 = 24,
    E_HWI2C_PORT3_1,
    E_HWI2C_PORT3_2,
    E_HWI2C_PORT3_3,
    E_HWI2C_PORT3_4,
    E_HWI2C_PORT3_5,
    E_HWI2C_PORT3_6,
    E_HWI2C_PORT3_7,

    E_HWI2C_PORT_4 = 32,
    E_HWI2C_PORT4_1,
    E_HWI2C_PORT4_2,
    E_HWI2C_PORT4_3,
    E_HWI2C_PORT4_4,
    E_HWI2C_PORT4_5,
    E_HWI2C_PORT4_6,
    E_HWI2C_PORT4_7,

    E_HWI2C_PORT_5 = 40,
    E_HWI2C_PORT5_1,
    E_HWI2C_PORT5_2,
    E_HWI2C_PORT5_3,
    E_HWI2C_PORT5_4,
    E_HWI2C_PORT5_5,
    E_HWI2C_PORT5_6,
    E_HWI2C_PORT5_7,

    E_HWI2C_PORT_NOSUP
}HWI2C_PORT;


typedef enum _HWI2C_CLKSEL
{
    E_HWI2C_HIGH = 0,
    E_HWI2C_NORMAL,
    E_HWI2C_SLOW,
    E_HWI2C_VSLOW,
    E_HWI2C_USLOW,
    E_HWI2C_UVSLOW,
    E_HWI2C_NOSUP
}HWI2C_CLKSEL;


typedef enum _HWI2C_State
{
    E_HWI2C_IDLE,
    E_HWI2C_READ_DATA,
    E_HWI2C_WRITE_DATA,
    E_HWI2C_DMA_READ_DATA,
    E_HWI2C_DMA_WRITE_DATA
}HWI2C_State;

typedef enum {
    E_HWI2C_READ_MODE_DIRECT,
    E_HWI2C_READ_MODE_DIRECTION_CHANGE,
    E_HWI2C_READ_MODE_DIRECTION_CHANGE_STOP_START,
    E_HWI2C_READ_MODE_MAX
} HWI2C_ReadMode;

typedef enum _HWI2C_DMA_ADDRMODE
{
    E_HWI2C_DMA_ADDR_NORMAL = 0,
    E_HWI2C_DMA_ADDR_10BIT,
    E_HWI2C_DMA_ADDR_MAX,
}HWI2C_DMA_ADDRMODE;

typedef enum _HWI2C_DMA_READMODE
{
    E_HWI2C_DMA_READ_NOSTOP = 0,
    E_HWI2C_DMA_READ_STOP,
    E_HWI2C_DMA_READ_MAX,
}HWI2C_DMA_READMODE;

typedef enum _HWI2C_DMA_MIUPRI
{
    E_HWI2C_DMA_PRI_LOW = 0,
    E_HWI2C_DMA_PRI_HIGH,
    E_HWI2C_DMA_PRI_MAX,
}HWI2C_DMA_MIUPRI;

typedef enum _HWI2C_DMA_MIUCH
{
    E_HWI2C_DMA_MIU_CH0 = 0,
    E_HWI2C_DMA_MIU_CH1,
    E_HWI2C_DMA_MIU_MAX,
}HWI2C_DMA_MIUCH;


typedef struct _HWI2C_PinCfg
{
    MS_U32 u32Reg;
    MS_U8 u8BitPos;
    MS_BOOL bEnable;
}HWI2C_PinCfg;


typedef struct _HWI2C_PortCfg
{
    MS_U32 u32DmaPhyAddr;
    HWI2C_DMA_ADDRMODE eDmaAddrMode;
    HWI2C_DMA_MIUPRI eDmaMiuPri;
    HWI2C_DMA_MIUCH eDmaMiuCh;
    MS_BOOL bDmaEnable;

    HWI2C_PORT ePort;
    HWI2C_CLKSEL eSpeed;
    HWI2C_ReadMode eReadMode;
    MS_BOOL bEnable;

}HWI2C_PortCfg;


typedef struct DLL_PACKED _HWI2C_UnitCfg
{
    HWI2C_PortCfg sCfgPort[8];
    HWI2C_PinCfg sI2CPin;
    HWI2C_CLKSEL eSpeed;
    HWI2C_PORT ePort;
    HWI2C_ReadMode eReadMode;

}HWI2C_UnitCfg;


typedef struct _HWI2C_Info
{
    MS_U32 u32IOMap;
    HWI2C_UnitCfg sUnitCfg;
}HWI2C_Info;


typedef struct DLL_PACKED _HWI2C_Status
{
    MS_U8 u8DbgLevel;
    MS_BOOL bIsInit;
    MS_BOOL bIsMaster;
    HWI2C_State eState;
}HWI2C_Status;

typedef struct _HWI2C_PortStatus
{
    MS_U8 u8DbgLevel;
    MS_BOOL bIsInit;
    MS_BOOL bIsMaster;
    HWI2C_State eState;
    MS_U8 u8Port;
}HWI2C_PortStatus;

typedef struct _HWI2C_DelayConfig
{
    MS_U8 u8Port;
 MS_U32 u32StartDelay;
 MS_U32 u32StopDelay;
}HWI2C_DelayConfig;




#include "drvHWI2C_v2.h"
# 369 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_Init(HWI2C_UnitCfg *psCfg);
# 378 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_Start(void);
# 387 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_Stop(void);
# 396 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_GetPortIndex(HWI2C_PORT ePort, MS_U8* pu8Port);
# 405 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SelectPort(HWI2C_PORT ePort);
# 414 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SetClk(HWI2C_CLKSEL eClk);
# 423 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SetReadMode(HWI2C_ReadMode eReadMode);
# 432 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_WriteByte(MS_U16 u16SlaveCfg, MS_U8 u8RegAddr, MS_U8 u8Data);
# 441 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_WriteBytes(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData);
# 450 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ReadByte(MS_U16 u16SlaveCfg, MS_U8 u8RegAddr, MS_U8 *pData);
# 459 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ReadBytes(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData);
# 468 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SelectPort1(HWI2C_PORT ePort);
# 477 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SetClkP1(HWI2C_CLKSEL eClk);
# 486 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SetReadModeP1(HWI2C_ReadMode eReadMode);
# 495 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_WriteByteP1(MS_U16 u16SlaveCfg, MS_U8 u8RegAddr, MS_U8 u8Data);
# 504 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_WriteBytesP1(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData);
# 513 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ReadByteP1(MS_U16 u16SlaveCfg, MS_U8 u8RegAddr, MS_U8 *pData);
# 522 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ReadBytesP1(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData);
# 531 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SetDbgLevel(HWI2C_DbgLv eLevel);
# 540 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_GetLibVer(const MSIF_Version **ppVersion);
# 549 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
void MDrv_HWI2C_GetStatus(HWI2C_Status *pStatus);
# 558 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
const HWI2C_Info* MDrv_HWI2C_GetInfo(void);
# 567 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ConfigDelay(MS_U32 u32StartDelay, MS_U32 u32StopDelay);
# 576 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_U16 MDrv_HWI2C_SetPowerState(EN_POWER_MODE u16PowerState);
# 585 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ConfigDelay_EX(void *pParam_Config);
# 594 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
void MDrv_HWI2C_GetStatus_EX(void *pParam_Status);
# 605 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_Init_U2K(HWI2C_UnitCfg *psCfg);
# 614 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_Start_U2K(void);
# 623 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_Stop_U2K(void);
# 632 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_WriteBytes_U2K(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData);
# 641 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ReadBytes_U2K(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData);
# 650 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SelectPort_U2K(HWI2C_PORT ePort);
# 659 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_SetClk_U2K(HWI2C_CLKSEL eClk);
# 668 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
void MDrv_HWI2C_SetStopBit(MS_U8 u8Port, MS_BOOL bGenStop);
# 677 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_GetStopBit(MS_U8 u8Port);
# 686 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_WriteBytes_CUST(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData, HWI2C_PORT ePort, HWI2C_CLKSEL eClk);
# 695 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHWI2C.h"
MS_BOOL MDrv_HWI2C_ReadBytes_CUST(MS_U16 u16SlaveCfg, MS_U32 uAddrCnt, MS_U8 *pRegAddr, MS_U32 uSize, MS_U8 *pData, HWI2C_PORT ePort, HWI2C_CLKSEL eClk);

#ifdef __cplusplus
}
#endif


#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNSK2.h"
#ifndef _DRVNSK2_H_
#define _DRVNSK2_H_ 
# 106 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNSK2.h"
#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"






typedef void (*NSK2_IntNotify)(MS_U32 reason, MS_U32 acpuError);





MS_U32 MDrv_NSK2_Init(void);
MS_U32 MDrv_NSK2_ColdReset(void);
MS_U32 MDrv_NSK2_EndSubtest(void);
MS_U32 MDrv_NSK2_Compare(MS_U32 StartAddr, MS_U32 CompareLens, MS_U32 CompareSim,
                         MS_U32 Mask, MS_U32 ExpectResult);
MS_U32 MDrv_NSK2_CompareMem(MS_U32 reserved, MS_U32 StartAddr, MS_U32 CompareLens,
                            MS_U32 CompareSim, MS_U32 ExpectResult, void *pGolden);

MS_U32 MDrv_NSK2_CompareKTE(MS_U32 reserved_1, MS_U32 reserved_2, void *pLabel);
MS_U32 MDrv_NSK2_CompareOut(MS_U32 reserved_1, MS_U32 reserved_2, MS_U32 HighDWord, MS_U32 LowDWord);

MS_U32 MDrv_NSK2_WriteMem(MS_U32 reserved, MS_U32 StartAddr, MS_U32 WriteLens, void *pWriteData);
MS_U32 MDrv_NSK2_WriteSFR(MS_U32 StartAddr, MS_U32 Data);
MS_U32 MDrv_NSK2_WriteESA(MS_U8 ESASelect, MS_U8 ESASubSelect, MS_U8 pid_no);

MS_U32 MDrv_NSK2_WriteTransportKey( MS_U8 SCB, MS_U8 ForceSCB, void *pLabel, MS_U8 pid_no );
MS_U32 MDrv_NSK2_WriteM2MKey(void *pIV, MS_U8 SubAlgo);
MS_U32 MDrv_NSK2_WriteSCPUKey(void);
MS_U32 MDrv_NSK2_WriteReservedKey(void);
MS_U32 MDrv_NSK2_GetReserveKeyNum(void);

MS_U32 MDrv_NSK2_SetRNG(MS_U32 reserved_1, MS_U16 RNG_Value);
MS_U32 MDrv_NSK2_BasicInitializationComplete(void);
MS_U32 MDrv_NSK2_DriveKteAck(void);
MS_U32 MDrv_NSK2_FillJTagPswd(void);
MS_U32 MDrv_NSK2_CheckPubOTPConfig(void *pCheck);
MS_U32 MDrv_NSK2_UnlockOTPCtrl(void);

MS_U32 MDrv_NSK2_ReadData(MS_U32 addr_offset, MS_U32 data_size, MS_U8 *data);
MS_U32 MDrv_NSK2_WriteData(MS_U32 addr_offset, MS_U32 data_size, MS_U8 *data);
MS_U32 MDrv_NSK2_ReadData8(MS_U32 addr_offset, MS_U32 data_size, MS_U8 *data);
MS_U32 MDrv_NSK2_WriteData8(MS_U32 addr_offset, MS_U32 data_size, MS_U8 *data);
MS_U32 MDrv_NSK2_ReadData32(MS_U32 addr_offset, MS_U32 data_size, MS_U32 *data);
MS_U32 MDrv_NSK2_WriteData32(MS_U32 addr_offset, MS_U32 data_size, MS_U32 *data);

MS_U32 MDrv_NSK2_SetIntNotify(NSK2_IntNotify IntNotify);
MS_U32 MDrv_NSK2_ExcuteCmd(MS_U32 command, MS_U32 control,
                           MS_U32 register_offset, MS_U32 data_size,
                           const MS_U8 *data);

MS_U32 MDrv_NSK2_GetOTPProperties(MS_U32 *desc_size, MS_U8 *desc);
MS_U32 MDrv_NSK2_GetCMProperties(MS_U32 *desc_size, MS_U8 *desc);
MS_U32 MDrv_NSK2_GetM2MProperties(MS_U32 *desc_size, MS_U8 *desc);
MS_U32 MDrv_NSK2_GetDMAProperties(MS_U32 *desc_size, MS_U8 *desc);


MS_U32 MDrv_NSK2_GetMaxXConn(void);
MS_U32 MDrv_NSK2_GetOTPValue(MS_U32 u32Offset);
MS_U32 MDrv_NSK2_CMChannelNum(void);
MS_U32 MDrv_NSK2_GetOTPFieldValue(MS_U8 u8Tag, MS_U8 *pLength, MS_U32 *pRetValue);
void MDrv_NSK2_SetDbgLevel(MS_U32 u32Level);
void MDrv_NSK2_SetPollingCnt(MS_U32 u32Cnt);
void MDrv_NSK2_GetRNGThroughPut(void *pRngData, MS_U32 u32DataSize, MS_BOOL bDump);
void MDrv_NSK2_RunFree(MS_BOOL bRunFree);
void MDrv_NSK2_PushSlowClock ( MS_BOOL HaltClk, MS_U32 TenSecond);
MS_U32 MDrv_NSK2_BasicInitializationComplete(void);

MS_U32 MDrv_NSK21_InvalidCmChannel(MS_U16 PidSlot);
MS_U32 MDrv_NSK21_CfgCmChannel(MS_U16 PidSlot, MS_U16 LocalDAlgo, MS_U16 ESAAlgo, MS_U16 LocalSAlgo, MS_U16 SysKeyIndex);
MS_U32 MDrv_NSK21_WriteTransportKey(MS_U8 SCB, MS_U8 ForceSCB, void *pLocalDIV1, void *pLocalDIV2,
                                    void *pESAIV1, void *pESAIV2, void *pLocalSIV1, void *pLocalSIV2, MS_U16 PidSlot );



MS_U32 MDrv_NSK21_WriteM2MKey(MS_U32 M2MAlgo);
MS_U32 MDrv_NSK21_ModifyGenIn(MS_U32 MaskVal,MS_U32 XorVal);
MS_U32 MDrv_NSK21_WriteJTagKey(MS_U32 OverrideOid, MS_U32 Select);
MS_U32 MDrv_NSK2_CompareIRQ(MS_U32 reserved_1, MS_U32 reserved_2, MS_U32 ExpectedValue);
MS_U32 MDrv_NSK21_IncrementNvCounter(void);
MS_U32 MDrv_NSK2_WriteOtpKey(void);

#ifdef __cplusplus
}
#endif
#endif
# 137 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#ifndef _DRV_VBI_H
#define _DRV_VBI_H 

#include "MsTypes.h"
#include "MsDevice.h"

#include "ULog.h"
#include "UFO.h"
#ifdef __cplusplus
extern "C"
{
#endif

#define VBI_UTOPIA20 (1)
# 160 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#define VBI_TTX_DATA_LENGTH 48

#define MSIF_VBI_LIB_CODE {'V','B','I','_'}
#define MSIF_VBI_LIBVER {'0','0'}
#define MSIF_VBI_BUILDNUM {'0','2' }
#define MSIF_VBI_CHANGELIST {'0','0','5','6','5','9','8','0'}
#define VBI_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_VBI_LIB_CODE, \
    MSIF_VBI_LIBVER, \
    MSIF_VBI_BUILDNUM, \
    MSIF_VBI_CHANGELIST, \
    MSIF_OS





typedef enum
{
    VBI_VIDEO_SECAM,
    VBI_VIDEO_PAL_NC,
    VBI_VIDEO_PAL_M,
    VBI_VIDEO_NTSC,
    VBI_VIDEO_NTSC443_PAL60,
    VBI_VIDEO_PAL,
    VBI_VIDEO_OTHERS
} VBI_VIDEO_STANDARD;

typedef enum
{
    E_VBI_TELETEXT,
    E_VBI_CC,
    E_VBI_WSS
} VBI_INIT_TYPE;

typedef struct
{
    MS_U8 u8NoInfo;
} VBI_DrvInfo;

typedef struct DLL_PACKED
{
    VBI_INIT_TYPE eInitType;
} VBI_DrvStatus;

typedef struct DLL_PACKED
{
    MS_U8 ptable[7];
} VBI_CC_TABLE;

typedef struct DLL_PACKED
{
    MS_BOOL _bSuspend;
    VBI_INIT_TYPE eInitType;
    MS_VIRT _ptrVBIRiuBaseAddr;


    MS_PHY _TTXBufAddr;
    MS_U16 _TTXBufLen;


    MS_PHY _CCBufAddr;
    MS_U16 _CCBufLen;


    MS_PHY _cbBufferAddr;
    MS_U32 _cbBufferLength;
    MS_U8 *_pCbVABuff;

    MS_BOOL _bTTXSupported;
    MS_BOOL _bVBIInit;
    MS_U16 _u16VBIDbgSwitch;
} VBI_StoreInfo;




typedef enum
{
    VBI_CC_PACKET_COUNT,
    VBI_CC_BYTE_FOUND_INDICATION,
    VBI_CC_DATA_GET

} EN_VBI_INFO;


typedef enum
{
    VBI_ERRORCODE_SUCCESS = 0x0000,
    VBI_ERRORCODE_FAIL = 0x0001

} EN_VBI_ERRORCODE;

typedef enum
{
    EN_TTX_DMA_HEADER,
    EN_TTX_DMA_PACKET1_TO_25,
    EN_TTX_DMA_PACKET26_28_29,
    EN_TTX_DMA_PACKET27,
    EN_TTX_DMA_BTT,
    EN_TTX_DMA_AIT,
} EN_TTX_DMA_TYPE;

typedef enum
{
    VBI_INIT,
    VBI_EXIT,
    VBI_SUSPEND,
    VBI_RESUME,
} EN_VBI_CMD;

typedef MS_U32(*VBI_CB_FN)(MS_U8 *pVBILine, MS_U32 length);
# 290 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
MS_BOOL MDrv_VBI_GetLibVer(const MSIF_Version **ppVersion);





const VBI_DrvInfo * MDrv_VBI_GetInfo(void);







MS_BOOL MDrv_VBI_GetStatus(VBI_DrvStatus *pDrvStatus);







MS_BOOL MDrv_VBI_SetDbgLevel(MS_U16 u16DbgSwitch);
# 324 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
MS_BOOL MDrv_VBI_Init(VBI_INIT_TYPE type);






MS_BOOL MDrv_VBI_Exit(void);
# 341 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#if defined(UFO_PUBLIC_HEADER_300)
void MDrv_VBI_RegisterCB(VBI_CB_FN pFN, MS_PHYADDR bufferAddr, MS_U32 length);
#else
void MDrv_VBI_RegisterCB(VBI_CB_FN pFN, MS_PHY bufferAddr, MS_U32 length);
#endif





void MDrv_VBI_RingBuffer_Reset(void);
# 360 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#if defined(UFO_PUBLIC_HEADER_300)
void MDrv_VBI_InitializeTTXSlicer(MS_PHYADDR bufferAddr, MS_U16 packetCount);
#else
void MDrv_VBI_InitializeTTXSlicer(MS_PHY bufferAddr, MS_U16 packetCount);
#endif






void MDrv_VBI_EnableTTXSlicer(MS_BOOL bEnable);







MS_BOOL MDrv_VBI_IsVPS_Ready(void);







MS_BOOL MDrv_VBI_IsTTX_Ready(void);







MS_BOOL MDrv_VBI_IsWSS_Ready(void);






MS_U16 MDrv_VBI_GetWSS_Data(void);
# 411 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
void MDrv_VBI_GetVPS_Data(MS_U8 *lowerWord, MS_U8 *higherWord);
# 420 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
MS_BOOL MDrv_VBI_GetCompleteVPS_Data(MS_U8** pBuffer, MS_U32* dataLen);







void MDrv_VBI_SetVideoStandard(VBI_VIDEO_STANDARD eStandard);







MS_BOOL MDrv_VBI_TTX_CheckCircuitReady(void);






MS_U16 MDrv_VBI_TTX_GetPacketCount(void);







MS_BOOL MDrv_VBI_TTX_PacketBufferIsEmpty(void);
# 462 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#if defined(UFO_PUBLIC_HEADER_300)
MS_BOOL MDrv_VBI_TTX_GetPackets(MS_PHYADDR dataAddr, MS_U32 *length);
#else
MS_BOOL MDrv_VBI_TTX_GetPackets(MS_PHY dataAddr, MS_U32 *length);
#endif
# 475 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#if defined(UFO_PUBLIC_HEADER_300)
MS_BOOL MDrv_VBI_TTX_GetPacket(MS_PHYADDR *packetAddress);
#else
MS_BOOL MDrv_VBI_TTX_GetPacket(MS_PHY *packetAddress);
#endif







MS_BOOL MDrv_VBI_TTX_PacketBufferIsOverflow( void );






MS_U16 MDrv_VBI_TTX_PacketBufferGetNoOfOverflows( void );
# 503 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
void MDrv_VBI_TTX_EnableLine(MS_U16 StartLine, MS_U16 EndLine);
# 515 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#if defined(UFO_PUBLIC_HEADER_300)
MS_BOOL MDrv_VBI_ProtectMemory(MS_BOOL bEnable, MS_PHYADDR phyAddr, MS_U32 u32Size);
#else
MS_BOOL MDrv_VBI_ProtectMemory(MS_BOOL bEnable, MS_PHY phyAddr, MS_U32 u32Size);
#endif
# 531 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
#if defined(UFO_PUBLIC_HEADER_300)
void MDrv_VBI_CC_InitSlicer(MS_U32 u32RiuAddr, MS_PHYADDR bufferAddr, MS_U16 packetCount);
#else
void MDrv_VBI_CC_InitSlicer(MS_VIRT u32RiuAddr, MS_PHY bufferAddr, MS_U16 packetCount);
#endif






void MDrv_VBI_CC_InitYPbYr(MS_U8 cvbs_no);






void MDrv_VBI_CC_EnableSlicer(MS_BOOL bEnable);






MS_U8 MDrv_VBI_CC_SetDataRate(MS_U8 *ptable);






void MDrv_VBI_CC_SetFrameCnt(MS_U8 cnt);






MS_U32 MDrv_VBI_CC_GetInfo(MS_U32 selector);
# 579 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
void MDrv_VBI_CC_EnableLine(MS_U16 StartLine, MS_U16 EndLine, MS_U8 mode);
# 588 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
MS_BOOL MDrv_VBI_SyncMemory( MS_U32 u32Start, MS_U32 u32Size );







MS_BOOL MDrv_VBI_CC_SetSCWindowLen(MS_U8 u8Len);







MS_BOOL MDrv_VBI_CC_SetVideoStandard(VBI_VIDEO_STANDARD eStandard);
# 615 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvVBI.h"
void MDrv_VBI_WSS_SetVpsByteNum(MS_U8 cnt);







MS_BOOL MDrv_VBI_Suspend(void);






MS_BOOL MDrv_VBI_Resume(void);






MS_U32 MDrv_VBI_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef __cplusplus
}
#endif

#endif
# 139 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
#ifndef _APIXC_AUTO_H_
#define _APIXC_AUTO_H_ 
#ifdef __cplusplus
extern "C"
{
#endif
# 153 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
#define XC_AUTO_SIGNAL_INFO_VERSION 1




typedef enum
{
    E_XC_AUTO_TUNE_NULL = 0x00,


    E_XC_AUTO_TUNE_VALID_DATA = 0x01,
    E_XC_AUTO_TUNE_POSITION = 0x02,
    E_XC_AUTO_TUNE_FREQ = 0x04,
    E_XC_AUTO_TUNE_PHASE = 0x08,
    E_XC_AUTO_TUNE_BASIC = E_XC_AUTO_TUNE_VALID_DATA | E_XC_AUTO_TUNE_POSITION | E_XC_AUTO_TUNE_FREQ | E_XC_AUTO_TUNE_PHASE,


    E_XC_AUTO_TUNE_RGB_OFFSET = 0x10,
    E_XC_AUTO_TUNE_RGB_GAIN = 0X20,
    E_XC_AUTO_TUNE_RGB_COLOR = E_XC_AUTO_TUNE_RGB_OFFSET | E_XC_AUTO_TUNE_RGB_GAIN,


    E_XC_AUTO_TUNE_YUV_COLOR = 0X40,

    E_XC_AUTO_TUNE_SCART_RGB_GAIN = 0x80,


    E_XC_AUTO_TUNE_ADVANCE = E_XC_AUTO_TUNE_BASIC | E_XC_AUTO_TUNE_RGB_COLOR,
} XC_Auto_TuneType;

typedef enum
{
    E_XC_INTERNAL_CALIBRATION,
    E_XC_EXTERNAL_CALIBRATION,
} XC_Auto_CalibrationType;

typedef enum
{
    E_XC_HW_CALIBRATION,
    E_XC_SW_CALIBRATION,
} XC_Auto_CalibrationMode;

typedef enum
{
    E_XC_AUTO_POR_HPVP,
    E_XC_AUTO_POR_HPVN,
    E_XC_AUTO_POR_HNVP,
    E_XC_AUTO_POR_HNVN,
}XC_Auto_SYNC_POR;

typedef struct DLL_PACKED
{

    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;
    MS_U16 u16HorizontalTotal;
    MS_U16 u16HResolution;
    MS_U8 u8Phase;

} XC_Auto_Signal_Info;

typedef struct DLL_PACKED
{
    MS_U16 u16Version;
    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;
    MS_U16 u16HorizontalTotal;
    MS_U16 u16HResolution;
    MS_U16 u16Phase;
} XC_Auto_Signal_Info_Ex;

typedef struct DLL_PACKED
{
    INPUT_SOURCE_TYPE_t eCurrentSrc;
    SCALER_WIN eWindow;
    XC_Auto_SYNC_POR eSyncPolarity;
    MS_U32 u32HSyncStart;
    MS_U32 u32HSyncEnd;
}XC_AUTO_SYNC_INFO;
# 245 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
MS_BOOL MApi_XC_Auto_Geometry(XC_Auto_TuneType enAutoTuneType, XC_Auto_Signal_Info *ActiveInfo, XC_Auto_Signal_Info *StandardInfo, SCALER_WIN eWindow);
# 257 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
MS_BOOL MApi_XC_Auto_Geometry_Ex(XC_Auto_TuneType enAutoTuneType, XC_Auto_Signal_Info_Ex *ActiveInfo, XC_Auto_Signal_Info_Ex *StandardInfo, SCALER_WIN eWindow);







MS_BOOL MApi_XC_Auto_StopAutoGeometry(void);
# 276 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
MS_BOOL MApi_XC_Auto_GainOffset(XC_Auto_CalibrationType type, XC_Auto_TuneType enAutoTuneType, APIXC_AdcGainOffsetSetting *pstADCSetting, SCALER_WIN eWindow);
# 285 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
MS_BOOL MApi_XC_Auto_GetHWFixedGainOffset(XC_Auto_TuneType enAutoTuneType, APIXC_AdcGainOffsetSetting *pstADCSetting);







MS_BOOL MApi_XC_Auto_SetValidData(MS_U8 Value);
# 305 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
void MApi_XC_Auto_AutoOffset(MS_BOOL bEnable, MS_BOOL bIsYPbPrFlag);
# 314 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto.h"
MS_BOOL MApi_XC_Auto_DetectWidth(XC_Auto_Signal_Info_Ex *pSignalInfo , SCALER_WIN eWindow);







MS_BOOL MApi_XC_Auto_SetCalibrationMode(XC_Auto_CalibrationMode eMode);






void MApi_XC_Auto_GetCalibrationMode(XC_Auto_CalibrationMode *eMode);






void MApi_XC_AUTO_GetSyncInfo(XC_AUTO_SYNC_INFO *pSyncInfo);


#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMS_Type.h"
#ifndef _API_DMS_TYPE_H_
#define _API_DMS_TYPE_H_ 

#include "MsCommon.h"
#include "MsDevice.h"

#ifdef __cplusplus
extern "C" {
#endif
#include "UFO.h"




#define MSIF_DMS_LIB_CODE {'M','W','S','_'}
#define MSIF_DMS_LIBVER {'0','0'}
#define MSIF_DMS_BUILDNUM {'0','0'}
#define MSIF_DMS_CHANGELIST {'0','0','0','0','0','0','0','1'}

#define DMS_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMS_LIB_CODE , \
    MSIF_DMS_LIBVER , \
    MSIF_DMS_BUILDNUM , \
    MSIF_DMS_CHANGELIST, \
    MSIF_OS

#define VERSION_ST_DMS_DISPFRAMEFORMAT 1
#define VERSION_ST_DMS_COLORDESCRIPTION 1
#define VERSION_ST_DMS_DOLBYHDRINFO 1
#define VERSION_ST_DMS_HDRINFO 1
#define VERSION_ST_DMS_DISP_FRM_INFO_EXT 1
#define VERSION_ST_DMS_COLORHWFORMAT 1
#define VERSION_ST_DMS_COLORSWFORMAT 1
#define VERSION_ST_DMS_FRAMEFORMAT 1

#define VERSION_ST_DMS_INITDATA 1
#define VERSION_ST_DMS_SETWIN_INFO 1
#define VERSION_ST_DMS_GETWIN_INFO 1





typedef enum
{
    E_DMS_FAIL = 0,
    E_DMS_OK = 1,
} EN_DMS_RESULT;

typedef enum
{
    E_DMS_DISP_FRM_INFO_EXT_TYPE_10BIT,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_INTERLACE = 1,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_DOLBY_EL = 1,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_10BIT_INTERLACE = 2,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_10BIT_DOLBY_EL = 2,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_10BIT_MVC,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_INTERLACE_MVC,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_10BIT_INTERLACE_MVC = 5,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_DOLBY_META = 5,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_MFCBITLEN,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_MFCBITLEN_MVC,
    E_DMS_DISP_FRM_INFO_EXT_TYPE_MAX,
} EN_DMS_DISP_FRM_INFO_EXT_TYPE;

typedef enum
{
    E_DMS_CODEC_TYPE_NONE,
    E_DMS_CODEC_TYPE_MPEG2,
    E_DMS_CODEC_TYPE_H263,
    E_DMS_CODEC_TYPE_MPEG4,
    E_DMS_CODEC_TYPE_DIVX311,
    E_DMS_CODEC_TYPE_DIVX412,
    E_DMS_CODEC_TYPE_FLV,
    E_DMS_CODEC_TYPE_VC1_ADV,
    E_DMS_CODEC_TYPE_VC1_MAIN,
    E_DMS_CODEC_TYPE_RV8,
    E_DMS_CODEC_TYPE_RV9,
    E_DMS_CODEC_TYPE_H264,
    E_DMS_CODEC_TYPE_AVS,
    E_DMS_CODEC_TYPE_MJPEG,
    E_DMS_CODEC_TYPE_MVC,
    E_DMS_CODEC_TYPE_VP8,
    E_DMS_CODEC_TYPE_HEVC,
    E_DMS_CODEC_TYPE_VP9,
    E_DMS_CODEC_TYPE_HEVC_DV,
    E_DMS_CODEC_TYPE_MAX,
} EN_DMS_CODECTYPE;

typedef enum
{
    E_DMS_FRAME_TYPE_I,
    E_DMS_FRAME_TYPE_P,
    E_DMS_FRAME_TYPE_B,
    E_DMS_FRAME_TYPE_OTHER,
    E_DMS_FRAME_TYPE_MAX,
} EN_DMS_FRAMETYPE;

typedef enum
{
    E_DMS_FIELD_TYPE_NONE,
    E_DMS_FIELD_TYPE_TOP,
    E_DMS_FIELD_TYPE_BOTTOM,
    E_DMS_FIELD_TYPE_BOTH,
    E_DMS_FIELD_TYPE_MAX,
} EN_DMS_FIELDTYPE;

typedef enum
{
    E_DMS_VIEW_TYPE_CENTER,
    E_DMS_VIEW_TYPE_LEFT,
    E_DMS_VIEW_TYPE_RIGHT,
    E_DMS_VIEW_TYPE_TOP,
    E_DMS_VIEW_TYPE_BOTTOM,
    E_DMS_VIEW_TYPE_MAX,
} EN_DMS_VIEWTYPE;

typedef enum
{
    E_DMS_COLOR_FORMAT_HW_HVD,
    E_DMS_COLOR_FORMAT_HW_MVD,
    E_DMS_COLOR_FORMAT_SW_YUV420_PLANAR,
    E_DMS_COLOR_FORMAT_SW_RGB565,
    E_DMS_COLOR_FORMAT_SW_ARGB8888,
    E_DMS_COLOR_FORMAT_YUYV,
    E_DMS_COLOR_FORMAT_SW_RGB888,
    E_DMS_COLOR_FORMAT_10BIT_TILE,
    E_DMS_COLOR_FORMAT_SW_YUV420_SEMIPLANAR,
    E_DMS_COLOR_FORMAT_YUYV_CSC_BIT601,
    E_DMS_COLOR_FORMAT_YUYV_CSC_255,
    E_DMS_COLOR_FORMAT_HW_EVD,
    E_DMS_COLOR_FORMAT_MAX,
} EN_DMS_COLORFORMAT;

typedef enum
{
    E_DMS_STATUS_NOT_SUPPORT = 0x0,
    E_DMS_STATUS_INITIALIZED = 0x1,
    E_DMS_STATUS_SUPPORT_MULTI_WINDOW = (0x1<<1),
    E_DMS_STATUS_SUPPORT_VSYNC_BRIDGE = (0x1<<2),
    E_DMS_STATUS_SUPPORT_AVSYNC = (0x1<<3),
    E_DMS_STATUS_SUPPORT_SECURE_VIDEO = (0x1<<4),
} EN_DMS_STATUS;

typedef enum
{
    E_DMS_AR_DEFAULT = 0,
    E_DMS_AR_16x9,
    E_DMS_AR_4x3,
    E_DMS_AR_AUTO,
    E_DMS_AR_MAX,
} EN_DMS_ASPECT_RATIO;


typedef struct
{
    MS_U32 u32x;
    MS_U32 u32y;
    MS_U32 u32width;
    MS_U32 u32height;
} ST_DMS_WINDOW;


typedef struct
{
    MS_U32 u32Version;
    MS_U32 u32Length;
    MS_PHY phyBuffAddr;
    MS_U32 u32BuffSize;
} ST_DMS_INITDATA;


typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;
    MS_BOOL bXCWinInfoValid;
    ST_DMS_WINDOW stDispWin;
    ST_DMS_WINDOW stCropWin;
    EN_DMS_ASPECT_RATIO enARC;
    ST_DMS_WINDOW stOutputWin;
} ST_DMS_SETWIN_INFO;


typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;
    MS_BOOL bXCWinInfoValid;
    ST_DMS_WINDOW stDispWin;
    ST_DMS_WINDOW stCropWin;
    MS_U32 u16DeviceID;
    MS_U32 enInputSourceType;
    EN_DMS_ASPECT_RATIO enARC;
    ST_DMS_WINDOW stOutputWin;
    MS_U32 u32ZOrder;
} ST_DMS_GETWIN_INFO;


typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;

    MS_U8 u8ColorPrimaries;
    MS_U8 u8TransferCharacteristics;

    MS_U8 u8MatrixCoefficients;
} ST_DMS_COLORDESCRIPTION;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;

    MS_U8 u8DVMode;
    MS_PHY phyHDRMetadataAddr;
    MS_U32 u32HDRMetadataSize;
    MS_PHY phyHDRRegAddr;
    MS_U32 u32HDRRegSize;
    MS_PHY phyHDRLutAddr;
    MS_U32 u32HDRLutSize;
    MS_U8 u8DMEnable;
    MS_U8 u8CompEnable;
    MS_U8 u8CurrentIndex;
} ST_DMS_DOLBYHDRINFO;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;

    MS_U32 u32FrmInfoExtAvail;

    ST_DMS_COLORDESCRIPTION stColorDescription;

    ST_DMS_DOLBYHDRINFO stDolbyHDRInfo;
} ST_DMS_HDRINFO;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;
    MS_PHY phyLumaAddr;
    MS_PHY phyChromaAddr;
    MS_PHY phyLumaAddr2Bit;
    MS_PHY phyChromaAddr2Bit;
    MS_U32 u32LumaPitch;
    MS_U32 u32ChromaPitch;
    MS_U32 u32LumaPitch2Bit;
    MS_U32 u32ChromaPitch2Bit;
    MS_U32 u32MFCodecInfo;
    MS_PHY phyMFCBITLEN;
    MS_PHY phyLumaAddr_subsample;
    MS_PHY phyChromaAddr_subsample;
    MS_U16 u16Pitch_subsample;
    MS_U8 u8TileMode_subsample;
} ST_DMS_COLORHWFORMAT;

typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;
    EN_DMS_FRAMETYPE eFrameType;
    EN_DMS_FIELDTYPE eFieldType;
    EN_DMS_VIEWTYPE eViewType;
    MS_U32 u32Width;
    MS_U32 u32Height;
    MS_U32 u32CropLeft;
    MS_U32 u32CropRight;
    MS_U32 u32CropTop;
    MS_U32 u32CropBottom;
    ST_DMS_COLORHWFORMAT sHWFormat;
    MS_U32 u32Idx;
    MS_U32 u32PriData;
    MS_U8 u8LumaBitdepth;
    MS_U8 u8ChromaBitdepth;
} ST_DMS_FRAMEFORMAT;


typedef struct DLL_PACKED
{
    MS_U32 u32Version;
    MS_U32 u32Length;
    MS_U32 OverlayID;
    ST_DMS_FRAMEFORMAT sFrames[2];
    EN_DMS_COLORFORMAT eColorFormat;
    MS_U32 FrameNum;
    MS_PHY u64Pts;
    MS_U32 CodecType;
    MS_U32 u32FrameRate;
    MS_U32 u32AspectWidth;
    MS_U32 u32AspectHeight;
    MS_U32 u32VdecStreamVersion;
    MS_U32 u32VdecStreamId;
    MS_U32 u32UniqueId;
    MS_U8 u8AspectRate;
    MS_U8 u8Interlace;
    MS_U8 u8FrcMode;
    MS_U8 u83DMode;
    MS_U8 u8BottomFieldFirst;
    MS_U8 u8FreezeThisFrame;
    MS_U8 u8ToggleTime;
    MS_U8 u8MCUMode;
    MS_U8 u8FieldCtrl;
    MS_U8 u8ApplicationType;
    MS_U8 u83DLayout;
    MS_U8 u8ColorInXVYCC;
    MS_U8 u8LowLatencyMode;
    MS_U8 u8VdecComplexity;
    MS_U8 u8HTLBTableId;
    MS_U8 u8HTLBEntriesSize;
    MS_U8 u8AFD;
    ST_DMS_HDRINFO sHDRInfo;
    MS_U16 u16MIUBandwidth;
    MS_U16 u16Bitrate;
    MS_U32 u32TileMode;
    MS_PHY phyHTLBEntriesAddr;
} ST_DMS_DISPFRAMEFORMAT;

typedef struct
{
    MS_U32 u32R;
    MS_U32 u32G;
    MS_U32 u32B;
    MS_U32 u32A;
} ST_DMS_COLOR;

#ifdef __cplusplus
}
#endif

#endif
# 103 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
#ifndef _API_XC_ACE_EX_H_
#define _API_XC_ACE_EX_H_ 


#include "MsDevice.h"
#include "MsCommon.h"
#include "MsVersion.h"

#ifdef __cplusplus
extern "C"
{
#endif
# 123 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
#define MSIF_ACE_EX_LIB_CODE {'A','E','X','_'}
#define MSIF_ACE_EX_LIBVER {'0','0'}
#define MSIF_ACE_EX_BUILDNUM {'5','9'}
#define MSIF_ACE_EX_CHANGELIST {'0','0','6','2','1','0','5','3'}
#define XC_ACE_EX_API_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_ACE_EX_LIB_CODE, \
    MSIF_ACE_EX_LIBVER, \
    MSIF_ACE_EX_BUILDNUM, \
    MSIF_ACE_EX_CHANGELIST, \
    MSIF_OS


typedef enum
{
    XC_ACE_EX_DEVICE0 = 0,
    XC_ACE_EX_DEVICE1,
    XC_ACE_EX_MAX_DEVICE_NUM
} XC_ACE_EX_DEVICE_NUM;




typedef enum
{

    E_XC_ACE_EX_INFO_TYPE_VERSION,

    E_XC_ACE_EX_INFO_TYPE_CONTRAST,

    E_XC_ACE_EX_INFO_TYPE_R_GAIN,

    E_XC_ACE_EX_INFO_TYPE_G_GAIN,

    E_XC_ACE_EX_INFO_TYPE_B_GAIN,

    E_XC_ACE_EX_INFO_TYPE_SATURATION,

    E_XC_ACE_EX_INFO_TYPE_HUE,

    E_XC_ACE_EX_INFO_TYPE_COLOR_CORRECTION_XY_R,

    E_XC_ACE_EX_INFO_TYPE_COLOR_CORRECTION_XY_G,

    E_XC_ACE_EX_INFO_TYPE_COLOR_CORRECTION_XY_B,

    E_XC_ACE_EX_INFO_TYPE_COLOR_CORRECTION_OFFSET_R,

    E_XC_ACE_EX_INFO_TYPE_COLOR_CORRECTION_OFFSET_G,

    E_XC_ACE_EX_INFO_TYPE_COLOR_CORRECTION_OFFSET_B,

    E_XC_ACE_EX_INFO_TYPE_BRIGHTNESS_R,

    E_XC_ACE_EX_INFO_TYPE_BRIGHTNESS_G,

    E_XC_ACE_EX_INFO_TYPE_BRIGHTNESS_B,


    E_XC_ACE_EX_INFO_TYPE_DUMMY
} E_XC_ACE_EX_INFOTYPE;




typedef enum
{

    E_XC_ACE_EX_YUV_TO_RGB_MATRIX_SDTV,

    E_XC_ACE_EX_YUV_TO_RGB_MATRIX_HDTV,

    E_XC_ACE_EX_YUV_TO_RGB_MATRIX_USER,
} E_XC_ACE_EX_YUVTORGBTYPE;




typedef enum
{

    E_XC_ACE_EX_MWE_MODE_OFF,

    E_XC_ACE_EX_MWE_MODE_H_SPLIT,

    E_XC_ACE_EX_MWE_MODE_MOVE,

    E_XC_ACE_EX_MWE_MODE_ZOOM,

    E_XC_ACE_EX_MWE_MODE_H_SCAN,

    E_XC_ACE_EX_MWE_MODE_H_SPLIT_LEFT,

    E_XC_ACE_EX_MWE_MODE_NUMS,
} E_XC_ACE_EX_MWE_FUNC;




typedef enum
{

    E_XC_ACE_EX_FAIL = 0,

    E_XC_ACE_EX_OK = 1,

    E_XC_ACE_EX_GET_BASEADDR_FAIL,

    E_XC_ACE_EX_OBTAIN_MUTEX_FAIL,
} E_XC_ACE_EX_RESULT;


typedef enum
{
    E_XC_ACE_EX_MWE_MIRROR_NORMAL,
    E_XC_ACE_EX_MWE_MIRROR_H_ONLY,
    E_XC_ACE_EX_MWE_MIRROR_V_ONLY,
    E_XC_ACE_EX_MWE_MIRROR_HV,
    E_XC_ACE_EX_MWE_MIRROR_MAX,
}E_XC_ACE_EX_MWE_MIRROR_TYPE;




typedef struct DLL_PACKED
{

    MS_U8 cRedOffset;

    MS_U8 cGreenOffset;

    MS_U8 cBlueOffset;


    MS_U8 cRedColor;

    MS_U8 cGreenColor;

    MS_U8 cBlueColor;


    MS_U8 cRedScaleValue;

    MS_U8 cGreenScaleValue;

    MS_U8 cBlueScaleValue;
} XC_ACE_EX_color_temp;




typedef struct DLL_PACKED
{

    MS_U16 cRedOffset;

    MS_U16 cGreenOffset;

    MS_U16 cBlueOffset;


    MS_U8 cRedColor;

    MS_U8 cGreenColor;

    MS_U8 cBlueColor;


    MS_U8 cRedScaleValue;

    MS_U8 cGreenScaleValue;

    MS_U8 cBlueScaleValue;
} XC_ACE_EX_color_temp_ex;




typedef struct DLL_PACKED
{

    MS_U16 cRedOffset;

    MS_U16 cGreenOffset;

    MS_U16 cBlueOffset;


    MS_U16 cRedColor;

    MS_U16 cGreenColor;

    MS_U16 cBlueColor;


    MS_U16 cRedScaleValue;

    MS_U16 cGreenScaleValue;

    MS_U16 cBlueScaleValue;
} XC_ACE_EX_color_temp_ex2;
# 337 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
typedef struct
{
    MS_U32 u32Version;
    MS_U32 u32Id;
}XC_ACE_DeviceId;

typedef struct __attribute__((packed))
{
    MS_BOOL eWindow;

    MS_S16* S16ColorCorrectionMatrix;
#if !defined (__aarch64__)
    MS_U32 u32AlignmentDummy0;
#endif
    MS_S16* S16RGB;
#if !defined (__aarch64__)
    MS_U32 u32AlignmentDummy1;
#endif
    MS_U16 u16MWEHstart;


    MS_U16 u16MWEVstart;

    MS_U16 u16MWEWidth;

    MS_U16 u16MWEHeight;

    MS_U16 u16MWE_Disp_Hstart;

    MS_U16 u16MWE_Disp_Vstart;

    MS_U16 u16MWE_Disp_Width;

    MS_U16 u16MWE_Disp_Height;

    MS_BOOL bMWE_Enable;
} XC_ACE_EX_InitData;




typedef struct
{

} XC_ACE_EX_ApiInfo;




typedef struct DLL_PACKED
{

    XC_ACE_EX_InitData ACEinit;
} XC_ACE_EX_ApiStatus;





typedef enum
{

    E_ACE_EX_DNR_NR_ONOFF,

    E_ACE_EX_DNR_SNR,

    E_ACE_EX_DNR_SPIKE_NR_0,

    E_ACE_EX_DNR_SPIKE_NR_1,

    E_ACE_EX_DNR_GRAY_GROUND_GAIN,

    E_ACE_EX_DNR_GRAY_GROUND_EN,

    E_ACE_EX_DNR_PEAKING_BANK_CORING,

    E_ACE_EX_DNR_GUASSIN_SNR_THRESHOLD,

    E_ACE_EX_DNR_MOTION,

    E_ACE_EX_DNR_PEAKING_CORING_THRESHOLD,

    E_ACE_EX_DNR_SHARPNESS_ADJUST,

    E_ACE_EX_DNR_NM_V,

    E_ACE_EX_DNR_GNR_0,

    E_ACE_EX_DNR_GNR_1,

    E_ACE_EX_DNR_CP,

    E_ACE_EX_DNR_DP,

    E_ACE_EX_DNR_NM_H_0,

    E_ACE_EX_DNR_NM_H_1,

    E_ACE_EX_DNR_SC_CORING,

    E_ACE_EX_DNR_SNR_NM,
}XC_ACE_EX_DNR_Param;

typedef enum
{
    E_ACE_EX_IHC_COLOR_R,
    E_ACE_EX_IHC_COLOR_G,
    E_ACE_EX_IHC_COLOR_B,
    E_ACE_EX_IHC_COLOR_C,
    E_ACE_EX_IHC_COLOR_M,
    E_ACE_EX_IHC_COLOR_Y,
    E_ACE_EX_IHC_COLOR_F,
    E_ACE_EX_IHC_COLOR_MAX,
}XC_ACE_EX_IHC_COLOR_TYPE;

#define ACE_EX_INFOEX_MODE_POST_RGB_GAIN 0x1
#define ACE_EX_INFOEX_MODE_POST_RGB_OFFSET 0x2
typedef struct
{
    MS_U32 u32Mode;
    MS_U32 u32Reserved;
}XC_ACE_EX_InfoEx;




#define ACE_EX_TABINFO_VERSION 0

#define ACE_EX_TABINFO_REG_ADDR_SIZE (2)
#define ACE_EX_TABINFO_REG_MASK_SIZE (1)
#define ACE_EX_TABINFO_REG_DATA_SIZE (2)

typedef struct
{
    MS_U8 *pTable;
    MS_U8 u8TabCols;
    MS_U8 u8TabRows;
    MS_U8 u8TabIdx;
    MS_U32 u32ACE_TabInfo_version;
}XC_ACE_EX_TAB_Info;





typedef enum
{
    E_ACE_EX_WEAVETYPE_NONE = 0x00,
    E_ACE_EX_WEAVETYPE_H = 0x01,
    E_ACE_EX_WEAVETYPE_V = 0x02,
    E_ACE_EX_WEAVETYPE_DUALVIEW = 0x04,
    E_ACE_EX_WEAVETYPE_NUM,
}XC_ACE_EX_WEAVETYPE;




#define XC_ACE_EX_BYPASS_COLOR_GAIN 128
# 507 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_Init(XC_ACE_DeviceId *pDeviceId, XC_ACE_EX_InitData *pstXC_ACE_InitData, MS_U32 u32InitDataLen);






DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_Exit(XC_ACE_DeviceId *pDeviceId);






DLL_PUBLIC void MApi_XC_ACE_EX_DMS(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bisATV);






DLL_PUBLIC void MApi_XC_ACE_EX_SetPCYUV2RGB(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bEnable);
# 537 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC void MApi_XC_ACE_EX_SelectYUVtoRGBMatrix(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U8 ucMatrix, MS_S16* psUserYUVtoRGBMatrix);






DLL_PUBLIC void MApi_XC_ACE_EX_SetColorCorrectionTable( XC_ACE_DeviceId *pDeviceId, MS_BOOL bScalerWin);






DLL_PUBLIC void MApi_XC_ACE_EX_SetPCsRGBTable( XC_ACE_DeviceId *pDeviceId, MS_BOOL bScalerWin);






DLL_PUBLIC void MApi_XC_ACE_EX_GetColorMatrix( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U16* pu16Matrix);






DLL_PUBLIC void MApi_XC_ACE_EX_SetColorMatrix( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U16* pu16Matrix);






DLL_PUBLIC E_XC_ACE_EX_RESULT MApi_XC_ACE_EX_SetBypassColorMatrix(XC_ACE_DeviceId *pDeviceId, MS_BOOL bEnable );







DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_SetIHC(XC_ACE_DeviceId *pDeviceId, MS_BOOL bScalerWin, XC_ACE_EX_IHC_COLOR_TYPE eIHC, MS_U8 u8Val);





DLL_PUBLIC void MApi_XC_ACE_EX_PatchDTGColorChecker( XC_ACE_DeviceId *pDeviceId, MS_U8 u8Mode);
# 595 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_U16 MApi_XC_ACE_EX_GetACEInfo( XC_ACE_DeviceId *pDeviceId, MS_BOOL bWindow, E_XC_ACE_EX_INFOTYPE eXCACEInfoType );







DLL_PUBLIC void MApi_XC_ACE_EX_GetACEInfoEx( XC_ACE_DeviceId *pDeviceId, MS_BOOL bWindow, XC_ACE_EX_InfoEx *pInfoEx);
# 614 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC void MApi_XC_ACE_EX_PicSetContrast( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bUseYUVSpace, MS_U8 u8Contrast);







DLL_PUBLIC void MApi_XC_ACE_EX_PicSetBrightness( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U8 u8Brightness_R, MS_U8 u8Brightness_G, MS_U8 u8Brightness_B);







DLL_PUBLIC void MApi_XC_ACE_EX_PicSetBrightnessPrecise(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U16 u16Brightness_R, MS_U16 u16Brightness_G, MS_U16 u16Brightness_B);






DLL_PUBLIC E_XC_ACE_EX_RESULT MApi_XC_ACE_EX_PicSetPreYOffset(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U8 u8PreYOffset);






DLL_PUBLIC MS_U8 MApi_XC_ACE_EX_PicGetPreYOffset(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow);







DLL_PUBLIC void MApi_XC_ACE_EX_PicSetHue( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bUseYUVSpace, MS_U8 u8Hue );






DLL_PUBLIC E_XC_ACE_EX_RESULT MApi_XC_ACE_EX_SkipWaitVsync( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow,MS_BOOL bIsSkipWaitVsyn);







DLL_PUBLIC void MApi_XC_ACE_EX_PicSetSaturation(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bUseYUVSpace, MS_U8 u8Saturation );







DLL_PUBLIC void MApi_XC_ACE_EX_PicSetSharpness( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U8 u8Sharpness );







DLL_PUBLIC void MApi_XC_ACE_EX_PicSetColorTemp( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_EX_color_temp* pstColorTemp);






DLL_PUBLIC void MApi_XC_ACE_EX_PicSetColorTempEx( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_EX_color_temp_ex* pstColorTemp);







DLL_PUBLIC void MApi_XC_ACE_EX_PicSetPostColorTemp_V02(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, XC_ACE_EX_color_temp_ex2* pstColorTemp);

#ifndef _API_XC_ACE_EX_C_

#ifndef EX_ENABLE_NEW_COLORTEMP_METHOD
  #define EX_ENABLE_NEW_COLORTEMP_METHOD 0
#endif

#ifndef EX_ENABLE_PRECISE_RGBBRIGHTNESS
  #define EX_ENABLE_PRECISE_RGBBRIGHTNESS 0
#endif

#if EX_ENABLE_NEW_COLORTEMP_METHOD
    #if EX_ENABLE_PRECISE_RGBBRIGHTNESS
        #define MApi_XC_ACE_EX_PicSetColorTemp(pDeviceId, x, y, z) MApi_XC_ACE_EX_PicSetPostColorTemp2Ex(pDeviceId, x, y, z)
    #else
        #define MApi_XC_ACE_EX_PicSetColorTemp(pDeviceId, x, y, z) MApi_XC_ACE_EX_PicSetPostColorTemp2(pDeviceId, x, y, z)
    #endif
#else
    #if EX_ENABLE_PRECISE_RGBBRIGHTNESS
        #define MApi_XC_ACE_EX_PicSetColorTemp(pDeviceId, x, y, z) MApi_XC_ACE_EX_PicSetColorTempEx(pDeviceId, x, y, z)
    #endif
#endif

#define MApi_XC_ACE_EX_PicSetBrightnessInVsync(pDeviceId,bWin,x,y,z) {MApi_XC_EX_WaitOutputVSync(pDeviceId, 2, 100, bWin); MApi_XC_ACE_EX_PicSetBrightness(pDeviceId, bWin, x, y, z);}
#define MApi_XC_ACE_EX_PicSetBrightnessPreciseInVsync(pDeviceId,bWin,x,y,z) {MApi_XC_EX_WaitOutputVSync(pDeviceId, 2, 100, bWin); MApi_XC_ACE_EX_PicSetBrightnessPrecise(pDeviceId, bWin, x, y, z);}

#endif







DLL_PUBLIC void MApi_XC_ACE_EX_SetFleshTone(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bEn, MS_U8 u8FleshTone);






DLL_PUBLIC void MApi_XC_ACE_EX_SetBlackAdjust(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_U8 u8BlackAdjust);






DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_Set_IHC_SRAM(XC_ACE_DeviceId *pDeviceId, MS_U16 *pBuf, MS_U16 u16ByteSize);






DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_Set_ICC_SRAM(XC_ACE_DeviceId *pDeviceId, MS_U16 *pBuf, MS_U16 u16ByteSize);
# 764 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC void MApi_XC_ACE_EX_EnableMWE(XC_ACE_DeviceId *pDeviceId, MS_BOOL bEnable);




DLL_PUBLIC void MApi_XC_ACE_EX_MWECloneVisualEffect(XC_ACE_DeviceId *pDeviceId);




DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_MWESetRegTable(XC_ACE_DeviceId *pDeviceId, XC_ACE_EX_TAB_Info *pMWETable);





DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_SetMWELoadFromPQ(XC_ACE_DeviceId *pDeviceId, MS_BOOL bEnable);





DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_MWEStatus(XC_ACE_DeviceId *pDeviceId);




DLL_PUBLIC void MApi_XC_ACE_EX_MWEHandle( XC_ACE_DeviceId *pDeviceId );






DLL_PUBLIC void MApi_XC_ACE_EX_MWEFuncSel( XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, E_XC_ACE_EX_MWE_FUNC mwe_func);
# 807 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC void MApi_XC_ACE_EX_MWESetDispWin(XC_ACE_DeviceId *pDeviceId, MS_U16 u16MWE_Disp_Hstart, MS_U16 u16MWE_Disp_Vstart, MS_U16 u16MWE_Disp_Width, MS_U16 u16MWE_Disp_Height);





DLL_PUBLIC void MApi_XC_ACE_EX_3DClonePQMap(XC_ACE_DeviceId *pDeviceId, XC_ACE_EX_WEAVETYPE enWeaveType);
# 828 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC void MApi_XC_ACE_EX_DNR_Blending_NRTbl(XC_ACE_DeviceId *pDeviceId, MS_U8 *pu8NewNR, MS_U8 u8Weight, MS_U8 u8Step, MS_U16 *pu16PreY0, MS_U16 *pu16PreY1, MS_U8 *pu8NRTBL);
# 838 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_U16 MApi_XC_ACE_EX_DNR_Blending_MISC(XC_ACE_DeviceId *pDeviceId, MS_U8 u8NewItem, MS_U16 u16PreItem, MS_U8 u8Weight, MS_U8 u8Step);
# 847 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_U8 MApi_XC_ACE_EX_DNR_Blending(XC_ACE_DeviceId *pDeviceId, MS_U8 u8NewItem, MS_U16 u16PreItem, MS_U8 u8Weight);





DLL_PUBLIC MS_U16 MApi_XC_ACE_EX_DNR_Get_PrecisionShift(XC_ACE_DeviceId *pDeviceId);
# 865 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_U8 MApi_XC_ACE_EX_DNR_GetMotion_Weight(XC_ACE_DeviceId *pDeviceId, MS_U8 u8CurMotion, MS_U8 u8PreMotion, MS_U8 u8CurMotionLvl, MS_U8 u8PreMotionLvl, MS_U8 u8DeFlick_Thre, MS_U8 u8DeFilick_Step);
# 877 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_U8 MApi_XC_ACE_EX_DNR_GetLuma_Weight(XC_ACE_DeviceId *pDeviceId, MS_U8 u8CurAvgLuma, MS_U8 u8PreAvgLuam, MS_U8 u8CurLumaLvl, MS_U8 u8PreLumaLvl, MS_U8 u8DeFlick_Th, MS_U8 u8DeFlick_Step);
# 890 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_U8 MApi_XC_ACE_EX_DNR_GetNoise_Weight(XC_ACE_DeviceId *pDeviceId, MS_U8 u8CurNoise, MS_U8 u8PreNoise, MS_U8 u8Range, MS_U8 u8DeFlick_Th, MS_U8 u8DeFlick_Step);





DLL_PUBLIC MS_U8 MApi_XC_ACE_EX_DNR_GetMotion(XC_ACE_DeviceId *pDeviceId);




DLL_PUBLIC void MApi_XC_ACE_EX_DNR_Init_Motion(XC_ACE_DeviceId *pDeviceId);




DLL_PUBLIC void MApi_XC_ACE_EX_DNR_Init_Luma(XC_ACE_DeviceId *pDeviceId);




DLL_PUBLIC void MApi_XC_ACE_EX_DNR_Init_Noise(XC_ACE_DeviceId *pDeviceId);







DLL_PUBLIC void MApi_XC_ACE_EX_DNR_SetParam(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, XC_ACE_EX_DNR_Param eParam, MS_U16 u16val);







DLL_PUBLIC MS_U8 MApi_XC_ACE_EX_DNR_GetParam(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, XC_ACE_EX_DNR_Param eParam);





DLL_PUBLIC void MApi_XC_ACE_EX_DNR_SetNRTbl(XC_ACE_DeviceId *pDeviceId, MS_U8 *pu8Tbl);







DLL_PUBLIC E_XC_ACE_EX_RESULT MApi_XC_ACE_EX_GetLibVer(const MSIF_Version **ppVersion);





const XC_ACE_EX_ApiInfo * MApi_XC_ACE_EX_GetInfo(XC_ACE_DeviceId *pDeviceId);
# 956 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_GetStatus(XC_ACE_DeviceId *pDeviceId, XC_ACE_EX_ApiStatus *pDrvStatus, MS_BOOL bWindow);






DLL_PUBLIC MS_BOOL MApi_XC_ACE_EX_SetDbgLevel(MS_U16 u16DbgSwitch);


DLL_PUBLIC void MApi_XC_ACE_EX_ColorCorrectionTable( XC_ACE_DeviceId *pDeviceId, MS_BOOL bScalerWin, MS_S16 *psColorCorrectionTable );

DLL_PUBLIC void MApi_XC_ACE_EX_SetColorMatrixControl( XC_ACE_DeviceId *pDeviceId, MS_BOOL bScalerWin, MS_BOOL bEnable );
DLL_PUBLIC void MApi_XC_ACE_EX_SetRBChannelRange( XC_ACE_DeviceId *pDeviceId, MS_BOOL bScalerWin, MS_BOOL bRange );
# 979 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Ace_EX.h"
DLL_PUBLIC void MApi_XC_ACE_EX_PicSetPostColorTemp(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, XC_ACE_EX_color_temp* pstColorTemp);




DLL_PUBLIC void MApi_XC_ACE_EX_PicSetPostColorTempEx(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, XC_ACE_EX_color_temp_ex* pstColorTemp);




DLL_PUBLIC void MApi_XC_ACE_EX_PicSetPostColorTemp2(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_EX_color_temp* pstColorTemp);




DLL_PUBLIC void MApi_XC_ACE_EX_PicSetPostColorTemp2Ex(XC_ACE_DeviceId *pDeviceId, MS_BOOL eWindow, MS_BOOL bUseYUVSpace, XC_ACE_EX_color_temp_ex* pstColorTemp);



#ifdef __cplusplus
}
#endif

#endif
# 154 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#ifndef _MS_OS_H_
#define _MS_OS_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#if defined(MSOS_TYPE_LINUX_KERNEL)
#include <linux/kernel.h>
#include <linux/interrupt.h>
#include <linux/irq.h>
#endif
#include "UFO.h"
#include "MsTypes.h"
#include "MsIRQ.h"



#define MSIF_MSOS_LIB_CODE {'M','S','O','S'}
#define MSIF_MSOS_LIBVER {'0','1'}
#define MSIF_MSOS_BUILDNUM {'0','1'}
#define MSIF_MSOS_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define MSOS_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_MSOS_LIB_CODE, \
    MSIF_MSOS_LIBVER, \
    MSIF_MSOS_BUILDNUM, \
    MSIF_MSOS_CHANGELIST, \
    MSIF_OS

#define MSOS_TASK_MAX (32+120)
#define MSOS_MEMPOOL_MAX (8+64)
#define MSOS_FIXSIZE_MEMPOOL_MAX (8)
#define MSOS_SEMAPHORE_MAX (32+150)
#define MSOS_MUTEX_MAX (64+240)
#ifdef CONFIG_MSOS_EVENTGROUP_MAX_SEL
#define MSOS_EVENTGROUP_MAX (CONFIG_MSOS_EVENTGROUP_MAX_NUM)
#else
#define MSOS_EVENTGROUP_MAX (64)
#endif
#define MSOS_TIMER_MAX (32)
#define MSOS_QUEUE_MAX (16+60)
#define MSOS_CONDITION_MAX (64+240)

#define MSOS_OS_MALLOC (0x7654FFFF)
#define MSOS_MALLOC_ID (0x0000FFFF)

#if defined(__MIPS16E__)
#define ATTRIBUTE __attribute__((nomips16))
#else
#define ATTRIBUTE 
#endif





#define TICK_PER_ONE_MS (1)
#define MSOS_WAIT_FOREVER (0xffffff00/TICK_PER_ONE_MS)

#ifdef MSOS_PERF_DEBUG
#define MSOS_PERF_PROFILE_DECL() MS_U32 u32time1=0, u32time2=0
#define MSOS_PERF_PROFILE_ON() u32time1 = MsOS_GetSystemTime()
#define MSOS_PERF_PROFILE_OFF() u32time2 = MsOS_GetSystemTime(); \
                                  printf("[MSOS_DBG]%s:%d takes %6dms\n",__FILE__, __LINE__, u32time2-u32time1)
#else
#define MSOS_PERF_PROFILE_DECL() 
#define MSOS_PERF_PROFILE_ON() 
#define MSOS_PERF_PROFILE_OFF() 
#endif

#define MSOS_CACHE_BOTH 0
#define MSOS_NON_CACHE_BOTH 1
#define MSOS_CACHE_USERSPACE 2
#define MSOS_NON_CACHE_USERSPACE 3
#define MSOS_CACHE_KERNEL 4
#define MSOS_NON_CACHE_KERNEL 5




#define MSOS_BRANCH_PREDICTION_LIKELY(x) __builtin_expect(!!(x), 1)
#define MSOS_BRANCH_PREDICTION_UNLIKELY(x) __builtin_expect(!!(x), 0)




#if defined (MSOS_TYPE_ECOS) || defined (MSOS_TYPE_LINUX) || defined (MSOS_TYPE_NOS) || defined (MSOS_TYPE_UCOS) || defined (MSOS_TYPE_NUTTX) || defined (MSOS_TYPE_OPTEE)


typedef void ( *TaskEntry ) (MS_VIRT argc, void *argv);
typedef void ( *InterruptCb ) (InterruptNum eIntNum);
typedef void ( *SignalCb ) (MS_U32 u32Signals);
typedef void ( *TimerCb ) (MS_U32 u32StTimer, MS_U32 u32TimerID);

typedef struct {
    volatile MS_S32 s32Value;
} MsOS_Atomic;


#ifdef MSOS_TYPE_UCOS

typedef enum
{
    E_TASK_PRI_SYS = 0,
    E_TASK_PRI_HIGHEST = 16,
    E_TASK_PRI_HIGH = 32,
    E_TASK_PRI_MEDIUM = 48,
    E_TASK_PRI_LOW = 64,
    E_TASK_PRI_LOWEST = 96,
} TaskPriority;
#elif defined(MSOS_TYPE_NUTTX)

typedef enum
{
 E_TASK_PRI_SYS = 255,
 E_TASK_PRI_HIGHEST = 255,
 E_TASK_PRI_HIGH = 178,
 E_TASK_PRI_MEDIUM = 100,
 E_TASK_PRI_LOW = 50,
 E_TASK_PRI_LOWEST = 1,
} TaskPriority;
#else

typedef enum
{
    E_TASK_PRI_SYS = 0,
    E_TASK_PRI_HIGHEST = 4,
    E_TASK_PRI_HIGH = 8,
    E_TASK_PRI_MEDIUM = 12,
    E_TASK_PRI_LOW = 16,
    E_TASK_PRI_LOWEST = 24,
} TaskPriority;
#endif


typedef enum
{
    E_TASK_INVALID_INFO = 0,
    E_TASK_RUNNING = 1,
    E_TASK_NOT_EXIST = 2,
    E_TASK_INVALID_STATE = 3,
} TaskStatus;


typedef enum
{
    E_MSOS_PRIORITY,
    E_MSOS_FIFO,
} MsOSAttribute;


typedef enum
{
    E_MSG_FIXED_SIZE,
    E_MSG_VAR_SIZE,
} MessageType;


typedef enum
{
    E_AND,
    E_OR,
    E_AND_CLEAR,
    E_OR_CLEAR,
} EventWaitMode;

typedef enum
{
    E_IRQ_DISABLE = 0,
    E_IRQ_ENABLE = 1,
    E_IRQ_ACK = 2,
 E_IRQ_COMPLETE = 3,
    E_IRQ_DEBUG_STATUS_FLOW = 4,
    E_IRQ_DEBUG_DISABLE = 1 << 31,
} IrqDebugOpt;

typedef struct
{
    MS_S32 iId;
    MS_U32 uPoolSize;
    MS_U32 u32MinAllocation;
    MS_U32 u32Addr;
    MsOSAttribute eAttribute;
    char szName[16];
} MemoryPool_Info, *PMemoryPool_Info;

typedef struct
{
    MS_S32 iId;
    TaskPriority ePriority;
    void *pStack;
    MS_U32 u32StackSize;
    char szName[16];
} Task_Info, *PTask_Info;

#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
typedef struct
{
        unsigned int LX_MEM_ADDR;
        unsigned int LX_MEM_LENGTH;
        unsigned int LX_MEM2_ADDR;
        unsigned int LX_MEM2_LENGTH;
        unsigned int EMAC_ADDR;
        unsigned int EMAC_LENGTH;
        unsigned int DRAM_ADDR;
        unsigned int DRAM_LENGTH;
        unsigned int BB_ADDR;
        unsigned int BB_LENGTH;
        unsigned int MPOOL_MEM_ADDR;
        unsigned int MPOOL_MEM_LENGTH;
        unsigned int G3D_MEM0_ADDR;
        unsigned int G3D_MEM0_LENGTH;
        unsigned int G3D_MEM1_ADDR;
        unsigned int G3D_MEM1_LENGTH;
        unsigned int G3D_CMDQ_ADDR;
        unsigned int G3D_CMDQ_LENGTH;
}IO_Sys_Info_t;
#else
typedef struct
{
        unsigned long long LX_MEM_ADDR;
        unsigned long long LX_MEM_LENGTH;
        unsigned long long LX_MEM2_ADDR;
        unsigned long long LX_MEM2_LENGTH;
        unsigned long long EMAC_ADDR;
        unsigned long long EMAC_LENGTH;
        unsigned long long DRAM_ADDR;
        unsigned long long DRAM_LENGTH;
        unsigned long long BB_ADDR;
        unsigned long long BB_LENGTH;
        unsigned long long MPOOL_MEM_ADDR;
        unsigned long long MPOOL_MEM_LENGTH;
        unsigned long long G3D_MEM0_ADDR;
        unsigned long long G3D_MEM0_LENGTH;
        unsigned long long G3D_MEM1_ADDR;
        unsigned long long G3D_MEM1_LENGTH;
        unsigned long long G3D_CMDQ_ADDR;
        unsigned long long G3D_CMDQ_LENGTH;
}IO_Sys_Info_t;
#endif
typedef struct
{
        unsigned int LX_MEM_ADDR;
        unsigned int LX_MEM_LENGTH;
        unsigned int LX_MEM2_ADDR;
        unsigned int LX_MEM2_LENGTH;
        unsigned int LX_MEM3_ADDR;
        unsigned int LX_MEM3_LENGTH;
        unsigned int LX_MEM4_ADDR;
        unsigned int LX_MEM4_LENGTH;
        unsigned int LX_MEM5_ADDR;
        unsigned int LX_MEM5_LENGTH;
        unsigned int EMAC_ADDR;
        unsigned int EMAC_LENGTH;
        unsigned int DRAM_ADDR;
        unsigned int DRAM_LENGTH;
        unsigned int BB_ADDR;
        unsigned int BB_LENGTH;
        unsigned int MPOOL_MEM_ADDR;
        unsigned int MPOOL_MEM_LENGTH;
        unsigned int G3D_MEM0_ADDR;
        unsigned int G3D_MEM0_LENGTH;
        unsigned int G3D_MEM1_ADDR;
        unsigned int G3D_MEM1_LENGTH;
        unsigned int G3D_CMDQ_ADDR;
        unsigned int G3D_CMDQ_LENGTH;
}IO_Sys_Info_t_EX;

typedef struct
{
    unsigned int u32Addr;
    unsigned int u32Size;
    unsigned int u32Interval;
    unsigned char u8MiuSel;
    unsigned int bcached;
} KDrvMPool_Info_t;

#elif defined (MSOS_TYPE_LINUX_KERNEL)




typedef void ( *TaskEntry ) (MS_U32 argc, void *argv);
typedef void ( *InterruptCb ) (InterruptNum eIntNum);
typedef void ( *SignalCb ) (MS_U32 u32Signals);
typedef void ( *TimerCb ) (MS_U32 u32StTimer, MS_U32 u32TimerID);

#if 0
typedef enum
{
    E_IRQ_DISABLE = 0 << 0,
 E_IRQ_ENABLE = 1 << 0,
 E_IRQ_ACK = 1 << 1,
 E_IRQ_DEBUG_STATUS_FLOW = 1 << 2,
 E_IRQ_DEBUG_DISABLE = 1 << 31,
} IrqDebugOpt;
#endif


typedef enum
{
    E_TASK_PRI_SYS = 0,
    E_TASK_PRI_HIGHEST = 4,
    E_TASK_PRI_HIGH = 8,
    E_TASK_PRI_MEDIUM = 12,
    E_TASK_PRI_LOW = 16,
    E_TASK_PRI_LOWEST = 24,
} TaskPriority;


typedef enum
{
    E_TASK_INVALID_INFO = 0,
    E_TASK_RUNNING = 1,
    E_TASK_NOT_EXIST = 2,
    E_TASK_INVALID_STATE = 3,
} TaskStatus;


typedef enum
{
    E_MSOS_PRIORITY,
    E_MSOS_FIFO,
} MsOSAttribute;


typedef enum
{
    E_MSG_FIXED_SIZE,
    E_MSG_VAR_SIZE,
} MessageType;


typedef enum
{
    E_AND,
    E_OR,
    E_AND_CLEAR,
    E_OR_CLEAR,
} EventWaitMode;

typedef struct
{
    MS_S32 iId;
    MS_U32 uPoolSize;
    MS_U32 u32MinAllocation;
    MS_U32 u32Addr;
    MsOSAttribute eAttribute;
    char szName[16];
} MemoryPool_Info, *PMemoryPool_Info;

typedef struct
{
    MS_S32 iId;
    TaskPriority ePriority;
    void *pStack;
    MS_U32 u32StackSize;
    char szName[16];
} Task_Info, *PTask_Info;

typedef struct
{
        unsigned int LX_MEM_ADDR;
        unsigned int LX_MEM_LENGTH;
        unsigned int LX_MEM2_ADDR;
        unsigned int LX_MEM2_LENGTH;
        unsigned int EMAC_ADDR;
        unsigned int EMAC_LENGTH;
        unsigned int DRAM_ADDR;
        unsigned int DRAM_LENGTH;
        unsigned int BB_ADDR;
        unsigned int BB_LENGTH;
        unsigned int MPOOL_MEM_ADDR;
        unsigned int MPOOL_MEM_LENGTH;
        unsigned int G3D_MEM0_ADDR;
        unsigned int G3D_MEM0_LENGTH;
        unsigned int G3D_MEM1_ADDR;
        unsigned int G3D_MEM1_LENGTH;
        unsigned int G3D_CMDQ_ADDR;
        unsigned int G3D_CMDQ_LENGTH;
}IO_Sys_Info_t;

typedef struct
{
        unsigned int LX_MEM_ADDR;
        unsigned int LX_MEM_LENGTH;
        unsigned int LX_MEM2_ADDR;
        unsigned int LX_MEM2_LENGTH;
        unsigned int LX_MEM3_ADDR;
        unsigned int LX_MEM3_LENGTH;
        unsigned int LX_MEM4_ADDR;
        unsigned int LX_MEM4_LENGTH;
        unsigned int LX_MEM5_ADDR;
        unsigned int LX_MEM5_LENGTH;
        unsigned int EMAC_ADDR;
        unsigned int EMAC_LENGTH;
        unsigned int DRAM_ADDR;
        unsigned int DRAM_LENGTH;
        unsigned int BB_ADDR;
        unsigned int BB_LENGTH;
        unsigned int MPOOL_MEM_ADDR;
        unsigned int MPOOL_MEM_LENGTH;
        unsigned int G3D_MEM0_ADDR;
        unsigned int G3D_MEM0_LENGTH;
        unsigned int G3D_MEM1_ADDR;
        unsigned int G3D_MEM1_LENGTH;
        unsigned int G3D_CMDQ_ADDR;
        unsigned int G3D_CMDQ_LENGTH;
}IO_Sys_Info_t_EX;

typedef struct
{
    unsigned int u32Addr;
    unsigned int u32Size;
    unsigned int u32Interval;
    unsigned char u8MiuSel;
    unsigned int bcached;
} KDrvMPool_Info_t;

typedef struct
{
   MS_U32 mpool_base;
   MS_U32 mpool_size;
   MS_U32 mmap_offset;
   MS_U32 mmap_size;
   MS_U32 mmap_interval;
   MS_U8 mmap_miusel;
   unsigned int u8MapCached;
   MS_BOOL setflag;
}MMAP_FileData;

#elif defined (MSOS_TYPE_XXX)

#error "The OS is not supported now ..."

#endif
# 612 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_Init (void);







MS_BOOL MsOS_Init_str (void);







MS_BOOL MsOS_Init_Fastboot (void);
# 642 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_CreateMemoryPool (MS_U32 u32PoolSize,
                              MS_U32 u32MinAllocation,
                              void * pPoolAddr,
                              MsOSAttribute eAttribute,
                              char *pPoolName);
# 655 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DeleteMemoryPool (MS_S32 s32PoolId);
# 668 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_InfoMemoryPool (MS_S32 s32PoolId,
                             void **pPoolAddr,
                             MS_U32 *pu32PoolSize,
                             MS_U32 *pu32FreeSize,
                             MS_U32 *pu32LargestFreeBlockSize);
# 682 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void * MsOS_AllocateMemory (MS_U32 u32Size, MS_S32 s32PoolId);
# 695 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void * MsOS_ReallocateMemory (void *pOrgAddress, MS_U32 u32NewSize, MS_S32 s32PoolId);
# 705 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_FreeMemory (void *pAddress, MS_S32 s32PoolId);





MS_S32 MsOS_CreateFixSizeMemoryPool (MS_U32 u32PoolSize,
                                     MS_U32 u32BlockSize,
                                     void * pPoolAddr,
                                     MsOSAttribute eAttribute,
                                     char *pPoolName);





MS_BOOL MsOS_DeleteFixSizeMemoryPool (MS_S32 s32PoolId);





MS_BOOL MsOS_InfoFixSizeMemoryPool (MS_S32 s32PoolId,
                                    void **pPoolAddr,
                                    MS_U32 *pu32PoolSize,
                                    MS_U32 *pu32FreeSize,
                                    MS_U32 *pu32LargestFreeBlockSize);





void * MsOS_AllocateFixSizeMemory (MS_S32 s32PoolId);





MS_BOOL MsOS_FreeFixSizeMemory (void *pAddress, MS_S32 s32PoolId);
# 759 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_CreateTask (TaskEntry pTaskEntry,
                        MS_VIRT u32TaskEntryData,
                        TaskPriority eTaskPriority,
                        MS_BOOL bAutoStart,
                        void * pStackEntry,
                        MS_U32 u32StackSize,
                        char *pTaskName);
# 774 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DeleteTask (MS_S32 s32TaskId);






void MsOS_YieldTask (void);
# 790 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void MsOS_DelayTask (MS_U32 u32Ms);
# 799 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void MsOS_DelayTaskUs (MS_U32 u32Us);
# 808 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void MsOS_DelayTaskUs_Poll(MS_U32 u32Us);
# 818 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_ResumeTask (MS_S32 s32TaskId);
# 828 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_SuspendTask (MS_S32 s32TaskId);







MS_S32 MsOS_InfoTaskID (void);
# 846 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_GetTaskStatus (Task_Info* pTaskInfo, TaskStatus *peTaskState);
# 856 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_GetOSThreadID (void);




#define MSOS_PROCESS_PRIVATE 0x00000000
#define MSOS_PROCESS_SHARED 0x00000001
#define MAX_MUTEX_NAME_LENGTH 50
# 876 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_CreateMutex ( MsOSAttribute eAttribute, char *pMutexName, MS_U32 u32Flag);
# 887 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DeleteMutex (MS_S32 s32MutexId);
# 897 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_ObtainMutex (MS_S32 s32MutexId, MS_U32 u32WaitMs);
# 907 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_ReleaseMutex (MS_S32 s32MutexId);
# 917 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_EnableCrossThreadReleaseMutex (MS_S32 s32MutexId, MS_BOOL bEnable);
# 928 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_InfoMutex (MS_S32 s32MutexId, MsOSAttribute *peAttribute, char *pMutexName);
# 941 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_CreateSemaphore (MS_U32 u32InitCnt,
                             MsOSAttribute eAttribute,
                             char *pName);
# 954 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DeleteSemaphore (MS_S32 s32SemaphoreId);
# 964 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_ObtainSemaphore (MS_S32 s32SemaphoreId, MS_U32 u32WaitMs);
# 974 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_ReleaseSemaphore (MS_S32 s32SemaphoreId);
# 986 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_InfoSemaphore (MS_S32 s32SemaphoreId, MS_U32 *pu32Cnt, MsOSAttribute *peAttribute, char *pSemaphoreName);
# 995 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_CreateEventGroup (char *pName);
# 1005 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DeleteEventGroup (MS_S32 s32EventGroupId);
# 1015 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_SetEvent (MS_S32 s32EventGroupId, MS_U32 u32EventFlag);
# 1025 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_ClearEvent (MS_S32 s32EventGroupId, MS_U32 u32EventFlag);
# 1038 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_WaitEvent (MS_S32 s32EventGroupId,
                        MS_U32 u32WaitEventFlag,
                        MS_U32 *pu32RetrievedEventFlag,
                        EventWaitMode eWaitMode,
                        MS_U32 u32WaitMs);

MS_S32 MsOS_WaitEvent_Interrupt (MS_S32 s32EventGroupId,
                        MS_U32 u32WaitEventFlag,
                        MS_U32 *pu32RetrievedEventFlag,
                        EventWaitMode eWaitMode,
                        MS_U32 u32WaitMs);
# 1066 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_CreateTimer (TimerCb pTimerCb,
                         MS_U32 u32FirstTimeMs,
                         MS_U32 u32PeriodTimeMs,
                         MS_BOOL bStartTimer,
                         char *pName);
# 1079 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DeleteTimer (MS_S32 s32TimerId);
# 1088 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_StartTimer (MS_S32 s32TimerId);
# 1099 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_StopTimer (MS_S32 s32TimerId);
# 1113 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_ResetTimer (MS_S32 s32TimerId,
                         MS_U32 u32FirstTimeMs,
                         MS_U32 u32PeriodTimeMs,
                         MS_BOOL bStartTimer);






MS_U32 MsOS_GetSystemTime (void);







MS_U32 MsOS_Timer_DiffTimeFromNow(MS_U32 u32TaskTimer);







MS_U32 MsOS_Timer_DiffTime(MS_U32 u32Timer, MS_U32 u32TaskTimer);
# 1156 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_S32 MsOS_CreateQueue (void *pStartAddr,
                         MS_U32 u32QueueSize,
                         MessageType eMessageType,
                         MS_U32 u32MessageSize,
                         MsOSAttribute eAttribute,
                         char *pQueueName);
# 1172 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DeleteQueue (MS_S32 s32QueueId);
# 1184 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_SendToQueue (MS_S32 s32QueueId, MS_U8 *pu8Message, MS_U32 u32Size, MS_U32 u32WaitMs);
# 1197 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_RecvFromQueue (MS_S32 s32QueueId, MS_U8 *pu8Message, MS_U32 u32IntendedSize, MS_U32 *pu32ActualSize, MS_U32 u32WaitMs);
# 1209 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_PeekFromQueue (MS_S32 s32QueueId, MS_U8 *pu8Message, MS_U32 u32IntendedSize, MS_U32 *pu32ActualSize);
# 1219 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_AttachInterrupt (InterruptNum eIntNum, InterruptCb pIntCb);
# 1230 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_AttachInterrupt_Shared (InterruptNum eIntNum, InterruptCb pIntCb);
# 1239 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DetachInterrupt (InterruptNum eIntNum);
# 1248 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_EnableInterrupt (InterruptNum eIntNum);
# 1258 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_DebugInterrupt (InterruptNum eIntNum, IrqDebugOpt eIrqDebugOpt);







MS_BOOL MsOS_DisableInterrupt (InterruptNum eIntNum);







MS_BOOL MsOS_CompleteInterrupt (InterruptNum eIntNum);







MS_BOOL MsOS_In_Interrupt (void);






MS_U32 MsOS_DisableAllInterrupts(void);







MS_BOOL MsOS_RestoreAllInterrupts(MS_U32 u32OldInterrupts);






MS_BOOL MsOS_EnableAllInterrupts(void);



#if defined(__aeon__)
typedef enum {
    E_EXCEPTION_BUS_ERROR = 2,
    E_EXCEPTION_DATA_PAGE_FAULT,
    E_EXCEPTION_INSTRUCTION_PAGE_FAULT,
    E_EXCEPTION_TICK_TIMER,
    E_EXCEPTION_UNALIGNED_ACCESS,
    E_EXCEPTION_ILLEGAL_INSTRUCTION,
    E_EXCEPTION_EXTERNAL_INTERRUPT,
    E_EXCEPTION_DTLB_MISS,
    E_EXCEPTION_ITLB_MISS,
    E_EXCEPTION_RANGE,
    E_EXCEPTION_SYSCALL,
    E_EXCEPTION_RESERVED,
    E_EXCEPTION_TRAP,
    E_EXCEPTION_MAX = E_EXCEPTION_TRAP,
} MHAL_EXCEPTION_TYPE;

typedef enum {
    E_INTERRUPT_TICK_TIMER,
#if defined(MSOS_TYPE_NUTTX)
 E_INTERRUPT_00 = 0,
#else
    E_INTERRUPT_00 = 1,
#endif
 E_INTERRUPT_01,
    E_INTERRUPT_02,
    E_INTERRUPT_03,
    E_INTERRUPT_04,
    E_INTERRUPT_05,
    E_INTERRUPT_06,
    E_INTERRUPT_07,
    E_INTERRUPT_08,
    E_INTERRUPT_09,
    E_INTERRUPT_10,
    E_INTERRUPT_11,
    E_INTERRUPT_12,
    E_INTERRUPT_13,
    E_INTERRUPT_14,
    E_INTERRUPT_15,
    E_INTERRUPT_16,
    E_INTERRUPT_17,
    E_INTERRUPT_18,
    E_INTERRUPT_19,
    E_INTERRUPT_20,
    E_INTERRUPT_21,
    E_INTERRUPT_22,
    E_INTERRUPT_23,
    E_INTERRUPT_24,
    E_INTERRUPT_25,
    E_INTERRUPT_26,
    E_INTERRUPT_27,
    E_INTERRUPT_28,
    E_INTERRUPT_29,
    E_INTERRUPT_30,
    E_INTERRUPT_31,
} MHAL_INTERRUPT_TYPE;


#define E_INTERRUPT_FIQ E_INTERRUPT_02
#define E_INTERRUPT_IRQ E_INTERRUPT_03
#define E_INTERRUPT_UART E_INTERRUPT_19
#define E_INTERRUPT_MAX E_INTERRUPT_31

typedef struct
{
    unsigned long r[32];
#ifdef __AEONR2__
    unsigned long machi2;
#endif
    unsigned long machi;
    unsigned long maclo;


    int vector;
    int sr;
    unsigned long pc;



    unsigned long eear;
} MHAL_SavedRegisters;
#else
typedef enum {
    E_EXCEPTION_DATA_TLBERROR_ACCESS = 1,
    E_EXCEPTION_DATA_TLBMISS_ACCESS,
    E_EXCEPTION_DATA_TLBMISS_WRITE,
    E_EXCEPTION_DATA_UNALIGNED_ACCESS,
    E_EXCEPTION_DATA_UNALIGNED_WRITE,
    E_EXCEPTION_CODE_ACCESS,
    E_EXCEPTION_DATA_ACCESS,
    E_EXCEPTION_SYSTEM_CALL,
    E_EXCEPTION_INSTRUCTION_BP,
    E_EXCEPTION_ILLEGAL_INSTRUCTION,
    E_EXCEPTION_COPROCESSOR,
    E_EXCEPTION_OVERFLOW,
    E_EXCEPTION_RESERVED_13,
    E_EXCEPTION_DIV_BY_ZERO,
    E_EXCEPTION_FPU,
    E_EXCEPTION_MAX = E_EXCEPTION_FPU,
} MHAL_EXCEPTION_TYPE;

typedef enum {
    E_INTERRUPT_02 = 0,
    E_INTERRUPT_03,
    E_INTERRUPT_04,
    E_INTERRUPT_05,
    E_INTERRUPT_06,
    E_INTERRUPT_07,
} MHAL_INTERRUPT_TYPE;


#define E_INTERRUPT_FIQ E_INTERRUPT_03
#define E_INTERRUPT_IRQ E_INTERRUPT_02
#define E_INTERRUPT_TICK_TIMER E_INTERRUPT_07
#define E_INTERRUPT_MAX E_INTERRUPT_07
#define E_EXCEPTION_TRAP E_EXCEPTION_RESERVED_13

typedef struct
{

    unsigned long d[32];
    unsigned long hi;
    unsigned long lo;



    unsigned long sr;


    unsigned long vector;
    unsigned long pc;



    unsigned long cause;
    unsigned long badvr;

} MHAL_SavedRegisters;
#endif

#if defined (__arm__) || defined (__aarch64__)
typedef void (*mhal_isr_t)(void);
#else
#if defined(MSOS_TYPE_NUTTX)
typedef int (*mhal_isr_t)(int irq, void *context);
#else
typedef void (*mhal_isr_t)(MHAL_SavedRegisters *regs, MS_U32 vector);
#endif
#endif






MS_U32 ATTRIBUTE MsOS_CPU_DisableInterrupt (void);






MS_BOOL MsOS_CPU_EnableInterrupt (void);







MS_BOOL MsOS_CPU_RestoreInterrupt (MS_U32 u32OldInterrupts);






MS_BOOL MsOS_CPU_MaskAllInterrupt (void);







MS_BOOL MsOS_CPU_MaskInterrupt (MHAL_INTERRUPT_TYPE intr_num);







MS_BOOL MsOS_CPU_UnMaskInterrupt (MHAL_INTERRUPT_TYPE intr_num);






MS_BOOL MsOS_CPU_LockInterrupt (void);






MS_BOOL MsOS_CPU_UnLockInterrupt (void);
# 1526 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_CPU_AttachInterrupt (MHAL_INTERRUPT_TYPE intr_num, mhal_isr_t isr, MS_U32 dat);
# 1536 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_CPU_DetachInterrupt (MHAL_INTERRUPT_TYPE intr_num);
# 1546 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_CPU_AttachException (MHAL_EXCEPTION_TYPE expt_num, mhal_isr_t isr, MS_U32 dat);
# 1556 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_CPU_DetachExceptiont (MHAL_EXCEPTION_TYPE expt_num);







MS_BOOL MsOS_CPU_SetEBASE (MS_U32 u32Addr);
# 1574 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_Dcache_Flush( MS_VIRT ptrStart, MS_U32 tSize );
#else
MS_BOOL MsOS_Dcache_Flush( MS_VIRT ptrStart, MS_SIZE tSize );
#endif






MS_BOOL MsOS_Dcache_Flush_All(void);
# 1595 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_Dcache_Invalidate( MS_VIRT ptrStart , MS_U32 tSize );
#else
MS_BOOL MsOS_Dcache_Invalidate( MS_VIRT ptrStart , MS_SIZE tSize );
#endif
# 1608 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_Dcache_Writeback( MS_VIRT ptrStart , MS_U32 tSize );
#else
MS_BOOL MsOS_Dcache_Writeback( MS_VIRT ptrStart , MS_SIZE tSize );
#endif
#if defined(CHIP_T12) || defined(CHIP_T8) || defined(CHIP_J2) || defined(CHIP_A2) || defined(CHIP_A5) || defined(CHIP_A3) || defined(CHIP_Edison)







MS_BOOL MsOS_L2Cache_Flush(void);







MS_BOOL MsOS_L2Cache_Read(void);
#endif
# 1641 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void MsOS_Sync(void);

typedef enum
{
    E_MsOSMPool_DBG_Release = 0,
    E_MsOSMPool_DBG_L1,
} MsOSMPool_DbgLevel;
# 1656 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MDrv_SYS_Info(IO_Sys_Info_t* SysInfo);

MS_BOOL MDrv_SYS_Info_EX(IO_Sys_Info_t_EX *SysInfo);







void MsOS_MPool_SetDbgLevel(MsOSMPool_DbgLevel DbgLevel);






MS_BOOL MsOS_MPool_IsInitialized(void);






MS_BOOL MsOS_MPool_Init(void);






MS_BOOL MsOS_ION_IsInitialized(void);






MS_BOOL MsOS_ION_Init(void);
# 1706 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_MPool_Get(void** pAddrVirt, MS_U32* pu32AddrPhys, MS_U32* pu32Size, MS_BOOL bNonCache);







MS_BOOL MsOS_MPool_Close(void);







#ifdef UFO_PUBLIC_HEADER_700
void MsOS_MPool_InfoMsg(void);
#else
void MsOS_MPool_InfoMsg(MS_U8 u8MsgType);
#endif






MS_BOOL MsOS_ION_Close(void);
# 1742 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_PHY MsOS_MPool_VA2PA(MS_VIRT pAddrVirt);
# 1751 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_VIRT MsOS_MPool_PA2KSEG1(MS_PHY pAddrPhys);
# 1760 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_VIRT MsOS_MPool_PA2KSEG0(MS_PHY pAddrPhys);
# 1770 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_MPool_Dcache_Flush(MS_U32 pAddrVirt, MS_U32 u32Size);
#else
MS_BOOL MsOS_MPool_Dcache_Flush(MS_VIRT pAddrVirt, MS_SIZE tSize);
#endif






MS_BOOL MsOS_MPool_Dcache_Flush_All(void);
# 1793 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_700)
MS_BOOL MsOS_MPool_Mapping(MS_U8 u8MiuSel, MS_SIZE tOffset, MS_SIZE tMapSize, MS_U8 u8MapMode);
#elif defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_MPool_Mapping(MS_U8 u8MiuSel, MS_U32 u32Offset, MS_U32 u32MapSize, MS_BOOL bNonCache);
#else
MS_BOOL MsOS_MPool_Mapping(MS_U8 u8MiuSel, MS_SIZE tOffset, MS_SIZE tMapSize, MS_BOOL bNonCache);
#endif
# 1809 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_MPool_UnMapping(MS_U32 u32VirtStart, MS_U32 u32MapSize);
#else
MS_BOOL MsOS_MPool_UnMapping(MS_VIRT ptrVirtStart, MS_SIZE tMapSize);
#endif
# 1825 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_700)
MS_BOOL MsOS_MPool_Mapping_Dynamic(MS_U8 u8MiuSel, MS_SIZE u32Offset, MS_SIZE u32MapSize, MS_U8 u8MapMode);
#elif defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_MPool_Mapping_Dynamic(MS_U8 u8MiuSel, MS_U32 u32Offset, MS_U32 u32MapSize, MS_BOOL bNonCache);
#else
MS_BOOL MsOS_MPool_Mapping_Dynamic(MS_U8 u8MiuSel, MS_SIZE u32Offset, MS_SIZE u32MapSize, MS_BOOL bNonCache);
#endif
# 1842 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_MPool_Kernel_Detect(MS_U32 *lx_addr, MS_U32 *lx_size, MS_U32 *lx2_addr, MS_U32 *lx2_size);
#else
MS_BOOL MsOS_MPool_Kernel_Detect(MS_PHY *lx_addr, MS_U64 *lx_size, MS_PHY *lx2_addr, MS_U64 *lx2_size);
#endif
# 1858 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_MPool_SetWatchPT(MS_VIRT u32Addr, MS_U32 u32ASID, MS_U8 u8Global, MS_U8 u8WType, MS_U32 u32Mask);
# 1867 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_MPool_GetWatchPT(char* str);
# 1878 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_U32 MsOS_ION_Mapping(MS_U32 u32ION_Alloc_Flag, MS_U8 u8ION_FixAddr_MiuSel, MS_U32 u32ION_FixAddrOffset, MS_U32 u32MapSize, MS_U32 u32Driver_Heap_ID, MS_BOOL bNonCache);

#if defined(MSOS_TYPE_LINUX)
#ifdef ENABLE_KERNEL_DLMALLOC
#include "dlmalloc.h"
# 1892 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
mspace MsOS_MPool_CreateMemoryPool(void * base, size_t capacity, int locked);






size_t MsOS_MPool_DeleteMemoryPool(mspace msp);
# 1909 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void * MsOS_MPool_AllocateMemory(mspace msp, size_t bytes);







void MsOS_MPool_FreeMemory(mspace msp, void *free_start_addr);
# 1928 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
void * MsOS_MPool_ReallocateMemory(mspace msp, void *old_alloc_start_addr, size_t bytes);
#endif
#endif

#define MsOS_MPool_PA2VA MsOS_MPool_PA2KSEG1







MS_U32 MsOS_GetSHMSize(void);







MS_VIRT MsOS_Mapping_SharedMem(MS_U32 u32ShmSize,MS_BOOL *bInit);







MS_S32 MsOS_CreateNamedMutex(MS_S8 *ps8MutexName);







#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_LockMutex(MS_S32 u32Index,int flag);
#else
MS_BOOL MsOS_LockMutex(MS_S32 u32Index,MS_S32 flag);
#endif






#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL MsOS_UnlockMutex(MS_S32 u32Index,int flag);
#else
MS_BOOL MsOS_UnlockMutex(MS_S32 u32Index,MS_S32 flag);
#endif






MS_BOOL MsOS_DeleteNamedMutexbyIndex(MS_S32 u32Index);






MS_S32 MsOS_CreateNamedSemaphore(char *ps8SemaName, MS_U32 u32SemaNum);







MS_BOOL MsOS_ObtainNamedSemaphore(MS_S32 u32Index, MS_S32 flag);







MS_BOOL MsOS_ReleaseNamedSemaphore(MS_S32 u32Index, MS_S32 flag);







#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL __attribute__((weak)) MsOS_MPool_Add_PA2VARange(MS_U32 u32PhysAddr, MS_U32 u32VirtAddr, MS_U32 u32MapSize, MS_BOOL bNonCache);
#else
MS_BOOL __attribute__((weak)) MsOS_MPool_Add_PA2VARange(MS_U64 u64PhysAddr, MS_VIRT u64VirtAddr, MS_SIZE u64MapSize, MS_BOOL bNonCache);
#endif







#if defined(UFO_PUBLIC_HEADER_300) || defined(UFO_PUBLIC_HEADER_212)
MS_BOOL __attribute__((weak)) MsOS_MPool_Remove_PA2VARange(MS_U32 u32PhysAddr, MS_U32 u32VirtAddr, MS_U32 u32MapSize, MS_BOOL bNonCache);
#else
MS_BOOL __attribute__((weak)) MsOS_MPool_Remove_PA2VARange(MS_U64 u64PhysAddr, MS_VIRT u64VirtAddr, MS_SIZE u64MapSize, MS_BOOL bNonCache);
#endif

#define MAX_CLIENT_NAME_LENGTH 50UL
#define MSOS_SHM_QUERY 0x00000000UL
#define MSOS_SHM_CREATE 0x00000001UL
# 2046 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_BOOL MsOS_SHM_Init(void);







MS_BOOL MsOS_SHM_GetId(MS_U8* pu8ClientName, MS_U32 u32BufSize, MS_U32* pu32ShmId, MS_VIRT* pu32Addr, MS_U32* pu32BufSize, MS_U32 u32Flag);







MS_BOOL MsOS_SHM_FreeId(MS_U8* pu8ClientName, MS_U32 u32ShmId);
#if defined (MSOS_TYPE_NOS)






MS_BOOL MsOS_MEM_GetId(MS_U8* pu8ClientName, MS_U32 u32BufSize, MS_U32* pu32ShmId, MS_VIRT* pu32Addr, MS_U32* pu32BufSize, MS_U32 u32Flag);
#endif
# 2088 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
#define OS_CREATE_MUTEX(_M_) MsOS_CreateMutex(E_MSOS_FIFO, "OS_"#_M_"_Mutex", MSOS_PROCESS_SHARED)
#define OS_OBTAIN_MUTEX(_mx,_tm) MsOS_ObtainMutex(_mx, _tm)
#define OS_RELEASE_MUTEX(_mx) MsOS_ReleaseMutex(_mx)
#define OS_DELETE_MUTEX(_mx) MsOS_DeleteMutex(_mx)
#define OS_DELAY_TASK(_msec) MsOS_DelayTask(_msec)
#define OS_SYSTEM_TIME() MsOS_GetSystemTime()
#define OS_ENTER_CRITICAL() MsOS_DisableAllInterrupts();
#define OS_EXIT_CRITICAL() MsOS_EnableAllInterrupts();
# 2106 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/MsOS.h"
MS_PHY MsOS_VA2PA(MS_VIRT addr);







MS_VIRT MsOS_PA2KSEG0(MS_PHY addr);







MS_VIRT MsOS_PA2KSEG1(MS_PHY addr);







MS_PHY MsOS_PA2BA(MS_PHY PhyAddr);







MS_PHY MsOS_BA2PA(MS_PHY BusAddr);







void MsOS_FlushMemory(void);







void MsOS_ReadMemory(void);







MS_U32 MsOS_GetKattribute(char *pAttr);

#define MS_VA2PA(_addr_) (MS_PHY)MsOS_VA2PA((_addr_))
#define MS_PA2KSEG0(_addr_) (MS_VIRT)MsOS_PA2KSEG0((_addr_))
#define MS_PA2KSEG1(_addr_) (MS_VIRT)MsOS_PA2KSEG1((_addr_))




#define MS_CRITICAL_MSG(x) x
#define MS_FATAL_MSG(fmt,...) printf( "[MS_FATAL]: %s: %d \n" fmt, __FUNCTION__, __LINE__, ## __VA_ARGS__)


#if defined (MSOS_TYPE_LINUX_KERNEL)
  #define printf(fmt, args...) printk( fmt, ## args)
#endif

#if defined (MS_DEBUG)
  #define MS_DEBUG_MSG(x) x
#elif defined (MS_OPTIMIZE)
  #define MS_DEBUG_MSG(x)
#endif




extern void MsOS_RegMyDbg(void);

typedef MS_BOOL (*UartDbg_IP_CallBack) (int argc, char *argv[]);


typedef struct
{
    const char *Func_Name;
    const char *Func_Help;
    UartDbg_IP_CallBack pCallBack;
} MS_DBG_LINK;


extern MS_BOOL MsOS_Dbg_ParseCmd(char *Cmd, MS_U32 u32CmdLen);


extern MS_BOOL MsOS_Dbg_Regist(const char *Func_Name, const char *Func_Help, MS_DBG_LINK *pAryDbgLink);


extern MS_BOOL MsOS_Dbg_ExecuteSubCB(const char *Func_Name, int argc, char *argv[], MS_DBG_LINK *pAryDbgLink);

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDIP.h"
#ifndef _DRVDIP_H_
#define _DRVDIP_H_ 
# 106 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDIP.h"
#ifdef __cplusplus
extern "C"
{
#endif

#define MAX_NR_BUFF_CNT 2UL
#define MAX_DATA_BUFF_CNT 16UL

typedef struct
{
    MS_U8 u8NR_BufCnt;
    MS_PHY u32NR_RationBuf;
    MS_PHY u32NR_DataBuf[MAX_NR_BUFF_CNT];
    MS_U32 u32NR_BufWidth;
    MS_U32 u32NR_BufHeight;
} NR_INFO;

typedef struct
{
    MS_U8 u8DI_BufCnt;
    MS_PHY u32DI_YBuf[MAX_DATA_BUFF_CNT];
    MS_PHY u32DI_CBuf[MAX_DATA_BUFF_CNT];
    MS_U32 u32DI_BufWidth;
    MS_U32 u32DI_BufHeight;
    MS_U16 u16Valid_DIBuf;
    MS_U32 u32DI_FrameCnt;
} DI_INFO;


typedef struct
{
    MS_BOOL Init;
    NR_INFO NR_Info;
    DI_INFO DI_Info;

} DIP_MGR;

typedef enum
{
    DIP_ERR_OK,
    DIP_ERR_FAIL,
    DIP_ERR_INVALID_BUFFER_CNT,
    DIP_ERR_INVALID_BUFFER_START,
    DIP_ERR_INVALID_BUFFER_WIDTH,
    DIP_ERR_INVALID_BUFFER_HEIGHT,
    DIP_ERR_INVALID_BUFFER_SZIE
}DIP_ERRCODE;

typedef enum
{
    E_DIP_INPUT_UNKNOWN = 0,
    E_DIP_INPUT_NTSC,
    E_DIP_INPUT_PAL,
    E_DIP_INPUT_WEBCAM,
}DIP_INPUT;

typedef enum
{
    E_DIP_YUV_ORDER_UYVY = 0,
    E_DIP_YUV_ORDER_YUYV = 1,
} DIP_YUV_ORDER;

typedef enum
{
    E_DIP_INIT ,
    E_DIP_ENABLE ,
    E_DIP_ONESHOT ,
    E_DIP_SET_INFO ,
    E_DIP_SET_YUORD ,
    E_DIP_GET_BUFSTUS ,
    E_DIP_CLR_BUFSTUS ,
    E_DIP_SET_SCANTYPE ,
    E_DIP_SET_INPUTMODE ,
    E_DIP_SET_WEBCAM ,
} DIP_CNTL;

typedef enum
{

    E_DIP_CAP_CONFIG,
}
EN_DIP_CAPS;

typedef enum
{
    E_DIP_CFG_SW =0,
    E_DIP_CFG_HW =1,
}
EN_DIP_Config;

typedef struct
{

    MS_PHY u32FbAddr0;

    MS_PHY u32FbAddr1;

    MS_U16 u16W;

    MS_U16 u16H;

    MS_U8 u8BufCnt;

} DIP_PROPERTY;

typedef struct
{

    MS_VIRT u32WebCamAddr0;

    MS_VIRT u32WebCamAddr1;

    MS_U16 u16WebCamW;

    MS_U16 u16WebCamH;

} DIP_WEBCAM_PROPERTY;

DIP_ERRCODE MDrv_DIP_GetChipCaps(EN_DIP_CAPS eCapType, MS_U32* pRet, MS_U32 ret_size);

void MDrv_DIP_Init(MS_U32 u32InputMode);
void MDrv_DIP_SetFrameInfo(MS_U32 u32FrameX, MS_U32 u32FrameY,
    MS_U32 u32FrameWidth, MS_U32 u32FrameHeight, MS_BOOL bInterLace);
void MDrv_DIP_InputMode(MS_U32 u32InputMode);
void MDrv_DIP_SetNRBuf(MS_U8 u8BufCnt, MS_U32 u32BufWidth, MS_U32 u32BufHeight,
                               MS_PHY u32BufStart, MS_PHY u32BufEnd);
void MDrv_DIP_SetDIBuf(MS_U8 u8BufCnt, MS_U32 u32BufWidth, MS_U32 u32BufHeight,
                               MS_PHY u32BufStart, MS_PHY u32BufEnd);
void MDrv_DIP_GetDIInfo(DI_INFO *pDIInfo);
void MDrv_DIP_GetNRInfo(NR_INFO *pNRInfo);
void MDrv_DIP_EnableNRDI(MS_BOOL bEnableNR, MS_BOOL bEnableSNR, MS_BOOL bEnableTNR, MS_BOOL bEnableDI);
void MDrv_DIP_GetDIBufCount(MS_U32 *pu32Count);
void MDrv_DIP_ClearDIBufStatus(MS_U8 u8Arg);
void MDrv_DIP_GetDIFrameCount(MS_U32 *pu32FrameCount);
void MDrv_DIP_GetDIBufStatus(MS_U32 *pu32DIBufStatus);
void MDrv_DIP_GetDIShow(void);
void MDrv_DIP_SetMMIOMapBase(void);
void MDrv_DIP_SetWebCamBuff(MS_U32 u32BufWidth, MS_U32 u32BufHeight,
                               MS_VIRT u32BufStart, MS_VIRT u32BufEnd);
void MDrv_DIP_Trigger(void);
void MDrv_DIP_SetYUVOrder(DIP_YUV_ORDER dipOrder);
MS_BOOL MDrv_DIP_OneShot(MS_U32 u32BufWidth, MS_U32 u32BufHeight
    , MS_U32 u32InputBufStart, MS_U32 u32OutputBufStart, MS_U8 u8OutputBufCnt);
MS_BOOL MDrv_DIP_RegisterXCSetDIPInfo(DIP_ERRCODE (*fpDIP_CB)(MS_U16 cmd,MS_U32 *arg,MS_U16 size));

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
#ifndef __API_DMX_TSIO_H__
#define __API_DMX_TSIO_H__ 

#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif


typedef enum
{
    TSIO_CC_RESULT_OK,
    TSIO_CC_RESULT_NORESULT,
    TSIO_CC_RESULT_TXCMD_TOOSMALL,
    TSIO_CC_RESULT_TXCMD_TOOBIG,
    TSIO_CC_RESULT_TXCMD_TIMEOUT,
    TSIO_CC_RESULT_RXCMD_TOOSMALL,
    TSIO_CC_RESULT_RXCMD_TOOBIG,
    TSIO_CC_RESULT_RXCMD_TIMEOUT,
    TSIO_CC_RESULT_ERR_FLAG,
    TSIO_CC_RESULT_ERROR,
}TSIO_CC_RESULT;

typedef enum
{
    TSIO_CLK_200M = 0,
    TSIO_CLK_100M,
    TSIO_CLK_50M,
    TSIO_CLK_25M,
}TSIO_CLK;

typedef enum
{
    TSIO_CMD_BYPASSSMC,
    TSIO_CMD_STUFFINGSID,
    TSIO_CMD_LOCDECRYPT,
    TSIO_CMD_SYNCTHRESHOLD,
    TSIO_CMD_DBGLEVEL,


    TSIO_CMD_PHASE_ADJUST,
    TSIO_CMD_BITTRAINING_ADJUST,
}TSIO_CMD;

typedef enum
{
    TSIO_INT_TYPE_NONE = 0,
    TSIO_INT_TYPE_SGDMAOUT_LASTNODE,
    TSIO_INT_TYPE_SGDMAOUT_NODEINT,
    TSIO_INT_TYPE_SGDMAOUT_DROP,
    TSIO_INT_TYPE_SGDMAOUT_DMAEND,
    TSIO_INT_TYPE_SGDMAIN_DONE,
    TSIO_INT_TYPE_CC_TX_DONE,
    TSIO_INT_TYPE_CC_RX_DONE,
    TSIO_INT_TYPE_LIVE_TSO_OVERFLOW,
    TSIO_INT_TYPE_OPERATION_START,
}TSIO_INT_TYPE;

typedef enum
{
    TSIO_INFO_LOSELOCKCNT = 0,
    TSIO_INFO_USEBUFLEN = 1,
}TSIO_INFO;

typedef struct
{
    MS_PHY phyLastpktBufAddr;
    MS_U32 u32LastpktBufSize;
    MS_PHY phyDMAVQBufAddr;
    MS_U32 u32DMAVQBufSize;
    MS_PHY phyDMAinNodeAddr;
    MS_U32 u32DMAinNodeSize;
    MS_PHY phyDMAoutNodeAddr;
    MS_U32 u32DMAoutNodeSize;
}TSIO_Init_Set;

typedef struct
{
    MS_U8* pIn;
    MS_U16 u16InLen;
    MS_U8* pOut;
    MS_U16* pOutLen;
    MS_U32 u32Timeout;
}TSIO_CC_Set;

typedef enum
{
    E_TSIO_SERVICEDEST_LIVE = 0,
    E_TSIO_SERVICEDEST_DMA,
}TSIO_SERVICEDEST;

typedef struct
{
    MS_PHY phyBufAddr;
    MS_U32 u32BufSize;
    MS_BOOL bTSmode;
    MS_BOOL bMidPriority;
    MS_BOOL bLastNodeFlush;
    MS_BOOL bNewPkt;
    MS_BOOL bBypassAll;
}TSIO_DMAIN_SET;

typedef struct
{
    MS_PHY phyBufAddr;
    MS_U32 u32BufSize;
    MS_BOOL bSecurity;
}TSIO_DMAOUT_SET;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bEvenkeyenable;
    MS_U8 *u8Evenkey;
    MS_U16 u16Evenkeylen;
    MS_BOOL bOddkeyenable;
    MS_U8 *u8Oddkey;
    MS_U16 u16Oddkeylen;
}TSIO_LOCKEY_SET;

typedef void(*TSIOIntTypeCB)(TSIO_INT_TYPE eType, MS_U32 u32Info, void *ext1, void *ext2);




#ifdef DMX_UTOPIA_20
#include "apiDMX_tsio_v2.h"
#endif







DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_RegisterIntCb(TSIOIntTypeCB efn);
# 248 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Init(TSIO_Init_Set *eParm);







DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Open(TSIO_CLK eClk);






DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Exit(void);






DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Close(void);
# 279 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Cmd(TSIO_CMD eCmd, MS_U32 u32Value);
# 288 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_CC(TSIO_CC_Set *Parm, TSIO_CC_RESULT* pResult);
# 298 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_GetInfo(TSIO_INFO eInfo , MS_U32 u32Arg, MS_U32 *u32Retinfo);
# 307 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_SetDMAoutVC(MS_U16 u16Handle, TSIO_DMAOUT_SET *eSet);
# 316 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_DMAout_WriteGet(MS_U16 u16Handle, MS_PHY* pphyWrite);
# 325 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_SetDestination(MS_U16 u16Handle, TSIO_SERVICEDEST eDest);
# 335 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_DMAin_PidOpen(MS_U16 u16Handle, MS_U16 u16Pid, MS_U16 *pu16FltId);
# 344 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_DMAin_PidClose(MS_U16 u16Handle, MS_U16 u16FltId);
# 353 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_SetDMAinVC(MS_U16 u16Handle, TSIO_DMAIN_SET *eSet);
# 362 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_DMAinVC_Start(MS_U16 u16Handle, MS_U32 u32Pacing);
# 371 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_SetLocdecKey(MS_U16 u16Handle, TSIO_LOCKEY_SET *eSet);
# 380 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_LocdecKeyEnable(MS_U16 u16Handle, MS_BOOL bEnable);
# 389 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_Alloc(MS_U8 u8Sid, MS_U16 *u16Handle);







DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_Free(MS_U16 u16Handle);
# 408 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_PidOpen(MS_U16 u16Handle, DMX_TSIF eTSOInSrc, MS_U16 u16Pid, MS_U16* pu16DmxId);
# 417 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiDMX_tsio.h"
DMX_FILTER_STATUS SYMBOL_WEAK MApi_DMX_TSIO_Service_PidClose(MS_U16 u16Handle, MS_U16 u16DmxId);


#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiACP_v2.h"
#ifndef _ACP_V2_H_
#define _ACP_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif






typedef enum
{

    E_ACP_SET_PROTECTION,
    E_ACP_DCS_PROTECTION,
    E_ACP_DCS_SETACTIVATIONKEY,
    E_ACP_SET_MV_BITCONTROL,
}E_ACP_IOCTL_CMDS;

typedef struct
{
    MS_BOOL bEnable;
    MS_BOOL bIsYPbPr;
    MS_U8 u8Type;
    ACP_Result eReturnValue;
} stACP_SET_PROTECTION,*pstACP_SET_PROTECTION;

typedef struct
{
    MS_BOOL bEnable;
    MS_ACP_MV_BitControl MV_BitControl_Data;
    ACP_Result eReturnValue;
} stACP_SET_MV_BITCONTROL,*pstACP_SET_MV_BITCONTROL;

typedef struct
{
    MS_BOOL bEnable;
    MS_U8 u8Type;
    ACP_Result eReturnValue;
} stACP_DCS_PROTECTION,*pstACP_DCS_PROTECTION;

typedef struct
{
    MS_U8 *pu8ActivationKeyTbl;
    MS_U8 u8ActivationKeyTblSize;
    ACP_Result eReturnValue;
} stACP_DCS_SETACTIVATIONKEY,*pstACP_DCS_SETACTIVATIONKEY;

#ifdef __cplusplus
}
#endif

#endif
# 94 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAUDSP.h"
#ifndef _DRVAUDSP_H_
#define _DRVAUDSP_H_ 




#include "MsTypes.h"

#ifdef __cplusplus
extern "C"
{
#endif





#define MSIF_AUDSP_LIB_CODE {'A','D','S','P'}
#define MSIF_AUDSP_LIBVER {'0','0'}
#define MSIF_AUDSP_BUILDNUM {'3','F'}
#define MSIF_AUDSP_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define AUDSP_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_AUDSP_LIB_CODE, \
    MSIF_AUDSP_LIBVER, \
    MSIF_AUDSP_BUILDNUM, \
    MSIF_AUDSP_CHANGELIST, \
    MSIF_OS




extern MS_BOOL MDrv_AUD_GetLibVer(const MSIF_Version **ppVersion);

#ifdef __cplusplus
}
#endif

#endif
# 118 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
#ifndef _DRV_IRQ_H_
#define _DRV_IRQ_H_ 

#include"MsIRQ.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"




#define MSIF_DRVIRQ_LIB_CODE {'I','R','Q',' '}
#define MSIF_DRVIRQ_LIBVER {'0','1'}
#define MSIF_DRVIRQ_BUILDNUM {'0','3'}
#define MSIF_DRVIRQ_CHANGELIST {'0','0','5','5','5','6','7','9'}

#define DRVIRQ_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DRVIRQ_LIB_CODE, \
    MSIF_DRVIRQ_LIBVER, \
    MSIF_DRVIRQ_BUILDNUM, \
    MSIF_DRVIRQ_CHANGELIST, \
    MSIF_OS





#define MDRV_RISC32_TIMER 0x80

#define MDRV_RISC32_UART 0x81





typedef enum
{
    E_IRQ_CPU0_2_CPU1,
    E_IRQ_CPU0_2_CPU2,
    E_IRQ_CPU1_2_CPU0,
    E_IRQ_CPU1_2_CPU2,
    E_IRQ_CPU2_2_CPU0,
    E_IRQ_CPU2_2_CPU1,
}IRQ_CPU_TYPE;
# 184 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_Detech(MS_U32 u32Vector);
# 193 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_Attach(MS_U32 u32Vector, void *pIntCb);
# 202 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_Restore(void);
# 211 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_MaskAll(void);
# 220 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_UnMaskAll(void);
# 229 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_Mask(MS_U32 u32Vector);
# 238 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_UnMask(MS_U32 u32Vector);
# 247 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
void MDrv_IRQ_NotifyCpu(IRQ_CPU_TYPE eType);
# 256 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
MS_BOOL MDrv_IRQ_Init(void);
# 265 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
MS_BOOL MDrv_IRQ_InISR(void);
# 274 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvIRQ.h"
MS_U32 MDrv_IRQ_SetPowerState(EN_POWER_MODE u16PowerState);


#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiGOP_SC.h"
#ifndef _API_GOP_SC_H_
#define _API_GOP_SC_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#define MSIF_GOP_SC_LIBVER {'0','0'}
#define MSIF_GOP_SC_BUILDNUM {'1','1'}
#define MSIF_GOP_SC_CHANGELIST {'0','0','3','9','1','8','8','7'}

typedef enum
{
    EN_GOP_ARGB =0,
    EN_SC_RGB
}EN_GOP_SC_MUX_SEL;

typedef enum
{
    EN_GOP_SC_NTSC =0,
    EN_GOP_SC_PAL,
    EN_GOP_SC_PAL_M,
    EN_GOP_SC_TVSYS_NUM
} EN_GOP_SC_TVSYS;

typedef enum
{
    EN_GOP_SC_DST_FB=0,
    EN_GOP_SC_DST_FBL=1,
    EN_GOP_SC_DST_NUM,

}MAPI_GOP_SC_Dst;

typedef struct
{

    MS_U16 u16VTotal;
    MS_U16 u16HTotal;
    MS_U16 u16Width;
    MS_U16 u16Hight;

    MS_U16 u16Vde_St;
    MS_U16 u16Hde_St;

}MAPI_GOP_SC_InCfg;

typedef struct
{
    EN_GOP_SC_MUX_SEL enSrcSel;

    MAPI_GOP_SC_InCfg stInputCfg;
    EN_GOP_SC_TVSYS u8TVSys;
    MAPI_GOP_SC_Dst stDst;

}MAPI_GOP_SC_INFO;

void MApi_GOP_SC_SkipInit(MS_BOOL bEnable);
MS_BOOL MApi_GOP_SC_Init(void);
MS_BOOL MApi_GOP_SC_SetCfg(MAPI_GOP_SC_INFO *pGopSC_Info);
MS_BOOL MApi_GOP_SC_MuxSel(EN_GOP_SC_MUX_SEL u8Sel);
MS_BOOL MApi_GOP_SC_SetFPLL_Enable(MS_BOOL bEnable);

#ifdef __cplusplus
}
#endif

#endif
# 1 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiMBX.h"
#ifndef _API_MBX_H
#define _API_MBX_H 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"

MBX_Result MApi_MBX_Init(MBX_CPU_ID eHKCPU, MBX_ROLE_ID eHostRole, MS_U32 u32TimeoutMillSecs);
MBX_Result MApi_MBX_DeInit(MS_BOOL bForceDiscardPendingMsg);
MBX_Result MApi_MBX_RegisterMSG(MBX_Class eMsgClass, MS_U16 u16MsgQueueSize);

MBX_Result MApi_MBX_RegisterMSGWithCallBack(MBX_Class eMsgClass, MS_U16 u16MsgQueueSize, MBX_MAIL_ARRIVE_NOTIFY_FUNC notifier);
MBX_Result MApi_MBX_UnRegisterMSG(MBX_Class eMsgClass, MS_BOOL bForceDiscardMsgQueue);
MBX_Result MApi_MBX_ClearMSG(MBX_Class eMsgClass);
MBX_Result MApi_MBX_SendMsg(MBX_Msg *pMsg);
MBX_Result MApi_MBX_GetMsgQueueStatus(MBX_Class eTargetClass, MBX_MSGQ_Status *pMsgQueueStatus);
MBX_Result MApi_MBX_RecvMsg(MBX_Class eTargetClass, MBX_Msg *pMsg, MS_U32 u32WaitMillSecs, MS_U32 u32Flag);
MBX_Result MApi_MBX_CheckMsg(MBX_Class eTargetClass, MBX_Msg *pMsg, MS_U32 u32WaitMillSecs, MS_U32 u32Flag);
MBX_Result MApi_MBX_SendMsgLoopback(MBX_Msg *pMsg, MBX_ROLE_ID eSrcRoleId);
MBX_Result MApi_MBX_Enable(MS_BOOL bEnable);
MBX_Result MApi_MBX_RemoveLatestMsg(void);
MBX_Result MApi_MBX_QueryDynamicClass(MBX_ROLE_ID eRoleID, char *name, MS_U8 *pmbx_class);
MBX_Result MApi_MBX_GenerateDynamicClass(MBX_ROLE_ID eRoleID, char *name, MS_U8 *pmbx_class);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiJPEG_v2.h"
#ifndef _API_JPEG_V2_H_
#define _API_JPEG_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"





typedef enum {
    MApi_CMD_JPEG_EnableOJPD,
    MApi_CMD_JPEG_Init_UsingOJPD,
    MApi_CMD_JPEG_get_APP0_info,
    MApi_CMD_JPEG_Init,
    MApi_CMD_JPEG_DecodeHdr,
    MApi_CMD_JPEG_Decode,
    MApi_CMD_JPEG_Exit,
    MApi_CMD_JPEG_GetErrorCode,
    MApi_CMD_JPEG_GetJPDEventFlag,
    MApi_CMD_JPEG_SetJPDEventFlag,
    MApi_CMD_JPEG_Rst,
    MApi_CMD_JPEG_PowerOn,
    MApi_CMD_JPEG_PowerOff,
    MApi_CMD_JPEG_GetCurVidx,
    MApi_CMD_JPEG_IsProgressive,
    MApi_CMD_JPEG_ThumbnailFound,
    MApi_CMD_JPEG_GetWidth,
    MApi_CMD_JPEG_GetHeight,
    MApi_CMD_JPEG_GetOriginalWidth,
    MApi_CMD_JPEG_GetOriginalHeight,
    MApi_CMD_JPEG_GetNonAlignmentWidth,
    MApi_CMD_JPEG_GetNonAlignmentHeight,
    MApi_CMD_JPEG_GetAlignedPitch,
    MApi_CMD_JPEG_GetAlignedPitch_H,
    MApi_CMD_JPEG_GetAlignedWidth,
    MApi_CMD_JPEG_GetAlignedHeight,
    MApi_CMD_JPEG_GetScaleDownFactor,
    MApi_CMD_JPEG_SetMaxDecodeResolution,
    MApi_CMD_JPEG_SetProMaxDecodeResolution,
    MApi_CMD_JPEG_SetMRBufferValid,
    MApi_CMD_JPEG_UpdateReadInfo,
    MApi_CMD_JPEG_ProcessEOF,
    MApi_CMD_JPEG_SetErrCode,
    MApi_CMD_JPEG_SetDbgLevel,
    MApi_CMD_JPEG_GetDbgLevel,
    MApi_CMD_JPEG_GetInfo,
    MApi_CMD_JPEG_GetStatus,
    MApi_CMD_JPEG_GetLibVer,
    MApi_CMD_JPEG_HdlVidxChk,
    MApi_CMD_JPEG_GetBuffLoadType,
    MApi_CMD_JPEG_EnableISR,
    MApi_CMD_JPEG_DisableISR,
    MApi_CMD_JPEG_WaitDone,
    MApi_CMD_JPEG_GetEXIFDateTime,
    MApi_CMD_JPEG_GetEXIFOrientation,
    MApi_CMD_JPEG_GetEXIFManufacturer,
    MApi_CMD_JPEG_GetEXIFModel,
    MApi_CMD_JPEG_GetEXIFFlash,
    MApi_CMD_JPEG_GetEXIFISOSpeedRatings,
    MApi_CMD_JPEG_GetEXIFShutterSpeedValue,
    MApi_CMD_JPEG_GetEXIFApertureValue,
    MApi_CMD_JPEG_GetEXIFExposureBiasValue,
    MApi_CMD_JPEG_GetEXIFFocalLength,
    MApi_CMD_JPEG_GetEXIFImageWidth,
    MApi_CMD_JPEG_GetEXIFImageHeight,
    MApi_CMD_JPEG_GetEXIFExposureTime,
    MApi_CMD_JPEG_GetEXIFFNumber,
    MApi_CMD_JPEG_GetFreeMemory,
    MApi_CMD_JPEG_GetDataOffset,
    MApi_CMD_JPEG_GetSOFOffset,
    MApi_CMD_JPEG_SetNJPDInstance,
    MApi_CMD_JPEG_SupportCMYK,
    MApi_CMD_JPEG_SupportRGB,
    MApi_CMD_JPEG_SetMHEG5,
    MApi_CMD_JPEG_IsMPOFormat,
    MApi_CMD_JPEG_GetMPOIndex,
    MApi_CMD_JPEG_GetMPOAttr,
    MApi_CMD_JPEG_DumpMPO,
    MApi_CMD_JPEG_SetMPOBuffer,
    MApi_CMD_JPEG_SetMPOMaxDecodeResolution,
    MApi_CMD_JPEG_SetMPOProMaxDecodeResolution,
    MApi_CMD_JPEG_SetVerificationMode,
    MApi_CMD_JPEG_GetVerificationMode,
    MApi_CMD_JPEG_Debug,
    MApi_CMD_JPEG_GetControl,
    MApi_CMD_JPEG_GetCbEvent,
    MApi_CMD_JPEG_SetCbEvent
} E_JPEG_V2_IOCTL_CMD;




typedef struct DLL_PACKED _JPEG_BOOL_PARAM
{
    MS_BOOL bValue;
}JPEG_BOOL_PARAM, *PJPEG_BOOL_PARAM;

typedef struct DLL_PACKED _JPEG_INIT_PARAM
{
    JPEG_InitParam *pInitParam;
    JPEG_Result retVal;
}JPEG_INIT_PARAM, *PJPEG_INIT_PARAM;

typedef struct DLL_PACKED _JPEG_GETAPP0INFO_PARAM
{
    MS_U8 *unit;
    MS_U16 *x;
    MS_U16 *y;
}JPEG_GETAPP0INFO_PARAM, *PJPEG_GETAPP0INFO_PARAM;



typedef struct DLL_PACKED _JPEG_RESULT_PARAM
{
    JPEG_Result retVal;
}JPEG_RESULT_PARAM, *PJPEG_RESULT_PARAM;

typedef struct DLL_PACKED _JPEG_GETERRORCODE_PARAM
{
    JPEG_ErrCode ErrCode;
}JPEG_GETERRORCODE_PARAM, *PJPEG_GETERRORCODE_PARAM;


typedef struct DLL_PACKED _JPEG_JPEGEVENT_PARAM
{
    JPEG_Event eEvtVal;
}JPEG_JPEGEVENT_PARAM, *PJPEG_JPEGEVENT_PARAM;







typedef struct DLL_PACKED _JPEG_U16_PARAM
{
    MS_U16 u16Value;
}JPEG_U16_PARAM, *PJPEG_U16_PARAM;



typedef struct DLL_PACKED _JPEG_U8_PARAM
{
    MS_U8 u8Value;
}JPEG_U8_PARAM, *PJPEG_U8_PARAM;




typedef struct DLL_PACKED _JPEG_RESOLUTION_PARAM
{
    MS_U16 u16Width;
    MS_U16 u16Height;
}JPEG_RESOLUTION_PARAM, *PJPEG_RESOLUTION_PARAM;

typedef struct DLL_PACKED _JPEG_SETMBUFFERVALID_PARAM
{
    JPEG_BuffLoadType u8MRBuffType;
}JPEG_SETMBUFFERVALID_PARAM, *PJPEG_SETMBUFFERVALID_PARAM;

typedef struct DLL_PACKED _JPEG_UPDATEREADINFO_PARAM
{
    MS_U32 u32DataRead;
    MS_BOOL bEOFflag;
}JPEG_UPDATEREADINFO_PARAM, *PJPEG_UPDATEREADINFO_PARAM;

typedef struct DLL_PACKED _JPEG_PROCESSEOF_PARAM
{
    JPEG_BuffLoadType u8MRBuffType;
}JPEG_PROCESSEOF_PARAM, *PJPEG_PROCESSEOF_PARAM;

typedef struct DLL_PACKED _JPEG_SETERRORCODE_PARAM
{
    JPEG_ErrCode ErrStatus;
}JPEG_SETERRORCODE_PARAM, *PJPEG_SETERRORCODE_PARAM;

typedef struct DLL_PACKED _JPEG_GETINFO_PARAM
{
    JPEG_Info *pJPEG_Info;
}JPEG_GETINFO_PARAM, *PJPEG_GETINFO_PARAM;

typedef struct DLL_PACKED _JPEG_GETSTATUS_PARAM
{
    JPEG_Status *pJPEG_Status;
}JPEG_GETSTATUS_PARAM, *PJPEG_GETSTATUS_PARAM;

typedef struct DLL_PACKED _JPEG_GETLIBVER_PARAM
{
    const MSIF_Version **ppVersion;
    JPEG_Result retVal;
}JPEG_GETLIBVER_PARAM, *PJPEG_GETLIBVER_PARAM;

typedef struct DLL_PACKED _JPEG_GETBUFFLOADTYPE_PARAM
{
    JPEG_BuffLoadType *pBuffLoadType;
    JPEG_Result retVal;
}JPEG_GETBUFFLOADTYPE_PARAM, *PJPEG_GETBUFFLOADTYPE_PARAM;

typedef struct DLL_PACKED _JPEG_ENABLEISR_PARAM
{
    JPEG_IsrFuncCb IsrCb;
    JPEG_Result retVal;
}JPEG_ENABLEISR_PARAM, *PJPEG_ENABLEISR_PARAM;

typedef struct DLL_PACKED _JPEG_WAITDONE_PARAM
{
    JPEG_DecodeStatus retVal;
}JPEG_WAITDONE_PARAM, *PJPEG_WAITDONE_PARAM;

typedef struct DLL_PACKED _JPEG_GETEXIFDATETIME_PARAM
{
    JPEG_EXIF_DateTime *DateTime;
    JPEG_Result retVal;
}JPEG_GETEXIFDATETIME_PARAM, *PJPEG_GETEXIFDATETIME_PARAM;

typedef struct DLL_PACKED _JPEG_GETEXIFORIENTATION_PARAM
{
    JPEG_EXIF_Orientation *eOrientation;
    JPEG_Result retVal;
}JPEG_GETEXIFORIENTATION_PARAM, *PJPEG_GETEXIFORIENTATION_PARAM;


typedef struct DLL_PACKED _JPEG_GETEXIFSTRING_PARAM
{
    MS_U8 *pu8String;
    MS_U8 u8size;
    JPEG_Result retVal;
}JPEG_GETEXIFSTRING_PARAM, *PJPEG_GETEXIFSTRING_PARAM;


typedef struct DLL_PACKED _JPEG_GETEXIFU16_PARAM
{
    MS_U16 *pu16Value;
    JPEG_Result retVal;
}JPEG_GETEXIFU16_PARAM, *PJPEG_GETEXIFU16_PARAM;



typedef struct DLL_PACKED _JPEG_GETEXIFU32_PARAM
{
    MS_U32 *pu32Value;
    JPEG_Result retVal;
}JPEG_GETEXIFU32_PARAM, *PJPEG_GETEXIFU32_PARAM;




typedef struct DLL_PACKED _JPEG_GETEXIFRATIONAL_PARAM
{
    JPEG_RATIONAL *pRational;
    JPEG_Result retVal;
}JPEG_GETEXIFRATIONAL_PARAM, *PJPEG_GETEXIFRATIONAL_PARAM;

typedef struct DLL_PACKED _JPEG_GETFREEMEMORY_PARAM
{
    MS_U32 size;
    MS_PHY addr;
}JPEG_GETFREEMEMORY_PARAM, *PJPEG_GETFREEMEMORY_PARAM;


typedef struct DLL_PACKED _JPEG_U32_PARAM
{
    MS_U32 u32Value;
}JPEG_U32_PARAM, *PJPEG_U32_PARAM;


typedef struct DLL_PACKED _JPEG_SUPPORTCMYK_PARAM
{
    MS_BOOL bEnable;
    JPEG_Result retVal;
}JPEG_SUPPORTCMYK_PARAM, *PJPEG_SUPPORTCMYK_PARAM;

typedef struct DLL_PACKED _JPEG_GETMPOINDEX_PARAM
{
    JPEG_MPO_INDEX_INFO *pMPOIndex;
    MS_BOOL bretVal;
}JPEG_GETMPOINDEX_PARAM, *PJPEG_GETMPOINDEX_PARAM;

typedef struct DLL_PACKED _JPEG_GETMPOATTR_PARAM
{
    MS_U32 image_no;
    JPEG_MPO_ATTRIBUTE_INFO *pMPOAttr;
    MS_BOOL bretVal;
}JPEG_GETMPOATTR_PARAM, *PJPEG_GETMPOATTR_PARAM;

typedef struct DLL_PACKED _JPEG_SETMPOBUFFER_PARAM
{
    MS_U32 read_offset;
    MS_U32 output_start;
    MS_BOOL bretVal;
}JPEG_SETMPOBUFFER_PARAM, *PJPEG_SETMPOBUFFER_PARAM;


typedef struct DLL_PACKED _JPEG_VERIFICATION_PARAM
{
    NJPEG_VerificationMode VerificationMode;
}JPEG_VERIFICATION_PARAM, *PJPEG_VERIFICATION_PARAM;

typedef struct DLL_PACKED _JPEG_GET_CTRL_PARAM
{
    EN_JPEG_GET_CTRL_ID eGetID;
    MS_U32 *param;
    MS_U32 u32size;
    JPEG_Result retVal;
}JPEG_GET_CTRL_PARAM, *PJPEG_GET_CTRL_PARAM;

void NJPEG_EXRegisterToUtopia(FUtopiaOpen ModuleType);
MS_U32 JPEG_Open(void** ppInstance, MS_U32 u32ModuleVersion, void* pAttribute);
MS_U32 JPEG_Close(void* pInstance);
MS_U32 JPEG_Ioctl(void* pInstance, MS_U32 u32Cmd, void* pArgs);
void JPEG_SetDbgLevel_V2(MS_U8 u8DbgLevel);


#ifdef __cplusplus
}
#endif

#endif
# 95 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAUDIO_if.h"
#ifndef _DRV_AUDIO_IF_H_
#define _DRV_AUDIO_IF_H_ 

#include "MsTypes.h"
#include "UFO.h"

#ifdef __cplusplus
extern "C"
{
#endif




#define AUDIO_STRCMD_LENGTH 64
#define AUDIO_STRNAME_LENGTH 64
#define AUDIO_COMMON_PCM_IO_NAME_LENGTH 32

#define AUDIO_MAJOR_VERSION_MASK 0xFFFF0000
#define AUDIO_MINOR_VERSION_MASK 0x0000FFFF

#define A_EPERM 1
#define A_ENOMEM 12
#define A_EFAULT 14
#define A_EBUSY 16
#define A_ENODEV 19
#define A_EINVAL 22



#define AUD_CAP_VERSION 1

#define AUDIO_BIFROST_TEST_SUPPORT_VERSION 2

#define En_DVB_advsndType_Compare(A,B) (strcmp(A, B) == 0)
#define ADVSND_TYPE_Compare(A,B) (strcmp(A, B) == 0)
#define ADVFUNC_Compare(A,B) (strcmp(A, B) == 0)
#define ADVSND_PARAM_Compare(A,B) (strcmp(A, B) == 0)

#define HDMI_Tx_HD 1
#define HDMI_Tx_DTS_HD 1




#define AU_HDMI_AC3 0x01
#define AU_HDMI_AC3P 0x15
#define AU_HDMI_DTS_TYPE1 0x0B
#define AU_HDMI_DTS_TYPE2 0x0C
#define AU_HDMI_DTS_TYPE3 0x0D
#define AU_HDMI_DTS_TYPE4 0x11
#define AU_HDMI_AAC 0x07




#define AUDIO_HW_DMA_READER1 "HW DMA Reader1"
#define AUDIO_HW_DMA_READER2 "HW DMA Reader2"
#define AUDIO_SW_DMA_READER1 "SW DMA Reader1"
#define AUDIO_R2_DMA_READER1 "R2 DMA Reader1"
#define AUDIO_R2_DMA_READER2 "R2 DMA Reader2"
#define AUDIO_PCM_CAPTURE1 "PCM Capture1"
#define AUDIO_PCM_CAPTURE2 "PCM Capture2"
#define AUDIO_HW_DMA_WRITER1 "HW DMA Writer1"

#define AUDIO_SW_MIXER1 "SW MIXER1"
#define AUDIO_SW_MIXER2 "SW MIXER2"
#define AUDIO_SW_MIXER3 "SW MIXER3"
#define AUDIO_SW_MIXER4 "SW MIXER4"
#define AUDIO_SW_MIXER5 "SW MIXER5"
#define AUDIO_SW_MIXER6 "SW MIXER6"
#define AUDIO_SW_MIXER7 "SW MIXER7"
#define AUDIO_SW_MIXER8 "SW MIXER8"

#define AUDIO_PCM_SWMIXER_GROUP_NONE 0x00000000
#define AUDIO_PCM_SWMIXER_GROUP_ALL 0xFFFFFFFF
#define AUDIO_PCM_SWMIXER_GROUP_1 0x00000001
#define AUDIO_PCM_SWMIXER_GROUP_2 0x00000002
#define AUDIO_PCM_SWMIXER_GROUP_3 0x00000004
#define AUDIO_PCM_SWMIXER_GROUP_4 0x00000008
#define AUDIO_PCM_SWMIXER_GROUP_5 0x00000010
#define AUDIO_PCM_SWMIXER_GROUP_6 0x00000020
#define AUDIO_PCM_SWMIXER_GROUP_7 0x00000040
#define AUDIO_PCM_SWMIXER_GROUP_8 0x00000080




#define AUDIO_OUTPUT_DEVICE_NONE 0x00000000
#define AUDIO_OUTPUT_DEVICE_SPEAKER 0x00000001
#define AUDIO_OUTPUT_DEVICE_SPDIF 0x00000002
#define AUDIO_OUTPUT_DEVICE_HDMI 0x00000004
#define AUDIO_OUTPUT_DEVICE_ALL 0xFFFFFFFF




#define AUDIO_CODEC_MPEG 0x00000001
#define AUDIO_CODEC_AC3 0x00000002
#define AUDIO_CODEC_AC3P 0x00000003
#define AUDIO_CODEC_AAC 0x00000004
#define AUDIO_CODEC_DTS 0x00000005
#define AUDIO_CODEC_DTS_LBR 0x00000006
#define AUDIO_CODEC_DTS_HD 0x00000007
#define AUDIO_CODEC_WMA 0x00000008
#define AUDIO_CODEC_DRA 0x00000009
#define AUDIO_CODEC_COOK 0x0000000A
#define AUDIO_CODEC_XPCM 0x0000000B
#define AUDIO_CODEC_VORBIS 0x0000000C





typedef struct
{
    MS_U32 u32Addr;
    MS_U32 u32Size;
    MS_U64 u64Idx;
}AU_DVB_ENC_FRAME_INFO, *PAU_DVB_ENC_FRAME_INFO;

typedef struct
{
    MS_U32 u32Addr;
    MS_U32 u32Size;
    MS_U32 u32Idx;
}AUDIO_UPLOAD_INFO, *PAUDIO_UPLOAD_INFO;

typedef enum
{
    AUDIO_COEF_PREVER_PEQ,
    AUDIO_COEF_PEQ,
    AUDIO_COEF_HPF,
    AUDIO_COEF_BASS,
    AUDIO_COEF_TREBLE,
}AUDIO_COEF_TYPE;

typedef enum
{
    AUDIO_SINGLE_PRECISION,
    AUDIO_DOUBLE_PRECISION,
}AUDIO_PRECISION_TYPE;


typedef struct
{
    MS_U8 band;
    MS_U8 sfs;
    MS_U8 scale;
    MS_U32 a0;
    MS_U32 a1;
    MS_U32 a2;
    MS_U32 b1;
    MS_U32 b2;
    AUDIO_COEF_TYPE type;
    MS_BOOL enable;
    AUDIO_PRECISION_TYPE precision;
} AUDIO_PEQ_COEF, *PAUDIO_PEQ_COEF;

typedef enum
{
    AUDIO_SOUNDEFFECT_SPEAKER,
    AUDIO_SOUNDEFFECT_HEADPHONE,
}AUDIO_SOUNDEFFECT_TYPE;

typedef struct __attribute__((packed))
{
    MS_U32 u32AudioCapsVersion;
    MS_U32 u32AudioCapsStructSize;
    MS_U8 u8MaxDecoderNum;
    MS_U8 u8MaxDmaReaderNum;
    MS_BOOL bIsADSupported;
    MS_BOOL bIsPusiDetectSupported;
    MS_BOOL bIsMpegSupported;
    MS_BOOL bIsAc3Supported;
    MS_BOOL bIsAc3pSupported;
    MS_BOOL bIsAacSupported;
    MS_BOOL bIsMp3Supported;
    MS_BOOL bIsWmaSupported;
    MS_BOOL bIsRa8LbrSupported;
    MS_BOOL bIsXpcmSupported;
    MS_BOOL bIsDtsSupported;
    MS_BOOL bIsWmaProSupported;
    MS_BOOL bIsFlacSupported;
    MS_BOOL bIsVorbisSupported;
    MS_BOOL bIsDtsLbrSupported;
    MS_BOOL bIsAmrNbSupported;
    MS_BOOL bIsAmrWbSupported;
    MS_BOOL bIsDraSupported;
# 293 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAUDIO_if.h"
} AUDIO_CAPABILITIES;

#if defined(UFO_PUBLIC_HEADER_300)
typedef struct
#else
typedef struct __attribute__((packed))
#endif
{
    MS_U32 u32StructVersion;
    MS_U32 u32StructSize;
    MS_U8 u8ConnectFlag;
    MS_U8 u8StartFlag;
    MS_U8 u8Name[AUDIO_COMMON_PCM_IO_NAME_LENGTH];
    MS_U8 u8NonBlockingFlag;
    MS_U8 u8MultiChFlag;
    MS_U8 u8MixingFlag;
    MS_U32 u32MixingGroup;
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_500_3)
    MS_S8 *pBuffer;
    MS_S8 *pReadPtr;
    MS_S8 *pWritePtr;
#endif
    MS_U32 u32BufferDuration;
    MS_U32 u32Channel;
    MS_U32 u32SampleRate;
    MS_U32 u32BitWidth;
    MS_U32 u32BigEndian;
    MS_U32 u32Timestamp;
    MS_U32 u32Weighting;
    MS_U32 u32Volume;
    MS_U32 u32BufferLevel;
    MS_U8 u8CaptureFlag;
# 334 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAUDIO_if.h"
} AUDIO_PCM_INFO_t;
#if defined(UFO_PUBLIC_HEADER_212) || defined(UFO_PUBLIC_HEADER_500_3)
#define AUDIO_PCM_INFO_VERSION 0x00010001
#else
#define AUDIO_PCM_INFO_VERSION 0x00020001
#endif
# 348 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvAUDIO_if.h"
typedef enum
{
    AUDIO_PATH_GROUP_1,
    AUDIO_PATH_GROUP_2,
    AUDIO_PATH_GROUP_3,
}AUDIO_PATH_GROUP_TYPE;



typedef enum
{
    E_AUDIO_INFO_DTV_IN,
    E_AUDIO_INFO_ATV_IN,
    E_AUDIO_INFO_HDMI_IN,
    E_AUDIO_INFO_ADC_IN,
    E_AUDIO_INFO_MM_IN,
    E_AUDIO_INFO_SPDIF_IN,
    E_AUDIO_INFO_KTV_IN,
    E_AUDIO_INFO_GAME_IN,
    E_AUDIO_INFO_KTV_STB_IN
}AUDIO_SOURCE_INFO_TYPE;


typedef enum
{
    E_CAPTURE_CH1,
    E_CAPTURE_CH2,
    E_CAPTURE_CH3,
    E_CAPTURE_CH4,
    E_CAPTURE_CH5,
    E_CAPTURE_CH6,
    E_CAPTURE_CH7,
    E_CAPTURE_CH8,
    E_CAPTURE_PCM,
    E_CAPTURE_PCM_DELAY,
    E_CAPTURE_PCM_SE,
    E_CAPTURE_ADC,
    E_CAPTURE_AUOUT0,
    E_CAPTURE_AUOUT1,
    E_CAPTURE_AUOUT2,
    E_CAPTURE_AUOUT3,
    E_CAPTURE_I2S_OUT,
    E_CAPTURE_SPDIF_OUT,
    E_CAPTURE_MIXER,
    E_CAPTURE_ADC2,
    E_CAPTURE_ADC1_AUIN0_INPUT,
    E_CAPTURE_ADC1_AUIN1_INPUT,
    E_CAPTURE_ADC1_AUIN2_INPUT,
    E_CAPTURE_ADC1_AUIN3_INPUT,
    E_CAPTURE_ADC1_AUIN4_INPUT,
    E_CAPTURE_ADC1_AUIN5_INPUT,
    E_CAPTURE_ADC1_AUMIC_INPUT,
    E_CAPTURE_ADC2_AUIN0_INPUT,
    E_CAPTURE_ADC2_AUIN1_INPUT,
    E_CAPTURE_ADC2_AUIN2_INPUT,
    E_CAPTURE_ADC2_AUIN3_INPUT,
    E_CAPTURE_ADC2_AUIN4_INPUT,
    E_CAPTURE_ADC2_AUIN5_INPUT,
    E_CAPTURE_ADC2_AUMIC_INPUT,
    E_CAPTURE_MAX_NUM,
    E_CAPTURE_NULL = 0xFF,
}AUDIO_CAPTURE_SOURCE_TYPE;


typedef enum
{
    E_DEVICE0,
    E_DEVICE1,
    E_DEVICE2,
    E_DEVICE3,
    E_DEVICE4,
    E_DEVICE5,
}AUDIO_DEVICE_TYPE;


enum
{
    AUDIO_DSP1_INPUT,
    AUDIO_DSP2_INPUT,
    AUDIO_ADC_INPUT,
    AUDIO_DSP3_INPUT = 0x06,
    AUDIO_DSP4_INPUT = 0x08,
    AUDIO_ADC2_INPUT = 0x09,
    AUDIO_DMA_INPUT = 0x0E,
};

typedef enum
{
    AUDIO_PATH_0,
    AUDIO_PATH_1,
    AUDIO_PATH_2,
    AUDIO_PATH_3,
    AUDIO_PATH_4,
    AUDIO_PATH_5,
    AUDIO_PATH_6,
    AUDIO_PATH_7,
    AUDIO_PATH_MAIN = 4,

    AUDIO_T3_PATH_AUOUT0 = 0x30,
    AUDIO_T3_PATH_AUOUT1 = 0x31,
    AUDIO_T3_PATH_AUOUT2 = 0x32,
    AUDIO_T3_PATH_AUOUT3 = 0x33,
    AUDIO_T3_PATH_I2S = 0x34,
    AUDIO_T3_PATH_SPDIF = 0x35,
    AUDIO_T3_PATH_I2S2 = 0x36,
    AUDIO_T3_PATH_HDMI = 0x37,
    AUDIO_T3_PATH_LR = 0x38,
    AUDIO_T3_PATH_PCM_CAPTURE1 = 0x39,
    AUDIO_T3_PATH_PCM_CAPTURE2 = 0x3A,
    AUDIO_T3_PATH_DMA_WRITER1 = 0x3B,

    AUDIO_T3_PATH_MIXER_MAIN = 0x40,
    AUDIO_T3_PATH_MIXER_SECONDARY = 0x41,
    AUDIO_T3_PATH_MIXER_DMA_IN = 0x42,
    AUDIO_T3_PATH_MIXER_MCH_IN = 0x43,

    AUDIO_PATH_SW_DMA_0 = 0x50,
    AUDIO_PATH_SW_DMA_1 = 0x51,
    AUDIO_PATH_HW_DMA_0 = 0x52,
    AUDIO_PATH_HW_DMA_1 = 0x53,

    AUDIO_PATH_NULL = 0xFF
}AUDIO_PATH_TYPE;

typedef enum
{
    INTERNAL_MULTI_1,
    INTERNAL_MULTI_2,
    INTERNAL_MULTI_3,
    INTERNAL_MULTI_4,
    INTERNAL_PCM,
    INTERNAL_PCM_DELAY,
    INTERNAL_PCM_SE,
    INTERNAL_SCART,
    INTERNAL_MIXER,
    INTERNAL_CH6,
    INTERNAL_TEST,
    INTERNAL_LRDIV2,
    INTERNAL_TONE,
    INTERNAL_CH8,
    INTERNAL_ATVENC,
    INTERNAL_MAX_NUM,
    INTERNAL_PATH_NULL = 0xFF,
}AUDIO_INTERNAL_PATH_TYPE;


typedef enum
{
    AUDIO_SPDIF_INPUT = 3,
    AUDIO_I2S_INPUT = 4,
    AUDIO_HDMI_INPUT = 5,
    AUDIO_SRC_INPUT = 7,

    AUDIO_DSP1_DVB_INPUT = 0x00,
    AUDIO_DSP1_DVB1_INPUT = 0x10,
    AUDIO_DSP1_SPDIF_INPUT = 0x20,
    AUDIO_DSP1_SPDIFx1_INPUT = 0x30,
    AUDIO_DSP1_HDMI_INPUT = 0x40,
    AUDIO_DSP1_HDMIx1_INPUT = 0x50,
    AUDIO_DSP1_CardRD_INPUT = 0x60,
    AUDIO_DSP1_SIF_INPUT = 0x70,
    AUDIO_DSP1_MM_INPUT = 0x80,

    AUDIO_DSP2_DVB_INPUT = 0x01,
    AUDIO_DSP2_DVB1_INPUT = 0x11,
    AUDIO_DSP2_SPDIF_INPUT = 0x21,
    AUDIO_DSP2_SPDIFx1_INPUT = 0x31,
    AUDIO_DSP2_HDMI_INPUT = 0x41,
    AUDIO_DSP2_HDMIx1_INPUT = 0x51,
    AUDIO_DSP2_CardRD_INPUT = 0x61,
    AUDIO_DSP2_SIF_INPUT = 0x71,

    AUDIO_DSP3_DVB_INPUT = 0x06,
    AUDIO_DSP3_DVB1_INPUT = 0x16,
    AUDIO_DSP3_SPDIF_INPUT = 0x26,
    AUDIO_DSP3_SPDIFx1_INPUT = 0x36,
    AUDIO_DSP3_HDMI_INPUT = 0x46,
    AUDIO_DSP3_HDMIx1_INPUT = 0x56,
    AUDIO_DSP3_CardRD_INPUT = 0x66,
    AUDIO_DSP3_SIF_INPUT = 0x76,

    AUDIO_DSP4_DVB_INPUT = 0x08,
    AUDIO_DSP4_DMARD_INPUT = 0x58,
    AUDIO_DSP4_SIF_INPUT = 0x78,

    AUDIO_AUIN0_INPUT = 0x02,
    AUDIO_AUIN1_INPUT = 0x12,
    AUDIO_AUIN2_INPUT = 0x22,
    AUDIO_AUIN3_INPUT = 0x32,
    AUDIO_AUIN4_INPUT = 0xA2,
    AUDIO_AUIN5_INPUT = 0xB2,
    AUDIO_AUMIC_INPUT = 0x72,

    AUDIO_ADC2_AUIN0_INPUT = 0x09,
    AUDIO_ADC2_AUIN1_INPUT = 0x19,
    AUDIO_ADC2_AUIN2_INPUT = 0x29,
    AUDIO_ADC2_AUIN3_INPUT = 0x39,
    AUDIO_ADC2_AUIN4_INPUT = 0xA9,
    AUDIO_ADC2_AUIN5_INPUT = 0xB9,
    AUDIO_ADC2_AUMIC_INPUT = 0x79,

    AUDIO_DMA_READER_INPUT = 0x0E,

    AUDIO_NULL_INPUT = 0xFF,
} AUDIO_INPUT_TYPE;

typedef enum
{
    AUDIO_DEBUG_LEVEL_FATAL,
    AUDIO_DEBUG_LEVEL_ERROR,
    AUDIO_DEBUG_LEVEL_WARN,
    AUDIO_DEBUG_LEVEL_INFO,
    AUDIO_DEBUG_LEVEL_DEBUG,
    AUDIO_DEBUG_LEVEL_VERBOSE,
}AUDIO_DEBUG_LEVEL;






typedef enum
{
    HDMI_RX_PCM = 0x0,
    HDMI_RX_DD = 0x1,
    HDMI_RX_DTS = 0x2,
    HDMI_RX_DDP = 0x3,
    HDMI_RX_DP = 0x4,
    HDMI_RX_Other = 0x5,
} AUDIO_HDMI_RX_TYPE;

typedef enum
{
    CODEC_NONE = 0x0,
    CODEC_LPCM = 0x1,
    CODEC_DD = 0x2,
    CODEC_MPEG1 = 0x3,
    CODEC_MP3 = 0x4,
    CODEC_MPEG2 = 0x5,
    CODEC_AAC = 0x6,
    CODEC_DTS = 0x7,
    CODEC_ATRAC = 0x8,
    CODEC_ONEBITAUDIO = 0x9,
    CODEC_DDP = 0xA,
    CODEC_DTSHD = 0xB,
    CODEC_TRUEHD = 0xC,
    CODEC_DST = 0xD,
    CODEC_WMAPRO = 0xE,
    CODEC_MAX = 0xF,
} AUDIO_FORMAT_CODE;


typedef enum
{
    HDMI_OUT_PCM,
    HDMI_OUT_NONPCM,
    HDMI_OUT_8CH_NONPCM,
    HDMI_OUT_BYPASS,
} HDMI_TX_OUTPUT_TYPE;


typedef enum
{
    AUDIO_AUOUT0_OUTPUT,
    AUDIO_AUOUT1_OUTPUT,
    AUDIO_AUOUT2_OUTPUT,
    AUDIO_AUOUT3_OUTPUT,
    AUDIO_SPDIF_OUTPUT,
    AUDIO_I2S_OUTPUT,
    AUDIO_HP_OUTPUT,
    AUDIO_I2S2_OUTPUT,
    AUDIO_HDMI_ARC_OUTPUT,
    AUDIO_HDMI_OUTPUT,
    AUDIO_I2S3_OUTPUT,
    AUDIO_I2S4_OUTPUT,
    AUDIO_NULL_OUTPUT = 0xFF,
} AUDIO_OUTPUT_TYPE;

typedef enum
{
    DIGITAL_SPDIF_OUTPUT,
    DIGITAL_HDMI_ARC_OUTPUT,
    DIGITAL_HDMI_OUTPUT,
    DIGITAL_I2S_OUTPUT,
    DIGITAL_MAX_OUTPUT,
} DIGITAL_OUTPUT_TYPE;

typedef enum
{
    DIGITAL_OUTPUT_CODEC_NOT_SPECIFIED,
    DIGITAL_OUTPUT_CODEC_AC3,
    DIGITAL_OUTPUT_CODEC_AC3P,
    DIGITAL_OUTPUT_CODEC_AAC,
    DIGITAL_OUTPUT_CODEC_DTS,
    DIGITAL_OUTPUT_CODEC_MAX,
} DIGITAL_OUTPUT_SPECIFIED_CODEC;

typedef enum
{
    DECODER_PCM_OUTPUT_TYPE1_DMX,
    DECODER_PCM_OUTPUT_TYPE2_6CH,
    DECODER_PCM_OUTPUT_TYPE3_8CH,
    DECODER_PCM_OUTPUT_TYPE4_DMX_8CH,
    DECODER_PCM_OUTPUT_TYPE5_DMX_8CH_PTR,
 } DECODER_PCM_OUTPUT_TYPE;





typedef enum
{
    AUDIO_I2S_MCLK,
    AUDIO_I2S_WORD_WIDTH,
    AUDIO_I2S_SOURCE_CH,
    AUDIO_I2S_FORMAT,
    AUDIO_I2S_RXMODE,
    AUDIO_I2S_TXMODE,
} AUDIO_I2S_MODE_TYPE;


typedef enum
{
    I2S_MCLK_64FS = 0x04,
    I2S_MCLK_128FS = 0x05,
    I2S_MCLK_256FS = 0x06,
    I2S_MCLK_384FS = 0x07,

    I2S_WORD_WIDTH_16BIT = 0x4,
    I2S_WORD_WIDTH_24BIT = 0x5,
    I2S_WORD_WIDTH_32BIT = 0x6,

    I2S_FORMAT_STANDARD = 0,
    I2S_FORMAT_LEFT_JUSTIFIED = 1,

    I2S_MASTER_MODE = 0,
    I2S_SLAVE_MODE = 1,
} AUDIO_I2S_MODE_VALUE;





typedef enum
{
    MPEG_ENCODE,
    DTS_ENCODE_2CH,
    DTS_ENCODE_MULTI,
    MP3_ENCODE,
    DD_DDENCODE,
    DD_DDCO,
}AUDIO_ENCODE_TYPE;


typedef enum
{
    DIGITAL_OUT_PCM,
    DIGITAL_OUT_DOLBYDIGITAL,
    DIGITAL_OUT_DTS,
    DIGITAL_OUT_AAC_LC,
    DIGITAL_OUT_NONE,
} AUDIO_DIGITAL_OUTPUT_TYPE;


typedef enum
{
    SPDIF_OUT_PCM = 0x0,
    SPDIF_OUT_AUTO = 0x2,
    SPDIF_OUT_NONPCM = 0x2,
    SPDIF_OUT_BYPASS,
    SPDIF_OUT_TRANSCODE,
    SPDIF_OUT_NONE,
} AUDIO_SPDIF_OUTPUT_TYPE;


typedef enum
{
    SPDIF_CS_CategoryCode = 0x0,
    SPDIF_CS_CopyRight = 0x1,
    SPDIF_CS_SourceNumber = 0x2,
    SPDIF_CS_ChannelNumber = 0x3,
    SPDIF_CS_SmpFreq = 0x4,
    SPDIF_CS_ClockAcc = 0x5,
    SPDIF_ChannelAB = 0x6,
    SPDIF_CS_CopyProtect = 0x7,
} AUDIO_SPDIF_CS_TYPE;


typedef enum
{
    SPDIF_CS_Category_BroadCast = 0x00,
    SPDIF_CS_Category_General = 0x01,
    SPDIF_CS_Category_BroadCast_JP = 0x02,
    SPDIF_CS_Category_BroadCast_EU = 0x03,
    SPDIF_CS_Category_BroadCast_USA = 0x04,
    SPDIF_CS_Category_Rev4 = 0x05,
    SPDIF_CS_Category_Rev5 = 0x06,
    SPDIF_CS_Category_Rev6 = 0x07,
    SPDIF_CS_CopyRight_CP = 0x08,
    SPDIF_CS_CopyRight_NonCP = 0x09,
    SPDIF_CS_SourceNumber_2 = 0x0A,
    SPDIF_CS_SourceNumber_5 = 0x0B,
    SPDIF_CS_SourceNumber_6 = 0x0C,
    SPDIF_CS_SourceNumber_Rev1 = 0x0D,
    SPDIF_CS_SourceNumber_Rev2 = 0x0E,
    SPDIF_CS_SourceNumber_Rev3 = 0x0F,
    SPDIF_CS_ChannelNumber_A_Left = 0x10,
    SPDIF_CS_ChannelNumber_B_Right = 0x11,
    SPDIF_CS_ChannelNumber_C = 0x12,
    SPDIF_CS_ChannelNumber_D = 0x13,
    SPDIF_CS_ChannelNumber_E = 0x14,
    SPDIF_CS_ChannelNumber_F = 0x15,
    SPDIF_CS_ChannelNumber_G = 0x16,
    SPDIF_CS_ChannelNumber_H = 0x17,
    SPDIF_CS_ChannelNumber_I = 0x18,
    SPDIF_CS_ChannelNumber_J = 0x19,
    SPDIF_CS_ChannelNumber_K = 0x1A,
    SPDIF_CS_SmpFreq_192 = 0x1B,
    SPDIF_CS_SmpFreq_176 = 0x1C,
    SPDIF_CS_SmpFreq_128 = 0x1D,
    SPDIF_CS_SmpFreq_96 = 0x1E,
    SPDIF_CS_SmpFreq_88 = 0x1F,
    SPDIF_CS_SmpFreq_64 = 0x20,
    SPDIF_CS_SmpFreq_48 = 0x21,
    SPDIF_CS_SmpFreq_44 = 0x22,
    SPDIF_CS_SmpFreq_32 = 0x23,
    SPDIF_CS_SmpFreq_24 = 0x24,
    SPDIF_CS_SmpFreq_22 = 0x25,
    SPDIF_CS_SmpFreq_16 = 0x26,
    SPDIF_CS_SmpFreq_Rev1 = 0x27,
    SPDIF_CS_SmpFreq_Rev2 = 0x28,
    SPDIF_CS_SmpFreq_Rev3 = 0x29,
    SPDIF_CS_SmpFreq_Rev4 = 0x2A,
    SPDIF_CS_SmpFreq_Rev5 = 0x2B,
    SPDIF_CS_ClockAcc_Lev1 = 0x2C,
    SPDIF_CS_ClockAcc_Lev2 = 0x2D,
    SPDIF_CS_ClockAcc_Lev3 = 0x2E,
    SPDIF_CS_ClockAcc_NotMatch = 0x2F,
    SPDIF_ChannelAB_Invalid_ON = 0x30,
    SPDIF_ChannelAB_Invalid_OFF = 0x31,
    SPDIF_CS_CopyProtect_CopyFree = 0x32,
    SPDIF_CS_CopyProtect_CopyOnce = 0x33,
    SPDIF_CS_CopyProtect_CopyNever = 0x34,
} AUDIO_SPDIF_CS_TYPE_STATUS;


typedef enum
{
    SPDIF_CHANNEL_STATUS_FS,
    SPDIF_CHANNEL_STATUS_CATEGORY,
    SPDIF_CHANNEL_STATUS_PCM_FORMAT,
    SPDIF_CHANNEL_STATUS_SOURCE_NUMBER,
    SPDIF_CHANNEL_STATUS_CHANNEL_NUMBER,
} SPDIF_CS_MODE_TYPE;

typedef enum
{
    SPDIF_CS_FS_32K = 0xC0,
    SPDIF_CS_FS_44K = 0x00,
    SPDIF_CS_FS_48K = 0x40,
    SPDIF_CS_CATEGORY_NONE = 0x00,
    SPDIF_CS_CATEGORY_DVB = 0x30,
    SPDIF_CS_CATEGORY_ATSC = 0x26,
    SPDIF_CS_CATEGORY_ISDB = 0x20,
    SPDIF_CS_FORMAT_PCM = 0x00,
    SPDIF_CS_FORMAT_NONPCM = 0x40,
}SPDIF_CS_MODE_VALUE;





typedef enum
{
    AU_SYS_NOT_READY,
    AU_SYS_M_BTSC,
    AU_SYS_M_EIAJ,
    AU_SYS_M_A2,

    AU_SYS_BG_A2,
    AU_SYS_DK1_A2,
    AU_SYS_DK2_A2,
    AU_SYS_DK3_A2,

    AU_SYS_BG_NICAM,
    AU_SYS_DK_NICAM,
    AU_SYS_I_NICAM,
    AU_SYS_L_NICAM,
    AU_SYS_FM_RADIO,
    AU_SYS_HI_DEV = 0x10,
    AU_SYS_BUSY = 0x80,
    STD_SEL_AUTO = 0xE0
}AUDIO_SIF_SET_STANDARD;


typedef enum
{
    A2_M_STANDARD = 0x00,
    A2_BG_STANDARD,
    A2_DK_STANDARD,
    A2_I_STANDARD,
    AM_STANDARD,
    NICAM_BG_STANDARD,
    NICAM_I_STANDARD,
    HIDEV_M_STANDARD,
    HIDEV_BG_STANDARD,
    HIDEV_DK_STANDARD,
    HIDEV_I_STANDARD,
    BTSC_STANDARD,
    FM_RADIO_STANDARD,
    WRITE_THRESHOLD = 0x10
}AUDIO_SIF_SYSTEM_TYPE;



typedef enum
{
    CARRIER1_ON_AMP = 0x00,
    CARRIER1_OFF_AMP,
    CARRIER1_ON_NSR,
    CARRIER1_OFF_NSR,
    CARRIER2_ON_AMP,
    CARRIER2_OFF_AMP,
    CARRIER2_ON_NSR,
    CARRIER2_OFF_NSR,
    A2_PILOT_ON_AMP,
    A2_PILOT_OFF_AMP,

    NICAM_ON_SIGERR = 0x0,
    NICAM_OFF_SIGERR = 0x1,

    BTSC_MONO_ON_NSR_RATIO = 0x0,
    BTSC_MONO_OFF_NSR_RATIO = 0x1,
    BTSC_PILOT_AMPLITUDE_ON = 0x2,
    BTSC_PILOT_AMPLITUDE_OFF = 0x3,
    BTSC_SAP_ON_NSR_RATIO = 0x4,
    BTSC_SAP_OFF_NSR_RATIO = 0x5,
    BTSC_STEREO_ON_RATIO = 0x6,
    BTSC_STEREO_OFF_NSR_RATIO = 0x7,
    BTSC_SAP_AMPLITUDE_ON = 0x8,
    BTSC_SAP_AMPLITUDE_OFF = 0x9,
    BTSC_HIDEV_ON_NSR_RATIO = 0xA,
    BTSC_HIDEV_OFF_NSR_RATIO = 0xB
}AUDIO_SIF_THRESHOLD_TYPE;


typedef enum
{
    PRESCALE_STEP_ONE_DB = 0x04,
    SET_PRESCALE_A2_FM = 0x00,
    SET_PRESCALE_NICAM = 0x01,
    SET_PRESCALE_AM = 0x02,
    SET_PRESCALE_HIDEV = 0x03,
    SET_PRESCALE_FM_M = 0x04,
    SET_PRESCALE_HIDEV_M = 0x05,

    SET_PRESCALE_BTSC = 0x00,
    SET_PRESCALE_BTSC_MONO = 0x01,
    SET_PRESCALE_BTSC_STEREO = 0x02,
    SET_PRESCALE_BTSC_SAP = 0x03,

    SET_PRESCALE_FM_RADIO = 0x00,
    SET_PRESCALE_FM_RADIO_MONO = 0x01,
    SET_PRESCALE_FM_RADIO_STEREO = 0x02

}AUDIO_SIF_GAIN_TYPE;

enum
{
    AU_STATUS_MUTE = 0x00,
    AU_STATUS_MONO = 0x01,
    AU_STATUS_STEREO = 0x02,
    AU_STATUS_SAP = 0x04,
    AU_STATUS_NICAM = 0x08,
    AU_STATUS_NICAM_MONO = 0x10
};


typedef enum
{

    AU_SIF_CMD_SET_STOP = 0x00,
    AU_SIF_CMD_SET_PLAY = 0x01,
    AU_SIF_CMD_ENABLE_HIDEV = 0x02,
    AU_SIF_CMD_SET_HIDEV_FILTER_BW_LEVEL= 0x03,
    AU_SIF_CMD_RESET_FC_TRACKING = 0x04,
    AU_SIF_CMD_ENABLE_FC_TRACKING = 0x05,
    AU_SIF_CMD_SET_ADC_FROM_VIF_PATH = 0x06,
    AU_SIF_CMD_ENABLE_AUTO_MUTE = 0x07,
    AU_SIF_CMD_ENABLE_BEEPER_FUNCTION = 0x08,
    AU_SIF_CMD_SET_BEEPER_TONE = 0x09,
    AU_SIF_CMD_ENABLE_AGC = 0x0A,
    AU_SIF_CMD_RESET_AGC = 0x0B,
    AU_SIF_CMD_STANDARD_RESET = 0x0C,
    AU_SIF_CMD_DETECT_MAIN_STD_ONLY = 0x0D,
    AU_SIF_CMD_ENABLE_AUTO_SOUNDMODE = 0x0E,
    AU_SIF_CMD_SET_FM_RADIO_DeEmp = 0x0F,
    AU_SIF_CMD_SET_FM_RADIO_FC_TRACK = 0x10,
    AU_SIF_CMD_FM_RADIO_RESET = 0x11,
    AU_SIF_CMD_FMTX_SET_PREEMP = 0x12,
    AU_SIF_CMD_SET_ENC_CMD = 0x13,
    AU_SIF_CMD_SET_ENC_Input_attenuation = 0x14,
    AU_SIF_CMD_SET_ENC_Output_scaling = 0x15,
    AU_SIF_CMD_SET_BTSC_Enc_M_Gain =0x16,
    AU_SIF_CMD_SET_BTSC_Enc_D_Gain = 0x17,
    AU_SIF_CMD_SET_BTSC_Enc_SAP_Gain = 0x18,


    AU_SIF_CMD_SET_STD = 0x40,
    AU_SIF_CMD_SET_SUB_CARRIER_STD = 0x41,
    AU_SIF_CMD_SET_CARRIER_DEBOUNCE = 0x42,
    AU_SIF_CMD_ENABLE_SIF_SYNTHESIZER = 0x43,
    AU_SIF_CMD_ENABLE_CHANNEL = 0x44,
    AU_SIF_CMD_SET_SIFFIFO_MODE = 0x45,
    AU_SIF_CMD_DK123_MONITOR = 0x46,


    AU_SIF_CMD_GET_HIDEV_ENABLE = 0x80,
    AU_SIF_CMD_GET_HIDEV_FILTER_BW_LEVEL= 0x81,
    AU_SIF_CMD_GET_ADC_FROM_VIF_PATH = 0x82,
    AU_SIF_CMD_GET_FM_A2_MODE_STATUS = 0x83,
    AU_SIF_CMD_GET_BTSC_MODE_STATUS = 0x84,
    AU_SIF_CMD_GET_NICAM_MODE_STATUS = 0x85,
    AU_SIF_CMD_GET_STANDARD_STATUS = 0x86,
    AU_SIF_CMD_GET_STANDARD_CMD = 0x87,
    AU_SIF_CMD_GET_NSR_CMD = 0x88,
    AU_SIF_CMD_GET_AMP_CMD = 0x89,
    AU_SIF_CMD_GET_FM_RADIO_MODE_STATUS = 0x8A,
    AU_SIF_CMD_GET_FM_RADIO_DC_AMP = 0x8B,
    AU_SIF_CMD_GET_FM_RADIO_NSR = 0x8C,
    AU_SIF_CMD_GET_VIF_PATCH_ENABLE = 0x90,
    AU_SIF_CMD_SET_SIF_SHIFT_CLK = 0x91,
    AU_SIF_CMD_SET_FM_CH2_FILTER_BW_LEVEL= 0x92,

    AU_SIF_CMD2_ADC_VIA_VIF_PIN = 0x01
} AU_SIF_CMD;

#if defined(UFO_PUBLIC_HEADER_212)

typedef enum
{
    AU_DVB_STANDARD_INVALID = 0xFF,
    AU_DVB_STANDARD_DEC_DSP = 0x00,
    AU_DVB_STANDARD_DEC_DSP_EXT = 0x10,
    AU_DVB_NONE = 0x00,
    AU_DVB_DEC_NONE,
    AU_DVB_ENC_NONE,
    AU_DVB_STANDARD_MPEG,
    AU_DVB_STANDARD_AC3,
    AU_DVB_STANDARD_AC3P,
    AU_DVB_STANDARD_AAC,
    AU_DVB_STANDARD_MP3,
    AU_DVB_STANDARD_WMA,
    AU_DVB_STANDARD_RESERVE3,
    AU_DVB_STANDARD_RA8LBR,
    AU_DVB_STANDARD_XPCM,
    AU_DVB_STANDARD_TONE,
    AU_DVB_STANDARD_DTS,
    AU_DVB_STANDARD_MS10_DDT,
    AU_DVB_STANDARD_MS10_DDC,
    AU_DVB_STANDARD_WMA_PRO,
    AU_DVB_STANDARD_FLAC,
    AU_DVB_STANDARD_VORBIS,
    AU_DVB_STANDARD_DTSLBR,
    AU_DVB_STANDARD_AMR_NB,
    AU_DVB_STANDARD_AMR_WB,
    AU_DVB_STANDARD_DRA,
    AU_DVB_STANDARD_MPEG_AD,
    AU_DVB_STANDARD_DolbyTrueHD_Bypass,
    AU_DVB_STANDARD_DTSHD_ADO,
    AU_DVB_STANDARD_MAX,

    AU_DVB_STANDARD_ENC = 0x20,
    AU_DVB_STANDARD_MPEG_EN = 0x20,

    AU_DVB2_STANDARD_SE_DSP = 0x30,

    AU_DVB2_NONE = 0x30,
    AU_DVB2_STANDARD_MPEG_AD ,
    AU_DVB2_STANDARD_AC3_AD,
    AU_DVB2_STANDARD_AC3P_AD,
    AU_DVB2_STANDARD_AAC_AD,
    AU_DVB2_STANDARD_DDE,
    AU_DVB2_STANDARD_GAAC_AD,
    AU_DVB2_STANDARD_MP3,
    AU_DVB2_STANDARD_MPEG_EN,
    AU_DVB2_STANDARD_XPCM,
    AU_DVB2_STANDARD_KTV,
    AU_DVB2_STANDARD_KTV2,
    AU_DVB2_STANDARD_DTS,
    AU_DVB2_STANDARD_TONEGEN,
    AU_DVB2_STANDARD_DolbyTrueHD_Bypass,
    AU_DVB2_STANDARD_DTSHD_ADO,
    AU_DVB2_STANDARD_MAX,

    AU_DVB2_ADVSND = 0x40,
    AU_DVB2_ADVSND_PL2 = 0x40,
    AU_DVB2_ADVSND_BBE,
    AU_DVB2_ADVSND_SRS,
    AU_DVB2_ADVSND_VDS,
    AU_DVB2_ADVSND_VSPK,
    AU_DVB2_ADVSND_SUPV,
    AU_DVB2_ADVSND_TSHD,
    AU_DVB2_ADVSND_DTS_ULTRA_TV,
    AU_DVB2_ADVSND_TSHDVIQ,
    AU_DVB2_ADVSND_AUDSY,
    AU_DVB2_ADVSND_DBX,
    AU_DVB2_ADVSND_THEATERSOUND,
    AU_DVB2_ADVSND_PURESND,
    AU_DVB2_ADVSND_STUDIOSOUND_3D,
    AU_DVB2_ADVSND_MAX,

    AU_DEC_SYSTEM = 0x50,
    AU_SE_SYSTEM = 0x60,

    AU_KTV_ENC = 0x70,
    AU_KTV_FUNC = 0x80,
    AU_KTV_SYSTEM = 0x90,

    AU_SND_EFFECT = 0xa0,

    AU_STANDARD_SIF_TYPE = 0xb0,
    AU_SIF_NONE = 0xb0,
    AU_SIF_BTSC ,
    AU_SIF_EIAJ,
    AU_SIF_PALSUM,
    AU_SIF_FM_RADIO,

    AU_ATVENC_NONE = 0xc0,
    AU_ATVENC_FMTx,
    AU_ATVENC_BTSC,

    AU_DVB2_ENCODE_NONE = 0xd0,
    AU_DVB2_ENCODE_DTSE = 0xd1,
    AU_DVB2_ENCODE_MS10_DDE = 0xd2,
    AU_DVB2_ENCODE_DDE = 0xd3,
    AU_DVB2_ENCODE_MAX,

    AU_DEC_ES_BYPASS,

}AUDIO_DSP_CODE_TYPE;
#endif

typedef enum
{
    AU_SIF_PAL_MONO,
    AU_SIF_PAL_HIDEV,
    AU_SIF_PAL_A2,
    AU_SIF_PAL_NICAM
}AUDIO_SIF_PAL_TYPE;

typedef enum
{
    AU_MODE_MONO,
    AU_MODE_STEREO,
    AU_MODE_SAP,
    AU_MODE_LANG_A,
    AU_MODE_LANG_B,
    AU_MODE_LANG_AB,
    AU_MODE_FORCE_NICAM,
    AU_MODE_NICAM_MONO,
    AU_MODE_AUTO = 0x80
} AUDIO_SIF_SOUND_MODE;






typedef enum
{
    DSP_DEC_MAIN_COUNTER,
    DSP_DEC_TIMER_COUNTER,
    DSP_SE_MAIN_COUNTER,
    DSP_SE_TIMER_COUNTER,
    DSP_SE_ISR_COUNTER,
    DEC_R2_MAIN_COUNTER,
    DEC_R2_TIMER_COUNTER,
    SND_R2_MAIN_COUNTER,
    SND_R2_TIMER_COUNTER
} AUDIO_DSP_COUNTER_TYPE;


typedef enum
{
    MSAPI_AUD_DVB_INVALID = 0xFF,


    MSAPI_AUD_DVB_NONE = 0x00,
    MSAPI_AUD_DVB_MPEG,
    MSAPI_AUD_DVB_AC3,
    MSAPI_AUD_DVB_AC3P,
    MSAPI_AUD_DVB_AAC,
    MSAPI_AUD_DVB_MP3,
    MSAPI_AUD_DVB_WMA,
    MSAPI_AUD_DVB_CDLPCM,
    MSAPI_AUD_DVB_RA8LBR,
    MSAPI_AUD_DVB_XPCM,
    MSAPI_AUD_DVB_TONE,
    MSAPI_AUD_DVB_DTS,
    MSAPI_AUD_DVB_MS10_DDT,
    MSAPI_AUD_DVB_MS10_DDC,
    MSAPI_AUD_DVB_WMA_PRO,
    MSAPI_AUD_DVB_FLAC,
    MSAPI_AUD_DVB_VORBIS,
    MSAPI_AUD_DVB_DTSLBR,
    MSAPI_AUD_DVB_AMR_NB,
    MSAPI_AUD_DVB_AMR_WB,
    MSAPI_AUD_DVB_DRA,
    MSAPI_AUD_DVB_DolbyTrueHDBypass,
    MSAPI_AUD_DVB_DTSHDADO,
    MSAPI_AUD_DVB_DTSXLL,
    MSAPI_AUD_DVB_ES_Bypass,
    MSAPI_AUD_DVB_MAX,


    MSAPI_AUD_DVB2_NONE = 0x30,
    MSAPI_AUD_DVB2_MPEG,
    MSAPI_AUD_DVB2_AC3,
    MSAPI_AUD_DVB2_MP3,
    MSAPI_AUD_DVB2_AAC,
    MSAPI_AUD_DVB2_GAAC,
    MSAPI_AUD_DVB2_AC3P,
    MSAPI_AUD_DVB2_DDE,
    MSAPI_AUD_DVB2_DTSE,
    MSAPI_AUD_DVB2_XPCM,
    MSAPI_AUD_DVB2_KTV,
    MSAPI_AUD_DVB2_KTV2,
    MSAPI_AUD_DVB2_DTS,
    MSAPI_AUD_DVB2_TONEGEN,
    MSAPI_AUD_DVB2_DolbyTrueHDBypass,
    MSAPI_AUD_DVB2_DTSHDADO,
    MSAPI_AUD_DVB2_MAX,


    MSAPI_AUD_ATV_NONE = 0xB0,
    MSAPI_AUD_ATV_BTSC,
    MSAPI_AUD_ATV_EIAJ,
    MSAPI_AUD_ATV_PAL,
    MSAPI_AUD_ATV_FM_RADIO,
    MSAPI_AUD_ATV_MAX,


    MSAPI_AUD_ATVENC_NONE = 0xC0,
    MSAPI_AUD_ATVENC_FMTX,
    MSAPI_AUD_ATVENC_BTSC,
    MSAPI_AUD_ATVENC_MAX
} En_DVB_decSystemType;

typedef enum
{
    Audio_DEC_SYS = 0x00000000,
    Audio_DEC_PCM = 0x00000001,
    Audio_DEC_XPCM = 0x00000002,
    Audio_DEC_MPEG = 0x00000004,
    Audio_DEC_MP3 = 0x00000008,
    Audio_DEC_AC3 = 0x00000010,
    Audio_DEC_AC3P = 0x00000020,
    Audio_DEC_AAC_LC = 0x00000040,
    Audio_DEC_HEAAC_V1 = 0x00000080,
    Audio_DEC_HEAAC_V2 = 0x00000100,
    Audio_DEC_DOLBYPULSE = 0x00000200,
    Audio_DEC_WMA = 0x00000400,
    Audio_DEC_WMAPRO = 0x00000800,
    Audio_DEC_RA8 = 0x00001000,
    Audio_DEC_DTS = 0x00002000,
    Audio_DEC_FLAC = 0x00004000,
    Audio_DEC_VORBIS = 0x00008000,
    Audio_DEC_KTV = 0x00010000,
    Audio_DEC_KTV2 = 0x00020000,
    Audio_DEC_AMR_NB = 0x00040000,
    Audio_DEC_AMR_WB = 0x00080000,
    Audio_DEC_DRA = 0x00100000,
    Audio_DEC_DTSLBR = 0x00200000,
    Audio_DEC_Dolby_TrueHD_Bypass_R2 = 0x00400000,
    Audio_DEC_DTS_HD_ADO_R2 = 0x00800000,
    Audio_DEC_DTSXLL = 0x01000000,
    Audio_DEC_NULL = 0xFFFFFFFF

} MMA_AudioType;


typedef enum
{
    MMA_STOP,
    MMA_PLAY,
    MMA_PLAY_FILETSP,
    MMA_RESYNC,
    MMA_PLAY_FILE,
    MMA_BROWSE,
    MMA_PAUSE,
    MMA_PLAY_FRAME,
    MMA_PLAY_FRAME_GS,
    MMA_PLAY_AD,
    MMA_STOP_AD,
    MMA_AVSYNC,
    MMA_FREERUN,
} MMA_AUDIO_CONTROL;

typedef enum
{

    Audio_Comm_infoType_MMA_init = 0x60,
    Audio_Comm_infoType_MMA_finish,
    Audio_Comm_infoType_STC_Select,
    Audio_Comm_infoType_HDMI_ChannelStatus_1st_64bits,
    Audio_Comm_infoType_HDMI_ChannelStatus_2nd_64bits,
    Audio_Comm_infoType_HDMI_ChannelStatus_3rd_64bits,
    Audio_Comm_infoType_HDMI_UserData_1st_64bits,
    Audio_Comm_infoType_HDMI_UserData_2nd_64bits,
    Audio_Comm_infoType_HDMI_UserData_3rd_64bits,
    Audio_Comm_infoType_HDMI_HWbypassmode,
    Audio_Comm_infoType_setHdmiDelay,
    Audio_Comm_infoType_Is_Audio_Sync,
    Audio_comm_infoType_Get_Main_Input_Source_Info,
    Audio_comm_infoType_Get_Sub_Input_Source_Info,
    Audio_comm_infoType_Set_Input_Path,





    Audio_Comm_infoType_ADEC1_capability = 0x70,
    Audio_Comm_infoType_ADEC1_setAudioDecoder,
    Audio_Comm_infoType_ADEC1_currAudDecStatus,
    Audio_Comm_infoType_ADEC1_AudioSyncStatus,
    Audio_Comm_infoType_ADEC1_sampleRate,
    Audio_Comm_infoType_ADEC1_bitRate,
    Audio_Comm_infoType_ADEC1_acmod,
    Audio_Comm_infoType_ADEC1_soundmod,
    Audio_Comm_infoType_ADEC1_reqDataSize,
    Audio_Comm_infoType_ADEC1_okFrmCnt,
    Audio_Comm_infoType_ADEC1_errFrmCnt,
    Audio_Comm_infoType_ADEC1_1ms_timeStamp,
    Audio_Comm_infoType_ADEC1_33bit_PTS,
    Audio_Comm_infoType_ADEC1_33bit_STCPTS_DIFF,
    Audio_Comm_infoType_ADEC1_esBuf_reqFlag,
    Audio_Comm_infoType_ADEC1_esBuf_reqAddr,
    Audio_Comm_infoType_ADEC1_esBuf_reqSize,
    Audio_Comm_infoType_ADEC1_esBuf_informDataRdy,
    Audio_Comm_infoType_ADEC1_esBuf_currLevel,
    Audio_Comm_infoType_ADEC1_pcmBuf_currLevel,
    Audio_Comm_infoType_ADEC1_playControl,
    Audio_Comm_infoType_ADEC1_FF2X,
    Audio_Comm_infoType_ADEC1_mute,
    Audio_Comm_infoType_syncSTC_in_mmTs,
    Audio_Comm_infoType_ADEC1_play_wo_output,
    Audio_Comm_infoType_ADEC1_audio_unsupported,
    Audio_Comm_infoType_ADEC1_UNI_PCMOutCnt,
    Audio_Comm_infoType_ADEC1_UNI_pcm_wptr,
    Audio_Comm_infoType_ADEC1_UNI_pcm_decSize,
    Audio_Comm_infoType_ADEC1_UNI_PCMInput_Addr,
    Audio_Comm_infoType_ADEC1_UNI_OutPCMLevel,
    Audio_Comm_infoType_ADEC1_avSyncOffset,
    Audio_Comm_infoType_ADEC1_Set_play_smpRate = 0x1000,
    Audio_Comm_infoType_ADEC1_Get_PTS_latency,
    Audio_Comm_infoType_ADEC1_Get_PCM_bufferEmpty,





    Audio_Comm_infoType_ADEC1_setDecParam = 0x8F,
    Audio_Comm_infoType_ADEC1_getDecInfo1 = 0x90,
    Audio_Comm_infoType_ADEC1_getDecInfo2,
    Audio_Comm_infoType_ADEC1_getDecInfo3,
    Audio_Comm_infoType_ADEC1_getDecInfo4,
    Audio_Comm_infoType_ADEC1_getDecInfo5,
    Audio_Comm_infoType_ADEC1_getDecInfo6,
    Audio_Comm_infoType_ADEC1_getDecInfo7,
    Audio_Comm_infoType_ADEC1_getDecInfo8,
    Audio_Comm_infoType_ADEC1_getDecChannelInfo,
    Audio_Comm_infoType_ADEC1_getlatest_PTS,
    Audio_Comm_infoType_ADEC1_avsync_delay,
    Audio_Comm_infoType_ADEC1_avsync_delay_upperlimit,





    Audio_Comm_infoType_ADEC2_capability = 0xA0,
    Audio_Comm_infoType_ADEC2_setAudioDecoder,
    Audio_Comm_infoType_ADEC2_currAudDecStatus,
    Audio_Comm_infoType_ADEC2_AudioSyncStatus,
    Audio_Comm_infoType_ADEC2_sampleRate,
    Audio_Comm_infoType_ADEC2_bitRate,
    Audio_Comm_infoType_ADEC2_acmod,
    Audio_Comm_infoType_ADEC2_soundmod,
    Audio_Comm_infoType_ADEC2_reqDataSize,
    Audio_Comm_infoType_ADEC2_okFrmCnt,
    Audio_Comm_infoType_ADEC2_errFrmCnt,
    Audio_Comm_infoType_ADEC2_1ms_timeStamp,
    Audio_Comm_infoType_ADEC2_33bit_PTS,
    Audio_Comm_infoType_ADEC2_33bit_STCPTS_DIFF,
    Audio_Comm_infoType_ADEC2_esBuf_reqFlag,
    Audio_Comm_infoType_ADEC2_esBuf_reqAddr,
    Audio_Comm_infoType_ADEC2_esBuf_reqSize,
    Audio_Comm_infoType_ADEC2_esBuf_informDataRdy,
    Audio_Comm_infoType_ADEC2_esBuf_currLevel,
    Audio_Comm_infoType_ADEC2_pcmBuf_currLevel,
    Audio_Comm_infoType_ADEC2_playControl,
    Audio_Comm_infoType_ADEC2_FF2X,
    Audio_Comm_infoType_ADEC2_mute,
    Audio_Comm_infoType_ADEC2_syncSTC_in_mmTs,
    Audio_Comm_infoType_ADEC2_play_wo_output,
    Audio_Comm_infoType_ADEC2_audio_unsupported,
    Audio_Comm_infoType_ADEC2_UNI_PCMOutCnt,
    Audio_Comm_infoType_ADEC2_UNI_pcm_wptr,
    Audio_Comm_infoType_ADEC2_UNI_pcm_decSize,
    Audio_Comm_infoType_ADEC2_UNI_PCMInput_Addr,
    Audio_Comm_infoType_ADEC2_UNI_OutPCMLevel,
    Audio_Comm_infoType_ADEC2_avSyncOffset,





    Audio_Comm_infoType_ADEC2_setDecParam = 0xBF,
    Audio_Comm_infoType_ADEC2_getDecInfo1 = 0xC0,
    Audio_Comm_infoType_ADEC2_getDecInfo2,
    Audio_Comm_infoType_ADEC2_getDecInfo3,
    Audio_Comm_infoType_ADEC2_getDecInfo4,
    Audio_Comm_infoType_ADEC2_getDecInfo5,
    Audio_Comm_infoType_ADEC2_getDecInfo6,
    Audio_Comm_infoType_ADEC2_getDecInfo7,
    Audio_Comm_infoType_ADEC2_getDecInfo8,
    Audio_Comm_infoType_ADEC2_getDecChannelInfo,





    Audio_Comm_infoType_ADEC3_capability = 0xD0,
    Audio_Comm_infoType_ADEC3_setAudioDecoder,
    Audio_Comm_infoType_ADEC3_currAudDecStatus,
    Audio_Comm_infoType_ADEC3_AudioSyncStatus,
    Audio_Comm_infoType_ADEC3_sampleRate,
    Audio_Comm_infoType_ADEC3_bitRate,
    Audio_Comm_infoType_ADEC3_acmod,
    Audio_Comm_infoType_ADEC3_soundmod,
    Audio_Comm_infoType_ADEC3_reqDataSize,
    Audio_Comm_infoType_ADEC3_okFrmCnt,
    Audio_Comm_infoType_ADEC3_errFrmCnt,
    Audio_Comm_infoType_ADEC3_1ms_timeStamp,
    Audio_Comm_infoType_ADEC3_33bit_PTS,
    Audio_Comm_infoType_ADEC3_33bit_STCPTS_DIFF,
    Audio_Comm_infoType_ADEC3_esBuf_reqFlag,
    Audio_Comm_infoType_ADEC3_esBuf_reqAddr,
    Audio_Comm_infoType_ADEC3_esBuf_reqSize,
    Audio_Comm_infoType_ADEC3_esBuf_informDataRdy,
    Audio_Comm_infoType_ADEC3_esBuf_currLevel,
    Audio_Comm_infoType_ADEC3_pcmBuf_currLevel,
    Audio_Comm_infoType_ADEC3_playControl,
    Audio_Comm_infoType_ADEC3_FF2X,
    Audio_Comm_infoType_ADEC3_mute,
    Audio_Comm_infoType_ADEC3_syncSTC_in_mmTs,
    Audio_Comm_infoType_ADEC3_play_wo_output,
    Audio_Comm_infoType_ADEC3_audio_unsupported,
    Audio_Comm_infoType_ADEC3_UNI_PCMOutCnt,
    Audio_Comm_infoType_ADEC3_UNI_pcm_wptr,
    Audio_Comm_infoType_ADEC3_UNI_pcm_decSize,
    Audio_Comm_infoType_ADEC3_UNI_PCMInput_Addr,
    Audio_Comm_infoType_ADEC3_UNI_OutPCMLevel,
    Audio_Comm_infoType_ADEC3_avSyncOffset,





    Audio_Comm_infoType_ADEC3_setDecParam = 0xEF,
    Audio_Comm_infoType_ADEC3_getDecInfo1 = 0xF0,
    Audio_Comm_infoType_ADEC3_getDecInfo2,
    Audio_Comm_infoType_ADEC3_getDecInfo3,
    Audio_Comm_infoType_ADEC3_getDecInfo4,
    Audio_Comm_infoType_ADEC3_getDecInfo5,
    Audio_Comm_infoType_ADEC3_getDecInfo6,
    Audio_Comm_infoType_ADEC3_getDecInfo7,
    Audio_Comm_infoType_ADEC3_getDecInfo8,
    Audio_Comm_infoType_ADEC3_getDecChannelInfo,
    Audio_Comm_infoType_ADEC3_getlatest_PTS,
    Audio_Comm_infoType_ADEC3_avsync_delay,
    Audio_Comm_infoType_ADEC3_avsync_delay_upperlimit,




    Audio_Comm_infoType_DecStatus = 0x00,
    Audio_Comm_infoType_SampleRate,
    Audio_Comm_infoType_SoundMode,
    Audio_Comm_infoType_DecOutMode,
    Audio_Comm_infoType_ChannelMode,
    Audio_Comm_infoType_MMFileSize,
    Audio_Comm_infoType_33Bit_PTS,
    Audio_Comm_infoType_33Bit_STCPTS_DIFF,
    Audio_Comm_infoType_1ms_PTS,
    Audio_Comm_infoType_DEC1_BufferSize,
    Audio_Comm_infoType_DEC1_BufferAddr,
    Audio_Comm_infoType_DEC1_MMTag,
    Audio_Comm_infoType_DEC1_MMResidualPCM,
    Audio_Comm_infoType_DEC1_ESBufferSize,
    Audio_Comm_infoType_DEC1_PCMBufferSize,
    Audio_Comm_infoType_DEC2_BufferSize,
    Audio_Comm_infoType_DEC2_BufferAddr = 0x10,
    Audio_Comm_infoType_DEC2_MMTag,
    Audio_Comm_infoType_DEC2_MMResidualPCM,
    Audio_Comm_infoType_DecodeErrorCnt,
    Audio_Comm_infoType_MM_FFx2,
    Audio_Comm_infoType_setBypassSPDIF_PAPB_chk,
    Audio_Comm_infoType_CompressBin_LoadCode,
    Audio_Comm_infoType_CompressBin_DDRAddress,
    Audio_Comm_infoType_DMAReader_BufferLevel,
    Audio_Comm_infoType_DMAReader_Command,
    Audio_Comm_infoType_SetSCMS,
    Audio_Comm_infoType_GetSCMS,
    Audio_Comm_infoType_ADC_InputGain,
    Audio_Comm_infoType_KTV_SetType,
    Audio_Comm_infoType_getSignal_Energy,
    Audio_Comm_infoType_getNR_Status,
    Audio_Comm_infoType_setNR_Threshold = 0x20,
    Audio_Comm_infoType_setSPDIF_FS,
    Audio_Comm_infoType_getSPDIF_FS,
    Audio_Comm_infoType_setSpdifDelay,
    Audio_Comm_infoType_ReadByte,
    Audio_Comm_infoType_WriteByte,
    Audio_Comm_infoType_hdmiTx_outType,
    Audio_Comm_infoType_hdmiTx_outFreq,
    Audio_Comm_infoType_PTS_info,
    Audio_Comm_infoType_RTSP_Mem,
    Audio_Comm_infoType_setSpdif_BufferProcess,
    Audio_Comm_infoType_DEC1_setBufferProcess,
    Audio_Comm_infoType_setES_REQ_SZ,
    Audio_Comm_infoType_AD_OutputStyle,
    Audio_Comm_infoType_getHDMI_CopyRight_C_Bit,
    Audio_Comm_infoType_getHDMI_CopyRight_L_Bit,
    Audio_Comm_infoType_Set_UNI_NEED_DECODE_FRMCNT = 0x30,
    Audio_Comm_infoType_Set_UNI_ES_Wptr,
    Audio_Comm_infoType_Get_UNI_ES_MEMCNT,
    Audio_Comm_infoType_Set_MENU_WT_PTR,
    Audio_Comm_infoType_Get_MENU_WT_PTR,
    Audio_Comm_infoType_Get_MENU_KEY_CNT,
    Audio_Comm_infoType_Get_CurSynthRate,
    Audio_Comm_infoType_ADC1_InputGain,
    Audio_Comm_infoType_mainpath_mute_status,
    Audio_Comm_infoType_spdif_mute_status,
    Audio_Comm_infoType_hdmiTX_mute_status,
    Audio_Comm_infoType_SRC_Compensation,
    Audio_Comm_infoType_Dump_Dsp_Info,
    Audio_Comm_infoType_Set_Video_STCPTS_DIFF,
    Audio_Comm_infoType_Get_UNI_ES_Base,
    Audio_Comm_infoType_Get_UNI_ES_Size,
    Audio_Comm_infoType_Get_UNI_PCM_Base = 0x40,
    Audio_Comm_infoType_Get_UNI_PCM_Size,
    Audio_Comm_infoType_Get_AccumEsCnt,
    Audio_Comm_infoType_DSP_PLL_Setting,
    Audio_Comm_infoType_Set_CallBackFunc,
    Audio_Comm_infoType_Set_ALSA_Mode,
    Audio_Comm_infoType_HDMI_Unstable_Protect,
    Audio_Comm_infoType_HDMI_Unstable_Threshold,
    Audio_Comm_infoType_Set_TEE_Capibility,
    Audio_Comm_infoType_Parser_Spec,
    Audio_Comm_infoType_Get_MultiPlayer_Capability,
    Audio_Comm_infoType_Get_Parser_Architecture,
    Audio_Comm_infoType_Set_CfgCtrlRegs_Lock,
    Audio_Comm_infoType_DMAReader_BufferSize,
    Audio_Comm_infoType_PUSI_disable_Info,
    Audio_Comm_infoType_Set_Parser,
    Audio_Comm_infoType_Parser_Info = 0x50,
    Audio_Comm_infoType_Get_Dolby_TrueHD_Bypass_Capability,
    Audio_Comm_infoType_Set_DFS_PowerSave,
    Audio_Comm_infoType_Is_Decoder_In_R2,
    Audio_comm_infoType_Get_audio_crash_status,
    Audio_Comm_infoType_mainAudio_setBufferProcess,
    Audio_comm_infoType_Get_Main_Input_Type,
    Audio_comm_infoType_Get_Sub_Input_Type,
    Audio_Comm_infoType_Multi_Channel,
    Audio_Comm_infoType_Vorbis_header_size = 0x5F,

    Audio_Comm_infoType_ES_PassThrough_DelaySmp = 0x2000,
    Audio_Comm_infoType_ES_PassThrough_PcmSmpRate,
    Audio_Comm_infoType_ES_PassThrough_HdmiSmpRate,

    Audio_Comm_infoType_HDMITx_Status,

    Audio_Comm_infoType_set_PAL_M_Type = 0x4000,
    Audio_Comm_infoType_set_PAL_N_Type,
    Audio_Comm_infoType_set_BTSC_M_Type,





    Audio_Comm_infoType_Get_SE_Input_Main_BufferBase = 0x8000,
    Audio_Comm_infoType_Get_SE_Input_Main_BufferSize,
    Audio_Comm_infoType_Get_SE_Output_Main_BufferBase,
    Audio_Comm_infoType_Get_SE_Output_Main_BufferSize,
    Audio_Comm_infoType_Get_SE_PROCESS_FRAME_SMP_UNIT,
    Audio_Comm_infoType_Get_SE_PROCESS_FETCH_CHANNELS,
    Audio_Comm_infoType_Get_SE_PROCESS_STORE_CHANNELS,
    Audio_Comm_infoType_Get_SE_PROCESS_FETCH_FRAME_BYTE_SIZE,
    Audio_Comm_infoType_Get_SE_PROCESS_STORE_FRAME_BYTE_SIZE,
    Audio_Comm_infoType_Set_SE_Input_Main_Buffer_Feed = 0x8100,
    Audio_Comm_infoType_Set_SE_Output_Main_Buffer_Consume,
    Audio_Comm_infoType_Set_SE_Test_Init,
    Audio_Comm_infoType_Set_SE_Test_End,
    Audio_Comm_infoType_Set_SE_TONE_Test_Begin,
    Audio_Comm_infoType_Set_SE_PEQ_Test_Begin,
    Audio_Comm_infoType_Set_SE_GEQ_Test_Begin,
    Audio_Comm_infoType_Set_SE_AVC_Test_Begin,
    Audio_Comm_infoType_Set_SE_SRS_THEATER_SOUND_Begin,
    Audio_Comm_infoType_Set_SE_SONICEMOTION_ABS3D_Begin,
    Audio_Comm_infoType_Set_SE_BONGIOVI_DPS_Begin,
    Audio_Comm_infoType_Set_Debug_LOG_Level,
    Audio_Comm_infoType_Get_Dra_ChannelMode,
    Audio_Comm_infoType_Get_Max_DelayTime,
    Audio_Comm_infoType_Get_Min_DelayTime,
    Audio_Comm_infoType_Set_SE_DTS_STUDIOSOUND_3D_Begin,

    Audio_Comm_infoType_AUDIO_Get_ADEC0_R2CodeType,
    Audio_Comm_infoType_AUDIO_Get_ADEC1_R2CodeType,
    Audio_Comm_infoType_AUDIO_GetDsp2CodeType,
    Audio_Comm_infoType_LFE_Channel_Info,
    Audio_Comm_infoType_DAC_Clock_OnOff,
    Audio_Comm_infoType_MMTS_KEEP_33bit_PTS_FLAG,
    Audio_Comm_infoType_AUDIO_CHUNK_PTS,
    Audio_Comm_infoType_Get_AD_Cabability,

} Audio_COMM_infoType;




typedef enum
{
    AUDIO_PCM_CMD_ALL,
    AUDIO_PCM_CMD_NONBLOCKING,
    AUDIO_PCM_CMD_MULTICH,
    AUDIO_PCM_CMD_MIXING,
    AUDIO_PCM_CMD_MIXINGGROUP,
    AUDIO_PCM_CMD_BUFFER,
    AUDIO_PCM_CMD_BUFFERDURATION,
    AUDIO_PCM_CMD_READPTR,
    AUDIO_PCM_CMD_WRITEPTR,
    AUDIO_PCM_CMD_CHANNEL,
    AUDIO_PCM_CMD_SAMPLERATE,
    AUDIO_PCM_CMD_BITWIDTH,
    AUDIO_PCM_CMD_BIGENDIAN,
    AUDIO_PCM_CMD_TIMESTAMP,
    AUDIO_PCM_CMD_WEIGHTING,
    AUDIO_PCM_CMD_VOLUME,
    AUDIO_PCM_CMD_BUFFERLEVEL,
    AUDIO_PCM_CMD_MUTE,
    AUDIO_PCM_CMD_BUFFERSIZE,
} AUDIO_PCM_COMMAND;


typedef enum
{
    Audio_MPEG_infoType_DecStatus,
    Audio_MPEG_infoType_SampleRate,
    Audio_MPEG_infoType_BitRate,
    Audio_MPEG_infoType_FrameNum,
    Audio_MPEG_infoType_SoundMode,
    Audio_MPEG_infoType_stereoMode,
    Audio_MPEG_infoType_Layer,
    Audio_MPEG_infoType_Header,
    Audio_MPEG_infoType_FFSpeed,
    Audio_MPEG_infoType_MMFileSize,
    Audio_MPEG_infoType_Emphasis,
    Audio_MPEG_DTV_AVSYNC_OFFSET,
    Audio_MPEG_infoType_PCMBufLev,
    Audio_MPEG_infoType_BufferDelay,
    Audio_MPEG_DTV_AVSYNC_DISABLE_SETTING,
    Audio_MPEG_MuteFrm_PcmHighLevel_Threshold_NumTimeOut,
    Audio_MPEG_MuteFrm_PcmHighLevel_MuteNum,
    Audio_MPEG_infoType_PcmHighLevel_Pcmdata
} Audio_MPEG_infoType;

typedef enum
{
    AUD_MPEG_SOUNDMODE_LL,
    AUD_MPEG_SOUNDMODE_RR,
    AUD_MPEG_SOUNDMODE_LR,
    AUD_MPEG_SOUNDMODE_MIX_LR
}AUD_MPEG_SOUNDMODE;

typedef enum
{
    MPEG_SOUND_MODE_STEREO =0,
    MPEG_SOUND_MODE_JOINT_STEREO,
    MPEG_SOUND_MODE_DUAL_CHAN,
    MPEG_SOUND_MODE_MONO
}MPEG_SOUND_MODE;


typedef enum
{
    Audio_MP3_LAYER_RESERVED = 0x0,
    Audio_MP3_LAYER_3 = 0x1,
    Audio_MP3_LAYER_2 = 0x2,
    Audio_MP3_LAYER_1 = 0x3,
    Audio_MP3_LAYER_NOT_DETERMINE_YET = 0xFF,
} Audio_MP3_LAYER;


typedef enum
{
    Audio_AC3_infoType_DecStatus,
    Audio_AC3_infoType_SampleRate,
    Audio_AC3_infoType_BitRate,
    Audio_AC3_infoType_Dialnorm,
    Audio_AC3_infoType_Acmod,
    Audio_AC3_infoType_DrcMode,
    Audio_AC3_infoType_DownmixMode,
    Audio_AC3_infoType_MMFileSize,
    Audio_AC3_infoType_PCMBufLevel,
    Audio_AC3_infoType_BufferDelay,
    Audio_AC3_infoType_SyncwordFound_Count,
    Audio_AC3_infoType_AD_Mixer_Balance,
} Audio_AC3_infoType;


typedef enum
{
    Audio_AC3P_infoType_DecStatus,
    Audio_AC3P_infoType_SampleRate,
    Audio_AC3P_infoType_BitRate,
    Audio_AC3P_infoType_Dialnorm,
    Audio_AC3P_infoType_Acmod,
    Audio_AC3P_infoType_DrcMode,
    Audio_AC3P_infoType_DownmixMode,
    Audio_AC3P_infoType_MMFileSize,
    Audio_AC3P_infoType_syncSTC_in_mmTs,
    Audio_AC3P_infoType_hdmiTxBypass_enable,
    Audio_AC3P_infoType_AC3Type,
    Audio_AC3P_infoType_FrameSize,
    Audio_AC3P_infoType_BSMode,
    Audio_AC3P_infoType_BYTESWAP,
    Audio_AC3P_infoType_enableDolbyBulletin11,
    Audio_AC3P_DTV_AVSYNC_OFFSET,
    Audio_AC3P_infoType_hdmiAC3inSE,
    Audio_AC3P_DTV_AVSYNC_DISABLE_SETTING,
    Audio_AC3P_infoType_hdmi_in_support_DDP,
    Audio_AC3P_infoType_Drc_HighCutScale,
    Audio_AC3P_infoType_Drc_LowBootScale,
    Audio_AC3P_infoType_LoudnessMatching,
    Audio_AC3P_infoType_ATMOS_support,
    Audio_AC3P_infoType_Mixer_Balance,
    Audio_AC3P_infoType_DDP_AD_Substream,
    Audio_AC3P_infoType_AD_Mixer_Balance,
    Audio_AC3P_infoType_DDPEnc_Mode,
    Audio_AC3P_infoType_DDP_71_Stream,
} Audio_AC3P_infoType;

 typedef enum
 {
    Audio_DDPEnc_DDP,
    Audio_DDPEnc_DD,
} Audio_DDPEnc_Mode;

typedef enum
{
    AUD_Dolby_SOUNDMODE_LR = 0x0,
    AUD_Dolby_SOUNDMODE_LL = 0x1,
    AUD_Dolby_SOUNDMODE_RR = 0x2,
}AUD_Dolby_SOUNDMODE;

typedef enum
{
    DOLBY_MONO,
    DOLBY_STEREO,
    DOLBY_MULTI_CHAN
}DOLBY_AC_MODE;

typedef enum
{
    DOLBY_DOWNMIX_MODE_LTRT,
    DOLBY_DOWNMIX_MODE_LORO,
    DOLBY_DOWNMIX_MODE_AUTO
}DOLBY_DOWNMIX_MODE;

typedef enum
{
    LINE_MODE,
    RF_MODE,
}DOLBY_DRC_MODE;

typedef enum
{
    DVB_MODE,
    ATSC_MODE,
    OTHER_MODE
}DOLBY_LOUDNESS_MODE;

typedef enum
{
    BALANCE_EQUAL = 0,
    BALANCE_MAIN_0 = 1,
    BALANCE_MAIN_25 = 2,
    BALANCE_MAIN_75 = 3,
    BALANCE_MAIN_100 = 4,
}DOLBY_MIXER_BALANCE_MODE;

typedef enum
{
    AC3_ENABLE,
    AC3_DISABLE
}AC3_DIS_EN;



typedef enum
{
    Audio_DTS_infoType_DecStatus,
    Audio_DTS_infoType_KernelVersion,
    Audio_DTS_infoType_SampleRate,
    Audio_DTS_infoType_BitRate,
    Audio_DTS_infoType_CD_MODE,
    Audio_DTS_infoType_Amode,
    Audio_DTS_infoType_DMIX_LFE_EN,
    Audio_DTS_infoType_DrcMode,
    Audio_DTS_infoType_DownmixMode,
    Audio_DTS_infoType_Dialnorm_EN,
    Audio_DTS_infoType_ESDataServiceMode,
    Audio_DTS_infoType_MMFileSize,
    Audio_DTS_infoType_syncSTC_in_mmTs,
    Audio_DTS_infoType_ESData_ByteSwap,
    Audio_DTS_infoType_CertMode,
    Audio_DTS_infoType_HDMI_DSP_SEL,
    Audio_DTS_infoType_DTSHD_HDMITxBypass_Enable,
} Audio_DTS_infoType;

typedef enum
{
    Audio_DTS_Ctrl_DMIX_LFE_OFF = 0x0,
    Audio_DTS_Ctrl_DMIX_LFE_ON = 0x1,
    Audio_DTS_Ctrl_Drc_OFF = 0x0,
    Audio_DTS_Ctrl_Drc_50 = 0x1,
    Audio_DTS_Ctrl_Drc_100 = 0x2,
    Audio_DTS_Ctrl_Downmix_LoRo = 0x0,
    Audio_DTS_Ctrl_Downmix_LtRt = 0x1,
    Audio_DTS_Ctrl_Dialnorm_OFF = 0x0,
    Audio_DTS_Ctrl_Dialnorm_ON = 0x1,
    Audio_DTS_Ctrl_POLLINGMode = 0x0,
    Audio_DTS_Ctrl_INTRPTMode = 0x1,
    Audio_DTS_Ctrl_ByteSwap_OFF = 0x0,
    Audio_DTS_Ctrl_ByteSwap_ON = 0x1,
    Audio_DTS_Ctrl_CertMode_OFF = 0x0,
    Audio_DTS_Ctrl_CertMode_ON = 0x1,
    Audio_DTS_Ctrl_DTSHDBypass_OFF = 0x0,
    Audio_DTS_Ctrl_DTSHDBypass_ON = 0x1,
} Audio_DTS_CtrlType;


typedef enum
{
    Audio_WMA_infoType_DecStatus,
    Audio_WMA_infoType_SampleRate,
    Audio_WMA_infoType_BitRate,
    Audio_WMA_infoType_Asf_Param,
    Audio_WMA_infoType_FFSpeed,
    Audio_WMA_infoType_MMFileSize
} Audio_WMA_infoType;

typedef enum
{
    Audio_AAC_error_count,
    Audio_AAC_infoType_DrcMode,
    Audio_AAC_infoType_DownmixMode,
    Audio_AAC_dec_unsupported,
    Audio_AAC_ts_file_end_ntfi,
    Audio_AAC_infoType_MMFileSize,
    Audio_AAC_DTV_AVSYNC_OFFSET,
    Audio_AAC_DTV_AVSYNC_DISABLE_SETTING,
    Audio_AAC_mm_single_frame_mode,
    Audio_AAC_type,
    Audio_AAC_AD_Mixer_Balance,
    Audio_AAC_infoType_Bypass_Enable,
} Audio_AAC_infoType;

typedef enum
{
    Audio_RA8LBR_NumCodes,
    Audio_RA8LBR_Samples,
    Audio_RA8LBR_SampleRate,

    Audio_RA8LBR_Channels1,
    Audio_RA8LBR_Regions1,
    Audio_RA8LBR_cplStart1,
    Audio_RA8LBR_cplQbits1,
    Audio_RA8LBR_FrameSize1,

    Audio_RA8LBR_Channels2,
    Audio_RA8LBR_Regions2,
    Audio_RA8LBR_cplStart2,
    Audio_RA8LBR_cplQbits2,
    Audio_RA8LBR_FrameSize2,

    Audio_RA8LBR_Channels3,
    Audio_RA8LBR_Regions3,
    Audio_RA8LBR_cplStart3,
    Audio_RA8LBR_cplQbits3,
    Audio_RA8LBR_FrameSize3,

    Audio_RA8LBR_Channels4,
    Audio_RA8LBR_Regions4,
    Audio_RA8LBR_cplStart4,
    Audio_RA8LBR_cplQbits4,
    Audio_RA8LBR_FrameSize4,

    Audio_RA8LBR_Channels5,
    Audio_RA8LBR_Regions5,
    Audio_RA8LBR_cplStart5,
    Audio_RA8LBR_cplQbits5,
    Audio_RA8LBR_FrameSize5,

    Audio_RA8LBR_infoType_DecStatus,
} Audio_RA8LBR_infoType;

typedef enum
{
    DRA_Mono,
    DRA_Stereo,
    DRA_2_1,
    DRA_3_0,
    DRA_3_1,
    DRA_4_0,
    DRA_4_1,
    DRA_5_0,
    DRA_5_1,
    DRA_6_0,
    DRA_6_1,
    DRA_7_0,
    DRA_7_1,
    DRA_CH_MODE_NONE,
} DRA_CH_MODE;

typedef enum
{
    LPCM = 1,
    MS_ADPCM = 2,
    G711_A_LAW = 6,
    G711_u_LAW = 7,
    DVD_LPCM = 8,
    PRIVATE1_LPCM = 9,
    IMA_ADPCM = 17,
    IMA_ADPCM_APPLE = 18,
}XPCM_TYPE;

typedef enum
{
    SAMPLE_RATE_48000,
    SAMPLE_RATE_44100,
    SAMPLE_RATE_32000,
    SAMPLE_RATE_24000,
    SAMPLE_RATE_22050,
    SAMPLE_RATE_16000,
    SAMPLE_RATE_12000,
    SAMPLE_RATE_11025,
    SAMPLE_RATE_8000,
    SAMPLE_RATE_4000,
    SAMPLE_RATE_96000,
}SAMPLE_RATE;


typedef enum
{
    MAIN_MIX_AD,
    AD_MIX_MAIN,
}AD_MIX_MODE;

typedef enum
{
    MIX_OFF,
    MIX_ON,
}MIX_ONOFF;

typedef enum
{
    AUDIO_DOLBY_TYPE_DD,
    AUDIO_DOLBY_TYPE_DDP,
    AUDIO_DOLBY_TYPE_ATMOS,
} AUDIO_DOLBY_TYPE;

typedef enum
{
    AUDIO_AC3_TYPE_DD,
    AUDIO_AC3_TYPE_DDP,
    AUDIO_AC3_TYPE_ATMOS,
} AUDIO_AC3_TYPE;

typedef enum
{
    AUDIO_AAC_TYPE_GENERIC_AAC,
    AUDIO_AAC_TYPE_GENERIC_HEAACv1,
    AUDIO_AAC_TYPE_GENERIC_HEAACv2,
    AUDIO_AAC_TYPE_DOLBY_AAC,
    AUDIO_AAC_TYPE_DOLBY_HEAACv1,
    AUDIO_AAC_TYPE_DOLBY_HEAACv2,
} AUDIO_AAC_TYPE;

typedef enum
{
    AUDIO_DTS_TYPE_CORE,
    AUDIO_DTS_TYPE_LBR,
    AUDIO_DTS_TYPE_HD,
} AUDIO_DTS_TYPE;

typedef enum
{
    FILE_SIZE_1KB,
    FILE_SIZE_2KB,
    FILE_SIZE_4KB,
    FILE_SIZE_8KB,
    FILE_SIZE_16KB,
    FILE_SIZE_32KB,
    FILE_SIZE_64KB,
    FILE_SIZE_256,
    FILE_SIZE_512,
    FILE_SIZE_64,
    FILE_SIZE_128
}FILE_SIZE;


typedef enum
{
    AU_DVB_MODE_STEREO,
    AU_DVB_MODE_LL,
    AU_DVB_MODE_RR,
    AU_DVB_MODE_MIXED_LR
}AU_DVB_MODE;


typedef enum
{
    AU_DVB_DECCMD_STOP = 0,
    AU_DVB_DECCMD_PLAY = 1,
    AU_DVB_DECCMD_PLAYFILETSP = 2,
    AU_DVB_DECCMD_RESYNC = 3,
    AU_DVB_DECCMD_PLAYFILE = 4,
    AU_DVB_DECCMD_STARTBROWSE = 5,
    AU_DVB_DECCMD_PAUSE = 6,
    AU_DVB_DECCMD_PLAYFRAME = 8,
    AU_DVB_DECCMD_PLAYFRAME_STAGE = 9,
    AU_DVB_DECCMD_PLAYFRAME_GS = 10,
    AU_DVB_DECCMD_PLAYFILE2_PTS = 11,
    AU_DVB_DECCMD_PLAY_AD = 12,
    AU_DVB_DECCMD_STOP_AD = 13,
    AU_DVB_DECCMD_SKIP = 15,
    AU_DVB_DECCMD_AVSYNC = 0x10,
    AU_DVB_DECCMD_FREERUN = 0x20,
} AU_DVB_DECCMD;

typedef enum
{
    AU_DVB_ENCCMD_STOP,
    AU_DVB_ENCCMD_START
} AU_DVB_ENCCMD;

typedef enum
{
    AU_DVB_ENCBR_192K,
    AU_DVB_ENCBR_384K,
    AU_DVB_ENCBR_128K,
    AU_DVB_ENCBR_64K
} AU_DVB_ENCBR;

typedef enum
{
    WMA_PARAMTYPE_VERSION,
    WMA_PARAMTYPE_CHANNELS,
    WMA_PARAMTYPE_SAMPLERATE,
    WMA_PARAMTYPE_BYTERATE,
    WMA_PARAMTYPE_BLOCKALIGN,
    WMA_PARAMTYPE_ENCOPT,
    WMA_PARAMTYPE_PARSINGBYAPP,
    WMA_PARAMTYPE_BITS_PER_SAMPLE,
    WMA_PARAMTYPE_CHANNELMASK,
    WMA_PARAMTYPE_DRC_PARAM_EXIST,
    WMA_PARAMTYPE_DRC_RMS_AMP_REF,
    WMA_PARAMTYPE_DRC_RMS_AMP_TARGET,
    WMA_PARAMTYPE_DRC_PEAK_AMP_REF,
    WMA_PARAMTYPE_DRC_PEAK_AMP_TARGET,
    WMA_PARAMTYPE_MAX_PACKET_SIZE,
    WMA_PARAMTYPE_ADVANCEDENCODEOPT,
    WMA_PARAMTYPE_ADVANCEDENCODEOPT2,
}WMA_ASF_PARMTYPE;

enum
{
    DSP_INIT_FINISH_ACK,
    DSP_READY_FOR_RELOAD_ACK,
    DSP_RELOAD_FINISH_ACK,
    MCU_START_TO_RUN_CMD,
    MCU_START_RELOAD_CMD,
    MCU_RELOAD_FINISH_CMD
};

typedef struct
{
    MS_U8 u8StrCmd[64];
    void *pData;
} AUDIO_COMMON_CMD_t;



typedef struct __attribute__((packed))
{
    MS_U32 u32StructVersion;
    MS_U32 u32StructSize;
    MS_U32 u32OutputDeviceSelection;
} AUDIO_OUTPUT_DEVICE_SELECTION_t;
#define AUDIO_OUTPUT_DEVICE_SELECTION_VERSION 0x00010001





typedef struct __attribute__((packed))
{
    MS_U32 u32StructVersion;
    MS_U32 u32StructSize;
    MS_U32 u32SpdifOutputCodec;
    MS_U32 u32HdmiArcOutputCodec;
    MS_U32 u32HdmiTxOutputCodec;
} AUDIO_SPECIFIED_DIGITAL_OUTPUT_t;
#define AUDIO_SPECIFIED_DIGITAL_OUTPUT_VERSION 0x00010001





typedef struct __attribute__((packed))
{
    MS_U32 u32StructVersion;
    MS_U32 u32StructSize;
    MS_U32 u32McuCtrlEnable;
    MS_U32 u32MultiChannelEnable;
} AUDIO_DAP_CONTROL_t;
#define AUDIO_DAP_CONTROL_VERSION 0x00010001





typedef struct __attribute__((packed))
{
    MS_U32 u32StructVersion;
    MS_U32 u32StructSize;
    MS_U8 u8DecId;
    MS_BOOL bForceMchOutput;
    MS_U32 u32PcmOutputType;
} AUDIO_DECODER_INFO_t;
#define AUDIO_DECODER_INFO_VERSION 0x00010001



typedef struct
{
    MS_U32 u32StructVersion;
    MS_U32 u32StructSize;
    MS_U32 CodecType;
    MS_U32 SupportChannel;
} AUDIO_CODEC_CAPABILITY_t;
#define AUDIO_CODEC_CAPABILITY_VERSION 0x00010001




enum
{
    DSP_DEC,
    DSP_SE,
    DSP_ADV,
    DSP_MAD
};


typedef enum
{
    AUDIO_FS_NONE,
    AUDIO_FS_8KHZ,
    AUDIO_FS_11KHZ,
    AUDIO_FS_12KHZ,
    AUDIO_FS_16KHZ,
    AUDIO_FS_22KHZ,
    AUDIO_FS_24KHZ,
    AUDIO_FS_32KHZ,
    AUDIO_FS_44KHZ,
    AUDIO_FS_48KHZ,
    AUDIO_FS_64KHZ,
    AUDIO_FS_88KHZ,
    AUDIO_FS_96KHZ,
    AUDIO_FS_176KHZ,
    AUDIO_FS_192KHZ,
    AUDIO_FS_UNSUPPORT = 0xFF,
} AUDIO_FS_TYPE;

typedef struct
{
    AUDIO_HDMI_RX_TYPE audio_type;
    AUDIO_FS_TYPE sampleRate;
} ST_HDMI_AUDIO_STATUS;

typedef enum
{
    AUD_CH_MODE_DUAL_MONO = 0x0,
    AUD_CH_MODE_MONO = 0x1,
    AUD_CH_MODE_STEREO = 0x2,
    AUD_CH_MODE_3_0_MODE = 0x3,
    AUD_CH_MODE_2_1_MODE = 0x4,
    AUD_CH_MODE_3_1_MODE = 0x5,
    AUD_CH_MODE_2_2_MODE = 0x6,
    AUD_CH_MODE_3_2_MODE = 0x7,
    AUD_CH_MODE_JOINT_STEREO = 0x8,
    AUD_CH_MODE_3_3_MODE = 0x9,
    AUD_CH_MODE_3_2_2_MODE = 0xA,
    AUD_CH_MODE_3_2_3_MODE = 0xB,
    AUD_CH_MODE_NONE,
} AUD_CH_MODE_TYPE;




typedef enum
{
    AUD_KTV_MODEL1,
    AUD_KTV_MODEL2,
    AUD_KTV_MODEL3,
    AUD_KTV_MODEL4,
}AUDIO_KTV_MODEL;

typedef enum
{


    AUD_KTV_infoType1,
    AUD_KTV_infoType2,
    AUD_KTV_infoType3,
    AUD_KTV_infoType4,
    AUD_KTV_infoType5,
    AUD_KTV_infoType6,
    AUD_KTV_infoType7,
    AUD_KTV_infoType8,
    AUD_KTV_infoType9,
    AUD_KTV_infoType10,
    AUD_KTV_infoType11,
    AUD_KTV_infoType12,
    AUD_KTV_infoType13,
    AUD_KTV_infoType14,
    AUD_KTV_infoType15,
    AUD_KTV_infoType16,
}AUDIO_KTV_INFOTYPE;

typedef enum
{


    AUD_KTV_ParamType1,
    AUD_KTV_ParamType2,
    AUD_KTV_ParamType3,
    AUD_KTV_ParamType4,
    AUD_KTV_ParamType5,
    AUD_KTV_ParamType6,
    AUD_KTV_ParamType7,
    AUD_KTV_ParamType8,
    AUD_KTV_ParamType9,
    AUD_KTV_ParamType10,
    AUD_KTV_ParamType11,
    AUD_KTV_ParamType12,
    AUD_KTV_ParamType13,
    AUD_KTV_ParamType14,
    AUD_KTV_ParamType15,
    AUD_KTV_ParamType16,
}AUDIO_KTV_PARAMTYPE;

typedef enum
{
    PCM_VOL,
    MIC_VOL,
    MP3_VOL,
    GAME1_VOL,
    GAME2_VOL,
    ECHO1_VOL,
    ECHO2_VOL,
}AUDIO_MIX_VOL_TYPE;

#define code 

typedef struct
{
    MS_U8 HiByteValue;
    MS_U8 LowByteValue;
} THR_TBL_TYPE;





typedef enum
{
    AUD_ADC_GAIN_0dB = 0,
    AUD_ADC_GAIN_NEG_3dB,
    AUD_ADC_GAIN_NEG_6dB,
    AUD_ADC_GAIN_3dB,
    AUD_ADC_GAIN_6dB,
    AUD_ADC_GAIN_9dB,
    AUD_ADC_GAIN_12dB,
    AUD_ADC_GAIN_15dB,
} AUD_ADC_GAIN_TYPE;

typedef struct
{
    MS_U8 param1;
    MS_U8 param2;
    MS_U8 param3;
    MS_U8 param4;
} Sound_SET_Param;

typedef struct
{
    MS_U8 AvcThreshold;
    MS_U8 AvcMode;
    MS_U8 AvcAT;
    MS_U8 AvcRT;
} Sound_AVC_param;

typedef struct
{
    MS_U8 SurroundXA;
    MS_U8 SurroundXB;
    MS_U8 SurroundXK;
    MS_U8 SurroundLPFGain;
} Sound_SURR_param;

typedef enum
{
    Sound_SET_Type_SetPreScale,
    Sound_SET_Type_SetMute,
    Sound_SET_Type_SetBalance,
    Sound_SET_Type_EnableEQ,
    Sound_SET_Type_EnablePEQ,
    Sound_SET_Type_EnableTone,
    Sound_SET_Type_EnableAutoVolume,
    Sound_SET_Type_EnableSurround,
    Sound_SET_Type_SetBass,
    Sound_SET_Type_EnableBalance,
    Sound_SET_Type_AbsoluteBass,
    Sound_SET_Type_SetTreble,
    Sound_SET_Type_SetEq,
    Sound_SET_Type_SetEq_7band,
    Sound_SET_Type_SetAvc,
    Sound_SET_Type_SetAudioDelay,
    Sound_SET_Type_SetSurround,
    Sound_SET_Type_ConvertVolumeUnit,
    Sound_SET_Type_SetDCOffet,
    Sound_SET_Type_EnableSineTone,
} Sound_SET_Type;

typedef enum
{
    Sound_SET_PARAM_PreScale,
    Sound_SET_PARAM_Balance,
    Sound_SET_PARAM_EQ,
    Sound_SET_PARAM_Surround_XA,
    Sound_SET_PARAM_Surround_XB,
    Sound_SET_PARAM_Surround_XK,
    Sound_SET_PARAM_Surround_LPFGAIN,
    Sound_SET_PARAM_Treble,
    Sound_SET_PARAM_Bass,
    Sound_SET_PARAM_AbsoluteBass,
    Sound_SET_PARAM_Avc_Mode,
    Sound_SET_PARAM_NR_Threshold,
    Sound_SET_PARAM_Avc_Threshold,
    Sound_SET_PARAM_Avc_AT,
    Sound_SET_PARAM_Avc_RT,
    Sound_SET_PARAM_AudioDelay,
    Sound_SET_PARAM_DCOffet,
    Sound_SET_PARAM_PEQ_48K_A0,
    Sound_SET_PARAM_PEQ_48K_A1,
    Sound_SET_PARAM_PEQ_48K_A2,
    Sound_SET_PARAM_PEQ_48K_B1,
    Sound_SET_PARAM_PEQ_48K_B2,
    Sound_SET_PARAM_PEQ_32K_A0,
    Sound_SET_PARAM_PEQ_32K_A1,
    Sound_SET_PARAM_PEQ_32K_A2,
    Sound_SET_PARAM_PEQ_32K_B1,
    Sound_SET_PARAM_PEQ_32K_B2,
    Sound_SET_PARAM_PEQ_SCALE,
    Sound_SET_PARAM_AbsoluteEQ,
    Sound_SET_PARAM_Drc_Threshold,
    Sound_SET_PARAM_DMAReader,
    Sound_SET_PARAM_AVC_S_Offset,
    Sound_SET_PARAM_Tone_Test_Fs,
    Sound_SET_PARAM_Tone_Test_Gain,
    Sound_SET_PARAM_AbsoluteBalance,
    Sound_SET_PARAM_AbsoluteTreble,
    Sound_SET_PARAM_Ease_Type_A,
    Sound_SET_PARAM_Ease_Duration_A,
    Sound_SET_PARAM_Ease_Gain_A,
    Sound_SET_PARAM_Ease_Target_Channel_A,
    Sound_SET_PARAM_Ease_Type_B,
    Sound_SET_PARAM_Ease_Duration_B,
    Sound_SET_PARAM_Ease_Gain_B,
    Sound_SET_PARAM_Ease_Target_Channel_B,
    Sound_SET_PARAM_Drc_Entry,
    Sound_SET_PARAM_Mixer_AD_Volume,
    Sound_SET_PARAM_Mixer_Main_Volume,
    Sound_SET_PARAM_LG_EQ,
    Sound_SET_PARAM_LG_Balance_L,
    Sound_SET_PARAM_LG_Balance_R,
    Sound_SET_PARAM_VolFadingStep,
    Sound_SET_PARAM_VolFadingCtrl,
    Sound_SET_PARAM_BalanceMask,
    Sound_SET_PARAM_PhaseShiftMask,
    Sound_SET_PARAM_InternalDelay_Ch1,
    Sound_SET_PARAM_InternalDelay_Ch2,
    Sound_SET_PARAM_InternalDelay_Ch3,
    Sound_SET_PARAM_InternalDelay_Ch4,
    Sound_SET_PARAM_InternalDelay_Ch5,
    Sound_SET_PARAM_InternalDelay_Ch6,
    Sound_SET_PARAM_InternalDelay_Ch7,
    Sound_SET_PARAM_InternalDelay_Ch8,
    Sound_SET_PARAM_KTVEcho_XA,
    Sound_SET_PARAM_KTVEcho_XB,
    Sound_SET_PARAM_KTVEcho_ReverbStep,
    Sound_SET_PARAM_Avc_R_Begin,
    Sound_SET_PARAM_Avc_R_End,
    Sound_SET_PARAM_Avc_R_Slope,
    Sound_SET_PARAM_Sinetone_StartFreq,
    Sound_SET_PARAM_Sinetone_EndFreq,
    Sound_SET_PARAM_Sinetone_Duration,
    Sound_SET_PARAM_Sinetone_Mode,
    Sound_SET_PARAM_Sinetone_Ctrl,
} Sound_SET_PARAM_Type;

typedef enum
{
    Sound_GET_PARAM_PreScale,
    Sound_GET_PARAM_Balance_L,
    Sound_GET_PARAM_Balance_R,
    Sound_GET_PARAM_EQ,
    Sound_GET_PARAM_Surround_XA,
    Sound_GET_PARAM_Surround_XB,
    Sound_GET_PARAM_Surround_XK,
    Sound_GET_PARAM_Surround_LPFGAIN,
    Sound_GET_PARAM_Treble,
    Sound_GET_PARAM_Bass,
    Sound_GET_PARAM_Avc_Mode,
    Sound_GET_PARAM_Avc_Threshold,
    Sound_GET_PARAM_Avc_AT,
    Sound_GET_PARAM_Avc_RT,
    Sound_GET_PARAM_AudioDelay,
    Sound_GET_PARAM_DCOffet,
    Sound_GET_PARAM_NR_Threshold,
    Sound_GET_PARAM_NR_Status,
    Sound_GET_PARAM_getSignal_Energy,
    Sound_GET_PARAM_EQ_Status,
    Sound_GET_PARAM_PEQ_Status,
    Sound_GET_PARAM_Tone_Status,
    Sound_GET_PARAM_AutoVolume_Status,
    Sound_GET_PARAM_Surround_Status,
    Sound_GET_PARAM_HPF_Status,
    Sound_GET_PARAM_Drc_Threshold,
    Sound_GET_PARAM_DMAReader_Buffer_Addr,
    Sound_GET_PARAM_ToneTest_LEVEL,
    Sound_GET_PARAM_FPC_Lpeak,
    Sound_GET_PARAM_FPC_Rpeak,
    Sound_GET_PARAM_Ease_Type_A,
    Sound_GET_PARAM_Ease_Duration_A,
    Sound_GET_PARAM_Ease_Gain_A,
    Sound_GET_PARAM_Ease_Type_B,
    Sound_GET_PARAM_Ease_Duration_B,
    Sound_GET_PARAM_Ease_Gain_B,
    Sound_GET_PARAM_InternalDelay_Ch1,
    Sound_GET_PARAM_InternalDelay_Ch2,
    Sound_GET_PARAM_InternalDelay_Ch3,
    Sound_GET_PARAM_InternalDelay_Ch4,
    Sound_GET_PARAM_InternalDelay_Ch5,
    Sound_GET_PARAM_InternalDelay_Ch6,
    Sound_GET_PARAM_InternalDelay_Ch7,
    Sound_GET_PARAM_InternalDelay_Ch8,
    Sound_GET_PARAM_KTVEcho_XA,
    Sound_GET_PARAM_KTVEcho_XB,
    Sound_GET_PARAM_KTVEcho_ReverbStep,
    Sound_GET_PARAM_Avc_R_Begin,
    Sound_GET_PARAM_Avc_R_End,
    Sound_GET_PARAM_Avc_R_Slope,
    Sound_GET_PARAM_Sinetone_StartFreq,
    Sound_GET_PARAM_Sinetone_EndFreq,
    Sound_GET_PARAM_Sinetone_Duration,
    Sound_GET_PARAM_Sinetone_Mode,
    Sound_GET_PARAM_Sinetone_Ctrl,
} Sound_GET_PARAM_Type;

typedef enum
{

    Sound_ENABL_Type_EQ,
    Sound_ENABL_Type_PEQ,
    Sound_ENABL_Type_Tone,
    Sound_ENABL_Type_AutoVolume,
    Sound_ENABL_Type_Surround,
    Sound_ENABL_Type_Balance,
    Sound_ENABL_Type_DRC,
    Sound_ENABL_Type_KTVEcho,
    Sound_ENABL_Type_Hpf,
    Sound_ENABL_Type_FPC,
    Sound_ENABL_Type_DcRemove,
    Sound_ENABL_Type_EaseVol,
    Sound_ENABL_Type_HeadPhoneSoundEffect,
    Sound_ENABL_Type_DRC2,
    Sound_ENABL_Type_SineTone,
} Sound_ENABLE_Type;

typedef enum
{
    AdvSound_SET_Type_VDS_Enable,
    AdvSound_SET_Type_VSPK_Enable,
    AdvSound_SET_Type_VSPK_SetWMod,
    AdvSound_SET_Type_VSPK_SetSMod,
    AdvSound_SET_Type_SRS_Enable,
    AdvSound_SET_Type_SRS_DC,
    AdvSound_SET_Type_SRS_TruBass,
    AdvSound_SET_Type_SRS_SetTsxtPara,
    AdvSound_SET_Type_TSHD_Enable,
    AdvSound_SET_Type_TSHD_TruBass,
    AdvSound_SET_Type_TSHD_Definition,
    AdvSound_SET_Type_TSHD_Clarity,
    AdvSound_SET_Type_TSHD_TruSurr,
    AdvSound_SET_Type_TSHD_Limiter,
    AdvSound_SET_Type_TSHD_SRS3D,
    AdvSound_SET_Type_SRS_SetTshdPara,
    AdvSound_SET_Type_TruVolume_Enable,
    AdvSound_SET_Type_BBE_SetBbeMode,
    AdvSound_SET_CV2_Enable,
    AdvSound_SET_CV2_SetPara,
    AdvSound_SET_CV_SetPara,
    AdvSound_SET_AV_SetPara,
    AdvSound_SET_SetEQPara,
    AdvSound_SET_CV_SetLevel,
    AdvSound_SET_ADSY_SetPara,
} AdvSound_SET_Type;

typedef enum
{
    ADVSOUND_EN_TYPE,
    ADVSOUND_INFO_DV258_ENABLE,
    ADVSOUND_INFO_DV258_LCL_ENABLE,
    ADVSOUND_INFO_DV258_LCL_LEVELER_ENABLE,
    ADVSOUND_INFO_DV258_LCL_MODELER_ENABLE,
    ADVSOUND_INFO_DV258_LCL_MODELER_HALF_MODE,
    ADVSOUND_INFO_DV258_LCL_AMOUNT,
    ADVSOUND_INFO_DV258_LCL_AVM,
    ADVSOUND_INFO_DV258_LCL_DVM,
    ADVSOUND_INFO_DV258_LCL_IRL,
    ADVSOUND_INFO_DV258_LCL_ORL,
    ADVSOUND_INFO_DV258_LCL_PREGAIN,
    ADVSOUND_INFO_DV258_LCL_GAIN,
    ADVSOUND_INFO_DV258_LIMITER_ENABLE,
    ADVSOUND_INFO_DV258_LIMITER_PEAK,
    ADVSOUND_INFO_DV258_LIMITER_BOOST,
    ADVSOUND_INFO_DV258_LIMITER_RMS,
} AdvSound_GET_Type;







typedef enum
{
    AU_SRS_APOLLO_EN,
    AU_SRS_TSHD_EN,
    AU_SRS_TRUBASS_FRONT_EN,
    AU_SRS_DEFINITION_FRONT_EN,
    AU_SRS_DIALOG_CLARITY_EN,
    AU_SRS_SURROUND_LEVEL_CTRL,
    AU_SRS_TSHD_INPUT_GAIN,
    AU_SRS_DEFINITION_FRONT_CTRL,
    AU_SRS_DIALOG_CLARITY_CTRL,
    AU_SRS_TRUBASS_FRONT_CTRL,
    AU_SRS_LOW_END_FRONT_SPEAKER_FREQ,
    AU_SRS_HL_EN,
    AU_SRS_HL_LIMIT_LEVEL,
    AU_SRS_HL_BOOST_GAIN,
    AU_SRS_APOLLO_HEADROOM_GAIN,
    AU_SRS_AEQ_PEQ_EN,
    AU_SRS_AEQ_HPF_EN,
    AU_SRS_AEQ_GEQ_EN,
    AU_SRS_VIQ_EN,
    AU_SRS_VIQ_MODE,
    AU_SRS_VIQ_VOL_REF_LEVEL,
    AU_SRS_VIQ_MAX_GAIN,
    AU_SRS_VIQ_NOISE_MNGR_THLD,
    AU_SRS_VIQ_CALIBRATE,
    AU_SRS_VIQ_NOISE_MNGR_EN,
    AU_SRS_AEQ_HPF_FC,
    AU_SRS_VIQ_INPUT_GAIN,
    AU_SRS_VIQ_OUTPUT_GAIN,


    AU_SRS_FTB_LVL_INDPDT_ENABLE,
    AU_SRS_FTB_COMPRESSOR_CONTROL,
    AU_SRS_FTB_MODE,
    AU_SRS_FTB_SPEAKER_AUDIO,
    AU_SRS_FTB_SPEAKER_ANALYSIS,
    AU_SRS_TVOLHD_EN,
    AU_SRS_TVOLHD_OUTPUT_GAIN,
    AU_SRS_TVOLHD_INPUT_GAIN,
    AU_SRS_TVOLHD_BYPASS_GAIN,
    AU_SRS_TVOLHD_MODE,
    AU_SRS_TVOLHD_MAX_GAIN,
    AU_SRS_TVOLHD_NORMALIZER_EN,
    AU_SRS_TVOLHD_NORMTHRESH,
    AU_SRS_TVOLHD_SMOOTH_EN,
    AU_SRS_TVOLHD_LKFS,
    AU_SRS_AEQ_PEQ_INPUT_GAIN,
} AU_SRS_APOLLO_TYPE;




typedef enum _DBXTV_TotSonMode
{
    E_TOTSON_ON = 0,
    E_TOTSON_OFF,
} EN_DBXTV_TotSonMode;


typedef enum _DBXTV_TotVolMode
{
    E_TOTVOL_NORMAL = 0,
    E_TOTVOL_NIGHT,
    E_TOTVOL_OFF,
} EN_DBXTV_TotVolMode;


typedef enum _DBXTV_TotSurMode
{
    E_TOTSUR_ON = 0,
    E_TOTSUR_OFF,
} EN_DBXTV_TotSurMode;


typedef enum _DBXTV_TurnOnOff
{
    E_DBXTV_TurnOff = 0,
    E_DBXTV_TurnOn,
} EN_DBXTV_TurnOnOff;




typedef enum
{
    AU_SRS_THEATER_EN,
    AU_SRS_THEATER_HPF_EN,
    AU_SRS_THEATER_VIQ_EN,
    AU_SRS_THEATER_CS_EN,
    AU_SRS_THEATER_TRUDIALOG_EN,
    AU_SRS_THEATER_INPUT_GAIN,
    AU_SRS_THEATER_OUTPUT_GAIN,
    AU_SRS_THEATER_BYPASS_GAIN,
    AU_SRS_THEATER_HEADROOM_GAIN,
    AU_SRS_THEATER_INPUT_MODE,
    AU_SRS_THEATER_VIQ_INPUT_GAIN,
    AU_SRS_THEATER_VIQ_OUTPUT_GAIN,
    AU_SRS_THEATER_VIQ_BYPASS_GAIN,
    AU_SRS_THEATER_VIQ_VOLUME_MODE,
    AU_SRS_THEATER_VOLHD_MAXGAIN_CONTROL,
    AU_SRS_THEATER_VOLHD_NORMALIZER_EN,
    AU_SRS_THEATER_VOLHD_NORMTHRESH,
    AU_SRS_THEATER_VOLHD_SMOOTH_EN,
    AU_SRS_THEATER_VOLHD_LKFS,
    AU_SRS_THEATER_CS_INPUT_GAIN,
    AU_SRS_THEATER_CS_PROCESSING_MODE,
    AU_SRS_THEATER_CS_LR_OUTPUT_GAIN,
    AU_SRS_THEATER_CS_LSRS_OUTPUT_GAIN,
    AU_SRS_THEATER_CS_CENTER_OUTPUT_GAIN,
    AU_SRS_THEATER_TRUDIALOG_INPUT_GAIN,
    AU_SRS_THEATER_TRUDIALOG_OUTPUT_GAIN,
    AU_SRS_THEATER_TRUDIALOG_BYPASS_GAIN,
    AU_SRS_THEATER_TRUDIALOG_PROCESS_GAIN,
    AU_SRS_THEATER_TRUDIALOG_CLARITY_GAIN,
    AU_SRS_THEATER_HPF_ORDER,
    AU_SRS_THEATER_HPF_COEFS,
    AU_SRS_THEATER_TSHD_EN,
    AU_SRS_THEATER_TSHD_SURR_EN,
    AU_SRS_THEATER_TSHD_TRUBASS_FRONT_EN,
    AU_SRS_THEATER_TSHD_DEFINITION_FRONT_EN,
    AU_SRS_THEATER_TSHD_DIALOG_CLARITY_EN,
    AU_SRS_THEATER_TSHD_TRUBASS_LEVEL_INDEPENDENT_EN,
    AU_SRS_THEATER_HPF_END_EN,
    AU_SRS_THEATER_HL_EN,
    AU_SRS_THEATER_TSHD_SURROUND_LEVEL_CTRL,
    AU_SRS_THEATER_TSHD_INPUT_GAIN,
    AU_SRS_THEATER_TSHD_OUTPUT_GAIN,
    AU_SRS_THEATER_TSHD_DEFINITION_FRONT_CTRL,
    AU_SRS_THEATER_TSHD_DIALOG_CLARITY_CTRL,
    AU_SRS_THEATER_TSHD_TRUBASS_FRONT_CTRL,
    AU_SRS_THEATER_TSHD_TRUBASS_SPEAKER_SIZE,
    AU_SRS_THEATER_TSHD_TRUBASS_COMPRESSOR_CTRL,
    AU_SRS_THEATER_TSHD_TRUBASS_PROCESS_MODE,
    AU_SRS_THEATER_TSHD_TRUBASS_SPEAKER_AUDIO,
    AU_SRS_THEATER_TSHD_TRUBASS_SPEAKER_ANALYSIS,
    AU_SRS_THEATER_HL_LIMIT_LEVEL_CTRL,
    AU_SRS_THEATER_HL_BOOST_GAIN,
    AU_SRS_THEATER_HPF_CUTOFF,
    AU_SRS_THEATER_HPF_END_CUTOFF,
    AU_SRS_THEATER_CC3D_EN,
    AU_SRS_THEATER_CC3D_DEPTH_PROCESS_EN,
    AU_SRS_THEATER_CC3D_3D_SURR_BOOST_EN,
    AU_SRS_THEATER_CC3D_FADE_EN,
    AU_SRS_THEATER_CC3D_TSHD_MIX_EN,
    AU_SRS_THEATER_CC3D_TBHDX_EN,
    AU_SRS_THEATER_CC3D_INPUT_GAIN,
    AU_SRS_THEATER_CC3D_OUTPUT_GAIN,
    AU_SRS_THEATER_CC3D_BYPASS_GAIN,
    AU_SRS_THEATER_CC3D_APERTURE,
    AU_SRS_THEATER_CC3D_GAINLIMIT,
    AU_SRS_THEATER_CC3D_FF_DEPTH,
    AU_SRS_THEATER_CC3D_NF_DEPTH,

    AU_SRS_THEATER_CC3D_TSHD_SURR_MODE,
    AU_SRS_THEATER_CC3D_TSHD_MIX_FADE_CTRL,

    AU_SRS_THEATER_CC3D_TBHDX_INPUT_GAIN,
    AU_SRS_THEATER_CC3D_TBHDX_BASSLEVEL,
    AU_SRS_THEATER_CC3D_TBHDX_SPEAKERSIZE,
    AU_SRS_THEATER_CC3D_TBHDX_MODE,
    AU_SRS_THEATER_CC3D_TBHDX_DYNAMICS,
    AU_SRS_THEATER_CC3D_TBHDX_HP_ORDER,
    AU_SRS_THEATER_CC3D_TBHDX_CUSTOM_FILTER,
    AU_SRS_THEATER_CC3D_GEQ_EN,
    AU_SRS_THEATER_CC3D_GEQ_INPUT_GAIN,
    AU_SRS_THEATER_CC3D_GEQ_BAND0_GAIN,
    AU_SRS_THEATER_CC3D_GEQ_BAND1_GAIN,
    AU_SRS_THEATER_CC3D_GEQ_BAND2_GAIN,
    AU_SRS_THEATER_CC3D_GEQ_BAND3_GAIN,
    AU_SRS_THEATER_CC3D_GEQ_BAND4_GAIN,
    AU_SRS_THEATER_CC3D_PROCESS_PATH,
    AU_SRS_THEATER_TSHD_BYPASS_GAIN,

    AU_SRS_R2_MAX=100,

    AU_SRS_PURESOUND_HL_EN,
    AU_SRS_PURESOUND_HL_INPUT_GAIN,
    AU_SRS_PURESOUND_HL_OUTPUT_GAIN,
    AU_SRS_PURESOUND_HL_BYPASS_GAIN,
    AU_SRS_PURESOUND_HL_LIMITERBOOST,
    AU_SRS_PURESOUND_HL_HARDLIMIT,
    AU_SRS_PURESOUND_HL_DELAYLEN,

    AU_SRS_PURESOUND_AEQ_EN,
    AU_SRS_PURESOUND_AEQ_INPUT_GAIN,
    AU_SRS_PURESOUND_AEQ_OUTPUT_GAIN,
    AU_SRS_PURESOUND_AEQ_BYPASS_GAIN,
    AU_SRS_PURESOUND_FILTER_CONFIG,

    AU_SRS_PURESOUND_HPF_EN,
    AU_SRS_PURESOUND_HPF_FREQUENCY,
    AU_SRS_PURESOUND_TBHD_EN,
    AU_SRS_PURESOUND_TBHD_TRUBASS_LEVEL,
    AU_SRS_PURESOUND_TBHD_SPEAKER_SIZE,
    AU_SRS_PURESOUND_TBHD_LEVEL_INDEPENDENT_EN,
    AU_SRS_PURESOUND_TBHD_COMPRESSOR_LEVEL,
    AU_SRS_PURESOUND_TBHD_MODE,
    AU_SRS_PURESOUND_TBHD_SPEAKER_AUDIO,
    AU_SRS_PURESOUND_TBHD_SPEAKER_ANALYSIS,

    AU_SRS_PURESOUND_INPUT_GAIN,
    AU_SRS_PURESOUND_OUTPUT_GAIN,

} AU_SRS_THEATERSOUND_TYPE;

#if defined(UFO_PUBLIC_HEADER_500) || defined(UFO_PUBLIC_HEADER_700)

typedef char* ADVSND_TYPE;
#define DOLBY_PL2VDS ((ADVSND_TYPE)"DOLBY_PL2VDS")
#define DOLBY_PL2VDPK ((ADVSND_TYPE)"DOLBY_PL2VDPK")
#define BBE ((ADVSND_TYPE)"BBE")
#define SRS_TSXT ((ADVSND_TYPE)"SRS_TSXT")
#define SRS_TSHD ((ADVSND_TYPE)"SRS_TSHD")
#define SRS_THEATERSOUND ((ADVSND_TYPE)"SRS_THEATERSOUND")
#define DTS_ULTRATV ((ADVSND_TYPE)"DTS_ULTRATV")
#define AUDYSSEY ((ADVSND_TYPE)"AUDYSSEY")
#define SUPER_VOICE ((ADVSND_TYPE)"SUPER_VOICE")
#define DBX ((ADVSND_TYPE)"DBX")
#define SRS_PURESND ((ADVSND_TYPE)"SRS_PURESND")
#define DTS_STUDIOSOUND_3D ((ADVSND_TYPE)"DTS_STUDIOSOUND_3D")
#define BONGIOVI_DPS ((ADVSND_TYPE)"BONGIOVI_DPS")
#define SONICMOTION_ABS3D ((ADVSND_TYPE)"SONICMOTION_ABS3D")
#define DOLBY_DAP ((ADVSND_TYPE)"DOLBY_DAP")
#define ADV_NONE ((ADVSND_TYPE)"ADV_NONE")

typedef char* ADVFUNC;

#define SRS_TSXT_TRUBASS ((ADVFUNC)"TSXT_TRUBASS")
#define SRS_TSXT_DC ((ADVFUNC)"TSXT_DC")

#define SRS_TSHD_TRUBASS ((ADVFUNC)"TSHD_TRUBASS")
#define SRS_TSHD_DC ((ADVFUNC)"TSHD_DC")
#define SRS_TSHD_DEFINITION ((ADVFUNC)"TSHD_DEFINITION")
#define SRS_TSHD_SRS3D ((ADVFUNC)"TSHD_SRS3D")

#define SRS_THEATERSOUND_TSHD ((ADVFUNC)"THSND_TSHD")
#define SRS_THEATERSOUND_TRUBASS ((ADVFUNC)"THSND_TRUBASS")
#define SRS_THEATERSOUND_DC ((ADVFUNC)"THSND_DC")
#define SRS_THEATERSOUND_DEFINITION ((ADVFUNC)"THSND_DEFINITION")
#define SRS_THEATERSOUND_TRUVOLUME ((ADVFUNC)"THSND_TRUVOLUME")
#define SRS_THEATERSOUND_HARDLIMITER ((ADVFUNC)"THSND_HARDLIMITER")
#define SRS_THEATERSOUND_HPF ((ADVFUNC)"THSND_HPF")
#define SRS_THEATERSOUND_TRUEQ ((ADVFUNC)"THSND_TRUEQ")
#define SRS_THEATERSOUND_TRUVOLUME_NOISE_MNGR ((ADVFUNC)"THSND_TRUVOLUME_NOISE_MNGR")

#define DTS_ULTRATV_EVO ((ADVFUNC)"ULTRATV_EVO")
#define DTS_ULTRATV_SYM ((ADVFUNC)"ULTRATV_SYM")

#define AUDYSSEY_DYNAMICVOL ((ADVFUNC)"AUDYSSEY_DYNAMICVOL")
#define AUDYSSEY_DYNAMICEQ ((ADVFUNC)"AUDYSSEY_DYNAMICEQ")
#define AUDYSSEY_EQ ((ADVFUNC)"AUDYSSEY_EQ")
#define AUDYSSEY_ABX ((ADVFUNC)"AUDYSSEY_ABX")

#define SRS_THEATERSOUND_TSHD_SURR ((ADVFUNC)"THSND_TSHD_SURR")
#define SRS_THEATERSOUND_TSHD_LEVEL_INDPT ((ADVFUNC)"THSND_TSHD_LEVEL_INDPT")
#define SRS_THEATERSOUND_CS ((ADVFUNC)"THSND_CS")
#define SRS_THEATERSOUND_TRUDIALOG ((ADVFUNC)"THSND_TRUDIALOG")
#define SRS_THEATERSOUND_TRUVOLUME_NORMALIZER ((ADVFUNC)"THSND_TRUVOLUME_NORMALIZER")
#define SRS_THEATERSOUND_TRUVOLUME_SMOOTH ((ADVFUNC)"THSND_TRUVOLUME_SMOOTH")
#define SRS_THEATERSOUND_HPF_END ((ADVFUNC)"THSND_HPF_END")
#define SRS_THEATERSOUND_TOTAL ((ADVFUNC)"THSND_TOTAL")

#define SRS_PURESOUND_HL ((ADVFUNC)"PURESND_HL")
#define SRS_PURESOUND_AEQ ((ADVFUNC)"PURESND_AEQ")
#define SRS_PURESOUND_HPF ((ADVFUNC)"PURESND_HPF")
#define SRS_PURESOUND_TBHD ((ADVFUNC)"PURESND_TBHD")
#define SRS_THEATERSOUND_CC3D_EN ((ADVFUNC)"THSND_CC3D_EN")
#define SRS_THEATERSOUND_CC3D_DEPTH_PROCESS_EN ((ADVFUNC)"THSND_CC3D_DEPTH_PROCESS_EN")
#define SRS_THEATERSOUND_CC3D_3D_SURR_BOOST_EN ((ADVFUNC)"THSND_CC3D_3D_SURR_BOOST_EN")
#define SRS_THEATERSOUND_CC3D_FADE_EN ((ADVFUNC)"THSND_CC3D_FADE_EN")
#define SRS_THEATERSOUND_CC3D_TSHD_MIX_EN ((ADVFUNC)"THSND_CC3D_TSHD_MIX_EN")
#define SRS_THEATERSOUND_CC3D_TBHDX_EN ((ADVFUNC)"THSND_CC3D_TBHDX_EN")
#define SRS_THEATERSOUND_GEQ_EN ((ADVFUNC)"THSND_GEQ_EN")
#define SRS_THEATERSOUND_3D_EN ((ADVFUNC)"THSND_3D_EN")

#define BONGIOVI_DPS_SURR_EN ((ADVFUNC)"DPS_SURR_EN")

#define SONICEMOTION_ABS3D_EN ((ADVFUNC)"ABS3D_EN")

#define DOLBY_DAP_EN ((ADVFUNC)"DAP_EN")

typedef char* ADVSND_PARAM;

#define BBE_MODE_SET ((ADVSND_PARAM)"BBE_MODE_SET")

#define DOLBY_PL2VDPK_SMOD ((ADVSND_PARAM)"PL2VDPK_SMOD")
#define DOLBY_PL2VDPK_WMOD ((ADVSND_PARAM)"PL2VDPK_WMOD")

#define SRS_TSXT_SET_INPUT_GAIN ((ADVSND_PARAM)"TSXT_SET_INPUT_GAIN")
#define SRS_TSXT_SET_DC_GAIN ((ADVSND_PARAM)"TSXT_SET_DC_GAIN")
#define SRS_TSXT_SET_TRUBASS_GAIN ((ADVSND_PARAM)"TSXT_SET_TRUBASS_GAIN")
#define SRS_TSXT_SET_SPEAKERSIZE ((ADVSND_PARAM)"TSXT_SET_SPEAKERSIZE")
#define SRS_TSXT_SET_INPUT_MODE ((ADVSND_PARAM)"TSXT_SET_INPUT_MODE")
#define SRS_TSXT_SET_OUTPUT_GAIN ((ADVSND_PARAM)"TSXT_SET_OUTPUT_GAIN")


#define SRS_TSHD_SET_INPUT_MODE ((ADVSND_PARAM)"TSHD_SET_INPUT_MODE")
#define SRS_TSHD_SET_OUTPUT_MODE ((ADVSND_PARAM)"TSHD_SET_OUTPUT_MODE")
#define SRS_TSHD_SET_SPEAKERSIZE ((ADVSND_PARAM)"TSHD_SET_SPEAKERSIZE")
#define SRS_TSHD_SET_TRUBASS_CONTROL ((ADVSND_PARAM)"TSHD_SET_TRUBASS_CONTROL")
#define SRS_TSHD_SET_DEFINITION_CONTROL ((ADVSND_PARAM)"TSHD_SET_DEFINITION_CONTROL")
#define SRS_TSHD_SET_DC_CONTROL ((ADVSND_PARAM)"TSHD_SET_DC_CONTROL")
#define SRS_TSHD_SET_SURROUND_LEVEL ((ADVSND_PARAM)"TSHD_SET_SURROUND_LEVEL")
#define SRS_TSHD_SET_INPUT_GAIN ((ADVSND_PARAM)"TSHD_SET_INPUT_GAIN")
#define SRS_TSHD_SET_WOWSPACE_CONTROL ((ADVSND_PARAM)"TSHD_SET_WOWSPACE_CONTROL")
#define SRS_TSHD_SET_WOWCENTER_CONTROL ((ADVSND_PARAM)"TSHD_SET_WOWCENTER_CONTROL")
#define SRS_TSHD_SET_WOWHDSRS3DMODE ((ADVSND_PARAM)"TSHD_SET_WOWHDSRS3DMODE")
#define SRS_TSHD_SET_LIMITERCONTROL ((ADVSND_PARAM)"TSHD_SET_LIMITERCONTROL")
#define SRS_TSHD_SET_OUTPUT_GAIN ((ADVSND_PARAM)"TSHD_SET_OUTPUT_GAIN")

#define SRS_THEATERSOUND_INPUT_GAIN ((ADVSND_PARAM)"THSND_INPUT_GAIN")
#define SRS_THEATERSOUND_DEFINITION_CONTROL ((ADVSND_PARAM)"THSND_DEFINITION_CONTROL")
#define SRS_THEATERSOUND_DC_CONTROL ((ADVSND_PARAM)"THSND_DC_CONTROL")
#define SRS_THEATERSOUND_TRUBASS_CONTROL ((ADVSND_PARAM)"THSND_TRUBASS_CONTROL")
#define SRS_THEATERSOUND_SPEAKERSIZE ((ADVSND_PARAM)"THSND_SPEAKERSIZE")
#define SRS_THEATERSOUND_HARDLIMITER_LEVEL ((ADVSND_PARAM)"THSND_HARDLIMITER_LEVEL")
#define SRS_THEATERSOUND_HARDLIMITER_BOOST_GAIN ((ADVSND_PARAM)"THSND_HARDLIMITER_BOOST_GAIN")
#define SRS_THEATERSOUND_HEADROOM_GAIN ((ADVSND_PARAM)"THSND_HEADROOM_GAIN")
#define SRS_THEATERSOUND_TRUVOLUME_MODE ((ADVSND_PARAM)"THSND_TRUVOLUME_MODE")

#define SRS_THEATERSOUND_TRUVOLUME_REF_LEVEL ((ADVSND_PARAM)"THSND_TRUVOLUME_REF_LEVEL")
#define SRS_THEATERSOUND_TRUVOLUME_MAX_GAIN ((ADVSND_PARAM)"THSND_TRUVOLUME_MAX_GAIN")
#define SRS_THEATERSOUND_TRUVOLUME_NOISE_MNGR_THLD ((ADVSND_PARAM)"THSND_TRUVOLUME_NOISE_MNGR_THLD")
#define SRS_THEATERSOUND_TRUVOLUME_CALIBRATE ((ADVSND_PARAM)"THSND_TRUVOLUME_CALIBRATE")
#define SRS_THEATERSOUND_TRUVOLUME_INPUT_GAIN ((ADVSND_PARAM)"THSND_TRUVOLUME_INPUT_GAIN")
#define SRS_THEATERSOUND_TRUVOLUME_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_TRUVOLUME_OUTPUT_GAIN")
#define SRS_THEATERSOUND_HPF_FC ((ADVSND_PARAM)"THSND_HPF_FC")
#define SRS_THEATERSOUND_TSHD_INPUT_GAIN ((ADVSND_PARAM)"THSND_TSHD_INPUT_GAIN")
#define SRS_THEATERSOUND_TSHD_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_TSHD_OUTPUT_GAIN")
#define SRS_THEATERSOUND_SURR_LEVEL_CONTROL ((ADVSND_PARAM)"THSND_SURR_LEVEL_CONTROL")
#define SRS_THEATERSOUND_TRUBASS_COMPRESSOR_CONTROL ((ADVSND_PARAM)"THSND_TRUBASS_COMPRESSOR_CONTROL")
#define SRS_THEATERSOUND_TRUBASS_PROCESS_MODE ((ADVSND_PARAM)"THSND_TRUBASS_PROCESS_MODE")
#define SRS_THEATERSOUND_TRUBASS_SPEAKER_AUDIO ((ADVSND_PARAM)"THSND_TRUBASS_SPEAKER_AUDIO")
#define SRS_THEATERSOUND_TRUBASS_SPEAKER_ANALYSIS ((ADVSND_PARAM)"THSND_TRUBASS_SPEAKER_ANALYSIS")
#define SRS_THEATERSOUND_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_OUTPUT_GAIN")
#define SRS_THEATERSOUND_BYPASS_GAIN ((ADVSND_PARAM)"THSND_BYPASS_GAIN")
#define SRS_THEATERSOUND_INPUT_MODE ((ADVSND_PARAM)"THSND_INPUT_MODE")
#define SRS_THEATERSOUND_TRUVOLUME_BYPASS_GAIN ((ADVSND_PARAM)"THSND_TRUVOLUME_BYPASS_GAIN")
#define SRS_THEATERSOUND_CS_INPUT_GAIN ((ADVSND_PARAM)"THSND_CS_INPUT_GAIN")


#define DTS_ULTRATV_EVO_MONOINPUT ((ADVSND_PARAM)"ULTRATV_EVO_MONOINPUT")
#define DTS_ULTRATV_EVO_WIDENINGON ((ADVSND_PARAM)"ULTRATV_EVO_WIDENINGON")
#define DTS_ULTRATV_EVO_ADD3DBON ((ADVSND_PARAM)"ULTRATV_EVO_ADD3DBON")
#define DTS_ULTRATV_EVO_PCELEVEL ((ADVSND_PARAM)"ULTRATV_EVO_PCELEVEL")
#define DTS_ULTRATV_EVO_VLFELEVEL ((ADVSND_PARAM)"ULTRATV_EVO_VLFELEVEL")
#define DTS_ULTRATV_SYM_DEFAULT ((ADVSND_PARAM)"ULTRATV_SYM_DEFAULT")
#define DTS_ULTRATV_SYM_MODE ((ADVSND_PARAM)"ULTRATV_SYM_MODE")
#define DTS_ULTRATV_SYM_LEVEL ((ADVSND_PARAM)"ULTRATV_SYM_LEVEL")
#define DTS_ULTRATV_SYM_RESET ((ADVSND_PARAM)"ULTRATV_SYM_RESET")

#define AUDYSSEY_DYNAMICVOL_COMPRESS_MODE ((ADVSND_PARAM)"AUDYSSEY_DYNAMICVOL_COMPRESS_MODE")
#define AUDYSSEY_DYNAMICVOL_GC ((ADVSND_PARAM)"AUDYSSEY_DYNAMICVOL_GC")
#define AUDYSSEY_DYNAMICVOL_VOLSETTING ((ADVSND_PARAM)"AUDYSSEY_DYNAMICVOL_VOLSETTING")
#define AUDYSSEY_DYNAMICEQ_EQOFFSET ((ADVSND_PARAM)"AUDYSSEY_DYNAMICEQ_EQOFFSET")
#define AUDYSSEY_ABX_GWET ((ADVSND_PARAM)"AUDYSSEY_ABX_GWET")
#define AUDYSSEY_ABX_GDRY ((ADVSND_PARAM)"AUDYSSEY_ABX_GDRY")
#define AUDYSSEY_ABX_FILSET ((ADVSND_PARAM)"AUDYSSEY_ABX_FILSET")

#define DBX_MODE_SET ((ADVSND_PARAM)"DBX_MODE_SET")
#define DBX_LOAD_PM ((ADVSND_PARAM)"DBX_LOAD_PM")
#define DBX_LOAD_DM ((ADVSND_PARAM)"DBX_LOAD_DM")
#define DBX_COPY_TotSonDM ((ADVSND_PARAM)"DBX_COPY_TotSonDM")
#define DBX_COPY_TotSonPM ((ADVSND_PARAM)"DBX_COPY_TotSonPM")
#define DBX_COPY_TotVolDM ((ADVSND_PARAM)"DBX_COPY_TotVolDM")
#define DBX_COPY_TotVolPM ((ADVSND_PARAM)"DBX_COPY_TotVolPM")
#define DBX_COPY_TotSurDM ((ADVSND_PARAM)"DBX_COPY_TotSurDM")
#define DBX_COPY_TotSurPM ((ADVSND_PARAM)"DBX_COPY_TotSurPM")

#define SRS_THEATERSOUND_CS_PROCESS_MODE ((ADVSND_PARAM)"THSND_CS_PROCESS_MODE")
#define SRS_THEATERSOUND_CS_LR_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_CS_LR_OUTPUT_GAIN")
#define SRS_THEATERSOUND_CS_LsRs_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_CS_LsRs_OUTPUT_GAIN")
#define SRS_THEATERSOUND_CS_Center_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_CS_Center_OUTPUT_GAIN")
#define SRS_THEATERSOUND_TRUDIALOG_INPUT_GAIN ((ADVSND_PARAM)"THSND_TRUDIALOG_INPUT_GAIN")
#define SRS_THEATERSOUND_TRUDIALOG_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_TRUDIALOG_OUTPUT_GAIN")
#define SRS_THEATERSOUND_TRUDIALOG_BYPASS_GAIN ((ADVSND_PARAM)"THSND_TRUDIALOG_BYPASS_GAIN")
#define SRS_THEATERSOUND_TRUDIALOG_PROCESS_GAIN ((ADVSND_PARAM)"THSND_TRUDIALOG_PROCESS_GAIN")
#define SRS_THEATERSOUND_TRUDIALOG_CLARITY_GAIN ((ADVSND_PARAM)"THSND_TRUDIALOG_CLARITY_GAIN")
#define SRS_THEATERSOUND_TRUVOLUME_NORMALIZE_THRESH ((ADVSND_PARAM)"THSND_TRUVOLUME_NORMALIZE_THRESH")
#define SRS_THEATERSOUND_HPF_CUTOFF ((ADVSND_PARAM)"THSND_HPF_CUTOFF")
#define SRS_THEATERSOUND_HPF_END_CUTOFF ((ADVSND_PARAM)"THSND_HPF_END_CUTOFF")

#define SRS_PURESOUND_HL_INPUT_GAIN ((ADVSND_PARAM)"PURESND_HL_INPUT_GAIN")
#define SRS_PURESOUND_HL_OUTPUT_GAIN ((ADVSND_PARAM)"PURESND_HL_OUTPUT_GAIN")
#define SRS_PURESOUND_HL_BYPASS_GAIN ((ADVSND_PARAM)"PURESND_HL_BYPASS_GAIN")
#define SRS_PURESOUND_HL_LIMITERBOOST ((ADVSND_PARAM)"PURESND_HL_LIMITERBOOST")
#define SRS_PURESOUND_HL_HARDLIMIT ((ADVSND_PARAM)"PURESND_HL_HARDLIMIT")
#define SRS_PURESOUND_HL_DELAYLEN ((ADVSND_PARAM)"PURESND_HL_DELAYLEN")
#define SRS_PURESOUND_AEQ_INPUT_GAIN ((ADVSND_PARAM)"PURESND_AEQ_INPUT_GAIN")
#define SRS_PURESOUND_AEQ_OUTPUT_GAIN ((ADVSND_PARAM)"PURESND_AEQ_OUTPUT_GAIN")
#define SRS_PURESOUND_AEQ_BYPASS_GAIN ((ADVSND_PARAM)"PURESND_AEQ_BYPASS_GAIN")
#define SRS_PURESOUND_FILTER_CONFIG ((ADVSND_PARAM)"PURESND_FILTER_CONFIG")
#define SRS_PURESOUND_HPF_FREQUENCY ((ADVSND_PARAM)"PURESND_HPF_FREQUENCY")
#define SRS_PURESOUND_TBHD_TRUBASS_LEVEL ((ADVSND_PARAM)"PURESND_TBHD_TRUBASS_LEVEL")
#define SRS_PURESOUND_TBHD_SPEAKER_SIZE ((ADVSND_PARAM)"PURESND_TBHD_SPEAKER_SIZE")
#define SRS_PURESOUND_TBHD_LEVEL_INDEPENDENT_EN ((ADVSND_PARAM)"PURESND_TBHD_LEVEL_INDEPENDENT_EN")
#define SRS_PURESOUND_TBHD_COMPRESSOR_LEVEL ((ADVSND_PARAM)"PURESND_TBHD_COMPRESSOR_LEVEL")
#define SRS_PURESOUND_TBHD_MODE ((ADVSND_PARAM)"PURESND_TBHD_MODE")
#define SRS_PURESOUND_TBHD_SPEAKER_AUDIO ((ADVSND_PARAM)"PURESND_TBHD_SPEAKER_AUDIO")
#define SRS_PURESOUND_TBHD_SPEAKER_ANALYSIS ((ADVSND_PARAM)"PURESND_TBHD_SPEAKER_ANALYSIS")
#define SRS_PURESOUND_INPUT_GAIN ((ADVSND_PARAM)"PURESND_INPUT_GAIN")
#define SRS_PURESOUND_OUTPUT_GAIN ((ADVSND_PARAM)"PURESND_OUTPUT_GAIN")

#define SRS_THEATERSOUND_CC3D_INPUT_GAIN ((ADVSND_PARAM)"THSND_CC3D_INPUT_GAIN")
#define SRS_THEATERSOUND_CC3D_OUTPUT_GAIN ((ADVSND_PARAM)"THSND_CC3D_OUTPUT_GAIN")
#define SRS_THEATERSOUND_CC3D_BYPASS_GAIN ((ADVSND_PARAM)"THSND_CC3D_BYPASS_GAIN")
#define SRS_THEATERSOUND_CC3D_APERTURE ((ADVSND_PARAM)"THSND_CC3D_APERTURE")
#define SRS_THEATERSOUND_CC3D_GAINLIMIT ((ADVSND_PARAM)"THSND_CC3D_GAINLIMIT")
#define SRS_THEATERSOUND_CC3D_FF_DEPTH ((ADVSND_PARAM)"THSND_CC3D_FF_DEPTH")
#define SRS_THEATERSOUND_CC3D_NF_DEPTH ((ADVSND_PARAM)"THSND_CC3D_NF_DEPTH")
#define SRS_THEATERSOUND_CC3D_TSHD_SURR_MODE ((ADVSND_PARAM)"THSND_CC3D_TSHD_SURR_MODE")
#define SRS_THEATERSOUND_CC3D_TSHD_MIX_FADE_CTRL ((ADVSND_PARAM)"THSND_CC3D_TSHD_MIX_FADE_CTRL")

#define SRS_THEATERSOUND_CC3D_TBHDX_INPUT_GAIN ((ADVSND_PARAM)"THSND_CC3D_TBHDX_INPUT_GAIN")
#define SRS_THEATERSOUND_CC3D_TBHDX_BASSLEVEL ((ADVSND_PARAM)"THSND_CC3D_TBHDX_BASSLEVEL")
#define SRS_THEATERSOUND_CC3D_TBHDX_SPEAKERSIZE ((ADVSND_PARAM)"THSND_CC3D_TBHDX_SPEAKERSIZE")
#define SRS_THEATERSOUND_CC3D_TBHDX_MODE ((ADVSND_PARAM)"THSND_CC3D_TBHDX_MODE")
#define SRS_THEATERSOUND_CC3D_TBHDX_DYNAMICS ((ADVSND_PARAM)"THSND_CC3D_TBHDX_DYNAMICS")
#define SRS_THEATERSOUND_CC3D_TBHDX_HP_ORDER ((ADVSND_PARAM)"THSND_CC3D_TBHDX_HP_ORDER")
#define SRS_THEATERSOUND_CC3D_TBHDX_CUSTOM_FILTER ((ADVSND_PARAM)"THSND_CC3D_TBHDX_CUSTOM_FILTER")
#define SRS_THEATERSOUND_GEQ_INPUT_GAIN ((ADVSND_PARAM)"THSND_GEQ_INPUT_GAIN")
#define SRS_THEATERSOUND_GEQ_BAND0_GAIN ((ADVSND_PARAM)"THSND_GEQ_BAND0_GAIN")
#define SRS_THEATERSOUND_GEQ_BAND1_GAIN ((ADVSND_PARAM)"THSND_GEQ_BAND1_GAIN")
#define SRS_THEATERSOUND_GEQ_BAND2_GAIN ((ADVSND_PARAM)"THSND_GEQ_BAND2_GAIN")
#define SRS_THEATERSOUND_GEQ_BAND3_GAIN ((ADVSND_PARAM)"THSND_GEQ_BAND3_GAIN")
#define SRS_THEATERSOUND_GEQ_BAND4_GAIN ((ADVSND_PARAM)"THSND_GEQ_BAND4_GAIN")
#define SRS_THEATERSOUND_CC3D_PROCESS_PATH ((ADVSND_PARAM)"THSND_CC3D_PROCESS_PATH")
#define SRS_THEATERSOUND_TSHD_BYPASS_GAIN ((ADVSND_PARAM)"THSND_TSHD_BYPASS_GAIN")

#define BONGIOVI_DPS_SET_PARAMS ((ADVSND_PARAM)"DPS_SET_PARAMS")
#define BONGIOVI_DPS_SET_GLOBAL_INPUT_GAIN ((ADVSND_PARAM)"DPS_SET_GLOBAL_INPUT_GAIN")
#define BONGIOVI_DPS_SET_GLOBAL_OUTPUT_GAIN ((ADVSND_PARAM)"DPS_SET_GLOBAL_OUTPUT_GAIN")
#define BONGIOVI_DPS_SET_STEREO_WIDENER_MGAIN ((ADVSND_PARAM)"DPS_SET_STEREO_WIDENER_MGAIN")
#define BONGIOVI_DPS_SET_STEREO_WIDENER_SGAIN ((ADVSND_PARAM)"DPS_SET_STEREO_WIDENER_SGAIN")

#define SONICEMOTION_ABS3D_SET_PARAMS ((ADVSND_PARAM)"ABS3D_SET_PARAMS")

#define DOLBY_DAP_SET_PARAMS ((ADVSND_PARAM)"DAP_SET_PARAMS")

#define DBXTV_SET_MODE ((ADVSND_PARAM)"DBXTV_SET_MODE")


#define ADVSND_PARAM_DUMMY "ADVSND_PARAM_DUMMY"
#define SRS_TSXT_RESERVE1 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define SRS_TSXT_RESERVE2 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define SRS_TSXT_RESERVE3 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define SRS_TSHD_RESERVE1 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define SRS_TSHD_RESERVE2 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define SRS_TSHD_RESERVE3 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE1 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE2 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE3 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE4 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE5 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE6 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE7 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE8 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define DTS_ULTRATV_RESERVE9 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define AUDYSSEY_RESERVE1 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define AUDYSSEY_RESERVE2 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define AUDYSSEY_RESERVE3 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define AUDYSSEY_RESERVE4 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define AUDYSSEY_RESERVE5 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define AUDYSSEY_RESERVE6 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE9 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE10 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE11 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE12 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE13 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE14 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE15 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE16 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE17 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE18 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE19 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE20 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE21 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE22 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE23 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE24 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE25 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE26 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE27 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE28 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE29 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)
#define OTHERS_RESERVE30 ((ADVSND_PARAM)ADVSND_PARAM_DUMMY)

#else

typedef enum
{
    DOLBY_PL2VDS,
    DOLBY_PL2VDPK,
    BBE,
    SRS_TSXT,
    SRS_TSHD,
    SRS_THEATERSOUND,
    DTS_ULTRATV,
    AUDYSSEY,
    SUPER_VOICE,
    DBX,
    SRS_PURESND,
    DTS_STUDIOSOUND_3D,
    BONGIOVI_DPS,
    CV3,
    SONICMOTION_ABS3D,
    DOLBY_DAP,
    ADV_NONE,
} ADVSND_TYPE;

typedef enum
{

    SRS_TSXT_TRUBASS,
    SRS_TSXT_DC,


    SRS_TSHD_TRUBASS,
    SRS_TSHD_DC,
    SRS_TSHD_DEFINITION,
    SRS_TSHD_SRS3D,


    SRS_THEATERSOUND_TSHD,
    SRS_THEATERSOUND_TRUBASS,
    SRS_THEATERSOUND_DC,
    SRS_THEATERSOUND_DEFINITION,
    SRS_THEATERSOUND_TRUVOLUME,
    SRS_THEATERSOUND_HARDLIMITER,
    SRS_THEATERSOUND_HPF,
    SRS_THEATERSOUND_TRUEQ,
    SRS_THEATERSOUND_TRUVOLUME_NOISE_MNGR,


    DTS_ULTRATV_EVO,
    DTS_ULTRATV_SYM,


    AUDYSSEY_DYNAMICVOL,
    AUDYSSEY_DYNAMICEQ,
    AUDYSSEY_EQ,
    AUDYSSEY_ABX,

    SRS_THEATERSOUND_TSHD_SURR,
    SRS_THEATERSOUND_TSHD_LEVEL_INDPT,
    SRS_THEATERSOUND_CS,
    SRS_THEATERSOUND_TRUDIALOG,
    SRS_THEATERSOUND_TRUVOLUME_NORMALIZER,
    SRS_THEATERSOUND_TRUVOLUME_SMOOTH,
    SRS_THEATERSOUND_HPF_END,
    SRS_THEATERSOUND_TOTAL,

    SRS_PURESOUND_HL,
    SRS_PURESOUND_AEQ,
    SRS_PURESOUND_HPF,
    SRS_PURESOUND_TBHD,
    SRS_THEATERSOUND_CC3D_EN,
    SRS_THEATERSOUND_CC3D_DEPTH_PROCESS_EN,
    SRS_THEATERSOUND_CC3D_3D_SURR_BOOST_EN,
    SRS_THEATERSOUND_CC3D_FADE_EN,
    SRS_THEATERSOUND_CC3D_TSHD_MIX_EN,
    SRS_THEATERSOUND_CC3D_TBHDX_EN,
    SRS_THEATERSOUND_GEQ_EN,
    SRS_THEATERSOUND_3D_EN,


    BONGIOVI_DPS_SURR_EN,


    SONICEMOTION_ABS3D_EN,


    DOLBY_DAP_EN,
} ADVFUNC;

typedef enum
{

    BBE_MODE_SET,


    DOLBY_PL2VDPK_SMOD,
    DOLBY_PL2VDPK_WMOD,


    SRS_TSXT_SET_INPUT_GAIN,
    SRS_TSXT_SET_DC_GAIN,
    SRS_TSXT_SET_TRUBASS_GAIN,
    SRS_TSXT_SET_SPEAKERSIZE,
    SRS_TSXT_SET_INPUT_MODE,
    SRS_TSXT_SET_OUTPUT_GAIN,
    SRS_TSXT_RESERVE1,
    SRS_TSXT_RESERVE2,
    SRS_TSXT_RESERVE3,


    SRS_TSHD_SET_INPUT_MODE,
    SRS_TSHD_SET_OUTPUT_MODE,
    SRS_TSHD_SET_SPEAKERSIZE,
    SRS_TSHD_SET_TRUBASS_CONTROL,
    SRS_TSHD_SET_DEFINITION_CONTROL,
    SRS_TSHD_SET_DC_CONTROL,
    SRS_TSHD_SET_SURROUND_LEVEL,
    SRS_TSHD_SET_INPUT_GAIN,
    SRS_TSHD_SET_WOWSPACE_CONTROL,
    SRS_TSHD_SET_WOWCENTER_CONTROL,
    SRS_TSHD_SET_WOWHDSRS3DMODE,
    SRS_TSHD_SET_LIMITERCONTROL,
    SRS_TSHD_SET_OUTPUT_GAIN,
    SRS_TSHD_RESERVE1,
    SRS_TSHD_RESERVE2,
    SRS_TSHD_RESERVE3,


    SRS_THEATERSOUND_INPUT_GAIN,
    SRS_THEATERSOUND_DEFINITION_CONTROL,
    SRS_THEATERSOUND_DC_CONTROL,
    SRS_THEATERSOUND_TRUBASS_CONTROL,
    SRS_THEATERSOUND_SPEAKERSIZE,
    SRS_THEATERSOUND_HARDLIMITER_LEVEL,
    SRS_THEATERSOUND_HARDLIMITER_BOOST_GAIN,
    SRS_THEATERSOUND_HEADROOM_GAIN,
    SRS_THEATERSOUND_TRUVOLUME_MODE,
    SRS_THEATERSOUND_TRUVOLUME_REF_LEVEL,
    SRS_THEATERSOUND_TRUVOLUME_MAX_GAIN,
    SRS_THEATERSOUND_TRUVOLUME_NOISE_MNGR_THLD,
    SRS_THEATERSOUND_TRUVOLUME_CALIBRATE,
    SRS_THEATERSOUND_TRUVOLUME_INPUT_GAIN,
    SRS_THEATERSOUND_TRUVOLUME_OUTPUT_GAIN,
    SRS_THEATERSOUND_HPF_FC,
    SRS_THEATERSOUND_TSHD_INPUT_GAIN,
    SRS_THEATERSOUND_TSHD_OUTPUT_GAIN,
    SRS_THEATERSOUND_SURR_LEVEL_CONTROL,
    SRS_THEATERSOUND_TRUBASS_COMPRESSOR_CONTROL,
    SRS_THEATERSOUND_TRUBASS_PROCESS_MODE,
    SRS_THEATERSOUND_TRUBASS_SPEAKER_AUDIO,
    SRS_THEATERSOUND_TRUBASS_SPEAKER_ANALYSIS,
    SRS_THEATERSOUND_OUTPUT_GAIN,
    SRS_THEATERSOUND_BYPASS_GAIN,
    SRS_THEATERSOUND_INPUT_MODE,
    SRS_THEATERSOUND_TRUVOLUME_BYPASS_GAIN,
    SRS_THEATERSOUND_CS_INPUT_GAIN,


    DTS_ULTRATV_EVO_MONOINPUT,
    DTS_ULTRATV_EVO_WIDENINGON,
    DTS_ULTRATV_EVO_ADD3DBON,
    DTS_ULTRATV_EVO_PCELEVEL,
    DTS_ULTRATV_EVO_VLFELEVEL,
    DTS_ULTRATV_RESERVE1,
    DTS_ULTRATV_RESERVE2,
    DTS_ULTRATV_RESERVE3,
    DTS_ULTRATV_RESERVE4,
    DTS_ULTRATV_RESERVE5,
    DTS_ULTRATV_RESERVE6,

    DTS_ULTRATV_SYM_DEFAULT,
    DTS_ULTRATV_SYM_MODE,
    DTS_ULTRATV_SYM_LEVEL,
    DTS_ULTRATV_SYM_RESET,
    DTS_ULTRATV_RESERVE7,
    DTS_ULTRATV_RESERVE8,
    DTS_ULTRATV_RESERVE9,


    AUDYSSEY_DYNAMICVOL_COMPRESS_MODE,
    AUDYSSEY_DYNAMICVOL_GC,
    AUDYSSEY_DYNAMICVOL_VOLSETTING,
    AUDYSSEY_DYNAMICEQ_EQOFFSET,
    AUDYSSEY_ABX_GWET,
    AUDYSSEY_ABX_GDRY,
    AUDYSSEY_ABX_FILSET,
    AUDYSSEY_RESERVE1,
    AUDYSSEY_RESERVE2,
    AUDYSSEY_RESERVE3,
    AUDYSSEY_RESERVE4,
    AUDYSSEY_RESERVE5,
    AUDYSSEY_RESERVE6,


    DBX_MODE_SET,
    DBX_LOAD_PM,
    DBX_LOAD_DM,
    DBX_COPY_TotSonDM,
    DBX_COPY_TotSonPM,
    DBX_COPY_TotVolDM,
    DBX_COPY_TotVolPM,
    DBX_COPY_TotSurDM,
    DBX_COPY_TotSurPM,
    OTHERS_RESERVE9,
    OTHERS_RESERVE10,
    OTHERS_RESERVE11,
    OTHERS_RESERVE12,
    OTHERS_RESERVE13,
    OTHERS_RESERVE14,
    OTHERS_RESERVE15,
    OTHERS_RESERVE16,
    OTHERS_RESERVE17,
    OTHERS_RESERVE18,
    OTHERS_RESERVE19,
    OTHERS_RESERVE20,
    OTHERS_RESERVE21,
    OTHERS_RESERVE22,
    OTHERS_RESERVE23,
    OTHERS_RESERVE24,
    OTHERS_RESERVE25,
    OTHERS_RESERVE26,
    OTHERS_RESERVE27,
    OTHERS_RESERVE28,
    OTHERS_RESERVE29,
    OTHERS_RESERVE30,

    SRS_THEATERSOUND_CS_PROCESS_MODE,
    SRS_THEATERSOUND_CS_LR_OUTPUT_GAIN,
    SRS_THEATERSOUND_CS_LsRs_OUTPUT_GAIN,
    SRS_THEATERSOUND_CS_Center_OUTPUT_GAIN,
    SRS_THEATERSOUND_TRUDIALOG_INPUT_GAIN,
    SRS_THEATERSOUND_TRUDIALOG_OUTPUT_GAIN,
    SRS_THEATERSOUND_TRUDIALOG_BYPASS_GAIN,
    SRS_THEATERSOUND_TRUDIALOG_PROCESS_GAIN,
    SRS_THEATERSOUND_TRUDIALOG_CLARITY_GAIN,
    SRS_THEATERSOUND_TRUVOLUME_NORMALIZE_THRESH,
    SRS_THEATERSOUND_HPF_CUTOFF,
    SRS_THEATERSOUND_HPF_END_CUTOFF,



    SRS_PURESOUND_HL_INPUT_GAIN,
    SRS_PURESOUND_HL_OUTPUT_GAIN,
    SRS_PURESOUND_HL_BYPASS_GAIN,
    SRS_PURESOUND_HL_LIMITERBOOST,
    SRS_PURESOUND_HL_HARDLIMIT,
    SRS_PURESOUND_HL_DELAYLEN,
    SRS_PURESOUND_AEQ_INPUT_GAIN,
    SRS_PURESOUND_AEQ_OUTPUT_GAIN,
    SRS_PURESOUND_AEQ_BYPASS_GAIN,
    SRS_PURESOUND_FILTER_CONFIG,
    SRS_PURESOUND_HPF_FREQUENCY,
    SRS_PURESOUND_TBHD_TRUBASS_LEVEL,
    SRS_PURESOUND_TBHD_SPEAKER_SIZE,
    SRS_PURESOUND_TBHD_LEVEL_INDEPENDENT_EN,
    SRS_PURESOUND_TBHD_COMPRESSOR_LEVEL,
    SRS_PURESOUND_TBHD_MODE,
    SRS_PURESOUND_TBHD_SPEAKER_AUDIO,
    SRS_PURESOUND_TBHD_SPEAKER_ANALYSIS,
    SRS_PURESOUND_INPUT_GAIN,
    SRS_PURESOUND_OUTPUT_GAIN,


    SRS_THEATERSOUND_CC3D_INPUT_GAIN,
    SRS_THEATERSOUND_CC3D_OUTPUT_GAIN,
    SRS_THEATERSOUND_CC3D_BYPASS_GAIN,
    SRS_THEATERSOUND_CC3D_APERTURE,
    SRS_THEATERSOUND_CC3D_GAINLIMIT,
    SRS_THEATERSOUND_CC3D_FF_DEPTH,
    SRS_THEATERSOUND_CC3D_NF_DEPTH,

    SRS_THEATERSOUND_CC3D_TSHD_SURR_MODE,
    SRS_THEATERSOUND_CC3D_TSHD_MIX_FADE_CTRL,

    SRS_THEATERSOUND_CC3D_TBHDX_INPUT_GAIN,
    SRS_THEATERSOUND_CC3D_TBHDX_BASSLEVEL,
    SRS_THEATERSOUND_CC3D_TBHDX_SPEAKERSIZE,
    SRS_THEATERSOUND_CC3D_TBHDX_MODE,
    SRS_THEATERSOUND_CC3D_TBHDX_DYNAMICS,
    SRS_THEATERSOUND_CC3D_TBHDX_HP_ORDER,
    SRS_THEATERSOUND_CC3D_TBHDX_CUSTOM_FILTER,
    SRS_THEATERSOUND_GEQ_INPUT_GAIN,
    SRS_THEATERSOUND_GEQ_BAND0_GAIN,
    SRS_THEATERSOUND_GEQ_BAND1_GAIN,
    SRS_THEATERSOUND_GEQ_BAND2_GAIN,
    SRS_THEATERSOUND_GEQ_BAND3_GAIN,
    SRS_THEATERSOUND_GEQ_BAND4_GAIN,
    SRS_THEATERSOUND_CC3D_PROCESS_PATH,
    SRS_THEATERSOUND_TSHD_BYPASS_GAIN,


    DV258_ENABLE,
    DV258_LCL_ENABLE,
    DV258_LCL_LEVELER_ENABLE,
    DV258_LCL_MODELER_ENABLE,
    DV258_LCL_MODELER_HALF_MODE,
    DV258_LCL_AMOUNT,
    DV258_LCL_AVM,
    DV258_LCL_DVM,
    DV258_LCL_IRL,
    DV258_LCL_ORL,
    DV258_LCL_PREGAIN,
    DV258_LCL_GAIN,

    DV258_LIMITER_ENABLE,
    DV258_LIMITER_PEAK,
    DV258_LIMITER_BOOST,
    DV258_LIMITER_RMS,


    BONGIOVI_DPS_SET_PARAMS,
    BONGIOVI_DPS_SET_GLOBAL_INPUT_GAIN,
    BONGIOVI_DPS_SET_GLOBAL_OUTPUT_GAIN,
    BONGIOVI_DPS_SET_STEREO_WIDENER_MGAIN,
    BONGIOVI_DPS_SET_STEREO_WIDENER_SGAIN,


    SONICEMOTION_ABS3D_SET_PARAMS,


    DOLBY_DAP_SET_PARAMS,


    DBXTV_SET_MODE,
} ADVSND_PARAM;

#endif


typedef enum
{
    AUDIO_DOLBY_DD_Cert,
    AUDIO_DOLBY_DDP_Cert,
    AUDIO_DOLBY_PULSE_Cert,
    AUDIO_DOLBY_DDCO_Cert,
    AUDIO_DOLBY_MS10_Cert,
    AUDIO_DOLBY_RESERVE1,
    AUDIO_DOLBY_RESERVE2,
    AUDIO_DOLBY_RESERVE3,
    AUDIO_DTS_DMP_Cert,
    AUDIO_DTS_BC_Cert,
    AUDIO_DTS_PremiumTV_Cert,
    AUDIO_DTS_SYMMETRY_Cert,
    AUDIO_DTS_ENVELO_Cert,
    AUDIO_DTS_RESERVE1,
    AUDIO_DTS_RESERVE2,
    AUDIO_DTS_RESERVE3,
    AUDIO_SRS_XT_Cert,
    AUDIO_SRS_RESERVE1,
    AUDIO_SRS_RESERVE2,
    AUDIO_SRS_RESERVE3,
} Audio_CertMode;

typedef enum
{
    AUDIO_CERT_Enable,
    AUDIO_CERT_Disable
}Audio_CertEnable;


typedef enum
{

    AUDIO_VoIP_CONFIG_REGISTER_DEC_CB,
    AUDIO_VoIP_CONFIG_REGISTER_SE_CB,


    AUDIO_VoIP_CONFIG_ALSA_PLAYBACK,


    AUDIO_VOIP_CONFIG_PCM_UPLOAD,

}AUDIO_VoIP_CONFIG_TYPE;




typedef struct
{
    XPCM_TYPE audioType;
#if defined(UFO_PUBLIC_HEADER_212) ||defined(UFO_PUBLIC_HEADER_500_3)
    MS_U32 sampleRate;
#else
    MS_U16 sampleRate;
#endif
    MS_U16 blockSize;
    MS_U16 samplePerBlock;
    MS_U8 channels;
    MS_U8 bitsPerSample;

} Audio_XPCM_Param;

typedef struct
{
    #define MAX_NUM_CODECS 5

    MS_U16 Channels[MAX_NUM_CODECS];
    MS_U16 Regions[MAX_NUM_CODECS];
    MS_U16 cplStart[MAX_NUM_CODECS];
    MS_U16 cplQbits[MAX_NUM_CODECS];
    MS_U16 FrameSize[MAX_NUM_CODECS];

    MS_U16 mNumCodecs;
    MS_U16 mSamples;
    MS_U16 mSampleRate;

} Audio_COOK_Param;

typedef struct
{
    MS_U32 u32Version;
    MS_U32 u32Channels;
    MS_U32 u32SampleRate;
    MS_U32 u32ByteRate;
    MS_U32 u32BlockAlign;
    MS_U32 u32Encopt;
    MS_U32 u32ParsingByApp;
    MS_U32 u32BitsPerSample;
    MS_U32 u32ChannelMask;
    MS_U32 u32DrcParamExist;
    MS_U32 u32DrcRmsAmpRef;
    MS_U32 u32DrcRmsAmpTarget;
    MS_U32 u32DrcPeakAmpRef;
    MS_U32 u32DrcPeakAmpTarget;
    MS_U32 u32MaxPacketSize;

} Audio_ASF_Param;

typedef struct
{
    MS_U32 U32WrtAddr;
    MS_U32 U32WrtBytes;

} Audio_MM_Data_Request;

typedef struct
{
    MS_U32 U32DecodeFrame;
    MS_U32 U32WrtAddr;
    MS_U32 U32WrtBytes;

    MS_S64 S64CPTS;
    MS_U32 U32FrameSize;
    MS_U32 U32ReadAddr;
    MS_U32 U32Channels;
    MS_U32 U32Bps;
    MS_U32 U32SampleRate;
    MS_U32 U32WriteAddr;
} Audio_MM_PCM_Info;

typedef struct
{
    MS_U32 U32Name;
    MS_U32 U32IsHashkeySupported;

} Audio_Hashkey_Info;


typedef enum
{

    AU_DEC_INVALID = -1,

    AU_DEC_ID1 = 0,

    AU_DEC_ID2 = 1,

    AU_DEC_ID3 = 2,
    AU_DEC_MAX = 3

} AUDIO_DEC_ID;

typedef enum
{
    AUDIO_DSP_ID_DEC = 0x00,
    AUDIO_DSP_ID_SND,
    AUDIO_DSP_ID_R2,

    AUDIO_DSP_ID_ALL = 0xFF
} AUDIO_DSP_ID;

typedef enum
{
    AUDIO_MM_OMX = 0x00,
    AUDIO_MM_VD,
    AUDIO_MM_MAX = 0xFF
} AUDIO_MM_TYPE;

typedef enum
{
    FILTER_TYPE_AUDIO_1 = 0,
    FILTER_TYPE_AUDIO_2,
    FILTER_TYPE_AUDIO_INVALID,

} AUDIO_FILTER_TYPE;

typedef enum
{
    Audio_ParamType_SoundMode = 0,
    Audio_ParamType_syncSTC,
    Audio_ParamType_PTS_info,
    Audio_ParamType_setAudioDecoder,
    Audio_ParamType_acMode,
    Audio_ParamType_MM_FFx2,
    Audio_ParamType_reqDataSize,
    Audio_ParamType_esBuf_informDataRdy,
    Audio_ParamType_playControl,
    Audio_ParamType_mute,
    Audio_ParamType_predecode,
    Audio_ParamType_setWMADecParam,
    Audio_ParamType_setCOOKDecParam,
    Audio_ParamType_setXPCMDecParam,
    Audio_ParamType_UNI_PCM3_Input_Addr,
    Audio_ParamType_UNI_NEED_DECODE_FRMCNT,
    Audio_ParamType_UNI_ES_Wptr,
    Audio_ParamType_UNI_PCMOutCnt,
    Audio_ParamType_AllocDecoder,
    Audio_ParamType_FreeDecoder,
    Audio_ParamType_omx_spdif_mode,
    Audio_ParamType_omx_spdif_play,
    Audio_ParamType_omx_spdif_pcmLevel,
    Audio_ParamType_setExtSynth,
    Audio_ParamType_trueHD_bypass_enable,
    Audio_ParamType_tvos2_PCM_rdPtr,
    Audio_ParamType_tvos2_DTV_SyncType,
    Audio_ParamType_CommonCmd,
    Audio_ParamType_Multi_Channel,
    Audio_ParamType_omx_spdif_pause,
    Audio_ParamType_omx_spdif_flush,
    Audio_ParamType_omx_spdif_allowed_sampleSize,
    Audio_R2_SHM_PARAM_DOLBY_DRC_MODE,
    Audio_R2_SHM_PARAM_DOLBY_DMX_MODE,
    Audio_R2_SHM_PARAM_DOLBY_HIGH_CUT,
    Audio_R2_SHM_PARAM_DOLBY_LOW_BOOST,
    Audio_R2_SHM_PARAM_AD_Volume,
    Audio_R2_Set_NonPcm_Sel,
    Audio_ParamType_Abs_ReadReg_Target,
    Audio_ParamType_Abs_WriteReg_Target,
    Audio_ParamType_Abs_WriteReg_Value,
    Audio_ParamType_ReadDM_Target,
    Audio_ParamType_WriteDM_Target,
    Audio_ParamType_WriteDM_Value,
    Audio_ParamType_ReadPM_Target,
    Audio_ParamType_WritePM_Target,
    Audio_ParamType_WritePM_Value,
    Audio_ParamType_Abs_ReadXbox_Target,
    Audio_ParamType_Abs_WriteXbox_Target,
    Audio_ParamType_Abs_WriteXbox_Value,
    Audio_ParamType_Audio_AAC_mm_single_frame_mode,

    Audio_R2_SHM_PARAM_ES_Limiter_EN,
    Audio_R2_SHM_PARAM_ES_Limiter_Threshold,
    Audio_R2_SHM_PARAM_PCM_Limiter_EN,
    Audio_R2_SHM_PARAM_PCM_Limiter_Threshold,
    Audio_SE_Set_PCM_Capture_Volume,
    Audio_SE_Set_PCM_Capture2_Volume,
    Audio_infoType_Abs_ReadReg_Target,
    Audio_infoType_Abs_WriteReg_Target,
    Audio_infoType_Abs_WriteReg_Value,
    Audio_infoType_ReadDM_Target,
    Audio_infoType_WriteDM_Target,
    Audio_infoType_WriteDM_Value,
    Audio_infoType_ReadPM_Target,
    Audio_infoType_WritePM_Target,
    Audio_infoType_WritePM_Value,
    Audio_ParamType_UNI_TrickMode,
    Audio_ParamType_MPG_AVOFFSET,
    Audio_ParamType_AC3_AVOFFSET,
    Audio_ParamType_AAC_AVOFFSET,
    Audio_ParamType_SE_Set_I2S_OutNumber,
    Audio_ParamType_SE_Set_HP_Delay,
    Audio_ParamType_SE_Set_ADEC0_Input_delay,
    Audio_ParamType_SE_Set_ADEC1_Input_delay,
    Audio_ParamType_R2_Set_NonPcm_Sel,
    Audio_ParamType_Low_Latency_Limiter_ES_enable,
    Audio_ParamType_Low_Latency_Limiter_ES_Threshold,
    Audio_ParamType_Low_Latency_Limiter_PCM_Threshold,
    Audio_ParamType_Low_Latency_Limiter_PCM_Skip_Target,
    Audio_ParamType_ES2_IsUsedBy_Dual,
    Audio_ParamType_ddp_disable_atmos,
    Audio_ParamType_Decoder_RepeatPlay,
    Audio_ParamType_SetEDIDOutputInterface,
} Audio_ParamType;

typedef enum
{
    Audio_infoType_Unknow = -1,
    Audio_infoType_DecStatus = 0,
    Audio_infoType_SampleRate,
    Audio_infoType_SoundMode,
    Audio_infoType_capability,
    Audio_infoType_AudioSyncStatus,
    Audio_infoType_bitRate,
    Audio_infoType_acmod,
    Audio_infoType_okFrmCnt,
    Audio_infoType_errFrmCnt,
    Audio_infoType_1ms_timeStamp,
    Audio_infoType_33bit_PTS = 10,
    Audio_infoType_33bit_STCPTS_DIFF,
    Audio_infoType_esBuf_req,
    Audio_infoType_BufferSize,
    Audio_infoType_BufferAddr,
    Audio_infoType_esBuf_currLevel,
    Audio_infoType_pcmBuf_currLevel,
    Audio_infoType_get_audio_filter,
    Audio_infoType_audio_unsupported,
    Audio_infoType_getDecInfo1,
    Audio_infoType_UNI_PCM1_Info = 20,
    Audio_infoType_UNI_PCM3_Level,
    Audio_infoType_UNI_ES_Level,
    Audio_infoType_UNI_ES_Base,
    Audio_infoType_UNI_ES_Size,
    Audio_infoType_UNI_PCM_Base,
    Audio_infoType_UNI_PCM_Size,
    Audio_infoType_Decoder_ID,
    Audio_infoType_AccumEsCnt,
    Audio_infoType_MadBaseAddr,
    Audio_infoType_hashkey,
    Audio_infoType_UNI_PCM3_Base,
    Audio_infoType_UNI_PCM3_Size,
    Audio_infoType_AC3_BSID,
    Audio_infoType_get_trueHD_bypass_enable,
    Audio_infoType_syncSTC_in_mmTs,
    Audio_infoType_Pcm_Output_Channel,
    Audio_R2_SHM_INFO_PCM_LEVEL,
    Audio_R2_SHM_INFO_DEC_STAUS,
    Audio_R2_SHM_INFO_CURR_PTS,
    Audio_R2_SHM_INFO_TP_ES_FreeSize,
    Audio_infoType_Abs_ReadReg,
    Audio_infoType_ReadDM_Value,
    Audio_infoType_ReadPM_Value,
    Audio_infoType_Abs_ReadXbox,
    Audio_infoType_omx_no_mixing,
    Audio_infoType_omx_ES_bypass,
    Audio_infoType_Decoder_Type,
    Audio_infoType_33bit_latestPTS,
    Audio_infoType_tvos2_PCM1_Info,
    Audio_infoType_tvos2_pcm_rdpt,
    Audio_infoType_tvos2_pcm_wrpt,
    Audio_infoType_tvos2_cpts,
    Audio_infoType_tvos2_pcm_framesize,
    Audio_infoType_Dec_Channel_Mode,
    Audio_infoType_DRA_Channel_Mapping,
    Audio_infoType_Smp_Rate,
    Audio_infoType_Bit_Rate,
    Audio_infoType_DOLBY_BS_Mode,
    Audio_infoType_DOLBY_AAC_type,
    Audio_infoType_DTS_CD_Mode,
    Audio_infoType_DTS_PCM_Frame_Size,
    Audio_infoType_DTS_ES_Type,
    Audio_infoType_SPDIF_info_flag,
    Audio_infoType_MPEG_Layer,
    Audio_infoType_MPEG_Stereo_Mode,
    Audio_infoType_MPEG_Header,
    Audio_infoType_SE_Decoder_Delay,
    Audio_infoType_SE_HpOut_Delay,
    Audio_infoType_R2_Dec_Type,
    Audio_infoType_get_parser_info,
    Audio_infoType_Is_Audio_Sync,
    Audio_infoType_R2_uart_buf_base,
    Audio_infoType_R2_uart_buf_size,
    Audio_infoType_R2_uart_buf_wptr,
    Audio_infoType_Get_DDPEnc_Status,
    Audio_infoType_Is_DDP_8ch_Stream,
} Audio_InfoType;

typedef MS_BOOL (*pFuncPtr_SetAudioParam2)(AUDIO_DEC_ID DecId, Audio_ParamType paramType, MS_VIRT Param);
typedef MS_BOOL (*pFuncPtr_GetAudioInfo2)(AUDIO_DEC_ID DecId, Audio_InfoType paramType, void * pInfo);



typedef enum
{
    Audio_DumpInfo_Off = 0x0,
    Audio_DumpInfo_Avsync = 0x1,
    Audio_DumpInfo_Dec1 = 0x2,
    Audio_DumpInfo_IoInfo = 0x4,
    Audio_DumpInfo_mmFileAVsync = 0x8,
    Audio_DumpInfo_All = 0x15,
    Audio_DumpInfo_AutoTest = 0x80,
}Audio_DumpInfo_Type;

typedef enum
{
    Audio_OMX_SPDIF_OFF,
    Audio_OMX_SPDIF_ON,
    Audio_OMX_SPDIF_STOP,
    Audio_OMX_SPDIF_PLAY,

} Audio_OMX_SPDIF_Param;

typedef enum
{
    AUDIO_USAGE_TYPE_NONE,
    AUDIO_USAGE_TYPE_DTV,
    AUDIO_USAGE_TYPE_ATV,
    AUDIO_USAGE_TYPE_HDMI,
    AUDIO_USAGE_TYPE_ADC,
    AUDIO_USAGE_TYPE_MM,
    AUDIO_USAGE_TYPE_SPDIF,
    AUDIO_USAGE_TYPE_KTV,
    AUDIO_USAGE_TYPE_GAME,

} AUDIO_USAGE_TYPE;


typedef enum
{
    E_CONNECT_MAIN,
    E_CONNECT_SUB,
    E_CONNECT_SCART,
    E_CONNECT_DATA_CAPTURE,
    E_CONNECT_KTV,
    E_CONNECT_NULL,
} AUDIO_OUTPORT_SOURCE_TYPE;


typedef enum
{
    Audio_TEE_None = 0x00,
    Audio_TEE_Setup,
    Audio_TEE_Set_DSP_Secure_Accessed,
    Audio_TEE_Set_DSP_Normal_Accessed,

    Audio_TEE_Setup_and_ALL_DSP_Secure_Accessed = 0xFF
} Audio_TEE_Capability;


typedef enum
{
    E_AUDIO_EASE_TYPE_LINEAR,
    E_AUDIO_EASE_TYPE_INCUBIC,
    E_AUDIO_EASE_TYPE_OUTCUBIC,
    E_AUDIO_EASE_TYPE_INOUTCUBIC,
}AUDIO_EASE_TYPE;


typedef enum
{
    E_AUDIO_SINETONE_CTRL_RIGHTMUTE,
    E_AUDIO_SINETONE_CTRL_LEFTMUTE,
    E_AUDIO_SINETONE_CTRL_PAUSE,
    E_AUDIO_SINETONE_CTRL_PLAY,
}AUDIO_SINETONE_CTRL;

typedef enum
{
    E_AUDIO_SINETONE_MODE_MONO,
    E_AUDIO_SINETONE_MODE_SWEEP,
    E_AUDIO_SINETONE_MODE_300TO800,
    E_AUDIO_SINETONE_MODE_800TO300,
}AUDIO_SINETONE_MODE;



typedef struct __attribute__((packed))
{
    MS_U8 miu;
    MS_U8 tv_system;
    MS_U8 dtv_system;
    MS_U8 au_system_sel;


    AUDIO_SIF_SET_STANDARD standard_u8Type;
    AUDIO_SIF_THRESHOLD_TYPE threshold_u8Type;
    MS_U16 threshold_value;

} AUDIO_INIT_INFO, *PAUDIO_INIT_INFO;



typedef struct __attribute__((packed))
{
    AUDIO_OUTPUT_TYPE SpeakerOut;
    AUDIO_OUTPUT_TYPE HpOut;
    AUDIO_OUTPUT_TYPE MonitorOut;
    AUDIO_OUTPUT_TYPE ScartOut;
    AUDIO_OUTPUT_TYPE SpdifOut;
    AUDIO_OUTPUT_TYPE ArcOut;
    AUDIO_OUTPUT_TYPE HDMIOut;
} AUDIO_OUT_INFO, *PAUDIO_OUT_INFO;



typedef struct __attribute__((packed))
{
    AUDIO_PATH_TYPE SpeakerOut;
    AUDIO_PATH_TYPE HpOut;
    AUDIO_PATH_TYPE MonitorOut;
    AUDIO_PATH_TYPE ScartOut;
    AUDIO_PATH_TYPE SpdifOut;
    AUDIO_PATH_TYPE ArcOut;
    AUDIO_PATH_TYPE HDMIOut;
} AUDIO_PATH_INFO, *PAUDIO_PATH_INFO;



typedef struct __attribute__((packed))
{
    AUDIO_OUTPORT_SOURCE_TYPE SpeakerOut;
    AUDIO_OUTPORT_SOURCE_TYPE HpOut;
    AUDIO_OUTPORT_SOURCE_TYPE MonitorOut;
    AUDIO_OUTPORT_SOURCE_TYPE ScartOut;
    AUDIO_OUTPORT_SOURCE_TYPE SpdifOut;
    AUDIO_OUTPORT_SOURCE_TYPE ArcOut;
    AUDIO_OUTPORT_SOURCE_TYPE HDMIOut;
} OUTPUT_SOURCE_INFO, *POUTPUT_SOURCE_INFO;



typedef struct
{
    MS_U32 aes_base_addr;
    MS_U32 aes_end_addr;
    MS_U32 aes_BufSize;
    MS_U32 aes_write_addr;
    MS_U32 aes_read_addr;
    MS_U32 aes_freeSpace;
    MS_U32 aes_level;
    MS_U32 aes_ptsCnt;
    MS_U64 aes_lastPTS;
} AES_INFO;


typedef enum
{
    E_TSP_0,
    E_TSP_1,
    E_TSP_2,
    E_TSP_3,
    E_TSP_MAX,
} AUDIO_STC_SOURCE;

typedef enum
{
    E_AUD_3_PARSER = 0x0,
    E_AUD_4_PARSER_type1 = 0x1,
    E_AUD_4_PARSER_type2 = 0x2,
    E_AUD_1_PARSER = 0x3,
    E_AUD_2_PARSER = 0x4,
    E_AUD_MAX_PARSER = 0x5,
}AUDIO_PARSER_Architecture;

typedef enum
{
    E_AFIFO_0,
    E_AFIFO_1,
    E_AFIFO_2,
    E_AFIFO_MAX,
} AUDIO_AFIFO_SOURCE;

typedef enum
{
    AUDIO_FORCE_INVALID = -1,
    AUDIO_FORCE_ID1 = 0,
    AUDIO_FORCE_ID2 = 1,
    AUDIO_FORCE_ID3 = 2,
    AUDIO_FORCE_MAX = 3,
} AUDIO_FORCE_ADEC_ID;

typedef struct __attribute__((packed))
{
    MS_BOOL bStart;
    MS_BOOL bConnect;
    MS_BOOL bAVSyncOn;
    MS_BOOL bIsAD;
    AUDIO_OUTPORT_SOURCE_TYPE eGroup;
    AUDIO_DSP_ID eDSPId;
    AUDIO_SOURCE_INFO_TYPE eSourceType;
    En_DVB_decSystemType eAudFormat;
    AUDIO_STC_SOURCE eStcSource;
    AUDIO_AFIFO_SOURCE eAfifoSource;
    AUDIO_MM_TYPE eMMType;
    AUDIO_FORCE_ADEC_ID eAudio_Force_ID;
} AudioDecStatus_t;

typedef struct __attribute__((packed))
{
    AUDIO_OUTPORT_SOURCE_TYPE eGroup;
    AUDIO_DSP_ID u8NonPcmPath;
    AUDIO_SOURCE_INFO_TYPE eSourceType;
    AUDIO_DIGITAL_OUTPUT_TYPE eDigitalOutfMode;
    MS_U8 u8R2NonPcmSetting;
} DigitalOutSetting_t;

typedef struct __attribute__((packed))
{
    MS_BOOL CBit;
    MS_BOOL LBit;
} Digital_Out_Copy_Righr_t;

typedef struct __attribute__((packed))
{
    MS_U8 u8PcmFormatControl ;
    MS_U8 u8Category;
    Digital_Out_Copy_Righr_t stCopyRight;

    MS_U8 u8SourceNumber;
    MS_U8 u8ChannelNumber;

    MS_U8 u8SamplingRate;
    MS_U8 u8ClockPrecision;

    MS_U8 u8WordLength;
    MS_U8 u8OriginalSamplingRate;

    MS_U8 u8CGMS_A;
} Digital_Out_Channel_Status_t;

typedef struct __attribute__((packed))
{
    MS_U8 support_codec;
    MS_U8 support_ch;
    MS_U8 support_samplerate;
    MS_U8 support_SAD_byte3;
} Digital_Out_Device_Capability_t;



typedef enum
{
    E_AUD_MEMORY_BASE = 0x0,
    E_AUD_MEMORY_SIZE = 0x1,
} EN_AUDIO_DDRINFO;

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNDS.h"
#ifndef _DRV_NDS_H_
#define _DRV_NDS_H_ 


#ifdef __cplusplus
extern "C"
{
#endif
# 119 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvNDS.h"
#define NDS_ENFLAGS_CTRL_ENC_SUPPORTED 0x01
#define NDS_ENFLAGS_CTRL_ENC_HW_FORCED 0x02
#define NDS_ENFLAGS_CTRL_ENC_SW_FORCED 0x04
#define NDS_ENFLAGS_JTAG_PWD 0x08
#define NDS_ENFLAGS_BOOTROM 0x10
#define NDS_ENFLAGS_DATA_ENC 0x20
#define NDS_ENFLAGS_GETRESP2CHALLENGE 0x40




#define NDS_KTE_ESA_SEL_AES 0x0
#define NDS_KTE_ESA_SEL_CSA 0x1
#define NDS_KTE_ESA_SEL_DES 0x2
#define NDS_KTE_ESA_SEL_TDES 0x3
#define NDS_KTE_ESA_SEL_MULTI2 0x4
#define NDS_KTE_ESA_SEL_DFAST 0x5
#define NDS_KTE_ESA_SEL_USER 0xF

#define NDS_KTE_ESA_SUB_ECB 0x0
#define NDS_KTE_ESA_SUB_CBC 0x1
#define NDS_KTE_ESA_SUB_NSA 0x7







typedef enum
{
    E_NDS_OK,
    E_NDS_FAIL,

} NDS_Result;


typedef enum
{
    E_NDS_SC_EVENT_CARD_REMOVED = 0x00000000,
    E_NDS_SC_EVENT_CARD_INSERTED = 0x00000001,

} NDS_SC_Event;


typedef enum
{
    E_NDS_SC_CLK_27M_D6,
    E_NDS_SC_CLK_27M_D2,
    E_NDS_SC_CLK_27M_D4,
    E_NDS_SC_CLK_27M_D8,

} NDS_SC_Clk;


typedef enum
{
    E_NDS_SC_BAUD_RATE_9600,
    E_NDS_SC_BAUD_RATE_19200,
    E_NDS_SC_BAUD_RATE_38400,
    E_NDS_SC_BAUD_RATE_76800,
    E_NDS_SC_BAUD_RATE_153600,
    E_NDS_SC_BAUD_RATE_223200,
} NDS_SC_BaudRate;


typedef enum
{
    E_NDS_CAP_ECM_NUM = 0x00,

    E_NDS_CAP_EMM_NUM = 0x10,

    E_NDS_CAP_BUF_PITCH = 0x20,
    E_NDS_CAP_BUF_ALIGN,
    E_NDS_CAP_BUF_TOTALSIZE,
    E_NDS_CAP_RASP_BUF_TOTALSIZE,

} NDS_Caps;


typedef MS_BOOL (*P_NDS_SC_CbSetVcc)(MS_BOOL b5V);
typedef void (*P_NDS_SC_CbEvent)(NDS_SC_Event event);

typedef struct _NDS_SC_Param
{
    P_NDS_SC_CbSetVcc cbSetVcc;

    P_NDS_SC_CbEvent cbEvent;
    MS_BOOL bCommDump;

} NDS_SC_Param;


typedef struct _NDS_FLT_Param
{
    MS_PHYADDR ecm_emm_addr;

    MS_U8* pu8ecm_emm_buf;
    MS_U32 ecm_emm_size;
} NDS_FLT_Param;

typedef struct _NDS_RASP_Param
{
    MS_PHYADDR ecm_addr;
    MS_U8 *pu8ecm_buf;
    MS_U32 ecm_size;

    MS_PHYADDR payload_addr;
    MS_U8 *pu8playload_buf;
    MS_U32 payload_size;

} NDS_RASP_Param;

typedef struct _NDS_Param
{
    NDS_FLT_Param flt;
    NDS_SC_Param sc;
    NDS_RASP_Param rasp;
} NDS_Param;






NDS_Result MDrv_NDS_Init(NDS_Param *param);
NDS_Result MDrv_NDS_Exit(void);
NDS_Result MDrv_NDS_PowerOff(void);
NDS_Result MDrv_NDS_SetMagicValue(MS_U8 idx, MS_U16 word_0, MS_U16 word_1, MS_U16 word_2, MS_U16 word_3);
MS_U32 MDrv_NDS_GetCaps(NDS_Caps cap);

NDS_Result MDrv_NDS_NSK_Open(MS_U32 nsk_id);
NDS_Result MDrv_NDS_NSK_Close(MS_U32 nsk_id);


#ifdef __cplusplus
}
#endif

#endif
# 78 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_VMark_v2.h"
#ifndef _XC_VMARK_H_
#define _XC_VMARK_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

typedef struct DLL_PACKED
{
    MS_U8 u8ServiceIndex;
    XC_VMARK_PARAMETER *pstXC_VMarkParameters;
    E_APIXC_ReturnValue eReturnValue;
} stXC_VMARK_SET_PARAMETERS, *pstXC_VMARK_SET_PARAMETERS;

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ISDBT.h"
#ifndef _DRV_ISDBT_H_
#define _DRV_ISDBT_H_ 





#if !defined UTPA2
#define DMD_ISDBT_UTOPIA_EN 1
#define DMD_ISDBT_UTOPIA2_EN 0
#else
#define DMD_ISDBT_UTOPIA_EN 0
#define DMD_ISDBT_UTOPIA2_EN 1
#endif

#define DMD_ISDBT_STR_EN 1
#define DMD_ISDBT_MULTI_THREAD_SAFE 0
#define DMD_ISDBT_MULTI_DMD_EN 1
#define DMD_ISDBT_EXTDMD_EN 1




#include "MsTypes.h"
#if DMD_ISDBT_UTOPIA_EN || DMD_ISDBT_UTOPIA2_EN
#ifndef MSIF_TAG
#include "MsVersion.h"
#endif
#include "MsCommon.h"
#endif
#if DMD_ISDBT_UTOPIA2_EN || DMD_ISDBT_STR_EN
#include "utopia.h"
#endif
# 145 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ISDBT.h"
#ifndef DLL_PUBLIC
#define DLL_PUBLIC 
#endif

#if DMD_ISDBT_MULTI_DMD_EN
#define DMD_ISDBT_MAX_DEMOD_NUM 2
#else
#define DMD_ISDBT_MAX_DEMOD_NUM 1
#endif

#if DMD_ISDBT_UTOPIA_EN || DMD_ISDBT_UTOPIA2_EN
#define MSIF_DMD_ISDBT_LIB_CODE {'D','M','D','_','I','S','D','B','T','_'}
#define MSIF_DMD_ISDBT_LIBVER {'0','0'}
#define MSIF_DMD_ISDBT_BUILDNUM {'0','0'}
#define MSIF_DMD_ISDBT_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define DMD_ISDBT_VER \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_DMD_ISDBT_LIB_CODE, \
    MSIF_DMD_ISDBT_LIBVER, \
    MSIF_DMD_ISDBT_BUILDNUM, \
    MSIF_DMD_ISDBT_CHANGELIST, \
    MSIF_OS
#endif

#ifndef BIT_
#define BIT_(n) (1 << (n))
#endif

#define DMD_ISDBT_LOCK_FSA_TRACK_LOCK BIT_(0)
#define DMD_ISDBT_LOCK_PSYNC_LOCK BIT_(1)
#define DMD_ISDBT_LOCK_ICFO_CH_EXIST_LOCK BIT_(2)
#define DMD_ISDBT_LOCK_FEC_LOCK BIT_(3)





typedef enum
{
    DMD_ISDBT_HAL_CMD_Exit = 0,
    DMD_ISDBT_HAL_CMD_InitClk,
    DMD_ISDBT_HAL_CMD_Download,
    DMD_ISDBT_HAL_CMD_FWVERSION,
    DMD_ISDBT_HAL_CMD_SoftReset,
    DMD_ISDBT_HAL_CMD_SetACICoef,
    DMD_ISDBT_HAL_CMD_SetISDBTMode,
    DMD_ISDBT_HAL_CMD_SetModeClean,
    DMD_ISDBT_HAL_CMD_Active,
    DMD_ISDBT_HAL_CMD_Check_FEC_Lock,
    DMD_ISDBT_HAL_CMD_Check_FSA_TRACK_Lock,
    DMD_ISDBT_HAL_CMD_Check_PSYNC_Lock,
    DMD_ISDBT_HAL_CMD_Check_ICFO_CH_EXIST_Lock,
    DMD_ISDBT_HAL_CMD_GetSignalCodeRate,
    DMD_ISDBT_HAL_CMD_GetSignalGuardInterval,
    DMD_ISDBT_HAL_CMD_GetSignalTimeInterleaving,
    DMD_ISDBT_HAL_CMD_GetSignalFFTValue,
    DMD_ISDBT_HAL_CMD_GetSignalModulation,
    DMD_ISDBT_HAL_CMD_ReadIFAGC,
    DMD_ISDBT_HAL_CMD_GetFreqOffset,
    DMD_ISDBT_HAL_CMD_GetSignalQuality,
    DMD_ISDBT_HAL_CMD_GetSignalQualityOfLayerA,
    DMD_ISDBT_HAL_CMD_GetSignalQualityOfLayerB,
    DMD_ISDBT_HAL_CMD_GetSignalQualityOfLayerC,
    DMD_ISDBT_HAL_CMD_GetSignalQualityCombine,
    DMD_ISDBT_HAL_CMD_GetSNR,
    DMD_ISDBT_HAL_CMD_GetPreViterbiBer,
    DMD_ISDBT_HAL_CMD_GetPostViterbiBer,
    DMD_ISDBT_HAL_CMD_Read_PKT_ERR,
    DMD_ISDBT_HAL_CMD_TS_INTERFACE_CONFIG,
    DMD_ISDBT_HAL_CMD_IIC_Bypass_Mode,
    DMD_ISDBT_HAL_CMD_SSPI_TO_GPIO,
    DMD_ISDBT_HAL_CMD_GPIO_GET_LEVEL,
    DMD_ISDBT_HAL_CMD_GPIO_SET_LEVEL,
    DMD_ISDBT_HAL_CMD_GPIO_OUT_ENABLE,
    DMD_ISDBT_HAL_CMD_DoIQSwap,
    DMD_ISDBT_HAL_CMD_GET_REG,
    DMD_ISDBT_HAL_CMD_SET_REG
} DMD_ISDBT_HAL_COMMAND;

typedef enum
{
    E_ISDBT_Layer_A = 0x00,
    E_ISDBT_Layer_B = 0x01,
    E_ISDBT_Layer_C = 0x02,
    E_ISDBT_Layer_INVALID,
} EN_ISDBT_Layer;

typedef enum
{
    E_ISDBT_FFT_2K = 0x00,
    E_ISDBT_FFT_4K = 0x01,
    E_ISDBT_FFT_8K = 0x02,
    E_ISDBT_FFT_INVALID,
} EN_ISDBT_FFT_VAL;

typedef enum
{
    E_ISDBT_DQPSK = 0,
    E_ISDBT_QPSK = 1,
    E_ISDBT_16QAM = 2,
    E_ISDBT_64QAM = 3,
    E_ISDBT_QAM_INVALID,
} EN_ISDBT_CONSTEL_TYPE;

typedef enum
{
    E_ISDBT_CODERATE_1_2 = 0,
    E_ISDBT_CODERATE_2_3 = 1,
    E_ISDBT_CODERATE_3_4 = 2,
    E_ISDBT_CODERATE_5_6 = 3,
    E_ISDBT_CODERATE_7_8 = 4,
    E_ISDBT_CODERATE_INVALID,
} EN_ISDBT_CODE_RATE;

typedef enum
{
    E_ISDBT_GUARD_INTERVAL_1_4 = 0,
    E_ISDBT_GUARD_INTERVAL_1_8 = 1,
    E_ISDBT_GUARD_INTERVAL_1_16 = 2,
    E_ISDBT_GUARD_INTERVAL_1_32 = 3,
    E_ISDBT_GUARD_INTERVAL_INVALID,
} EN_ISDBT_GUARD_INTERVAL;

typedef enum
{

    E_ISDBT_2K_TDI_0 = 0,
    E_ISDBT_2K_TDI_4 = 1,
    E_ISDBT_2K_TDI_8 = 2,
    E_ISDBT_2K_TDI_16 = 3,

    E_ISDBT_4K_TDI_0 = 4,
    E_ISDBT_4K_TDI_2 = 5,
    E_ISDBT_4K_TDI_4 = 6,
    E_ISDBT_4K_TDI_8 = 7,

    E_ISDBT_8K_TDI_0 = 8,
    E_ISDBT_8K_TDI_1 = 9,
    E_ISDBT_8K_TDI_2 = 10,
    E_ISDBT_8K_TDI_4 = 11,
    E_ISDBT_TDI_INVALID,
} EN_ISDBT_TIME_INTERLEAVING;

typedef struct DLL_PACKED _ISDBT_MODULATION_MODE
{
    EN_ISDBT_CODE_RATE eIsdbtCodeRate;
    EN_ISDBT_GUARD_INTERVAL eIsdbtGI;
    EN_ISDBT_TIME_INTERLEAVING eIsdbtTDI;
    EN_ISDBT_FFT_VAL eIsdbtFFT;
    EN_ISDBT_CONSTEL_TYPE eIsdbtConstellation;
} sISDBT_MODULATION_MODE;

typedef struct DLL_PACKED _DMD_ISDBT_GET_MODULATION
{
    EN_ISDBT_Layer eIsdbtLayer;
    EN_ISDBT_CONSTEL_TYPE eConstellation;
} DMD_ISDBT_GET_MODULATION;

typedef struct DLL_PACKED _DMD_ISDBT_GET_CodeRate
{
    EN_ISDBT_Layer eIsdbtLayer;
    EN_ISDBT_CODE_RATE eCodeRate;
} DMD_ISDBT_GET_CodeRate;

typedef struct DLL_PACKED _DMD_ISDBT_GET_TimeInterleaving
{
    EN_ISDBT_Layer eIsdbtLayer;
    EN_ISDBT_TIME_INTERLEAVING eTimeInterleaving;
} DMD_ISDBT_GET_TimeInterleaving;

typedef struct DLL_PACKED _DMD_ISDBT_GET_BER_VALUE
{
    EN_ISDBT_Layer eIsdbtLayer;
    #ifdef UTPA2
    MS_U32 BerValue;
    MS_U16 BerPeriod;
    #else
    float fBerValue;
    #endif
} DMD_ISDBT_GET_BER_VALUE;

typedef struct DLL_PACKED _DMD_ISDBT_GET_PKT_ERR
{
    EN_ISDBT_Layer eIsdbtLayer;
    MS_U16 u16PacketErr;
} DMD_ISDBT_GET_PKT_ERR;

#ifdef UTPA2
typedef struct DLL_PACKED
{
    MS_U8 FFT_Mode;
    MS_S32 TdCfoRegValue;
    MS_S32 FdCfoRegValue;
    MS_S16 IcfoRegValue;
} DMD_ISDBT_CFO_DATA;

typedef struct DLL_PACKED
{
    MS_U32 RegSNR;
    MS_U16 RegSnrObsNum;
} DMD_ISDBT_SNR_DATA;
#endif

typedef struct DLL_PACKED
{
    MS_U8 u8Pin;
    union
    {
        MS_BOOL bLevel;
        MS_BOOL bIsOut;
    };
} DMD_ISDBT_GPIO_PIN_DATA;

typedef struct DLL_PACKED
{
    MS_U16 u16Addr;
    MS_U8 u8Data;
} DMD_ISDBT_REG_DATA;

typedef enum
{
    DMD_ISDBT_DBGLV_NONE,
    DMD_ISDBT_DBGLV_INFO,
    DMD_ISDBT_DBGLV_NOTICE,
    DMD_ISDBT_DBGLV_WARNING,
    DMD_ISDBT_DBGLV_ERR,
    DMD_ISDBT_DBGLV_CRIT,
    DMD_ISDBT_DBGLV_ALERT,
    DMD_ISDBT_DBGLV_EMERG,
    DMD_ISDBT_DBGLV_DEBUG,
} DMD_ISDBT_DbgLv;

typedef enum
{ DMD_ISDBT_DEMOD,
    DMD_ISDBT_DEMOD_6M = DMD_ISDBT_DEMOD,
    DMD_ISDBT_DEMOD_7M,
    DMD_ISDBT_DEMOD_8M,
    DMD_ISDBT_DEMOD_MAX,
    DMD_ISDBT_DEMOD_NULL = DMD_ISDBT_DEMOD_MAX,
} DMD_ISDBT_DEMOD_TYPE;

typedef enum
{
    DMD_ISDBT_GETLOCK,
    DMD_ISDBT_GETLOCK_FSA_TRACK_LOCK,
    DMD_ISDBT_GETLOCK_PSYNC_LOCK,
    DMD_ISDBT_GETLOCK_ICFO_CH_EXIST_LOCK,
    DMD_ISDBT_GETLOCK_FEC_LOCK
} DMD_ISDBT_GETLOCK_TYPE;

typedef enum
{
    DMD_ISDBT_LOCK,
    DMD_ISDBT_CHECKING,
    DMD_ISDBT_CHECKEND,
    DMD_ISDBT_UNLOCK,
    DMD_ISDBT_NULL,
} DMD_ISDBT_LOCK_STATUS;


typedef struct DLL_PACKED
{

    MS_U16 u16ISDBTIcfoChExistCheckTime;
    MS_U16 u16ISDBTFECLockCheckTime;


    MS_U8 *u8DMD_ISDBT_DSPRegInitExt;
    MS_U8 u8DMD_ISDBT_DSPRegInitSize;
    MS_U8 *u8DMD_ISDBT_InitExt;


    MS_U16 u16IF_KHZ;
    MS_BOOL bIQSwap;
    MS_U16 u16AgcReferenceValue;
    MS_BOOL bTunerGainInvert;


    MS_BOOL bIsExtDemod;


    MS_U8 u1TsConfigByte_SerialMode : 1;
    MS_U8 u1TsConfigByte_DataSwap : 1;
    MS_U8 u1TsConfigByte_ClockInv : 1;
    MS_U8 u5TsConfigByte_DivNum : 5;


    MS_U8 u8I2CSlaveAddr;
    MS_U8 u8I2CSlaveBus;
    MS_BOOL (*I2C_WriteBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8addrcount, MS_U8* pu8addr, MS_U16 u16size, MS_U8* pu8data);
    MS_BOOL (*I2C_ReadBytes)(MS_U16 u16BusNumSlaveID, MS_U8 u8AddrNum, MS_U8* paddr, MS_U16 u16size, MS_U8* pu8data);


    MS_BOOL bIsUseSspiLoadCode;
    MS_BOOL bIsSspiUseTsPin;


    MS_U32 u32TdiStartAddr;

    #if !DMD_ISDBT_UTOPIA_EN && !DMD_ISDBT_UTOPIA2_EN
    MS_U32 (*GetSystemTimeMS)(void);
    void (*DelayMS)(MS_U32 ms);
    MS_BOOL (*CreateMutex)(MS_BOOL enable);
    void (*LockDMD)(MS_BOOL enable);
    #endif
} DMD_ISDBT_InitData;

typedef struct DLL_PACKED
{
    MS_VIRT virtDMDBaseAddr;

    MS_BOOL bInit;
    MS_BOOL bDownloaded;

    #if DMD_ISDBT_STR_EN
    MS_BOOL bIsDTV;
    EN_POWER_MODE eLastState;
    #endif
    DMD_ISDBT_DEMOD_TYPE eLastType;

    MS_BOOL bIsQPad;

    MS_BOOL (*HAL_DMD_ISDBT_IOCTL_CMD)(DMD_ISDBT_HAL_COMMAND eCmd, void *pPara);
} DMD_ISDBT_PriData;

typedef struct DLL_PACKED
{
    MS_U8 u8Version;
    MS_U32 u32ISDBTScanTimeStart;
    MS_U32 u32ISDBTFECLockTime;
    MS_U32 u32ISDBTLockStatus;
} DMD_ISDBT_Info;

typedef struct DLL_PACKED
{
    DMD_ISDBT_InitData sDMD_ISDBT_InitData;
    DMD_ISDBT_PriData sDMD_ISDBT_PriData;
    DMD_ISDBT_Info sDMD_ISDBT_Info;
} DMD_ISDBT_ResData;





#ifdef __cplusplus
extern "C"
{
#endif

#ifndef MSOS_TYPE_LINUX_KERNEL
# 517 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ISDBT.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_SetDbgLevel(DMD_ISDBT_DbgLv u8DbgLevel);




DLL_PUBLIC extern DMD_ISDBT_Info* MDrv_DMD_ISDBT_GetInfo(void);




DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetLibVer(const MSIF_Version **ppVersion);




DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_Initial_Hal_Interface(void);
# 541 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ISDBT.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_Init(DMD_ISDBT_InitData *pDMD_ISDBT_InitData, MS_U32 u32InitDataLen);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_Exit(void);



DLL_PUBLIC extern MS_U32 MDrv_DMD_ISDBT_GetConfig(DMD_ISDBT_InitData *psDMD_ISDBT_InitData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetFwVer(MS_U16 *pu16FwVer);



DLL_PUBLIC extern void MDrv_DMD_ISDBT_SetReset(void);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_AdvSetConfig(DMD_ISDBT_DEMOD_TYPE eType, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_SetConfig(MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_SetActive(MS_BOOL bEnable);



#if DMD_ISDBT_STR_EN
DLL_PUBLIC extern MS_U32 MDrv_DMD_ISDBT_SetPowerState(EN_POWER_MODE u16PowerState);
#endif



DLL_PUBLIC extern DMD_ISDBT_LOCK_STATUS MDrv_DMD_ISDBT_GetLock(DMD_ISDBT_GETLOCK_TYPE eType);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetModulationMode(EN_ISDBT_Layer eLayerIndex, sISDBT_MODULATION_MODE *sIsdbtModulationMode);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetSignalStrength(MS_U16 *u16Strength);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetFreqOffset(float *pFreqOff);



DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_GetSignalQuality(void);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_GetSignalQualityOfLayerA(void);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_GetSignalQualityOfLayerB(void);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_GetSignalQualityOfLayerC(void);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_GetSignalQualityCombine(void);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetSNR(float *f_snr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetPreViterbiBer(EN_ISDBT_Layer eLayerIndex, float *fber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetPostViterbiBer(EN_ISDBT_Layer eLayerIndex, float *fber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_Read_PKT_ERR(EN_ISDBT_Layer eLayerIndex, MS_U16 *u16PacketErr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_SetSerialControl(MS_U8 u8TsConfigData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_IIC_BYPASS_MODE(MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_SWITCH_SSPI_GPIO(MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GPIO_GET_LEVEL(MS_U8 u8Pin, MS_BOOL *bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GPIO_SET_LEVEL(MS_U8 u8Pin, MS_BOOL bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GPIO_OUT_ENABLE(MS_U8 u8Pin, MS_BOOL bEnableOut);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_DoIQSwap(MS_BOOL bIsQPad);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_GetReg(MS_U16 u16Addr, MS_U8 *pu8Data);





DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_SetReg(MS_U16 u16Addr, MS_U8 u8Data);
# 665 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvDMD_ISDBT.h"
DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_Init(MS_U8 id, DMD_ISDBT_InitData *pDMD_ISDBT_InitData, MS_U32 u32InitDataLen);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_Exit(MS_U8 id);



DLL_PUBLIC extern MS_U32 MDrv_DMD_ISDBT_MD_GetConfig(MS_U8 id, DMD_ISDBT_InitData *psDMD_ISDBT_InitData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetFwVer(MS_U8 id, MS_U16 *pu16FwVer);



DLL_PUBLIC extern void MDrv_DMD_ISDBT_MD_SetReset(MS_U8 id);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_AdvSetConfig(MS_U8 id, DMD_ISDBT_DEMOD_TYPE eType, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_SetConfig(MS_U8 id, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_SetActive(MS_U8 id, MS_BOOL bEnable);



#if DMD_ISDBT_STR_EN
DLL_PUBLIC extern MS_U32 MDrv_DMD_ISDBT_MD_SetPowerState(MS_U8 id, EN_POWER_MODE u16PowerState);
#endif



DLL_PUBLIC extern DMD_ISDBT_LOCK_STATUS MDrv_DMD_ISDBT_MD_GetLock(MS_U8 id, DMD_ISDBT_GETLOCK_TYPE eType);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetModulationMode(MS_U8 id, EN_ISDBT_Layer eLayerIndex, sISDBT_MODULATION_MODE *sIsdbtModulationMode);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetSignalStrength(MS_U8 id, MS_U16 *u16Strength);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetFreqOffset(MS_U8 id, float *pFreqOff);



DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_MD_GetSignalQuality(MS_U8 id);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_MD_GetSignalQualityOfLayerA(MS_U8 id);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_MD_GetSignalQualityOfLayerB(MS_U8 id);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_MD_GetSignalQualityOfLayerC(MS_U8 id);
DLL_PUBLIC extern MS_U16 MDrv_DMD_ISDBT_MD_GetSignalQualityCombine(MS_U8 id);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetSNR(MS_U8 id, float *f_snr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetPreViterbiBer(MS_U8 id, EN_ISDBT_Layer eLayerIndex, float *fber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetPostViterbiBer(MS_U8 id, EN_ISDBT_Layer eLayerIndex, float *fber);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_Read_PKT_ERR(MS_U8 id, EN_ISDBT_Layer eLayerIndex, MS_U16 *u16PacketErr);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_SetSerialControl(MS_U8 id, MS_U8 u8TsConfigData);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_IIC_BYPASS_MODE(MS_U8 id, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_SWITCH_SSPI_GPIO(MS_U8 id, MS_BOOL bEnable);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GPIO_GET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL *bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GPIO_SET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL bLevel);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GPIO_OUT_ENABLE(MS_U8 id, MS_U8 u8Pin, MS_BOOL bEnableOut);



DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_DoIQSwap(MS_U8 id, MS_BOOL bIsQPad);






DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_GetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 *pu8Data);





DLL_PUBLIC extern MS_BOOL MDrv_DMD_ISDBT_MD_SetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 u8Data);

#endif

#ifdef UTPA2
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_SetDbgLevel(DMD_ISDBT_DbgLv u8DbgLevel);
DLL_PUBLIC extern DMD_ISDBT_Info* _MDrv_DMD_ISDBT_GetInfo(void);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_GetLibVer(const MSIF_Version **ppVersion);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_Init(MS_U8 id, DMD_ISDBT_InitData *pDMD_ISDBT_InitData, MS_U32 u32InitDataLen);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_Exit(MS_U8 id);
DLL_PUBLIC extern MS_U32 _MDrv_DMD_ISDBT_MD_GetConfig(MS_U8 id, DMD_ISDBT_InitData *psDMD_ISDBT_InitData);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_AdvSetConfig(MS_U8 id, DMD_ISDBT_DEMOD_TYPE eType, MS_BOOL bEnable);
#if DMD_ISDBT_STR_EN
DLL_PUBLIC extern MS_U32 _MDrv_DMD_ISDBT_MD_SetPowerState(MS_U8 id, EN_POWER_MODE u16PowerState);
#endif
DLL_PUBLIC extern DMD_ISDBT_LOCK_STATUS _MDrv_DMD_ISDBT_MD_GetLock(MS_U8 id, DMD_ISDBT_GETLOCK_TYPE eType);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GetModulationMode(MS_U8 id, EN_ISDBT_Layer eLayerIndex, sISDBT_MODULATION_MODE *sIsdbtModulationMode);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GetSignalStrength(MS_U8 id, MS_U16 *u16Strength);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GetFreqOffset(MS_U8 id, DMD_ISDBT_CFO_DATA *cfo);
DLL_PUBLIC extern MS_U16 _MDrv_DMD_ISDBT_MD_GetSignalQuality(MS_U8 id);
DLL_PUBLIC extern MS_U16 _MDrv_DMD_ISDBT_MD_GetSignalQualityOfLayerA(MS_U8 id);
DLL_PUBLIC extern MS_U16 _MDrv_DMD_ISDBT_MD_GetSignalQualityOfLayerB(MS_U8 id);
DLL_PUBLIC extern MS_U16 _MDrv_DMD_ISDBT_MD_GetSignalQualityOfLayerC(MS_U8 id);
DLL_PUBLIC extern MS_U16 _MDrv_DMD_ISDBT_MD_GetSignalQualityCombine(MS_U8 id);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GetSNR(MS_U8 id, DMD_ISDBT_SNR_DATA *f_snr);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GetPreViterbiBer(MS_U8 id, DMD_ISDBT_GET_BER_VALUE *ber);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GetPostViterbiBer(MS_U8 id, DMD_ISDBT_GET_BER_VALUE *ber);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_Read_PKT_ERR(MS_U8 id, EN_ISDBT_Layer eLayerIndex, MS_U16 *u16PacketErr);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_SetSerialControl(MS_U8 id, MS_U8 u8TsConfigData);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_IIC_BYPASS_MODE(MS_U8 id, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_SWITCH_SSPI_GPIO(MS_U8 id, MS_BOOL bEnable);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GPIO_GET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL *bLevel);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GPIO_SET_LEVEL(MS_U8 id, MS_U8 u8Pin, MS_BOOL bLevel);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GPIO_OUT_ENABLE(MS_U8 id, MS_U8 u8Pin, MS_BOOL bEnableOut);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_DoIQSwap(MS_U8 id, MS_BOOL bIsQPad);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_GetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 *pu8Data);
DLL_PUBLIC extern MS_BOOL _MDrv_DMD_ISDBT_MD_SetReg(MS_U8 id, MS_U16 u16Addr, MS_U8 u8Data);
#endif

#ifdef __cplusplus
}
#endif

#endif
# 103 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
#ifndef _DRVCMDQ_H_
#define _DRVCMDQ_H_ 

#include "MsTypes.h"
#include "MsCommon.h"

#ifdef __cplusplus
extern "C"
{
#endif




#define AES_ENABLE 0x01
#define TDES_ENABLE 0x10
#define WORD_MASK 0x0000000F

#define DIRECT_MODE 0x01
#define INCREMENT_MODE 0x00
#define RING_BUFFER_MODE 0x04

#define MSIF_CMDQ_LIB_CODE {'C','M','D','Q'}
#define MSIF_CMDQ_LIBVER {'0','1'}
#define MSIF_CMDQ_BUILDNUM {'0','1'}
#define MSIF_CMDQ_CHANGELIST {'0','0','0','0','0','0','0','0'}

#define CMDQ_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_CMDQ_LIB_CODE, \
    MSIF_CMDQ_LIBVER, \
    MSIF_CMDQ_BUILDNUM, \
    MSIF_CMDQ_CHANGELIST, \
    MSIF_OS

typedef enum
{
    E_DRVCMDQ_DBG_Release = 0,
    E_DRVCMDQ_DBG_L1,
} DrvCMDQ_DbgLevel;


typedef enum
{
    GE_GE2CMDQ_TRI = 0,
    BDMA_INT_BDMA_0,
    BDMA_INT_BDMA_1,
    GPU_GPU2CMDQ_TRIG,
    GOPG0_GOP_CMDQ_INT_0,
    GOPG1_GOP_CMDQ_INT_1,
    GOPG2_GOP_CMDQ_INT_2,
    GOPG3_GOP_CMDQ_INT_3,
    SCALAR_SC2CMDQ_TRIG_0,
    SCALAR_SC2CMDQ_TRIG_1,
    SCALAR_SC2CMDQ_TRIG_2,
    SCALAR_SC2CMDQ_TRIG_3,
    AESDMA_CMDQDMA_FINISHED,
    VOP_DCM2GOP_VDE,
    VOP_DCS2GOP_VDE,
    XC_DIP_CMDQ_INT,
    AESDMA_CMDQDMA_FINISHED_2,
    NONE_USED_SIGNAL ,
}EN_CMDQTriggerBus_ID;

#define CMDQ_Write_RIU_Command 'W'
#define CMDQ_Polling_RIU_EQ_Command 'p'
#define CMDQ_Polling_RIU_NEQ_Command 'C'
#define CMDQ_Wait_SIG_Command 'F'
# 184 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
#define CMDQ_DUMMY_ZERO 0x00000000
#define CMDQ_DUMMY_BIT_0x00 0x00000001
#define CMDQ_DUMMY_BIT_0x01 0x00000002
#define CMDQ_DUMMY_BIT_0x02 0x00000004
#define CMDQ_DUMMY_BIT_0x03 0x00000008
#define CMDQ_DUMMY_BIT_0x04 0x00000010
#define CMDQ_DUMMY_BIT_0x05 0x00000020
#define CMDQ_DUMMY_BIT_0x06 0x00000040
#define CMDQ_DUMMY_BIT_0x07 0x00000080
#define CMDQ_DUMMY_BIT_0x08 0x00000100
#define CMDQ_DUMMY_BIT_0x09 0x00000200
#define CMDQ_DUMMY_BIT_0x0A 0x00000400
#define CMDQ_DUMMY_BIT_0x0B 0x00000800
#define CMDQ_DUMMY_BIT_0x0C 0x00001000
#define CMDQ_DUMMY_BIT_0x0D 0x00002000
#define CMDQ_DUMMY_BIT_0x0E 0x00004000
#define CMDQ_DUMMY_BIT_0x0F 0x00008000



struct COMMAND_ARRAY_FORMAT
{
 MS_U8 operation;
 MS_U32 destionation_address;
 MS_U16 destionation_value;
 MS_U16 mask;
};

typedef struct COMMAND_ARRAY_FORMAT CAF_Struct;
typedef CAF_Struct *CAF_Struct_Pointer;

struct CMDQ_HEAD
{
 MS_SIZE Command_Number;
 CAF_Struct_Pointer Pointer_To_CAFArray;
};
typedef struct CMDQ_HEAD CH_Struct;
typedef CH_Struct *CH_Struct_Pointer;



typedef MS_U32 DRVCMDQ_RESULT;





#define DRVCMDQ_OK 0x00000000
#define DRVCMDQ_FAIL 0x00000001
#define DRVCMDQ_INVALID_PARAM 0x00000002
#define DRVCMDQ_FUNC_ERROR 0x00000003
#define DRVCMDQ_MIU_ADDR_ERROR 0x00000004
#define DRVCMDQ_CMDQ_FULL 0x00000005



#define CMDQ_DMA_DONE 0x00010000
#define CMDQ_DMA_PAUSE 0x00020000
#define CMDQ_STATES_GROUP (CMDQ_DMA_DONE | \
                                             CMDQ_DMA_PAUSE )


#define CMDQ_VERSION 0x00000001
# 325 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_Init(MS_U32 CMDQ_MIU_SELECT);
# 334 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_GetLibVer(const MSIF_Version **ppVersion);
# 343 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_Start(MS_BOOL bStart);
# 353 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_Get_Memory_Size(MS_PHY SmallAddr, MS_PHY BigAddr, MS_U32 miu_select);
# 363 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_Set_Buffer(MS_PHY StartAddr, MS_PHY EndAddr);






DRVCMDQ_RESULT MDrv_CMDQ_Reset(void);







DRVCMDQ_RESULT MDrv_CMDQ_Exit(void);







DRVCMDQ_RESULT MDrv_CMDQ_Stop(void);
# 395 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_SetDbgLevel(DrvCMDQ_DbgLevel DbgLevel);
# 404 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_Receive(CH_Struct_Pointer New_IP_Head);






void Insert_Redundant_Null(MS_U32 Need_Null_Number);







void MDrv_CMDQ_Transfer(CAF_Struct_Pointer Array_Command, MS_SIZE Number_Array_Command);






void MDrv_CMDQ_Set_dummy_Address(MS_U32 DummyValue);





void MDrv_CMDQ_Set_MIU_SELECT(MS_U32 miu_select);
# 442 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
DRVCMDQ_RESULT MDrv_CMDQ_Set_timer_ratio(MS_U32 time,MS_U32 ratio);







DRVCMDQ_RESULT MDrv_CMDQ_Printf_Crash_Command(void);
# 459 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
void MDrv_CMDQ_Gen_WaitTrigger_Bus_Command(CAF_Struct_Pointer WaitTrigger_Bus_Command, EN_CMDQTriggerBus_ID u16Tigger_ID, MS_BOOL bDetect_Falling_Mode);







MS_U32 MDrv_CMDQ_GetWritePoint(void);
# 476 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvCMDQ.h"
MS_U32 MDrv_CMDQ_SetPowerState(EN_POWER_MODE u16PowerState);

#ifdef __cplusplus
}
#endif


#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHVD.h"
#ifndef _DRV_HVD_H_
#define _DRV_HVD_H_ 

#ifdef __cplusplus
extern "C"
{
#endif
# 117 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHVD.h"
#define MSIF_HVD_LIB_CODE {'H','V','D','_'}
#define MSIF_HVD_LIBVER {'0','B'}
#define MSIF_HVD_BUILDNUM {'0','2'}
#define MSIF_HVD_CHANGELIST {'0','0','6','5','4','0','6','3'}




#define HVD_DRV_VERSION \
    MSIF_TAG, \
    MSIF_CLASS, \
    MSIF_CUS, \
    MSIF_MOD, \
    MSIF_CHIP, \
    MSIF_CPU, \
    MSIF_HVD_LIB_CODE, \
    MSIF_HVD_LIBVER, \
    MSIF_HVD_BUILDNUM, \
    MSIF_HVD_CHANGELIST, \
    MSIF_OS

#define HVD_INIT_HW_MASK BMASK(1:0)
    #define HVD_INIT_HW_AVC BITS( 1:0,0)
    #define HVD_INIT_HW_AVS BITS( 1:0,1)
    #define HVD_INIT_HW_RM BITS( 1:0,2)
#define HVD_INIT_MAIN_MASK BMASK(3:2)
    #define HVD_INIT_MAIN_FILE_RAW BITS( 3:2,0)
    #define HVD_INIT_MAIN_FILE_TS BITS( 3:2,1)
    #define HVD_INIT_MAIN_LIVE_STREAM BITS( 3:2,2)
#define HVD_INIT_INPUT_MASK BMASK(4:4)
    #define HVD_INIT_INPUT_TSP BITS( 4:4,0)
    #define HVD_INIT_INPUT_DRV BITS( 4:4,1)
#define HVD_INIT_START_CODE_MASK BMASK(5:5)
    #define HVD_INIT_START_CODE_REMAINED BITS( 5:5,0)
    #define HVD_INIT_START_CODE_REMOVED BITS( 5:5,1)
#define HVD_INIT_UTOPIA_ENVI BIT( 6)
#define HVD_INIT_DBG_FW BIT( 7)


#define HVD_RV_BROKEN_BY_US_MASK 0x80000000





#define HVD_CCRB_PACKET_LENGTH 8

#define T35_DVB_COUNTRY_CODE 0xB5
#define T35_DVB_PROVIDER_CODE 0x0031

#define DTV_AFD_CODE 0x44544731
#define DTV_DTB1_CODE 0x47413934

#define DTV_BAR_CODE 0x06
#define DTV_CC_CODE 0x03
#define DTV_DIRECTTV_CODE 0x2F

#define MAX_NTSC_CC_ELE 4
#define MAX_NTSC_CC_BYTE (MAX_NTSC_CC_ELE << 2)
#define MAX_DTV_CC_BYTE 128

#define CC_NTSC1 1
#define CC_NTSC2 2
#define CC_ATSC 4
#define CC_157 (CC_NTSC1|CC_NTSC2)

#define USER_DATA_MODE_DVB_NORMAL 0x00
#define USER_DATA_MODE_DIRECTTV_CC 0x01
#define USER_DATA_MODE_FRM_PACKING_ARRANGEMENT 0x02
#define USER_DATA_MODE_ATSC_CC_RAW 0x04

#define MAX_608_CC_LEN 512
#define MAX_708_CC_LEN 512
# 201 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvHVD.h"
typedef void (*HVD_InterruptCb)(void);






typedef enum
{
    HVD_CC_SELECTOR_708_SW = 0x0000,
    HVD_CC_SELECTOR_RINGBUFFER = 0x0001

} EN_CC_HVD_INFO;





typedef enum
{
    E_HVD_FAIL=0,
    E_HVD_OK,
    E_HVD_RET_INVALID_PARAMETER,
    E_HVD_RET_ILLEGAL_ACCESS,
    E_HVD_RET_HARDWARE_BREAKDOWN,
    E_HVD_RET_OUTOF_MEMORY,
    E_HVD_RET_UNSUPPORTED,
    E_HVD_RET_TIMEOUT,
    E_HVD_RET_NOTREADY,
    E_HVD_RET_MEMORY_OVERWIRTE,
    E_HVD_RET_QUEUE_FULL,
    E_HVD_RET_RE_INIT,
    E_HVD_RET_NOT_RUNNING,
} HVD_Result;





typedef enum
{
    E_HVD_GSTATE_INIT,
    E_HVD_GSTATE_PLAY,
    E_HVD_GSTATE_PAUSE,
    E_HVD_GSTATE_STOP,
}HVD_Get_Play_State;





typedef enum
{
    E_HVD_SYNC_ATS,
    E_HVD_SYNC_PTS,
    E_HVD_SYNC_DTS,
    E_HVD_SYNC_STS,
}HVD_Sync_Type;






typedef enum
{
    E_HVD_TIME_UNIT_90KHZ,
    E_HVD_TIME_UNIT_1KHZ,
}HVD_Time_Unit_Type;





typedef enum
{
    E_HVD_DISP_SPEED_FF_32X=32,
    E_HVD_DISP_SPEED_FF_16X=16,
    E_HVD_DISP_SPEED_FF_8X=8,
    E_HVD_DISP_SPEED_FF_4X=4,
    E_HVD_DISP_SPEED_FF_2X=2,
    E_HVD_DISP_SPEED_NORMAL_1X= 1,
    E_HVD_DISP_SPEED_SF_2X= -2,
    E_HVD_DISP_SPEED_SF_4X= -4,
    E_HVD_DISP_SPEED_SF_8X= -8,
    E_HVD_DISP_SPEED_SF_16X= -16,
    E_HVD_DISP_SPEED_SF_32X= -32,
}HVD_Drv_Disp_Speed;





typedef enum
{
    E_HVD_DROP_DISPLAY_AUTO = (1<<0),
    E_HVD_DROP_DISPLAY_ONCE = (1<<1),
}HVD_Drop_Disp;





typedef enum
{
    E_HVD_FRC_MODE_NORMAL,
    E_HVD_FRC_MODE_32PULLDOWN,
    E_HVD_FRC_MODE_PAL2NTSC ,
    E_HVD_FRC_MODE_NTSC2PAL,
    E_HVD_FRC_MODE_DISP_2X,
    E_HVD_FRC_MODE_24_TO_50,
    E_HVD_FRC_MODE_50P_60P,
    E_HVD_FRC_MODE_60P_50P,
}HVD_FrmRateConv_Mode;





typedef enum
{
    E_HVD_AVC,
    E_HVD_AVS,
    E_HVD_RM,
}HVD_Codec;





typedef enum
{
    E_HVD_GMODE_IS_SHOW_ERR_FRM,
    E_HVD_GMODE_IS_REPEAT_LAST_FIELD,
    E_HVD_GMODE_IS_ERR_CONCEAL,
    E_HVD_GMODE_IS_SYNC_ON,
    E_HVD_GMODE_IS_PLAYBACK_FINISH,
    E_HVD_GMODE_SYNC_MODE,
    E_HVD_GMODE_SKIP_MODE,
    E_HVD_GMODE_DROP_MODE,
    E_HVD_GMODE_DISPLAY_SPEED,
    E_HVD_GMODE_FRC_MODE,
    E_HVD_GMODE_ISR_TYPE,
    E_HVD_GMODE_IS_STEP_DISPLAY=0x0100,
    E_HVD_GMODE_STREAM_TYPE,
}HVD_Get_Mode_Status;





typedef enum
{
    E_HVD_SKIP_DECODE_ALL,
    E_HVD_SKIP_DECODE_I,
    E_HVD_SKIP_DECODE_IP,
}HVD_Skip_Decode;





typedef enum
{
    E_HVD_FRM_TYPE_I,
    E_HVD_FRM_TYPE_P,
    E_HVD_FRM_TYPE_B,
}HVD_Frm_Type;





typedef enum
{
    E_HVD_FIELDTYPE_NONE,
    E_HVD_FIELDTYPE_TOP,
    E_HVD_FIELDTYPE_BOTTOM,
    E_HVD_FIELDTYPE_BOTH,
}HVD_FieldType;





typedef enum
{
    E_HVD_UART_LEVEL_NONE=0,
    E_HVD_UART_LEVEL_ERR,
    E_HVD_UART_LEVEL_INFO,
    E_HVD_UART_LEVEL_DBG,
    E_HVD_UART_LEVEL_TRACE,
    E_HVD_UART_LEVEL_FW,
} HVD_Uart_Level;





typedef enum
{
    E_HVD_FLUSH_PATTERN_SIZE,
    E_HVD_DUMMY_HW_FIFO,
} HVD_Pattern_Info;





typedef enum
{
    E_HVD_DS_BUF_MIUSEL,
    E_HVD_DS_BUF_ADDR,
    E_HVD_DS_BUF_SIZE,
    E_HVD_DS_VECTOR_DEPTH,
    E_HVD_DS_INFO_ADDR,
    E_HVD_DS_IS_ENABLED,
}HVD_DynamicScaling_Info;





typedef enum
{
    E_HVD_ISR_NONE = 0,
    E_HVD_ISR_DISP_ONE = BIT(0),
    E_HVD_ISR_DISP_REPEAT = BIT(1),
    E_HVD_ISR_DISP_WITH_CC = BIT(2),
    E_HVD_ISR_DISP_FIRST_FRM = BIT(3),

    E_HVD_ISR_DEC_ONE = BIT(8),
    E_HVD_ISR_DEC_I = BIT(9),
    E_HVD_ISR_DEC_HW_ERR = BIT(10),
    E_HVD_ISR_DEC_CC_FOUND = BIT(11),
    E_HVD_ISR_DEC_DISP_INFO_CHANGE = BIT(12),
    E_HVD_ISR_DEC_DATA_ERR = BIT(13),
    E_HVD_ISR_DEC_FIRST_FRM = BIT(14),
} HVD_ISR_Event;





typedef enum
{
    E_HVD_GFRMINFO_DISPLAY=0,
    E_HVD_GFRMINFO_DECODE,
    E_HVD_GFRMINFO_NEXT_DISPLAY,
} HVD_Get_Frm_Info_Type;





typedef enum
{
    E_HVD_GDATA_TYPE_DISP_CNT,
    E_HVD_GDATA_TYPE_SKIP_CNT,
    E_HVD_GDATA_TYPE_DROP_CNT,
    E_HVD_GDATA_TYPE_IDLE_CNT,
    E_HVD_GDATA_TYPE_VSYNC_CNT,
    E_HVD_GDATA_TYPE_MAIN_LOOP_CNT,
    E_HVD_GDATA_TYPE_AVC_LEVEL_IDC,
    E_HVD_GDATA_TYPE_DISP_Q_SIZE,
    E_HVD_GDATA_TYPE_ES_LEVEL,
    E_HVD_GDATA_TYPE_AVC_VUI_DISP_INFO,
    E_HVD_GDATA_TYPE_DISP_STC,
    E_HVD_GDATA_TYPE_USERDATA_IDX_TBL_SIZE,
    E_HVD_GDATA_TYPE_USERDATA_PACKET_SIZE,
    E_HVD_GDATA_TYPE_REAL_FRAMERATE,
    E_HVD_GDATA_TYPE_IS_ORI_INTERLACE_MODE,
    E_HVD_GDATA_TYPE_FRMPAC_ARRANGE_CNL_FLAG,
    E_HVD_GDATA_TYPE_FRMPAC_ARRANGE_TYPE,
    E_HVD_GDATA_TYPE_FB_USAGE_MEM
} HVD_GData_Type;





typedef enum
{
    E_HVD_TIMEUNIT_90KHZ,
    E_HVD_TIMEUNIT_MS,
} HVD_TimeUnit_Type;





typedef enum
{
    E_HVD_SSET_TIME_UNIT,
    E_HVD_SSET_PITCH,
    E_HVD_SSET_SYNC_EACH_FRM,
    E_HVD_SSET_MAX_DEC_TICK,
    E_HVD_SSET_AUTO_FREE_ES,
    E_HVD_SSET_MIN_FRAME_GAP,
    E_HVD_SSET_DISABLE_DEBLOCKING,
    E_HVD_SSET_DISABLE_QUARTER_PIXEL,
    E_HVD_SSET_MIU_BURST_CNT_LEVEL,
    E_HVD_SSET_DISABLE_ANTI_VDEAD,
    E_HVD_SSET_FLUSH_FRM_BUF,
} HVD_SSettings_Type;





typedef enum
{
    E_HVD_PATTERN_FLUSH = 0,
    E_HVD_PATTERN_FILEEND,
}HVD_PatternType;






typedef enum
{
    E_HVD_ES_LEVEL_NORMAL = 0,
    E_HVD_ES_LEVEL_UNDER = BIT(0),
    E_HVD_ES_LEVEL_OVER = BIT(1),
} HVD_ES_Level;





typedef enum
{
        E_HVD_ERRCODE_GENERAL_BASE = 0x0000,
    E_HVD_ERRCODE_OUT_OF_SPEC ,
    E_HVD_ERRCODE_UNKNOW_ERR,
    E_HVD_ERRCODE_HW_BREAK_DOWN,
    E_HVD_ERRCODE_HW_DEC_TIMEOUT,
    E_HVD_ERRCODE_OUT_OF_MEMORY,
    E_HVD_ERRCODE_UNKNOWN_CODEC,

        E_HVD_ERRCODE_AVC_BASE = 0x1000,
    E_HVD_ERRCODE_AVC_SPS_BROKEN,
    E_HVD_ERRCODE_AVC_SPS_NOT_IN_SPEC,
    E_HVD_ERRCODE_AVC_SPS_NOT_ENOUGH_FRM,
    E_HVD_ERRCODE_AVC_PPS_BROKEN,
    E_HVD_ERRCODE_AVC_REF_LIST,
    E_HVD_ERRCODE_AVC_NO_REF,
    E_HVD_ERRCODE_AVC_RES,


        E_HVD_ERRCODE_AVS_BASE = (0x2000),
    E_HVD_ERRCODE_AVS_RES,


        E_HVD_ERRCODE_RM_BASE = (0x3000),
    E_HVD_ERRCODE_RM_PACKET_HEADER,
    E_HVD_ERRCODE_RM_FRAME_HEADER,
    E_HVD_ERRCODE_RM_SLICE_HEADER,
    E_HVD_ERRCODE_RM_BYTE_CNT,
    E_HVD_ERRCODE_RM_DISP_TIMEOUT,
    E_HVD_ERRCODE_RM_NO_REF,
    E_HVD_ERRCODE_RM_RES,
}HVD_ErrorCode;





typedef enum
{
    E_HVD_TURBOINIT_NONE=0,
    E_HVD_TURBOINIT_CHECK = BIT(0),
    E_HVD_TURBOINIT_MEMORY = BIT(1),
    E_HVD_TURBOINIT_DISPLAY = BIT(2),
    E_HVD_TURBOINIT_FW_RELOAD = BIT(3),
}HVD_TurboInit_Type;





typedef enum
{
    E_HVD_FW_SOURCE_NONE,
    E_HVD_FW_SOURCE_DRAM,
    E_HVD_FW_SOURCE_FLASH,
}HVD_FWSourceType;





typedef enum
{
    E_HVD_DUMP_STATUS_DRV=BIT(0),
    E_HVD_DUMP_STATUS_FW=BIT(1),
    E_HVD_DUMP_STATUS_HW=BIT(2),
}HVD_DumpStatus;


typedef enum
{
    E_HVD_FB_REDUCTION_NONE = 0,
    E_HVD_FB_REDUCTION_1_2 = 1,
    E_HVD_FB_REDUCTION_1_4 = 2,
}HVD_FB_Reduction_Type;


typedef enum
{
    E_HVD_CLOCK_SPEED_NONE = 0,
    E_HVD_CLOCK_SPEED_HIGHEST,
    E_HVD_CLOCK_SPEED_HIGH,
    E_HVD_CLOCK_SPEED_MEDIUM,
    E_HVD_CLOCK_SPEED_LOW,
    E_HVD_CLOCK_SPEED_LOWEST,
    E_HVD_CLOCK_SPEED_DEFAULT,
} HVD_ClockSpeed;





typedef struct
{
    MS_U16 u16HorSize;
    MS_U16 u16VerSize;
    MS_U32 u32FrameRate;
    MS_U8 u8AspectRate;
    MS_U8 u8Interlace;
    MS_U8 u8AFD;
    MS_U8 bChroma_idc_Mono;
    MS_U16 u16SarWidth;
    MS_U16 u16SarHeight;
    MS_U16 u16CropRight;
    MS_U16 u16CropLeft;
    MS_U16 u16CropBottom;
    MS_U16 u16CropTop;
    MS_U16 u16Pitch;
    MS_U8 u8ColourPrimaries;

    MS_U8 reserved8_0;

} HVD_Disp_Info;





typedef struct
{
    MS_BOOL bAVC;
    MS_BOOL bAVS;
    MS_BOOL bRM;
    MS_U32 FWversion;
} HVD_DrvInfo;





typedef struct
{
    MS_BOOL bInit;
    MS_BOOL bBusy;
} HVD_DrvStatus;





typedef struct
{
    MS_U16 RV_Version;
    MS_U16 ulNumSizes;
    MS_U16 ulPicSizes_w[8];
    MS_U16 ulPicSizes_h[8];
} RV_Info;


typedef struct
{
    HVD_FB_Reduction_Type LumaFBReductionMode;
    HVD_FB_Reduction_Type ChromaFBReductionMode;
    MS_U8 u8EnableAutoMode;
} HVD_FB_Reduction;



typedef struct
{
    HVD_FWSourceType eFWSourceType;
    MS_U32 u32FWBinaryVAddr;
    MS_PHY u32FWBinaryAddr;
    MS_U32 u32FWBinarySize;
    MS_U32 u32VLCBinaryVAddr;
    MS_PHY u32VLCBinaryAddr;
    MS_U32 u32VLCBinarySize;
    MS_PHY u32MIU1BaseAddr;
    MS_U32 u32CodeBufVAddr;
    MS_PHY u32CodeBufAddr;
    MS_U32 u32CodeBufSize;
    MS_U32 u32FrameBufVAddr;
    MS_PHY u32FrameBufAddr;
    MS_U32 u32FrameBufSize;
    MS_U32 u32BitstreamBufVAddr;
    MS_PHY u32BitstreamBufAddr;
    MS_U32 u32BitstreamBufSize;
    MS_U32 u32DrvProcessBufVAddr;
    MS_PHY u32DrvProcessBufAddr;
    MS_U32 u32DrvProcessBufSize;
} HVD_MemCfg;





typedef struct
{
    MS_U32 u32ModeFlag;
    MS_U32 u32FrameRate;
    MS_U32 u32FrameRateBase;
    MS_U8 u8MinFrmGap;
    MS_U8 u8SyncType;
    MS_U16 u16Pitch;
    MS_U32 u32MaxDecTick;
    MS_BOOL bSyncEachFrm;
    MS_BOOL bAutoFreeES;
    MS_BOOL bAutoPowerSaving;
    MS_BOOL bDynamicScaling;
    MS_BOOL bFastDisplay;
    MS_BOOL bUserData;
    MS_U8 u8TurboInit;
    MS_U8 u8TimeUnit;
    MS_U16 u16DecoderClock;
    RV_Info* pRVFileInfo;
    HVD_FB_Reduction stFBReduction;
} HVD_Init_Settings;





typedef struct
{
    MS_U32 u32Staddr;
    MS_U32 u32Length;
    MS_U32 u32TimeStamp;
    MS_U32 u32ID_L;
    MS_U32 u32ID_H;
}HVD_Packet_Info;





typedef struct
{
    MS_PHY u32LumaAddr;
    MS_PHY u32ChromaAddr;
    MS_U32 u32TimeStamp;
    MS_U32 u32ID_L;
    MS_U32 u32ID_H;
    MS_U16 u16Pitch;
    MS_U16 u16Width;
    MS_U16 u16Height;
    HVD_Frm_Type eFrmType;
    HVD_FieldType eFieldType;
} HVD_Frame_Info;

typedef struct
{
    MS_BOOL aspect_ratio_info_present_flag;
    MS_U8 aspect_ratio_idc;
    MS_U16 sar_width;
    MS_U16 sar_height;
    MS_BOOL overscan_info_present_flag;
    MS_BOOL overscan_appropriate_flag;
    MS_BOOL video_signal_type_present_flag;
    MS_U8 video_format;
    MS_BOOL video_full_range_flag;
    MS_BOOL colour_description_present_flag;
    MS_U8 colour_primaries;
    MS_U8 transfer_characteristics;
    MS_U8 matrix_coefficients;
    MS_BOOL chroma_location_info_present_flag;
    MS_U8 chroma_sample_loc_type_top_field;
    MS_U8 chroma_sample_loc_type_bottom_field;
    MS_BOOL timing_info_present_flag;
    MS_BOOL fixed_frame_rate_flag;
    MS_U32 num_units_in_tick;
    MS_U32 time_scale;
} HVD_VUI_DISP_INFO;





typedef struct
{
    MS_U32 u32FrmrateUpBound;
    MS_U32 u32FrmrateLowBound;
    MS_U32 u32MvopUpBound;
    MS_U32 u32MvopLowBound;
} HVD_Disp_Info_Threshold;





typedef struct
{
    MS_U32 u32Pts;
    MS_U8 u8PicStruct;
    MS_U8 u8PicType;
    MS_U8 u8TopFieldFirst;
    MS_U8 u8RptFirstField;

    MS_U32 u32DataBuf;
    MS_U16 u16TmpRef;
    MS_U8 u8ByteCnt;
    MS_U8 u8Reserve;
} HVD_UserData_Info;

typedef struct
{
    MS_U8 u8Frm_packing_arr_cnl_flag;
    MS_U8 u8Frm_packing_arr_type;
    MS_U8 u8content_interpretation_type;
    MS_U8 u1Quincunx_sampling_flag;

    MS_U8 u1Spatial_flipping_flag;
    MS_U8 u1Frame0_flipping_flag;
    MS_U8 u1Field_views_flag;
    MS_U8 u1Current_frame_is_frame0_flag;

    MS_U8 u1Frame0_self_contained_flag;
    MS_U8 u1Frame1_self_contained_flag;
    MS_U8 u4Frame0_grid_position_x;
    MS_U8 u4Frame0_grid_position_y;

    MS_U8 u4Frame1_grid_position_x;
    MS_U8 u4Frame1_grid_position_y;
    MS_U8 u8Reserved01;
    MS_U8 u8Reserved02;
}HVD_FrmPackingSEI;





void MDrv_HVD_PowerCtrl(MS_BOOL bEnable);
void MDrv_HVD_SetOSRegBase(MS_U32 u32RegBaseAddr);
HVD_Result MDrv_HVD_Init(HVD_MemCfg *pStMemCfg, HVD_Init_Settings *pStInitSettings);
HVD_Result MDrv_HVD_Rst(MS_BOOL bErrHandle);
HVD_Result MDrv_HVD_Play(void);
HVD_Result MDrv_HVD_Exit(void);
HVD_Result MDrv_HVD_Pause(void);
HVD_Result MDrv_HVD_Flush(MS_BOOL bShowLast);
HVD_Result MDrv_HVD_StepDisp(void);
HVD_Result MDrv_HVD_StepDecode(void);
HVD_Result MDrv_HVD_PushQueue(HVD_Packet_Info *pInfo);
HVD_Result MDrv_HVD_PushQueue_Fire(void);
HVD_Result MDrv_HVD_DecodeIFrame(MS_PHY u32SrcSt, MS_U32 u32SrcSize);

HVD_Result MDrv_HVD_SetDataEnd(MS_BOOL bEnd);
HVD_Result MDrv_HVD_SetDispErrFrm(MS_BOOL bEnable);
HVD_Result MDrv_HVD_SetDispRepeatField(MS_BOOL bEnable);
HVD_Result MDrv_HVD_SetSkipDecMode(HVD_Skip_Decode eDecType);
HVD_Result MDrv_HVD_SetDispSpeed(HVD_Drv_Disp_Speed eSpeed);
HVD_Result MDrv_HVD_SetSyncActive(MS_BOOL bEnable);
HVD_Result MDrv_HVD_SetDropMode(HVD_Drop_Disp eMode, MS_U32 u32Arg);
HVD_Result MDrv_HVD_RstPTS(MS_U32 u32PTS);
HVD_Result MDrv_HVD_SetFrcMode(HVD_FrmRateConv_Mode eMode);
HVD_Result MDrv_HVD_SetSyncTolerance(MS_U32 u32Arg);
HVD_Result MDrv_HVD_SetSyncVideoDelay( MS_U32 u32Arg);
HVD_Result MDrv_HVD_SetSyncFreeRunTH(MS_U32 u32Arg);
HVD_Result MDrv_HVD_SetSyncRepeatTH(MS_U32 u32Arg);
HVD_Result MDrv_HVD_SetErrConceal(MS_BOOL u32Arg);
void MDrv_HVD_SetDbgLevel(HVD_Uart_Level elevel);
HVD_Result MDrv_HVD_SeekToPTS(MS_U32 u32PTS);
HVD_Result MDrv_HVD_SkipToPTS(MS_U32 u32PTS);
HVD_Result MDrv_HVD_SetFreezeImg(MS_BOOL bEnable);
HVD_Result MDrv_HVD_SetBlueScreen(MS_BOOL bEnable);
HVD_Result MDrv_HVD_SetDispOneField(MS_BOOL bEnable);
HVD_Result MDrv_HVD_SetISREvent(MS_U32 u32Event, HVD_InterruptCb fnISRHandler);
MS_BOOL MDrv_HVD_SetEnableISR(MS_BOOL bEnable);
MS_BOOL MDrv_HVD_SetForceISR(MS_BOOL bEnable);
MS_BOOL MDrv_HVD_SetMVOPDone(void);
HVD_Result MDrv_HVD_SetVirtualBox(MS_U16 u16Width, MS_U16 u16Height);
HVD_Result MDrv_HVD_SetDynScalingParam(void *pStAddr, MS_U32 u32Size);
HVD_Result MDrv_HVD_SetAutoRmLstZeroByte(MS_BOOL bOn);
HVD_Result MDrv_HVD_SetDispInfoTH(HVD_Disp_Info_Threshold *DispInfoTH);
HVD_Result MDrv_HVD_SetFastDisplay(MS_BOOL bFastDisplay);
HVD_Result MDrv_HVD_SetIgnoreErrRef(MS_BOOL bIgnore);
HVD_Result MDrv_HVD_ForceFollowDTVSpec(MS_BOOL bEnable);

MS_BOOL MDrv_HVD_IsISROccured(void);
MS_BOOL MDrv_HVD_IsDispFinish(void);
MS_BOOL MDrv_HVD_IsFrameShowed(void);
MS_BOOL MDrv_HVD_IsStepDecodeDone(void);
HVD_Result MDrv_HVD_CheckDispInfoRdy(void);
MS_BOOL MDrv_HVD_IsDispInfoChg(void);
MS_BOOL MDrv_HVD_IsIdle(void);
MS_BOOL MDrv_HVD_IsSyncStart(void);
MS_BOOL MDrv_HVD_IsSyncReach(void);
MS_BOOL MDrv_HVD_IsLowDelay(void);
MS_BOOL MDrv_HVD_IsIFrmFound(void);
MS_BOOL MDrv_HVD_Is1stFrmRdy(void);
MS_BOOL MDrv_HVD_IsAllBufferEmpty(void);
HVD_Result MDrv_HVD_IsAlive(void);

MS_U32 MDrv_HVD_GetBBUVacancy(void);
HVD_Result MDrv_HVD_GetDispInfo(HVD_Disp_Info *pinfo);
MS_U32 MDrv_HVD_GetPTS(void);
MS_U32 MDrv_HVD_GetNextPTS(void);
MS_U32 MDrv_HVD_GetNextDispQPtr(void);
MS_U32 MDrv_HVD_GetDataErrCnt(void);
MS_U32 MDrv_HVD_GetDecErrCnt(void);
MS_U32 MDrv_HVD_GetESWritePtr(void);
MS_U32 MDrv_HVD_GetESReadPtr(void);
MS_BOOL MDrv_HVD_GetCaps(HVD_Codec u32Type);
MS_U32 MDrv_HVD_GetErrCode(void);
MS_U32 MDrv_HVD_GetPlayMode(HVD_Get_Mode_Status eMode);
HVD_Get_Play_State MDrv_HVD_GetPlayState(void);
MS_U32 MDrv_HVD_GetDecodeCnt(void);
MS_U8 MDrv_HVD_GetActiveFormat(void);
const HVD_DrvInfo *MDrv_HVD_GetInfo(void);
HVD_Result MDrv_HVD_GetLibVer(const MSIF_Version **ppVersion);
MS_BOOL MDrv_HVD_GetStatus(HVD_DrvStatus *pstatus);
HVD_Result MDrv_HVD_GetFrmInfo(HVD_Get_Frm_Info_Type eType, HVD_Frame_Info *pInfo);
MS_BOOL MDrv_HVD_GetISRInfo(MS_U32 *eType);
MS_U32 MDrv_HVD_CalLumaSum(HVD_Get_Frm_Info_Type eType);
MS_U32 MDrv_HVD_GetUserData_Wptr(void);
MS_U32 MDrv_HVD_GetUserData_Packet(MS_U32 u32Idx, MS_U32 *u32Size);
HVD_Result MDrv_HVD_GenPattern(HVD_PatternType eType, MS_U32 u32VAddr, MS_U32 *u32Size);
MS_U32 MDrv_HVD_GetPatternInfo(HVD_Pattern_Info eType);
MS_U32 MDrv_HVD_GetDynamicScalingInfo(HVD_DynamicScaling_Info eType);

MS_U32 MDrv_HVD_GetData(HVD_GData_Type eType);
MS_U32 MDrv_HVD_GetMem_Dbg(MS_U32 u32Addr);
void MDrv_HVD_DbgDumpStatus(HVD_DumpStatus eFlag);
void MDrv_HVD_SetMem_Dbg(MS_U32 u32Addr, MS_U32 u32Arg);
HVD_Result MDrv_HVD_SetCmd_Dbg(MS_U32 u32Cmd, MS_U32 u32Arg);
HVD_Result MDrv_HVD_SetSettings_Pro( HVD_SSettings_Type eType, MS_U32 u32Arg);
HVD_Result MDrv_HVD_SetBalanceBW(MS_U8 qp_cnt, MS_U8 db_cnt, MS_U8 upper);
MS_S64 MDrv_HVD_GetPtsStcDiff(void);
MS_U32 MDrv_HVD_GetDrvFwVer(void);
MS_U32 MDrv_HVD_GetFwVer(void);
HVD_Result MDrv_HVD_SetFdMaskDelayCnt(MS_U8 u8DelayCnt);
HVD_Result MDrv_HVD_SetOutputFRCMode(MS_U8 u8FrameRate, MS_U8 u8Interlace);
HVD_Result MDrv_HVD_DispFrame(MS_U32 u32FrmIdx);
HVD_Result MDrv_HVD_FreeFrame(MS_U32 u32FrmIdx);
HVD_Result MDrv_HVD_EnableDispQue(MS_BOOL bEnable);
HVD_Result MDrv_HVD_EnableVSizeAlign(MS_BOOL bEnable);
HVD_Result MDrv_HVD_Disp_Ignore_Crop(MS_BOOL bEnable);
HVD_Result MDrv_HVD_SetFRCDropType(MS_U8 u8DropType);
MS_U32 MDrv_HVD_GetDrvFwVer(void);
HVD_Result MDrv_HVD_GetUserDataInfo(HVD_UserData_Info* pUsrInfo);
MS_BOOL MDrv_HVD_GetUsrDataIsAvailable(void);
HVD_Result MDrv_HVD_SetDTVUserDataMode(MS_U8 u8UserDataMode);
HVD_Result MDrv_HVD_ForceInterlaceMode(MS_U8 u8Mode);
HVD_Result MDrv_HVD_ShowDecodeOrder(MS_U8 u8Mode);
MS_BOOL MDrv_HVD_GetFrmRateIsSupported(void);
HVD_Result MDrv_HVD_GetFrmPackingArrSEI(HVD_FrmPackingSEI *pFrmPacking);

HVD_Result MDrv_HVD_CC_Init(void);
HVD_Result MDrv_HVD_CC_SetCfg(MS_U8 u8Operation, MS_U16 u16BufferSize, MS_U8 u8CC608);
HVD_Result MDrv_HVD_CC_Set_RB_StartAddr(MS_U32 u32StartPAddress, MS_U8 u8CC608);
HVD_Result MDrv_HVD_CC_SyncRB_RdAddr2WrAddr(MS_U8 u8CC608);
HVD_Result MDrv_HVD_CC_Adv_RB_ReadAddr(MS_U32 u32EachPacketSize, MS_U8 u8CC608);
HVD_Result MDrv_HVD_CC_DisableParsing(MS_U8 u8CC608);
HVD_Result MDrv_HVD_CC_GetInfo(MS_U32 selector, MS_U8 type, MS_U32 *p1, MS_U32 *p2);
MS_BOOL MDrv_HVD_CC_IsHvdRstDone(MS_U8 type);
MS_U8 MDrv_HVD_CC_GetOverflowStatus(MS_U8 u8CC608);
MS_U32 MDrv_HVD_CC_Get_RB_WriteAddr(MS_U8 u8CC608);
MS_U32 MDrv_HVD_CC_Get_RB_ReadAddr(MS_U8 u8CC608);
MS_BOOL MDrv_HVD_CC_InfoEnhanceMode(MS_BOOL bEnable);

HVD_Result MDrv_HVD_SetHVDClockSpeed(HVD_ClockSpeed eClockSpeed);
HVD_Result MDrv_HVD_SetVPUClockSpeed(HVD_ClockSpeed eClockSpeed);

HVD_Result MDrv_HVD_PushDispQWithRefNum(MS_BOOL bEnable);
HVD_Result MDrv_HVD_ShowFirstFrameDirect(MS_BOOL bEnable);
HVD_Result MDrv_HVD_OnePendingBufferMode(MS_BOOL bEnable);
HVD_Result MDrv_HVD_FrameRateHandling(MS_BOOL bEnable, MS_U32 u32FrameRate);
HVD_Result MDrv_HVD_AutoExhaustESMode(MS_U32 u32ESbound);
HVD_Result MDrv_HVD_SetMinTspDataSize(MS_U32 u32Size);
HVD_Result MDrv_HVD_AVCSupportRefNumOverMaxDBPSize(MS_BOOL bEnable);

#ifdef __cplusplus
}
#endif

#endif
# 102 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU_v2.h"
#ifndef _DRV_MIU_V2_H_
#define _DRV_MIU_V2_H_ 

#ifdef __cplusplus
extern "C"
{
#endif

#include "MsTypes.h"
#include "UFO.h"




typedef enum _eMIUIoctlCmd
{
    MDrv_CMD_MIU_Init,
    MDrv_CMD_MIU_Mask_Req_OPM_R,
    MDrv_CMD_MIU_Mask_Req_DNRB_R,
    MDrv_CMD_MIU_Mask_Req_DNRB_W,
    MDrv_CMD_MIU_Mask_Req_DNRB_RW,
    MDrv_CMD_MIU_Mask_Req_SC_RW,
    MDrv_CMD_MIU_Mask_Req_MVOP_R,
    MDrv_CMD_MIU_Mask_Req_MVD_R,
    MDrv_CMD_MIU_Mask_Req_MVD_W,
    MDrv_CMD_MIU_Mask_Req_MVD_RW,
    MDrv_CMD_MIU_Mask_Req_AUDIO_RW,
    MDrv_CMD_MIU_Mask_Req,
    MDrv_CMD_MIU_UnMask_Req,
    MDrv_CMD_MIU_SetSsc,
    MDrv_CMD_MIU_SetSscValue,
    MDrv_CMD_MIU_Protect,
    MDrv_CMD_MIU_ProtectEx,
    MDrv_CMD_MIU_SelMIU,
    MDrv_CMD_MIU_GetProtectInfo,
    MDrv_CMD_MIU_SetGroupPriority,
    MDrv_CMD_MIU_SetHighPriority,
    MDrv_CMD_MIU_PrintProtectInfo,
    MDrv_CMD_MIU_Dram_Size,
    MDrv_CMD_MIU_ProtectAlign,
    MDrv_CMD_MIU_GetDramType,

}eMIUIoctlCmd;
# 177 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/drvMIU_v2.h"
typedef struct _MIU_RET
{
    MS_BOOL bRet;
}MIU_RET, *PMIU_RET;

typedef struct _MIU_MASK
{
    MS_U8 u8Mask;
    MS_U8 u8Miu;
}MIU_MIU_MASK, *PMIU_MIU_MASK;


typedef struct _MIU_MIUREQ_MASK
{
    MS_U8 u8Miu;
    eMIUClientID eClientID;
}MIU_MIUREQ_MASK, *PMIU_MIUREQ_MASK;


typedef struct _MIU_SET_SSC
{
    MS_U16 u16Fmodulation;
    MS_U16 u16FDeviation;
    MS_BOOL bEnable;
    MS_BOOL bRet;
}MIU_SET_SSC, *PMIU_SET_SSC;


typedef struct _MIU_SET_SSCVALUE
{
    MS_U8 u8MiuDev;
    MS_U16 u16Fmodulation;
    MS_U16 u16FDeviation;
    MS_BOOL bEnable;
    MS_BOOL bRet;
}MIU_SET_SSCVALUE, *PMIU_SET_SSCVALUE;



typedef MS_U8 MIU_PROYECT_ID[16];

#ifdef BIFROST_32BIT_MODE
typedef struct DLL_PACKED _MIU_PROTECT
{
    MS_U8 u8Blockx;
    MS_U8 *pu8ProtectId;
#if defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300)
    MS_U32 u32Start;
    MS_U32 u32End;
#else
    MS_U32 phy64Start;
    MS_U32 phy64End;
#endif
    MS_BOOL bSetFlag;
    MS_BOOL bRet;
}MIU_PROTECT, *PMIU_PROTECT;
#else
typedef struct DLL_PACKED _MIU_PROTECT
{
    MS_U8 u8Blockx;
    MS_U8 *pu8ProtectId;
#if defined(UFO_PUBLIC_HEADER_212)||defined(UFO_PUBLIC_HEADER_300)
    MS_U32 u32Start;
    MS_U32 u32End;
#else
    MS_PHY phy64Start;
    MS_PHY phy64End;
#endif
    MS_BOOL bSetFlag;
    MS_BOOL bRet;
}MIU_PROTECT, *PMIU_PROTECT;
#endif


typedef struct _MIU_PROTECTEx
{
    MS_U8 u8Blockx;
    MS_U32 *pu32ProtectId;
    MS_PHY phy64Start;
    MS_PHY phy64End;
    MS_BOOL bSetFlag;
}MIU_PROTECTEx, *PMIU_PROTECTEx;



typedef struct _MIU_SELMIU
{
    eMIUClientID eClientID;
    eMIU_SelType eType;
    MS_BOOL bRet;
}MIU_SELMIU, *PMIU_SELMIU;


typedef struct _MIU_GETDRAMTYPE
{
    MIU_ID eMiu;
    MIU_DDR_TYPE* pType;
}MIU_GETDRAMTYPE, *PMIU_GETDRAMTYPE;


typedef struct DLL_PACKED _MIU_GETPROTECTINFO
{
    MS_U8 u8MiuDev;
    MIU_PortectInfo *pInfo;
    MS_BOOL bRet;
}MIU_GETPROTECTINFO, *PMIU_GETPROTECTINFO;


typedef struct _MIU_SETGROUPPRIORITY
{
    MS_U8 u8MiuDev;
    MIU_GroupPriority sPriority;
    MS_BOOL bRet;
}MIU_SETGROUPPRIORITY, *PMIU_SETGROUPPRIORITY;



typedef struct _MIU_SETHIGHPRIORITY
{
    MS_U8 u8MiuDev;
    eMIUClientID eClientID;
    MS_BOOL bMask;
    MS_BOOL bRet;
}MIU_SETHIGHPRIORITY, *PMIU_SETHIGHPRIORITY;


typedef struct _MIU_DRAM_SIZE
{
    MS_U8 u8MiuDev;
    MS_U8 DramSize;
    MS_BOOL bRet;
}MIU_DRAM_SIZE, *PMIU_DRAM_SIZE;


typedef struct DLL_PACKED _MIU_PROTECT_ALIGN
{
    MS_U32 *u32PageShift;
    MS_BOOL bRet;
}MIU_PROTECT_ALIGN, *PMIU_PROTECT_ALIGN;

#ifdef __cplusplus
}
#endif

#endif
# 98 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto_EX.h"
#ifndef _APIXC_AUTO_EX_H_
#define _APIXC_AUTO_EX_H_ 


#include "MsCommon.h"
#include "MsOS.h"





#include "apiXC_EX.h"
#include "apiXC_Adc_EX.h"


#ifdef __cplusplus
extern "C"
{
#endif
# 125 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto_EX.h"
#define XC_AUTO_EX_SIGNAL_INFO_VERSION 1




typedef enum
{
    E_XC_AUTO_EX_TUNE_NULL = 0x00,


    E_XC_AUTO_EX_TUNE_VALID_DATA = 0x01,
    E_XC_AUTO_EX_TUNE_POSITION = 0x02,
    E_XC_AUTO_EX_TUNE_FREQ = 0x04,
    E_XC_AUTO_EX_TUNE_PHASE = 0x08,
    E_XC_AUTO_EX_TUNE_BASIC = E_XC_AUTO_EX_TUNE_VALID_DATA | E_XC_AUTO_EX_TUNE_POSITION | E_XC_AUTO_EX_TUNE_FREQ | E_XC_AUTO_EX_TUNE_PHASE,


    E_XC_AUTO_EX_TUNE_RGB_OFFSET = 0x10,
    E_XC_AUTO_EX_TUNE_RGB_GAIN = 0X20,
    E_XC_AUTO_EX_TUNE_RGB_COLOR = E_XC_AUTO_EX_TUNE_RGB_OFFSET | E_XC_AUTO_EX_TUNE_RGB_GAIN,


    E_XC_AUTO_EX_TUNE_YUV_COLOR = 0X40,

    E_XC_AUTO_EX_TUNE_SCART_RGB_GAIN = 0x80,


    E_XC_AUTO_EX_TUNE_ADVANCE = E_XC_AUTO_EX_TUNE_BASIC | E_XC_AUTO_EX_TUNE_RGB_COLOR,
} XC_Auto_EX_TuneType;

typedef enum
{
    E_XC_AUTO_EX_INTERNAL_CALIBRATION,
    E_XC_AUTO_EX_EXTERNAL_CALIBRATION,
} XC_Auto_EX_CalibrationType;

typedef enum
{
    E_XC_AUTO_EX_HW_CALIBRATION,
    E_XC_AUTO_EX_SW_CALIBRATION,
} XC_Auto_EX_CalibrationMode;

typedef struct
{
    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;
    MS_U16 u16HorizontalTotal;
    MS_U16 u16HResolution;
    MS_U8 u8Phase;
} XC_Auto_EX_Signal_Info;

typedef struct
{
    MS_U16 u16Version;
    MS_U16 u16HorizontalStart;
    MS_U16 u16VerticalStart;
    MS_U16 u16HorizontalTotal;
    MS_U16 u16HResolution;
    MS_U16 u16Phase;
} XC_Auto_EX_Signal_Info_Ex;
# 199 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto_EX.h"
DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_Geometry(XC_DEVICE_ID *pDeviceId, XC_Auto_EX_TuneType enAutoTuneType, XC_Auto_EX_Signal_Info *ActiveInfo, XC_Auto_EX_Signal_Info *StandardInfo, XC_EX_SCALER_WIN eWindow);

DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_Geometry_Ex(XC_DEVICE_ID *pDeviceId, XC_Auto_EX_TuneType enAutoTuneType, XC_Auto_EX_Signal_Info_Ex *ActiveInfo, XC_Auto_EX_Signal_Info_Ex *StandardInfo, XC_EX_SCALER_WIN eWindow);

DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_StopAutoGeometry(XC_DEVICE_ID *pDeviceId);

DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_GainOffset(XC_DEVICE_ID *pDeviceId, XC_Auto_EX_CalibrationType type, XC_Auto_EX_TuneType enAutoTuneType, XC_ADC_EX_AdcGainOffsetSetting *pstADCSetting, XC_EX_SCALER_WIN eWindow);







DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_GetHWFixedGainOffset(XC_DEVICE_ID *pDeviceId, XC_Auto_EX_TuneType enAutoTuneType, XC_ADC_EX_AdcGainOffsetSetting *pstADCSetting);






DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_SetValidData(XC_DEVICE_ID *pDeviceId, MS_U8 Value);
# 231 "/home/beal.wu/i2_work/utopia-0824/UTPA2-700.0.x/build/../../mxlib/include/apiXC_Auto_EX.h"
DLL_PUBLIC void MApi_XC_Auto_EX_AutoOffset(XC_DEVICE_ID *pDeviceId, MS_BOOL bEnable, MS_BOOL bIsYPbPrFlag);







DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_DetectWidth(XC_DEVICE_ID *pDeviceId, XC_Auto_EX_Signal_Info_Ex *pSignalInfo , XC_EX_SCALER_WIN eWindow);






DLL_PUBLIC MS_BOOL MApi_XC_Auto_EX_SetCalibrationMode(XC_DEVICE_ID *pDeviceId, XC_Auto_EX_CalibrationMode eMode);





DLL_PUBLIC void MApi_XC_Auto_EX_GetCalibrationMode(XC_DEVICE_ID *pDeviceId, XC_Auto_EX_CalibrationMode *eMode);


#ifdef __cplusplus
}
#endif

#endif
